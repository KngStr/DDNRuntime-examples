//----------------------------------------------------------------------------
//  ReachFramework.dll: ReachFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.ReachFramework
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.ReachFramework;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Collation')]
  DNCollation = type Integer;
  DNCollationHelper = record helper for DNCollation
  public const
    Unknown = 0;
    Collated = 1;
    Uncollated = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.ConflictStatus')]
  DNConflictStatus = type Integer;
  DNConflictStatusHelper = record helper for DNConflictStatus
  public const
    NoConflict = 0;
    ConflictResolved = 1;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.DeviceFontSubstitution')]
  DNDeviceFontSubstitution = type Integer;
  DNDeviceFontSubstitutionHelper = record helper for DNDeviceFontSubstitution
  public const
    Unknown = 0;
    Off = 1;
    On_ = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Duplexing')]
  DNDuplexing = type Integer;
  DNDuplexingHelper = record helper for DNDuplexing
  public const
    Unknown = 0;
    OneSided = 1;
    TwoSidedShortEdge = 2;
    TwoSidedLongEdge = 3;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.InputBin')]
  DNInputBin = type Integer;
  DNInputBinHelper = record helper for DNInputBin
  public const
    Unknown = 0;
    AutoSelect = 1;
    Cassette = 2;
    Tractor = 3;
    AutoSheetFeeder = 4;
    Manual = 5;
  end;


  //-------------namespace: System.Printing.Interop----------------
  [DNTypeName('System.Printing.Interop.BaseDevModeType')]
  DNBaseDevModeType = type Integer;
  DNBaseDevModeTypeHelper = record helper for DNBaseDevModeType
  public const
    UserDefault = 0;
    PrinterDefault = 1;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.OutputColor')]
  DNOutputColor = type Integer;
  DNOutputColorHelper = record helper for DNOutputColor
  public const
    Unknown = 0;
    Color = 1;
    Grayscale = 2;
    Monochrome = 3;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.OutputQuality')]
  DNOutputQuality = type Integer;
  DNOutputQualityHelper = record helper for DNOutputQuality
  public const
    Unknown = 0;
    Automatic = 1;
    Draft = 2;
    Fax = 3;
    High = 4;
    Normal = 5;
    Photographic = 6;
    Text = 7;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageBorderless')]
  DNPageBorderless = type Integer;
  DNPageBorderlessHelper = record helper for DNPageBorderless
  public const
    Unknown = 0;
    Borderless = 1;
    None = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageMediaSizeName')]
  DNPageMediaSizeName = type Integer;
  DNPageMediaSizeNameHelper = record helper for DNPageMediaSizeName
  public const
    Unknown = 0;
    ISOA0 = 1;
    ISOA1 = 2;
    ISOA10 = 3;
    ISOA2 = 4;
    ISOA3 = 5;
    ISOA3Rotated = 6;
    ISOA3Extra = 7;
    ISOA4 = 8;
    ISOA4Rotated = 9;
    ISOA4Extra = 10;
    ISOA5 = 11;
    ISOA5Rotated = 12;
    ISOA5Extra = 13;
    ISOA6 = 14;
    ISOA6Rotated = 15;
    ISOA7 = 16;
    ISOA8 = 17;
    ISOA9 = 18;
    ISOB0 = 19;
    ISOB1 = 20;
    ISOB10 = 21;
    ISOB2 = 22;
    ISOB3 = 23;
    ISOB4 = 24;
    ISOB4Envelope = 25;
    ISOB5Envelope = 26;
    ISOB5Extra = 27;
    ISOB7 = 28;
    ISOB8 = 29;
    ISOB9 = 30;
    ISOC0 = 31;
    ISOC1 = 32;
    ISOC10 = 33;
    ISOC2 = 34;
    ISOC3 = 35;
    ISOC3Envelope = 36;
    ISOC4 = 37;
    ISOC4Envelope = 38;
    ISOC5 = 39;
    ISOC5Envelope = 40;
    ISOC6 = 41;
    ISOC6Envelope = 42;
    ISOC6C5Envelope = 43;
    ISOC7 = 44;
    ISOC8 = 45;
    ISOC9 = 46;
    ISODLEnvelope = 47;
    ISODLEnvelopeRotated = 48;
    ISOSRA3 = 49;
    JapanQuadrupleHagakiPostcard = 50;
    JISB0 = 51;
    JISB1 = 52;
    JISB10 = 53;
    JISB2 = 54;
    JISB3 = 55;
    JISB4 = 56;
    JISB4Rotated = 57;
    JISB5 = 58;
    JISB5Rotated = 59;
    JISB6 = 60;
    JISB6Rotated = 61;
    JISB7 = 62;
    JISB8 = 63;
    JISB9 = 64;
    JapanChou3Envelope = 65;
    JapanChou3EnvelopeRotated = 66;
    JapanChou4Envelope = 67;
    JapanChou4EnvelopeRotated = 68;
    JapanHagakiPostcard = 69;
    JapanHagakiPostcardRotated = 70;
    JapanKaku2Envelope = 71;
    JapanKaku2EnvelopeRotated = 72;
    JapanKaku3Envelope = 73;
    JapanKaku3EnvelopeRotated = 74;
    JapanYou4Envelope = 75;
    NorthAmerica10x11 = 76;
    NorthAmerica10x14 = 77;
    NorthAmerica11x17 = 78;
    NorthAmerica9x11 = 79;
    NorthAmericaArchitectureASheet = 80;
    NorthAmericaArchitectureBSheet = 81;
    NorthAmericaArchitectureCSheet = 82;
    NorthAmericaArchitectureDSheet = 83;
    NorthAmericaArchitectureESheet = 84;
    NorthAmericaCSheet = 85;
    NorthAmericaDSheet = 86;
    NorthAmericaESheet = 87;
    NorthAmericaExecutive = 88;
    NorthAmericaGermanLegalFanfold = 89;
    NorthAmericaGermanStandardFanfold = 90;
    NorthAmericaLegal = 91;
    NorthAmericaLegalExtra = 92;
    NorthAmericaLetter = 93;
    NorthAmericaLetterRotated = 94;
    NorthAmericaLetterExtra = 95;
    NorthAmericaLetterPlus = 96;
    NorthAmericaMonarchEnvelope = 97;
    NorthAmericaNote = 98;
    NorthAmericaNumber10Envelope = 99;
    NorthAmericaNumber10EnvelopeRotated = 100;
    NorthAmericaNumber9Envelope = 101;
    NorthAmericaNumber11Envelope = 102;
    NorthAmericaNumber12Envelope = 103;
    NorthAmericaNumber14Envelope = 104;
    NorthAmericaPersonalEnvelope = 105;
    NorthAmericaQuarto = 106;
    NorthAmericaStatement = 107;
    NorthAmericaSuperA = 108;
    NorthAmericaSuperB = 109;
    NorthAmericaTabloid = 110;
    NorthAmericaTabloidExtra = 111;
    OtherMetricA4Plus = 112;
    OtherMetricA3Plus = 113;
    OtherMetricFolio = 114;
    OtherMetricInviteEnvelope = 115;
    OtherMetricItalianEnvelope = 116;
    PRC1Envelope = 117;
    PRC1EnvelopeRotated = 118;
    PRC10Envelope = 119;
    PRC10EnvelopeRotated = 120;
    PRC16K = 121;
    PRC16KRotated = 122;
    PRC2Envelope = 123;
    PRC2EnvelopeRotated = 124;
    PRC32K = 125;
    PRC32KRotated = 126;
    PRC32KBig = 127;
    PRC3Envelope = 128;
    PRC3EnvelopeRotated = 129;
    PRC4Envelope = 130;
    PRC4EnvelopeRotated = 131;
    PRC5Envelope = 132;
    PRC5EnvelopeRotated = 133;
    PRC6Envelope = 134;
    PRC6EnvelopeRotated = 135;
    PRC7Envelope = 136;
    PRC7EnvelopeRotated = 137;
    PRC8Envelope = 138;
    PRC8EnvelopeRotated = 139;
    PRC9Envelope = 140;
    PRC9EnvelopeRotated = 141;
    Roll04Inch = 142;
    Roll06Inch = 143;
    Roll08Inch = 144;
    Roll12Inch = 145;
    Roll15Inch = 146;
    Roll18Inch = 147;
    Roll22Inch = 148;
    Roll24Inch = 149;
    Roll30Inch = 150;
    Roll36Inch = 151;
    Roll54Inch = 152;
    JapanDoubleHagakiPostcard = 153;
    JapanDoubleHagakiPostcardRotated = 154;
    JapanLPhoto = 155;
    Japan2LPhoto = 156;
    JapanYou1Envelope = 157;
    JapanYou2Envelope = 158;
    JapanYou3Envelope = 159;
    JapanYou4EnvelopeRotated = 160;
    JapanYou6Envelope = 161;
    JapanYou6EnvelopeRotated = 162;
    NorthAmerica4x6 = 163;
    NorthAmerica4x8 = 164;
    NorthAmerica5x7 = 165;
    NorthAmerica8x10 = 166;
    NorthAmerica10x12 = 167;
    NorthAmerica14x17 = 168;
    BusinessCard = 169;
    CreditCard = 170;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageMediaType')]
  DNPageMediaType = type Integer;
  DNPageMediaTypeHelper = record helper for DNPageMediaType
  public const
    Unknown = 0;
    AutoSelect = 1;
    Archival = 2;
    BackPrintFilm = 3;
    Bond = 4;
    CardStock = 5;
    Continuous = 6;
    EnvelopePlain = 7;
    EnvelopeWindow = 8;
    Fabric = 9;
    HighResolution = 10;
    Label_ = 11;
    MultiLayerForm = 12;
    MultiPartForm = 13;
    Photographic = 14;
    PhotographicFilm = 15;
    PhotographicGlossy = 16;
    PhotographicHighGloss = 17;
    PhotographicMatte = 18;
    PhotographicSatin = 19;
    PhotographicSemiGloss = 20;
    Plain = 21;
    Screen = 22;
    ScreenPaged = 23;
    Stationery = 24;
    TabStockFull = 25;
    TabStockPreCut = 26;
    Transparency = 27;
    TShirtTransfer = 28;
    None = 29;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageOrder')]
  DNPageOrder = type Integer;
  DNPageOrderHelper = record helper for DNPageOrder
  public const
    Unknown = 0;
    Standard = 1;
    Reverse = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageOrientation')]
  DNPageOrientation = type Integer;
  DNPageOrientationHelper = record helper for DNPageOrientation
  public const
    Unknown = 0;
    Landscape = 1;
    Portrait = 2;
    ReverseLandscape = 3;
    ReversePortrait = 4;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PageQualitativeResolution')]
  DNPageQualitativeResolution = type Integer;
  DNPageQualitativeResolutionHelper = record helper for DNPageQualitativeResolution
  public const
    Unknown = 0;
    Default_ = 1;
    Draft = 2;
    High = 3;
    Normal = 4;
    Other = 5;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PagesPerSheetDirection')]
  DNPagesPerSheetDirection = type Integer;
  DNPagesPerSheetDirectionHelper = record helper for DNPagesPerSheetDirection
  public const
    Unknown = 0;
    RightBottom = 1;
    BottomRight = 2;
    LeftBottom = 3;
    BottomLeft = 4;
    RightTop = 5;
    TopRight = 6;
    LeftTop = 7;
    TopLeft = 8;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PhotoPrintingIntent')]
  DNPhotoPrintingIntent = type Integer;
  DNPhotoPrintingIntentHelper = record helper for DNPhotoPrintingIntent
  public const
    Unknown = 0;
    None = 1;
    PhotoBest = 2;
    PhotoDraft = 3;
    PhotoStandard = 4;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.PrintTicketScope')]
  DNPrintTicketScope = type Integer;
  DNPrintTicketScopeHelper = record helper for DNPrintTicketScope
  public const
    PageScope = 0;
    DocumentScope = 1;
    JobScope = 2;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.Stapling')]
  DNStapling = type Integer;
  DNStaplingHelper = record helper for DNStapling
  public const
    Unknown = 0;
    SaddleStitch = 1;
    StapleBottomLeft = 2;
    StapleBottomRight = 3;
    StapleDualLeft = 4;
    StapleDualRight = 5;
    StapleDualTop = 6;
    StapleDualBottom = 7;
    StapleTopLeft = 8;
    StapleTopRight = 9;
    None = 10;
  end;


  //-------------namespace: System.Printing----------------
  [DNTypeName('System.Printing.TrueTypeFontMode')]
  DNTrueTypeFontMode = type Integer;
  DNTrueTypeFontModeHelper = record helper for DNTrueTypeFontMode
  public const
    Unknown = 0;
    Automatic = 1;
    DownloadAsOutlineFont = 2;
    DownloadAsRasterFont = 3;
    DownloadAsNativeTrueTypeFont = 4;
    RenderAsBitmap = 5;
  end;




type


{ declares }

  DNPrintSystemException = interface; // type: System.Printing.PrintSystemException, namespace: System.Printing
  DNPrintCommitAttributesException = interface; // type: System.Printing.PrintCommitAttributesException, namespace: System.Printing
  DNPrintingNotSupportedException = interface; // type: System.Printing.PrintingNotSupportedException, namespace: System.Printing
  DNPrintJobException = interface; // type: System.Printing.PrintJobException, namespace: System.Printing
  DNPrintingCanceledException = interface; // type: System.Printing.PrintingCanceledException, namespace: System.Printing
  DNPrintQueueException = interface; // type: System.Printing.PrintQueueException, namespace: System.Printing
  DNPrintServerException = interface; // type: System.Printing.PrintServerException, namespace: System.Printing
  DNXpsException = interface; // type: System.Windows.Xps.XpsException, namespace: System.Windows.Xps
  DNXpsPackagingException = interface; // type: System.Windows.Xps.XpsPackagingException, namespace: System.Windows.Xps
  DNXpsSerializationException = interface; // type: System.Windows.Xps.XpsSerializationException, namespace: System.Windows.Xps
  DNPrintTicketConverter = interface; // type: System.Printing.Interop.PrintTicketConverter, namespace: System.Printing.Interop
  DNPageImageableArea = interface; // type: System.Printing.PageImageableArea, namespace: System.Printing
  DNPageMediaSize = interface; // type: System.Printing.PageMediaSize, namespace: System.Printing
  DNPageResolution = interface; // type: System.Printing.PageResolution, namespace: System.Printing
  DNPageScalingFactorRange = interface; // type: System.Printing.PageScalingFactorRange, namespace: System.Printing
  DNPrintCapabilities = interface; // type: System.Printing.PrintCapabilities, namespace: System.Printing
  DNPrintTicket = interface; // type: System.Printing.PrintTicket, namespace: System.Printing
  DNValidationResult = interface; // type: System.Printing.ValidationResult, namespace: System.Printing
  DNReachCompatibilityPreferences = interface; // type: System.Windows.ReachCompatibilityPreferences, namespace: System.Windows


{ objects }

  //-------------namespace: System.Printing----------------
  DNPrintSystemExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{198D5876-7199-58BF-866A-2D282915FA78}']
  { constructors } 

    {class} function init: DNPrintSystemException; overload;
    {class} function init(message: string): DNPrintSystemException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintSystemException; overload;
    {class} function init(errorCode: Int32; message: string): DNPrintSystemException; overload;
    {class} function init(errorCode: Int32; message: string; printerMessage: string): DNPrintSystemException; overload;
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintSystemException; overload;

  end;

  [DNTypeName('System.Printing.PrintSystemException')]
  DNPrintSystemException = interface(DDN.mscorlib.DNSystemException)
  ['{8453074A-5009-38CB-A255-14E6A4606CAE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintSystemException = class(TDNGenericImport<DNPrintSystemExceptionClass, DNPrintSystemException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintCommitAttributesExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{896B065F-B664-540F-B9D6-1FE7BC0FDF26}']
  { constructors } 

    {class} function init: DNPrintCommitAttributesException; overload;
    {class} function init(message: string): DNPrintCommitAttributesException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintCommitAttributesException; overload;
    {class} function init(errorCode: Int32; attributesSuccessList: DDN.mscorlib.DNCollection<string>; attributesFailList: DDN.mscorlib.DNCollection<string>): DNPrintCommitAttributesException; overload;
    {class} function init(errorCode: Int32; message: string; attributesSuccessList: DDN.mscorlib.DNCollection<string>; attributesFailList: DDN.mscorlib.DNCollection<string>; objectName: string): DNPrintCommitAttributesException; overload;

  end;

  [DNTypeName('System.Printing.PrintCommitAttributesException')]
  DNPrintCommitAttributesException = interface(DNPrintSystemException)
  ['{E5811729-701F-3EED-A691-C4998ADC1837}']
  { getters & setters } 

    function get_PrintObjectName: string;
    function get_CommittedAttributesCollection: DDN.mscorlib.DNCollection<string>;
    function get_FailedAttributesCollection: DDN.mscorlib.DNCollection<string>;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PrintObjectName: string read get_PrintObjectName;
    property CommittedAttributesCollection: DDN.mscorlib.DNCollection<string> read get_CommittedAttributesCollection;
    property FailedAttributesCollection: DDN.mscorlib.DNCollection<string> read get_FailedAttributesCollection;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintCommitAttributesException = class(TDNGenericImport<DNPrintCommitAttributesExceptionClass, DNPrintCommitAttributesException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintingNotSupportedExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{93A3C180-1C4A-594C-9C00-014605529371}']
  { constructors } 

    {class} function init: DNPrintingNotSupportedException; overload;
    {class} function init(message: string): DNPrintingNotSupportedException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintingNotSupportedException; overload;

  end;

  [DNTypeName('System.Printing.PrintingNotSupportedException')]
  DNPrintingNotSupportedException = interface(DNPrintSystemException)
  ['{1698733E-23D0-354A-B8C1-812F221D5C8B}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintingNotSupportedException = class(TDNGenericImport<DNPrintingNotSupportedExceptionClass, DNPrintingNotSupportedException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintJobExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{3CE7B15C-890D-5B2C-80E3-F7664A0BDD1F}']
  { constructors } 

    {class} function init: DNPrintJobException; overload;
    {class} function init(message: string): DNPrintJobException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;
    {class} function init(errorCode: Int32; message: string): DNPrintJobException; overload;
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32): DNPrintJobException; overload;
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintJobException; overload;

  end;

  [DNTypeName('System.Printing.PrintJobException')]
  DNPrintJobException = interface(DNPrintSystemException)
  ['{D7C2A0FC-D393-31E3-86B4-0B8415750DF3}']
  { getters & setters } 

    function get_JobId: Int32;
    function get_JobName: string;
    function get_PrintQueueName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property JobId: Int32 read get_JobId;
    property JobName: string read get_JobName;
    property PrintQueueName: string read get_PrintQueueName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintJobException = class(TDNGenericImport<DNPrintJobExceptionClass, DNPrintJobException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintingCanceledExceptionClass = interface(DNPrintJobExceptionClass)
  ['{3CAD5CBF-2915-5F65-A32D-3B9C6AC9768C}']
  { constructors } 

    {class} function init: DNPrintingCanceledException; overload;
    {class} function init(message: string): DNPrintingCanceledException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;
    {class} function init(errorCode: Int32; message: string): DNPrintingCanceledException; overload;
    {class} function init(errorCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32): DNPrintingCanceledException; overload;
    {class} function init(errorCode: Int32; message: string; printQueueName: string; jobName: string; jobId: Int32; innerException: DDN.mscorlib.DNException): DNPrintingCanceledException; overload;

  end;

  [DNTypeName('System.Printing.PrintingCanceledException')]
  DNPrintingCanceledException = interface(DNPrintJobException)
  ['{6955CB38-5149-35A0-82AD-2EF01ACB166C}']
  { getters & setters } 

    function get_JobId: Int32;
    function get_JobName: string;
    function get_PrintQueueName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property JobId: Int32 read get_JobId;
    property JobName: string read get_JobName;
    property PrintQueueName: string read get_PrintQueueName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintingCanceledException = class(TDNGenericImport<DNPrintingCanceledExceptionClass, DNPrintingCanceledException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintQueueExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{3DA2691E-544E-5A08-9F73-63CA571A55C8}']
  { constructors } 

    {class} function init: DNPrintQueueException; overload;
    {class} function init(message: string): DNPrintQueueException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintQueueException; overload;
    {class} function init(errorCode: Int32; message: string; printerName: string): DNPrintQueueException; overload;
    {class} function init(errorCode: Int32; message: string; printerName: string; printerMessage: string): DNPrintQueueException; overload;
    {class} function init(errorCode: Int32; message: string; printerName: string; innerException: DDN.mscorlib.DNException): DNPrintQueueException; overload;

  end;

  [DNTypeName('System.Printing.PrintQueueException')]
  DNPrintQueueException = interface(DNPrintSystemException)
  ['{6563EAFD-B476-3D52-A447-CA424792895B}']
  { getters & setters } 

    function get_PrinterName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PrinterName: string read get_PrinterName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintQueueException = class(TDNGenericImport<DNPrintQueueExceptionClass, DNPrintQueueException>) end;

  //-------------namespace: System.Printing----------------
  DNPrintServerExceptionClass = interface(DNPrintSystemExceptionClass)
  ['{D8796903-65A6-5F87-A05F-22EDF5B30A1E}']
  { constructors } 

    {class} function init: DNPrintServerException; overload;
    {class} function init(message: string): DNPrintServerException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPrintServerException; overload;
    {class} function init(errorCode: Int32; message: string; serverName: string): DNPrintServerException; overload;
    {class} function init(errorCode: Int32; message: string; serverName: string; innerException: DDN.mscorlib.DNException): DNPrintServerException; overload;

  end;

  [DNTypeName('System.Printing.PrintServerException')]
  DNPrintServerException = interface(DNPrintSystemException)
  ['{62B5E961-A6A6-3B34-8089-97D8FDD7D7C9}']
  { getters & setters } 

    function get_ServerName: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ServerName: string read get_ServerName;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPrintServerException = class(TDNGenericImport<DNPrintServerExceptionClass, DNPrintServerException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{4CC57FE5-068A-5960-B17B-42683BC6894B}']
  { constructors } 

    {class} function init: DNXpsException; overload;
    {class} function init(message: string): DNXpsException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsException; overload;

  end;

  [DNTypeName('System.Windows.Xps.XpsException')]
  DNXpsException = interface(DDN.mscorlib.DNException)
  ['{4A8AC7ED-E64B-3F6A-B2E1-8B231F12C69E}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsException = class(TDNGenericImport<DNXpsExceptionClass, DNXpsException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsPackagingExceptionClass = interface(DNXpsExceptionClass)
  ['{14754F8A-7875-59DA-89A8-441F62AFCFE0}']
  { constructors } 

    {class} function init: DNXpsPackagingException; overload;
    {class} function init(message: string): DNXpsPackagingException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsPackagingException; overload;

  end;

  [DNTypeName('System.Windows.Xps.XpsPackagingException')]
  DNXpsPackagingException = interface(DNXpsException)
  ['{852654C3-4593-30FB-8D50-D1BE25D4AF4F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsPackagingException = class(TDNGenericImport<DNXpsPackagingExceptionClass, DNXpsPackagingException>) end;

  //-------------namespace: System.Windows.Xps----------------
  DNXpsSerializationExceptionClass = interface(DNXpsExceptionClass)
  ['{59061FCA-F36B-5886-BBFE-706B676A3A84}']
  { constructors } 

    {class} function init: DNXpsSerializationException; overload;
    {class} function init(message: string): DNXpsSerializationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXpsSerializationException; overload;

  end;

  [DNTypeName('System.Windows.Xps.XpsSerializationException')]
  DNXpsSerializationException = interface(DNXpsException)
  ['{1EDA3182-CBEC-339E-81FE-10077002F7B7}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXpsSerializationException = class(TDNGenericImport<DNXpsSerializationExceptionClass, DNXpsSerializationException>) end;

  //-------------namespace: System.Printing.Interop----------------
  DNPrintTicketConverterClass = interface(DNObjectClass)
  ['{0D60EE77-557F-5B4B-9BD1-B4A28595200E}']
  { static getter & setter } 

    {class} function get_MaxPrintSchemaVersion: Int32;

  { constructors } 

    {class} function init(deviceName: string; clientPrintSchemaVersion: Int32): DNPrintTicketConverter;

  { static propertys } 

    {class} property MaxPrintSchemaVersion: Int32 read get_MaxPrintSchemaVersion;
  end;

  [DNTypeName('System.Printing.Interop.PrintTicketConverter')]
  DNPrintTicketConverter = interface(DDN.mscorlib.DNIDisposable)
  ['{E6E7BB18-534B-33AC-B8D1-462876C88582}']
  { methods } 

    function ConvertDevModeToPrintTicket(devMode: TArray<Byte>): DNPrintTicket; overload;
    function ConvertPrintTicketToDevMode(printTicket: DNPrintTicket; baseType: DNBaseDevModeType): TArray<Byte>; overload;
    procedure Dispose;
    function ConvertDevModeToPrintTicket(devMode: TArray<Byte>; scope: DNPrintTicketScope): DNPrintTicket; overload;
    function ConvertPrintTicketToDevMode(printTicket: DNPrintTicket; baseType: DNBaseDevModeType; scope: DNPrintTicketScope): TArray<Byte>; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPrintTicketConverter = class(TDNGenericImport<DNPrintTicketConverterClass, DNPrintTicketConverter>) end;

  //-------------namespace: System.Printing----------------
  DNPageImageableAreaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71C551C5-A6E3-52D4-B474-4AB29834B2BC}']
  end;

  [DNTypeName('System.Printing.PageImageableArea')]
  DNPageImageableArea = interface(DDN.mscorlib.DNObject)
  ['{96606B8B-7B5F-31C6-9540-F5FFA7D9EF68}']
  { getters & setters } 

    function get_OriginWidth: Double;
    function get_OriginHeight: Double;
    function get_ExtentWidth: Double;
    function get_ExtentHeight: Double;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property OriginWidth: Double read get_OriginWidth;
    property OriginHeight: Double read get_OriginHeight;
    property ExtentWidth: Double read get_ExtentWidth;
    property ExtentHeight: Double read get_ExtentHeight;
  end;

  TDNPageImageableArea = class(TDNGenericImport<DNPageImageableAreaClass, DNPageImageableArea>) end;

  //-------------namespace: System.Printing----------------
  DNPageMediaSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A31FF81B-F144-57E6-9EA0-3E9790854455}']
  { constructors } 

    {class} function init(mediaSizeName: DNPageMediaSizeName): DNPageMediaSize; overload;
    {class} function init(width: Double; height: Double): DNPageMediaSize; overload;
    {class} function init(mediaSizeName: DNPageMediaSizeName; width: Double; height: Double): DNPageMediaSize; overload;

  end;

  [DNTypeName('System.Printing.PageMediaSize')]
  DNPageMediaSize = interface(DDN.mscorlib.DNObject)
  ['{44070251-4A49-32FF-B9CD-D48D50B0B960}']
  { getters & setters } 

    function get_PageMediaSizeName: DDN.mscorlib.DNNullable<DNPageMediaSizeName>;
    function get_Width: DDN.mscorlib.DNNullable<Double>;
    function get_Height: DDN.mscorlib.DNNullable<Double>;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PageMediaSizeName: DDN.mscorlib.DNNullable<DNPageMediaSizeName> read get_PageMediaSizeName;
    property Width: DDN.mscorlib.DNNullable<Double> read get_Width;
    property Height: DDN.mscorlib.DNNullable<Double> read get_Height;
  end;

  TDNPageMediaSize = class(TDNGenericImport<DNPageMediaSizeClass, DNPageMediaSize>) end;

  //-------------namespace: System.Printing----------------
  DNPageResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5B0FEA70-6812-5EE0-B72F-02DDDDAE913F}']
  { constructors } 

    {class} function init(resolutionX: Int32; resolutionY: Int32): DNPageResolution; overload;
    {class} function init(qualitative: DNPageQualitativeResolution): DNPageResolution; overload;
    {class} function init(resolutionX: Int32; resolutionY: Int32; qualitative: DNPageQualitativeResolution): DNPageResolution; overload;

  end;

  [DNTypeName('System.Printing.PageResolution')]
  DNPageResolution = interface(DDN.mscorlib.DNObject)
  ['{CAF781C0-4A5B-3CC9-B99A-3495FC80A80A}']
  { getters & setters } 

    function get_X: DDN.mscorlib.DNNullable<Int32>;
    function get_Y: DDN.mscorlib.DNNullable<Int32>;
    function get_QualitativeResolution: DDN.mscorlib.DNNullable<DNPageQualitativeResolution>;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property X: DDN.mscorlib.DNNullable<Int32> read get_X;
    property Y: DDN.mscorlib.DNNullable<Int32> read get_Y;
    property QualitativeResolution: DDN.mscorlib.DNNullable<DNPageQualitativeResolution> read get_QualitativeResolution;
  end;

  TDNPageResolution = class(TDNGenericImport<DNPageResolutionClass, DNPageResolution>) end;

  //-------------namespace: System.Printing----------------
  DNPageScalingFactorRangeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A1942A7D-8750-5CC9-82AF-B708B04225C4}']
  end;

  [DNTypeName('System.Printing.PageScalingFactorRange')]
  DNPageScalingFactorRange = interface(DDN.mscorlib.DNObject)
  ['{360DE511-00C8-3ABC-8025-5C26D8E66A67}']
  { getters & setters } 

    function get_MinimumScale: Int32;
    function get_MaximumScale: Int32;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property MinimumScale: Int32 read get_MinimumScale;
    property MaximumScale: Int32 read get_MaximumScale;
  end;

  TDNPageScalingFactorRange = class(TDNGenericImport<DNPageScalingFactorRangeClass, DNPageScalingFactorRange>) end;

  //-------------namespace: System.Printing----------------
  DNPrintCapabilitiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15F6C0A3-2DA4-5206-B974-D73E1A31CB2C}']
  { constructors } 

    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintCapabilities;

  end;

  [DNTypeName('System.Printing.PrintCapabilities')]
  DNPrintCapabilities = interface(DDN.mscorlib.DNObject)
  ['{F2A06CEB-416F-35ED-BA26-4233248BDB42}']
  { getters & setters } 

    function get_CollationCapability: DDN.mscorlib.DNReadOnlyCollection<DNCollation>;
    function get_DeviceFontSubstitutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNDeviceFontSubstitution>;
    function get_DuplexingCapability: DDN.mscorlib.DNReadOnlyCollection<DNDuplexing>;
    function get_InputBinCapability: DDN.mscorlib.DNReadOnlyCollection<DNInputBin>;
    function get_MaxCopyCount: DDN.mscorlib.DNNullable<Int32>;
    function get_OrientedPageMediaWidth: DDN.mscorlib.DNNullable<Double>;
    function get_OrientedPageMediaHeight: DDN.mscorlib.DNNullable<Double>;
    function get_OutputColorCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputColor>;
    function get_OutputQualityCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputQuality>;
    function get_PageBorderlessCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageBorderless>;
    function get_PageImageableArea: DNPageImageableArea;
    function get_PageMediaSizeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaSize>;
    function get_PageMediaTypeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaType>;
    function get_PageOrderCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrder>;
    function get_PageOrientationCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrientation>;
    function get_PageResolutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageResolution>;
    function get_PageScalingFactorRange: DNPageScalingFactorRange;
    function get_PagesPerSheetCapability: DDN.mscorlib.DNReadOnlyCollection<Int32>;
    function get_PagesPerSheetDirectionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPagesPerSheetDirection>;
    function get_PhotoPrintingIntentCapability: DDN.mscorlib.DNReadOnlyCollection<DNPhotoPrintingIntent>;
    function get_StaplingCapability: DDN.mscorlib.DNReadOnlyCollection<DNStapling>;
    function get_TrueTypeFontModeCapability: DDN.mscorlib.DNReadOnlyCollection<DNTrueTypeFontMode>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CollationCapability: DDN.mscorlib.DNReadOnlyCollection<DNCollation> read get_CollationCapability;
    property DeviceFontSubstitutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNDeviceFontSubstitution> read get_DeviceFontSubstitutionCapability;
    property DuplexingCapability: DDN.mscorlib.DNReadOnlyCollection<DNDuplexing> read get_DuplexingCapability;
    property InputBinCapability: DDN.mscorlib.DNReadOnlyCollection<DNInputBin> read get_InputBinCapability;
    property MaxCopyCount: DDN.mscorlib.DNNullable<Int32> read get_MaxCopyCount;
    property OrientedPageMediaWidth: DDN.mscorlib.DNNullable<Double> read get_OrientedPageMediaWidth;
    property OrientedPageMediaHeight: DDN.mscorlib.DNNullable<Double> read get_OrientedPageMediaHeight;
    property OutputColorCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputColor> read get_OutputColorCapability;
    property OutputQualityCapability: DDN.mscorlib.DNReadOnlyCollection<DNOutputQuality> read get_OutputQualityCapability;
    property PageBorderlessCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageBorderless> read get_PageBorderlessCapability;
    property PageImageableArea: DNPageImageableArea read get_PageImageableArea;
    property PageMediaSizeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaSize> read get_PageMediaSizeCapability;
    property PageMediaTypeCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageMediaType> read get_PageMediaTypeCapability;
    property PageOrderCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrder> read get_PageOrderCapability;
    property PageOrientationCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageOrientation> read get_PageOrientationCapability;
    property PageResolutionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPageResolution> read get_PageResolutionCapability;
    property PageScalingFactorRange: DNPageScalingFactorRange read get_PageScalingFactorRange;
    property PagesPerSheetCapability: DDN.mscorlib.DNReadOnlyCollection<Int32> read get_PagesPerSheetCapability;
    property PagesPerSheetDirectionCapability: DDN.mscorlib.DNReadOnlyCollection<DNPagesPerSheetDirection> read get_PagesPerSheetDirectionCapability;
    property PhotoPrintingIntentCapability: DDN.mscorlib.DNReadOnlyCollection<DNPhotoPrintingIntent> read get_PhotoPrintingIntentCapability;
    property StaplingCapability: DDN.mscorlib.DNReadOnlyCollection<DNStapling> read get_StaplingCapability;
    property TrueTypeFontModeCapability: DDN.mscorlib.DNReadOnlyCollection<DNTrueTypeFontMode> read get_TrueTypeFontModeCapability;
  end;

  TDNPrintCapabilities = class(TDNGenericImport<DNPrintCapabilitiesClass, DNPrintCapabilities>) end;

  //-------------namespace: System.Printing----------------
  DNPrintTicketClass = interface(DNObjectClass)
  ['{2AB5CE1F-B1D4-57DD-88FE-E491C6055CD2}']
  { constructors } 

    {class} function init: DNPrintTicket; overload;
    {class} function init(xmlStream: DDN.mscorlib.DNStream): DNPrintTicket; overload;

  end;

  [DNTypeName('System.Printing.PrintTicket')]
  DNPrintTicket = interface(DDN.System.DNINotifyPropertyChanged)
  ['{5CBE7B4B-BDB5-300B-BC94-1614B6838AE7}']
  { getters & setters } 

    function get_Collation: DDN.mscorlib.DNNullable<DNCollation>;
    procedure set_Collation(value: DDN.mscorlib.DNNullable<DNCollation>);
    function get_CopyCount: DDN.mscorlib.DNNullable<Int32>;
    procedure set_CopyCount(value: DDN.mscorlib.DNNullable<Int32>);
    function get_DeviceFontSubstitution: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution>;
    procedure set_DeviceFontSubstitution(value: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution>);
    function get_Duplexing: DDN.mscorlib.DNNullable<DNDuplexing>;
    procedure set_Duplexing(value: DDN.mscorlib.DNNullable<DNDuplexing>);
    function get_InputBin: DDN.mscorlib.DNNullable<DNInputBin>;
    procedure set_InputBin(value: DDN.mscorlib.DNNullable<DNInputBin>);
    function get_OutputColor: DDN.mscorlib.DNNullable<DNOutputColor>;
    procedure set_OutputColor(value: DDN.mscorlib.DNNullable<DNOutputColor>);
    function get_OutputQuality: DDN.mscorlib.DNNullable<DNOutputQuality>;
    procedure set_OutputQuality(value: DDN.mscorlib.DNNullable<DNOutputQuality>);
    function get_PageBorderless: DDN.mscorlib.DNNullable<DNPageBorderless>;
    procedure set_PageBorderless(value: DDN.mscorlib.DNNullable<DNPageBorderless>);
    function get_PageMediaSize: DNPageMediaSize;
    procedure set_PageMediaSize(value: DNPageMediaSize);
    function get_PageMediaType: DDN.mscorlib.DNNullable<DNPageMediaType>;
    procedure set_PageMediaType(value: DDN.mscorlib.DNNullable<DNPageMediaType>);
    function get_PageOrder: DDN.mscorlib.DNNullable<DNPageOrder>;
    procedure set_PageOrder(value: DDN.mscorlib.DNNullable<DNPageOrder>);
    function get_PageOrientation: DDN.mscorlib.DNNullable<DNPageOrientation>;
    procedure set_PageOrientation(value: DDN.mscorlib.DNNullable<DNPageOrientation>);
    function get_PageResolution: DNPageResolution;
    procedure set_PageResolution(value: DNPageResolution);
    function get_PageScalingFactor: DDN.mscorlib.DNNullable<Int32>;
    procedure set_PageScalingFactor(value: DDN.mscorlib.DNNullable<Int32>);
    function get_PagesPerSheet: DDN.mscorlib.DNNullable<Int32>;
    procedure set_PagesPerSheet(value: DDN.mscorlib.DNNullable<Int32>);
    function get_PagesPerSheetDirection: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection>;
    procedure set_PagesPerSheetDirection(value: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection>);
    function get_PhotoPrintingIntent: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent>;
    procedure set_PhotoPrintingIntent(value: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent>);
    function get_Stapling: DDN.mscorlib.DNNullable<DNStapling>;
    procedure set_Stapling(value: DDN.mscorlib.DNNullable<DNStapling>);
    function get_TrueTypeFontMode: DDN.mscorlib.DNNullable<DNTrueTypeFontMode>;
    procedure set_TrueTypeFontMode(value: DDN.mscorlib.DNNullable<DNTrueTypeFontMode>);

  { events } 

    procedure add_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);
    procedure remove_PropertyChanged(value: DDN.System.DNPropertyChangedEventHandler);

  { methods } 

    function Clone: DNPrintTicket;
    function GetXmlStream: DDN.mscorlib.DNMemoryStream;
    procedure SaveTo(outStream: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Collation: DDN.mscorlib.DNNullable<DNCollation> read get_Collation write set_Collation;
    property CopyCount: DDN.mscorlib.DNNullable<Int32> read get_CopyCount write set_CopyCount;
    property DeviceFontSubstitution: DDN.mscorlib.DNNullable<DNDeviceFontSubstitution> read get_DeviceFontSubstitution write set_DeviceFontSubstitution;
    property Duplexing: DDN.mscorlib.DNNullable<DNDuplexing> read get_Duplexing write set_Duplexing;
    property InputBin: DDN.mscorlib.DNNullable<DNInputBin> read get_InputBin write set_InputBin;
    property OutputColor: DDN.mscorlib.DNNullable<DNOutputColor> read get_OutputColor write set_OutputColor;
    property OutputQuality: DDN.mscorlib.DNNullable<DNOutputQuality> read get_OutputQuality write set_OutputQuality;
    property PageBorderless: DDN.mscorlib.DNNullable<DNPageBorderless> read get_PageBorderless write set_PageBorderless;
    property PageMediaSize: DNPageMediaSize read get_PageMediaSize write set_PageMediaSize;
    property PageMediaType: DDN.mscorlib.DNNullable<DNPageMediaType> read get_PageMediaType write set_PageMediaType;
    property PageOrder: DDN.mscorlib.DNNullable<DNPageOrder> read get_PageOrder write set_PageOrder;
    property PageOrientation: DDN.mscorlib.DNNullable<DNPageOrientation> read get_PageOrientation write set_PageOrientation;
    property PageResolution: DNPageResolution read get_PageResolution write set_PageResolution;
    property PageScalingFactor: DDN.mscorlib.DNNullable<Int32> read get_PageScalingFactor write set_PageScalingFactor;
    property PagesPerSheet: DDN.mscorlib.DNNullable<Int32> read get_PagesPerSheet write set_PagesPerSheet;
    property PagesPerSheetDirection: DDN.mscorlib.DNNullable<DNPagesPerSheetDirection> read get_PagesPerSheetDirection write set_PagesPerSheetDirection;
    property PhotoPrintingIntent: DDN.mscorlib.DNNullable<DNPhotoPrintingIntent> read get_PhotoPrintingIntent write set_PhotoPrintingIntent;
    property Stapling: DDN.mscorlib.DNNullable<DNStapling> read get_Stapling write set_Stapling;
    property TrueTypeFontMode: DDN.mscorlib.DNNullable<DNTrueTypeFontMode> read get_TrueTypeFontMode write set_TrueTypeFontMode;
  end;

  TDNPrintTicket = class(TDNGenericImport<DNPrintTicketClass, DNPrintTicket>) end;

  //-------------namespace: System.Printing----------------
  DNValidationResultClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{348DAD8C-EA09-52BE-B188-39C6394FC1E5}']
  end;

  [DNTypeName('System.Printing.ValidationResult')]
  DNValidationResult = interface(DDN.mscorlib.DNValueType)
  ['{33DA9668-674F-3464-A9AC-D5A47647CD7E}']
  { getters & setters } 

    function get_ValidatedPrintTicket: DNPrintTicket;
    function get_ConflictStatus: DNConflictStatus;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ValidatedPrintTicket: DNPrintTicket read get_ValidatedPrintTicket;
    property ConflictStatus: DNConflictStatus read get_ConflictStatus;
  end;

  TDNValidationResult = class(TDNGenericImport<DNValidationResultClass, DNValidationResult>) end;

  //-------------namespace: System.Windows----------------
  DNReachCompatibilityPreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFFFB6FB-658C-5274-A93F-75F6137A8B1B}']
  end;

  [DNTypeName('System.Windows.ReachCompatibilityPreferences')]
  DNReachCompatibilityPreferences = interface(DDN.mscorlib.DNObject)
  ['{C757F754-8F9E-30FC-9A6B-0D222AE940F4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNReachCompatibilityPreferences = class(TDNGenericImport<DNReachCompatibilityPreferencesClass, DNReachCompatibilityPreferences>) end;


implementation


initialization
  LoadAssemblyModule('WPF\ReachFramework.dll', True);

finalization

end.
