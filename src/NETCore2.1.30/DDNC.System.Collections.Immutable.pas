//----------------------------------------------------------------------------
//  System.Collections.Immutable.dll: System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Core 2.1.30
//----------------------------------------------------------------------------
//  UnitName: DDNC.System.Collections.Immutable
//  Author: ying32
//----------------------------------------------------------------------------

{$IFNDEF DDNCSYSTEMCOLLECTIONSIMMUTABLE}
unit DDNC.System.Collections.Immutable;
{$ENDIF}

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDNC.System.Private.CoreLib;

type


{ declares }

  DNIImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.IImmutableDictionary`2, namespace: System.Collections.Immutable
  DNIImmutableList<T> = interface; // type: System.Collections.Immutable.IImmutableList`1, namespace: System.Collections.Immutable
  DNIImmutableSet<T> = interface; // type: System.Collections.Immutable.IImmutableSet`1, namespace: System.Collections.Immutable
  DNIImmutableQueue<T> = interface; // type: System.Collections.Immutable.IImmutableQueue`1, namespace: System.Collections.Immutable
  DNIImmutableStack<T> = interface; // type: System.Collections.Immutable.IImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableArray_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Builder, namespace: System.Collections.Immutable
  DNImmutableArray = interface; // type: System.Collections.Immutable.ImmutableArray, namespace: System.Collections.Immutable
  DNImmutableDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2, namespace: System.Collections.Immutable
  DNImmutableDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableDictionary = interface; // type: System.Collections.Immutable.ImmutableDictionary, namespace: System.Collections.Immutable
  DNImmutableHashSet<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1, namespace: System.Collections.Immutable
  DNImmutableHashSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableHashSet = interface; // type: System.Collections.Immutable.ImmutableHashSet, namespace: System.Collections.Immutable
  DNImmutableInterlocked = interface; // type: System.Collections.Immutable.ImmutableInterlocked, namespace: System.Collections.Immutable
  DNImmutableList<T> = interface; // type: System.Collections.Immutable.ImmutableList`1, namespace: System.Collections.Immutable
  DNImmutableList_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Builder, namespace: System.Collections.Immutable
  DNImmutableList = interface; // type: System.Collections.Immutable.ImmutableList, namespace: System.Collections.Immutable
  DNImmutableQueue<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1, namespace: System.Collections.Immutable
  DNImmutableQueue = interface; // type: System.Collections.Immutable.ImmutableQueue, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary, namespace: System.Collections.Immutable
  DNImmutableSortedSet<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Builder<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Builder, namespace: System.Collections.Immutable
  DNImmutableSortedSet = interface; // type: System.Collections.Immutable.ImmutableSortedSet, namespace: System.Collections.Immutable
  DNImmutableStack<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1, namespace: System.Collections.Immutable
  DNImmutableStack = interface; // type: System.Collections.Immutable.ImmutableStack, namespace: System.Collections.Immutable
  DNImmutableArrayExtensions = interface; // type: System.Linq.ImmutableArrayExtensions, namespace: System.Linq
  DNImmutableArray<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1, namespace: System.Collections.Immutable
  DNImmutableArray_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableArray`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableHashSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableHashSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableList_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableList`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableQueue_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableQueue`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface; // type: System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator, namespace: System.Collections.Immutable
  DNImmutableSortedSet_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableSortedSet`1+Enumerator, namespace: System.Collections.Immutable
  DNImmutableStack_Enumerator<T> = interface; // type: System.Collections.Immutable.ImmutableStack`1+Enumerator, namespace: System.Collections.Immutable


{ objects }

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableDictionary`2')]
  DNIImmutableDictionary<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyDictionary<TKey, TValue>)
  ['{39EFFA9F-1802-34FF-80E0-18981EBBD4D0}']
  { methods } 

    function Clear: DNIImmutableDictionary<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNIImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNIImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNIImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNIImmutableDictionary<TKey, TValue>;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableList`1')]
  DNIImmutableList<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyList<T>)
  ['{26D524FD-8B27-3B73-9543-208B3FD97910}']
  { methods } 

    function Clear: DNIImmutableList<T>;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function Add(value: T): DNIImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Insert(index: Int32; element: T): DNIImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableList<T>;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNIImmutableList<T>;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNIImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNIImmutableList<T>;
    function SetItem(index: Int32; value: T): DNIImmutableList<T>;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNIImmutableList<T>;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableSet`1')]
  DNIImmutableSet<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{B040AC84-1F1D-3505-8BE4-FB08563E0D03}']
  { methods } 

    function Clear: DNIImmutableSet<T>;
    function &Contains(value: T): Boolean;
    function Add(value: T): DNIImmutableSet<T>;
    function Remove(value: T): DNIImmutableSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNIImmutableSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;

  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableQueue`1')]
  DNIImmutableQueue<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{F1EE422F-4F18-3468-93B1-3C72CCDF2B29}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableQueue<T>;
    function Peek: T;
    function Enqueue(value: T): DNIImmutableQueue<T>;
    function Dequeue: DNIImmutableQueue<T>;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  [DNTypeName('System.Collections.Immutable.IImmutableStack`1')]
  DNIImmutableStack<T> = interface(DDNC.System.Private.CoreLib.DNIEnumerable<T>)
  ['{3740202A-E4E9-3C75-8459-DAE2011949BE}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNIImmutableStack<T>;
    function Push(value: T): DNIImmutableStack<T>;
    function Pop: DNIImmutableStack<T>;
    function Peek: T;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_BuilderClass<T> = interface(DNObjectClass)
  ['{EEA68E82-FA05-58C2-9D8D-0B55E2CDB995}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Builder')]
  DNImmutableArray_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{5B8A3932-0053-3AF0-BBA3-E1C8DEE96747}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    procedure set_Count(value: Int32);

  { methods } 

    function ItemRef(index: Int32): T;
    function ToImmutable: DNImmutableArray<T>;
    function MoveToImmutable: DNImmutableArray<T>;
    procedure Insert(index: Int32; item: T);
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>); overload;
    procedure AddRange(items: TArray<T>); overload;
    procedure AddRange(items: TArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray<T>); overload;
    procedure AddRange(items: DNImmutableArray<T>; length: Int32); overload;
    procedure AddRange(items: DNImmutableArray_Builder<T>); overload;
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function ToArray: TArray<T>;
    procedure CopyTo(&array: TArray<T>; index: Int32);
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    procedure Reverse;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function GetEnumerator: DDNC.System.Private.CoreLib.DNIEnumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count write set_Count;
  end;

  TDNImmutableArray_Builder<T> = class(TDNGenericImport<DNImmutableArray_BuilderClass<T>, DNImmutableArray_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{453419A1-828F-5E77-8A63-9CF196CCEDDF}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray')]
  DNImmutableArray = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DF387B01-4D4C-3DD3-B702-45E0B92C073F}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableArray = class(TDNGenericImport<DNImmutableArrayClass, DNImmutableArray>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{532046DF-B355-5464-A5AD-6B5AAC364350}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2')]
  DNImmutableDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{C38133EF-29BD-3AA4-9262-356CBF53BEC9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    function Clear: DNImmutableDictionary<TKey, TValue>;
    function ToBuilder: DNImmutableDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function AddRange(pairs: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableDictionary<TKey, TValue>;
    function Remove(key: TKey): DNImmutableDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>): DNImmutableDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionaryClass<TKey, TValue>, DNImmutableDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{BA16AABF-5132-532D-B455-9F519DF9FE78}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Builder')]
  DNImmutableDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{036DFBE5-1FF3-3EAC-84CB-8030A4B09E5A}']
  { getters & setters } 

    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;

  { methods } 

    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetEnumerator: DNImmutableDictionary_Enumerator<TKey, TValue>;
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableDictionary<TKey, TValue>;
    function ContainsKey(key: TKey): Boolean;
    function ContainsValue(value: TValue): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
  end;

  TDNImmutableDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_BuilderClass<TKey, TValue>, DNImmutableDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2DFA0E91-4375-5A26-AFCA-011344B786F3}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary')]
  DNImmutableDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A6294B99-E72B-3B52-BBD9-6A1BF69F4568}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableDictionary = class(TDNGenericImport<DNImmutableDictionaryClass, DNImmutableDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass<T> = interface(DNObjectClass)
  ['{D21B99EF-1AC5-5D65-BFC6-4BA489B617E7}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableHashSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableHashSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1')]
  DNImmutableHashSet<T> = interface(DNIImmutableSet<T>)
  ['{852B02DB-960B-3B96-8D58-4B3D12E3714C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsEmpty: Boolean;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;

  { methods } 

    function Clear: DNImmutableHashSet<T>;
    function ToBuilder: DNImmutableHashSet_Builder<T>;
    function Add(item: T): DNImmutableHashSet<T>;
    function Remove(item: T): DNImmutableHashSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableHashSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function &Contains(item: T): Boolean;
    function WithComparer(equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableHashSet<T>;
    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsEmpty: Boolean read get_IsEmpty;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer;
  end;

  TDNImmutableHashSet<T> = class(TDNGenericImport<DNImmutableHashSetClass<T>, DNImmutableHashSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_BuilderClass<T> = interface(DNObjectClass)
  ['{DD1B042F-B62F-56BB-BA5F-7789D78550DD}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Builder')]
  DNImmutableHashSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIReadOnlyCollection<T>)
  ['{A4DF06F9-0D27-31C6-8FB7-D975BF89B0E2}']
  { getters & setters } 

    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>);

  { methods } 

    function GetEnumerator: DNImmutableHashSet_Enumerator<T>;
    function ToImmutable: DNImmutableHashSet<T>;
    function &Contains(item: T): Boolean;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableHashSet_Builder<T> = class(TDNGenericImport<DNImmutableHashSet_BuilderClass<T>, DNImmutableHashSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{80F19B3A-3888-5786-8D49-BA6DCB6BDE77}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet')]
  DNImmutableHashSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{72AF9F51-DFCC-31A9-B6A5-87C233133D5A}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableHashSet = class(TDNGenericImport<DNImmutableHashSetClass, DNImmutableHashSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableInterlockedClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{2E7A2DA6-69F0-5BED-88D9-D1C46AAAB86C}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableInterlocked')]
  DNImmutableInterlocked = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{A05408BF-CB6D-3B9E-B726-C3DAD4923756}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableInterlocked = class(TDNGenericImport<DNImmutableInterlockedClass, DNImmutableInterlocked>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass<T> = interface(DNObjectClass)
  ['{452A4566-CA46-5F12-890E-7EB2A5F6CAA9}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableList<T>;

  { static fields } 

    {class} property Empty: DNImmutableList<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1')]
  DNImmutableList<T> = interface(DNIImmutableList<T>)
  ['{BE2D1139-C456-3FC8-AC36-E89798AC1F47}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Count: Int32;

  { methods } 

    function Clear: DNImmutableList<T>;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableList_Builder<T>;
    function Add(value: T): DNImmutableList<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Insert(index: Int32; item: T): DNImmutableList<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>;
    function Remove(value: T): DNImmutableList<T>; overload;
    function Remove(value: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveRange(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableList<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function RemoveAt(index: Int32): DNImmutableList<T>;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function SetItem(index: Int32; value: T): DNImmutableList<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableList<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableList<T>; overload;
    function Reverse: DNImmutableList<T>; overload;
    function Reverse(index: Int32; count: Int32): DNImmutableList<T>; overload;
    function Sort: DNImmutableList<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableList<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableList<T>; overload;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function &Contains(value: T): Boolean;
    function IndexOf(value: T): Int32; overload;
    function GetEnumerator: DNImmutableList_Enumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
  end;

  TDNImmutableList<T> = class(TDNGenericImport<DNImmutableListClass<T>, DNImmutableList<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_BuilderClass<T> = interface(DNObjectClass)
  ['{3517FD5E-B2D0-5AA9-AE9D-1F294D46818C}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Builder')]
  DNImmutableList_Builder<T> = interface(DDNC.System.Private.CoreLib.DNIList<T>)
  ['{F1086B0C-62E4-3154-BECD-D84481FCC1DE}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function ItemRef(index: Int32): T;
    function IndexOf(item: T): Int32; overload;
    procedure Insert(index: Int32; item: T);
    procedure RemoveAt(index: Int32);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableList_Enumerator<T>;
    procedure ForEach(action: DDNC.System.Private.CoreLib.DNAction<T>);
    procedure CopyTo(&array: TArray<T>); overload;
    procedure CopyTo(&array: TArray<T>; arrayIndex: Int32); overload;
    procedure CopyTo(index: Int32; &array: TArray<T>; arrayIndex: Int32; count: Int32); overload;
    function GetRange(index: Int32; count: Int32): DNImmutableList<T>;
    function Exists(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    function Find(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableList<T>;
    function FindIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLast(match: DDNC.System.Private.CoreLib.DNPredicate<T>): T;
    function FindLastIndex(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function FindLastIndex(startIndex: Int32; count: Int32; match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32; overload;
    function IndexOf(item: T; index: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; index: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function TrueForAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): Int32;
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>); overload;
    procedure Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>); overload;
    function BinarySearch(item: T): Int32; overload;
    function BinarySearch(item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function BinarySearch(index: Int32; count: Int32; item: T; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): Int32; overload;
    function ToImmutable: DNImmutableList<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNImmutableList_Builder<T> = class(TDNGenericImport<DNImmutableList_BuilderClass<T>, DNImmutableList_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableListClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{B61B80C6-3213-5752-AF59-5FBB1449B60E}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList')]
  DNImmutableList = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{6EEC90C8-F5FA-377A-B9A7-EDAD7B72BBB4}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableList = class(TDNGenericImport<DNImmutableListClass, DNImmutableList>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass<T> = interface(DNObjectClass)
  ['{901E935D-D3CD-5084-B4BC-2D9D6DDAA0AD}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableQueue<T>;

  { static propertys } 

    {class} property Empty: DNImmutableQueue<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1')]
  DNImmutableQueue<T> = interface(DNIImmutableQueue<T>)
  ['{0313FFD0-41E3-38C7-9B11-B20D5838C1D3}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableQueue<T>;
    function Peek: T;
    function PeekRef: T;
    function Enqueue(value: T): DNImmutableQueue<T>;
    function Dequeue: DNImmutableQueue<T>; overload;
    function Dequeue(out value: T): DNImmutableQueue<T>; overload;
    function GetEnumerator: DNImmutableQueue_Enumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableQueue<T> = class(TDNGenericImport<DNImmutableQueueClass<T>, DNImmutableQueue<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueueClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{DE46B901-162C-536F-9435-308F83413F96}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue')]
  DNImmutableQueue = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{0A79E993-4F8D-39A1-B797-E01AA921518F}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableQueue = class(TDNGenericImport<DNImmutableQueueClass, DNImmutableQueue>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass<TKey, TValue> = interface(DNObjectClass)
  ['{55764369-D4C6-5DC5-9A0A-769DD3332DFF}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedDictionary<TKey, TValue>;

  { static fields } 

    {class} property Empty: DNImmutableSortedDictionary<TKey, TValue> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2')]
  DNImmutableSortedDictionary<TKey, TValue> = interface(DNIImmutableDictionary<TKey, TValue>)
  ['{8121EE4B-B36B-32A7-8E18-C9DD398776B5}']
  { getters & setters } 

    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;

  { methods } 

    function Clear: DNImmutableSortedDictionary<TKey, TValue>;
    function ValueRef(key: TKey): TValue;
    function ToBuilder: DNImmutableSortedDictionary_Builder<TKey, TValue>;
    function Add(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItem(key: TKey; value: TValue): DNImmutableSortedDictionary<TKey, TValue>;
    function SetItems(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>): DNImmutableSortedDictionary<TKey, TValue>;
    function Remove(value: TKey): DNImmutableSortedDictionary<TKey, TValue>;
    function RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>): DNImmutableSortedDictionary<TKey, TValue>;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>; valueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function WithComparers(keyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>): DNImmutableSortedDictionary<TKey, TValue>; overload;
    function ContainsValue(value: TValue): Boolean;
    function ContainsKey(key: TKey): Boolean;
    function &Contains(pair: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer;
  end;

  TDNImmutableSortedDictionary<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionaryClass<TKey, TValue>, DNImmutableSortedDictionary<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_BuilderClass<TKey, TValue> = interface(DNObjectClass)
  ['{0469B3F7-CCA9-569D-BB14-E660BE6BF607}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Builder')]
  DNImmutableSortedDictionary_Builder<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNIDictionary<TKey, TValue>)
  ['{22107041-3B8A-38ED-BB80-1D36C4D78488}']
  { getters & setters } 

    function get_Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>;
    function get_Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue>;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<TKey>);
    function get_ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>;
    procedure set_ValueComparer(value: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue>);

  { methods } 

    function ValueRef(key: TKey): TValue;
    function ContainsKey(key: TKey): Boolean;
    function TryGetValue(key: TKey; out value: TValue): Boolean;
    function TryGetKey(equalKey: TKey; out actualKey: TKey): Boolean;
    function &Contains(item: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>): Boolean;
    function GetEnumerator: DNImmutableSortedDictionary_Enumerator<TKey, TValue>;
    function ContainsValue(value: TValue): Boolean;
    procedure AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>>);
    procedure RemoveRange(keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey>);
    function GetValueOrDefault(key: TKey): TValue; overload;
    function GetValueOrDefault(key: TKey; defaultValue: TValue): TValue; overload;
    function ToImmutable: DNImmutableSortedDictionary<TKey, TValue>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Keys: DDNC.System.Private.CoreLib.DNIEnumerable<TKey> read get_Keys;
    property Values: DDNC.System.Private.CoreLib.DNIEnumerable<TValue> read get_Values;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<TKey> read get_KeyComparer write set_KeyComparer;
    property ValueComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<TValue> read get_ValueComparer write set_ValueComparer;
  end;

  TDNImmutableSortedDictionary_Builder<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_BuilderClass<TKey, TValue>, DNImmutableSortedDictionary_Builder<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionaryClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{F68F6949-33EB-5119-8FD3-E8B7D90E6B2D}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary')]
  DNImmutableSortedDictionary = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{961CE72E-C216-3475-8855-08B28D8A5071}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableSortedDictionary = class(TDNGenericImport<DNImmutableSortedDictionaryClass, DNImmutableSortedDictionary>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass<T> = interface(DNObjectClass)
  ['{D2C80A6D-228D-566D-965F-9ADC9BE16745}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableSortedSet<T>;

  { static fields } 

    {class} property Empty: DNImmutableSortedSet<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1')]
  DNImmutableSortedSet<T> = interface(DNIImmutableSet<T>)
  ['{D59D7512-FFED-3736-BDD9-01A2683A4CA5}']
  { getters & setters } 

    function get_Max: T;
    function get_Min: T;
    function get_IsEmpty: Boolean;
    function get_Count: Int32;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;

  { methods } 

    function Clear: DNImmutableSortedSet<T>;
    function ItemRef(index: Int32): T;
    function ToBuilder: DNImmutableSortedSet_Builder<T>;
    function Add(value: T): DNImmutableSortedSet<T>;
    function Remove(value: T): DNImmutableSortedSet<T>;
    function TryGetValue(equalValue: T; out actualValue: T): Boolean;
    function Intersect(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function &Except(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function SymmetricExcept(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function Union(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableSortedSet<T>;
    function WithComparer(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableSortedSet<T>;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function IndexOf(item: T): Int32;
    function &Contains(value: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Max: T read get_Max;
    property Min: T read get_Min;
    property IsEmpty: Boolean read get_IsEmpty;
    property Count: Int32 read get_Count;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer;
  end;

  TDNImmutableSortedSet<T> = class(TDNGenericImport<DNImmutableSortedSetClass<T>, DNImmutableSortedSet<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_BuilderClass<T> = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{41A9D958-47C3-54CD-88BE-312287F7A246}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Builder')]
  DNImmutableSortedSet_Builder<T> = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{235DCC58-E7B3-37A8-AC5F-77AF2371D489}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): T;
    function get_Max: T;
    function get_Min: T;
    function get_KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T>;
    procedure set_KeyComparer(value: DDNC.System.Private.CoreLib.DNIComparer<T>);

  { methods } 

    function ItemRef(index: Int32): T;
    procedure ExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure IntersectWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function IsProperSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsProperSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSubsetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function IsSupersetOf(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function Overlaps(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    function SetEquals(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>): Boolean;
    procedure SymmetricExceptWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    procedure UnionWith(other: DDNC.System.Private.CoreLib.DNIEnumerable<T>);
    function &Contains(item: T): Boolean;
    function GetEnumerator: DNImmutableSortedSet_Enumerator<T>;
    function Reverse: DDNC.System.Private.CoreLib.DNIEnumerable<T>;
    function ToImmutable: DNImmutableSortedSet<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: T read get_Item; default;
    property Max: T read get_Max;
    property Min: T read get_Min;
    property KeyComparer: DDNC.System.Private.CoreLib.DNIComparer<T> read get_KeyComparer write set_KeyComparer;
  end;

  TDNImmutableSortedSet_Builder<T> = class(TDNGenericImport<DNImmutableSortedSet_BuilderClass<T>, DNImmutableSortedSet_Builder<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSetClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5F3E9005-DB11-5716-9B9D-A8AF46F432A8}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet')]
  DNImmutableSortedSet = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{12BDFC67-8059-39CA-98D6-BF2C2A9B2E07}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableSortedSet = class(TDNGenericImport<DNImmutableSortedSetClass, DNImmutableSortedSet>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass<T> = interface(DNObjectClass)
  ['{FDB14796-4FF2-5F9D-8B47-3D4FC0B07345}']
  { static getter & setter } 

    {class} function get_Empty: DNImmutableStack<T>;

  { static propertys } 

    {class} property Empty: DNImmutableStack<T> read get_Empty;
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1')]
  DNImmutableStack<T> = interface(DNIImmutableStack<T>)
  ['{6D1226BD-FD50-30E3-BAE5-07E99C9D5402}']
  { getters & setters } 

    function get_IsEmpty: Boolean;

  { methods } 

    function Clear: DNImmutableStack<T>;
    function Peek: T;
    function PeekRef: T;
    function Push(value: T): DNImmutableStack<T>;
    function Pop: DNImmutableStack<T>; overload;
    function Pop(out value: T): DNImmutableStack<T>; overload;
    function GetEnumerator: DNImmutableStack_Enumerator<T>;
    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNImmutableStack<T> = class(TDNGenericImport<DNImmutableStackClass<T>, DNImmutableStack<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStackClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{D735C0EC-CC65-5E68-83E6-39B0632D2DC5}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack')]
  DNImmutableStack = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{C1711AB6-4DF4-3FD3-B43E-C5A7AF366CE0}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableStack = class(TDNGenericImport<DNImmutableStackClass, DNImmutableStack>) end;

  //-------------namespace: System.Linq----------------
  DNImmutableArrayExtensionsClass = interface(DDNC.System.Private.CoreLib.DNObjectClass)
  ['{5CFF0745-B77E-52B9-BBFB-0B7AE8F90227}']
  end;

  [DNTypeName('System.Linq.ImmutableArrayExtensions')]
  DNImmutableArrayExtensions = interface(DDNC.System.Private.CoreLib.DNObject)
  ['{DF6E3C56-2D09-3142-8B4C-D204A83FCABB}']
  { methods } 

    function ToString: string;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  end;

  TDNImmutableArrayExtensions = class(TDNGenericImport<DNImmutableArrayExtensionsClass, DNImmutableArrayExtensions>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArrayClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{50E787F8-3722-5FF6-81D3-10F82A0F33F5}']
  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNImmutableArray<T>;

  { static fields } 

    {class} property Empty: DNImmutableArray<T> read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1')]
  DNImmutableArray<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{1EF71BA1-3F52-3BF5-A4E1-3811C89CF687}']
  { getters & setters } 

    function get_Item(index: Int32): T;
    function get_IsEmpty: Boolean;
    function get_Length: Int32;
    function get_IsDefault: Boolean;
    function get_IsDefaultOrEmpty: Boolean;

  { methods } 

    function ItemRef(index: Int32): T;
    procedure CopyTo(destination: TArray<T>); overload;
    procedure CopyTo(destination: TArray<T>; destinationIndex: Int32); overload;
    procedure CopyTo(sourceIndex: Int32; destination: TArray<T>; destinationIndex: Int32; length: Int32); overload;
    function ToBuilder: DNImmutableArray_Builder<T>;
    function GetEnumerator: DNImmutableArray_Enumerator<T>;
    function GetHashCode: Int32;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean; overload;
    function Equals(other: DNImmutableArray<T>): Boolean; overload;
    function IndexOf(item: T): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function IndexOf(item: T; startIndex: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function IndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function LastIndexOf(item: T): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32): Int32; overload;
    function LastIndexOf(item: T; startIndex: Int32; count: Int32; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): Int32; overload;
    function &Contains(item: T): Boolean;
    function Insert(index: Int32; item: T): DNImmutableArray<T>;
    function InsertRange(index: Int32; items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function InsertRange(index: Int32; items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function Add(item: T): DNImmutableArray<T>;
    function AddRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function AddRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function SetItem(index: Int32; item: T): DNImmutableArray<T>;
    function Replace(oldValue: T; newValue: T): DNImmutableArray<T>; overload;
    function Replace(oldValue: T; newValue: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function Remove(item: T): DNImmutableArray<T>; overload;
    function Remove(item: T; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAt(index: Int32): DNImmutableArray<T>;
    function RemoveRange(index: Int32; length: Int32): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DDNC.System.Private.CoreLib.DNIEnumerable<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>): DNImmutableArray<T>; overload;
    function RemoveRange(items: DNImmutableArray<T>; equalityComparer: DDNC.System.Private.CoreLib.DNIEqualityComparer<T>): DNImmutableArray<T>; overload;
    function RemoveAll(match: DDNC.System.Private.CoreLib.DNPredicate<T>): DNImmutableArray<T>;
    function Clear: DNImmutableArray<T>;
    function Sort: DNImmutableArray<T>; overload;
    function Sort(comparison: DDNC.System.Private.CoreLib.DNComparison<T>): DNImmutableArray<T>; overload;
    function Sort(comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function Sort(index: Int32; count: Int32; comparer: DDNC.System.Private.CoreLib.DNIComparer<T>): DNImmutableArray<T>; overload;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Item[index: Int32]: T read get_Item; default;
    property IsEmpty: Boolean read get_IsEmpty;
    property Length: Int32 read get_Length;
    property IsDefault: Boolean read get_IsDefault;
    property IsDefaultOrEmpty: Boolean read get_IsDefaultOrEmpty;
  end;

  TDNImmutableArray<T> = class(TDNGenericImport<DNImmutableArrayClass<T>, DNImmutableArray<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableArray_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{748E29E1-4C0C-51C9-AE61-7C82A27B8006}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableArray`1+Enumerator')]
  DNImmutableArray_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{C98AB9E4-841F-38CA-9AD6-03D116735EE1}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableArray_Enumerator<T> = class(TDNGenericImport<DNImmutableArray_EnumeratorClass<T>, DNImmutableArray_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{35E9868A-73FC-5887-891B-847C39B939DA}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableDictionary`2+Enumerator')]
  DNImmutableDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{16BAEDD0-5680-3848-86CD-BE67F18095D0}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableDictionary_EnumeratorClass<TKey, TValue>, DNImmutableDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableHashSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1B6EDDA4-62EF-5D3D-8C3B-9501F1A7CC32}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableHashSet`1+Enumerator')]
  DNImmutableHashSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{49380954-FDB2-3B37-A8D4-6AB203E2BA0B}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    procedure Reset;
    procedure Dispose;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableHashSet_Enumerator<T> = class(TDNGenericImport<DNImmutableHashSet_EnumeratorClass<T>, DNImmutableHashSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableList_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{1A71D57C-69AA-59CD-99FB-454895A10C4D}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableList`1+Enumerator')]
  DNImmutableList_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{AD0ADF31-7C32-3AD9-9E52-30278B7BE455}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableList_Enumerator<T> = class(TDNGenericImport<DNImmutableList_EnumeratorClass<T>, DNImmutableList_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableQueue_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{9F60779B-0615-5064-B42A-9CC3961B7EEA}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableQueue`1+Enumerator')]
  DNImmutableQueue_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{92139CAF-1038-31E2-8AE7-B90164BAB1BA}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableQueue_Enumerator<T> = class(TDNGenericImport<DNImmutableQueue_EnumeratorClass<T>, DNImmutableQueue_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{150945D7-CB7E-5F42-9C81-D7119ED1FF23}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedDictionary`2+Enumerator')]
  DNImmutableSortedDictionary_Enumerator<TKey, TValue> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{BB3F3ED6-3929-3F1B-9884-D2037C323369}']
  { getters & setters } 

    function get_Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue>;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: DDNC.System.Private.CoreLib.DNKeyValuePair<TKey, TValue> read get_Current;
  end;

  TDNImmutableSortedDictionary_Enumerator<TKey, TValue> = class(TDNGenericImport<DNImmutableSortedDictionary_EnumeratorClass<TKey, TValue>, DNImmutableSortedDictionary_Enumerator<TKey, TValue>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableSortedSet_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{79B8C319-ED2D-58A6-8813-3A2A7ABF40FD}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableSortedSet`1+Enumerator')]
  DNImmutableSortedSet_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{CF42AE8B-980E-3C2F-A649-E409FA29B04D}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    procedure Dispose;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableSortedSet_Enumerator<T> = class(TDNGenericImport<DNImmutableSortedSet_EnumeratorClass<T>, DNImmutableSortedSet_Enumerator<T>>) end;

  //-------------namespace: System.Collections.Immutable----------------
  DNImmutableStack_EnumeratorClass<T> = interface(DDNC.System.Private.CoreLib.DNValueTypeClass)
  ['{15EAC997-B6DA-5846-AC07-4E368D1BF6BE}']
  end;

  [DNTypeName('System.Collections.Immutable.ImmutableStack`1+Enumerator')]
  DNImmutableStack_Enumerator<T> = interface(DDNC.System.Private.CoreLib.DNValueType)
  ['{A78A52C5-24D8-3E93-BB9D-AC6DC64FB81C}']
  { getters & setters } 

    function get_Current: T;

  { methods } 

    function MoveNext: Boolean;
    function Equals(obj: DDNC.System.Private.CoreLib.DNObject): Boolean;
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDNC.System.Private.CoreLib.DNType;

  { propertys } 

    property Current: T read get_Current;
  end;

  TDNImmutableStack_Enumerator<T> = class(TDNGenericImport<DNImmutableStack_EnumeratorClass<T>, DNImmutableStack_Enumerator<T>>) end;


implementation


initialization
  LoadAssemblyModule('System.Collections.Immutable.dll', True, 'System.Collections.Immutable, Version=1.2.3.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
