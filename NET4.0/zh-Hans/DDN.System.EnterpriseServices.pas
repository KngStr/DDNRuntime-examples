//----------------------------------------------------------------------------
//  System.EnterpriseServices.dll: System.EnterpriseServices, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.EnterpriseServices
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.EnterpriseServices;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System.Transactions;

type

{ enums }

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定对访问检查应用程序时，可以在进程级别仅或根本级别，包括组件、 接口和方法级别的级别。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.AccessChecksLevelOption')]
  DNAccessChecksLevelOption = type Integer;
  DNAccessChecksLevelOptionHelper = record helper for DNAccessChecksLevelOption
  public const
    ///<summary>
    ///  启用访问仅在进程级别检查。
    ///  在组件、 接口或方法级别不进行任何访问检查。
    ///</summary>
    Application = 0;
    ///<summary>
    ///  启用访问每个级别上到应用程序调用的检查。
    ///</summary>
    ApplicationComponent = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  应用程序中指定的服务的组件的激活的方式。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ActivationOption')]
  DNActivationOption = type Integer;
  DNActivationOptionHelper = record helper for DNActivationOption
  public const
    ///<summary>
    ///  指定标记的应用程序中的服务的组件在创建者的进程中激活。
    ///</summary>
    Library_ = 0;
    ///<summary>
    ///  指定标记的应用程序中的服务的组件在系统提供的进程中激活。
    ///</summary>
    Server = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定的远程过程调用 (RPC) 身份验证机制。
  ///  仅当适用 <see cref="T:System.EnterpriseServices.ActivationOption" />
  ///  设置为 <see langword="Server" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.AuthenticationOption')]
  DNAuthenticationOption = type Integer;
  DNAuthenticationOptionHelper = record helper for DNAuthenticationOption
  public const
    ///<summary>
    ///  使用指定的身份验证服务的默认身份验证级别。
    ///  在 COM + 中，此设置由提供 <see langword="DefaultAuthenticationLevel" />
    ///  中的属性 <see langword="LocalComputer" />
    ///  集合。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  身份验证不会发生。
    ///</summary>
    None = 1;
    ///<summary>
    ///  仅在建立连接时，请验证凭据。
    ///</summary>
    Connect = 2;
    ///<summary>
    ///  每次调用的开头的凭据进行身份验证。
    ///</summary>
    Call = 3;
    ///<summary>
    ///  验证凭据并验证接收了所有调用数据。
    ///</summary>
    Packet = 4;
    ///<summary>
    ///  验证凭据并确认已在传输过程中修改了任何调用数据。
    ///</summary>
    Integrity = 5;
    ///<summary>
    ///  验证凭据并加密数据包，包括数据和发件人的身份和签名。
    ///</summary>
    Privacy = 6;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示是否由提交所有工作 <see cref="T:System.EnterpriseServices.Activity" />
  ///  应该绑定到只有一个单线程单元 (STA)。
  ///  此枚举的多线程单元 (MTA) 上没有任何影响。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.BindingOption')]
  DNBindingOption = type Integer;
  DNBindingOptionHelper = record helper for DNBindingOption
  public const
    ///<summary>
    ///  该活动提交的工作不绑定到单个 sta。
    ///</summary>
    NoBinding = 0;
    ///<summary>
    ///  该活动提交的工作绑定到单个 sta。
    ///</summary>
    BindingToPoolThread = 1;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>
  ///  指定补偿资源管理器 (CRM) 补偿，应收到用于控制事务完成哪些阶段的标志以及恢复是否应失败后仍有疑问的事务，如果已尝试恢复。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions')]
  DNCompensatorOptions = type Integer;
  DNCompensatorOptionsHelper = record helper for DNCompensatorOptions
  public const
    ///<summary>
    ///  表示在准备阶段。
    ///</summary>
    PreparePhase = 1;
    ///<summary>
    ///  表示提交阶段。
    ///</summary>
    CommitPhase = 2;
    ///<summary>
    ///  表示中止阶段。
    ///</summary>
    AbortPhase = 4;
    ///<summary>
    ///  表示所有阶段。
    ///</summary>
    AllPhases = 7;
    ///<summary>
    ///  如果有疑问的事务保持后尝试恢复将失败。
    ///</summary>
    FailIfInDoubtsRemain = 16;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>
  ///  描述补偿资源管理器 (CRM) 日志记录的来源。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags')]
  DNLogRecordFlags = type Integer;
  DNLogRecordFlagsHelper = record helper for DNLogRecordFlags
  public const
    ///<summary>
    ///  指示应忘记传递的记录。
    ///</summary>
    ForgetTarget = 1;
    ///<summary>
    ///  在准备期间写入日志记录。
    ///</summary>
    WrittenDuringPrepare = 2;
    ///<summary>
    ///  在提交期间写入日志记录。
    ///</summary>
    WrittenDuringCommit = 4;
    ///<summary>
    ///  在中止期间写入日志记录。
    ///</summary>
    WrittenDuringAbort = 8;
    ///<summary>
    ///  在恢复期间写入日志记录。
    ///</summary>
    WrittenDurringRecovery = 16;
    ///<summary>
    ///  在重播期间写入日志记录。
    ///</summary>
    WrittenDuringReplay = 32;
    ///<summary>
    ///  重播时写入日志记录。
    ///</summary>
    ReplayInProgress = 64;
  end;


  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  ///<summary>
  ///  指定当前的补偿资源管理器 (CRM) 事务的状态。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.TransactionState')]
  DNTransactionState = type Integer;
  DNTransactionStateHelper = record helper for DNTransactionState
  public const
    ///<summary>
    ///  事务处于活动状态。
    ///</summary>
    Active = 0;
    ///<summary>
    ///  该事务被提交。
    ///</summary>
    Committed = 1;
    ///<summary>
    ///  事务被中止。
    ///</summary>
    Aborted = 2;
    ///<summary>
    ///  事务是不确定。
    ///</summary>
    Indoubt = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定允许调用服务器应用程序的目标时的模拟级别。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ImpersonationLevelOption')]
  DNImpersonationLevelOption = type Integer;
  DNImpersonationLevelOptionHelper = record helper for DNImpersonationLevelOption
  public const
    ///<summary>
    ///  使用指定的身份验证服务的默认模拟级别。
    ///  在 COM + 中，此设置由提供 <see langword="DefaultImpersonationLevel" />
    ///  中的属性 <see langword="LocalComputer" />
    ///  集合。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  客户端是匿名的服务器。
    ///  服务器进程可以模拟客户端，但是模拟令牌不包含有关客户端的任何信息。
    ///</summary>
    Anonymous = 1;
    ///<summary>
    ///  系统默认的级别。
    ///  服务器可以获取客户端的标识，并且服务器可以模拟客户端进行 ACL 检查。
    ///</summary>
    Identify = 2;
    ///<summary>
    ///  服务器可以模拟代表客户端操作时的客户端的安全上下文。
    ///  服务器可以作为客户端访问本地资源。
    ///</summary>
    Impersonate = 3;
    ///<summary>
    ///  功能最强大的模拟级别。
    ///  服务器选择此级别时，可以 （无论是本地或远程） 模拟代表客户端操作时的客户端的安全上下文
    ///</summary>
    Delegate = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示是否要创建新的上下文基于当前上下文或中的信息 <see cref="T:System.EnterpriseServices.ServiceConfig" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.InheritanceOption')]
  DNInheritanceOption = type Integer;
  DNInheritanceOptionHelper = record helper for DNInheritanceOption
  public const
    ///<summary>
    ///  从现有上下文创建新的上下文。
    ///<see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  是默认值为 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  。
    ///</summary>
    Inherit = 0;
    ///<summary>
    ///  默认上下文中创建新的上下文。
    ///</summary>
    Ignore = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  与使用标志 <see cref="T:System.EnterpriseServices.RegistrationHelper" />
  ///  类。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.InstallationFlags')]
  DNInstallationFlags = type Integer;
  DNInstallationFlagsHelper = record helper for DNInstallationFlags
  public const
    ///<summary>
    ///  执行操作的默认安装，该配置时，安装时，注册，并假定该应用程序已存在。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  不导出类型库中;一个可以找到由生成或提供的类型库名称。
    ///</summary>
    ExpectExistingTypeLib = 1;
    ///<summary>
    ///  创建目标应用程序。
    ///  如果目标已经存在，就会出错。
    ///</summary>
    CreateTargetApplication = 2;
    ///<summary>
    ///  如果不存在;，创建了应用程序否则使用现有的应用程序。
    ///</summary>
    FindOrCreateTargetApplication = 4;
    ///<summary>
    ///  如果使用现有的应用程序，可确保此应用程序上的属性匹配那些在程序集中。
    ///</summary>
    ReconfigureExistingApplication = 8;
    ///<summary>
    ///  配置组件仅，不要配置方法或接口。
    ///</summary>
    ConfigureComponentsOnly = 16;
    ///<summary>
    ///  当遇到警报文本时，将其写入控制台。
    ///</summary>
    ReportWarningsToConsole = 32;
    ///<summary>
    ///  不应使用。
    ///</summary>
    Register_ = 256;
    ///<summary>
    ///  不应使用。
    ///</summary>
    Install = 512;
    ///<summary>
    ///  不应使用。
    ///</summary>
    Configure = 1024;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示要在其中运行 COM + 分区的上下文。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.PartitionOption')]
  DNPartitionOption = type Integer;
  DNPartitionOptionHelper = record helper for DNPartitionOption
  public const
    ///<summary>
    ///  在全局分区中运行包含的上下文。
    ///<see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />
    ///  是默认设置 <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" />
    ///  时 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />
    ///  。
    ///</summary>
    Ignore = 0;
    ///<summary>
    ///  包含的上下文运行在当前包含 COM + 分区。
    ///  这是默认设置 <see cref="P:System.EnterpriseServices.ServiceConfig.PartitionOption" />
    ///  时 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  。
    ///</summary>
    Inherit = 1;
    ///<summary>
    ///  在不同于当前包含分区的 COM + 分区中运行包含的上下文。
    ///</summary>
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定用于访问共享的属性组管理器中的共享的属性的模式。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.PropertyLockMode')]
  DNPropertyLockMode = type Integer;
  DNPropertyLockModeHelper = record helper for DNPropertyLockMode
  public const
    ///<summary>
    ///  锁在 get 或 set，保证每个获取或设置对共享属性的操作过程的属性是原子的。
    ///</summary>
    SetGet = 0;
    ///<summary>
    ///  只要执行调用方的当前方法将锁定专供调用方的共享的属性组中的所有属性。
    ///</summary>
    Method = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定新的共享的属性组中的属性的释放模式。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.PropertyReleaseMode')]
  DNPropertyReleaseMode = type Integer;
  DNPropertyReleaseModeHelper = record helper for DNPropertyReleaseMode
  public const
    ///<summary>
    ///  所有客户端已释放时它们对属性组的引用，该属性组将自动销毁。
    ///  这是默认 COM 模式。
    ///</summary>
    Standard = 0;
    ///<summary>
    ///  直到在其中创建的进程已终止，该属性组不会被破坏。
    ///</summary>
    Process = 1;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示如何通过并行程序集配置为 <see cref="T:System.EnterpriseServices.ServiceConfig" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SxsOption')]
  DNSxsOption = type Integer;
  DNSxsOptionHelper = record helper for DNSxsOption
  public const
    ///<summary>
    ///  包含的上下文中未使用并行程序集。
    ///<see cref="F:System.EnterpriseServices.SxsOption.Ignore" />
    ///  是默认设置 <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" />
    ///  时 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Ignore" />
    ///  。
    ///</summary>
    Ignore = 0;
    ///<summary>
    ///  使用当前的并行程序集所包含的上下文。
    ///<see cref="F:System.EnterpriseServices.SxsOption.Inherit" />
    ///  是默认设置 <see cref="P:System.EnterpriseServices.ServiceConfig.SxsOption" />
    ///  时 <see cref="P:System.EnterpriseServices.ServiceConfig.Inheritance" />
    ///  设置为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  。
    ///</summary>
    Inherit = 1;
    ///<summary>
    ///  为包含的上下文创建新的并行程序集。
    ///</summary>
    New = 2;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定的自动同步组件请求的类型。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SynchronizationOption')]
  DNSynchronizationOption = type Integer;
  DNSynchronizationOptionHelper = record helper for DNSynchronizationOption
  public const
    ///<summary>
    ///  COM + 时确定对象的上下文，则忽略该组件的同步要求。
    ///</summary>
    Disabled = 0;
    ///<summary>
    ///  具有此值的对象永远不会参与同步，而不考虑其调用方的状态。
    ///  此设置才可用的非事务性，并且在不使用在实时 (JIT) 激活的组件。
    ///</summary>
    NotSupported = 1;
    ///<summary>
    ///  具有此值的对象参与同步过程中，如果它存在。
    ///</summary>
    Supported = 2;
    ///<summary>
    ///  可以确保从组件创建的所有对象都保持都同步。
    ///</summary>
    Required = 3;
    ///<summary>
    ///  具有此值的对象必须参与其中 COM + 管理上下文和单元代表在调用中涉及的所有组件的新同步。
    ///</summary>
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示线程池工作，提交的 <see cref="T:System.EnterpriseServices.Activity" />
  ///  , ，运行。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ThreadPoolOption')]
  DNThreadPoolOption = type Integer;
  DNThreadPoolOptionHelper = record helper for DNThreadPoolOption
  public const
    ///<summary>
    ///  使用没有线程池。
    ///  如果此值用于配置 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  传递给 <see cref="T:System.EnterpriseServices.Activity" />
    ///  , ，将引发异常。
    ///</summary>
    None = 0;
    ///<summary>
    ///  使用调用方的线程单元具有相同类型的线程池单元。
    ///</summary>
    Inherit = 1;
    ///<summary>
    ///  使用单线程单元 (STA)。
    ///</summary>
    STA = 2;
    ///<summary>
    ///  使用多线程的单元 (MTA)。
    ///</summary>
    MTA = 3;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定的值的 <see cref="T:System.EnterpriseServices.TransactionAttribute" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.TransactionIsolationLevel')]
  DNTransactionIsolationLevel = type Integer;
  DNTransactionIsolationLevelHelper = record helper for DNTransactionIsolationLevel
  public const
    ///<summary>
    ///  从调用组件的隔离级别中获取该组件的隔离级别。
    ///  如果这是根组件，使用的隔离级别是 <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Serializable" />
    ///  。
    ///</summary>
    Any = 0;
    ///<summary>
    ///  发出共享的锁和任何排他锁将生效。
    ///</summary>
    ReadUncommitted = 1;
    ///<summary>
    ///  正在读取数据以避免读取已修改的数据，但在该事务，从而导致不可重复读取或幻像数据末尾之前可以更改数据时，将保持共享的锁。
    ///</summary>
    ReadCommitted = 2;
    ///<summary>
    ///  在查询中，阻止其他用户更新的数据使用的所有数据上放置锁。
    ///  可防止非可重复读取，但仍有可能幻像行。
    ///</summary>
    RepeatableRead = 3;
    ///<summary>
    ///  可以防止更新或插入事务完成之前。
    ///</summary>
    Serializable = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定组件请求的自动事务类型。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.TransactionOption')]
  DNTransactionOption = type Integer;
  DNTransactionOptionHelper = record helper for DNTransactionOption
  public const
    ///<summary>
    ///  将忽略在当前上下文中的任何事务。
    ///</summary>
    Disabled = 0;
    ///<summary>
    ///  没有用于控制事务的上下文中创建的组件。
    ///</summary>
    NotSupported = 1;
    ///<summary>
    ///  如果存在，则共享该事务。
    ///</summary>
    Supported = 2;
    ///<summary>
    ///  共享一个事务，如果其中一个存在，并且如有必要创建一个新事务。
    ///</summary>
    Required = 3;
    ///<summary>
    ///  创建新的事务，而不考虑当前上下文的状态的组件。
    ///</summary>
    RequiresNew = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指示事务状态。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.TransactionStatus')]
  DNTransactionStatus = type Integer;
  DNTransactionStatusHelper = record helper for DNTransactionStatus
  public const
    ///<summary>
    ///  提交该事务。
    ///</summary>
    Commited = 0;
    ///<summary>
    ///  该事务已不能提交或中止。
    ///</summary>
    LocallyOk = 1;
    ///<summary>
    ///  没有事务正在使用通过 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
    ///  。
    ///</summary>
    NoTransaction = 2;
    ///<summary>
    ///  在事务正在中止。
    ///</summary>
    Aborting = 3;
    ///<summary>
    ///  事务被中止。
    ///</summary>
    Aborted = 4;
  end;


  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  指定所允许的事务结果投票值。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.TransactionVote')]
  DNTransactionVote = type Integer;
  DNTransactionVoteHelper = record helper for DNTransactionVote
  public const
    ///<summary>
    ///  提交当前事务。
    ///</summary>
    Commit = 0;
    ///<summary>
    ///  中止当前事务。
    ///</summary>
    Abort_ = 1;
  end;




type


{ declares }

  DNIAsyncErrorNotify = interface; // type: System.EnterpriseServices.IAsyncErrorNotify, namespace: System.EnterpriseServices
  DNIClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.IClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNIComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.IComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNIComSoapIISVRoot = interface; // type: System.EnterpriseServices.Internal.IComSoapIISVRoot, namespace: System.EnterpriseServices.Internal
  DNIComSoapMetadata = interface; // type: System.EnterpriseServices.Internal.IComSoapMetadata, namespace: System.EnterpriseServices.Internal
  DNIComSoapPublisher = interface; // type: System.EnterpriseServices.Internal.IComSoapPublisher, namespace: System.EnterpriseServices.Internal
  DNIServerWebConfig = interface; // type: System.EnterpriseServices.Internal.IServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNISoapClientImport = interface; // type: System.EnterpriseServices.Internal.ISoapClientImport, namespace: System.EnterpriseServices.Internal
  DNISoapServerTlb = interface; // type: System.EnterpriseServices.Internal.ISoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNISoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.ISoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNISoapUtility = interface; // type: System.EnterpriseServices.Internal.ISoapUtility, namespace: System.EnterpriseServices.Internal
  DNIPlaybackControl = interface; // type: System.EnterpriseServices.IPlaybackControl, namespace: System.EnterpriseServices
  DNIProcessInitControl = interface; // type: System.EnterpriseServices.IProcessInitControl, namespace: System.EnterpriseServices
  DNIProcessInitializer = interface; // type: System.EnterpriseServices.IProcessInitializer, namespace: System.EnterpriseServices
  DNIRegistrationHelper = interface; // type: System.EnterpriseServices.IRegistrationHelper, namespace: System.EnterpriseServices
  DNIRemoteDispatch = interface; // type: System.EnterpriseServices.IRemoteDispatch, namespace: System.EnterpriseServices
  DNIServiceCall = interface; // type: System.EnterpriseServices.IServiceCall, namespace: System.EnterpriseServices
  DNIServicedComponentInfo = interface; // type: System.EnterpriseServices.IServicedComponentInfo, namespace: System.EnterpriseServices
  DNITransaction = interface; // type: System.EnterpriseServices.ITransaction, namespace: System.EnterpriseServices
  DNApplicationAccessControlAttribute = interface; // type: System.EnterpriseServices.ApplicationAccessControlAttribute, namespace: System.EnterpriseServices
  DNApplicationActivationAttribute = interface; // type: System.EnterpriseServices.ApplicationActivationAttribute, namespace: System.EnterpriseServices
  DNApplicationIDAttribute = interface; // type: System.EnterpriseServices.ApplicationIDAttribute, namespace: System.EnterpriseServices
  DNApplicationNameAttribute = interface; // type: System.EnterpriseServices.ApplicationNameAttribute, namespace: System.EnterpriseServices
  DNApplicationQueuingAttribute = interface; // type: System.EnterpriseServices.ApplicationQueuingAttribute, namespace: System.EnterpriseServices
  DNAutoCompleteAttribute = interface; // type: System.EnterpriseServices.AutoCompleteAttribute, namespace: System.EnterpriseServices
  DNApplicationCrmEnabledAttribute = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNComponentAccessControlAttribute = interface; // type: System.EnterpriseServices.ComponentAccessControlAttribute, namespace: System.EnterpriseServices
  DNCOMTIIntrinsicsAttribute = interface; // type: System.EnterpriseServices.COMTIIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNConstructionEnabledAttribute = interface; // type: System.EnterpriseServices.ConstructionEnabledAttribute, namespace: System.EnterpriseServices
  DNDescriptionAttribute = interface; // type: System.EnterpriseServices.DescriptionAttribute, namespace: System.EnterpriseServices
  DNEventClassAttribute = interface; // type: System.EnterpriseServices.EventClassAttribute, namespace: System.EnterpriseServices
  DNEventTrackingEnabledAttribute = interface; // type: System.EnterpriseServices.EventTrackingEnabledAttribute, namespace: System.EnterpriseServices
  DNExceptionClassAttribute = interface; // type: System.EnterpriseServices.ExceptionClassAttribute, namespace: System.EnterpriseServices
  DNIISIntrinsicsAttribute = interface; // type: System.EnterpriseServices.IISIntrinsicsAttribute, namespace: System.EnterpriseServices
  DNInterfaceQueuingAttribute = interface; // type: System.EnterpriseServices.InterfaceQueuingAttribute, namespace: System.EnterpriseServices
  DNJustInTimeActivationAttribute = interface; // type: System.EnterpriseServices.JustInTimeActivationAttribute, namespace: System.EnterpriseServices
  DNLoadBalancingSupportedAttribute = interface; // type: System.EnterpriseServices.LoadBalancingSupportedAttribute, namespace: System.EnterpriseServices
  DNMustRunInClientContextAttribute = interface; // type: System.EnterpriseServices.MustRunInClientContextAttribute, namespace: System.EnterpriseServices
  DNObjectPoolingAttribute = interface; // type: System.EnterpriseServices.ObjectPoolingAttribute, namespace: System.EnterpriseServices
  DNPrivateComponentAttribute = interface; // type: System.EnterpriseServices.PrivateComponentAttribute, namespace: System.EnterpriseServices
  DNSecureMethodAttribute = interface; // type: System.EnterpriseServices.SecureMethodAttribute, namespace: System.EnterpriseServices
  DNSecurityRoleAttribute = interface; // type: System.EnterpriseServices.SecurityRoleAttribute, namespace: System.EnterpriseServices
  DNSynchronizationAttribute = interface; // type: System.EnterpriseServices.SynchronizationAttribute, namespace: System.EnterpriseServices
  DNTransactionAttribute = interface; // type: System.EnterpriseServices.TransactionAttribute, namespace: System.EnterpriseServices
  DNActivity = interface; // type: System.EnterpriseServices.Activity, namespace: System.EnterpriseServices
  DNBYOT = interface; // type: System.EnterpriseServices.BYOT, namespace: System.EnterpriseServices
  DNClerk = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Clerk, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkInfo = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkInfo, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNClerkMonitor = interface; // type: System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNLogRecord = interface; // type: System.EnterpriseServices.CompensatingResourceManager.LogRecord, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNContextUtil = interface; // type: System.EnterpriseServices.ContextUtil, namespace: System.EnterpriseServices
  DNAppDomainHelper = interface; // type: System.EnterpriseServices.Internal.AppDomainHelper, namespace: System.EnterpriseServices.Internal
  DNClientRemotingConfig = interface; // type: System.EnterpriseServices.Internal.ClientRemotingConfig, namespace: System.EnterpriseServices.Internal
  DNClrObjectFactory = interface; // type: System.EnterpriseServices.Internal.ClrObjectFactory, namespace: System.EnterpriseServices.Internal
  DNComManagedImportUtil = interface; // type: System.EnterpriseServices.Internal.ComManagedImportUtil, namespace: System.EnterpriseServices.Internal
  DNComSoapPublishError = interface; // type: System.EnterpriseServices.Internal.ComSoapPublishError, namespace: System.EnterpriseServices.Internal
  DNGenerateMetadata = interface; // type: System.EnterpriseServices.Internal.GenerateMetadata, namespace: System.EnterpriseServices.Internal
  DNIISVirtualRoot = interface; // type: System.EnterpriseServices.Internal.IISVirtualRoot, namespace: System.EnterpriseServices.Internal
  DNPublish = interface; // type: System.EnterpriseServices.Internal.Publish, namespace: System.EnterpriseServices.Internal
  DNServerWebConfig = interface; // type: System.EnterpriseServices.Internal.ServerWebConfig, namespace: System.EnterpriseServices.Internal
  DNSoapClientImport = interface; // type: System.EnterpriseServices.Internal.SoapClientImport, namespace: System.EnterpriseServices.Internal
  DNSoapServerTlb = interface; // type: System.EnterpriseServices.Internal.SoapServerTlb, namespace: System.EnterpriseServices.Internal
  DNSoapServerVRoot = interface; // type: System.EnterpriseServices.Internal.SoapServerVRoot, namespace: System.EnterpriseServices.Internal
  DNSoapUtility = interface; // type: System.EnterpriseServices.Internal.SoapUtility, namespace: System.EnterpriseServices.Internal
  DNRegistrationConfig = interface; // type: System.EnterpriseServices.RegistrationConfig, namespace: System.EnterpriseServices
  DNRegistrationErrorInfo = interface; // type: System.EnterpriseServices.RegistrationErrorInfo, namespace: System.EnterpriseServices
  DNResourcePool = interface; // type: System.EnterpriseServices.ResourcePool, namespace: System.EnterpriseServices
  DNSecurityCallContext = interface; // type: System.EnterpriseServices.SecurityCallContext, namespace: System.EnterpriseServices
  DNSecurityCallers = interface; // type: System.EnterpriseServices.SecurityCallers, namespace: System.EnterpriseServices
  DNSecurityIdentity = interface; // type: System.EnterpriseServices.SecurityIdentity, namespace: System.EnterpriseServices
  DNServiceConfig = interface; // type: System.EnterpriseServices.ServiceConfig, namespace: System.EnterpriseServices
  DNServiceDomain = interface; // type: System.EnterpriseServices.ServiceDomain, namespace: System.EnterpriseServices
  DNSharedProperty = interface; // type: System.EnterpriseServices.SharedProperty, namespace: System.EnterpriseServices
  DNSharedPropertyGroup = interface; // type: System.EnterpriseServices.SharedPropertyGroup, namespace: System.EnterpriseServices
  DNSharedPropertyGroupManager = interface; // type: System.EnterpriseServices.SharedPropertyGroupManager, namespace: System.EnterpriseServices
  DNRegistrationException = interface; // type: System.EnterpriseServices.RegistrationException, namespace: System.EnterpriseServices
  DNServicedComponentException = interface; // type: System.EnterpriseServices.ServicedComponentException, namespace: System.EnterpriseServices
  DNServicedComponent = interface; // type: System.EnterpriseServices.ServicedComponent, namespace: System.EnterpriseServices
  DNCompensator = interface; // type: System.EnterpriseServices.CompensatingResourceManager.Compensator, namespace: System.EnterpriseServices.CompensatingResourceManager
  DNRegistrationHelperTx = interface; // type: System.EnterpriseServices.RegistrationHelperTx, namespace: System.EnterpriseServices
  DNAssemblyLocator = interface; // type: System.EnterpriseServices.Internal.AssemblyLocator, namespace: System.EnterpriseServices.Internal
  DNRegistrationHelper = interface; // type: System.EnterpriseServices.RegistrationHelper, namespace: System.EnterpriseServices
  DNBOID = interface; // type: System.EnterpriseServices.BOID, namespace: System.EnterpriseServices
  DNXACTTRANSINFO = interface; // type: System.EnterpriseServices.XACTTRANSINFO, namespace: System.EnterpriseServices

{ delegates }

  ///<summary>
  ///  表示用于处理事务的结束的方法。
  ///</summary>
  ///  <param name="resource">
  ///  返回到该委托传递的对象。
  ///</param>
  [DNTypeName('System.EnterpriseServices.ResourcePool+TransactionEndDelegate')]
  DNResourcePool_TransactionEndDelegate = procedure(resource: DDN.mscorlib.DNObject) of object;




{ objects }

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  提交通过异步方式成批工作上的实现错误捕获 <see cref="T:System.EnterpriseServices.Activity" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IAsyncErrorNotify')]
  DNIAsyncErrorNotify = interface(DDN.mscorlib.DNObject)
  ['{FE6777FB-A674-4177-8F32-6D707E113484}']
  { methods } 

    ///<summary>
    ///  处理错误以异步方式成批工作。
    ///</summary>
    ///  <param name="hresult">
    ///  以异步方式运行的批处理工作时出现的错误的 HRESULT。
    ///</param>
    procedure OnError(hresult: Int32);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  激活启用 SOAP 的 COM + 应用程序代理从客户端。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IClrObjectFactory')]
  DNIClrObjectFactory = interface(DDN.mscorlib.DNObject)
  ['{ECABAFD2-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用该程序集的配置文件。
    ///</summary>
    ///  <param name="assembly">
    ///  要激活的程序集的名称。
    ///</param>
    ///  <param name="type">
    ///  要激活的类型的名称。
    ///</param>
    ///  <param name="mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  与区域性、 参数和绑定及激活特性设置为表示的类型， <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  如果 <paramref name="type" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  未注册的类。
    ///</exception>
    function CreateFromAssembly(assembly: string; &type: string; mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用远程程序集的虚拟根 URL。
    ///</summary>
    ///  <param name="VrootUrl">
    ///  远程对象的虚拟根 URL。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  与区域性、 参数和绑定及激活特性设置为表示的类型， <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  标识程序集如果 <paramref name="VrootUrl" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  无法打开线程令牌。
    ///</exception>
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理使用 Web 服务描述语言 (WSDL) 的 XML Web 服务。
    ///</summary>
    ///  <param name="WsdlUrl">
    ///  Web 服务的 WSDL URL。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  与区域性、 参数和绑定及激活特性设置为表示的类型， <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  标识程序集如果 <paramref name="WsdlUrl" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  无法打开线程令牌。
    ///</exception>
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用远程程序集的邮箱。
    ///  当前未实现;引发 <see cref="T:System.Runtime.InteropServices.COMException" />
    ///  如果调用。
    ///</summary>
    ///  <param name="Mailbox">
    ///  与 Web 服务邮箱。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  调用此方法会引发异常。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  未实现简单邮件传输协议 (SMTP)。
    ///</exception>
    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  标识并安装 COM + 目录中的组件。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComManagedImportUtil')]
  DNIComManagedImportUtil = interface(DDN.mscorlib.DNObject)
  ['{C3F8F66B-91BE-4C99-A94F-CE3B0A951039}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    ///<summary>
    ///  将程序集安装到 COM + 应用程序。
    ///</summary>
    ///  <param name="filename">
    ///  程序集路径。
    ///</param>
    ///  <param name="parname">
    ///  COM + 分区名称。
    ///</param>
    ///  <param name="appname">
    ///  COM + 应用程序名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception>
    procedure InstallAssembly(filename: string; parname: string; appname: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  接口定义用于创建和删除 Internet 信息服务 (IIS) 6.0 虚拟根。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapIISVRoot')]
  DNIComSoapIISVRoot = interface(DDN.mscorlib.DNObject)
  ['{D8013EF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  指定生成的 COM + 组件的公共语言运行时 (CLR) 元数据的方法。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapMetadata')]
  DNIComSoapMetadata = interface(DDN.mscorlib.DNObject)
  ['{D8013FF0-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>
    ///  将生成一个包含指定的类型库所表示的 COM + 组件的公共语言运行时 (CLR) 元数据程序集。
    ///</summary>
    ///  <param name="SrcTypeLibFileName">
    ///  类型库的名称，将为该类型库生成一个程序集。
    ///</param>
    ///  <param name="OutPath">
    ///  在其中生成程序集的文件夹。
    ///</param>
    ///<returns>
    ///  生成的程序集名称。
    ///</returns>
    function Generate(SrcTypeLibFileName: string; OutPath: string): string;
    function GenerateSigned(SrcTypeLibFileName: string; OutPath: string; InstallGac: Boolean; out Error: string): string;

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  发布用于启用 SOAP 的 COM + 应用程序的 COM 接口。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IComSoapPublisher')]
  DNIComSoapPublisher = interface(DDN.mscorlib.DNObject)
  ['{D8013EEE-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out AssemblyName: string; out TypeName: string; out Error: string);
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    ///<summary>
    ///  在程序集上反映，并返回与匹配 ProgID 的类型名称。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///  <param name="ProgId">
    ///  类的编程标识符。
    ///</param>
    ///<returns>
    ///  相匹配的 ProgID 的类型名称。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception>
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    ///<summary>
    ///  注册为 COM 互操作程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///  - 或 -
    ///  指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到，或者未指定文件扩展名。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  两次用两个不同的证据加载了程序集或模块，或程序集名称的长度超过 MAX_PATH 个字符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  一种方法标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  不是 <see langword="static" />
    ///  。
    ///  - 或 -
    ///  使用标记的多个方法 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  在给定级别的层次结构。
    ///  - 或 -
    ///  该方法的签名标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  无效。
    ///</exception>
    procedure RegisterAssembly(AssemblyPath: string);
    ///<summary>
    ///  注销 COM 互操作程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///  - 或 -
    ///  指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到，或者未指定文件扩展名。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  两次用两个不同的证据加载了程序集或模块，或程序集名称的长度超过 MAX_PATH 个字符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  一种方法标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  不是 <see langword="static" />
    ///  。
    ///  - 或 -
    ///  使用标记的多个方法 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  在给定级别的层次结构。
    ///  - 或 -
    ///  该方法的签名标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  无效。
    ///</exception>
    procedure UnRegisterAssembly(AssemblyPath: string);
    ///<summary>
    ///  将程序集安装在全局程序集缓存中。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception>
    procedure GacInstall(AssemblyPath: string);
    ///<summary>
    ///  从全局程序集缓存中移除程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="AssemblyPath" />
    ///  为空。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  一个程序集或模块用两个不同的证据加载了两次。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception>
    procedure GacRemove(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  创建启用 SOAP 的 COM + 应用程序的 Web.config 文件并将组件条目添加到 COM 接口在发布应用程序中的文件。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IServerWebConfig')]
  DNIServerWebConfig = interface(DDN.mscorlib.DNObject)
  ['{6261E4B5-572A-4142-A2F9-1FE1A0C97097}']
  { methods } 

    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; out Error: string);
    procedure Create(FilePath: string; FileRootName: string; out Error: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  导入经过身份验证，加密的 SOAP 客户端代理。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapClientImport')]
  DNISoapClientImport = interface(DDN.mscorlib.DNObject)
  ['{E7F0F021-9201-47E4-94DA-1D1416DEC27A}']
  { methods } 

    ///<summary>
    ///  创建包括安全和身份验证选项，在.NET 远程处理客户端配置文件。
    ///</summary>
    ///  <param name="progId">
    ///  类的编程标识符。
    ///  如果是空字符串 ("")，此方法返回时不执行任何操作。
    ///</param>
    ///  <param name="virtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///  <param name="baseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="authentication">
    ///  要使用的 ASP.NET 身份验证的类型。
    ///</param>
    ///  <param name="assemblyName">
    ///  程序集的名称。
    ///</param>
    ///  <param name="typeName">
    ///  类型的名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception>
    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  进程身份验证，在服务器上的加密的 SOAP 组件。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerTlb')]
  DNISoapServerTlb = interface(DDN.mscorlib.DNObject)
  ['{1E7BA9F7-21DB-4482-929E-21BDE2DFE51C}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out assemblyName: string; out typeName: string);
    ///<summary>
    ///  从 Web.config 和 Default.disco 文件，具体取决于安全选项移除服务器类型库项。
    ///</summary>
    ///  <param name="progId">
    ///  类的编程标识符。
    ///</param>
    ///  <param name="classId">
    ///  类型库类标识符 (CLSID)。
    ///</param>
    ///  <param name="interfaceId">
    ///  类型库的 IID。
    ///</param>
    ///  <param name="srcTlbPath">
    ///  包含类型库的文件路径。
    ///</param>
    ///  <param name="rootWebServer">
    ///  根 Web 服务器。
    ///</param>
    ///  <param name="baseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="virtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///  <param name="operation">
    ///  未使用。
    ///  指定 <see langword="null" />
    ///  为此参数。
    ///</param>
    ///  <param name="assemblyName">
    ///  程序集的名称。
    ///</param>
    ///  <param name="typeName">
    ///  程序集的类型。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception>
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  发布服务器中的经过身份验证、 加密 SOAP 虚拟根目录。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapServerVRoot')]
  DNISoapServerVRoot = interface(DDN.mscorlib.DNObject)
  ['{A31B6577-71D2-4344-AEDF-ADC1B0DC5347}']
  { methods } 

    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    ///<summary>
    ///  删除虚拟根目录。
    ///  未完全实现。
    ///</summary>
    ///  <param name="rootWebServer">
    ///  根 Web 服务器。
    ///</param>
    ///  <param name="baseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="virtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception><exception cref="T:System.EnterpriseServices.ServicedComponentException">
    ///  用于标识系统目录的调用失败。
    ///</exception>
    procedure DeleteVirtualRootEx(rootWebServer: string; baseUrl: string; virtualRoot: string);
    procedure GetVirtualRootStatus(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out exists: string; out secureSockets: string; out windowsAuth: string; out anonymous: string; out homePage: string; out discoFile: string; out physicalPath: string; out baseUrl: string; out virtualRoot: string);

  end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  ///<summary>
  ///  提供实用工具，以支持启用 COM + SOAP 的应用程序代理服务器和客户端代理的导入导出。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ISoapUtility')]
  DNISoapUtility = interface(DDN.mscorlib.DNObject)
  ['{5AC4CB7E-F89F-429B-926B-C7F940936BF4}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    ///<summary>
    ///  确定是否经过身份验证，加密的 SOAP 接口存在。
    ///</summary>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception>
    procedure Present;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  排队的组件中服务器端播放错误的异常处理和客户端失败的消息队列传送机制中的函数。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IPlaybackControl')]
  DNIPlaybackControl = interface(DDN.mscorlib.DNObject)
  ['{51372AFD-CAE7-11CF-BE81-00AA00A2FA25}']
  { methods } 

    ///<summary>
    ///  通知客户端的异常处理组件，均被拒绝的所有消息队列尝试将消息传送到服务器，并且在消息终止于客户端的事务死信队列。
    ///</summary>
    procedure FinalClientRetry;
    ///<summary>
    ///  通知服务器端异常类实现，播放到服务器的延迟的激活的所有尝试都失败，并且在消息已被移动到其最终静止队列。
    ///</summary>
    procedure FinalServerRetry;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  支持设置的超时时间为 <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IProcessInitControl')]
  DNIProcessInitControl = interface(DDN.mscorlib.DNObject)
  ['{72380D55-8D2B-43A3-8513-2B6EF31434E9}']
  { methods } 

    ///<summary>
    ///  设置之前剩余的秒数 <see cref="M:System.EnterpriseServices.IProcessInitializer.Startup(System.Object)" />
    ///  方法超时之前。
    ///</summary>
    ///  <param name="dwSecondsRemaining">
    ///  在所需执行的启动方法超时时间的时间之前保持的秒数。
    ///</param>
    procedure ResetInitializerTimeout(dwSecondsRemaining: Int32);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  支持的 COM 组件启动或关闭时可以调用的方法。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IProcessInitializer')]
  DNIProcessInitializer = interface(DDN.mscorlib.DNObject)
  ['{1113F52D-DC7F-4943-AED6-88D04027E32A}']
  { methods } 

    ///<summary>
    ///  执行在启动时初始化。
    ///  启动 Dllhost.exe 时调用。
    ///</summary>
    ///  <param name="punkProcessControl">
    ///  在 Microsoft Windows XP 中，指向的指针 <see langword="IUnknown" />
    ///  启动的 COM 组件的接口。
    ///  在 Microsoft Windows 2000 中，此参数始终是 <see langword="null" />
    ///  。
    ///</param>
    procedure Startup(punkProcessControl: DDN.mscorlib.DNObject);
    ///<summary>
    ///  执行关闭操作。
    ///  当 Dllhost.exe 关闭时调用。
    ///</summary>
    procedure Shutdown;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  安装和配置 COM + 目录中的程序集。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IRegistrationHelper')]
  DNIRegistrationHelper = interface(DDN.mscorlib.DNObject)
  ['{55E3EA25-55CB-4650-8887-18E8D30BB4BC}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags);
    ///<summary>
    ///  从 COM + 目录中卸载该程序集。
    ///</summary>
    ///  <param name="assembly">
    ///  作为一个文件或全局程序集缓存 (GAC) 中的程序集的强名称程序集名称。
    ///</param>
    ///  <param name="application">
    ///  COM + 应用程序的名称。
    ///</param>
    procedure UninstallAssembly(assembly: string; application: string);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  实现的 <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  类来确定如果 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
  ///  类属性设置为 <see langword="true" />
  ///  或 <see langword="false" />
  ///  远程方法调用。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IRemoteDispatch')]
  DNIRemoteDispatch = interface(DDN.mscorlib.DNObject)
  ['{6619A740-8154-43BE-A186-0319578E02DB}']
  { methods } 

    ///<summary>
    ///  确保在 COM + 上下文中， <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  类对象 done 的位设置为 <see langword="true" />
    ///  远程方法调用后。
    ///</summary>
    ///  <param name="s">
    ///  要转换为实现一个请求对象的字符串 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" />
    ///  接口。
    ///</param>
    ///<returns>
    ///  从实现的响应对象的字符串转换 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" />
    ///  接口。
    ///</returns>
    function RemoteDispatchAutoDone(s: string): string;
    ///<summary>
    ///  不能确保在 COM + 上下文中， <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  类对象 done 的位设置为 <see langword="true" />
    ///  远程方法调用后。
    ///</summary>
    ///  <param name="s">
    ///  字符串转换为请求对象实现 <see cref="T:System.Runtime.Remoting.Messaging.IMessage" />
    ///  接口。
    ///</param>
    ///<returns>
    ///  一个字符串，转换从响应对象实现 <see cref="T:System.Runtime.Remoting.Messaging.IMethodReturnMessage" />
    ///  接口。
    ///</returns>
    function RemoteDispatchNotAutoDone(s: string): string;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  实现创建的活动通过提交的批处理工作 <see cref="T:System.EnterpriseServices.Activity" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IServiceCall')]
  DNIServiceCall = interface(DDN.mscorlib.DNObject)
  ['{BD3E2E12-42DD-40F4-A09A-95A50C58304B}']
  { methods } 

    ///<summary>
    ///  开始执行此方法中实现的批处理工作。
    ///</summary>
    procedure OnCall;

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  实现的 <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  类来获取有关通过组件的信息 <see cref="M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IServicedComponentInfo')]
  DNIServicedComponentInfo = interface(DDN.mscorlib.DNObject)
  ['{8165B19E-8D3A-4D0B-80C8-97DE310DB583}']
  { methods } 

    procedure GetComponentInfo(out infoMask: Int32; out infoArray: TArray<string>);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  ///<summary>
  ///  对应到分布式事务处理协调器 (DTC) <see langword="ITransaction" />
  ///  接口，并在支持的对象通过获取 <see cref="P:System.EnterpriseServices.ContextUtil.Transaction" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ITransaction')]
  DNITransaction = interface(DDN.mscorlib.DNObject)
  ['{0FB15084-AF41-11CE-BD2B-204C4F4F5020}']
  { methods } 

    ///<summary>
    ///  提交事务。
    ///</summary>
    ///  <param name="fRetaining">
    ///  必须是 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="grfTC">
    ///  从 OLE DB 枚举的值 <see langword="XACTTC" />
    ///  。
    ///</param>
    ///  <param name="grfRM">
    ///  必须为零。
    ///</param>
    procedure Commit(fRetaining: Int32; grfTC: Int32; grfRM: Int32);
    procedure &Abort(out pboidReason: DNBOID; fRetaining: Int32; fAsync: Int32);
    procedure GetTransactionInfo(out pinfo: DNXACTTRANSINFO);

  end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ADA5F3F2-93BE-5D1E-BD55-88A6A550CE0E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" />
    ///  类，并启用 COM + 安全配置。
    ///</summary>
    {class} function init: DNApplicationAccessControlAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ApplicationAccessControlAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ApplicationAccessControlAttribute.Value" />
    ///  属性，该值指示是否启用 COM 安全配置。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要允许的安全性，则配置否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNApplicationAccessControlAttribute; overload;

  end;

  ///<summary>
  ///  指定包含的程序集的访问控制 <see cref="T:System.EnterpriseServices.ServicedComponent" />
  ///  类。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationAccessControlAttribute')]
  DNApplicationAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A97847C8-25CD-3920-A625-7CE6AAFDC1A4}']
  { getters & setters } 

    function get_Value: Boolean;
    procedure set_Value(value: Boolean);
    function get_AccessChecksLevel: DNAccessChecksLevelOption;
    procedure set_AccessChecksLevel(value: DNAccessChecksLevelOption);
    function get_Authentication: DNAuthenticationOption;
    procedure set_Authentication(value: DNAuthenticationOption);
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    procedure set_ImpersonationLevel(value: DNImpersonationLevelOption);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用 COM + 安全配置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用 COM + 安全配置，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value write set_Value;
    ///<summary>
    ///  获取或设置检查级别为进程级别或组件级别的访问权限。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.AccessChecksLevelOption" />
    ///  值之一。
    ///</returns>
    property AccessChecksLevel: DNAccessChecksLevelOption read get_AccessChecksLevel write set_AccessChecksLevel;
    ///<summary>
    ///  获取或设置远程过程调用 (RPC) 身份验证级别。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.AuthenticationOption" />
    ///  值之一。
    ///</returns>
    property Authentication: DNAuthenticationOption read get_Authentication write set_Authentication;
    ///<summary>
    ///  获取或设置用于调用此应用程序的目标允许的模拟级别。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.ImpersonationLevelOption" />
    ///  值之一。
    ///</returns>
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel write set_ImpersonationLevel;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationAccessControlAttribute = class(TDNGenericImport<DNApplicationAccessControlAttributeClass, DNApplicationAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A565F613-319A-59A1-80DB-45AEFF2770F3}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ApplicationActivationAttribute" />
    ///  类设置指定 <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  值。
    ///</summary>
    ///  <param name="opt"><see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  值之一。
    ///</param>
    {class} function init(opt: DNActivationOption): DNApplicationActivationAttribute;

  end;

  ///<summary>
  ///  指定程序集中组件运行创建者的进程中或者在系统进程。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationActivationAttribute')]
  DNApplicationActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C98E118E-F497-3BAB-95F6-179AFF0F3F3E}']
  { getters & setters } 

    function get_Value: DNActivationOption;
    function get_SoapVRoot: string;
    procedure set_SoapVRoot(value: string);
    function get_SoapMailbox: string;
    procedure set_SoapMailbox(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取指定 <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.EnterpriseServices.ActivationOption" />
    ///  值，或者 <see langword="Library" />
    ///  或 <see langword="Server" />
    ///  。
    ///</returns>
    property Value: DNActivationOption read get_Value;
    ///<summary>
    ///  获取或设置一个值，表示一个在 COM + 应用程序 Web 上的虚拟根目录。
    ///</summary>
    ///<returns>
    ///  在 COM + 应用程序 Web 上找到虚拟根目录。
    ///</returns>
    property SoapVRoot: string read get_SoapVRoot write set_SoapVRoot;
    ///<summary>
    ///  在当前版本不支持此属性。
    ///</summary>
    ///<returns>
    ///  在当前版本不支持此属性。
    ///</returns>
    property SoapMailbox: string read get_SoapMailbox write set_SoapMailbox;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationActivationAttribute = class(TDNGenericImport<DNApplicationActivationAttributeClass, DNApplicationActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationIDAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{682ADE8A-7F2D-58C1-9AC8-867C18A7E4C7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ApplicationIDAttribute" />
    ///  类指定表示的 COM + 应用程序的应用程序 ID 的 GUID。
    ///</summary>
    ///  <param name="guid">
    ///  与 COM + 应用程序关联的 GUID。
    ///</param>
    {class} function init(guid: string): DNApplicationIDAttribute;

  end;

  ///<summary>
  ///  指定此程序集的应用程序 ID （作为 GUID)。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationIDAttribute')]
  DNApplicationIDAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D46C7808-27C1-310C-AF39-878F73C484DD}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNGuid;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 COM + 应用程序的 GUID。
    ///</summary>
    ///<returns>
    ///  表示 COM + 应用程序的 GUID。
    ///</returns>
    property Value: DDN.mscorlib.DNGuid read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationIDAttribute = class(TDNGenericImport<DNApplicationIDAttributeClass, DNApplicationIDAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{00AF6B53-F283-5C29-89B7-0AB09E8FD8A1}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ApplicationNameAttribute" />
    ///  类，同时指定要用于安装的组件的 COM + 应用程序的名称。
    ///</summary>
    ///  <param name="name">
    ///  COM + 应用程序的名称。
    ///</param>
    {class} function init(name: string): DNApplicationNameAttribute;

  end;

  ///<summary>
  ///  指定要用于安装的程序集中的组件的 COM + 应用程序的名称。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationNameAttribute')]
  DNApplicationNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D58326F2-CF98-3EBB-A416-C9207B385E85}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值的 COM + 应用程序包含在程序集中的组件的名称。
    ///</summary>
    ///<returns>
    ///  COM + 应用程序的名称。
    ///</returns>
    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationNameAttribute = class(TDNGenericImport<DNApplicationNameAttributeClass, DNApplicationNameAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNApplicationQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8FB7BC14-8B88-5C1E-B9B0-C9DCF7014BD2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ApplicationQueuingAttribute" />
    ///  类的新实例，并且为程序集启用队列支持以及初始化 <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.Enabled" />
    ///  、<see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.QueueListenerEnabled" />
    ///  和 <see cref="P:System.EnterpriseServices.ApplicationQueuingAttribute.MaxListenerThreads" />
    ///  。
    ///</summary>
    {class} function init: DNApplicationQueuingAttribute;

  end;

  ///<summary>
  ///  为标记的程序集启用队列支持，并启用应用程序从“消息队列”队列读取方法调用。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ApplicationQueuingAttribute')]
  DNApplicationQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CFC1BBA3-9ADC-3CA7-B32A-C579FC206DCA}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_QueueListenerEnabled: Boolean;
    procedure set_QueueListenerEnabled(value: Boolean);
    function get_MaxListenerThreads: Int32;
    procedure set_MaxListenerThreads(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用队列支持。
    ///</summary>
    ///<returns>
    ///  如果启用队列支持，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  构造函数设置的默认值是 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置一个值，该值指示应用程序是否将从客户端接受已排队的组件调用。
    ///</summary>
    ///<returns>
    ///  如果应用程序接受已排队的组件调用，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property QueueListenerEnabled: Boolean read get_QueueListenerEnabled write set_QueueListenerEnabled;
    ///<summary>
    ///  获取或设置用于从队列提取消息并激活相应组件的线程的数目。
    ///</summary>
    ///<returns>
    ///  用于处理到达队列中的消息的线程的最大数目。
    ///  默认值为零。
    ///</returns>
    property MaxListenerThreads: Int32 read get_MaxListenerThreads write set_MaxListenerThreads;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationQueuingAttribute = class(TDNGenericImport<DNApplicationQueuingAttributeClass, DNApplicationQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNAutoCompleteAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AB560E86-7DC4-5CE3-886B-08D7A7BC6B7A}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
    ///  类，同时指定应用程序应自动调用 <see cref="M:System.EnterpriseServices.ContextUtil.SetComplete" />
    ///  如果事务成功完成。
    ///</summary>
    {class} function init: DNAutoCompleteAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.AutoCompleteAttribute" />
    ///  类中，指定是否 COM + <see langword="AutoComplete" />
    ///  已启用。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用 <see langword="AutoComplete" />
    ///  在 COM + 对象; 否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNAutoCompleteAttribute; overload;

  end;

  ///<summary>
  ///  将标记该特性化的方法 <see langword="AutoComplete" />
  ///  对象。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.AutoCompleteAttribute')]
  DNAutoCompleteAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{716FFD45-C48F-3AC1-BBCD-A98B80168C94}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值的设置 <see langword="AutoComplete" />
    ///  COM + 中的选项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see langword="AutoComplete" />
    ///  启用 COM + 中; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAutoCompleteAttribute = class(TDNGenericImport<DNAutoCompleteAttributeClass, DNAutoCompleteAttribute>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNApplicationCrmEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C44CC22F-F869-5984-924A-7596BED1F200}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" />
    ///  类设置 <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    {class} function init: DNApplicationCrmEnabledAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute" />
    ///  类根据需要设置 <see cref="P:System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute.Value" />
    ///  属性设置为 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用补偿资源管理器 (CRM);否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNApplicationCrmEnabledAttribute; overload;

  end;

  ///<summary>
  ///  在标记的应用程序上启用补偿资源管理器 (CRM)。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ApplicationCrmEnabledAttribute')]
  DNApplicationCrmEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5660C538-2D43-3898-9B97-18D4E62301BF}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  启用或禁用补偿资源管理器 (CRM) 上标记的应用程序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用 CRM;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNApplicationCrmEnabledAttribute = class(TDNGenericImport<DNApplicationCrmEnabledAttributeClass, DNApplicationCrmEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNComponentAccessControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{21EAFF0C-BB12-594A-9C3C-1D39241D71B9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNComponentAccessControlAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ComponentAccessControlAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ComponentAccessControlAttribute.Value" />
    ///  属性以指示是否启用 COM + 安全配置。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用对组件; 的调用上的安全检查否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNComponentAccessControlAttribute; overload;

  end;

  ///<summary>
  ///  启用安全检查，则对组件的调用。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ComponentAccessControlAttribute')]
  DNComponentAccessControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{25D2DC1F-137C-314E-A3B5-C76FB6FA9261}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否启用对组件的调用上的安全检查。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果安全检查，则启用;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNComponentAccessControlAttribute = class(TDNGenericImport<DNComponentAccessControlAttributeClass, DNComponentAccessControlAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNCOMTIIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CD96A9E0-97C0-55FB-8BB1-089A30071B2C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" />
    ///  类设置 <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    {class} function init: DNCOMTIIntrinsicsAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.COMTIIntrinsicsAttribute" />
    ///  类，并启用的设置 <see cref="P:System.EnterpriseServices.COMTIIntrinsicsAttribute.Value" />
    ///  属性。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  如果 COMTI 上下文属性传递到 COM + 上下文;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNCOMTIIntrinsicsAttribute; overload;

  end;

  ///<summary>
  ///  使您能够将上下文属性从 COM 事务集成器 (COMTI) 传递到 COM + 上下文。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.COMTIIntrinsicsAttribute')]
  DNCOMTIIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11D72D39-2416-31BB-96F3-9FAFB5BE5FB7}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否将 COM 事务集成器 (COMTI) 上下文属性传递到 COM + 上下文。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 COMTI 上下文属性传递到 COM + 上下文;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCOMTIIntrinsicsAttribute = class(TDNGenericImport<DNCOMTIIntrinsicsAttributeClass, DNCOMTIIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNConstructionEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{A61445E0-30CE-5960-94E2-1C100627449E}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" />
    ///  类，并初始化的默认设置 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" />
    ///  和 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Default" />
    ///  。
    ///</summary>
    {class} function init: DNConstructionEnabledAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ConstructionEnabledAttribute" />
    ///  类设置 <see cref="P:System.EnterpriseServices.ConstructionEnabledAttribute.Enabled" />
    ///  为指定的值。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用 COM + 对象构造支持;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNConstructionEnabledAttribute; overload;

  end;

  ///<summary>
  ///  启用 COM + 对象结构支持。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ConstructionEnabledAttribute')]
  DNConstructionEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{663EA5B9-F869-312F-9E1E-C853AFF55C7C}']
  { getters & setters } 

    function get_Default: string;
    procedure set_Default(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置构造函数字符串的默认值。
    ///</summary>
    ///<returns>
    ///  要使用的默认构造函数的字符串的值。
    ///  默认值为空字符串("")。
    ///</returns>
    property &Default: string read get_Default write set_Default;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用 COM + 对象构造支持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 COM + 对象结构支持则启用;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructionEnabledAttribute = class(TDNGenericImport<DNConstructionEnabledAttributeClass, DNConstructionEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1ED5A3A6-44F5-5F41-8BC5-D2C010ED7268}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.DescriptionAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="desc">
    ///  程序集 （应用程序）、 组件、 方法或接口的说明。
    ///</param>
    {class} function init(desc: string): DNDescriptionAttribute;

  end;

  ///<summary>
  ///  在程序集 （应用程序）、 组件、 方法或接口上设置的说明。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.DescriptionAttribute')]
  DNDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AE9ADC25-FB27-3A3A-8F4C-C89BAE68D1C1}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDescriptionAttribute = class(TDNGenericImport<DNDescriptionAttributeClass, DNDescriptionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BF18B6E9-1713-5537-8873-C23360EC87D5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.EventClassAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNEventClassAttribute;

  end;

  ///<summary>
  ///  将特性化的类标记为事件类。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.EventClassAttribute')]
  DNEventClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CB4C3E3F-BEB0-360F-A0D8-E046CA327980}']
  { getters & setters } 

    function get_FireInParallel: Boolean;
    procedure set_FireInParallel(value: Boolean);
    function get_AllowInprocSubscribers: Boolean;
    procedure set_AllowInprocSubscribers(value: Boolean);
    function get_PublisherFilter: string;
    procedure set_PublisherFilter(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否要传递到并行的订阅服务器的事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果事件所传递到订阅服务器并行;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property FireInParallel: Boolean read get_FireInParallel write set_FireInParallel;
    ///<summary>
    ///  获取或设置一个值，该值指示是否可以在发布服务器上的进程中激活订阅服务器。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在发布服务器上的进程; 中，可以激活订户否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AllowInprocSubscribers: Boolean read get_AllowInprocSubscribers write set_AllowInprocSubscribers;
    ///<summary>
    ///  获取或设置一个事件方法的发布者筛选器。
    ///</summary>
    ///<returns>
    ///  发布者筛选器。
    ///</returns>
    property PublisherFilter: string read get_PublisherFilter write set_PublisherFilter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventClassAttribute = class(TDNGenericImport<DNEventClassAttributeClass, DNEventClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNEventTrackingEnabledAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{25539F05-7FDD-5ECD-8DD2-8352549C86EA}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" />
    ///  类，并启用事件跟踪。
    ///</summary>
    {class} function init: DNEventTrackingEnabledAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.EventTrackingEnabledAttribute" />
    ///  类，并可以选择禁用事件跟踪。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用事件跟踪;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNEventTrackingEnabledAttribute; overload;

  end;

  ///<summary>
  ///  启用事件跟踪的组件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.EventTrackingEnabledAttribute')]
  DNEventTrackingEnabledAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{23F9D804-2D9F-3D68-A568-7729EC8841FB}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的值 <see cref="P:System.EnterpriseServices.EventTrackingEnabledAttribute.Value" />
    ///  属性，用于指示是否启用了跟踪。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用跟踪;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNEventTrackingEnabledAttribute = class(TDNGenericImport<DNEventTrackingEnabledAttributeClass, DNEventTrackingEnabledAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNExceptionClassAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{16D8ED63-E880-5592-B361-395FB7EBF754}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ExceptionClassAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  播放机激活并播放消息路由到的死信队列之前的异常类的名称。
    ///</param>
    {class} function init(name: string): DNExceptionClassAttribute;

  end;

  ///<summary>
  ///  设置排队类的队列异常类。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ExceptionClassAttribute')]
  DNExceptionClassAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D1218C2B-C79C-3955-9B6B-1D28DBB1B658}']
  { getters & setters } 

    function get_Value: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取播放机激活并播放消息路由到的死信队列之前的异常类的名称。
    ///</summary>
    ///<returns>
    ///  播放机激活并播放消息路由到的死信队列之前的异常类的名称。
    ///</returns>
    property Value: string read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExceptionClassAttribute = class(TDNGenericImport<DNExceptionClassAttributeClass, DNExceptionClassAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNIISIntrinsicsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7564B395-7085-55BD-8964-1A5738E191B3}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" />
    ///  类，并启用 ASP 内部值的访问。
    ///</summary>
    {class} function init: DNIISIntrinsicsAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.IISIntrinsicsAttribute" />
    ///  类，并可以选择禁用对 ASP 内部值的访问。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用对 ASP 内部值; 访问否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNIISIntrinsicsAttribute; overload;

  end;

  ///<summary>
  ///  启用对从 ASP 内部值的访问 <see cref="M:System.EnterpriseServices.ContextUtil.GetNamedProperty(System.String)" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.IISIntrinsicsAttribute')]
  DNIISIntrinsicsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CD0631E1-0884-3150-B28A-27B2E3F9E02F}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否启用了对 ASP 内部值的访问。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了访问;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIISIntrinsicsAttribute = class(TDNGenericImport<DNIISIntrinsicsAttributeClass, DNIISIntrinsicsAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNInterfaceQueuingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B1190970-FA2F-5FCC-8573-F3A362DCA298}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" />
    ///  类设置 <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Enabled" />
    ///  和 <see cref="P:System.EnterpriseServices.InterfaceQueuingAttribute.Interface" />
    ///  为其默认值的属性。
    ///</summary>
    {class} function init: DNInterfaceQueuingAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.InterfaceQueuingAttribute" />
    ///  类，并可以选择禁用队列支持。
    ///</summary>
    ///  <param name="enabled"><see langword="true" />
    ///  若要启用队列支持;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(enabled: Boolean): DNInterfaceQueuingAttribute; overload;

  end;

  ///<summary>
  ///  启用队列支持为标记的接口。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.InterfaceQueuingAttribute')]
  DNInterfaceQueuingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5878DCE6-A2DB-3824-B9E3-6B3104F1F604}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Interface: string;
    procedure set_Interface(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用队列支持。
    ///</summary>
    ///<returns>
    ///  如果启用队列支持，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置在其启用队列的接口的名称。
    ///</summary>
    ///<returns>
    ///  在其启用队列接口的名称。
    ///</returns>
    property &Interface: string read get_Interface write set_Interface;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNInterfaceQueuingAttribute = class(TDNGenericImport<DNInterfaceQueuingAttributeClass, DNInterfaceQueuingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNJustInTimeActivationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C76A9B8B-C52D-56C6-BDEE-CD904EC42E56}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  类的新实例。
    ///  默认构造函数允许在实时 (JIT) 激活。
    ///</summary>
    {class} function init: DNJustInTimeActivationAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  类，这 （可选） 允许通过传递来禁用实时 (JIT) 激活 <see langword="false" />
    ///  作为参数。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用 JIT 激活;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNJustInTimeActivationAttribute; overload;

  end;

  ///<summary>
  ///  打开或关闭在实时 (JIT) 激活。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.JustInTimeActivationAttribute')]
  DNJustInTimeActivationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F474818B-17F2-3355-879F-CE76A1E423E2}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的值 <see cref="T:System.EnterpriseServices.JustInTimeActivationAttribute" />
    ///  设置。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用 JIT 激活;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNJustInTimeActivationAttribute = class(TDNGenericImport<DNJustInTimeActivationAttributeClass, DNJustInTimeActivationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNLoadBalancingSupportedAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4622F06B-8A0C-5FF2-83BE-6625B6BAF21B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" />
    ///  类，同时指定负载平衡支持。
    ///</summary>
    {class} function init: DNLoadBalancingSupportedAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.LoadBalancingSupportedAttribute" />
    ///  类，并可以选择禁用负载平衡支持。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要启用负载平衡支持;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNLoadBalancingSupportedAttribute; overload;

  end;

  ///<summary>
  ///  确定组件是否加入负载平衡，如果安装并在服务器上启用组件负载平衡服务。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.LoadBalancingSupportedAttribute')]
  DNLoadBalancingSupportedAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{3B52C20E-7B24-3318-8883-D12ED5B59D08}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否启用负载平衡支持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用负载平衡支持;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNLoadBalancingSupportedAttribute = class(TDNGenericImport<DNLoadBalancingSupportedAttributeClass, DNLoadBalancingSupportedAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNMustRunInClientContextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{04E30D4F-7E68-575F-A8CA-736491220A0B}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" />
    ///  类，需要创建该对象的创建者的上下文中。
    ///</summary>
    {class} function init: DNMustRunInClientContextAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.MustRunInClientContextAttribute" />
    ///  类中，选择不创建对象的创建者的上下文中。
    ///</summary>
    ///  <param name="val"><see langword="true" />
    ///  若要创建者; 的上下文中创建对象否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(val: Boolean): DNMustRunInClientContextAttribute; overload;

  end;

  ///<summary>
  ///  强制属性化的对象，如有可能创建的创建者，上下文中。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.MustRunInClientContextAttribute')]
  DNMustRunInClientContextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B76A034B-A3BF-3B69-BD16-98FB69E8DF75}']
  { getters & setters } 

    function get_Value: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否可以在创建者的上下文中创建的属性化的对象。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果要创建者; 的上下文中创建对象否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Value: Boolean read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMustRunInClientContextAttribute = class(TDNGenericImport<DNMustRunInClientContextAttributeClass, DNMustRunInClientContextAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNObjectPoolingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5DA85AD7-B7CA-5CF8-9788-1B20D0036C55}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  , ，<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  , ，<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  , ，和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.CreationTimeout" />
    ///  为其默认值的属性。
    ///</summary>
    {class} function init: DNObjectPoolingAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  属性。
    ///</summary>
    ///  <param name="minPoolSize">
    ///  最小池大小。
    ///</param>
    ///  <param name="maxPoolSize">
    ///  最大池大小。
    ///</param>
    {class} function init(minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  属性。
    ///</summary>
    ///  <param name="enable"><see langword="true" />
    ///  若要启用对象池;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(enable: Boolean): DNObjectPoolingAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.Enabled" />
    ///  , ，<see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MaxPoolSize" />
    ///  , ，和 <see cref="P:System.EnterpriseServices.ObjectPoolingAttribute.MinPoolSize" />
    ///  属性。
    ///</summary>
    ///  <param name="enable"><see langword="true" />
    ///  若要启用对象池;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="minPoolSize">
    ///  最小池大小。
    ///</param>
    ///  <param name="maxPoolSize">
    ///  最大池大小。
    ///</param>
    {class} function init(enable: Boolean; minPoolSize: Int32; maxPoolSize: Int32): DNObjectPoolingAttribute; overload;

  end;

  ///<summary>
  ///  启用并配置组件的对象池。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ObjectPoolingAttribute')]
  DNObjectPoolingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C31DE944-F875-3456-ACE7-5E1D8C4DB52C}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_MaxPoolSize: Int32;
    procedure set_MaxPoolSize(value: Int32);
    function get_MinPoolSize: Int32;
    procedure set_MinPoolSize(value: Int32);
    function get_CreationTimeout: Int32;
    procedure set_CreationTimeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  在内部调用.NET Framework 基础结构时安装和配置 COM + 目录中的程序集。
    ///</summary>
    ///  <param name="info">
    ///  一个包含由内部键引用的内部对象的哈希表。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该方法已发生更改。
    ///</returns>
    function AfterSaveChanges(info: DDN.mscorlib.DNHashtable): Boolean;
    ///<summary>
    ///  在内部调用.NET Framework 基础结构时安装和配置 COM + 目录中的程序集。
    ///</summary>
    ///  <param name="s">
    ///  通过检查为特殊值，该值指示服务的组件的.NET Framework 基础结构生成一个字符串。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该属性应用到服务的组件类。
    ///</returns>
    function IsValidTarget(s: string): Boolean;
    ///<summary>
    ///  在内部调用.NET Framework 基础结构在应用时 <see cref="T:System.EnterpriseServices.ObjectPoolingAttribute" />
    ///  类属性与维护的组件。
    ///</summary>
    ///  <param name="info">
    ///  一个包含哪些对象共用属性将应用到，内部键所引用的一个内部对象的哈希表。
    ///</param>
    ///<returns><see langword="true " />
    ///  如果该方法已发生更改。
    ///</returns>
    function Apply(info: DDN.mscorlib.DNHashtable): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用对象池。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了对象池;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Enabled: Boolean read get_Enabled write set_Enabled;
    ///<summary>
    ///  获取或设置该池的最大大小的值。
    ///</summary>
    ///<returns>
    ///  池中的对象的最大数目。
    ///</returns>
    property MaxPoolSize: Int32 read get_MaxPoolSize write set_MaxPoolSize;
    ///<summary>
    ///  获取或设置该池的最小大小的值。
    ///</summary>
    ///<returns>
    ///  池中的对象的最小数目。
    ///</returns>
    property MinPoolSize: Int32 read get_MinPoolSize write set_MinPoolSize;
    ///<summary>
    ///  获取或设置要对某个对象变得可用在池中在引发异常之前等待的时间长度。
    ///  此值是以毫秒为单位。
    ///</summary>
    ///<returns>
    ///  超时值（以毫秒为单位）。
    ///</returns>
    property CreationTimeout: Int32 read get_CreationTimeout write set_CreationTimeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNObjectPoolingAttribute = class(TDNGenericImport<DNObjectPoolingAttributeClass, DNObjectPoolingAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNPrivateComponentAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2FF08221-213D-5D73-907F-37B936E26FE4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.PrivateComponentAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPrivateComponentAttribute;

  end;

  ///<summary>
  ///  将组件标识为私有组件仅看到并在同一个应用程序中由组件激活。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.PrivateComponentAttribute')]
  DNPrivateComponentAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C115C7F2-B678-3EE8-8841-D4382A90EC5E}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPrivateComponentAttribute = class(TDNGenericImport<DNPrivateComponentAttributeClass, DNPrivateComponentAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecureMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{814D1137-E47E-5C1B-BCF2-FD3C4147FA31}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.SecureMethodAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSecureMethodAttribute;

  end;

  ///<summary>
  ///  可确保，基础结构将调用通过接口的方法或类中每一方法时使用的安全服务。
  ///  需要使用接口来使用安全服务类。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SecureMethodAttribute')]
  DNSecureMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{05325407-D6C0-318C-9B09-87747E1EE1EF}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecureMethodAttribute = class(TDNGenericImport<DNSecureMethodAttributeClass, DNSecureMethodAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityRoleAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{F2AE9B18-0D03-530E-9882-6773099B915D}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" />
    ///  属性。
    ///</summary>
    ///  <param name="role">
    ///  个应用程序、 组件、 接口或方法的安全角色。
    ///</param>
    {class} function init(role: string): DNSecurityRoleAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.SecurityRoleAttribute" />
    ///  类并设置 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.Role" />
    ///  和 <see cref="P:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess" />
    ///  属性。
    ///</summary>
    ///  <param name="role">
    ///  个应用程序、 组件、 接口或方法的安全角色。
    ///</param>
    ///  <param name="everyone"><see langword="true" />
    ///  需要新创建的角色让每个人都作为用户; 用户组添加否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(role: string; everyone: Boolean): DNSecurityRoleAttribute; overload;

  end;

  ///<summary>
  ///  配置应用程序或组件的角色。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SecurityRoleAttribute')]
  DNSecurityRoleAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1BA2F66F-B4E6-357D-9F73-B7A064E43A68}']
  { getters & setters } 

    function get_Role: string;
    procedure set_Role(value: string);
    function get_SetEveryoneAccess: Boolean;
    procedure set_SetEveryoneAccess(value: Boolean);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置的安全角色。
    ///</summary>
    ///<returns>
    ///  向应用程序、 组件、 接口或方法应用了安全角色。
    ///</returns>
    property Role: string read get_Role write set_Role;
    ///<summary>
    ///  作为用户设置一个值，该值指示是否要添加 Everyone 用户组。
    ///</summary>
    ///<returns><see langword="true" />
    ///  为了要求新创建的角色具有 Everyone （未修改该应用程序已存在的角色） 的用户; 用户组添加否则为 <see langword="false" />
    ///  若要取消添加 Everyone 用户组作为用户添加。
    ///</returns>
    property SetEveryoneAccess: Boolean read get_SetEveryoneAccess write set_SetEveryoneAccess;
    ///<summary>
    ///  获取或设置角色说明。
    ///</summary>
    ///<returns>
    ///  对角色的说明。
    ///</returns>
    property Description: string read get_Description write set_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSecurityRoleAttribute = class(TDNGenericImport<DNSecurityRoleAttributeClass, DNSecurityRoleAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSynchronizationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0C6894F5-C9ED-5398-A0D6-3DFB3F89D0BB}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.SynchronizationAttribute" />
    ///  类，具有默认值 <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  。
    ///</summary>
    {class} function init: DNSynchronizationAttribute; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.EnterpriseServices.SynchronizationAttribute" />
    ///  初始化 <see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="val"><see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  值之一。
    ///</param>
    {class} function init(val: DNSynchronizationOption): DNSynchronizationAttribute; overload;

  end;

  ///<summary>
  ///  设置组件的同步值。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SynchronizationAttribute')]
  DNSynchronizationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EDEC979B-B058-35A1-A67A-9F7F5048CBB9}']
  { getters & setters } 

    function get_Value: DNSynchronizationOption;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的当前设置 <see cref="P:System.EnterpriseServices.SynchronizationAttribute.Value" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  值之一。
    ///  默认值为 <see langword="Required" />
    ///  。
    ///</returns>
    property Value: DNSynchronizationOption read get_Value;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSynchronizationAttribute = class(TDNGenericImport<DNSynchronizationAttributeClass, DNSynchronizationAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNTransactionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0BB1AF05-7B19-51C7-8B98-5B99A7BAA643}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.TransactionAttribute" />
    ///  类组件的请求的事务类型设置为 <see cref="F:System.EnterpriseServices.TransactionOption.Required" />
    ///  。
    ///</summary>
    {class} function init: DNTransactionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.TransactionAttribute" />
    ///  类，同时指定事务类型。
    ///</summary>
    ///  <param name="val">
    ///  指定的事务类型 <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  值。
    ///</param>
    {class} function init(val: DNTransactionOption): DNTransactionAttribute; overload;

  end;

  ///<summary>
  ///  指定可用于属性化的对象的事务的类型。
  ///  允许的值为成员 <see cref="T:System.EnterpriseServices.TransactionOption" />
  ///  枚举。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.TransactionAttribute')]
  DNTransactionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1A6F8048-6543-3CF4-9841-9E49CD11C468}']
  { getters & setters } 

    function get_Value: DNTransactionOption;
    function get_Isolation: DNTransactionIsolationLevel;
    procedure set_Isolation(value: DNTransactionIsolationLevel);
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  值对于此事务，并可以选择禁用事务服务。
    ///</summary>
    ///<returns>
    ///  指定的事务类型 <see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  值。
    ///</returns>
    property Value: DNTransactionOption read get_Value;
    ///<summary>
    ///  获取或设置事务隔离级别。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.TransactionIsolationLevel" />
    ///  值之一。
    ///</returns>
    property Isolation: DNTransactionIsolationLevel read get_Isolation write set_Isolation;
    ///<summary>
    ///  获取或设置此事务的超时值。
    ///</summary>
    ///<returns>
    ///  以秒为单位的事务超时。
    ///</returns>
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTransactionAttribute = class(TDNGenericImport<DNTransactionAttributeClass, DNTransactionAttribute>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNActivityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{59A8D36A-F461-5617-ABF9-62F828EB5653}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Activity" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cfg">
    ///  一个 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  ，包含要使用的服务的配置信息。
    ///</param>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.Activity" />
    ///  当前平台上不支持。
    ///</exception>
    {class} function init(cfg: DNServiceConfig): DNActivity;

  end;

  ///<summary>
  ///  创建用于同步或异步批处理作业都可以使用 COM + 服务而无需创建一个在 COM + 组件的活动。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Activity')]
  DNActivity = interface(DDN.mscorlib.DNObject)
  ['{CB79A8BC-5DCD-361F-9C7A-A97666E2331C}']
  { methods } 

    ///<summary>
    ///  以同步方式运行的指定的用户定义的批处理工作。
    ///</summary>
    ///  <param name="serviceCall">
    ///  一个 <see cref="T:System.EnterpriseServices.IServiceCall" />
    ///  用来实现批处理工作的对象。
    ///</param>
    procedure SynchronousCall(serviceCall: DNIServiceCall);
    ///<summary>
    ///  以异步方式运行的指定的用户定义的批处理工作。
    ///</summary>
    ///  <param name="serviceCall">
    ///  一个 <see cref="T:System.EnterpriseServices.IServiceCall" />
    ///  用来实现批处理工作的对象。
    ///</param>
    procedure AsynchronousCall(serviceCall: DNIServiceCall);
    ///<summary>
    ///  绑定到当前线程的用户定义的工作。
    ///</summary>
    procedure BindToCurrentThread;
    ///<summary>
    ///  取消绑定由提交的批处理工作 <see cref="M:System.EnterpriseServices.Activity.SynchronousCall(System.EnterpriseServices.IServiceCall)" />
    ///  或 <see cref="M:System.EnterpriseServices.Activity.AsynchronousCall(System.EnterpriseServices.IServiceCall)" />
    ///  从在其运行的批处理工作线程的方法。
    ///</summary>
    procedure UnbindFromThread;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNActivity = class(TDNGenericImport<DNActivityClass, DNActivity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBYOTClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27F6DAEB-7313-59E0-B1FC-301F0654D891}']
  { static methods } 

    ///<summary>
    ///  创建手动使用事务 Internet 协议 (TIP) 事务中登记的对象。
    ///</summary>
    ///  <param name="url">
    ///  提示指定的 URL，一个事务。
    ///</param>
    ///  <param name="t">
    ///  类型。
    ///</param>
    ///<returns>
    ///  请求的事务。
    ///</returns>
    {class} function CreateWithTipTransaction(url: string; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建在手动事务中登记的对象。
    ///</summary>
    ///  <param name="transaction"><see cref="T:System.EnterpriseServices.ITransaction" />
    ///  或 <see cref="T:System.Transactions.Transaction" />
    ///  对象，它指定事务。
    ///</param>
    ///  <param name="t">
    ///  指定的类型。
    ///</param>
    ///<returns>
    ///  请求的事务。
    ///</returns>
    {class} function CreateWithTransaction(transaction: DDN.mscorlib.DNObject; t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;

  end;

  ///<summary>
  ///  包装的 COM + <see langword="ByotServerEx" />
  ///  类和 COM + DTC 接口 <see langword="ICreateWithTransactionEx" />
  ///  和 <see langword="ICreateWithTipTransactionEx" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.BYOT')]
  DNBYOT = interface(DDN.mscorlib.DNObject)
  ['{0514E7B0-1ECC-37F6-BAFE-E8EF7952568A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBYOT = class(TDNGenericImport<DNBYOTClass, DNBYOT>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0D656CA-51D5-59B8-9E99-93C82C664479}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="compensator">
    ///  一种表示补偿器的类型。
    ///</param>
    ///  <param name="description">
    ///  补偿器的说明。
    ///</param>
    ///  <param name="flags"><see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" />
    ///  值的按位组合。
    ///</param>
    {class} function init(compensator: DDN.mscorlib.DNType; description: string; flags: DNCompensatorOptions): DNClerk; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="compensator">
    ///  补偿器的名称。
    ///</param>
    ///  <param name="description">
    ///  补偿器的说明。
    ///</param>
    ///  <param name="flags"><see cref="T:System.EnterpriseServices.CompensatingResourceManager.CompensatorOptions" />
    ///  值的按位组合。
    ///</param>
    {class} function init(compensator: string; description: string; flags: DNCompensatorOptions): DNClerk; overload;

  end;

  ///<summary>
  ///  将事务性操作的记录写入日志。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Clerk')]
  DNClerk = interface(DDN.mscorlib.DNObject)
  ['{B04A2AA6-EFD7-380B-8323-7FAC9B5C0330}']
  { getters & setters } 

    function get_TransactionUOW: string;
    function get_LogRecordCount: Int32;

  { methods } 

    ///<summary>
    ///  强制转换成磁盘的所有日志记录。
    ///</summary>
    procedure ForceLog;
    ///<summary>
    ///  并不提供的最后一个日志记录已写入此接口的此实例。
    ///</summary>
    procedure ForgetLogRecord;
    ///<summary>
    ///  对事务执行立即中断调用。
    ///</summary>
    procedure ForceTransactionToAbort;
    ///<summary>
    ///  将非结构化的日志记录写入日志。
    ///</summary>
    ///  <param name="record">
    ///  要写入日志的日志记录。
    ///</param>
    procedure WriteLogRecord(&record: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，表示事务工作单元 (UOW)。
    ///</summary>
    ///<returns>
    ///  一个表示 UOW GUID。
    ///</returns>
    property TransactionUOW: string read get_TransactionUOW;
    ///<summary>
    ///  获取日志记录的数目。
    ///</summary>
    ///<returns>
    ///  日志记录的数目。
    ///</returns>
    property LogRecordCount: Int32 read get_LogRecordCount;
  end;

  TDNClerk = class(TDNGenericImport<DNClerkClass, DNClerk>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{920A28C5-DFC2-5EE2-AE85-866548118436}']
  end;

  ///<summary>
  ///  包含描述活动的补偿资源管理器 (CRM) 分配器对象的信息。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkInfo')]
  DNClerkInfo = interface(DDN.mscorlib.DNObject)
  ['{53A09FA6-9A71-332A-921D-BE130C97461A}']
  { getters & setters } 

    function get_Clerk: DNClerk;
    function get_InstanceId: string;
    function get_Compensator: string;
    function get_Description: string;
    function get_TransactionUOW: string;
    function get_ActivityId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />
    ///  为当前的分配器。
    ///</summary>
    ///<returns><see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />
    ///  为当前的分配器。
    ///</returns>
    property Clerk: DNClerk read get_Clerk;
    ///<summary>
    ///  获取当前补偿资源管理器 (CRM) 分配器的实例类 ID (CLSID)。
    ///</summary>
    ///<returns>
    ///  当前的 CRM Clerk 实例 CLSID。
    ///</returns>
    property InstanceId: string read get_InstanceId;
    ///<summary>
    ///  获取当前的 CRM Clerk 补偿资源管理器 (CRM) 补偿的 ProgId。
    ///</summary>
    ///<returns>
    ///  当前的 CRM Clerk CRM 补偿的 ProgId。
    ///</returns>
    property Compensator: string read get_Compensator;
    ///<summary>
    ///  获取当前的 CRM Clerk 补偿资源管理器 (CRM) 补偿的说明。
    ///  描述字符串为所提供的字符串 <see langword="ICrmLogControl::RegisterCompensator" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  当前的 CRM Clerk CRM 补偿器说明。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取工作单元 (UOW 的当前补偿资源管理器 (CRM) 分配器的事务)。
    ///</summary>
    ///<returns>
    ///  UOW 为当前的 CRM Clerk 的事务。
    ///</returns>
    property TransactionUOW: string read get_TransactionUOW;
    ///<summary>
    ///  获取当前补偿资源管理器 (CRM) 工作线程的活动 ID。
    ///</summary>
    ///<returns>
    ///  获取当前补偿资源管理器 (CRM) 工作线程的活动 ID。
    ///</returns>
    property ActivityId: string read get_ActivityId;
  end;

  TDNClerkInfo = class(TDNGenericImport<DNClerkInfoClass, DNClerkInfo>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNClerkMonitorClass = interface(DNObjectClass)
  ['{544B8F46-2AC7-5E08-8BE0-712DB777BCC9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNClerkMonitor;

  end;

  ///<summary>
  ///  包含所有 Clerk 进程中处于活动状态的快照。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.ClerkMonitor')]
  DNClerkMonitor = interface(DDN.mscorlib.DNIEnumerable)
  ['{6C1C243A-2146-3342-8078-AC4BFB9DB4E9}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNClerkInfo; overload;
    function get_Item(index: string): DNClerkInfo; overload;

  { methods } 

    ///<summary>
    ///  补偿资源管理器 (CRM) 监视器集合中返回的 clerk 的枚举。
    ///</summary>
    ///<returns>
    ///  描述集合中的分配一个枚举器。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取分配器集合对象，这是 Clerk 的当前状态的快照。
    ///</summary>
    procedure Populate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  补偿资源管理器 (CRM) 监视器集合中获取的分配器监视器的计数。
    ///</summary>
    ///<returns>
    ///  到 CRM 中的分配器监视器数目监视器集合。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNClerkInfo read get_Item; default;
    property Item[index: string]: DNClerkInfo read get_Item; default;
  end;

  TDNClerkMonitor = class(TDNGenericImport<DNClerkMonitorClass, DNClerkMonitor>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNLogRecordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85C95C0C-2A4B-5D2A-A4EF-5F15424083A7}']
  end;

  ///<summary>
  ///  表示作为 COM + 传递了非结构化的日志记录 <see langword="CrmLogRecordRead" />
  ///  结构。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.LogRecord')]
  DNLogRecord = interface(DDN.mscorlib.DNObject)
  ['{33DF2DC3-AA47-3F6A-8D0D-8BECE780BB7D}']
  { getters & setters } 

    function get_Flags: DNLogRecordFlags;
    function get_Sequence: Int32;
    function get_Record: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示何时写入日志记录。
    ///</summary>
    ///<returns>
    ///  按位组合 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.LogRecordFlags" />
    ///  值可提供有关何时写入该记录信息。
    ///</returns>
    property Flags: DNLogRecordFlags read get_Flags;
    ///<summary>
    ///  日志记录的序列号。
    ///</summary>
    ///<returns>
    ///  一个指定的日志记录的序列号的整数值。
    ///</returns>
    property Sequence: Int32 read get_Sequence;
    ///<summary>
    ///  获取日志记录的用户数据。
    ///</summary>
    ///<returns>
    ///  单个 BLOB 包含用户数据。
    ///</returns>
    property &Record: DDN.mscorlib.DNObject read get_Record;
  end;

  TDNLogRecord = class(TDNGenericImport<DNLogRecordClass, DNLogRecord>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNContextUtilClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D302562-ECBB-59BE-8D59-EA6209D42023}']
  { static getter & setter } 

    {class} function get_IsInTransaction: Boolean;
    {class} function get_IsSecurityEnabled: Boolean;
    {class} function get_Transaction: DDN.mscorlib.DNObject;
    {class} function get_SystemTransaction: DDN.System.Transactions.DNTransaction;
    {class} function get_TransactionId: DDN.mscorlib.DNGuid;
    {class} function get_ContextId: DDN.mscorlib.DNGuid;
    {class} function get_ActivityId: DDN.mscorlib.DNGuid;
    {class} function get_MyTransactionVote: DNTransactionVote;
    {class} procedure set_MyTransactionVote(value: DNTransactionVote);
    {class} function get_DeactivateOnReturn: Boolean;
    {class} procedure set_DeactivateOnReturn(value: Boolean);
    {class} function get_PartitionId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationId: DDN.mscorlib.DNGuid;
    {class} function get_ApplicationInstanceId: DDN.mscorlib.DNGuid;

  { static methods } 

    ///<summary>
    ///  确定调用方是否在指定的角色。
    ///</summary>
    ///  <param name="role">
    ///  要检查的角色的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果调用方指定的角色;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception>
    {class} function IsCallerInRole(role: string): Boolean;
    ///<summary>
    ///  从 COM + 上下文中返回的已命名的属性。
    ///</summary>
    ///  <param name="name">
    ///  请求的属性的名称。
    ///</param>
    ///<returns>
    ///  上下文已命名的属性。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} function GetNamedProperty(name: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置 COM+ 上下文的命名属性。
    ///</summary>
    ///  <param name="name">
    ///  要设置的属性的名称。
    ///</param>
    ///  <param name="value">
    ///  表示要设置的属性值的对象。
    ///</param>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM+ 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} procedure SetNamedProperty(name: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  集 <see langword="consistent" />
    ///  位为 <see langword="true" />
    ///  和 <see langword="done" />
    ///  位为 <see langword="false" />
    ///  COM + 上下文中。
    ///</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  COM + 上下文中没有才可用。
    ///</exception>
    {class} procedure EnableCommit;
    ///<summary>
    ///  设置同时 <see langword="consistent" />
    ///  位与 <see langword="done" />
    ///  位为 <see langword="false" />
    ///  COM + 上下文中。
    ///</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  COM + 上下文中没有才可用。
    ///</exception>
    {class} procedure DisableCommit;
    ///<summary>
    ///  集 <see langword="consistent" />
    ///  位与 <see langword="done" />
    ///  位为 <see langword="true" />
    ///  COM + 上下文中。
    ///</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception>
    {class} procedure SetComplete;
    ///<summary>
    ///  集 <see langword="consistent" />
    ///  位为 <see langword="false" />
    ///  和 <see langword="done" />
    ///  位为 <see langword="true" />
    ///  COM + 上下文中。
    ///</summary>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception>
    {class} procedure SetAbort;
    ///<summary>
    ///  确定是否在默认上下文中激活服务的组件。
    ///  默认上下文中激活维护不具有 COM + 目录信息的组件。
    ///</summary>
    ///<returns>
    ///  true 服务的组件是否已激活默认上下文中; 否则为 false。
    ///</returns>
    {class} function IsDefaultContext: Boolean;

  { static propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前的上下文是否为事务性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前上下文是事务性的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception>
    {class} property IsInTransaction: Boolean read get_IsInTransaction;
    ///<summary>
    ///  获取一个值，该值指示是否基于角色的安全性处于活动状态的当前上下文中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前上下文启用了安全性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception>
    {class} property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    ///<summary>
    ///  获取描述当前 COM + DTC 事务的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，表示当前事务。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property Transaction: DDN.mscorlib.DNObject read get_Transaction;
    ///<summary>
    ///  获取当前事务上下文。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Transactions.Transaction" />
    ///  ，它表示当前事务上下文。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property SystemTransaction: DDN.System.Transactions.DNTransaction read get_SystemTransaction;
    ///<summary>
    ///  获取当前的 COM + DTC 事务的 GUID。
    ///</summary>
    ///<returns>
    ///  存在一个表示当前的 COM + DTC 事务，如果一个 GUID。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property TransactionId: DDN.mscorlib.DNGuid read get_TransactionId;
    ///<summary>
    ///  当前上下文中获取的 GUID。
    ///</summary>
    ///<returns>
    ///  当前上下文的 GUID。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property ContextId: DDN.mscorlib.DNGuid read get_ContextId;
    ///<summary>
    ///  获取表示包含该组件的活动的 GUID。
    ///</summary>
    ///<returns>
    ///  如果当前上下文是一个活动; 的一部分的活动的 GUID否则为 <see langword="GUID_NULL" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property ActivityId: DDN.mscorlib.DNGuid read get_ActivityId;
    ///<summary>
    ///  获取或设置 <see langword="consistent" />
    ///  位 COM + 上下文中。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.EnterpriseServices.TransactionVote" />
    ///  值，或者 <see langword="Commit" />
    ///  或 <see langword="Abort" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property MyTransactionVote: DNTransactionVote read get_MyTransactionVote write set_MyTransactionVote;
    ///<summary>
    ///  获取或设置 <see langword="done" />
    ///  位 COM + 上下文中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果对象是被停用时该方法返回;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows 2000 或更高版本。
    ///</exception>
    {class} property DeactivateOnReturn: Boolean read get_DeactivateOnReturn write set_DeactivateOnReturn;
    ///<summary>
    ///  获取当前分区的 GUID。
    ///</summary>
    ///<returns>
    ///  当前分区的 GUID。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows XP 或更高版本。
    ///</exception>
    {class} property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId;
    ///<summary>
    ///  获取当前应用程序的 GUID。
    ///</summary>
    ///<returns>
    ///  当前应用程序 GUID。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows XP 或更高版本。
    ///</exception>
    {class} property ApplicationId: DDN.mscorlib.DNGuid read get_ApplicationId;
    ///<summary>
    ///  获取当前应用程序实例的 GUID。
    ///</summary>
    ///<returns>
    ///  当前的应用程序实例的 GUID。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有可用的 COM + 上下文。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  该平台不是 Windows XP 或更高版本。
    ///</exception>
    {class} property ApplicationInstanceId: DDN.mscorlib.DNGuid read get_ApplicationInstanceId;
  end;

  ///<summary>
  ///  获取有关 COM + 对象上下文信息。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ContextUtil')]
  DNContextUtil = interface(DDN.mscorlib.DNObject)
  ['{7DA59565-0BF0-3D4C-A92D-E9618B61EDB9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNContextUtil = class(TDNGenericImport<DNContextUtilClass, DNContextUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAppDomainHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{445B3EA0-D02A-5B06-9348-4213879D26DA}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.AppDomainHelper" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAppDomainHelper;

  end;

  ///<summary>
  ///  切换到给定的应用程序域中，应将对象绑定到，并在给定的函数回调。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.AppDomainHelper')]
  DNAppDomainHelper = interface(DDN.mscorlib.DNObject)
  ['{EF24F689-14F8-4D92-B4AF-D7B1F0E70FD4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainHelper = class(TDNGenericImport<DNAppDomainHelperClass, DNAppDomainHelper>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClientRemotingConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D848422F-FF85-51AC-8FF4-4F79A4E2CD01}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.ClientRemotingConfig" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNClientRemotingConfig;

  { static methods } 

    ///<summary>
    ///  启用 SOAP 的 COM + 应用程序中创建客户端类型库的客户端远程处理配置文件。
    ///</summary>
    ///  <param name="DestinationDirectory">
    ///  要在其中创建配置文件文件夹。
    ///</param>
    ///  <param name="VRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///  <param name="BaseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="AssemblyName">
    ///  包含对应的类型库的公共语言运行时 (CLR) 元数据的程序集显示名称。
    ///</param>
    ///  <param name="TypeName">
    ///  包含类型库与对应的 CLR 元数据的程序集完全限定的名称。
    ///</param>
    ///  <param name="ProgId">
    ///  类的编程标识符。
    ///</param>
    ///  <param name="Mode">
    ///  激活模式。
    ///</param>
    ///  <param name="Transport">
    ///  未使用。
    ///  指定 <see langword="null" />
    ///  为此参数。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果成功创建客户端的远程处理配置文件;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Write(DestinationDirectory: string; VRoot: string; BaseUrl: string; AssemblyName: string; TypeName: string; ProgId: string; Mode: string; Transport: string): Boolean;

  end;

  ///<summary>
  ///  定义一个静态 <see cref="M:System.EnterpriseServices.Internal.ClientRemotingConfig.Write(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)" />
  ///  创建客户端类型库的客户端远程处理配置文件的方法。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ClientRemotingConfig')]
  DNClientRemotingConfig = interface(DDN.mscorlib.DNObject)
  ['{E7D574D5-2E51-3400-9FB6-A058F2D5B8AB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClientRemotingConfig = class(TDNGenericImport<DNClientRemotingConfigClass, DNClientRemotingConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNClrObjectFactoryClass = interface(DNObjectClass)
  ['{009E135F-4F19-569A-9FDD-8ED14FA708A9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.ClrObjectFactory" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNClrObjectFactory;

  end;

  ///<summary>
  ///  激活启用 SOAP 的 COM + 应用程序代理从客户端。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ClrObjectFactory')]
  DNClrObjectFactory = interface(DNIClrObjectFactory)
  ['{ECABAFD1-7F19-11D2-978E-0000F8757E2A}']
  { methods } 

    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用远程程序集的邮箱。
    ///  当前未实现;引发 <see cref="T:System.Runtime.InteropServices.COMException" />
    ///  如果调用。
    ///</summary>
    ///  <param name="Mailbox">
    ///  与 Web 服务邮箱。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  调用此方法会引发异常。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  未实现简单邮件传输协议 (SMTP)。
    ///</exception>
    function CreateFromMailbox(Mailbox: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用该程序集的配置文件。
    ///</summary>
    ///  <param name="AssemblyName">
    ///  要激活的程序集的名称。
    ///</param>
    ///  <param name="TypeName">
    ///  要激活的类型的名称。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  表示的类型，其区域性、 参数和绑定及激活特性设置为 <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  如果 <paramref name="TypeName" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  未注册的类。
    ///</exception>
    function CreateFromAssembly(AssemblyName: string; TypeName: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理，使用远程程序集的虚拟根 URL。
    ///</summary>
    ///  <param name="VrootUrl">
    ///  要激活的对象的虚拟根 URL。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  与区域性、 参数和绑定及激活特性设置为表示的类型， <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  标识程序集如果 <paramref name="VrootUrl" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  无法打开线程令牌。
    ///</exception>
    function CreateFromVroot(VrootUrl: string; Mode: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  激活远程程序集通过.NET 远程处理使用 Web 服务描述语言 (WSDL) 的 XML Web 服务。
    ///</summary>
    ///  <param name="WsdlUrl">
    ///  Web 服务的 WSDL URL。
    ///</param>
    ///  <param name="Mode">
    ///  未使用。
    ///</param>
    ///<returns>
    ///  一个实例 <see cref="T:System.Object" />
    ///  与区域性、 参数和绑定及激活特性设置为表示的类型， <see langword="null" />
    ///  , ，或 <see langword="null" />
    ///  标识程序集如果 <paramref name="WsdlUrl" />
    ///  找不到参数。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.Runtime.InteropServices.COMException">
    ///  无法打开线程令牌。
    ///</exception>
    function CreateFromWsdl(WsdlUrl: string; Mode: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClrObjectFactory = class(TDNGenericImport<DNClrObjectFactoryClass, DNClrObjectFactory>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComManagedImportUtilClass = interface(DNObjectClass)
  ['{65C4067C-684D-58A7-962C-C70357B6B789}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.ComManagedImportUtil" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNComManagedImportUtil;

  end;

  ///<summary>
  ///  标识并安装 COM + 目录中的组件。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ComManagedImportUtil')]
  DNComManagedImportUtil = interface(DNIComManagedImportUtil)
  ['{3B0398C9-7812-4007-85CB-18C771F2206F}']
  { methods } 

    procedure GetComponentInfo(assemblyPath: string; out numComponents: string; out componentInfo: string);
    ///<summary>
    ///  将程序集安装到 COM + 应用程序。
    ///</summary>
    ///  <param name="asmpath">
    ///  程序集路径。
    ///</param>
    ///  <param name="parname">
    ///  COM + 分区名称。
    ///</param>
    ///  <param name="appname">
    ///  COM + 应用程序名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception>
    procedure InstallAssembly(asmpath: string; parname: string; appname: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComManagedImportUtil = class(TDNGenericImport<DNComManagedImportUtilClass, DNComManagedImportUtil>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNComSoapPublishErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{05363E04-2B28-5390-8704-D952DC4E7EBF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.ComSoapPublishError" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNComSoapPublishError;

  { static methods } 

    ///<summary>
    ///  在 COM + 应用程序中发布启用 SOAP 的 COM 接口时遇到的错误将写入事件日志。
    ///</summary>
    ///  <param name="s">
    ///  要写入到事件日志错误消息。
    ///</param>
    {class} procedure Report(s: string);

  end;

  ///<summary>
  ///  错误处理程序在 COM + 应用程序中发布支持 SOAP 的服务。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ComSoapPublishError')]
  DNComSoapPublishError = interface(DDN.mscorlib.DNObject)
  ['{B0F64827-79BB-3163-B1AB-A2EA0E1FDA23}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComSoapPublishError = class(TDNGenericImport<DNComSoapPublishErrorClass, DNComSoapPublishError>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNGenerateMetadataClass = interface(DNObjectClass)
  ['{049407B5-ACED-5E4D-81A7-79121ED484DF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.GenerateMetadata" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNGenerateMetadata;

  { static methods } 

    ///<summary>
    ///  在指定路径搜索指定文件。
    ///</summary>
    ///  <param name="path">
    ///  要在其中搜索文件的路径。
    ///</param>
    ///  <param name="fileName">
    ///  要搜索的文件的名称。
    ///</param>
    ///  <param name="extension">
    ///  搜索文件时要添加到文件名的扩展名。
    ///</param>
    ///  <param name="numBufferChars">
    ///  接收有效路径和文件名的缓冲区的大小。
    ///</param>
    ///  <param name="buffer">
    ///  接收找到的文件的路径和文件名的缓冲区。
    ///</param>
    ///  <param name="filePart">
    ///  接收地址的变量，该地址的内容是有效路径和文件名的最后一个组成部分。
    ///</param>
    ///<returns>
    ///  如果搜索成功，返回值的长度是复制到 <paramref name="buffer" />
    ///  的字符串的长度。
    ///  如果搜索失败，则返回值为 0。
    ///</returns>
    {class} function SearchPath(path: string; fileName: string; extension: string; numBufferChars: Int32; buffer: string; filePart: TArray<Int32>): Int32;

  end;

  ///<summary>
  ///  生成 COM+ 组件的公共语言运行时 (CLR) 元数据。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.GenerateMetadata')]
  DNGenerateMetadata = interface(DNIComSoapMetadata)
  ['{D8013FF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>
    ///  生成或定位一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据。
    ///</summary>
    ///  <param name="strSrcTypeLib">
    ///  类型库的名称，将为该类型库生成一个程序集。
    ///</param>
    ///  <param name="outPath">
    ///  将在其中生成程序集或定位现有程序集的文件夹。
    ///</param>
    ///<returns>
    ///  生成的程序集的名称；如果输入无效，则为一个空字符串。
    ///</returns>
    function Generate(strSrcTypeLib: string; outPath: string): string;
    function GenerateSigned(strSrcTypeLib: string; outPath: string; InstallGac: Boolean; out Error: string): string;
    ///<summary>
    ///  生成或定位一个程序集，该程序集包含指定类型库所表示的 COM+ 组件的公共语言运行时 (CLR) 元数据；使用强名称密钥对来对程序集进行签名；然后将该程序集安装在全局程序集缓存中。
    ///</summary>
    ///  <param name="strSrcTypeLib">
    ///  类型库的名称，将为该类型库生成一个程序集。
    ///</param>
    ///  <param name="outPath">
    ///  将在其中生成程序集或定位现有程序集的文件夹。
    ///</param>
    ///  <param name="PublicKey">
    ///  用于将类型库信息导入程序集的公钥。
    ///</param>
    ///  <param name="KeyPair">
    ///  用于对生成的程序集进行签名的强名称密钥对。
    ///</param>
    ///<returns>
    ///  生成的程序集的名称；如果输入无效，则为一个空字符串。
    ///</returns>
    function GenerateMetaData(strSrcTypeLib: string; outPath: string; PublicKey: TArray<Byte>; KeyPair: DDN.mscorlib.DNStrongNameKeyPair): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNGenerateMetadata = class(TDNGenericImport<DNGenerateMetadataClass, DNGenerateMetadata>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNIISVirtualRootClass = interface(DNObjectClass)
  ['{E7BB99AE-BA59-55F3-A31D-B44411014EC7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.IISVirtualRoot" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNIISVirtualRoot;

  end;

  ///<summary>
  ///  创建和删除 Internet 信息服务 (IIS) 6.0 虚拟根。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.IISVirtualRoot')]
  DNIISVirtualRoot = interface(DNIComSoapIISVRoot)
  ['{D8013EF1-730B-45E2-BA24-874B7242C425}']
  { methods } 

    procedure Create(RootWeb: string; inPhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    procedure Delete(RootWeb: string; PhysicalDirectory: string; VirtualDirectory: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNIISVirtualRoot = class(TDNGenericImport<DNIISVirtualRootClass, DNIISVirtualRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNPublishClass = interface(DNObjectClass)
  ['{F9653B41-E721-52DC-9D88-E4BA4D4E2FAB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.Publish" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPublish;

  { static methods } 

    ///<summary>
    ///  返回用于存储客户端配置文件的目录的路径。
    ///</summary>
    ///  <param name="CreateDir">
    ///  设置为 <see langword="true" />
    ///  若要创建目录，或 <see langword="false" />
    ///  要返回的路径，但不是创建目录。
    ///</param>
    ///<returns>
    ///  包含配置文件的目录的路径。
    ///</returns>
    ///<exception cref="T:System.UnauthorizedAccessException">
    ///  调用方没有所要求的权限。
    ///</exception>
    {class} function GetClientPhysicalPath(CreateDir: Boolean): string;
    {class} procedure ParseUrl(FullUrl: string; out BaseUrl: string; out VirtualRoot: string);

  end;

  ///<summary>
  ///  发布用于启用 SOAP 的 COM + 应用程序的 COM 接口。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.Publish')]
  DNPublish = interface(DNIComSoapPublisher)
  ['{D8013EEF-730B-45E2-BA24-874B7242C425}']
  { methods } 

    ///<summary>
    ///  注销 COM 互操作程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///  - 或 -
    ///  指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到，或者未指定文件扩展名。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  两次用两个不同的证据加载了程序集或模块，或程序集名称的长度超过 MAX_PATH 个字符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  一种方法标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  不是 <see langword="static" />
    ///  。
    ///  - 或 -
    ///  使用标记的多个方法 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  在给定级别的层次结构。
    ///  - 或 -
    ///  该方法的签名标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  无效。
    ///</exception>
    procedure UnRegisterAssembly(AssemblyPath: string);
    procedure GetAssemblyNameForCache(TypeLibPath: string; out CachePath: string);
    procedure DeleteVirtualRoot(RootWebServer: string; FullUrl: string; out Error: string);
    ///<summary>
    ///  注册为 COM 互操作程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///  - 或 -
    ///  指定了不以“file://”开头的基本代码，且没有所需的 <see cref="T:System.Net.WebPermission" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到，或者未指定文件扩展名。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  两次用两个不同的证据加载了程序集或模块，或程序集名称的长度超过 MAX_PATH 个字符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  一种方法标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  不是 <see langword="static" />
    ///  。
    ///  - 或 -
    ///  使用标记的多个方法 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  在给定级别的层次结构。
    ///  - 或 -
    ///  该方法的签名标有 <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />
    ///  无效。
    ///</exception>
    procedure RegisterAssembly(AssemblyPath: string);
    ///<summary>
    ///  将程序集安装在全局程序集缓存中。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception>
    procedure GacInstall(AssemblyPath: string);
    ///<summary>
    ///  从全局程序集缓存中移除程序集。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///  - 或 -
    ///  调用方没有路径发现权限。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="AssemblyPath" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="AssemblyPath" />
    ///  为空。
    ///</exception><exception cref="T:System.IO.FileNotFoundException"><paramref name="AssemblyPath" />
    ///  未找到。
    ///</exception><exception cref="T:System.IO.FileLoadException">
    ///  一个程序集或模块用两个不同的证据加载了两次。
    ///</exception><exception cref="T:System.BadImageFormatException"><paramref name="AssemblyPath" />
    ///  不是有效的程序集。
    ///</exception>
    procedure GacRemove(AssemblyPath: string);
    procedure CreateVirtualRoot(Operation: string; FullUrl: string; out BaseUrl: string; out VirtualRoot: string; out PhysicalPath: string; out Error: string);
    procedure CreateMailBox(RootMailServer: string; MailBox: string; out SmtpName: string; out Domain: string; out PhysicalPath: string; out Error: string);
    procedure DeleteMailBox(RootMailServer: string; MailBox: string; out Error: string);
    procedure ProcessServerTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; Operation: string; out strAssemblyName: string; out TypeName: string; out Error: string);
    ///<summary>
    ///  在程序集上反映，并返回与匹配 ProgID 的类型名称。
    ///</summary>
    ///  <param name="AssemblyPath">
    ///  程序集文件系统路径。
    ///</param>
    ///  <param name="ProgId">
    ///  类的编程标识符。
    ///</param>
    ///<returns>
    ///  相匹配的 ProgID 的类型名称。
    ///</returns>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception>
    function GetTypeNameFromProgId(AssemblyPath: string; ProgId: string): string;
    procedure ProcessClientTlb(ProgId: string; SrcTlbPath: string; PhysicalPath: string; VRoot: string; BaseUrl: string; Mode: string; Transport: string; out AssemblyName: string; out TypeName: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPublish = class(TDNGenericImport<DNPublishClass, DNPublish>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNServerWebConfigClass = interface(DNObjectClass)
  ['{E2A307EC-5E27-5C2C-A7E6-1FBAF13291B5}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.ServerWebConfig" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServerWebConfig;

  end;

  ///<summary>
  ///  创建启用 SOAP 的 COM + 应用程序的 Web.config 文件。
  ///  此外可以在发布应用程序中的 COM 接口的文件添加组件项。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.ServerWebConfig')]
  DNServerWebConfig = interface(DNIServerWebConfig)
  ['{31D353B3-0A0A-3986-9B20-3EC4EE90B389}']
  { methods } 

    procedure Create(FilePath: string; FilePrefix: string; out Error: string);
    procedure AddElement(FilePath: string; AssemblyName: string; TypeName: string; ProgId: string; WkoMode: string; out Error: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServerWebConfig = class(TDNGenericImport<DNServerWebConfigClass, DNServerWebConfig>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapClientImportClass = interface(DNObjectClass)
  ['{E554D222-7F34-5B64-97F5-238981E3A15B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.SoapClientImport" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapClientImport;

  end;

  ///<summary>
  ///  导入经过身份验证，加密的 SOAP 客户端代理。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapClientImport')]
  DNSoapClientImport = interface(DNISoapClientImport)
  ['{346D5B9F-45E1-45C0-AADF-1B7D221E9063}']
  { methods } 

    ///<summary>
    ///  创建包括安全和身份验证选项，在.NET 远程处理客户端配置文件。
    ///</summary>
    ///  <param name="progId">
    ///  类的编程标识符。
    ///  如果是空字符串 ("")，此方法返回时不执行任何操作。
    ///</param>
    ///  <param name="virtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///  <param name="baseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="authentication">
    ///  要使用的 ASP.NET 身份验证的类型。
    ///</param>
    ///  <param name="assemblyName">
    ///  程序集的名称。
    ///</param>
    ///  <param name="typeName">
    ///  类型的名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception>
    procedure ProcessClientTlbEx(progId: string; virtualRoot: string; baseUrl: string; authentication: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapClientImport = class(TDNGenericImport<DNSoapClientImportClass, DNSoapClientImport>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerTlbClass = interface(DNObjectClass)
  ['{A75771B9-C99E-5402-AB7F-3337610F05F3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.SoapServerTlb" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapServerTlb;

  end;

  ///<summary>
  ///  进程身份验证，在服务器上的加密的 SOAP 组件。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapServerTlb')]
  DNSoapServerTlb = interface(DNISoapServerTlb)
  ['{F6B6768F-F99E-4152-8ED2-0412F78517FB}']
  { methods } 

    procedure AddServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; clientActivated: string; wellKnown: string; discoFile: string; operation: string; out strAssemblyName: string; out typeName: string);
    ///<summary>
    ///  从 Web.config 和 Default.disco 文件，具体取决于安全选项移除服务器类型库项。
    ///</summary>
    ///  <param name="progId">
    ///  类的编程标识符。
    ///</param>
    ///  <param name="classId">
    ///  类型库类标识符 (CLSID)。
    ///</param>
    ///  <param name="interfaceId">
    ///  类型库的 IID。
    ///</param>
    ///  <param name="srcTlbPath">
    ///  包含类型库的文件路径。
    ///</param>
    ///  <param name="rootWebServer">
    ///  根 Web 服务器。
    ///</param>
    ///  <param name="baseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="virtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///  <param name="operation">
    ///  未使用。
    ///  指定 <see langword="null" />
    ///  为此参数。
    ///</param>
    ///  <param name="assemblyName">
    ///  程序集的名称。
    ///</param>
    ///  <param name="typeName">
    ///  程序集的类型。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception>
    procedure DeleteServerTlb(progId: string; classId: string; interfaceId: string; srcTlbPath: string; rootWebServer: string; baseUrl: string; virtualRoot: string; operation: string; assemblyName: string; typeName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerTlb = class(TDNGenericImport<DNSoapServerTlbClass, DNSoapServerTlb>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapServerVRootClass = interface(DNObjectClass)
  ['{168252C3-5FE0-5779-9735-360EA93C21E9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.SoapServerVRoot" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapServerVRoot;

  end;

  ///<summary>
  ///  发布服务器中的经过身份验证、 加密 SOAP 虚拟根目录。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapServerVRoot')]
  DNSoapServerVRoot = interface(DNISoapServerVRoot)
  ['{CAA817CC-0C04-4D22-A05C-2B7E162F4E8F}']
  { methods } 

    ///<summary>
    ///  删除虚拟根目录。
    ///  未完全实现。
    ///</summary>
    ///  <param name="rootWebServer">
    ///  根 Web 服务器。
    ///  默认值为"IIS://localhost/W3SVC/1/ROOT"。
    ///</param>
    ///  <param name="inBaseUrl">
    ///  包含虚拟根目录的基 URL。
    ///</param>
    ///  <param name="inVirtualRoot">
    ///  虚拟根目录的名称。
    ///</param>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception><exception cref="T:System.EnterpriseServices.ServicedComponentException">
    ///  用于获取系统目录的调用失败。
    ///</exception>
    procedure DeleteVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string);
    procedure CreateVirtualRootEx(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; homePage: string; discoFile: string; secureSockets: string; authentication: string; operation: string; out baseUrl: string; out virtualRoot: string; out physicalPath: string);
    procedure GetVirtualRootStatus(RootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out Exists: string; out SSL: string; out WindowsAuth: string; out Anonymous: string; out HomePage: string; out DiscoFile: string; out PhysicalPath: string; out BaseUrl: string; out VirtualRoot: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapServerVRoot = class(TDNGenericImport<DNSoapServerVRootClass, DNSoapServerVRoot>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNSoapUtilityClass = interface(DNObjectClass)
  ['{3B8306AE-156A-528F-ABCD-C9304A207401}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.SoapUtility" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapUtility;

  end;

  ///<summary>
  ///  提供实用工具，以支持启用 COM + SOAP 的应用程序代理服务器和客户端代理的导入导出。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.SoapUtility')]
  DNSoapUtility = interface(DNISoapUtility)
  ['{5F9A955F-AA55-4127-A32B-33496AA8A44E}']
  { methods } 

    procedure GetServerPhysicalPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out physicalPath: string);
    ///<summary>
    ///  确定是否经过身份验证，加密的 SOAP 接口存在。
    ///</summary>
    ///<exception cref="T:System.Security.SecurityException">
    ///  在调用链中的调用方没有权限访问非托管的代码。
    ///</exception><exception cref="T:System.PlatformNotSupportedException">
    ///  SOAP 实用程序将不可用。
    ///</exception>
    procedure Present;
    procedure GetServerBinPath(rootWebServer: string; inBaseUrl: string; inVirtualRoot: string; out binPath: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapUtility = class(TDNGenericImport<DNSoapUtilityClass, DNSoapUtility>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AEE6864-FC08-5F14-8019-B109ABA24DCF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.RegistrationConfig" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRegistrationConfig;

  end;

  ///<summary>
  ///  提供有关将程序集安装到 COM + 目录的配置信息。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationConfig')]
  DNRegistrationConfig = interface(DDN.mscorlib.DNObject)
  ['{36DCDA30-DC3B-4D93-BE42-90B2D74C64E7}']
  { getters & setters } 

    function get_AssemblyFile: string;
    procedure set_AssemblyFile(value: string);
    function get_InstallationFlags: DNInstallationFlags;
    procedure set_InstallationFlags(value: DNInstallationFlags);
    function get_Application: string;
    procedure set_Application(value: string);
    function get_TypeLibrary: string;
    procedure set_TypeLibrary(value: string);
    function get_Partition: string;
    procedure set_Partition(value: string);
    function get_ApplicationRootDirectory: string;
    procedure set_ApplicationRootDirectory(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要安装的程序集的文件名。
    ///</summary>
    ///<returns>
    ///  要安装的程序集文件的名称。
    ///</returns>
    property AssemblyFile: string read get_AssemblyFile write set_AssemblyFile;
    ///<summary>
    ///  获取或设置一个标志，指示如何将程序集安装。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.InstallationFlags" />
    ///  值之一。
    ///</returns>
    property InstallationFlags: DNInstallationFlags read get_InstallationFlags write set_InstallationFlags;
    ///<summary>
    ///  获取或设置在其中要安装该程序集的 COM + 应用程序的名称。
    ///</summary>
    ///<returns>
    ///  是用来安装该程序集的 COM + 应用程序的名称。
    ///</returns>
    property Application: string read get_Application write set_Application;
    ///<summary>
    ///  获取或设置输出的名称类型库导出程序 (Tlbexp.exe) 文件。
    ///</summary>
    ///<returns>
    ///  输出的名称类型库导出程序 (Tlbexp.exe) 文件。
    ///</returns>
    property TypeLibrary: string read get_TypeLibrary write set_TypeLibrary;
    ///<summary>
    ///  获取或设置 COM + 分区的名称。
    ///</summary>
    ///<returns>
    ///  COM + 分区的名称。
    ///</returns>
    property Partition: string read get_Partition write set_Partition;
    ///<summary>
    ///  获取或设置该应用程序的根目录的名称。
    ///</summary>
    ///<returns>
    ///  应用程序的根目录的名称。
    ///</returns>
    property ApplicationRootDirectory: string read get_ApplicationRootDirectory write set_ApplicationRootDirectory;
  end;

  TDNRegistrationConfig = class(TDNGenericImport<DNRegistrationConfigClass, DNRegistrationConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationErrorInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B75C714-815C-5B70-97A3-5AA35A46653D}']
  end;

  ///<summary>
  ///  检索有关扩展的错误信息与多个 COM + 对象相关的方法。
  ///  这还包括安装、 导入和导出 COM + 应用程序和组件的方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationErrorInfo')]
  DNRegistrationErrorInfo = interface(DDN.mscorlib.DNObject)
  ['{1F7EBE37-827C-3AC2-BEF1-882229B9724E}']
  { getters & setters } 

    function get_MajorRef: string;
    function get_MinorRef: string;
    function get_Name: string;
    function get_ErrorCode: Int32;
    function get_ErrorString: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  如果适用，导致该错误的对象获取的密钥值。
    ///</summary>
    ///<returns>
    ///  导致该错误，如果适用的对象的键值。
    ///</returns>
    property MajorRef: string read get_MajorRef;
    ///<summary>
    ///  获取导致该错误，如属性名称的项的精确规范。
    ///</summary>
    ///<returns>
    ///  该项目，如属性名称，导致该错误精确规范。
    ///  如果发生多个错误，或不适用， <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.MinorRef" />
    ///  返回字符串"&lt; 无效 &gt;"。
    ///</returns>
    property MinorRef: string read get_MinorRef;
    ///<summary>
    ///  获取导致了错误的文件的名称。
    ///</summary>
    ///<returns>
    ///  对象或导致了错误的文件的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取对象或文件的错误代码。
    ///</summary>
    ///<returns>
    ///  对象或文件的错误代码。
    ///</returns>
    property ErrorCode: Int32 read get_ErrorCode;
    ///<summary>
    ///  获取说明 <see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.EnterpriseServices.RegistrationErrorInfo.ErrorCode" />
    ///  的说明。
    ///</returns>
    property ErrorString: string read get_ErrorString;
  end;

  TDNRegistrationErrorInfo = class(TDNGenericImport<DNRegistrationErrorInfoClass, DNRegistrationErrorInfo>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNResourcePoolClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E3829389-780C-53D0-976F-3C7982C3DD1D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ResourcePool" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="cb">
    ///  一个 <see cref="T:System.EnterpriseServices.ResourcePool.TransactionEndDelegate" />
    ///  , 时完成事务后, 调用。
    ///  当前事务中存储的所有项都交回给用户通过该委托。
    ///</param>
    {class} function init(cb: DNResourcePool_TransactionEndDelegate): DNResourcePool;

  end;

  ///<summary>
  ///  将对象存储在当前事务。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ResourcePool')]
  DNResourcePool = interface(DDN.mscorlib.DNObject)
  ['{2B498504-E225-3BFA-9F6B-FDBB961FC7CC}']
  { methods } 

    ///<summary>
    ///  将资源添加到当前事务。
    ///</summary>
    ///  <param name="resource">
    ///  要添加的资源。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果添加了与池; 资源对象否则为 <see langword="false" />
    ///  。
    ///</returns>
    function PutResource(resource: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  从当前事务获取的资源。
    ///</summary>
    ///<returns>
    ///  资源对象中。
    ///</returns>
    function GetResource: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResourcePool = class(TDNGenericImport<DNResourcePoolClass, DNResourcePool>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A35124B-AEB9-5950-8043-CBA6FABFC98F}']
  { static getter & setter } 

    {class} function get_CurrentCall: DNSecurityCallContext;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.EnterpriseServices.SecurityCallContext" />
    ///  介绍的安全调用上下文的对象。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SecurityCallContext" />
    ///  介绍的安全调用上下文的对象。
    ///</returns>
    {class} property CurrentCall: DNSecurityCallContext read get_CurrentCall;
  end;

  ///<summary>
  ///  描述导致当前方法调用的调用方的链。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SecurityCallContext')]
  DNSecurityCallContext = interface(DDN.mscorlib.DNObject)
  ['{CA1E2FB8-74B9-354B-B5FB-F4E771CC64F1}']
  { getters & setters } 

    function get_IsSecurityEnabled: Boolean;
    function get_DirectCaller: DNSecurityIdentity;
    function get_OriginalCaller: DNSecurityIdentity;
    function get_NumCallers: Int32;
    function get_MinAuthenticationLevel: Int32;
    function get_Callers: DNSecurityCallers;

  { methods } 

    ///<summary>
    ///  验证直接调用方是指定角色的成员。
    ///</summary>
    ///  <param name="role">
    ///  指定的角色。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果直接调用方是指定角色; 的成员否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsCallerInRole(role: string): Boolean;
    ///<summary>
    ///  验证指定的用户属于指定的角色。
    ///</summary>
    ///  <param name="user">
    ///  指定的用户。
    ///</param>
    ///  <param name="role">
    ///  指定的角色。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的用户是指定角色; 的成员否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsUserInRole(user: string; role: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  确定是否在当前上下文中启用了安全检查。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前上下文中; 中启用安全检查否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSecurityEnabled: Boolean read get_IsSecurityEnabled;
    ///<summary>
    ///  获取 <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  介绍此方法的直接调用方的对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  值。
    ///</returns>
    property DirectCaller: DNSecurityIdentity read get_DirectCaller;
    ///<summary>
    ///  获取 <see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  描述原始调用方。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SecurityIdentity" />
    ///  值之一。
    ///</returns>
    property OriginalCaller: DNSecurityIdentity read get_OriginalCaller;
    ///<summary>
    ///  获取 <see langword="NumCallers" />
    ///  值从 <see langword="ISecurityCallContext" />
    ///  COM + 中的集合。
    ///</summary>
    ///<returns><see langword="NumCallers" />
    ///  值从 <see langword="ISecurityCallContext" />
    ///  COM + 中的集合。
    ///</returns>
    property NumCallers: Int32 read get_NumCallers;
    ///<summary>
    ///  获取 <see langword="MinAuthenticationLevel" />
    ///  值从 <see langword="ISecurityCallContext" />
    ///  COM + 中的集合。
    ///</summary>
    ///<returns><see langword="MinAuthenticationLevel" />
    ///  值从 <see langword="ISecurityCallContext" />
    ///  COM + 中的集合。
    ///</returns>
    property MinAuthenticationLevel: Int32 read get_MinAuthenticationLevel;
    ///<summary>
    ///  获取 <see cref="T:System.EnterpriseServices.SecurityCallers" />
    ///  描述调用方的对象。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SecurityCallers" />
    ///  描述调用方的对象。
    ///</returns>
    ///<exception cref="T:System.Runtime.InteropServices.COMException">
    ///  没有安全上下文。
    ///</exception>
    property Callers: DNSecurityCallers read get_Callers;
  end;

  TDNSecurityCallContext = class(TDNGenericImport<DNSecurityCallContextClass, DNSecurityCallContext>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityCallersClass = interface(DNObjectClass)
  ['{94401CE8-5E29-5B0D-B1FB-B7F93514A003}']
  end;

  ///<summary>
  ///  提供当前的调用链中的标识的有序的集合。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SecurityCallers')]
  DNSecurityCallers = interface(DDN.mscorlib.DNIEnumerable)
  ['{DDC8B304-618D-33A7-AD5E-9E4CC7F90A86}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(idx: Int32): DNSecurityIdentity;

  { methods } 

    ///<summary>
    ///  检索对象的枚举接口。
    ///</summary>
    ///<returns>
    ///  枚举器接口 <see langword="ISecurityCallersColl" />
    ///  集合。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  链中获取调用方的数目。
    ///</summary>
    ///<returns>
    ///  链中的调用方的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[idx: Int32]: DNSecurityIdentity read get_Item; default;
  end;

  TDNSecurityCallers = class(TDNGenericImport<DNSecurityCallersClass, DNSecurityCallers>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSecurityIdentityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1595778E-14E9-55A7-91A6-A32B0CAB8426}']
  end;

  ///<summary>
  ///  包含 COM + 调用链中的标识有关的信息。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SecurityIdentity')]
  DNSecurityIdentity = interface(DDN.mscorlib.DNObject)
  ['{376B8ABA-A173-346D-88EA-51F506930D68}']
  { getters & setters } 

    function get_AccountName: string;
    function get_AuthenticationService: Int32;
    function get_ImpersonationLevel: DNImpersonationLevelOption;
    function get_AuthenticationLevel: DNAuthenticationOption;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取描述此标识的用户的名称。
    ///</summary>
    ///<returns>
    ///  描述此标识的用户的名称。
    ///</returns>
    property AccountName: string read get_AccountName;
    ///<summary>
    ///  获取描述此标识的身份验证服务。
    ///</summary>
    ///<returns>
    ///  描述此标识的身份验证服务。
    ///</returns>
    property AuthenticationService: Int32 read get_AuthenticationService;
    ///<summary>
    ///  获取描述此标识的用户的模拟级别。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.EnterpriseServices.ImpersonationLevelOption" />
    ///  值。
    ///</returns>
    property ImpersonationLevel: DNImpersonationLevelOption read get_ImpersonationLevel;
    ///<summary>
    ///  获取描述此标识的用户的身份验证级别。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.AuthenticationOption" />
    ///  值之一。
    ///</returns>
    property AuthenticationLevel: DNAuthenticationOption read get_AuthenticationLevel;
  end;

  TDNSecurityIdentity = class(TDNGenericImport<DNSecurityIdentityClass, DNSecurityIdentity>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceConfigClass = interface(DDN.mscorlib.DNObjectClass)
  ['{54846460-F05C-5104-96A9-2B38C9909F1C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  类设置的属性来配置所需的服务。
    ///</summary>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  当前平台上不支持。
    ///</exception>
    {class} function init: DNServiceConfig;

  end;

  ///<summary>
  ///  指定并配置要在调用时输入的域中处于活动状态的服务 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
  ///  或创建 <see cref="T:System.EnterpriseServices.Activity" />
  ///  。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ServiceConfig')]
  DNServiceConfig = interface(DDN.mscorlib.DNObject)
  ['{29B2A650-9339-3D5A-882D-D5A744A1CA03}']
  { getters & setters } 

    function get_ThreadPool: DNThreadPoolOption;
    procedure set_ThreadPool(value: DNThreadPoolOption);
    function get_Inheritance: DNInheritanceOption;
    procedure set_Inheritance(value: DNInheritanceOption);
    function get_Binding: DNBindingOption;
    procedure set_Binding(value: DNBindingOption);
    function get_Transaction: DNTransactionOption;
    procedure set_Transaction(value: DNTransactionOption);
    function get_IsolationLevel: DNTransactionIsolationLevel;
    procedure set_IsolationLevel(value: DNTransactionIsolationLevel);
    function get_TransactionTimeout: Int32;
    procedure set_TransactionTimeout(value: Int32);
    function get_TipUrl: string;
    procedure set_TipUrl(value: string);
    function get_TransactionDescription: string;
    procedure set_TransactionDescription(value: string);
    function get_BringYourOwnTransaction: DNITransaction;
    procedure set_BringYourOwnTransaction(value: DNITransaction);
    function get_BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction;
    procedure set_BringYourOwnSystemTransaction(value: DDN.System.Transactions.DNTransaction);
    function get_Synchronization: DNSynchronizationOption;
    procedure set_Synchronization(value: DNSynchronizationOption);
    function get_IISIntrinsicsEnabled: Boolean;
    procedure set_IISIntrinsicsEnabled(value: Boolean);
    function get_COMTIIntrinsicsEnabled: Boolean;
    procedure set_COMTIIntrinsicsEnabled(value: Boolean);
    function get_TrackingEnabled: Boolean;
    procedure set_TrackingEnabled(value: Boolean);
    function get_TrackingAppName: string;
    procedure set_TrackingAppName(value: string);
    function get_TrackingComponentName: string;
    procedure set_TrackingComponentName(value: string);
    function get_SxsOption: DNSxsOption;
    procedure set_SxsOption(value: DNSxsOption);
    function get_SxsDirectory: string;
    procedure set_SxsDirectory(value: string);
    function get_SxsName: string;
    procedure set_SxsName(value: string);
    function get_PartitionOption: DNPartitionOption;
    procedure set_PartitionOption(value: DNPartitionOption);
    function get_PartitionId: DDN.mscorlib.DNGuid;
    procedure set_PartitionId(value: DDN.mscorlib.DNGuid);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，指示它运行该活动提交的工作线程池。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.ThreadPoolOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.ThreadPoolOption.None" />
    ///  。
    ///</returns>
    property ThreadPool: DNThreadPoolOption read get_ThreadPool write set_ThreadPool;
    ///<summary>
    ///  获取或设置一个值，该值指示是否以构造一个新的上下文，根据当前上下文或创建新的上下文中的信息仅基于 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.InheritanceOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.InheritanceOption.Inherit" />
    ///  。
    ///</returns>
    property Inheritance: DNInheritanceOption read get_Inheritance write set_Inheritance;
    ///<summary>
    ///  获取或设置绑定选项，它指示该活动提交的所有工作都是要绑定到只有一个单线程单元 (STA)。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.BindingOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.BindingOption.NoBinding" />
    ///  。
    ///</returns>
    property Binding: DNBindingOption read get_Binding write set_Binding;
    ///<summary>
    ///  获取或设置一个值，该值指示包含的工作中使用事务的方式。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.TransactionOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.TransactionOption.Disabled" />
    ///  。
    ///</returns>
    property Transaction: DNTransactionOption read get_Transaction write set_Transaction;
    ///<summary>
    ///  获取或设置事务的隔离级别。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.TransactionIsolationLevel" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.TransactionIsolationLevel.Any" />
    ///  。
    ///</returns>
    property IsolationLevel: DNTransactionIsolationLevel read get_IsolationLevel write set_IsolationLevel;
    ///<summary>
    ///  获取或设置一个新的事务的事务超时时间。
    ///</summary>
    ///<returns>
    ///  事务超时时间，以秒为单位。
    ///</returns>
    property TransactionTimeout: Int32 read get_TransactionTimeout write set_TransactionTimeout;
    ///<summary>
    ///  获取或设置允许包含的代码以在现有事务中运行的事务 Internet 协议 (TIP) URL。
    ///</summary>
    ///<returns>
    ///  一个提示的 URL。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property TipUrl: string read get_TipUrl write set_TipUrl;
    ///<summary>
    ///  获取或设置显示事务统计信息时使用的名称。
    ///</summary>
    ///<returns>
    ///  显示事务统计信息时使用的名称。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property TransactionDescription: string read get_TransactionDescription write set_TransactionDescription;
    ///<summary>
    ///  获取或设置 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  表示现有事务，它提供用于运行由标识事务的设置 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.EnterpriseServices.ITransaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property BringYourOwnTransaction: DNITransaction read get_BringYourOwnTransaction write set_BringYourOwnTransaction;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Transactions.Transaction" />
    ///  表示现有事务，它提供用于运行由标识事务的设置 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Transactions.Transaction" />
    ///  。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property BringYourOwnSystemTransaction: DDN.System.Transactions.DNTransaction read get_BringYourOwnSystemTransaction write set_BringYourOwnSystemTransaction;
    ///<summary>
    ///  获取或设置一个值，该值指示组件请求的自动同步的类型。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SynchronizationOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.SynchronizationOption.Disabled" />
    ///  。
    ///</returns>
    property Synchronization: DNSynchronizationOption read get_Synchronization write set_Synchronization;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用 Internet 信息服务 (IIS) 内部函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了 IIS 内部函数，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IISIntrinsicsEnabled: Boolean read get_IISIntrinsicsEnabled write set_IISIntrinsicsEnabled;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用 COM 事务集成器 (COMTI) 内部函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用了 COMTI 内部函数，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property COMTIIntrinsicsEnabled: Boolean read get_COMTIIntrinsicsEnabled write set_COMTIIntrinsicsEnabled;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用了跟踪。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用跟踪;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property TrackingEnabled: Boolean read get_TrackingEnabled write set_TrackingEnabled;
    ///<summary>
    ///  获取或设置指向在其下报告跟踪程序信息的应用程序 ID 对应的文本字符串。
    ///</summary>
    ///<returns>
    ///  跟踪程序报告信息的应用程序 ID。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property TrackingAppName: string read get_TrackingAppName write set_TrackingAppName;
    ///<summary>
    ///  获取或设置为在其下报告跟踪程序信息的上下文名称对应的文本字符串。
    ///</summary>
    ///<returns>
    ///  跟踪程序报告信息的上下文名称。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property TrackingComponentName: string read get_TrackingComponentName write set_TrackingComponentName;
    ///<summary>
    ///  获取或设置一个值，该值指示如何配置通过并行程序集。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.SxsOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.SxsOption.Ignore" />
    ///  。
    ///</returns>
    property SxsOption: DNSxsOption read get_SxsOption write set_SxsOption;
    ///<summary>
    ///  获取或设置为包含的工作的并行程序集的目录。
    ///</summary>
    ///<returns>
    ///  要用于通过并行程序集的目录的名称。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property SxsDirectory: string read get_SxsDirectory write set_SxsDirectory;
    ///<summary>
    ///  获取或设置包含的工作的并行程序集的文件名。
    ///</summary>
    ///<returns>
    ///  通过并行程序集的文件名。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property SxsName: string read get_SxsName write set_SxsName;
    ///<summary>
    ///  获取或设置一个值，指示如何将分区用于包含的工作。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.PartitionOption" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.EnterpriseServices.PartitionOption.Ignore" />
    ///  。
    ///</returns>
    property PartitionOption: DNPartitionOption read get_PartitionOption write set_PartitionOption;
    ///<summary>
    ///  获取或设置要使用的 COM + 分区的 GUID。
    ///</summary>
    ///<returns>
    ///  要使用该分区的 GUID。
    ///  默认值为零的 GUID。
    ///</returns>
    property PartitionId: DDN.mscorlib.DNGuid read get_PartitionId write set_PartitionId;
  end;

  TDNServiceConfig = class(TDNGenericImport<DNServiceConfigClass, DNServiceConfig>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServiceDomainClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F88486FB-B370-5943-8DB7-24CD780FCBF9}']
  { static methods } 

    ///<summary>
    ///  创建由指定的上下文 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  对象，并将其推送到上下文堆栈成为当前上下文。
    ///</summary>
    ///  <param name="cfg">
    ///  一个 <see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  ，包含要在所包含的代码中使用的服务的配置信息。
    ///</param>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  当前平台上不支持。
    ///</exception>
    {class} procedure Enter(cfg: DNServiceConfig);
    ///<summary>
    ///  就像方法调用正在返回将触发服务器，然后客户端的策略。
    ///  当前上下文然后从上下文堆栈，并且正在运行时的上下文中弹出 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
    ///  调用成为当前上下文。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.TransactionStatus" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.PlatformNotSupportedException"><see cref="T:System.EnterpriseServices.ServiceConfig" />
    ///  当前平台上不支持。
    ///</exception>
    {class} function Leave: DNTransactionStatus;

  end;

  ///<summary>
  ///  允许通过标识的代码段 <see cref="M:System.EnterpriseServices.ServiceDomain.Enter(System.EnterpriseServices.ServiceConfig)" />
  ///  和 <see cref="M:System.EnterpriseServices.ServiceDomain.Leave" />
  ///  为在其自己的上下文中运行和操作方式，就好像的上下文中创建的对象调用的方法。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ServiceDomain')]
  DNServiceDomain = interface(DDN.mscorlib.DNObject)
  ['{C422A96E-89D8-3924-A0B9-5D7D09321B35}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceDomain = class(TDNGenericImport<DNServiceDomainClass, DNServiceDomain>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1230EAEE-0333-53FD-8BDB-BDEBE0B3DADC}']
  end;

  ///<summary>
  ///  访问共享的属性。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SharedProperty')]
  DNSharedProperty = interface(DDN.mscorlib.DNObject)
  ['{28FF2394-9D57-32DB-8B8F-11C5394CBDBF}']
  { getters & setters } 

    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置共享属性的值。
    ///</summary>
    ///<returns>
    ///  共享的属性的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNSharedProperty = class(TDNGenericImport<DNSharedPropertyClass, DNSharedProperty>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3ED19F68-41CC-52C7-ADD5-223728917378}']
  end;

  ///<summary>
  ///  表示共享属性的集合。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SharedPropertyGroup')]
  DNSharedPropertyGroup = interface(DDN.mscorlib.DNObject)
  ['{ADA150DB-83FA-3667-BCF2-DC561D4A8521}']
  { methods } 

    function CreatePropertyByPosition(position: Int32; out fExists: Boolean): DNSharedProperty;
    ///<summary>
    ///  返回位于给定位置的属性。
    ///</summary>
    ///  <param name="position">
    ///  该属性的索引。
    ///</param>
    ///<returns>
    ///  请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />
    ///  。
    ///</returns>
    function PropertyByPosition(position: Int32): DNSharedProperty;
    function CreateProperty(name: string; out fExists: Boolean): DNSharedProperty;
    ///<summary>
    ///  返回具有给定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  请求的属性的名称。
    ///</param>
    ///<returns>
    ///  请求的 <see cref="T:System.EnterpriseServices.SharedProperty" />
    ///  。
    ///</returns>
    function &Property(name: string): DNSharedProperty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroup = class(TDNGenericImport<DNSharedPropertyGroupClass, DNSharedPropertyGroup>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNSharedPropertyGroupManagerClass = interface(DNObjectClass)
  ['{D1996E05-77EC-5093-B8A1-91C6EE61D29D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.SharedPropertyGroupManager" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSharedPropertyGroupManager;

  end;

  ///<summary>
  ///  控制访问的共享的属性组。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.SharedPropertyGroupManager')]
  DNSharedPropertyGroupManager = interface(DDN.mscorlib.DNIEnumerable)
  ['{A7F4D230-15E9-3C4A-AFF4-1D307B05E2E5}']
  { methods } 

    function CreatePropertyGroup(name: string; out dwIsoMode: DNPropertyLockMode; out dwRelMode: DNPropertyReleaseMode; out fExist: Boolean): DNSharedPropertyGroup;
    ///<summary>
    ///  查找具有给定名称的属性组。
    ///</summary>
    ///  <param name="name">
    ///  请求的属性的名称。
    ///</param>
    ///<returns>
    ///  请求的 <see cref="T:System.EnterpriseServices.SharedPropertyGroup" />
    ///  。
    ///</returns>
    function Group(name: string): DNSharedPropertyGroup;
    ///<summary>
    ///  检索集合的枚举接口。
    ///</summary>
    ///<returns>
    ///  用于集合的枚举器接口。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSharedPropertyGroupManager = class(TDNGenericImport<DNSharedPropertyGroupManagerClass, DNSharedPropertyGroupManager>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9C8154A6-E058-55CC-ADC9-8360CD7271DB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRegistrationException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="msg">
    ///  引发异常时显示到客户端的消息。
    ///</param>
    {class} function init(msg: string): DNRegistrationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.EnterpriseServices.RegistrationException" />
    ///  用指定的错误消息和嵌套的异常类。
    ///</summary>
    ///  <param name="msg">
    ///  引发异常时显示到客户端的消息。
    ///</param>
    ///  <param name="inner">
    ///  嵌套的异常。
    ///</param>
    {class} function init(msg: string; inner: DDN.mscorlib.DNException): DNRegistrationException; overload;

  end;

  ///<summary>
  ///  检测到注册错误时所引发的异常。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationException')]
  DNRegistrationException = interface(DDN.mscorlib.DNSystemException)
  ['{8066FB71-AFA1-343E-8070-44AB4F3F85C9}']
  { getters & setters } 

    function get_ErrorInfo: TArray<DNRegistrationErrorInfo>;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  集 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象中的错误信息 <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象，它包含序列化对象数据。
    ///</param>
    ///  <param name="ctx">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="info" />
    ///  参数是 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; ctx: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个数组 <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  描述注册错误的对象。
    ///</summary>
    ///<returns>
    ///  数组 <see cref="T:System.EnterpriseServices.RegistrationErrorInfo" />
    ///  对象。
    ///</returns>
    property ErrorInfo: TArray<DNRegistrationErrorInfo> read get_ErrorInfo;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRegistrationException = class(TDNGenericImport<DNRegistrationExceptionClass, DNRegistrationException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{B61E51B1-0E6D-55B3-812D-BE8FF882A3DE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServicedComponentException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  引发异常时显示到客户端的消息。
    ///</param>
    {class} function init(message: string): DNServicedComponentException; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ServicedComponentException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  引发异常时显示到客户端的消息。
    ///</param>
    ///  <param name="innerException">
    ///  引发了当前异常的 <see cref="P:System.Exception.InnerException" />
    ///  （如果有）。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNServicedComponentException; overload;

  end;

  ///<summary>
  ///  在已维护的组件中检测到错误时引发的异常。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ServicedComponentException')]
  DNServicedComponentException = interface(DDN.mscorlib.DNSystemException)
  ['{41FE3F34-02A0-34B0-BB22-FC0D20A153A3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNServicedComponentException = class(TDNGenericImport<DNServicedComponentExceptionClass, DNServicedComponentException>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNServicedComponentClass = interface(DDN.mscorlib.DNContextBoundObjectClass)
  ['{6E2464DB-DCA1-5E80-8BA7-A0CF63F77F71}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServicedComponent;

  { static methods } 

    ///<summary>
    ///  确定对象，并删除关联的 COM + 引用。
    ///</summary>
    ///  <param name="sc">
    ///  要释放的对象。
    ///</param>
    {class} procedure DisposeObject(sc: DNServicedComponent);

  end;

  ///<summary>
  ///  表示使用 COM + 服务的所有类的基类。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.ServicedComponent')]
  DNServicedComponent = interface(DDN.mscorlib.DNContextBoundObject)
  ['{5F2E1501-189D-3DE1-81F2-CA8EE7C414C4}']
  { methods } 

    ///<summary>
    ///  释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServicedComponent = class(TDNGenericImport<DNServicedComponentClass, DNServicedComponent>) end;

  //-------------namespace: System.EnterpriseServices.CompensatingResourceManager----------------
  DNCompensatorClass = interface(DNServicedComponentClass)
  ['{A3EF45F7-78D0-51FC-97C3-38D8AC214D88}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Compensator" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCompensator;

  end;

  ///<summary>
  ///  表示所有补偿资源管理器 (CRM) 补偿器基类。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.CompensatingResourceManager.Compensator')]
  DNCompensator = interface(DNServicedComponent)
  ['{AB558A90-77EC-3C9A-A7E3-7B2260890A84}']
  { getters & setters } 

    function get_Clerk: DNClerk;

  { methods } 

    ///<summary>
    ///  通知在事务完成后的在准备阶段和即将传递记录补偿资源管理器 (CRM) 补偿。
    ///</summary>
    procedure BeginPrepare;
    ///<summary>
    ///  在准备阶段中按向前顺序提供一条日志记录。
    ///</summary>
    ///  <param name="rec">
    ///  要转发的日志记录。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果应忘记传递的记录;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function PrepareRecord(rec: DNLogRecord): Boolean;
    ///<summary>
    ///  通知补偿资源管理器 (CRM) 补偿的已准备阶段期间可用的所有日志记录。
    ///</summary>
    ///<returns>
    ///  如果成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function EndPrepare: Boolean;
    ///<summary>
    ///  通知在事务完成后的提交阶段和即将传递记录补偿资源管理器 (CRM) 补偿。
    ///</summary>
    ///  <param name="fRecovery"><see langword="true" />
    ///  若要开始提交阶段;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure BeginCommit(fRecovery: Boolean);
    ///<summary>
    ///  在提交阶段向顺序传递一条日志记录。
    ///</summary>
    ///  <param name="rec">
    ///  要转发的日志记录。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果应忘记传递的记录;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CommitRecord(rec: DNLogRecord): Boolean;
    ///<summary>
    ///  通知补偿资源管理器 (CRM) 补偿传递提交阶段期间可用的所有日志记录。
    ///</summary>
    procedure EndCommit;
    ///<summary>
    ///  通知补偿资源管理器 (CRM) 补偿的事务完成后，中止阶段和即将传递记录。
    ///</summary>
    ///  <param name="fRecovery"><see langword="true" />
    ///  若要开始中止阶段;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure BeginAbort(fRecovery: Boolean);
    ///<summary>
    ///  在中止阶段期间将一条日志记录传递到补偿资源管理器 (CRM) 补偿。
    ///</summary>
    ///  <param name="rec">
    ///  要传递的日志记录。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果应忘记传递的记录;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function AbortRecord(rec: DNLogRecord): Boolean;
    ///<summary>
    ///  通知补偿资源管理器 (CRM) 补偿已收到中止阶段期间可用的所有日志记录。
    ///</summary>
    procedure EndAbort;
    ///<summary>
    ///  释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，表示补偿资源管理器 (CRM) <see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.EnterpriseServices.CompensatingResourceManager.Clerk" />
    ///  对象。
    ///</returns>
    property Clerk: DNClerk read get_Clerk;
  end;

  TDNCompensator = class(TDNGenericImport<DNCompensatorClass, DNCompensator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperTxClass = interface(DNServicedComponentClass)
  ['{9D787985-1A11-54CE-B1C2-87781CFC733E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRegistrationHelperTx;

  end;

  ///<summary>
  ///  由.NET Framework 基础结构用于安装和配置 COM + 目录中的程序集，同时保持新建立的事务。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationHelperTx')]
  DNRegistrationHelperTx = interface(DNServicedComponent)
  ['{C89AC250-E18A-4FC7-ABD5-B8897B6A78A5}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags; sync: DDN.mscorlib.DNObject); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    ///<summary>
    ///  从使用事务性语义的 COM + 应用程序卸载程序集。
    ///</summary>
    ///  <param name="assembly">
    ///  要卸载的程序集文件的名称。
    ///</param>
    ///  <param name="application">
    ///  COM + 应用程序包含在程序集中的组件名称或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sync">
    ///  生成可以等待，直到指定的程序集已卸载的基础结构的一个同步对象。
    ///</param>
    procedure UninstallAssembly(assembly: string; application: string; sync: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  从使用事务性语义的 COM + 应用程序卸载程序集。
    ///</summary>
    ///  <param name="assembly">
    ///  要卸载的程序集文件的名称。
    ///</param>
    ///  <param name="application">
    ///  COM + 应用程序包含在程序集中的组件名称或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="partition">
    ///  分区名称或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="sync">
    ///  生成可以等待，直到指定的程序集已卸载的基础结构的一个同步对象。
    ///</param>
    procedure UninstallAssembly(assembly: string; application: string; partition: string; sync: DDN.mscorlib.DNObject); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig; sync: DDN.mscorlib.DNObject);
    ///<summary>
    ///  获取一个值，该值指示是否使当前上下文让出 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  类实例是事务性的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前上下文让出 <see cref="T:System.EnterpriseServices.RegistrationHelperTx" />
    ///  类实例是事务; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsInTransaction: Boolean;
    ///<summary>
    ///  释放由 <see cref="T:System.EnterpriseServices.ServicedComponent" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelperTx = class(TDNGenericImport<DNRegistrationHelperTxClass, DNRegistrationHelperTx>) end;

  //-------------namespace: System.EnterpriseServices.Internal----------------
  DNAssemblyLocatorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{53633913-CE96-5A90-B2A7-51412C5C948F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.Internal.AssemblyLocator" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNAssemblyLocator;

  end;

  ///<summary>
  ///  定位一个程序集，并返回其模块的信息。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.Internal.AssemblyLocator')]
  DNAssemblyLocator = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{458AA3B5-265A-4B75-BC05-9BEA4630CF18}']
  { methods } 

    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyLocator = class(TDNGenericImport<DNAssemblyLocatorClass, DNAssemblyLocator>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNRegistrationHelperClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{BA9FA7EF-1C46-5229-AB26-A489367FC985}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.EnterpriseServices.RegistrationHelper" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRegistrationHelper;

  end;

  ///<summary>
  ///  安装和配置 COM + 目录中的程序集。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.RegistrationHelper')]
  DNRegistrationHelper = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{89A86E7B-C229-4008-9BAA-2F5C8411D7E0}']
  { methods } 

    procedure InstallAssembly(assembly: string; out application: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssembly(assembly: string; out application: string; partition: string; out tlb: string; installFlags: DNInstallationFlags); overload;
    procedure InstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    ///<summary>
    ///  从给定的应用程序卸载该程序集。
    ///</summary>
    ///  <param name="assembly">
    ///  要卸载的程序集文件的名称。
    ///</param>
    ///  <param name="application">
    ///  如果此名称不是 <see langword="null" />
    ///  , ，它是包含在程序集中的组件的应用程序的名称。
    ///</param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception>
    procedure UninstallAssembly(assembly: string; application: string); overload;
    ///<summary>
    ///  从给定的应用程序卸载该程序集。
    ///</summary>
    ///  <param name="assembly">
    ///  要卸载的程序集文件的名称。
    ///</param>
    ///  <param name="application">
    ///  如果此名称不是 <see langword="null" />
    ///  , ，它是包含在程序集中的组件的应用程序的名称。
    ///</param>
    ///  <param name="partition">
    ///  分区的名称。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.EnterpriseServices.RegistrationException">
    ///  输入程序集没有强名称。
    ///</exception>
    procedure UninstallAssembly(assembly: string; application: string; partition: string); overload;
    procedure UninstallAssemblyFromConfig(out regConfig: DNRegistrationConfig);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegistrationHelper = class(TDNGenericImport<DNRegistrationHelperClass, DNRegistrationHelper>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNBOIDClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1E7A8E3C-A692-5898-AA2C-05E34C5BE0DE}']
  end;

  ///<summary>
  ///  表示与事务关联的工作单元。
  ///  此结构采用 <see cref="T:System.EnterpriseServices.XACTTRANSINFO" />
  ///  。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.BOID')]
  DNBOID = interface(DDN.mscorlib.DNValueType)
  ['{FAABC7E6-B86E-3A2C-8EE9-3A1330C9B0A7}']
  { fields getter & setter } 

   function __fakeFieldGet_rgb: TArray<Byte>;
   procedure __fakeFieldSet_rgb(value: TArray<Byte>);

  { fields } 

    ///<summary>
    ///  表示一个包含数据的数组。
    ///</summary>
   property rgb: TArray<Byte> read __fakeFieldGet_rgb write __fakeFieldSet_rgb;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNBOID = class(TDNGenericImport<DNBOIDClass, DNBOID>) end;

  //-------------namespace: System.EnterpriseServices----------------
  DNXACTTRANSINFOClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{DC26BD62-E5EA-59FC-9B56-5D1F9ADC690B}']
  end;

  ///<summary>
  ///  表示中使用的结构 <see cref="T:System.EnterpriseServices.ITransaction" />
  ///  接口。
  ///</summary>
  [DNTypeName('System.EnterpriseServices.XACTTRANSINFO')]
  DNXACTTRANSINFO = interface(DDN.mscorlib.DNValueType)
  ['{39EAA232-3312-3250-B373-E65B0A5521CF}']
  { fields getter & setter } 

   function __fakeFieldGet_uow: DNBOID;
   procedure __fakeFieldSet_uow(value: DNBOID);
   function __fakeFieldGet_isoLevel: Int32;
   procedure __fakeFieldSet_isoLevel(value: Int32);
   function __fakeFieldGet_isoFlags: Int32;
   procedure __fakeFieldSet_isoFlags(value: Int32);
   function __fakeFieldGet_grfTCSupported: Int32;
   procedure __fakeFieldSet_grfTCSupported(value: Int32);
   function __fakeFieldGet_grfRMSupported: Int32;
   procedure __fakeFieldSet_grfRMSupported(value: Int32);
   function __fakeFieldGet_grfTCSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfTCSupportedRetaining(value: Int32);
   function __fakeFieldGet_grfRMSupportedRetaining: Int32;
   procedure __fakeFieldSet_grfRMSupportedRetaining(value: Int32);

  { fields } 

    ///<summary>
    ///  表示与此事务关联的工作单元。
    ///</summary>
   property uow: DNBOID read __fakeFieldGet_uow write __fakeFieldSet_uow;
    ///<summary>
    ///  表示与此事务对象相关联的隔离级别。
    ///  ISOLATIONLEVEL_UNSPECIFIED 指示没有隔离级别已指定。
    ///</summary>
   property isoLevel: Int32 read __fakeFieldGet_isoLevel write __fakeFieldSet_isoLevel;
    ///<summary>
    ///  指定零。
    ///  此字段为保留。
    ///</summary>
   property isoFlags: Int32 read __fakeFieldGet_isoFlags write __fakeFieldSet_isoFlags;
    ///<summary>
    ///  表示一个位屏蔽，它指示 <see langword="grfTC" />
    ///  此事务实现支持的标志。
    ///</summary>
   property grfTCSupported: Int32 read __fakeFieldGet_grfTCSupported write __fakeFieldSet_grfTCSupported;
    ///<summary>
    ///  指定零。
    ///  此字段为保留。
    ///</summary>
   property grfRMSupported: Int32 read __fakeFieldGet_grfRMSupported write __fakeFieldSet_grfRMSupported;
    ///<summary>
    ///  指定零。
    ///  此字段为保留。
    ///</summary>
   property grfTCSupportedRetaining: Int32 read __fakeFieldGet_grfTCSupportedRetaining write __fakeFieldSet_grfTCSupportedRetaining;
    ///<summary>
    ///  指定零。
    ///  此字段为保留。
    ///</summary>
   property grfRMSupportedRetaining: Int32 read __fakeFieldGet_grfRMSupportedRetaining write __fakeFieldSet_grfRMSupportedRetaining;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNXACTTRANSINFO = class(TDNGenericImport<DNXACTTRANSINFOClass, DNXACTTRANSINFO>) end;


implementation


initialization
  LoadAssemblyModule('System.EnterpriseServices.dll', True);

finalization

end.
