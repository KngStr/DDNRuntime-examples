//----------------------------------------------------------------------------
//  WindowsBase.dll: WindowsBase, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.WindowsBase
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.WindowsBase;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.Xaml,
  DDN.System.Security;

type

{ enums }

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  指定新项的占位符在集合中的显示的位置。
  ///</summary>
  [DNTypeName('System.ComponentModel.NewItemPlaceholderPosition')]
  DNNewItemPlaceholderPosition = type Integer;
  DNNewItemPlaceholderPositionHelper = record helper for DNNewItemPlaceholderPosition
  public const
    ///<summary>
    ///  集合不使用新项占位符。
    ///  所添加项的位置取决于基础集合。
    ///  通常情况下，它们将添加到集合的末尾。
    ///</summary>
    None = 0;
    ///<summary>
    ///  新项的占位符出现在集合的开头。
    ///  新项位于集合开头的新项占位符之后。
    ///</summary>
    AtBeginning = 1;
    ///<summary>
    ///  新项的占位符出现在集合的末尾。
    ///  在集合末尾的新项占位符之前添加新项。
    ///</summary>
    AtEnd = 2;
  end;


  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />
  ///  方法。
  ///  此枚举用于指定 <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" />
  ///  属性的值。
  ///</summary>
  [DNTypeName('System.ComponentModel.PropertyFilterOptions')]
  DNPropertyFilterOptions = type Integer;
  DNPropertyFilterOptionsHelper = record helper for DNPropertyFilterOptions
  public const
    ///<summary>
    ///  不返回任何属性
    ///</summary>
    None = 0;
    ///<summary>
    ///  仅返回在对象的给定当前上下文中无效的属性。
    ///  请参阅“备注”。
    ///</summary>
    Invalid = 1;
    ///<summary>
    ///  仅返回当前设置了本地值的属性。
    ///</summary>
    SetValues = 2;
    ///<summary>
    ///  仅返回未设置本地值或者未在外部表达式存储（如绑定或延迟资源）中设置属性的属性。
    ///</summary>
    UnsetValues = 4;
    ///<summary>
    ///  返回在当前范围内的对象上有效的任何属性。
    ///  请参阅“备注”。
    ///</summary>
    Valid = 8;
    ///<summary>
    ///  返回所有属性。
    ///</summary>
    All = 15;
  end;


  //-------------namespace: System.Diagnostics----------------
  ///<summary>
  ///  有关特定对象描述跟踪的详细级别。
  ///</summary>
  [DNTypeName('System.Diagnostics.PresentationTraceLevel')]
  DNPresentationTraceLevel = type Integer;
  DNPresentationTraceLevelHelper = record helper for DNPresentationTraceLevel
  public const
    ///<summary>
    ///  跟踪没有可用的附加信息。
    ///</summary>
    None = 0;
    ///<summary>
    ///  跟踪一些附加信息。
    ///</summary>
    Low = 1;
    ///<summary>
    ///  跟踪中等数量的附加信息。
    ///</summary>
    Medium = 2;
    ///<summary>
    ///  跟踪所有附加信息。
    ///</summary>
    High = 3;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定一个位置，其中存储了签名时所用的 X.509 证书。
  ///</summary>
  [DNTypeName('System.IO.Packaging.CertificateEmbeddingOption')]
  DNCertificateEmbeddingOption = type Integer;
  DNCertificateEmbeddingOptionHelper = record helper for DNCertificateEmbeddingOption
  public const
    ///<summary>
    ///  该证书嵌入在自己的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  中。
    ///</summary>
    InCertificatePart = 0;
    ///<summary>
    ///  该证书嵌入到为要添加的签名创建的 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" />
    ///  中。
    ///</summary>
    InSignaturePart = 1;
    ///<summary>
    ///  包中未嵌入证书。
    ///</summary>
    NotEmbedded = 2;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定存储中的内容的压缩级别 <see cref="T:System.IO.Packaging.PackagePart" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.CompressionOption')]
  DNCompressionOption = type Integer;
  DNCompressionOptionHelper = record helper for DNCompressionOption
  public const
    ///<summary>
    ///  压缩进行了优化大小和性能之间取得平衡。
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  压缩大小进行了优化。
    ///</summary>
    Maximum = 1;
    ///<summary>
    ///  压缩进行了优化性能。
    ///</summary>
    Fast = 2;
    ///<summary>
    ///  为了获得高性能优化了压缩。
    ///</summary>
    SuperFast = 3;
    ///<summary>
    ///  压缩处于关闭状态。
    ///</summary>
    NotCompressed = -1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定加密选项中的部件 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.EncryptionOption')]
  DNEncryptionOption = type Integer;
  DNEncryptionOptionHelper = record helper for DNEncryptionOption
  public const
    ///<summary>
    ///  不是加密。
    ///</summary>
    None = 0;
    ///<summary>
    ///  通过权限管理支持的加密。
    ///</summary>
    RightsManagement = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定用于匹配，并返回的选择条件类型 <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  通过选择 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipSelectorType')]
  DNPackageRelationshipSelectorType = type Integer;
  DNPackageRelationshipSelectorTypeHelper = record helper for DNPackageRelationshipSelectorType
  public const
    ///<summary><see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  选择是通过 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  。
    ///</summary>
    Id = 0;
    ///<summary><see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  选择是通过 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  。
    ///</summary>
    Type_ = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定是否目标的 <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  是内部或外部 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.TargetMode')]
  DNTargetMode = type Integer;
  DNTargetModeHelper = record helper for DNTargetMode
  public const
    ///<summary>
    ///  关系引用在包内的部件。
    ///</summary>
    Internal = 0;
    ///<summary>
    ///  关系引用是对该包的外部的资源。
    ///</summary>
    External_ = 1;
  end;


  //-------------namespace: System.IO.Packaging----------------
  ///<summary>
  ///  指定证书或签名验证的结果。
  ///</summary>
  [DNTypeName('System.IO.Packaging.VerifyResult')]
  DNVerifyResult = type Integer;
  DNVerifyResultHelper = record helper for DNVerifyResult
  public const
    ///<summary>
    ///  验证成功。
    ///</summary>
    Success = 0;
    ///<summary>
    ///  该签名无效。
    ///</summary>
    InvalidSignature = 1;
    ///<summary>
    ///  X.509 证书不可用于验证签名。
    ///</summary>
    CertificateRequired = 2;
    ///<summary>
    ///  X.509 证书无效。
    ///</summary>
    InvalidCertificate = 3;
    ///<summary>
    ///  找不到签名的引用关系。
    ///</summary>
    ReferenceNotFound = 4;
    ///<summary>
    ///  指定的包或部件不具有签名。
    ///</summary>
    NotSigned = 5;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>
  ///  指定音频的权限级别。
  ///</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionAudio')]
  DNMediaPermissionAudio = type Integer;
  DNMediaPermissionAudioHelper = record helper for DNMediaPermissionAudio
  public const
    ///<summary>
    ///  拒绝所有音频播放的权限。
    ///</summary>
    NoAudio = 0;
    ///<summary>
    ///  只允许音频播放的文件位于应用程序的源站点的权限。
    ///</summary>
    SiteOfOriginAudio = 1;
    ///<summary>
    ///  允许对安全的权限有限音频播放，其中包括拒绝对该图像文件流访问。
    ///</summary>
    SafeAudio = 2;
    ///<summary>
    ///  允许音频播放不受限制的权限。
    ///</summary>
    AllAudio = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>
  ///  指定图像的权限级别。
  ///</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionImage')]
  DNMediaPermissionImage = type Integer;
  DNMediaPermissionImageHelper = record helper for DNMediaPermissionImage
  public const
    ///<summary>
    ///  拒绝要显示的所有映像的权限。
    ///</summary>
    NoImage = 0;
    ///<summary>
    ///  只允许显示的图像位于应用程序的源站点的权限。
    ///</summary>
    SiteOfOriginImage = 1;
    ///<summary>
    ///  允许对安全的权限有限的图像显示，其中包括拒绝对该图像文件流访问。
    ///</summary>
    SafeImage = 2;
    ///<summary>
    ///  允许不受限制的映像显示的权限。
    ///</summary>
    AllImage = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>
  ///  指定视频的权限级别。
  ///</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionVideo')]
  DNMediaPermissionVideo = type Integer;
  DNMediaPermissionVideoHelper = record helper for DNMediaPermissionVideo
  public const
    ///<summary>
    ///  拒绝所有视频播放的权限。
    ///</summary>
    NoVideo = 0;
    ///<summary>
    ///  只允许视频播放的文件位于应用程序的源站点的权限。
    ///</summary>
    SiteOfOriginVideo = 1;
    ///<summary>
    ///  允许对安全的权限有限视频播放，其中包括拒绝对该图像文件流访问。
    ///</summary>
    SafeVideo = 2;
    ///<summary>
    ///  允许视频播放不受限制的权限。
    ///</summary>
    AllVideo = 3;
  end;


  //-------------namespace: System.Security.Permissions----------------
  ///<summary>
  ///  指定 Web 浏览器的权限级别。
  ///</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermissionLevel')]
  DNWebBrowserPermissionLevel = type Integer;
  DNWebBrowserPermissionLevelHelper = record helper for DNWebBrowserPermissionLevel
  public const
    ///<summary>
    ///  不能帧导航至 HTML Web 浏览器。
    ///</summary>
    None = 0;
    ///<summary>
    ///  Web 浏览器可以安全地定位帧于 HTML，但有几个限制条件。
    ///</summary>
    Safe = 1;
    ///<summary>
    ///  Web 浏览器，可以通过浏览不受限制。
    ///</summary>
    Unrestricted = 2;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>
  ///  指定权限管理身份验证的方法。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.AuthenticationType')]
  DNAuthenticationType = type Integer;
  DNAuthenticationTypeHelper = record helper for DNAuthenticationType
  public const
    ///<summary>
    ///  公司域环境中的 Windows 身份验证。
    ///</summary>
    Windows = 0;
    ///<summary>
    ///  Windows Live ID 身份验证。
    ///</summary>
    Passport = 1;
    ///<summary>
    ///  Windows 身份验证或 Windows Live ID 身份验证。
    ///</summary>
    WindowsPassport = 2;
    ///<summary>
    ///  对所有请求用户执行隐式身份验证。
    ///</summary>
    Internal = 3;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>
  ///  指定可授予用户访问权限管理文档中内容的权限。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.ContentRight')]
  DNContentRight = type Integer;
  DNContentRightHelper = record helper for DNContentRight
  public const
    ///<summary>
    ///  用户可以查看受保护的内容。
    ///</summary>
    View = 0;
    ///<summary>
    ///  用户可以编辑和加密受保护的内容。
    ///</summary>
    Edit = 1;
    ///<summary>
    ///  用户可以打印受保护的内容。
    ///</summary>
    Print = 2;
    ///<summary>
    ///  用户可以解压缩（复制和粘贴）受保护的内容。
    ///</summary>
    Extract = 3;
    ///<summary>
    ///  用户可以控制对受保护内容的编程访问。
    ///</summary>
    ObjectModel = 4;
    ///<summary>
    ///  用户是内容所有者。
    ///  内容所有者可以对受保护的内容进行编辑和加密，并可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  进行解密。
    ///</summary>
    Owner = 5;
    ///<summary>
    ///  用户可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  中指定的权限进行解密并查看这些权限。
    ///</summary>
    ViewRightsData = 6;
    ///<summary>
    ///  用户可以将受保护的内容转发给其他用户。
    ///</summary>
    Forward_ = 7;
    ///<summary>
    ///  用户可以答复受保护内容的发送方。
    ///</summary>
    Reply = 8;
    ///<summary>
    ///  用户可以“全部答复”受保护内容的接收方。
    ///</summary>
    ReplyAll = 9;
    ///<summary>
    ///  用户可以对受保护的内容进行数字签名。
    ///</summary>
    Sign = 10;
    ///<summary>
    ///  用户可以编辑包含受保护内容的文档。
    ///</summary>
    DocumentEdit = 11;
    ///<summary>
    ///  用户可以导出受保护的内容。
    ///</summary>
    Export_ = 12;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>
  ///  指定执行权限管理操作时可能出现的错误条件。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.RightsManagementFailureCode')]
  DNRightsManagementFailureCode = type Integer;
  DNRightsManagementFailureCodeHelper = record helper for DNRightsManagementFailureCode
  public const
    ///<summary>
    ///  已成功完成操作。
    ///</summary>
    Success = 0;
    ///<summary>
    ///  操作违反权限管理清单策略。
    ///</summary>
    ManifestPolicyViolation = -2147183860;
    ///<summary>
    ///  其中一个证书的许可证结构无效。
    ///</summary>
    InvalidLicense = -2147168512;
    ///<summary>
    ///  创建绑定许可证时，指定发行许可证，而不是最终用户许可证。
    ///</summary>
    InfoNotInLicense = -2147168511;
    ///<summary>
    ///  无法验证权限管理签名的数字证书。
    ///  （已签名证书可能已遭到篡改。）
    ///</summary>
    InvalidLicenseSignature = -2147168510;
    ///<summary>
    ///  不允许加密。
    ///</summary>
    EncryptionNotPermitted = -2147168508;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    RightNotGranted = -2147168507;
    ///<summary>
    ///  权限管理版本不正确。
    ///</summary>
    InvalidVersion = -2147168506;
    ///<summary>
    ///  指定的编码类型无效。
    ///</summary>
    InvalidEncodingType = -2147168505;
    ///<summary>
    ///  指定的数值无效。
    ///</summary>
    InvalidNumericalValue = -2147168504;
    ///<summary>
    ///  指定的算法类型无效。
    ///</summary>
    InvalidAlgorithmType = -2147168503;
    ///<summary>
    ///  无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  。
    ///</summary>
    EnvironmentNotLoaded = -2147168502;
    ///<summary>
    ///  无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  。
    ///</summary>
    EnvironmentCannotLoad = -2147168501;
    ///<summary>
    ///  已创建太多 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  实例。
    ///</summary>
    TooManyLoadedEnvironments = -2147168500;
    ///<summary>
    ///  传递的对象类型与此操作不兼容。
    ///</summary>
    IncompatibleObjects = -2147168498;
    ///<summary>
    ///  库操作失败。
    ///</summary>
    LibraryFail = -2147168497;
    ///<summary>
    ///  无法启用指定主体
    ///</summary>
    EnablingPrincipalFailure = -2147168496;
    ///<summary>
    ///  丢失了某些信息。
    ///</summary>
    InfoNotPresent = -2147168495;
    ///<summary>
    ///  传递了一个无效常量。
    ///</summary>
    BadGetInfoQuery = -2147168494;
    ///<summary>
    ///  在键/值对中指定的键类型不受支持。
    ///</summary>
    KeyTypeUnsupported = -2147168493;
    ///<summary>
    ///  请求的加密操作不受支持。
    ///  例如，传递 RMS 加密对象用于解密。
    ///</summary>
    CryptoOperationUnsupported = -2147168492;
    ///<summary>
    ///  检测到时钟回滚。
    ///  无法访问受保护的内容。
    ///</summary>
    ClockRollbackDetected = -2147168491;
    ///<summary>
    ///  请求的属性不存在实例。
    ///</summary>
    QueryReportsNoResults = -2147168490;
    ///<summary>
    ///  发生了未指定的错误。
    ///  在调试模式下运行应用程序时也会引发。
    ///</summary>
    UnexpectedException = -2147168489;
    ///<summary>
    ///  受保护内容的定义时间段已到期；不再允许访问。
    ///</summary>
    BindValidityTimeViolated = -2147168488;
    ///<summary>
    ///  权限管理的证书链已中断。
    ///</summary>
    BrokenCertChain = -2147168487;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindPolicyViolation = -2147168485;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindRevokedLicense = -2147168484;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindRevokedIssuer = -2147168483;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindRevokedPrincipal = -2147168482;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindRevokedResource = -2147168481;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    BindRevokedModule = -2147168480;
    ///<summary>
    ///  指定的资源不包含在许可证的任何工作节点中。
    ///</summary>
    BindContentNotInEndUseLicense = -2147168479;
    ///<summary>
    ///  访问条件与递交给该绑定的启用主体不匹配。
    ///</summary>
    BindAccessPrincipalNotEnabling = -2147168478;
    ///<summary>
    ///  当前用户不满足在最终用户许可证 (EUL) 中所定义的条件。
    ///</summary>
    BindAccessUnsatisfied = -2147168477;
    ///<summary>
    ///  启用主体与最终用户许可证 (EUL) 的颁布主体不匹配。
    ///</summary>
    BindIndicatedPrincipalMissing = -2147168476;
    ///<summary>
    ///  当前计算机未在权限管理组标识中定义。
    ///</summary>
    BindMachineNotFoundInGroupIdentity = -2147168475;
    ///<summary>
    ///  不支持指定的库插件。
    ///</summary>
    LibraryUnsupportedPlugIn = -2147168474;
    ///<summary>
    ///  该许可证要求必须获取新的吊销列表。
    ///</summary>
    BindRevocationListStale = -2147168473;
    ///<summary>
    ///  当前用户没有权限访问受保护的内容。
    ///</summary>
    BindNoApplicableRevocationList = -2147168472;
    ///<summary>
    ///  环境或启用主体句柄无效。
    ///</summary>
    InvalidHandle = -2147168468;
    ///<summary>
    ///  受保护内容的定义时间段已到期；不再允许访问。
    ///</summary>
    BindIntervalTimeViolated = -2147168465;
    ///<summary>
    ///  指定的权限组不包含在最终用户许可证 (EUL) 中。
    ///</summary>
    BindNoSatisfiedRightsGroup = -2147168464;
    ///<summary>
    ///  最终用户许可证 (EUL) 不包含工作节点。
    ///</summary>
    BindSpecifiedWorkMissing = -2147168463;
    ///<summary>
    ///  指定索引处不存在许可证或证书。
    ///</summary>
    NoMoreData = -2147168461;
    ///<summary>
    ///  无法从权限管理服务器获取最终用户许可证 (EUL)。
    ///</summary>
    LicenseAcquisitionFailed = -2147168460;
    ///<summary>
    ///  许可证中的内容 ID 与许可证存储会话的内容 ID 不匹配
    ///</summary>
    IdMismatch = -2147168459;
    ///<summary>
    ///  证书数量已超过允许的最大数量。
    ///</summary>
    TooManyCertificates = -2147168458;
    ///<summary>
    ///  受保护的内容已损坏。
    ///</summary>
    NoDistributionPointUrlFound = -2147168457;
    ///<summary>
    ///  请求的操作已在进行中。
    ///</summary>
    AlreadyInProgress = -2147168456;
    ///<summary>
    ///  未向客户端会话指定用户名
    ///</summary>
    GroupIdentityNotSet = -2147168455;
    ///<summary>
    ///  未找到指定许可证。
    ///</summary>
    RecordNotFound = -2147168454;
    ///<summary>
    ///  权限管理无法连接到为许可证服务器指定的 URI。
    ///</summary>
    NoConnect = -2147168453;
    ///<summary>
    ///  所需许可证不可用。
    ///</summary>
    NoLicense = -2147168452;
    ///<summary>
    ///  必须先激活计算机，才能激活用户。
    ///</summary>
    NeedsMachineActivation = -2147168451;
    ///<summary>
    ///  未激活用户，或者未提交任何权限帐户证书 (RAC)，并且未在许可证存储中找到匹配此会话所关联许可证的证书。
    ///</summary>
    NeedsGroupIdentityActivation = -2147168450;
    ///<summary>
    ///  许可证激活失败；未正确配置权限管理服务。
    ///</summary>
    ActivationFailed = -2147168448;
    ///<summary>
    ///  已取消异步操作，或出现不可恢复的错误。
    ///</summary>
    Aborted = -2147168447;
    ///<summary>
    ///  已达到最终用户许可证 (EUL) 的许可证服务器的最大配额。
    ///</summary>
    OutOfQuota = -2147168446;
    ///<summary>
    ///  Internet 请求返回可能的身份验证错误（HTTP 错误 401）。
    ///  或者，当前用户在无提示用户激活尝试中没有有效的域凭据。
    ///  或者，无提示用户激活中的认证服务器不在本地 Intranet 或受信任的站点区域中。
    ///</summary>
    AuthenticationFailed = -2147168445;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    ServerError = -2147168444;
    ///<summary>
    ///  安装操作失败。
    ///</summary>
    InstallationFailed = -2147168443;
    ///<summary>
    ///  在计算机激活尝试中使用的硬件 ID (HID) 的格式不正确。
    ///  未正确配置权限管理服务。
    ///</summary>
    HidCorrupted = -2147168442;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    InvalidServerResponse = -2147168441;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    ServiceNotFound = -2147168440;
    ///<summary>
    ///  如果为计算机激活或权限帐户证书发出请求，接收 <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" />
    ///  则表示该应用程序应将 <see langword="null" />
    ///  传递到 ActServInfo 参数
    ///</summary>
    UseDefault = -2147168439;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    ServerNotFound = -2147168438;
    ///<summary>
    ///  RMS 服务器的电子邮件地址验证失败。
    ///</summary>
    InvalidEmail = -2147168437;
    ///<summary>
    ///  受保护内容的定义时间段已到期；不再允许访问。
    ///</summary>
    ValidityTimeViolation = -2147168436;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    OutdatedModule = -2147168435;
    ///<summary>
    ///  请求删除的项目不存在。
    ///</summary>
    NotSet = -2147168434;
    ///<summary>
    ///  无法设置指定元数据。
    ///</summary>
    MetadataNotSet = -2147168433;
    ///<summary>
    ///  尚未设置证书或许可证吊销信息。
    ///</summary>
    RevocationInfoNotSet = -2147168432;
    ///<summary>
    ///  指定的时间信息无效。
    ///</summary>
    InvalidTimeInfo = -2147168431;
    ///<summary>
    ///  使用权限管理发布内容时，未指定请求的权限。
    ///</summary>
    RightNotSet = -2147168430;
    ///<summary>
    ///  当前用户凭据对于获取许可证无效。
    ///</summary>
    LicenseBindingToWindowsIdentityFailed = -2147168429;
    ///<summary>
    ///  权限管理服务模板包含一个或多个错误。
    ///</summary>
    InvalidIssuanceLicenseTemplate = -2147168428;
    ///<summary>
    ///  在键/值对中指定的键长度无效。
    ///</summary>
    InvalidKeyLength = -2147168427;
    ///<summary>
    ///  在发行许可证模板中定义的授权时间段已到期；不再允许访问。
    ///</summary>
    ExpiredOfficialIssuanceLicenseTemplate = -2147168425;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    InvalidClientLicensorCertificate = -2147168424;
    ///<summary>
    ///  在计算机激活尝试中使用的硬件 ID (HID) 无效。
    ///  未正确配置权限管理服务。
    ///</summary>
    HidInvalid = -2147168423;
    ///<summary>
    ///  无法验证用户的电子邮件地址。
    ///</summary>
    EmailNotVerified = -2147168422;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    ServiceMoved = -2147168421;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    ServiceGone = -2147168420;
    ///<summary>
    ///  未在 Windows 身份验证下证书的 Active Directory (AD) 中找到当前用户。
    ///</summary>
    AdEntryNotFound = -2147168419;
    ///<summary>
    ///  权限管理的内容已损坏。
    ///</summary>
    NotAChain = -2147168418;
    ///<summary>
    ///  权限管理服务器不允许当前用户的临时证书。
    ///</summary>
    RequestDenied = -2147168417;
    ///<summary>
    ///  由于检测到调试器，因此无法使用受限权限打开或发布内容。
    ///</summary>
    DebuggerDetected = -2147168416;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    InvalidLockboxType = -2147168400;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    InvalidLockboxPath = -2147168399;
    ///<summary>
    ///  指定的注册表路径无效。
    ///</summary>
    InvalidRegistryPath = -2147168398;
    ///<summary>
    ///  未正确配置权限管理服务。
    ///</summary>
    NoAesCryptoProvider = -2147168397;
    ///<summary>
    ///  已设置指定的选项。
    ///</summary>
    GlobalOptionAlreadySet = -2147168396;
    ///<summary>
    ///  该文档不包含所有者许可证。
    ///</summary>
    OwnerLicenseNotFound = -2147168395;
  end;


  //-------------namespace: System.Security.RightsManagement----------------
  ///<summary>
  ///  指定的用户权限帐户证书，以请求激活权限管理的类型。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.UserActivationMode')]
  DNUserActivationMode = type Integer;
  DNUserActivationModeHelper = record helper for DNUserActivationMode
  public const
    ///<summary>
    ///  永久的权限帐户证书。
    ///</summary>
    Permanent = 0;
    ///<summary>
    ///  临时权限帐户证书。
    ///</summary>
    Temporary = 1;
  end;


  //-------------namespace: System.Windows----------------
  ///<summary>
  ///  提供一组值，用于描述调度程序如何响应请求处理时遇到的失败。
  ///</summary>
  [DNTypeName('System.Windows.BaseCompatibilityPreferences+HandleDispatcherRequestProcessingFailureOptions')]
  DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions = type Integer;
  DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptionsHelper = record helper for DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions
  public const
    ///<summary>
    ///  失败后继续。
    ///  这是默认值。
    ///  它定义 .NET Framework 4.7.1 之前的 Windows Presentation Foundation 调度程序的行为。
    ///  如果选择此选项，调度程序可能无响应。
    ///</summary>
    Continue_ = 0;
    ///<summary>
    ///  引发异常。
    ///  此选项可让应用程序开发人员立即注意到问题。
    ///</summary>
    Throw = 1;
    ///<summary>
    ///  重置调度程序的状态，在下次需要请求时尝试另一请求。
    ///  虽然此选项有时可以“修复”无响应，但它不会使用正常处理时间，而这个时间可能很重要。
    ///  选择此选项可能导致意外的行为。
    ///</summary>
    Reset = 2;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>
  ///  指定在方向 用户界面 (UI) 在其中尝试所需的焦点更改请求。
  ///  方向基于或者 tab 键顺序根据布局中的相对方向。
  ///</summary>
  [DNTypeName('System.Windows.Input.FocusNavigationDirection')]
  DNFocusNavigationDirection = type Integer;
  DNFocusNavigationDirectionHelper = record helper for DNFocusNavigationDirection
  public const
    ///<summary>
    ///  将焦点移至 tab 键顺序中下一步焦点的元素。
    ///  不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  。
    ///</summary>
    Next = 0;
    ///<summary>
    ///  将焦点移至 tab 键顺序以前焦点的元素。
    ///  不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  。
    ///</summary>
    Previous = 1;
    ///<summary>
    ///  将焦点移至 tab 键顺序中第一个焦点的元素。
    ///  不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  。
    ///</summary>
    First = 2;
    ///<summary>
    ///  将焦点移至 tab 键顺序中最后一个焦点的元素。
    ///  不支持 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />
    ///  。
    ///</summary>
    Last = 3;
    ///<summary>
    ///  将焦点移至当前具有焦点的元素的左侧的另一个焦点的元素。
    ///</summary>
    Left = 4;
    ///<summary>
    ///  将焦点移至当前具有焦点的元素右侧的另一个焦点的元素。
    ///</summary>
    Right = 5;
    ///<summary>
    ///  将焦点移到另一个可获得焦点元素向上从当前具有焦点的元素。
    ///</summary>
    Up = 6;
    ///<summary>
    ///  将焦点移到另一个设定焦点的元素可以向下从当前具有焦点的元素。
    ///</summary>
    Down = 7;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>
  ///  指定键盘上可能的键值。
  ///</summary>
  [DNTypeName('System.Windows.Input.Key')]
  DNKey = type Integer;
  DNKeyHelper = record helper for DNKey
  public const
    ///<summary>
    ///  不按任何键。
    ///</summary>
    None = 0;
    ///<summary>
    ///  Cancel 键。
    ///</summary>
    Cancel = 1;
    ///<summary>
    ///  Backspace 键。
    ///</summary>
    Back = 2;
    ///<summary>
    ///  Tab 键。
    ///</summary>
    Tab = 3;
    ///<summary>
    ///  Linefeed 键。
    ///</summary>
    LineFeed = 4;
    ///<summary>
    ///  Clear 键。
    ///</summary>
    Clear = 5;
    ///<summary>
    ///  Return 键。
    ///</summary>
    Return = 6;
    ///<summary>
    ///  Enter 键。
    ///</summary>
    Enter = 6;
    ///<summary>
    ///  Pause 键。
    ///</summary>
    Pause = 7;
    ///<summary>
    ///  Caps Lock 键。
    ///</summary>
    Capital = 8;
    ///<summary>
    ///  Caps Lock 键。
    ///</summary>
    CapsLock = 8;
    ///<summary>
    ///  IME Kana 模式键。
    ///</summary>
    KanaMode = 9;
    ///<summary>
    ///  IME Hangul 模式键。
    ///</summary>
    HangulMode = 9;
    ///<summary>
    ///  IME Junja 模式键。
    ///</summary>
    JunjaMode = 10;
    ///<summary>
    ///  IME Final 模式键。
    ///</summary>
    FinalMode = 11;
    ///<summary>
    ///  IME Hanja 模式键。
    ///</summary>
    HanjaMode = 12;
    ///<summary>
    ///  IME Kanji 模式键。
    ///</summary>
    KanjiMode = 12;
    ///<summary>
    ///  ESC 键。
    ///</summary>
    Escape = 13;
    ///<summary>
    ///  IME Convert 键。
    ///</summary>
    ImeConvert = 14;
    ///<summary>
    ///  IME NonConvert 键。
    ///</summary>
    ImeNonConvert = 15;
    ///<summary>
    ///  IME Accept 键。
    ///</summary>
    ImeAccept = 16;
    ///<summary>
    ///  IME 模式更改请求。
    ///</summary>
    ImeModeChange = 17;
    ///<summary>
    ///  Spacebar 键。
    ///</summary>
    Space = 18;
    ///<summary>
    ///  Page Up 键。
    ///</summary>
    Prior = 19;
    ///<summary>
    ///  Page Up 键。
    ///</summary>
    PageUp = 19;
    ///<summary>
    ///  Page Down 键。
    ///</summary>
    Next = 20;
    ///<summary>
    ///  Page Down 键。
    ///</summary>
    PageDown = 20;
    ///<summary>
    ///  End 键。
    ///</summary>
    End_ = 21;
    ///<summary>
    ///  Home 键。
    ///</summary>
    Home = 22;
    ///<summary>
    ///  Left Arrow 键。
    ///</summary>
    Left = 23;
    ///<summary>
    ///  Up Arrow 键。
    ///</summary>
    Up = 24;
    ///<summary>
    ///  Right Arrow 键。
    ///</summary>
    Right = 25;
    ///<summary>
    ///  Down Arrow 键。
    ///</summary>
    Down = 26;
    ///<summary>
    ///  Select 键。
    ///</summary>
    Select = 27;
    ///<summary>
    ///  Print 键。
    ///</summary>
    Print = 28;
    ///<summary>
    ///  Execute 键。
    ///</summary>
    Execute = 29;
    ///<summary>
    ///  Print Screen 键。
    ///</summary>
    Snapshot = 30;
    ///<summary>
    ///  Print Screen 键。
    ///</summary>
    PrintScreen = 30;
    ///<summary>
    ///  Insert 键。
    ///</summary>
    Insert = 31;
    ///<summary>
    ///  Delete 键。
    ///</summary>
    Delete = 32;
    ///<summary>
    ///  Help 键。
    ///</summary>
    Help = 33;
    ///<summary>
    ///  0 （零）键。
    ///</summary>
    D0 = 34;
    ///<summary>
    ///  1 （一）键。
    ///</summary>
    D1 = 35;
    ///<summary>
    ///  2 键。
    ///</summary>
    D2 = 36;
    ///<summary>
    ///  3 键。
    ///</summary>
    D3 = 37;
    ///<summary>
    ///  4 键。
    ///</summary>
    D4 = 38;
    ///<summary>
    ///  5 键。
    ///</summary>
    D5 = 39;
    ///<summary>
    ///  6 键。
    ///</summary>
    D6 = 40;
    ///<summary>
    ///  7 键。
    ///</summary>
    D7 = 41;
    ///<summary>
    ///  8 键。
    ///</summary>
    D8 = 42;
    ///<summary>
    ///  9 键。
    ///</summary>
    D9 = 43;
    ///<summary>
    ///  A 键。
    ///</summary>
    A = 44;
    ///<summary>
    ///  B 键。
    ///</summary>
    B = 45;
    ///<summary>
    ///  C 键。
    ///</summary>
    C = 46;
    ///<summary>
    ///  D 键。
    ///</summary>
    D = 47;
    ///<summary>
    ///  E 键。
    ///</summary>
    E = 48;
    ///<summary>
    ///  F 键。
    ///</summary>
    F = 49;
    ///<summary>
    ///  G 键。
    ///</summary>
    G = 50;
    ///<summary>
    ///  H 键。
    ///</summary>
    H = 51;
    ///<summary>
    ///  I 键。
    ///</summary>
    I = 52;
    ///<summary>
    ///  J 键。
    ///</summary>
    J = 53;
    ///<summary>
    ///  K 键。
    ///</summary>
    K = 54;
    ///<summary>
    ///  L 键。
    ///</summary>
    L = 55;
    ///<summary>
    ///  M 键。
    ///</summary>
    M = 56;
    ///<summary>
    ///  N 键。
    ///</summary>
    N = 57;
    ///<summary>
    ///  O 键。
    ///</summary>
    O = 58;
    ///<summary>
    ///  P 键。
    ///</summary>
    P = 59;
    ///<summary>
    ///  Q 键。
    ///</summary>
    Q = 60;
    ///<summary>
    ///  R 键。
    ///</summary>
    R = 61;
    ///<summary>
    ///  S 键。
    ///</summary>
    S = 62;
    ///<summary>
    ///  T 键。
    ///</summary>
    T = 63;
    ///<summary>
    ///  U 键。
    ///</summary>
    U = 64;
    ///<summary>
    ///  V 键。
    ///</summary>
    V = 65;
    ///<summary>
    ///  W 键。
    ///</summary>
    W = 66;
    ///<summary>
    ///  X 键。
    ///</summary>
    X = 67;
    ///<summary>
    ///  Y 键。
    ///</summary>
    Y = 68;
    ///<summary>
    ///  Z 键。
    ///</summary>
    Z = 69;
    ///<summary>
    ///  左 Windows 徽标键 (Microsoft Natural Keyboard)。
    ///</summary>
    LWin = 70;
    ///<summary>
    ///  右 Windows 徽标键 (Microsoft Natural Keyboard)。
    ///</summary>
    RWin = 71;
    ///<summary>
    ///  应用程序键 (Microsoft Natural Keyboard)。
    ///</summary>
    Apps = 72;
    ///<summary>
    ///  计算机休眠键。
    ///</summary>
    Sleep = 73;
    ///<summary>
    ///  数字键盘上的 0 键。
    ///</summary>
    NumPad0 = 74;
    ///<summary>
    ///  数字键盘上的 1 键。
    ///</summary>
    NumPad1 = 75;
    ///<summary>
    ///  数字键盘上的 2 键。
    ///</summary>
    NumPad2 = 76;
    ///<summary>
    ///  数字键盘上的 3 键。
    ///</summary>
    NumPad3 = 77;
    ///<summary>
    ///  数字键盘上的 4 键。
    ///</summary>
    NumPad4 = 78;
    ///<summary>
    ///  数字键盘上的 5 键。
    ///</summary>
    NumPad5 = 79;
    ///<summary>
    ///  数字键盘上的 6 键。
    ///</summary>
    NumPad6 = 80;
    ///<summary>
    ///  数字键盘上的 7 键。
    ///</summary>
    NumPad7 = 81;
    ///<summary>
    ///  数字键盘上的 8 键。
    ///</summary>
    NumPad8 = 82;
    ///<summary>
    ///  数字键盘上的 9 键。
    ///</summary>
    NumPad9 = 83;
    ///<summary>
    ///  乘号键。
    ///</summary>
    Multiply = 84;
    ///<summary>
    ///  加号键。
    ///</summary>
    Add = 85;
    ///<summary>
    ///  分隔符键。
    ///</summary>
    Separator = 86;
    ///<summary>
    ///  减号键。
    ///</summary>
    Subtract = 87;
    ///<summary>
    ///  句点键。
    ///</summary>
    Decimal = 88;
    ///<summary>
    ///  除号键。
    ///</summary>
    Divide = 89;
    ///<summary>
    ///  F1 键。
    ///</summary>
    F1 = 90;
    ///<summary>
    ///  F2 键。
    ///</summary>
    F2 = 91;
    ///<summary>
    ///  F3 键。
    ///</summary>
    F3 = 92;
    ///<summary>
    ///  F4 键。
    ///</summary>
    F4 = 93;
    ///<summary>
    ///  F5 键。
    ///</summary>
    F5 = 94;
    ///<summary>
    ///  F6 键。
    ///</summary>
    F6 = 95;
    ///<summary>
    ///  F7 键。
    ///</summary>
    F7 = 96;
    ///<summary>
    ///  F8 键。
    ///</summary>
    F8 = 97;
    ///<summary>
    ///  F9 键。
    ///</summary>
    F9 = 98;
    ///<summary>
    ///  F10 键。
    ///</summary>
    F10 = 99;
    ///<summary>
    ///  F11 键。
    ///</summary>
    F11 = 100;
    ///<summary>
    ///  F12 键。
    ///</summary>
    F12 = 101;
    ///<summary>
    ///  F13 键。
    ///</summary>
    F13 = 102;
    ///<summary>
    ///  F14 键。
    ///</summary>
    F14 = 103;
    ///<summary>
    ///  F15 键。
    ///</summary>
    F15 = 104;
    ///<summary>
    ///  F16 键。
    ///</summary>
    F16 = 105;
    ///<summary>
    ///  F17 键。
    ///</summary>
    F17 = 106;
    ///<summary>
    ///  F18 键。
    ///</summary>
    F18 = 107;
    ///<summary>
    ///  F19 键。
    ///</summary>
    F19 = 108;
    ///<summary>
    ///  F20 键。
    ///</summary>
    F20 = 109;
    ///<summary>
    ///  F21 键。
    ///</summary>
    F21 = 110;
    ///<summary>
    ///  F22 键。
    ///</summary>
    F22 = 111;
    ///<summary>
    ///  F23 键。
    ///</summary>
    F23 = 112;
    ///<summary>
    ///  F24 键。
    ///</summary>
    F24 = 113;
    ///<summary>
    ///  Num Lock 键。
    ///</summary>
    NumLock = 114;
    ///<summary>
    ///  Scroll Lock 键。
    ///</summary>
    Scroll = 115;
    ///<summary>
    ///  左 Shift 键。
    ///</summary>
    LeftShift = 116;
    ///<summary>
    ///  右 Shift 键。
    ///</summary>
    RightShift = 117;
    ///<summary>
    ///  左 CTRL 键。
    ///</summary>
    LeftCtrl = 118;
    ///<summary>
    ///  右 CTRL 键。
    ///</summary>
    RightCtrl = 119;
    ///<summary>
    ///  左 ALT 键。
    ///</summary>
    LeftAlt = 120;
    ///<summary>
    ///  右 ALT 键。
    ///</summary>
    RightAlt = 121;
    ///<summary>
    ///  浏览器后退键。
    ///</summary>
    BrowserBack = 122;
    ///<summary>
    ///  浏览器前进键。
    ///</summary>
    BrowserForward = 123;
    ///<summary>
    ///  浏览器刷新键。
    ///</summary>
    BrowserRefresh = 124;
    ///<summary>
    ///  浏览器停止键。
    ///</summary>
    BrowserStop = 125;
    ///<summary>
    ///  浏览器搜索键。
    ///</summary>
    BrowserSearch = 126;
    ///<summary>
    ///  浏览器收藏键。
    ///</summary>
    BrowserFavorites = 127;
    ///<summary>
    ///  浏览器主页键。
    ///</summary>
    BrowserHome = 128;
    ///<summary>
    ///  静音键。
    ///</summary>
    VolumeMute = 129;
    ///<summary>
    ///  音量减小键。
    ///</summary>
    VolumeDown = 130;
    ///<summary>
    ///  音量增大键。
    ///</summary>
    VolumeUp = 131;
    ///<summary>
    ///  媒体下一曲目键。
    ///</summary>
    MediaNextTrack = 132;
    ///<summary>
    ///  媒体上一曲目键。
    ///</summary>
    MediaPreviousTrack = 133;
    ///<summary>
    ///  媒体停止键。
    ///</summary>
    MediaStop = 134;
    ///<summary>
    ///  媒体暂停播放键。
    ///</summary>
    MediaPlayPause = 135;
    ///<summary>
    ///  启动邮件键。
    ///</summary>
    LaunchMail = 136;
    ///<summary>
    ///  选择媒体键。
    ///</summary>
    SelectMedia = 137;
    ///<summary>
    ///  启动应用程序 1 键。
    ///</summary>
    LaunchApplication1 = 138;
    ///<summary>
    ///  启动应用程序 2 键。
    ///</summary>
    LaunchApplication2 = 139;
    ///<summary>
    ///  OEM 1 键。
    ///</summary>
    Oem1 = 140;
    ///<summary>
    ///  OEM 分号键。
    ///</summary>
    OemSemicolon = 140;
    ///<summary>
    ///  OEM 加号键。
    ///</summary>
    OemPlus = 141;
    ///<summary>
    ///  OEM 逗号键。
    ///</summary>
    OemComma = 142;
    ///<summary>
    ///  OEM 减号键。
    ///</summary>
    OemMinus = 143;
    ///<summary>
    ///  OEM 句号键。
    ///</summary>
    OemPeriod = 144;
    ///<summary>
    ///  OEM 2 键。
    ///</summary>
    Oem2 = 145;
    ///<summary>
    ///  OEM 问号键。
    ///</summary>
    OemQuestion = 145;
    ///<summary>
    ///  OEM 3 键。
    ///</summary>
    Oem3 = 146;
    ///<summary>
    ///  OEM 颚化符键。
    ///</summary>
    OemTilde = 146;
    ///<summary>
    ///  ABNT_C1（巴西）键。
    ///</summary>
    AbntC1 = 147;
    ///<summary>
    ///  ABNT_C2（巴西）键。
    ///</summary>
    AbntC2 = 148;
    ///<summary>
    ///  OEM 4 键。
    ///</summary>
    Oem4 = 149;
    ///<summary>
    ///  OEM 左大括号键。
    ///</summary>
    OemOpenBrackets = 149;
    ///<summary>
    ///  OEM 5 键。
    ///</summary>
    Oem5 = 150;
    ///<summary>
    ///  OEM 管道键。
    ///</summary>
    OemPipe = 150;
    ///<summary>
    ///  OEM 6 键。
    ///</summary>
    Oem6 = 151;
    ///<summary>
    ///  OEM 右大括号键。
    ///</summary>
    OemCloseBrackets = 151;
    ///<summary>
    ///  OEM 7 键。
    ///</summary>
    Oem7 = 152;
    ///<summary>
    ///  OEM 引号键。
    ///</summary>
    OemQuotes = 152;
    ///<summary>
    ///  OEM 8 键。
    ///</summary>
    Oem8 = 153;
    ///<summary>
    ///  OEM 102 键。
    ///</summary>
    Oem102 = 154;
    ///<summary>
    ///  OEM 反斜杠键。
    ///</summary>
    OemBackslash = 154;
    ///<summary>
    ///  用于屏蔽 IME 正在处理的真实键的特殊键。
    ///</summary>
    ImeProcessed = 155;
    ///<summary>
    ///  用于屏蔽作为系统键处理的真实键的特殊键。
    ///</summary>
    System = 156;
    ///<summary>
    ///  OEM ATTN 键。
    ///</summary>
    OemAttn = 157;
    ///<summary>
    ///  DBE_ALPHANUMERIC 键。
    ///</summary>
    DbeAlphanumeric = 157;
    ///<summary>
    ///  OEM FINISH 键。
    ///</summary>
    OemFinish = 158;
    ///<summary>
    ///  DBE_KATAKANA 键。
    ///</summary>
    DbeKatakana = 158;
    ///<summary>
    ///  OEM COPY 键。
    ///</summary>
    OemCopy = 159;
    ///<summary>
    ///  DBE_HIRAGANA 键。
    ///</summary>
    DbeHiragana = 159;
    ///<summary>
    ///  OEM AUTO 键。
    ///</summary>
    OemAuto = 160;
    ///<summary>
    ///  DBE_SBCSCHAR 键。
    ///</summary>
    DbeSbcsChar = 160;
    ///<summary>
    ///  OEM ENLW 键。
    ///</summary>
    OemEnlw = 161;
    ///<summary>
    ///  DBE_DBCSCHAR 键。
    ///</summary>
    DbeDbcsChar = 161;
    ///<summary>
    ///  OEM BACKTAB 键。
    ///</summary>
    OemBackTab = 162;
    ///<summary>
    ///  DBE_ROMAN 键。
    ///</summary>
    DbeRoman = 162;
    ///<summary>
    ///  ATTN 键。
    ///</summary>
    Attn = 163;
    ///<summary>
    ///  DBE_NOROMAN 键。
    ///</summary>
    DbeNoRoman = 163;
    ///<summary>
    ///  CRSEL 键。
    ///</summary>
    CrSel = 164;
    ///<summary>
    ///  DBE_ENTERWORDREGISTERMODE 键。
    ///</summary>
    DbeEnterWordRegisterMode = 164;
    ///<summary>
    ///  EXSEL 键。
    ///</summary>
    ExSel = 165;
    ///<summary>
    ///  DBE_ENTERIMECONFIGMODE 键。
    ///</summary>
    DbeEnterImeConfigureMode = 165;
    ///<summary>
    ///  ERASE EOF 键。
    ///</summary>
    EraseEof = 166;
    ///<summary>
    ///  DBE_FLUSHSTRING 键。
    ///</summary>
    DbeFlushString = 166;
    ///<summary>
    ///  播放键。
    ///</summary>
    Play = 167;
    ///<summary>
    ///  DBE_CODEINPUT 键。
    ///</summary>
    DbeCodeInput = 167;
    ///<summary>
    ///  缩放键。
    ///</summary>
    Zoom = 168;
    ///<summary>
    ///  DBE_NOCODEINPUT 键。
    ///</summary>
    DbeNoCodeInput = 168;
    ///<summary>
    ///  留待将来使用的常数。
    ///</summary>
    NoName = 169;
    ///<summary>
    ///  DBE_DETERMINESTRING 键。
    ///</summary>
    DbeDetermineString = 169;
    ///<summary>
    ///  PA1 键。
    ///</summary>
    Pa1 = 170;
    ///<summary>
    ///  DBE_ENTERDLGCONVERSIONMODE 键。
    ///</summary>
    DbeEnterDialogConversionMode = 170;
    ///<summary>
    ///  OEM 清除键。
    ///</summary>
    OemClear = 171;
    ///<summary>
    ///  该键与另一个键配合使用，用于创建单一的组合字符。
    ///</summary>
    DeadCharProcessed = 172;
  end;


  //-------------namespace: System.Windows.Input----------------
  ///<summary>
  ///  指定修改键集。
  ///</summary>
  [DNTypeName('System.Windows.Input.ModifierKeys')]
  DNModifierKeys = type Integer;
  DNModifierKeysHelper = record helper for DNModifierKeys
  public const
    ///<summary>
    ///  按下没有任何修饰符。
    ///</summary>
    None = 0;
    ///<summary>
    ///  ALT 键。
    ///</summary>
    Alt = 1;
    ///<summary>
    ///  CTRL 键。
    ///</summary>
    Control = 2;
    ///<summary>
    ///  SHIFT 键。
    ///</summary>
    Shift = 4;
    ///<summary>
    ///  Windows 徽标键。
    ///</summary>
    Windows = 8;
  end;


  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  指定要序列化属性的方式。
  ///</summary>
  [DNTypeName('System.Windows.Markup.DesignerSerializationOptions')]
  DNDesignerSerializationOptions = type Integer;
  DNDesignerSerializationOptionsHelper = record helper for DNDesignerSerializationOptions
  public const
    ///<summary>
    ///  应将属性序列化为一个属性。
    ///</summary>
    SerializeAsAttribute = 1;
  end;


  //-------------namespace: System.Windows.Threading----------------
  ///<summary>
  ///  描述的状态的可能值 <see cref="T:System.Windows.Threading.DispatcherOperation" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherOperationStatus')]
  DNDispatcherOperationStatus = type Integer;
  DNDispatcherOperationStatusHelper = record helper for DNDispatcherOperationStatus
  public const
    ///<summary>
    ///  该操作处于挂起状态，并且仍位于 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  队列。
    ///</summary>
    Pending = 0;
    ///<summary>
    ///  该操作已中止。
    ///</summary>
    Aborted = 1;
    ///<summary>
    ///  完成该操作。
    ///</summary>
    Completed = 2;
    ///<summary>
    ///  该操作已开始执行，但尚未完成。
    ///</summary>
    Executing = 3;
  end;


  //-------------namespace: System.Windows.Threading----------------
  ///<summary>
  ///  描述从该处可以通过调用操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriority')]
  DNDispatcherPriority = type Integer;
  DNDispatcherPriorityHelper = record helper for DNDispatcherPriority
  public const
    ///<summary>
    ///  枚举值为 0。
    ///  未处理的操作。
    ///</summary>
    Inactive = 0;
    ///<summary>
    ///  枚举值为 1。
    ///  在系统处于空闲状态时处理操作。
    ///</summary>
    SystemIdle = 1;
    ///<summary>
    ///  枚举值为 2。
    ///  当应用程序处于空闲状态时处理操作。
    ///</summary>
    ApplicationIdle = 2;
    ///<summary>
    ///  枚举值为 3。
    ///  在后台操作完成后处理操作。
    ///</summary>
    ContextIdle = 3;
    ///<summary>
    ///  枚举值为 4。
    ///  所有其他非空闲操作完成之后也会处理操作。
    ///</summary>
    Background = 4;
    ///<summary>
    ///  枚举值为 5。
    ///  作为输入相同的优先级处理操作。
    ///</summary>
    Input = 5;
    ///<summary>
    ///  枚举值为 6。
    ///  当布局和呈现已完成，但提供服务时输入优先级项之前处理操作。
    ///  这专门用于当引发 Loaded 的事件。
    ///</summary>
    Loaded = 6;
    ///<summary>
    ///  枚举值为 7。
    ///  与呈现相同的优先级级别处理的操作。
    ///</summary>
    Render = 7;
    ///<summary>
    ///  枚举值为 8。
    ///  在与数据绑定相同的优先级进行处理操作。
    ///</summary>
    DataBind = 8;
    ///<summary>
    ///  枚举值为 9。
    ///  以正常的优先级处理操作。
    ///  这是典型的应用程序优先级。
    ///</summary>
    Normal = 9;
    ///<summary>
    ///  枚举值为 10。
    ///  在其他异步操作之前处理操作。
    ///  这是最高优先级。
    ///</summary>
    Send = 10;
    ///<summary>
    ///  枚举值为-1。
    ///  这是一个无效的优先级。
    ///</summary>
    Invalid = -1;
  end;




type


{ declares }

  DNICollectionView = interface; // type: System.ComponentModel.ICollectionView, namespace: System.ComponentModel
  DNICollectionViewFactory = interface; // type: System.ComponentModel.ICollectionViewFactory, namespace: System.ComponentModel
  DNICollectionViewLiveShaping = interface; // type: System.ComponentModel.ICollectionViewLiveShaping, namespace: System.ComponentModel
  DNIEditableCollectionView = interface; // type: System.ComponentModel.IEditableCollectionView, namespace: System.ComponentModel
  DNIEditableCollectionViewAddNewItem = interface; // type: System.ComponentModel.IEditableCollectionViewAddNewItem, namespace: System.ComponentModel
  DNIItemProperties = interface; // type: System.ComponentModel.IItemProperties, namespace: System.ComponentModel
  DNIKeyboardInputSink = interface; // type: System.Windows.Interop.IKeyboardInputSink, namespace: System.Windows.Interop
  DNIKeyboardInputSite = interface; // type: System.Windows.Interop.IKeyboardInputSite, namespace: System.Windows.Interop
  DNIWeakEventListener = interface; // type: System.Windows.IWeakEventListener, namespace: System.Windows
  DNIReceiveMarkupExtension = interface; // type: System.Windows.Markup.IReceiveMarkupExtension, namespace: System.Windows.Markup
  DNPropertyFilterAttribute = interface; // type: System.ComponentModel.PropertyFilterAttribute, namespace: System.ComponentModel
  DNMediaPermissionAttribute = interface; // type: System.Security.Permissions.MediaPermissionAttribute, namespace: System.Security.Permissions
  DNWebBrowserPermissionAttribute = interface; // type: System.Security.Permissions.WebBrowserPermissionAttribute, namespace: System.Security.Permissions
  DNAttachedPropertyBrowsableAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableAttribute, namespace: System.Windows
  DNAttachedPropertyBrowsableForTypeAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableForTypeAttribute, namespace: System.Windows
  DNAttachedPropertyBrowsableWhenAttributePresentAttribute = interface; // type: System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute, namespace: System.Windows
  DNDesignerSerializationOptionsAttribute = interface; // type: System.Windows.Markup.DesignerSerializationOptionsAttribute, namespace: System.Windows.Markup
  DNDisableDpiAwarenessAttribute = interface; // type: System.Windows.Media.DisableDpiAwarenessAttribute, namespace: System.Windows.Media
  DNSortDescriptionCollection = interface; // type: System.ComponentModel.SortDescriptionCollection, namespace: System.ComponentModel
  DNGroupDescription = interface; // type: System.ComponentModel.GroupDescription, namespace: System.ComponentModel
  DNItemPropertyInfo = interface; // type: System.ComponentModel.ItemPropertyInfo, namespace: System.ComponentModel
  DNDependencyPropertyDescriptor = interface; // type: System.ComponentModel.DependencyPropertyDescriptor, namespace: System.ComponentModel
  DNExpressionConverter = interface; // type: System.Windows.ExpressionConverter, namespace: System.Windows
  DNKeyConverter = interface; // type: System.Windows.Input.KeyConverter, namespace: System.Windows.Input
  DNModifierKeysConverter = interface; // type: System.Windows.Input.ModifierKeysConverter, namespace: System.Windows.Input
  DNInt32RectConverter = interface; // type: System.Windows.Int32RectConverter, namespace: System.Windows
  DNMatrixConverter = interface; // type: System.Windows.Media.MatrixConverter, namespace: System.Windows.Media
  DNPointConverter = interface; // type: System.Windows.PointConverter, namespace: System.Windows
  DNRectConverter = interface; // type: System.Windows.RectConverter, namespace: System.Windows
  DNSizeConverter = interface; // type: System.Windows.SizeConverter, namespace: System.Windows
  DNVectorConverter = interface; // type: System.Windows.VectorConverter, namespace: System.Windows
  DNPresentationTraceSources = interface; // type: System.Diagnostics.PresentationTraceSources, namespace: System.Diagnostics
  DNCurrentChangingEventArgs = interface; // type: System.ComponentModel.CurrentChangingEventArgs, namespace: System.ComponentModel
  DNSignatureVerificationEventArgs = interface; // type: System.IO.Packaging.SignatureVerificationEventArgs, namespace: System.IO.Packaging
  DNDispatcherEventArgs = interface; // type: System.Windows.Threading.DispatcherEventArgs, namespace: System.Windows.Threading
  DNDispatcherUnhandledExceptionEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionEventArgs, namespace: System.Windows.Threading
  DNDispatcherUnhandledExceptionFilterEventArgs = interface; // type: System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs, namespace: System.Windows.Threading
  DNDispatcherHookEventArgs = interface; // type: System.Windows.Threading.DispatcherHookEventArgs, namespace: System.Windows.Threading
  DNRightsManagementException = interface; // type: System.Security.RightsManagement.RightsManagementException, namespace: System.Security.RightsManagement
  DNFileFormatException = interface; // type: System.IO.FileFormatException, namespace: System.IO
  DNEncryptedPackageEnvelope = interface; // type: System.IO.Packaging.EncryptedPackageEnvelope, namespace: System.IO.Packaging
  DNPackage = interface; // type: System.IO.Packaging.Package, namespace: System.IO.Packaging
  DNZipPackage = interface; // type: System.IO.Packaging.ZipPackage, namespace: System.IO.Packaging
  DNPackageDigitalSignature = interface; // type: System.IO.Packaging.PackageDigitalSignature, namespace: System.IO.Packaging
  DNPackageDigitalSignatureManager = interface; // type: System.IO.Packaging.PackageDigitalSignatureManager, namespace: System.IO.Packaging
  DNPackagePart = interface; // type: System.IO.Packaging.PackagePart, namespace: System.IO.Packaging
  DNZipPackagePart = interface; // type: System.IO.Packaging.ZipPackagePart, namespace: System.IO.Packaging
  DNPackagePartCollection = interface; // type: System.IO.Packaging.PackagePartCollection, namespace: System.IO.Packaging
  DNPackageProperties = interface; // type: System.IO.Packaging.PackageProperties, namespace: System.IO.Packaging
  DNPackageRelationship = interface; // type: System.IO.Packaging.PackageRelationship, namespace: System.IO.Packaging
  DNPackageRelationshipCollection = interface; // type: System.IO.Packaging.PackageRelationshipCollection, namespace: System.IO.Packaging
  DNPackageRelationshipSelector = interface; // type: System.IO.Packaging.PackageRelationshipSelector, namespace: System.IO.Packaging
  DNPackUriHelper = interface; // type: System.IO.Packaging.PackUriHelper, namespace: System.IO.Packaging
  DNRightsManagementInformation = interface; // type: System.IO.Packaging.RightsManagementInformation, namespace: System.IO.Packaging
  DNStorageInfo = interface; // type: System.IO.Packaging.StorageInfo, namespace: System.IO.Packaging
  DNStreamInfo = interface; // type: System.IO.Packaging.StreamInfo, namespace: System.IO.Packaging
  DNMediaPermission = interface; // type: System.Security.Permissions.MediaPermission, namespace: System.Security.Permissions
  DNWebBrowserPermission = interface; // type: System.Security.Permissions.WebBrowserPermission, namespace: System.Security.Permissions
  DNContentGrant = interface; // type: System.Security.RightsManagement.ContentGrant, namespace: System.Security.RightsManagement
  DNContentUser = interface; // type: System.Security.RightsManagement.ContentUser, namespace: System.Security.RightsManagement
  DNCryptoProvider = interface; // type: System.Security.RightsManagement.CryptoProvider, namespace: System.Security.RightsManagement
  DNLocalizedNameDescriptionPair = interface; // type: System.Security.RightsManagement.LocalizedNameDescriptionPair, namespace: System.Security.RightsManagement
  DNPublishLicense = interface; // type: System.Security.RightsManagement.PublishLicense, namespace: System.Security.RightsManagement
  DNSecureEnvironment = interface; // type: System.Security.RightsManagement.SecureEnvironment, namespace: System.Security.RightsManagement
  DNUnsignedPublishLicense = interface; // type: System.Security.RightsManagement.UnsignedPublishLicense, namespace: System.Security.RightsManagement
  DNUseLicense = interface; // type: System.Security.RightsManagement.UseLicense, namespace: System.Security.RightsManagement
  DNDispatcherSynchronizationContext = interface; // type: System.Windows.Threading.DispatcherSynchronizationContext, namespace: System.Windows.Threading
  DNSortDescription = interface; // type: System.ComponentModel.SortDescription, namespace: System.ComponentModel
  DNDependencyPropertyChangedEventArgs = interface; // type: System.Windows.DependencyPropertyChangedEventArgs, namespace: System.Windows
  DNInt32Rect = interface; // type: System.Windows.Int32Rect, namespace: System.Windows
  DNMSG = interface; // type: System.Windows.Interop.MSG, namespace: System.Windows.Interop
  DNLocalValueEntry = interface; // type: System.Windows.LocalValueEntry, namespace: System.Windows
  DNLocalValueEnumerator = interface; // type: System.Windows.LocalValueEnumerator, namespace: System.Windows
  DNMatrix = interface; // type: System.Windows.Media.Matrix, namespace: System.Windows.Media
  DNPoint = interface; // type: System.Windows.Point, namespace: System.Windows
  DNRect = interface; // type: System.Windows.Rect, namespace: System.Windows
  DNSize = interface; // type: System.Windows.Size, namespace: System.Windows
  DNDispatcherPriorityAwaitable = interface; // type: System.Windows.Threading.DispatcherPriorityAwaitable, namespace: System.Windows.Threading
  DNDispatcherPriorityAwaiter = interface; // type: System.Windows.Threading.DispatcherPriorityAwaiter, namespace: System.Windows.Threading
  DNDispatcherProcessingDisabled = interface; // type: System.Windows.Threading.DispatcherProcessingDisabled, namespace: System.Windows.Threading
  DNVector = interface; // type: System.Windows.Vector, namespace: System.Windows
  DNBaseCompatibilityPreferences = interface; // type: System.Windows.BaseCompatibilityPreferences, namespace: System.Windows
  DNDataSourceProvider = interface; // type: System.Windows.Data.DataSourceProvider, namespace: System.Windows.Data
  DNDependencyObjectType = interface; // type: System.Windows.DependencyObjectType, namespace: System.Windows
  DNDependencyProperty = interface; // type: System.Windows.DependencyProperty, namespace: System.Windows
  DNDependencyPropertyKey = interface; // type: System.Windows.DependencyPropertyKey, namespace: System.Windows
  DNExpression = interface; // type: System.Windows.Expression, namespace: System.Windows
  DNKeyInterop = interface; // type: System.Windows.Input.KeyInterop, namespace: System.Windows.Input
  DNTraversalRequest = interface; // type: System.Windows.Input.TraversalRequest, namespace: System.Windows.Input
  DNComponentDispatcher = interface; // type: System.Windows.Interop.ComponentDispatcher, namespace: System.Windows.Interop
  DNInternalTypeHelper = interface; // type: System.Windows.Markup.InternalTypeHelper, namespace: System.Windows.Markup
  DNMarkupObject = interface; // type: System.Windows.Markup.Primitives.MarkupObject, namespace: System.Windows.Markup.Primitives
  DNMarkupProperty = interface; // type: System.Windows.Markup.Primitives.MarkupProperty, namespace: System.Windows.Markup.Primitives
  DNServiceProviders = interface; // type: System.Windows.Markup.ServiceProviders, namespace: System.Windows.Markup
  DNInt32RectValueSerializer = interface; // type: System.Windows.Converters.Int32RectValueSerializer, namespace: System.Windows.Converters
  DNPointValueSerializer = interface; // type: System.Windows.Converters.PointValueSerializer, namespace: System.Windows.Converters
  DNRectValueSerializer = interface; // type: System.Windows.Converters.RectValueSerializer, namespace: System.Windows.Converters
  DNSizeValueSerializer = interface; // type: System.Windows.Converters.SizeValueSerializer, namespace: System.Windows.Converters
  DNVectorValueSerializer = interface; // type: System.Windows.Converters.VectorValueSerializer, namespace: System.Windows.Converters
  DNKeyValueSerializer = interface; // type: System.Windows.Input.KeyValueSerializer, namespace: System.Windows.Input
  DNModifierKeysValueSerializer = interface; // type: System.Windows.Input.ModifierKeysValueSerializer, namespace: System.Windows.Input
  DNMatrixValueSerializer = interface; // type: System.Windows.Media.Converters.MatrixValueSerializer, namespace: System.Windows.Media.Converters
  DNNameScope = interface; // type: System.Windows.NameScope, namespace: System.Windows
  DNPropertyMetadata = interface; // type: System.Windows.PropertyMetadata, namespace: System.Windows
  DNSplashScreen = interface; // type: System.Windows.SplashScreen, namespace: System.Windows
  DNDispatcher = interface; // type: System.Windows.Threading.Dispatcher, namespace: System.Windows.Threading
  DNDispatcherHooks = interface; // type: System.Windows.Threading.DispatcherHooks, namespace: System.Windows.Threading
  DNDispatcherObject = interface; // type: System.Windows.Threading.DispatcherObject, namespace: System.Windows.Threading
  DNDependencyObject = interface; // type: System.Windows.DependencyObject, namespace: System.Windows
  DNFreezable = interface; // type: System.Windows.Freezable, namespace: System.Windows
  DNDispatcherFrame = interface; // type: System.Windows.Threading.DispatcherFrame, namespace: System.Windows.Threading
  DNWeakEventManager = interface; // type: System.Windows.WeakEventManager, namespace: System.Windows
  DNCollectionChangedEventManager = interface; // type: System.Collections.Specialized.CollectionChangedEventManager, namespace: System.Collections.Specialized
  DNCurrentChangedEventManager = interface; // type: System.ComponentModel.CurrentChangedEventManager, namespace: System.ComponentModel
  DNCurrentChangingEventManager = interface; // type: System.ComponentModel.CurrentChangingEventManager, namespace: System.ComponentModel
  DNErrorsChangedEventManager = interface; // type: System.ComponentModel.ErrorsChangedEventManager, namespace: System.ComponentModel
  DNPropertyChangedEventManager = interface; // type: System.ComponentModel.PropertyChangedEventManager, namespace: System.ComponentModel
  DNWeakEventManager<TEventSource, TEventArgs> = interface; // type: System.Windows.WeakEventManager`2, namespace: System.Windows
  DNDispatcherOperation = interface; // type: System.Windows.Threading.DispatcherOperation, namespace: System.Windows.Threading
  DNDispatcherOperation<TResult> = interface; // type: System.Windows.Threading.DispatcherOperation`1, namespace: System.Windows.Threading
  DNDispatcherTimer = interface; // type: System.Windows.Threading.DispatcherTimer, namespace: System.Windows.Threading

{ delegates }

  ///<summary>
  ///  表示 <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" />
  ///  事件的处理方法。
  ///</summary>
  ///  <param name="sender">
  ///  引发事件的对象。
  ///</param>
  ///  <param name="e">
  ///  有关事件的信息。
  ///</param>
  [DNTypeName('System.ComponentModel.CurrentChangingEventHandler')]
  DNCurrentChangingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCurrentChangingEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" />
  ///  即时引发 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />
  ///  检测到无效的签名。
  ///</summary>
  ///  <param name="sender">
  ///  无效 <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.IO.Packaging.InvalidSignatureEventHandler')]
  DNInvalidSignatureEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSignatureVerificationEventArgs) of object;

  ///<summary>
  ///  每当重新计算的依赖项属性值，或强制专门请求时调用的方法提供一个模板。
  ///</summary>
  ///  <param name="d">
  ///  属性存在于该对象。
  ///  当调用该回调时，属性系统将传递此值。
  ///</param>
  ///  <param name="baseValue">
  ///  该属性，在任何强制尝试之前新值。
  ///</param>
  ///<returns>
  ///  强制转换后的值 （采用适当的类型）。
  ///</returns>
  [DNTypeName('System.Windows.CoerceValueCallback')]
  DNCoerceValueCallback = function(d: DNDependencyObject; baseValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  ///<summary>
  ///  表示将处理某些事件的方法，这些事件在特定 <see cref="T:System.Windows.DependencyObject" />
  ///  实现上的 <see cref="T:System.Windows.DependencyProperty" />
  ///  发生更改时引发。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Windows.DependencyPropertyChangedEventHandler')]
  DNDependencyPropertyChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDependencyPropertyChangedEventArgs) of object;

  ///<summary>
  ///  表示处理 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" />
  ///  和 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="msg">
  ///  具有消息数据的结构。
  ///</param>
  ///  <param name="handled">
  ///  如果消息已处理，则为 <see langword="true" />
  ///  ；否则为 <see langword="false" />
  ///  。
  ///</param>
  [DNTypeName('System.Windows.Interop.ThreadMessageEventHandler')]
  DNThreadMessageEventHandler = procedure(out msg: DNMSG; out handled: Boolean) of object;

  ///<summary>
  ///  表示在依赖属性的有效属性值更改时调用的回调。
  ///</summary>
  ///  <param name="d">
  ///  属性值已更改的 <see cref="T:System.Windows.DependencyObject" />
  ///  。
  ///</param>
  ///  <param name="e">
  ///  跟踪对此属性有效值的更改的任何事件发出的事件数据。
  ///</param>
  [DNTypeName('System.Windows.PropertyChangedCallback')]
  DNPropertyChangedCallback = procedure(d: DNDependencyObject; e: DNDependencyPropertyChangedEventArgs) of object;

  ///<summary>
  ///  表示将处理的方法 <see cref="T:System.Windows.Threading.DispatcherHooks" />
  ///  相关的事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Windows.Threading.DispatcherHookEventHandler')]
  DNDispatcherHookEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherHookEventArgs) of object;

  ///<summary>
  ///  表示一个用于调度程序操作的委托。
  ///</summary>
  ///  <param name="arg">
  ///  一个传递到回叫的参数。
  ///</param>
  ///<returns>
  ///  由回叫返回的对象。
  ///</returns>
  [DNTypeName('System.Windows.Threading.DispatcherOperationCallback')]
  DNDispatcherOperationCallback = function(arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventHandler')]
  DNDispatcherUnhandledExceptionEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler')]
  DNDispatcherUnhandledExceptionFilterEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDispatcherUnhandledExceptionFilterEventArgs) of object;

  ///<summary>
  ///  表示用作验证依赖属性有效值的回调的方法。
  ///</summary>
  ///  <param name="value">
  ///  要验证的值。
  ///</param>
  ///<returns>
  ///  如果验证了值，则为 <see langword="true" />
  ///  ；如果提交的值无效，则为 <see langword="false" />
  ///  。
  ///</returns>
  [DNTypeName('System.Windows.ValidateValueCallback')]
  DNValidateValueCallback = function(value: DDN.mscorlib.DNObject): Boolean of object;




{ objects }

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  使集合具有当前记录管理、自定义排序、筛选和分组功能。
  ///</summary>
  [DNTypeName('System.ComponentModel.ICollectionView')]
  DNICollectionView = interface(DDN.mscorlib.DNIEnumerable)
  ['{BC1C216E-67A1-3933-9CD6-A13AA4B974A9}']
  { getters & setters } 

    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_SourceCollection: DDN.mscorlib.DNIEnumerable;
    function get_Filter: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject>;
    procedure set_Filter(value: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject>);
    function get_CanFilter: Boolean;
    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CanSort: Boolean;
    function get_CanGroup: Boolean;
    function get_GroupDescriptions: DDN.System.DNObservableCollection<DNGroupDescription>;
    function get_Groups: DDN.System.DNReadOnlyObservableCollection<DDN.mscorlib.DNObject>;
    function get_IsEmpty: Boolean;
    function get_CurrentItem: DDN.mscorlib.DNObject;
    function get_CurrentPosition: Int32;
    function get_IsCurrentAfterLast: Boolean;
    function get_IsCurrentBeforeFirst: Boolean;

  { events } 

    procedure add_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure remove_CurrentChanging(value: DNCurrentChangingEventHandler);
    procedure add_CurrentChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CurrentChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  重新创建该视图。
    ///</summary>
    procedure Refresh;
    ///<summary>
    ///  返回一个值，该值指示给定项是否属于此集合视图。
    ///</summary>
    ///  <param name="item">
    ///  要检查的对象。
    ///</param>
    ///<returns>
    ///  如果该项属于此集合视图，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  进入延迟循环，该循环可用于将更改合并到视图并延迟自动刷新。
    ///</summary>
    ///<returns>
    ///  一个可用于释放调用对象的 <see cref="T:System.IDisposable" />
    ///  对象。
    ///</returns>
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    ///<summary>
    ///  将视图中的第一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是视图中的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentToFirst: Boolean;
    ///<summary>
    ///  将视图中的最后一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是视图中的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentToLast: Boolean;
    ///<summary>
    ///  将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  之后的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是视图中的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentToNext: Boolean;
    ///<summary>
    ///  将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  之前的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是视图中的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentToPrevious: Boolean;
    ///<summary>
    ///  将指定项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///  <param name="item">
    ///  要设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  的项。
    ///</param>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  位于视图内，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentTo(item: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将位于指定索引位置的项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</summary>
    ///  <param name="position">
    ///  一个索引位置，位于该位置的项将设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果所生成的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是视图中的项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveCurrentToPosition(position: Int32): Boolean;

  { propertys } 

    ///<summary>
    ///  获取或设置根据区域性而可能不同的视图的任何操作（如排序）的区域性信息。
    ///</summary>
    ///<returns>
    ///  要在排序过程中使用的区域性。
    ///</returns>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    ///<summary>
    ///  返回基础集合。
    ///</summary>
    ///<returns>
    ///  属于基础集合的 <see cref="T:System.Collections.IEnumerable" />
    ///  对象。
    ///</returns>
    property SourceCollection: DDN.mscorlib.DNIEnumerable read get_SourceCollection;
    ///<summary>
    ///  获取或设置用于确定某个项是否适合包含在视图中的回调。
    ///</summary>
    ///<returns>
    ///  用于确定某个项是否适合包含在视图中的方法。
    ///</returns>
    property Filter: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNObject> read get_Filter write set_Filter;
    ///<summary>
    ///  获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.Filter" />
    ///  属性进行筛选。
    ///</summary>
    ///<returns>
    ///  如果此视图支持筛选，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanFilter: Boolean read get_CanFilter;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.SortDescription" />
    ///  对象的集合，这些对象描述集合中的项在视图中的排序方式。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.SortDescription" />
    ///  对象的集合，这些对象描述集合中的项在视图中的排序方式。
    ///</returns>
    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    ///<summary>
    ///  获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" />
    ///  属性进行排序。
    ///</summary>
    ///<returns>
    ///  如果此视图支持排序，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanSort: Boolean read get_CanSort;
    ///<summary>
    ///  获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" />
    ///  属性进行分组。
    ///</summary>
    ///<returns>
    ///  如果此视图支持分组，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanGroup: Boolean read get_CanGroup;
    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.GroupDescription" />
    ///  对象的集合，这些对象描述集合中的项在视图中的分组方式。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.GroupDescription" />
    ///  对象的集合，这些对象描述集合中的项在视图中的分组方式。
    ///</returns>
    property GroupDescriptions: DDN.System.DNObservableCollection<DNGroupDescription> read get_GroupDescriptions;
    ///<summary>
    ///  获取顶级组。
    ///</summary>
    ///<returns>
    ///  顶级组的只读集合；如果没有任何组，则为 <see langword="null" />
    ///  。
    ///</returns>
    property Groups: DDN.System.DNReadOnlyObservableCollection<DDN.mscorlib.DNObject> read get_Groups;
    ///<summary>
    ///  返回一个值，该值指示获得的视图是否为空。
    ///</summary>
    ///<returns>
    ///  如果获得的视图为空，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取视图中的当前项。
    ///</summary>
    ///<returns>
    ///  视图中的当前项，如果没有当前项则为 <see langword="null" />
    ///  。
    ///</returns>
    property CurrentItem: DDN.mscorlib.DNObject read get_CurrentItem;
    ///<summary>
    ///  获取视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  的序号位置。
    ///</summary>
    ///<returns>
    ///  视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  的序号位置。
    ///</returns>
    property CurrentPosition: Int32 read get_CurrentPosition;
    ///<summary>
    ///  获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是否超出集合的末尾。
    ///</summary>
    ///<returns>
    ///  如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  超出集合的末尾，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsCurrentAfterLast: Boolean read get_IsCurrentAfterLast;
    ///<summary>
    ///  获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  是否超出集合的开头。
    ///</summary>
    ///<returns>
    ///  如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />
    ///  超出集合开始处，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsCurrentBeforeFirst: Boolean read get_IsCurrentBeforeFirst;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  一个接口，使实现的集合来创建对其数据的视图。
  ///  通常情况下，用户代码不在此接口上调用方法。
  ///</summary>
  [DNTypeName('System.ComponentModel.ICollectionViewFactory')]
  DNICollectionViewFactory = interface(DDN.mscorlib.DNObject)
  ['{85E748D2-9AAC-3538-990B-FD8BCEC62EAC}']
  { methods } 

    ///<summary>
    ///  创建新视图在实现此接口的集合。
    ///  通常情况下，用户代码不会调用此方法。
    ///</summary>
    ///<returns>
    ///  新创建的视图。
    ///</returns>
    function CreateView: DNICollectionView;

  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  定义使排序、 分组和筛选的属性 <see cref="T:System.Windows.Data.CollectionView" />
  ///  实时。
  ///</summary>
  [DNTypeName('System.ComponentModel.ICollectionViewLiveShaping')]
  DNICollectionViewLiveShaping = interface(DDN.mscorlib.DNObject)
  ['{842756FF-4D11-32C7-B4FF-86265B5B34F6}']
  { getters & setters } 

    function get_CanChangeLiveSorting: Boolean;
    function get_CanChangeLiveFiltering: Boolean;
    function get_CanChangeLiveGrouping: Boolean;
    function get_IsLiveSorting: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveSorting(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_IsLiveFiltering: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveFiltering(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_IsLiveGrouping: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_IsLiveGrouping(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_LiveSortingProperties: DDN.System.DNObservableCollection<string>;
    function get_LiveFilteringProperties: DDN.System.DNObservableCollection<string>;
    function get_LiveGroupingProperties: DDN.System.DNObservableCollection<string>;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示集合视图是否支持启用或禁用实时的数据进行排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果集合视图支持启用实时排序打开或关闭;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanChangeLiveSorting: Boolean read get_CanChangeLiveSorting;
    ///<summary>
    ///  获取一个值，该值指示集合视图是否支持打开或关闭实时筛选数据。
    ///</summary>
    ///<returns>
    ///  如果集合视图支持打开或关闭实时筛选，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanChangeLiveFiltering: Boolean read get_CanChangeLiveFiltering;
    ///<summary>
    ///  获取一个值，该值指示集合视图是否支持启用实时对数据进行分组，打开或关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果集合视图支持启用实时分组，打开或关闭;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanChangeLiveGrouping: Boolean read get_CanChangeLiveGrouping;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用实时进行排序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果对实时数据进行排序是，启用; <see langword="false" />
    ///  如果未启用实时排序; <see langword="null" />
    ///  如果无法确定集合视图是否实现，实时排序。
    ///</returns>
    property IsLiveSorting: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveSorting write set_IsLiveSorting;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用实时中筛选数据。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果启用筛选的实时数据; <see langword="false" />
    ///  如果未启用实时筛选; <see langword="null" />
    ///  如果无法确定集合视图是否实现，实时筛选。
    ///</returns>
    property IsLiveFiltering: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveFiltering write set_IsLiveFiltering;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用对实时数据进行分组。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果对实时数据进行分组为，启用; <see langword="false" />
    ///  如果未启用实时的分组; <see langword="null" />
    ///  如果无法确定集合视图是否实现，实时分组。
    ///</returns>
    property IsLiveGrouping: DDN.mscorlib.DNNullable<Boolean> read get_IsLiveGrouping write set_IsLiveGrouping;
    ///<summary>
    ///  获取指定的属性的参与中对实时数据进行排序的字符串的集合。
    ///</summary>
    ///<returns>
    ///  指定在对实时数据进行排序的属性的参与字符串的集合。
    ///</returns>
    property LiveSortingProperties: DDN.System.DNObservableCollection<string> read get_LiveSortingProperties;
    ///<summary>
    ///  获取指定中筛选数据实时参与的属性的字符串的集合。
    ///</summary>
    ///<returns>
    ///  指定参与的属性中的筛选操作的实时数据字符串的集合。
    ///</returns>
    property LiveFilteringProperties: DDN.System.DNObservableCollection<string> read get_LiveFilteringProperties;
    ///<summary>
    ///  获取指定实时数据分组中加入的属性的字符串的集合。
    ///</summary>
    ///<returns>
    ///  指定对实时数据进行分组中加入的属性的字符串的集合。
    ///</returns>
    property LiveGroupingProperties: DDN.System.DNObservableCollection<string> read get_LiveGroupingProperties;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  定义一些方法和属性，<see cref="T:System.Windows.Data.CollectionView" />
  ///  实现它们以向集合提供编辑功能。
  ///</summary>
  [DNTypeName('System.ComponentModel.IEditableCollectionView')]
  DNIEditableCollectionView = interface(DDN.mscorlib.DNObject)
  ['{BD2E0E08-6611-31CD-A1BC-2737C49744C8}']
  { getters & setters } 

    function get_NewItemPlaceholderPosition: DNNewItemPlaceholderPosition;
    procedure set_NewItemPlaceholderPosition(value: DNNewItemPlaceholderPosition);
    function get_CanAddNew: Boolean;
    function get_IsAddingNew: Boolean;
    function get_CurrentAddItem: DDN.mscorlib.DNObject;
    function get_CanRemove: Boolean;
    function get_CanCancelEdit: Boolean;
    function get_IsEditingItem: Boolean;
    function get_CurrentEditItem: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  将新项添加到集合。
    ///</summary>
    ///<returns>
    ///  添加到集合中的新项。
    ///</returns>
    function AddNew: DDN.mscorlib.DNObject;
    ///<summary>
    ///  结束添加事务并保存挂起的新项。
    ///</summary>
    procedure CommitNew;
    ///<summary>
    ///  结束添加事务并放弃挂起的新项。
    ///</summary>
    procedure CancelNew;
    ///<summary>
    ///  从集合中删除指定位置的项。
    ///</summary>
    ///  <param name="index">
    ///  要移除的项的位置。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于 0 或大于集合视图中的项数。
    ///</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  从集合中移除指定的项。
    ///</summary>
    ///  <param name="item">
    ///  要移除的项。
    ///</param>
    procedure Remove(item: DDN.mscorlib.DNObject);
    ///<summary>
    ///  开始指定项的编辑事务。
    ///</summary>
    ///  <param name="item">
    ///  要编辑的项。
    ///</param>
    procedure EditItem(item: DDN.mscorlib.DNObject);
    ///<summary>
    ///  结束编辑事务并保存挂起的更改。
    ///</summary>
    procedure CommitEdit;
    ///<summary>
    ///  结束编辑事务，并还原项的原始值（如有可能）。
    ///</summary>
    procedure CancelEdit;

  { propertys } 

    ///<summary>
    ///  获取或设置集合视图中新项占位符的位置。
    ///</summary>
    ///<returns>
    ///  用于指定集合视图中新项占位符位置的枚举值之一。
    ///</returns>
    property NewItemPlaceholderPosition: DNNewItemPlaceholderPosition read get_NewItemPlaceholderPosition write set_NewItemPlaceholderPosition;
    ///<summary>
    ///  获取一个值，该值指示是否可以将新项添加到集合中。
    ///</summary>
    ///<returns>
    ///  如果可以将新项添加到集合中，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanAddNew: Boolean read get_CanAddNew;
    ///<summary>
    ///  获取一个值，该值指示是否正在执行添加事务。
    ///</summary>
    ///<returns>
    ///  如果正在执行添加事务，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAddingNew: Boolean read get_IsAddingNew;
    ///<summary>
    ///  获取当前添加事务过程中正在添加的项。
    ///</summary>
    ///<returns>
    ///  如果要添加的项 <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
    ///  是 <see langword="true" />
    ///  ; 否则为 <see langword="null" />
    ///  。
    ///</returns>
    property CurrentAddItem: DDN.mscorlib.DNObject read get_CurrentAddItem;
    ///<summary>
    ///  获取一个值，该值指示是否可以从集合中移除项。
    ///</summary>
    ///<returns>
    ///  如果可以从集合中移除项，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanRemove: Boolean read get_CanRemove;
    ///<summary>
    ///  获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。
    ///</summary>
    ///<returns>
    ///  如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanCancelEdit: Boolean read get_CanCancelEdit;
    ///<summary>
    ///  获取一个值，该值指示是否正在执行编辑事务。
    ///</summary>
    ///<returns>
    ///  如果正在执行编辑事务，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEditingItem: Boolean read get_IsEditingItem;
    ///<summary>
    ///  获取集合中正在编辑的项。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
    ///  是 <see langword="true" />
    ///  ，则为集合中正在编辑的项；否则为 <see langword="null" />
    ///  。
    ///</returns>
    property CurrentEditItem: DDN.mscorlib.DNObject read get_CurrentEditItem;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  定义方法和属性， <see cref="T:System.Windows.Data.CollectionView" />
  ///  实现以便指定特定类型的添加项。
  ///</summary>
  [DNTypeName('System.ComponentModel.IEditableCollectionViewAddNewItem')]
  DNIEditableCollectionViewAddNewItem = interface(DNIEditableCollectionView)
  ['{70E3A90C-E666-3296-93BA-0723DAD78889}']
  { getters & setters } 

    function get_CanAddNewItem: Boolean;

  { methods } 

    ///<summary>
    ///  将指定的对象添加到集合。
    ///</summary>
    ///  <param name="newItem">
    ///  要添加到集合中的对象。
    ///</param>
    ///<returns>
    ///  添加到集合的对象。
    ///</returns>
    function AddNewItem(newItem: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否可以将指定的对象添加到集合。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果指定的对象可以添加到集合。否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanAddNewItem: Boolean read get_CanAddNewItem;
  end;

  //-------------namespace: System.ComponentModel----------------
  ///<summary>
  ///  定义一个属性，它提供了有关对象的属性的信息。
  ///</summary>
  [DNTypeName('System.ComponentModel.IItemProperties')]
  DNIItemProperties = interface(DDN.mscorlib.DNObject)
  ['{23541A78-7913-3740-B38A-85551A894944}']
  { getters & setters } 

    function get_ItemProperties: DDN.mscorlib.DNReadOnlyCollection<DNItemPropertyInfo>;

  { propertys } 

    ///<summary>
    ///  获取一个集合包含位于集合中项的属性有关的信息。
    ///</summary>
    ///<returns>
    ///  包含有关可用集合中的项的属性的信息集合。
    ///</returns>
    property ItemProperties: DDN.mscorlib.DNReadOnlyCollection<DNItemPropertyInfo> read get_ItemProperties;
  end;

  //-------------namespace: System.Windows.Interop----------------
  ///<summary>
  ///  跨互操作边界和 Hwnd 之间管理 tab 键次序、 加速器、 助记键的组件提供键盘接收器。
  ///  此接口实现中的键盘消息管理 WPF-Win32 互操作方案。
  ///</summary>
  [DNTypeName('System.Windows.Interop.IKeyboardInputSink')]
  DNIKeyboardInputSink = interface(DDN.mscorlib.DNObject)
  ['{C3BFFF23-62B6-3563-9920-C32DAD9E64D9}']
  { getters & setters } 

    function get_KeyboardInputSite: DNIKeyboardInputSite;
    procedure set_KeyboardInputSite(value: DNIKeyboardInputSite);

  { methods } 

    ///<summary>
    ///  注册 <see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  包含组件的接口。
    ///</summary>
    ///  <param name="sink"><see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  包含组件的接收器。
    ///</param>
    ///<returns><see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  包含组件的站点。
    ///</returns>
    function RegisterKeyboardInputSink(sink: DNIKeyboardInputSink): DNIKeyboardInputSite;
    function TranslateAccelerator(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    ///<summary>
    ///  将焦点设置在第一个制表位或接收器的最后一个制表位。
    ///</summary>
    ///  <param name="request">
    ///  指定是应该将焦点设置到第一项或最后一个制表位。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果焦点已设为，请求; <see langword="false" />
    ///  , ，如果不有任何制表位。
    ///</returns>
    function TabInto(request: DNTraversalRequest): Boolean;
    function OnMnemonic(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    function TranslateChar(out msg: DNMSG; modifiers: DNModifierKeys): Boolean;
    ///<summary>
    ///  获取一个值，该值指示是否接收器或所包含的组件之一具有焦点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果接收器或所包含的组件之一具有焦点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasFocusWithin: Boolean;

  { propertys } 

    ///<summary>
    ///  获取或设置对组件的容器的引用 <see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  接口。
    ///</summary>
    ///<returns>
    ///  对容器的引用 <see cref="T:System.Windows.Interop.IKeyboardInputSite" />
    ///  接口。
    ///</returns>
    property KeyboardInputSite: DNIKeyboardInputSite read get_KeyboardInputSite write set_KeyboardInputSite;
  end;

  //-------------namespace: System.Windows.Interop----------------
  ///<summary>
  ///  管理容器中的键盘焦点。
  ///  此接口实现中的键盘消息管理 WPF-Win32 互操作方案。
  ///</summary>
  [DNTypeName('System.Windows.Interop.IKeyboardInputSite')]
  DNIKeyboardInputSite = interface(DDN.mscorlib.DNObject)
  ['{688FB57F-AFC1-3FF7-ACBE-B97C9F648A6A}']
  { getters & setters } 

    function get_Sink: DNIKeyboardInputSink;

  { methods } 

    ///<summary>
    ///  注销从此站点的子键盘输入的接收器。
    ///</summary>
    procedure Unregister;
    ///<summary>
    ///  在到达其最后一个制表位，并且不再具有要 tab 键移动到的项目，由包含组件调用。
    ///</summary>
    ///  <param name="request">
    ///  指定是应该将焦点设置到第一项或最后一个制表位。
    ///</param>
    ///<returns>
    ///  如果此方法返回 <see langword="true" />
    ///  , ，该站点已将焦点移动到另一个组件。
    ///  如果此方法返回 <see langword="false" />
    ///  , ，重点是仍在调用组件。
    ///  该组件应"环绕"，并将焦点设置到其第一个包含的制表位。
    ///</returns>
    function OnNoMoreTabStops(request: DNTraversalRequest): Boolean;

  { propertys } 

    ///<summary>
    ///  获取与此站点相关联的键盘接收器。
    ///</summary>
    ///<returns>
    ///  当前站点的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" />
    ///  接口。
    ///</returns>
    property Sink: DNIKeyboardInputSink read get_Sink;
  end;

  //-------------namespace: System.Windows----------------
  ///<summary>
  ///  预计可以收到事件通过 WeakEvent 模式的类提供事件侦听支持和 <see cref="T:System.Windows.WeakEventManager" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.IWeakEventListener')]
  DNIWeakEventListener = interface(DDN.mscorlib.DNObject)
  ['{A2047CE1-23C1-39A8-9036-8B16A2D7AAFF}']
  { methods } 

    ///<summary>
    ///  从集中式的事件管理器接收事件。
    ///</summary>
    ///  <param name="managerType">
    ///  一种 <see cref="T:System.Windows.WeakEventManager" />
    ///  调用此方法。
    ///</param>
    ///  <param name="sender">
    ///  产生事件的对象。
    ///</param>
    ///  <param name="e">
    ///  事件数据。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果侦听器已处理该事件。
    ///  它被视为错误 <see cref="T:System.Windows.WeakEventManager" />
    ///  中处理 WPF 以注册侦听器不会处理的事件侦听器。
    ///  无论如何，该方法应返回 <see langword="false" />
    ///  如果它收到无法识别或处理的事件。
    ///</returns>
    function ReceiveWeakEvent(managerType: DDN.mscorlib.DNType; sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs): Boolean;

  end;

  //-------------namespace: System.Windows.Markup----------------
  ///<summary>
  ///  从标记扩展，其中的输出是与目标属性的另一个属性，类型提供类型，由此可以声明表达式 （或另一个类） 可以接收的机制。
  ///  不要将用于 .NET Framework 4 实现; 请参阅备注。
  ///</summary>
  [DNTypeName('System.Windows.Markup.IReceiveMarkupExtension')]
  DNIReceiveMarkupExtension = interface(DDN.mscorlib.DNObject)
  ['{41069949-88FE-3F3B-B5F8-8E9554D5B722}']
  { methods } 

    ///<summary>
    ///  提供了用于提供属性值的标记扩展的处理。
    ///  不要将用于 .NET Framework 4 实现; 请参阅备注中的 <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />
    ///  。
    ///</summary>
    ///  <param name="property">
    ///  目标属性的名称。
    ///</param>
    ///  <param name="markupExtension">
    ///  传入的数据标记扩展实例。
    ///</param>
    ///  <param name="serviceProvider">
    ///  可以提供处理的属性值的标记扩展数据时应执行的其他服务。
    ///</param>
    procedure ReceiveMarkupExtension(&property: string; markupExtension: DDN.System.Xaml.DNMarkupExtension; serviceProvider: DDN.mscorlib.DNIServiceProvider);

  end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyFilterAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5C6A6AFF-3F9A-519B-99A5-312074939030}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="filter">
    ///  描述此属性筛选器的选项。
    ///</param>
    {class} function init(filter: DNPropertyFilterOptions): DNPropertyFilterAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNPropertyFilterAttribute;

  { static fields } 

    ///<summary>
    ///  此成员支持 Microsoft .NET Framework 基础结构，但不能在代码中直接使用。
    ///</summary>
    {class} property &Default: DNPropertyFilterAttribute read __fakeFieldGet_Default;

  end;

  ///<summary>
  ///  指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.ComponentModel.PropertyFilterAttribute')]
  DNPropertyFilterAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{89E6532A-978D-3CF3-BAE6-40AC4B9FECE6}']
  { getters & setters } 

    function get_Filter: DNPropertyFilterOptions;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework 特性 是否与指定对象相等。
    ///</summary>
    ///  <param name="value">
    ///  要与此比较的对象 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see langword="true" />
    ///  等于当前的 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  ，则为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework 特性 的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号的 32 位整数值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回一个值，该值指示是否将属性筛选器的当前选项 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework 特性 匹配所提供的对象的属性筛选器选项。
    ///</summary>
    ///  <param name="value">
    ///  要比较的对象。
    ///  此对象预期为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果存在匹配项;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Match(value: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此筛选器选项 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />
    ///  .NET Framework 特性。
    ///</summary>
    ///<returns>
    ///  属性筛选器选项。
    ///</returns>
    property Filter: DNPropertyFilterOptions read get_Filter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPropertyFilterAttribute = class(TDNGenericImport<DNPropertyFilterAttributeClass, DNPropertyFilterAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNMediaPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{3E806C3A-A5EB-592A-A223-141B443C9800}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  的新实例。
    ///</summary>
    ///  <param name="action"><see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值之一。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNMediaPermissionAttribute;

  end;

  ///<summary>
  ///  允许的操作安全 <see cref="T:System.Security.Permissions.MediaPermission" />
  ///  要应用于代码中使用声明性安全。
  ///</summary>
  [DNTypeName('System.Security.Permissions.MediaPermissionAttribute')]
  DNMediaPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{20716BD3-162B-3692-A528-2763E0E68CA2}']
  { getters & setters } 

    function get_Audio: DNMediaPermissionAudio;
    procedure set_Audio(value: DNMediaPermissionAudio);
    function get_Video: DNMediaPermissionVideo;
    procedure set_Video(value: DNMediaPermissionVideo);
    function get_Image: DNMediaPermissionImage;
    procedure set_Image(value: DNMediaPermissionImage);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  创建并返回一个新的 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此属性对应的 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  的音频权限级别。
    ///</summary>
    ///<returns><see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  的状态。
    ///</returns>
    property Audio: DNMediaPermissionAudio read get_Audio write set_Audio;
    ///<summary>
    ///  为 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  获取或设置视频权限级别。
    ///</summary>
    ///<returns><see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  的状态。
    ///</returns>
    property Video: DNMediaPermissionVideo read get_Video write set_Video;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.Permissions.MediaPermissionAttribute" />
    ///  的图像权限级别。
    ///</summary>
    ///<returns><see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  的状态。
    ///</returns>
    property Image: DNMediaPermissionImage read get_Image write set_Image;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMediaPermissionAttribute = class(TDNGenericImport<DNMediaPermissionAttributeClass, DNMediaPermissionAttribute>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNWebBrowserPermissionAttributeClass = interface(DDN.mscorlib.DNCodeAccessSecurityAttributeClass)
  ['{BE1B7E1E-4DC9-51AF-BBD9-3E380EF70299}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />
    ///  初始化 <see cref="T:System.Security.Permissions.SecurityAction" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="action"><see cref="T:System.Security.Permissions.SecurityAction" />
    ///  值之一。
    ///</param>
    {class} function init(action: DDN.mscorlib.DNSecurityAction): DNWebBrowserPermissionAttribute;

  end;

  ///<summary>
  ///  允许的操作安全 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
  ///  要应用于代码中使用声明性安全。
  ///</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermissionAttribute')]
  DNWebBrowserPermissionAttribute = interface(DDN.mscorlib.DNCodeAccessSecurityAttribute)
  ['{212C7429-8573-3B2C-B712-AF5F64215B4C}']
  { getters & setters } 

    function get_Level: DNWebBrowserPermissionLevel;
    procedure set_Level(value: DNWebBrowserPermissionLevel);
    function get_Action: DDN.mscorlib.DNSecurityAction;
    procedure set_Action(value: DDN.mscorlib.DNSecurityAction);
    function get_Unrestricted: Boolean;
    procedure set_Unrestricted(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  创建并返回 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  类的新实例。
    ///</summary>
    ///<returns>
    ///  与安全声明相对应的 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  。
    ///</returns>
    function CreatePermission: DDN.mscorlib.DNIPermission;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  为 <see cref="T:System.Security.Permissions.WebBrowserPermissionAttribute" />
    ///  获取或设置当前 Web 浏览器权限级别。
    ///</summary>
    ///<returns>
    ///  当前 Web 浏览器权限级别的状态。
    ///</returns>
    property Level: DNWebBrowserPermissionLevel read get_Level write set_Level;
    property Action: DDN.mscorlib.DNSecurityAction read get_Action write set_Action;
    property Unrestricted: Boolean read get_Unrestricted write set_Unrestricted;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebBrowserPermissionAttribute = class(TDNGenericImport<DNWebBrowserPermissionAttributeClass, DNWebBrowserPermissionAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{589E7A88-D6A6-55A2-8BBA-64D68D891597}']
  end;

  ///<summary>
  ///  为报告附加属性使用范围的 .NET Framework 特性 提供基类。
  ///</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableAttribute')]
  DNAttachedPropertyBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8B67D7A8-1467-3116-8A9D-6446AA4C2271}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableAttributeClass, DNAttachedPropertyBrowsableAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableForTypeAttributeClass = interface(DNAttachedPropertyBrowsableAttributeClass)
  ['{966CA66C-7D48-5EF7-BF48-9733D863C3B0}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  类，使用所提供 <paramref name="targetType" />
    ///  。
    ///</summary>
    ///  <param name="targetType">
    ///  附加属性的使用范围的预期的类型，这 .NET Framework 特性 适用。
    ///</param>
    {class} function init(targetType: DDN.mscorlib.DNType): DNAttachedPropertyBrowsableForTypeAttribute;

  end;

  ///<summary>
  ///  指定附加属性只能供从指定类型派生的元素浏览。
  ///</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableForTypeAttribute')]
  DNAttachedPropertyBrowsableForTypeAttribute = interface(DNAttachedPropertyBrowsableAttribute)
  ['{E71003C1-724B-3F32-9CF6-0418B4D65F6B}']
  { getters & setters } 

    function get_TargetType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定是否当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework 特性 是否与指定对象相等。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see langword="true" />
    ///  等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  ，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework 特性 的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位无符号整数值。
    ///</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基类型，该类型设定此 .NET Framework 特性 应用的附加属性的使用范围。
    ///</summary>
    ///<returns>
    ///  请求的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property TargetType: DDN.mscorlib.DNType read get_TargetType;
    ///<summary>
    ///  获取此的唯一类型标识符 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  .NET Framework 特性。
    ///</summary>
    ///<returns>
    ///  一个对象，它的唯一标识符 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />
    ///  。
    ///</returns>
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableForTypeAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableForTypeAttributeClass, DNAttachedPropertyBrowsableForTypeAttribute>) end;

  //-------------namespace: System.Windows----------------
  DNAttachedPropertyBrowsableWhenAttributePresentAttributeClass = interface(DNAttachedPropertyBrowsableAttributeClass)
  ['{5DC529B1-399D-5FEF-8EEE-9F46F6059ECE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="attributeType"><see cref="T:System.Type" />
    ///  的  .NET Framework 特性 还必须按顺序可在类上浏览的附加属性的类上应用，其中 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  应用...
    ///</param>
    {class} function init(attributeType: DDN.mscorlib.DNType): DNAttachedPropertyBrowsableWhenAttributePresentAttribute;

  end;

  ///<summary>
  ///  指定附加的属性仅在一个元素上可浏览，该元素还具有另一个特定 .NET Framework 特性 应用到其类定义。
  ///</summary>
  [DNTypeName('System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute')]
  DNAttachedPropertyBrowsableWhenAttributePresentAttribute = interface(DNAttachedPropertyBrowsableAttribute)
  ['{E9A4B603-7C3D-3914-9782-EF145C185806}']
  { getters & setters } 

    function get_AttributeType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  确定是否当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  .NET Framework 特性 是否与指定对象相等。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see langword="true" />
    ///  等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  ，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />
    ///  .NET Framework 特性 的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位无符号整数值。
    ///</returns>
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的类型  .NET Framework 特性 还必须在类上应用程序。
    ///</summary>
    ///<returns>
    ///  .NET Framework 特性 类型。
    ///</returns>
    property AttributeType: DDN.mscorlib.DNType read get_AttributeType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNAttachedPropertyBrowsableWhenAttributePresentAttribute = class(TDNGenericImport<DNAttachedPropertyBrowsableWhenAttributePresentAttributeClass, DNAttachedPropertyBrowsableWhenAttributePresentAttribute>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNDesignerSerializationOptionsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C614AE2D-6B8D-5955-B839-555F3B70FDE9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="designerSerializationOptions">
    ///  指定该属性是要序列化的方式。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="designerSerializationOptions" />
    ///  不是有效的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" />
    ///  值。
    ///</exception>
    {class} function init(designerSerializationOptions: DNDesignerSerializationOptions): DNDesignerSerializationOptionsAttribute;

  end;

  ///<summary>
  ///  指定属性的序列化标志。
  ///</summary>
  [DNTypeName('System.Windows.Markup.DesignerSerializationOptionsAttribute')]
  DNDesignerSerializationOptionsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6E86F54F-B211-38C9-A5CF-985DE37D20BC}']
  { getters & setters } 

    function get_DesignerSerializationOptions: DNDesignerSerializationOptions;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" />
    ///  设置的属性。
    ///</summary>
    ///<returns>
    ///  序列化选项，作为枚举的值。
    ///</returns>
    property DesignerSerializationOptions: DNDesignerSerializationOptions read get_DesignerSerializationOptions;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignerSerializationOptionsAttribute = class(TDNGenericImport<DNDesignerSerializationOptionsAttributeClass, DNDesignerSerializationOptionsAttribute>) end;

  //-------------namespace: System.Windows.Media----------------
  DNDisableDpiAwarenessAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{331764CA-3753-540F-9BEA-492C3A6F8E9E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />
    ///  的新实例。
    ///</summary>
    {class} function init: DNDisableDpiAwarenessAttribute;

  end;

  ///<summary>
  ///  允许 WPF 禁用以每英寸点数 (dpi) 适用于所有用户界面元素的感知的应用程序。
  ///</summary>
  [DNTypeName('System.Windows.Media.DisableDpiAwarenessAttribute')]
  DNDisableDpiAwarenessAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{79EE8AC3-DCDB-35A7-9CE9-2A27F838933E}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDisableDpiAwarenessAttribute = class(TDNGenericImport<DNDisableDpiAwarenessAttributeClass, DNDisableDpiAwarenessAttribute>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNSortDescription>)
  ['{3F82F2F0-1F83-5D26-902D-64C828F77F00}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.SortDescriptionCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSortDescriptionCollection;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNSortDescriptionCollection;

  { static fields } 

    ///<summary>
    ///  获取 <see cref="T:System.ComponentModel.SortDescriptionCollection" />
    ///  的不可更改的空实例。
    ///</summary>
    {class} property Empty: DNSortDescriptionCollection read __fakeFieldGet_Empty;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.ComponentModel.SortDescription" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.ComponentModel.SortDescriptionCollection')]
  DNSortDescriptionCollection = interface(DDN.mscorlib.DNCollection<DNSortDescription>)
  ['{4D31FCBB-7A91-3E0F-9E3A-E30A76D1F74A}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure CopyTo(&array: TArray<DNSortDescription>; index: Int32);
    function &Contains(item: DNSortDescription): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNSortDescription>;
    function IndexOf(item: DNSortDescription): Int32;
    procedure Insert(index: Int32; item: DNSortDescription);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNSortDescriptionCollection = class(TDNGenericImport<DNSortDescriptionCollectionClass, DNSortDescriptionCollection>) end;

  //-------------namespace: System.ComponentModel----------------
  DNGroupDescriptionClass = interface(DNObjectClass)
  ['{072B00B2-AA86-5257-A309-232B0CE079AD}']
  end;

  ///<summary>
  ///  为描述如何将集合中的项划分到各个组中的类型提供抽象基类。
  ///</summary>
  [DNTypeName('System.ComponentModel.GroupDescription')]
  DNGroupDescription = interface(DDN.System.DNINotifyPropertyChanged)
  ['{B052C46C-1867-3D59-AD83-439B670DCE0F}']
  { getters & setters } 

    function get_GroupNames: DDN.System.DNObservableCollection<DDN.mscorlib.DNObject>;
    function get_SortDescriptions: DNSortDescriptionCollection;
    function get_CustomSort: DDN.mscorlib.DNIComparer;
    procedure set_CustomSort(value: DDN.mscorlib.DNIComparer);

  { methods } 

    ///<summary>
    ///  返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />
    ///  属性的有效值。
    ///</summary>
    ///<returns>
    ///  如果应序列化 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />
    ///  属性值，则返回 <see langword="true" />
    ///  ；否则返回 false。
    ///</returns>
    function ShouldSerializeGroupNames: Boolean;
    ///<summary>
    ///  返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />
    ///  属性的有效值。
    ///</summary>
    ///<returns>
    ///  如果应当序列化 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />
    ///  属性值，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeSortDescriptions: Boolean;
    ///<summary>
    ///  返回一个值，该值指示组名称和项名称是否匹配，从而指示项是否属于组。
    ///</summary>
    ///  <param name="groupName">
    ///  要检查的组名称。
    ///</param>
    ///  <param name="itemName">
    ///  要检查的项名称。
    ///</param>
    ///<returns>
    ///  如果名称匹配并且项属于组，则为 <see langword="true" />
    ///  ，否则为 <see langword="false" />
    ///  。
    ///</returns>
    function NamesMatch(groupName: DDN.mscorlib.DNObject; itemName: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回给定项的组名称。
    ///</summary>
    ///  <param name="item">
    ///  要返回其组名称的项。
    ///</param>
    ///  <param name="level">
    ///  分组级别。
    ///</param>
    ///  <param name="culture">
    ///  要提供给转换器的 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///<returns>
    ///  给定项的组名称。
    ///</returns>
    function GroupNameFromItem(item: DDN.mscorlib.DNObject; level: Int32; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。
    ///</summary>
    ///<returns>
    ///  名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。
    ///</returns>
    property GroupNames: DDN.System.DNObservableCollection<DDN.mscorlib.DNObject> read get_GroupNames;
    ///<summary>
    ///  获取要按照其对组进行排序的排序条件集合。
    ///</summary>
    ///<returns>
    ///  要按照其对组进行排序的排序条件集合。
    ///</returns>
    property SortDescriptions: DNSortDescriptionCollection read get_SortDescriptions;
    ///<summary>
    ///  获取或设置使用实现 <see cref="T:System.Collections.IComparer" />
    ///  的对象对组进行排序的自定义比较器。
    ///</summary>
    ///<returns>
    ///  使用实现 <see cref="T:System.Collections.IComparer" />
    ///  的对象对组进行排序的自定义比较器。
    ///</returns>
    property CustomSort: DDN.mscorlib.DNIComparer read get_CustomSort write set_CustomSort;
  end;

  TDNGroupDescription = class(TDNGenericImport<DNGroupDescriptionClass, DNGroupDescription>) end;

  //-------------namespace: System.ComponentModel----------------
  DNItemPropertyInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1535B3A4-09B3-50E4-8AA4-CA58A3003A7E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.ItemPropertyInfo" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  属性的名称。
    ///</param>
    ///  <param name="type">
    ///  属性的类型。
    ///</param>
    ///  <param name="descriptor">
    ///  包含有关属性的其他信息的对象。
    ///</param>
    {class} function init(name: string; &type: DDN.mscorlib.DNType; descriptor: DDN.mscorlib.DNObject): DNItemPropertyInfo;

  end;

  ///<summary>
  ///  包含有关属性的信息。
  ///</summary>
  [DNTypeName('System.ComponentModel.ItemPropertyInfo')]
  DNItemPropertyInfo = interface(DDN.mscorlib.DNObject)
  ['{208737A0-8321-3C1B-8FFC-98636B44AB07}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_Descriptor: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取属性的名称。
    ///</summary>
    ///<returns>
    ///  属性的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取属性的类型。
    ///</summary>
    ///<returns>
    ///  属性的类型。
    ///</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>
    ///  获取一个对象，包含有关属性的其他信息。
    ///</summary>
    ///<returns>
    ///  包含有关属性的其他信息的对象。
    ///</returns>
    property Descriptor: DDN.mscorlib.DNObject read get_Descriptor;
  end;

  TDNItemPropertyInfo = class(TDNGenericImport<DNItemPropertyInfoClass, DNItemPropertyInfo>) end;

  //-------------namespace: System.ComponentModel----------------
  DNDependencyPropertyDescriptorClass = interface(DNObjectClass)
  ['{D32F3FD0-BCCE-5AEE-9BE7-78A506C8514B}']
  { static methods } 

    ///<summary>
    ///  返回所提供的 <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</summary>
    ///  <param name="property">
    ///  要检查的 <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="property" />
    ///  描述的属性为依赖属性，则返回有效 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///  否则返回 <see langword="null" />
    ///<see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</returns>
    {class} function FromProperty(&property: DDN.System.DNPropertyDescriptor): DNDependencyPropertyDescriptor; overload;
    ///<summary>
    ///  针对提供的依赖属性和目标类型返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</summary>
    ///  <param name="dependencyProperty">
    ///  依赖项属性的标识符。
    ///</param>
    ///  <param name="targetType">
    ///  在其中设置属性的对象的类型。
    ///</param>
    ///<returns>
    ///  提供的依赖属性的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</returns>
    {class} function FromProperty(dependencyProperty: DNDependencyProperty; targetType: DDN.mscorlib.DNType): DNDependencyPropertyDescriptor; overload;
    ///<summary>
    ///  为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  依赖属性或附加属性的已注册的名称。
    ///</param>
    ///  <param name="ownerType">
    ///  该对象的 <see cref="T:System.Type" />
    ///  ，它拥有属性定义。
    ///</param>
    ///  <param name="targetType">
    ///  要为其设置属性的对象的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</returns>
    {class} function FromName(name: string; ownerType: DDN.mscorlib.DNType; targetType: DDN.mscorlib.DNType): DNDependencyPropertyDescriptor; overload;
    ///<summary>
    ///  为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  依赖属性或附加属性的已注册的名称。
    ///</param>
    ///  <param name="ownerType">
    ///  该对象的 <see cref="T:System.Type" />
    ///  ，它拥有属性定义。
    ///</param>
    ///  <param name="targetType">
    ///  要为其设置属性的对象的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="ignorePropertyType">
    ///  指定以忽略属性类型。
    ///</param>
    ///<returns>
    ///  请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  。
    ///</returns>
    {class} function FromName(name: string; ownerType: DDN.mscorlib.DNType; targetType: DDN.mscorlib.DNType; ignorePropertyType: Boolean): DNDependencyPropertyDescriptor; overload;

  end;

  ///<summary>
  ///  提供用于说明依赖属性的其他属性特征的 <see cref="T:System.ComponentModel.PropertyDescriptor" />
  ///  的扩展。
  ///</summary>
  [DNTypeName('System.ComponentModel.DependencyPropertyDescriptor')]
  DNDependencyPropertyDescriptor = interface(DNObject)
  ['{BD362B95-A4D3-3A87-9B76-81675EA7454E}']
  { getters & setters } 

    function get_DependencyProperty: DNDependencyProperty;
    function get_IsAttached: Boolean;
    function get_Metadata: DNPropertyMetadata;
    function get_ComponentType: DDN.mscorlib.DNType;
    function get_IsReadOnly: Boolean;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_Attributes: DDN.System.DNAttributeCollection;
    function get_Category: string;
    function get_Description: string;
    function get_DesignTimeOnly: Boolean;
    function get_DisplayName: string;
    function get_Converter: DDN.System.DNTypeConverter;
    function get_IsBrowsable: Boolean;
    function get_IsLocalizable: Boolean;
    function get_SupportsChangeEvents: Boolean;
    function get_DesignerCoerceValueCallback: DNCoerceValueCallback;
    procedure set_DesignerCoerceValueCallback(value: DNCoerceValueCallback);
    function get_SerializationVisibility: DDN.System.DNDesignerSerializationVisibility;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  比较两个 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  实例是否相等。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  要与当前实例进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果这些值是等效的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  将此实例的值转换为其等效的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="P:System.ComponentModel.MemberDescriptor.Name" />
    ///  值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  返回是否会重置对象更改它的值。
    ///</summary>
    ///  <param name="component">
    ///  要测试其重置功能的组件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果重置组件，更改其值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanResetValue(component: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回在组件上的属性的当前值。
    ///</summary>
    ///  <param name="component">
    ///  组件实例。
    ///</param>
    ///<returns>
    ///  请求的值。
    ///</returns>
    function GetValue(component: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将该组件的此属性的值重置为默认值。
    ///</summary>
    ///  <param name="component">
    ///  具有要重置为默认值的属性值的组件。
    ///</param>
    procedure ResetValue(component: DDN.mscorlib.DNObject);
    ///<summary>
    ///  将该组件的值设置为不同的值。
    ///</summary>
    ///  <param name="component">
    ///  要设置的属性值具有的组件。
    ///</param>
    ///  <param name="value">
    ///  新值。
    ///</param>
    procedure SetValue(component: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  指示是否需要通过序列化过程中保留此属性的值。
    ///</summary>
    ///  <param name="component">
    ///  具有要检查其持久性的属性的组件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果应保留该属性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function ShouldSerializeValue(component: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  支持此属性更改时得到通知其他对象。
    ///</summary>
    ///  <param name="component">
    ///  要添加的处理程序的组件。
    ///</param>
    ///  <param name="handler">
    ///  要作为侦听器添加的委托。
    ///</param>
    procedure AddValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    ///<summary>
    ///  支持此属性更改时得到通知其他对象。
    ///</summary>
    ///  <param name="component">
    ///  要添加的处理程序的组件。
    ///</param>
    ///  <param name="handler">
    ///  要作为侦听器添加的委托。
    ///</param>
    procedure RemoveValueChanged(component: DDN.mscorlib.DNObject; handler: DDN.mscorlib.DNEventHandler);
    ///<summary>
    ///  返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  。
    ///</summary>
    ///  <param name="instance">
    ///  要为其获取属性的组件。
    ///</param>
    ///  <param name="filter">
    ///  要用作筛选器的 <see cref="T:System.Attribute" />
    ///  类型数组。
    ///</param>
    ///<returns>
    ///  具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />
    ///  。
    ///</returns>
    function GetChildProperties(instance: DDN.mscorlib.DNObject; filter: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    ///<summary>
    ///  获取指定类型的编辑器。
    ///</summary>
    ///  <param name="editorBaseType">
    ///  编辑器，用于区分某个属性支持的多个编辑器的基类型。
    ///</param>
    ///<returns>
    ///  请求的编辑器类型的实例或 <see langword="null" />
    ///  如果找不到一个编辑器。
    ///</returns>
    function GetEditor(editorBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function GetChildProperties: DDN.System.DNPropertyDescriptorCollection; overload;
    function GetChildProperties(filter: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetChildProperties(instance: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  返回依赖属性标识符。
    ///</summary>
    ///<returns>
    ///  依赖属性标识符。
    ///</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
    ///<summary>
    ///  获取一个值，该值指示是否属性注册为附加属性并通过附加用法进行使用。
    ///</summary>
    ///<returns>
    ///  如果属性是附加属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAttached: Boolean read get_IsAttached;
    ///<summary>
    ///  获取与依赖属性关联的元数据。
    ///</summary>
    ///<returns>
    ///  依赖属性元数据。
    ///</returns>
    property Metadata: DNPropertyMetadata read get_Metadata;
    ///<summary>
    ///  获取此属性绑定到的组件的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  ，它表示此属性绑定到的组件的类型。
    ///  当 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" />
    ///  或 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  被调用，指定的对象可能是这种类型的实例。
    ///</returns>
    property ComponentType: DDN.mscorlib.DNType read get_ComponentType;
    ///<summary>
    ///  获取一个值，该值指示此属性只读的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取依赖属性的表示的 <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///<returns>
    ///  依赖属性的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>
    ///  获取此成员的特性的集合。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.AttributeCollection" />
    ///  的特性集合。
    ///</returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取该成员所属的类别的名称中指定 <see cref="T:System.ComponentModel.CategoryAttribute" />
    ///  。
    ///</summary>
    ///<returns>
    ///  该成员所属的类别的名称。
    ///  如果没有任何 <see cref="T:System.ComponentModel.CategoryAttribute" />
    ///  , ，类别名称设置为默认类别 <see langword="Misc" />
    ///  。
    ///</returns>
    property Category: string read get_Category;
    ///<summary>
    ///  获取在指定将成员的说明 <see cref="T:System.ComponentModel.DescriptionAttribute" />
    ///  。
    ///</summary>
    ///<returns>
    ///  成员的说明。
    ///  如果没有任何 <see cref="T:System.ComponentModel.DescriptionAttribute" />
    ///  , ，属性值设置为默认情况下，将为空字符串 ("")。
    ///</returns>
    property Description: string read get_Description;
    ///<summary>
    ///  获取是否应仅在设计时，指定在设置此成员 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此成员应设置只能在设计时; <see langword="false" />
    ///  如果成员可以在运行时设置。
    ///  如果没有任何 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />
    ///  , ，则返回值是默认值，即 <see langword="false" />
    ///  。
    ///</returns>
    property DesignTimeOnly: Boolean read get_DesignTimeOnly;
    ///<summary>
    ///  获取可以在一个窗口，如属性窗口中显示的名称。
    ///</summary>
    ///<returns>
    ///  要显示的属性的名称。
    ///</returns>
    property DisplayName: string read get_DisplayName;
    ///<summary>
    ///  获取此属性的类型转换器。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.ComponentModel.TypeConverter" />
    ///  用于将转换 <see cref="T:System.Type" />
    ///  此属性。
    ///</returns>
    property Converter: DDN.System.DNTypeConverter read get_Converter;
    ///<summary>
    ///  获取一个值，该值指示的值 <see cref="T:System.ComponentModel.BrowsableAttribute" />
    ///  的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.ComponentModel.BrowsableAttribute" />
    ///  指定的属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsBrowsable: Boolean read get_IsBrowsable;
    ///<summary>
    ///  获取一个值，该值指示是否应本地化该属性，根据中的指定 <see cref="T:System.ComponentModel.LocalizableAttribute" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该成员标记有 <see cref="T:System.ComponentModel.LocalizableAttribute" />
    ///  构造函数的值为 true，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLocalizable: Boolean read get_IsLocalizable;
    ///<summary>
    ///  指示此属性的值更改通知可能源自外部属性描述符，例如源自组件本身，还是是否通知只源自直接调用对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此属性的通知可能源自外部属性描述符，例如源自组件本身。
    ///<see langword="false" />
    ///  如果通知仅源自对所做的直接调用 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />
    ///  。
    ///</returns>
    property SupportsChangeEvents: Boolean read get_SupportsChangeEvents;
    ///<summary>
    ///  获取或设置设计器修改依赖项属性的有效值，然后将依赖项属性值存储在依赖项属性引擎将使用的回调。
    ///</summary>
    ///<returns>
    ///  设计人员使用来修改依赖项属性的有效值，然后将依赖项属性值存储在依赖项属性引擎回调。
    ///</returns>
    property DesignerCoerceValueCallback: DNCoerceValueCallback read get_DesignerCoerceValueCallback write set_DesignerCoerceValueCallback;
    property SerializationVisibility: DDN.System.DNDesignerSerializationVisibility read get_SerializationVisibility;
    property Name: string read get_Name;
  end;

  TDNDependencyPropertyDescriptor = class(TDNGenericImport<DNDependencyPropertyDescriptorClass, DNDependencyPropertyDescriptor>) end;

  //-------------namespace: System.Windows----------------
  DNExpressionConverterClass = interface(DNObjectClass)
  ['{72281B02-4880-5234-A8C6-AAA267714B94}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.ExpressionConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNExpressionConverter;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.Windows.Expression" />
  ///  与其他类型。
  ///</summary>
  [DNTypeName('System.Windows.ExpressionConverter')]
  DNExpressionConverter = interface(DNObject)
  ['{5E80B855-1CDF-30F1-A7D9-F660D45E6021}']
  { methods } 

    ///<summary>
    ///  返回此转换器是否可以将源对象传递给从转换 <see cref="T:System.Windows.Expression" />
    ///  对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示您希望从转换的类型。
    ///</param>
    ///<returns>
    ///  总是为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  返回此转换器是否可以转换 <see cref="T:System.Windows.Expression" />
    ///  对象传递给特定的目标类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示您希望将转换为的类型。
    ///</param>
    ///<returns>
    ///  总是为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  提供将值转换为<see cref="T:System.Windows.Expression" />
    ///  类型。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  始终将引发异常，并返回<see langword="null" />
    ///  。
    ///</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将转换提供 <see cref="T:System.Windows.Expression" />
    ///  为指定类型的对象。
    ///</summary>
    ///  <param name="context">
    ///  一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />
    ///  ，用于提供格式上下文。
    ///</param>
    ///  <param name="culture"><see cref="T:System.Globalization.CultureInfo" />
    ///  要用作当前区域性。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  一个 <see cref="T:System.Type" />
    ///  ，表示您希望将转换为的类型。
    ///</param>
    ///<returns>
    ///  始终将引发异常并返回 <see langword="null" />
    ///  。
    ///</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpressionConverter = class(TDNGenericImport<DNExpressionConverterClass, DNExpressionConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyConverterClass = interface(DNObjectClass)
  ['{41C66CB3-3BAE-5A6A-8DC7-AA608ED42834}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Input.Key" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNKeyConverter;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Windows.Input.Key" />
  ///  对象与其他类型。
  ///</summary>
  [DNTypeName('System.Windows.Input.KeyConverter')]
  DNKeyConverter = interface(DNObject)
  ['{3865113F-3FF6-3475-A398-F3552F183825}']
  { methods } 

    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Windows.Input.Key" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="source">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="source" />
    ///  不能转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Windows.Input.Key" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  的类型是 <paramref name="sourceType" />
    ///  ，则为 <see cref="T:System.String" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Input.Key" />
    ///  可以转换为指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  的类型是 <paramref name="destinationType" />
    ///  ，则为 <see cref="T:System.String" />
    ///  ；否则，为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Input.Key" />
    ///  到指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  不能转换为 <paramref name="destinationType" />
    ///  。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyConverter = class(TDNGenericImport<DNKeyConverterClass, DNKeyConverter>) end;

  //-------------namespace: System.Windows.Input----------------
  DNModifierKeysConverterClass = interface(DNObjectClass)
  ['{69F2EA22-7E62-5528-B1BF-205360C997E3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Input.ModifierKeysConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNModifierKeysConverter;

  { static methods } 

    ///<summary>
    ///  确定指定的值是否为有效 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  值。
    ///</summary>
    ///  <param name="modifierKeys">
    ///  要检查文件有效的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果输入是一个有效 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsDefinedModifierKeys(modifierKeys: DNModifierKeys): Boolean;

  end;

  ///<summary>
  ///  将转换 <see cref="T:System.Windows.Input.ModifierKeys" />
  ///  对象与其他类型。
  ///</summary>
  [DNTypeName('System.Windows.Input.ModifierKeysConverter')]
  DNModifierKeysConverter = interface(DNObject)
  ['{F6DA1D6C-511E-3DD9-8F7E-32BF2F79895B}']
  { methods } 

    ///<summary>
    ///  确定指定类型的对象是否可以转换为的一个实例 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="sourceType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="sourceType" />
    ///  是类型 <see cref="T:System.String" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  可以转换为指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="destinationType">
    ///  计算用于转换类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="destinationType" />
    ///  是类型 <see cref="T:System.String" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  , ，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="source">
    ///  要转换的对象。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="source" />
    ///  不能转换。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; source: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  到指定的类型，使用指定的上下文。
    ///</summary>
    ///  <param name="context">
    ///  提供有关从中调用此转换器的环境的信息的一种格式上下文。
    ///</param>
    ///  <param name="culture">
    ///  区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///  <param name="destinationType">
    ///  对象要转换为的类型。
    ///</param>
    ///<returns>
    ///  被转换的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="destinationType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="value" />
    ///  未映射到一个有效 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException">
    ///  无法转换 <paramref name="value" />
    ///  。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModifierKeysConverter = class(TDNGenericImport<DNModifierKeysConverterClass, DNModifierKeysConverter>) end;

  //-------------namespace: System.Windows----------------
  DNInt32RectConverterClass = interface(DNObjectClass)
  ['{DED00561-41DC-55B2-A7EA-EF6400B1DF87}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Int32RectConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInt32RectConverter;

  end;

  ///<summary>
  ///  其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Int32Rect" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Int32RectConverter')]
  DNInt32RectConverter = interface(DNObject)
  ['{6BB4BA26-6328-3F0C-8FCA-84D6516A32B4}']
  { methods } 

    ///<summary>
    ///  确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  正在计算的转换的源的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果类型可以转换为 <see cref="T:System.Windows.Int32Rect" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Int32Rect" />
    ///  可以转换为其他类型。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  所需类型这 <see cref="T:System.Windows.Int32Rect" />
    ///  转换进行评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Windows.Int32Rect" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换到指定的类型 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  若要在转换过程中考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Windows.Int32Rect" />
    ///  从转换创建 <paramref name="value" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Int32Rect" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  若要在转换过程中考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的类型 <see cref="T:System.Windows.Int32Rect" />
    ///  到。
    ///</param>
    ///<returns>
    ///  创建将该表达式转换的对象 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  时引发 <paramref name="value" />
    ///  是 <see langword="null" />
    ///  或者不是 <see cref="T:System.Windows.Int32Rect" />
    ///  , ，或者如果 <paramref name="destinationType" />
    ///  不是要转换的有效类型之一。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32RectConverter = class(TDNGenericImport<DNInt32RectConverterClass, DNInt32RectConverter>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixConverterClass = interface(DNObjectClass)
  ['{D978D67E-906C-5AEC-8846-F074D6A77D3B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Media.MatrixConverter" />
    ///  的新实例。
    ///</summary>
    {class} function init: DNMatrixConverter;

  end;

  ///<summary>
  ///  其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Media.Matrix" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Media.MatrixConverter')]
  DNMatrixConverter = interface(DNObject)
  ['{78D85CC9-B579-393D-B89A-6BC95DFF8515}']
  { methods } 

    ///<summary>
    ///  确定是否可以将对象从特定类型转换为的一个实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一种类型的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  正在计算的转换的源的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果类型可以转换为 <see cref="T:System.Windows.Media.Matrix" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Media.Matrix" />
    ///  可以转换为其他类型。
    ///</summary>
    ///  <param name="context">
    ///  一种类型的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  所需类型这 <see cref="T:System.Windows.Media.Matrix" />
    ///  转换进行评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Windows.Media.Matrix" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  一种类型的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Windows.Media.Matrix" />
    ///  从转换创建 <paramref name="value" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  指定的对象为 null 或为不能转换为一种 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Media.Matrix" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  一种类型的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的类型 <see cref="T:System.Windows.Media.Matrix" />
    ///  到。
    ///</param>
    ///<returns>
    ///  创建将该表达式转换的对象 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  是 null 或不是 <see cref="T:System.Windows.Media.Matrix" />
    ///  , ，或 <paramref name="destinationType" />
    ///  不是有效的转换类型。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrixConverter = class(TDNGenericImport<DNMatrixConverterClass, DNMatrixConverter>) end;

  //-------------namespace: System.Windows----------------
  DNPointConverterClass = interface(DNObjectClass)
  ['{60846F49-DDF5-5BAB-8376-76038E566B11}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.PointConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPointConverter;

  end;

  ///<summary>
  ///  其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Point" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.PointConverter')]
  DNPointConverter = interface(DNObject)
  ['{3E199910-B21A-3CD2-8698-4E4D060E1550}']
  { methods } 

    ///<summary>
    ///  确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  正在计算的转换的源的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果类型可以转换为 <see cref="T:System.Windows.Point" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Point" />
    ///  可以转换为其他类型。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  所需类型这 <see cref="T:System.Windows.Point" />
    ///  转换进行评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Windows.Point" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  若要在转换过程中考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Windows.Point" />
    ///  从转换创建 <paramref name="value" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Point" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Point" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  若要在转换过程中考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Windows.Point" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的类型 <see cref="T:System.Windows.Point" />
    ///  到。
    ///</param>
    ///<returns>
    ///  创建将该表达式转换的对象 <see cref="T:System.Windows.Point" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  时引发 <paramref name="value" />
    ///  是 <see langword="null" />
    ///  或者不是 <see cref="T:System.Windows.Point" />
    ///  , ，或者如果 <paramref name="destinationType" />
    ///  不是要转换的有效类型之一。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointConverter = class(TDNGenericImport<DNPointConverterClass, DNPointConverter>) end;

  //-------------namespace: System.Windows----------------
  DNRectConverterClass = interface(DNObjectClass)
  ['{114ED835-ED8E-5F46-AA0D-9962ADE0BE87}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.RectConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRectConverter;

  end;

  ///<summary>
  ///  将为其他类型的实例的实例与 <see cref="T:System.Windows.Rect" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.RectConverter')]
  DNRectConverter = interface(DNObject)
  ['{72CE60D6-AF4F-3B9A-86C2-F9F635576250}']
  { methods } 

    ///<summary>
    ///  确定是否可以将对象从给定类型转换为的一个实例 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  正在计算的转换的源的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果类型可以转换为 <see cref="T:System.Windows.Rect" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否 <see cref="T:System.Windows.Rect" />
    ///  可以转换为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  所需类型这 <see cref="T:System.Windows.Rect" />
    ///  转换进行评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Windows.Rect" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将转换指定的对象与 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  在转换时考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Windows.Rect" />
    ///  从转换创建 <paramref name="value" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException">
    ///  如果指定的对象为 NULL 或为不能转换为的类型，则引发 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</exception>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换 <see cref="T:System.Windows.Rect" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  提供执行转换所需的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  转换过程中考虑的区域性信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的类型 <see cref="T:System.Windows.Rect" />
    ///  到。
    ///</param>
    ///<returns>
    ///  创建将该表达式转换的对象 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///  - 或 -
    ///  <paramref name="value" />
    ///  不是 <see cref="T:System.Windows.Rect" />
    ///  。
    ///  - 或 -
    ///  <paramref name="destinationType" />
    ///  不是要转换的有效类型之一。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectConverter = class(TDNGenericImport<DNRectConverterClass, DNRectConverter>) end;

  //-------------namespace: System.Windows----------------
  DNSizeConverterClass = interface(DNObjectClass)
  ['{751F233D-67AF-5A04-AFD7-6994D9AB571D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.SizeConverter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSizeConverter;

  end;

  ///<summary>
  ///  将为其他类型的实例的实例与 <see cref="T:System.Windows.Size" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Windows.SizeConverter')]
  DNSizeConverter = interface(DNObject)
  ['{B4C3D0D4-E060-3CFF-B4BB-542C5FCB1E36}']
  { methods } 

    ///<summary>
    ///  确定是否可以将一个类从给定类型转换到的实例 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供有关组件的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  标识要计算以供转换的数据类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="sourceType" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Size" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定实例是否 <see cref="T:System.Windows.Size" />
    ///  可以转换为其他类型。
    ///</summary>
    ///  <param name="context">
    ///  提供有关组件的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  标识要计算以供转换的数据类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此实例的 <see cref="T:System.Windows.Size" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  尝试将指定的对象转换为的一个实例 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  提供有关组件的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  在转换过程中应考虑的区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  要转换的源对象。
    ///</param>
    ///<returns>
    ///  实例 <see cref="T:System.Windows.Size" />
    ///  ，它是从已转换创建 <paramref name="source" />
    ///  。
    ///</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  尝试将转换的一个实例 <see cref="T:System.Windows.Size" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  提供有关组件的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  在转换过程中应考虑的区域性特定信息。
    ///</param>
    ///  <param name="value">
    ///  实例 <see cref="T:System.Windows.Size" />
    ///  将转换。
    ///</param>
    ///  <param name="destinationType">
    ///  指示此实例的类型的 <see cref="T:System.Windows.Size" />
    ///  转换为。
    ///</param>
    ///<returns>
    ///  转换后的实例创建的对象 <see cref="T:System.Windows.Size" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"><paramref name="value" />
    ///  是 <see langword="null" />
    ///  或者不是实例 <see cref="T:System.Windows.Size" />
    ///  , ，或者如果 <paramref name="destinationType" />
    ///  不是有效的目标类型之一。
    ///</exception>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeConverter = class(TDNGenericImport<DNSizeConverterClass, DNSizeConverter>) end;

  //-------------namespace: System.Windows----------------
  DNVectorConverterClass = interface(DNObjectClass)
  ['{531D7ACE-B255-567B-82DF-1B4C47AD3E2F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Vector" />
    ///  结构的新实例。
    ///</summary>
    {class} function init: DNVectorConverter;

  end;

  ///<summary>
  ///  其他类型的实例之间来回进行转换 <see cref="T:System.Windows.Vector" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.VectorConverter')]
  DNVectorConverter = interface(DNObject)
  ['{A3C06C1A-1D75-38A8-8A12-6DF2838F1BCE}']
  { methods } 

    ///<summary>
    ///  指示是否可以将对象从给定类型转换到的实例 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="sourceType">
    ///  源 <see cref="T:System.Type" />
    ///  正被查询转换支持。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定类型的对象可以转换为 <see cref="T:System.Windows.Vector" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  确定是否的实例 <see cref="T:System.Windows.Vector" />
    ///  可以转换为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="destinationType">
    ///  所需类型这 <see cref="T:System.Windows.Vector" />
    ///  转换进行评估。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果实例 <see cref="T:System.Windows.Vector" />
    ///  可以转换为 <paramref name="destinationType" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    ///<summary>
    ///  将指定对象转换为 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  描述 <see cref="T:System.Globalization.CultureInfo" />
    ///  正在转换的类型。
    ///</param>
    ///  <param name="value">
    ///  要转换的对象。
    ///</param>
    ///<returns><see cref="T:System.Windows.Vector" />
    ///  从转换创建 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定 <see cref="T:System.Windows.Vector" />
    ///  为指定的类型。
    ///</summary>
    ///  <param name="context">
    ///  描述类型的上下文信息。
    ///</param>
    ///  <param name="culture">
    ///  描述 <see cref="T:System.Globalization.CultureInfo" />
    ///  正在转换的类型。
    ///</param>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</param>
    ///  <param name="destinationType">
    ///  要转换的类型 <see cref="T:System.Windows.Vector" />
    ///  到。
    ///</param>
    ///<returns>
    ///  创建将该表达式转换的对象 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</returns>
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorConverter = class(TDNGenericImport<DNVectorConverterClass, DNVectorConverter>) end;

  //-------------namespace: System.Diagnostics----------------
  DNPresentationTraceSourcesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7ACE599D-CF4E-519C-8938-579D0DE609FB}']
  { static getter & setter } 

    {class} function get_DependencyPropertySource: DDN.System.DNTraceSource;
    {class} function get_FreezableSource: DDN.System.DNTraceSource;
    {class} function get_NameScopeSource: DDN.System.DNTraceSource;
    {class} function get_RoutedEventSource: DDN.System.DNTraceSource;
    {class} function get_AnimationSource: DDN.System.DNTraceSource;
    {class} function get_DataBindingSource: DDN.System.DNTraceSource;
    {class} function get_DocumentsSource: DDN.System.DNTraceSource;
    {class} function get_ResourceDictionarySource: DDN.System.DNTraceSource;
    {class} function get_MarkupSource: DDN.System.DNTraceSource;
    {class} function get_HwndHostSource: DDN.System.DNTraceSource;
    {class} function get_ShellSource: DDN.System.DNTraceSource;

  { static fields getter & setter } 

   function __fakeFieldGet_TraceLevelProperty: DNDependencyProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  附加属性。
    ///</summary>
    {class} property TraceLevelProperty: DNDependencyProperty read __fakeFieldGet_TraceLevelProperty;

  { static methods } 

    ///<summary>
    ///  获取指定元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  附加属性值。
    ///</summary>
    ///  <param name="element">
    ///  要从中读取属性值的元素。
    ///</param>
    ///<returns>
    ///  元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  属性值。
    ///</returns>
    {class} function GetTraceLevel(element: DDN.mscorlib.DNObject): DNPresentationTraceLevel;
    ///<summary>
    ///  设置的值 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    ///  附加到指定元素的属性。
    ///</summary>
    ///  <param name="element">
    ///  要向其写入附加属性的元素。
    ///</param>
    ///  <param name="traceLevel">
    ///  所需的 <see cref="T:System.Diagnostics.PresentationTraceLevel" />
    ///  值。
    ///</param>
    {class} procedure SetTraceLevel(element: DDN.mscorlib.DNObject; traceLevel: DNPresentationTraceLevel);
    ///<summary>
    ///  刷新跟踪源，通过强制 app.config 文件以重新读取它。
    ///</summary>
    {class} procedure Refresh;

  { static propertys } 

    ///<summary>
    ///  获取依赖属性跟踪源。
    ///</summary>
    ///<returns>
    ///  依赖属性跟踪源。
    ///</returns>
    {class} property DependencyPropertySource: DDN.System.DNTraceSource read get_DependencyPropertySource;
    ///<summary>
    ///  获取可冻结的跟踪源。
    ///</summary>
    ///<returns>
    ///  Freezable 跟踪源。
    ///</returns>
    {class} property FreezableSource: DDN.System.DNTraceSource read get_FreezableSource;
    ///<summary>
    ///  获取名称范围跟踪源。
    ///</summary>
    ///<returns>
    ///  名称范围跟踪源。
    ///</returns>
    {class} property NameScopeSource: DDN.System.DNTraceSource read get_NameScopeSource;
    ///<summary>
    ///  获取路由事件跟踪源。
    ///</summary>
    ///<returns>
    ///  路由事件跟踪源。
    ///</returns>
    {class} property RoutedEventSource: DDN.System.DNTraceSource read get_RoutedEventSource;
    ///<summary>
    ///  获取动画跟踪源。
    ///</summary>
    ///<returns>
    ///  动画跟踪源。
    ///</returns>
    {class} property AnimationSource: DDN.System.DNTraceSource read get_AnimationSource;
    ///<summary>
    ///  获取数据绑定跟踪源。
    ///</summary>
    ///<returns>
    ///  数据绑定跟踪源。
    ///</returns>
    {class} property DataBindingSource: DDN.System.DNTraceSource read get_DataBindingSource;
    ///<summary>
    ///  获取文档跟踪源。
    ///</summary>
    ///<returns>
    ///  文档跟踪源。
    ///</returns>
    {class} property DocumentsSource: DDN.System.DNTraceSource read get_DocumentsSource;
    ///<summary>
    ///  获取资源字典跟踪源。
    ///</summary>
    ///<returns>
    ///  资源字典跟踪源。
    ///</returns>
    {class} property ResourceDictionarySource: DDN.System.DNTraceSource read get_ResourceDictionarySource;
    ///<summary>
    ///  获取标记跟踪源。
    ///</summary>
    ///<returns>
    ///  标记跟踪源。
    ///</returns>
    {class} property MarkupSource: DDN.System.DNTraceSource read get_MarkupSource;
    ///<summary>
    ///  获取一个 hwnd 承载跟踪源。
    ///</summary>
    ///<returns>
    ///  Hwnd 主机跟踪源。
    ///</returns>
    {class} property HwndHostSource: DDN.System.DNTraceSource read get_HwndHostSource;
    ///<summary>
    ///  获取命令行程序跟踪源。
    ///</summary>
    ///<returns>
    ///  命令行程序跟踪源。
    ///</returns>
    {class} property ShellSource: DDN.System.DNTraceSource read get_ShellSource;
  end;

  ///<summary>
  ///  提供专门针对 Windows Presentation Foundation (WPF) 应用程序的调试跟踪支持。
  ///</summary>
  [DNTypeName('System.Diagnostics.PresentationTraceSources')]
  DNPresentationTraceSources = interface(DDN.mscorlib.DNObject)
  ['{1FB0A883-23AE-3A94-AD1E-7FD02AE8CF58}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPresentationTraceSources = class(TDNGenericImport<DNPresentationTraceSourcesClass, DNPresentationTraceSources>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D5249D4F-7113-5338-B171-44CB8AC67A87}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCurrentChangingEventArgs; overload;
    ///<summary>
    ///  使用指定的 <paramref name="isCancelable" />
    ///  值初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="isCancelable">
    ///  指示是否可取消事件的值。
    ///</param>
    {class} function init(isCancelable: Boolean): DNCurrentChangingEventArgs; overload;

  end;

  ///<summary>
  ///  提供有关 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
  ///  事件的信息。
  ///</summary>
  [DNTypeName('System.ComponentModel.CurrentChangingEventArgs')]
  DNCurrentChangingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD0DE444-65E7-3DCE-868D-F46694E861F3}']
  { getters & setters } 

    function get_IsCancelable: Boolean;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示事件是否可取消。
    ///</summary>
    ///<returns>
    ///  如果事件可取消，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property IsCancelable: Boolean read get_IsCancelable;
    ///<summary>
    ///  获取或设置一个值，它指示是否取消事件。
    ///</summary>
    ///<returns>
    ///  如果要取消事件，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  如果 <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" />
    ///  的值为 <see langword="false" />
    ///  。
    ///</exception>
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNCurrentChangingEventArgs = class(TDNGenericImport<DNCurrentChangingEventArgsClass, DNCurrentChangingEventArgs>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNSignatureVerificationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{C5635637-753B-5307-97C3-F6D52F794203}']
  end;

  ///<summary>
  ///  指定事件参数提供给 <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.SignatureVerificationEventArgs')]
  DNSignatureVerificationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1F5ADE43-CE21-3DA2-9F10-6ED4D16BB050}']
  { getters & setters } 

    function get_Signature: DNPackageDigitalSignature;
    function get_VerifyResult: DNVerifyResult;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要验证数字签名。
    ///</summary>
    ///<returns>
    ///  要验证数字签名。
    ///</returns>
    property Signature: DNPackageDigitalSignature read get_Signature;
    ///<summary>
    ///  获取签名验证错误。
    ///</summary>
    ///<returns>
    ///  签名验证错误。
    ///</returns>
    property VerifyResult: DNVerifyResult read get_VerifyResult;
  end;

  TDNSignatureVerificationEventArgs = class(TDNGenericImport<DNSignatureVerificationEventArgsClass, DNSignatureVerificationEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4CE50468-3B58-5443-8EE1-D4B277BA19C3}']
  end;

  ///<summary>
  ///  提供事件数据供 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  相关的事件。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherEventArgs')]
  DNDispatcherEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{19265382-AC07-3B05-8935-325193B3B40E}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与此事件关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherEventArgs = class(TDNGenericImport<DNDispatcherEventArgsClass, DNDispatcherEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionEventArgsClass = interface(DNDispatcherEventArgsClass)
  ['{F751C5B1-5A3E-5CA9-B1D7-593024F0F674}']
  end;

  ///<summary>
  ///  将提供数据供 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///<see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionEventArgs')]
  DNDispatcherUnhandledExceptionEventArgs = interface(DNDispatcherEventArgs)
  ['{35CD6937-DB5C-32CB-BBF7-E1F9BC201095}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取执行的代码通过调度程序时引发的异常。
    ///</summary>
    ///<returns>
    ///  异常。
    ///</returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>
    ///  获取或设置是否已处理的异常事件。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果处理了该异常;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Handled: Boolean read get_Handled write set_Handled;
    ///<summary><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与此事件关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionEventArgsClass, DNDispatcherUnhandledExceptionEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherUnhandledExceptionFilterEventArgsClass = interface(DNDispatcherEventArgsClass)
  ['{E8F12DA3-4148-575A-8DE1-D12088C7DAE7}']
  end;

  ///<summary>
  ///  将提供数据供 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///<see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs')]
  DNDispatcherUnhandledExceptionFilterEventArgs = interface(DNDispatcherEventArgs)
  ['{918BB443-6F39-3EBC-8E57-8FAC3C428B92}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_RequestCatch: Boolean;
    procedure set_RequestCatch(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取执行的代码通过调度程序时引发的异常。
    ///</summary>
    ///<returns>
    ///  异常。
    ///</returns>
    property Exception: DDN.mscorlib.DNException read get_Exception;
    ///<summary>
    ///  获取或设置是否应捕获的异常和调用事件处理程序。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />
    ///  应引发; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property RequestCatch: Boolean read get_RequestCatch write set_RequestCatch;
    ///<summary><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与此事件关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherUnhandledExceptionFilterEventArgs = class(TDNGenericImport<DNDispatcherUnhandledExceptionFilterEventArgsClass, DNDispatcherUnhandledExceptionFilterEventArgs>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHookEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{8E5B96AD-675A-5D77-A0E4-14B54A5C6A07}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="operation">
    ///  与事件关联的操作。
    ///</param>
    {class} function init(operation: DNDispatcherOperation): DNDispatcherHookEventArgs;

  end;

  ///<summary>
  ///  提供事件数据供 <see cref="T:System.Windows.Threading.DispatcherHooks" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherHookEventArgs')]
  DNDispatcherHookEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B48BDDAF-9FC9-3589-8B18-F5CDB772877B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Operation: DNDispatcherOperation;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与此事件关联。
    ///</summary>
    ///<returns><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与此事件关联。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.DispatcherOperation" />
    ///  与此事件关联。
    ///</summary>
    ///<returns>
    ///  操作。
    ///</returns>
    property Operation: DNDispatcherOperation read get_Operation;
  end;

  TDNDispatcherHookEventArgs = class(TDNGenericImport<DNDispatcherHookEventArgsClass, DNDispatcherHookEventArgs>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNRightsManagementExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{7AA9D20E-AEEB-55E4-83FD-C97C4D085292}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  使用给定的消息的类。
    ///</summary>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    {class} function init(message: string): DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类与给定 <see cref="P:System.Exception.Message" />
    ///  和 <see cref="P:System.Exception.InnerException" />
    ///  。
    ///</summary>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的异常实例。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  。
    ///</summary>
    ///  <param name="failureCode">
    ///  失败的错误代码。
    ///</param>
    {class} function init(failureCode: DNRightsManagementFailureCode): DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  和 <see cref="P:System.Exception.Message" />
    ///  。
    ///</summary>
    ///  <param name="failureCode">
    ///  失败的错误代码。
    ///</param>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; message: string): DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  和 <see cref="P:System.Exception.InnerException" />
    ///  。
    ///</summary>
    ///  <param name="failureCode">
    ///  失败的错误代码。
    ///</param>
    ///  <param name="innerException">
    ///  导致错误的异常实例。
    ///</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" />
    ///  类与给定 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  , ，<see cref="P:System.Exception.Message" />
    ///  和 <see cref="P:System.Exception.InnerException" />
    ///  。
    ///</summary>
    ///  <param name="failureCode">
    ///  失败的错误代码。
    ///</param>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致错误的异常实例。
    ///</param>
    {class} function init(failureCode: DNRightsManagementFailureCode; message: string; innerException: DDN.mscorlib.DNException): DNRightsManagementException; overload;

  end;

  ///<summary>
  ///  当权限管理操作无法成功完成时，则表示出现错误。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.RightsManagementException')]
  DNRightsManagementException = interface(DDN.mscorlib.DNException)
  ['{3C3EA39B-22C2-38B9-9DE8-236C4D2F0360}']
  { getters & setters } 

    function get_FailureCode: DNRightsManagementFailureCode;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  集 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  存储参数名称和有关异常的信息。
    ///</summary>
    ///  <param name="info">
    ///  包含序列化数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="info" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />
    ///  错误。
    ///</summary>
    ///<returns>
    ///  失败的错误代码。
    ///</returns>
    property FailureCode: DNRightsManagementFailureCode read get_FailureCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNRightsManagementException = class(TDNGenericImport<DNRightsManagementExceptionClass, DNRightsManagementException>) end;

  //-------------namespace: System.IO----------------
  DNFileFormatExceptionClass = interface(DDN.mscorlib.DNFormatExceptionClass)
  ['{1CE1179D-68EC-5715-9FD6-B18C9BBB7256}']
  { constructors } 

    ///<summary>
    ///  创建 <see cref="T:System.IO.FileFormatException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  类，具有指定的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示错误消息。
    ///</param>
    {class} function init(message: string): DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  与指定的错误消息和异常类型的类。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  值 <see cref="P:System.Exception.InnerException" />
    ///  属性，它表示当前异常的原因。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  与源类 URI 值。
    ///</summary>
    ///  <param name="sourceUri"><see cref="T:System.Uri" />
    ///  引起此错误的文件的值。
    ///</param>
    {class} function init(sourceUri: DDN.System.DNUri): DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  与源类 URI 值和指定的错误消息。
    ///</summary>
    ///  <param name="sourceUri"><see cref="T:System.Uri" />
    ///  引起此错误的文件的值。
    ///</param>
    ///  <param name="message">
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示错误消息。
    ///</param>
    {class} function init(sourceUri: DDN.System.DNUri; message: string): DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  与源类 URI 值和异常类型。
    ///</summary>
    ///  <param name="sourceUri"><see cref="T:System.Uri" />
    ///  引起此错误的文件的值。
    ///</param>
    ///  <param name="innerException">
    ///  值 <see cref="P:System.Exception.InnerException" />
    ///  属性，它表示当前异常的原因。
    ///</param>
    {class} function init(sourceUri: DDN.System.DNUri; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;
    ///<summary>
    ///  创建的新实例 <see cref="T:System.IO.FileFormatException" />
    ///  与源类 URI 值、 指定的错误消息和异常类型。
    ///</summary>
    ///  <param name="sourceUri"><see cref="T:System.Uri" />
    ///  引起此错误的文件的值。
    ///</param>
    ///  <param name="message">
    ///  一个 <see cref="T:System.String" />
    ///  值，该值表示错误消息。
    ///</param>
    ///  <param name="innerException">
    ///  值 <see cref="P:System.Exception.InnerException" />
    ///  属性，它表示当前异常的原因。
    ///</param>
    {class} function init(sourceUri: DDN.System.DNUri; message: string; innerException: DDN.mscorlib.DNException): DNFileFormatException; overload;

  end;

  ///<summary>
  ///  输入的文件或应符合某种文件格式规范的数据流的格式不正确时，将引发异常。
  ///</summary>
  [DNTypeName('System.IO.FileFormatException')]
  DNFileFormatException = interface(DDN.mscorlib.DNFormatException)
  ['{7A9233CA-6291-3354-8D1B-86B97F572403}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  设置带有文件名和附加异常信息的 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象。
    ///</summary>
    ///  <param name="info">
    ///  承载序列化对象数据的对象。
    ///</param>
    ///  <param name="context">
    ///  关于来源和目标的上下文信息
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致的文件的名称 <see cref="T:System.IO.FileFormatException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Uri" />
    ///  ，表示导致异常的文件的名称。
    ///</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFileFormatException = class(TDNGenericImport<DNFileFormatExceptionClass, DNFileFormatException>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNEncryptedPackageEnvelopeClass = interface(DNObjectClass)
  ['{D2D92B94-85F2-5742-9F44-0B94DD3D1572}']
  { static methods } 

    ///<summary>
    ///  创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  并使其具有指定的文件名。
    ///</summary>
    ///  <param name="envelopeFileName">
    ///  OLE 的复合文件的名称。
    ///</param>
    ///  <param name="publishLicense">
    ///  复合文件中嵌入发布许可证。
    ///</param>
    ///  <param name="cryptoProvider">
    ///  一个对象，确定哪些操作允许当前用户进行加密的内容。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeFileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(envelopeFileName: string; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  上指定的流。
    ///</summary>
    ///  <param name="envelopeStream">
    ///  要在其中创建该文件流。
    ///</param>
    ///  <param name="publishLicense">
    ///  复合文件中嵌入发布许可证。
    ///</param>
    ///  <param name="cryptoProvider">
    ///  一个对象，确定哪些操作允许当前用户进行加密的内容。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="envelopeStream" />
    ///  不提供读/写访问。
    ///</exception>
    {class} function Create(envelopeStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  作为其内容，使用指定未加密的包并为其提供指定的文件名。
    ///</summary>
    ///  <param name="envelopeFileName">
    ///  OLE 的复合文件的名称。
    ///</param>
    ///  <param name="packageStream">
    ///  流表示现有末加密的包。
    ///</param>
    ///  <param name="publishLicense">
    ///  复合文件中嵌入发布许可证。
    ///</param>
    ///  <param name="cryptoProvider">
    ///  一个对象，确定哪些操作允许当前用户进行加密的内容。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeFileName" />
    ///  或 <paramref name="packageStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function CreateFromPackage(envelopeFileName: string; packageStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  （在指定的流），使用指定未加密的包作为其内容。
    ///</summary>
    ///  <param name="envelopeStream">
    ///  要在其中创建该文件流。
    ///</param>
    ///  <param name="packageStream">
    ///  流表示现有末加密的包。
    ///</param>
    ///  <param name="publishLicense">
    ///  复合文件中嵌入发布许可证。
    ///</param>
    ///  <param name="cryptoProvider">
    ///  一个对象，确定哪些操作允许当前用户进行加密的内容。
    ///</param>
    ///<returns>
    ///  新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="envelopeStream" />
    ///  或 <paramref name="packageStream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="envelopeStream" />
    ///  不提供读/写访问。
    ///</exception>
    {class} function CreateFromPackage(envelopeStream: DDN.mscorlib.DNStream; packageStream: DDN.mscorlib.DNStream; publishLicense: DNPublishLicense; cryptoProvider: DNCryptoProvider): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  以只读和非共享行，在指定的文件中打开加密的包。
    ///</summary>
    ///  <param name="envelopeFileName">
    ///  包含加密的包的文件。
    ///</param>
    ///<returns><see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  打开。
    ///</returns>
    {class} function Open(envelopeFileName: string): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  在指定的文件作为非共享行并使用指定的访问权限打开的加密的包。
    ///</summary>
    ///  <param name="envelopeFileName">
    ///  包含加密的包的文件。
    ///</param>
    ///  <param name="access">
    ///  访问类型。
    ///</param>
    ///<returns><see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  打开。
    ///</returns>
    {class} function Open(envelopeFileName: string; access: DDN.mscorlib.DNFileAccess): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  指定的文件中打开加密的包并为其提供指定的访问权限和共享。
    ///</summary>
    ///  <param name="envelopeFileName">
    ///  包含加密的包的文件。
    ///</param>
    ///  <param name="access">
    ///  访问类型。
    ///</param>
    ///  <param name="sharing">
    ///  共享的类型。
    ///</param>
    ///<returns><see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  打开。
    ///</returns>
    {class} function Open(envelopeFileName: string; access: DDN.mscorlib.DNFileAccess; sharing: DDN.mscorlib.DNFileShare): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  在指定的流中打开加密的包。
    ///</summary>
    ///  <param name="envelopeStream">
    ///  包含加密的包的流。
    ///</param>
    ///<returns><see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  打开。
    ///</returns>
    {class} function Open(envelopeStream: DDN.mscorlib.DNStream): DNEncryptedPackageEnvelope; overload;
    ///<summary>
    ///  获取一个值，该值指示指定的文件是否为具有已加密的数据包流的 OLE 复合文件。
    ///</summary>
    ///  <param name="fileName">
    ///  经过测试，该文件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的文件是具有已加密的数据包流; OLE 复合文件否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="fileName" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsEncryptedPackageEnvelope(fileName: string): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示指定的流是否为具有已加密的数据包流的 OLE 复合文件。
    ///</summary>
    ///  <param name="stream">
    ///  测试流。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的流是具有已加密的数据包流; OLE 复合文件否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsEncryptedPackageEnvelope(stream: DDN.mscorlib.DNStream): Boolean; overload;

  end;

  ///<summary>
  ///  表示包含已加密的数据包的 OLE 复合文件。
  ///</summary>
  [DNTypeName('System.IO.Packaging.EncryptedPackageEnvelope')]
  DNEncryptedPackageEnvelope = interface(DDN.mscorlib.DNIDisposable)
  ['{2C887216-0039-30CA-A073-7695662D31FE}']
  { getters & setters } 

    function get_RightsManagementInformation: DNRightsManagementInformation;
    function get_PackageProperties: DNPackageProperties;
    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_StorageInfo: DNStorageInfo;

  { methods } 

    ///<summary>
    ///  关闭已加密的数据包并将其保留的 OLE 复合文件。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  两个刷新流 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  及其包内容。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  获取内部的加密的包 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.Package" />
    ///  信封中。
    ///</returns>
    function GetPackage: DNPackage;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的权限管理信息存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
    ///  ; 具体而言， <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  和 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  s 存储在 OLE 复合文件，它包含 rights management 保护包
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.RightsManagementInformation" />
    ///  包。
    ///</returns>
    property RightsManagementInformation: DNRightsManagementInformation read get_RightsManagementInformation;
    ///<summary>
    ///  获取核心包的属性 （如标题和主题） 的权限管理文档。
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.PackageProperties" />
    ///  包。
    ///</returns>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
    ///<summary>
    ///  获取一个值，指定是否与和 / 或访问以读取、 写入、 打开文件。
    ///</summary>
    ///<returns><see cref="T:System.IO.FileAccess" />
    ///  值，该值用于打开该文件。
    ///</returns>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>
    ///  获取一个对象，提供对加密的包外部的复合文件流访问。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  表示 OLE 复合文件可能会超出加密包的流。
    ///</returns>
    property StorageInfo: DNStorageInfo read get_StorageInfo;
  end;

  TDNEncryptedPackageEnvelope = class(TDNGenericImport<DNEncryptedPackageEnvelopeClass, DNEncryptedPackageEnvelope>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageClass = interface(DNObjectClass)
  ['{D4A59CAA-C0BD-5A0A-AC6A-F9266ED14B99}']
  { static methods } 

    ///<summary>
    ///  打开位于给定路径和文件名称的包。
    ///</summary>
    ///  <param name="path">
    ///  包的路径和文件名称。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Open(path: string): DNPackage; overload;
    ///<summary>
    ///  打开位于使用给定的文件模式的给定路径的包。
    ///</summary>
    ///  <param name="path">
    ///  包的路径和文件名称。
    ///</param>
    ///  <param name="packageMode">
    ///  要在其中打开包文件模式。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="packageMode" />
    ///  无效。
    ///</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    ///<summary>
    ///  打开位于给定路径使用给定的文件模式和文件访问设置的包。
    ///</summary>
    ///  <param name="path">
    ///  包的路径和文件名称。
    ///</param>
    ///  <param name="packageMode">
    ///  要在其中打开包文件模式。
    ///</param>
    ///  <param name="packageAccess">
    ///  要在其中打开包文件访问。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值 <paramref name="packageMode" />
    ///  或 <paramref name="packageAccess" />
    ///  无效。
    ///</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;
    ///<summary>
    ///  打开位于给定路径使用给定的文件模式、 文件访问和文件共享设置的包。
    ///</summary>
    ///  <param name="path">
    ///  包的路径和文件名称。
    ///</param>
    ///  <param name="packageMode">
    ///  要在其中打开包文件模式。
    ///</param>
    ///  <param name="packageAccess">
    ///  要在其中打开包文件访问。
    ///</param>
    ///  <param name="packageShare">
    ///  共享模式，以在其中打开包文件。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="path" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="packageMode" />
    ///  , ，<paramref name="packageAccess" />
    ///  , ，或 <paramref name="packageShare" />
    ///  无效。
    ///</exception>
    {class} function Open(path: string; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess; packageShare: DDN.mscorlib.DNFileShare): DNPackage; overload;
    ///<summary>
    ///  打开在给定的 IO 流上的包。
    ///</summary>
    ///  <param name="stream">
    ///  对要打开此包的 IO 流。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" />
    ///  是只写的; 或者，若要打开此包需要写或读/写权限和指定 <paramref name="stream" />
    ///  是只读的。
    ///</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream): DNPackage; overload;
    ///<summary>
    ///  使用给定的 IO 流和文件模式中打开包。
    ///</summary>
    ///  <param name="stream">
    ///  对要打开此包的 IO 流。
    ///</param>
    ///  <param name="packageMode">
    ///  要在其中打开包文件模式。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="packageMode" />
    ///  值无效。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" />
    ///  是只写的; 或者，若要打开此包需要写或读/写权限和指定 <paramref name="stream" />
    ///  是只读的。
    ///</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode): DNPackage; overload;
    ///<summary>
    ///  使用给定的 IO 流、 文件模式和文件访问设置打开包。
    ///</summary>
    ///  <param name="stream">
    ///  对要打开此包的 IO 流。
    ///</param>
    ///  <param name="packageMode">
    ///  要在其中打开包文件模式。
    ///</param>
    ///  <param name="packageAccess">
    ///  要在其中打开包文件访问。
    ///</param>
    ///<returns>
    ///  打开的包。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="packageMode" />
    ///  或 <paramref name="packageAccess" />
    ///  无效。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  若要打开此包需要读取或读/写权限，并指定 <paramref name="stream" />
    ///  是只写的; 或该包将其打开您需要写或读/写权限和指定 <paramref name="stream" />
    ///  是只读的。
    ///</exception>
    {class} function Open(stream: DDN.mscorlib.DNStream; packageMode: DDN.mscorlib.DNFileMode; packageAccess: DDN.mscorlib.DNFileAccess): DNPackage; overload;

  end;

  ///<summary>
  ///  表示一个可以存储多个数据对象的容器。
  ///</summary>
  [DNTypeName('System.IO.Packaging.Package')]
  DNPackage = interface(DDN.mscorlib.DNIDisposable)
  ['{E64FFA71-5302-3787-84BC-17A0A7697095}']
  { getters & setters } 

    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_PackageProperties: DNPackageProperties;

  { methods } 

    ///<summary>
    ///  使用给定的 URI 和内容类型创建新的未压缩的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  统一资源标识符 (URI) 新部件。
    ///</param>
    ///  <param name="contentType">
    ///  数据流的内容类型。
    ///</param>
    ///<returns>
    ///  新创建的部件。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件 <paramref name="partUri" />
    ///  包中已存在。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的部件）。
    ///</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string): DNPackagePart; overload;
    ///<summary>
    ///  使用给定的 URI、 内容类型和压缩选项创建新的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  URI的新部件。
    ///</param>
    ///  <param name="contentType">
    ///  数据流的内容类型。
    ///</param>
    ///  <param name="compressionOption">
    ///  对于数据流，压缩选项<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" />
    ///  或<see cref="F:System.IO.Packaging.CompressionOption.Normal" />
    ///  压缩。
    ///</param>
    ///<returns>
    ///  新创建的部件。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效<see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件<paramref name="partUri" />
    ///  包中已存在。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" />
    ///  值无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或<see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的一部分）。
    ///</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string; compressionOption: DNCompressionOption): DNPackagePart; overload;
    ///<summary>
    ///  返回与给定的 URI 部分。
    ///</summary>
    ///  <param name="partUri">
    ///  统一资源标识符 (URI) 要返回的部件。
    ///</param>
    ///<returns>
    ///  使用指定的部分 <paramref name="partUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件 <paramref name="partUri" />
    ///  不是在包中。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetPart(partUri: DDN.System.DNUri): DNPackagePart;
    ///<summary>
    ///  指示给定的 URI 的部件是否在包中。
    ///</summary>
    ///  <param name="partUri"><see cref="T:System.Uri" />
    ///  要检查的部件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的部件 <paramref name="partUri" />
    ///  在包; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取信息）。
    ///</exception>
    function PartExists(partUri: DDN.System.DNUri): Boolean;
    ///<summary>
    ///  保存并关闭包和所有基础部件流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  使用给定的 URI、 目标模式和关系类型创建数据包级关系到这一部分。
    ///</summary>
    ///  <param name="targetUri">
    ///  统一资源标识符 (URI) 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  到包。
    ///</param>
    ///  <param name="relationshipType">
    ///  一个 URI，唯一定义该关系的角色。
    ///</param>
    ///<returns>
    ///  与指定的部件的数据包级关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="targetUri" />
    ///  部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , ，或 <paramref name="targetMode" />
    ///  是 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  和 <paramref name="targetUri" />
    ///  是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="targetMode" />
    ///  无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>
    ///  使用给定的 URI，目标模式、 关系类型，创建到这一部分的数据包级关系和 标识符 (ID)。
    ///</summary>
    ///  <param name="targetUri">
    ///  统一资源标识符 (URI) 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  到包。
    ///</param>
    ///  <param name="relationshipType">
    ///  一个 URI，唯一定义该关系的角色。
    ///</param>
    ///  <param name="id">
    ///  唯一的 XML 标识符。
    ///</param>
    ///<returns>
    ///  与指定的部件的数据包级关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="targetUri" />
    ///  部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , ，或 <paramref name="targetMode" />
    ///  是 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  和 <paramref name="targetUri" />
    ///  是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="targetMode" />
    ///  无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符;具有指定的部件或 <paramref name="id" />
    ///  包中已存在。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>
    ///  返回的所有数据包级关系的集合。
    ///</summary>
    ///<returns>
    ///  包中包含的所有数据包级关系的集合。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>
    ///  返回一个集合相匹配的数据包级关系给定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  。
    ///</summary>
    ///  <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  匹配，并返回集合中。
    ///</param>
    ///<returns>
    ///  匹配指定的包级别关系的集合 <paramref name="relationshipType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>
    ///  返回具有给定标识符的数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要返回的关系。
    ///</param>
    ///<returns>
    ///  使用指定的包级别关系 <paramref name="id" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  与指定的关系 <paramref name="id" />
    ///  不是在包中。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>
    ///  指示是否在包中包含带有给定 ID 的数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的包级别关系 <paramref name="id" />
    ///  在包; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>
    ///  在包中保存的所有部件和关系所包含的内容。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的并且不能修改。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  删除数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  的 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  删除。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>
    ///  从包中删除具有给定的 URI 的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  URI 要删除的部件。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception>
    procedure DeletePart(partUri: DDN.System.DNUri);
    ///<summary>
    ///  返回包中的所有部分的集合。
    ///</summary>
    ///<returns>
    ///  所有的集合<see cref="T:System.IO.Packaging.PackagePart" />
    ///  包中包含的元素。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或<see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetParts: DNPackagePartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取为包设置的文件访问权限。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.IO.FileAccess" />
    ///  值︰ <see cref="F:System.IO.FileAccess.Read" />
    ///  , ，<see cref="F:System.IO.FileAccess.Write" />
    ///  , ，或 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>
    ///  获取包的核心属性。
    ///</summary>
    ///<returns>
    ///  包的核心属性。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
  end;

  TDNPackage = class(TDNGenericImport<DNPackageClass, DNPackage>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNZipPackageClass = interface(DNPackageClass)
  ['{BC67A887-FACD-52CC-9AD6-42C07D81C783}']
  end;

  ///<summary>
  ///  实现的派生的子类的抽象<see cref="T:System.IO.Packaging.Package" />
  ///  基类-<see cref="T:System.IO.Packaging.ZipPackage" />
  ///  类作为容器存储使用 ZIP 存档。
  ///  无法继承此类。
  ///</summary>
  [DNTypeName('System.IO.Packaging.ZipPackage')]
  DNZipPackage = interface(DNPackage)
  ['{5C761E0C-7A71-3A67-8B00-F2E55832900E}']
  { getters & setters } 

    function get_FileOpenAccess: DDN.mscorlib.DNFileAccess;
    function get_PackageProperties: DNPackageProperties;

  { methods } 

    ///<summary>
    ///  使用给定的 URI 和内容类型创建新的未压缩的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  统一资源标识符 (URI) 新部件。
    ///</param>
    ///  <param name="contentType">
    ///  数据流的内容类型。
    ///</param>
    ///<returns>
    ///  新创建的部件。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件 <paramref name="partUri" />
    ///  包中已存在。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的部件）。
    ///</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string): DNPackagePart; overload;
    ///<summary>
    ///  使用给定的 URI、 内容类型和压缩选项创建新的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  URI的新部件。
    ///</param>
    ///  <param name="contentType">
    ///  数据流的内容类型。
    ///</param>
    ///  <param name="compressionOption">
    ///  对于数据流，压缩选项<see cref="F:System.IO.Packaging.CompressionOption.NotCompressed" />
    ///  或<see cref="F:System.IO.Packaging.CompressionOption.Normal" />
    ///  压缩。
    ///</param>
    ///<returns>
    ///  新创建的部件。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  或 <paramref name="contentType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效<see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件<paramref name="partUri" />
    ///  包中已存在。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="compressionOption" />
    ///  值无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或<see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的一部分）。
    ///</exception>
    function CreatePart(partUri: DDN.System.DNUri; contentType: string; compressionOption: DNCompressionOption): DNPackagePart; overload;
    ///<summary>
    ///  返回与给定的 URI 部分。
    ///</summary>
    ///  <param name="partUri">
    ///  统一资源标识符 (URI) 要返回的部件。
    ///</param>
    ///<returns>
    ///  使用指定的部分 <paramref name="partUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的部件 <paramref name="partUri" />
    ///  不是在包中。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetPart(partUri: DDN.System.DNUri): DNPackagePart;
    ///<summary>
    ///  指示给定的 URI 的部件是否在包中。
    ///</summary>
    ///  <param name="partUri"><see cref="T:System.Uri" />
    ///  要检查的部件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的部件 <paramref name="partUri" />
    ///  在包; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  统一资源标识符 (URI)。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取信息）。
    ///</exception>
    function PartExists(partUri: DDN.System.DNUri): Boolean;
    ///<summary>
    ///  保存并关闭包和所有基础部件流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  使用给定的 URI、 目标模式和关系类型创建数据包级关系到这一部分。
    ///</summary>
    ///  <param name="targetUri">
    ///  统一资源标识符 (URI) 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  到包。
    ///</param>
    ///  <param name="relationshipType">
    ///  一个 URI，唯一定义该关系的角色。
    ///</param>
    ///<returns>
    ///  与指定的部件的数据包级关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="targetUri" />
    ///  部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , ，或 <paramref name="targetMode" />
    ///  是 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  和 <paramref name="targetUri" />
    ///  是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="targetMode" />
    ///  无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>
    ///  使用给定的 URI，目标模式、 关系类型，创建到这一部分的数据包级关系和 标识符 (ID)。
    ///</summary>
    ///  <param name="targetUri">
    ///  统一资源标识符 (URI) 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  指示是否为目标部件 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  到包。
    ///</param>
    ///  <param name="relationshipType">
    ///  一个 URI，唯一定义该关系的角色。
    ///</param>
    ///  <param name="id">
    ///  唯一的 XML 标识符。
    ///</param>
    ///<returns>
    ///  与指定的部件的数据包级关系。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="targetUri" />
    ///  部分是 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  , ，或 <paramref name="targetMode" />
    ///  是 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  和 <paramref name="targetUri" />
    ///  是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  值为 <paramref name="targetMode" />
    ///  无效。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符;具有指定的部件或 <paramref name="id" />
    ///  包中已存在。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>
    ///  返回的所有数据包级关系的集合。
    ///</summary>
    ///<returns>
    ///  包中包含的所有数据包级关系的集合。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>
    ///  返回一个集合相匹配的数据包级关系给定 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  。
    ///</summary>
    ///  <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  匹配，并返回集合中。
    ///</param>
    ///<returns>
    ///  匹配指定的包级别关系的集合 <paramref name="relationshipType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>
    ///  返回具有给定标识符的数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要返回的关系。
    ///</param>
    ///<returns>
    ///  使用指定的包级别关系 <paramref name="id" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  与指定的关系 <paramref name="id" />
    ///  不是在包中。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>
    ///  指示是否在包中包含带有给定 ID 的数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的包级别关系 <paramref name="id" />
    ///  在包; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>
    ///  在包中保存的所有部件和关系所包含的内容。
    ///</summary>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的并且不能修改。
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  删除数据包级关系。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  的 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  删除。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>
    ///  从包中删除具有给定的 URI 的部件。
    ///</summary>
    ///  <param name="partUri">
    ///  URI 要删除的部件。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</exception><exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的。
    ///</exception>
    procedure DeletePart(partUri: DDN.System.DNUri);
    ///<summary>
    ///  返回包中的所有部分的集合。
    ///</summary>
    ///<returns>
    ///  所有的集合<see cref="T:System.IO.Packaging.PackagePart" />
    ///  包中包含的元素。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或<see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写。
    ///</exception>
    function GetParts: DNPackagePartCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取为包设置的文件访问权限。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.IO.FileAccess" />
    ///  值︰ <see cref="F:System.IO.FileAccess.Read" />
    ///  , ，<see cref="F:System.IO.FileAccess.Write" />
    ///  , ，或 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property FileOpenAccess: DDN.mscorlib.DNFileAccess read get_FileOpenAccess;
    ///<summary>
    ///  获取包的核心属性。
    ///</summary>
    ///<returns>
    ///  包的核心属性。
    ///</returns>
    ///<exception cref="T:System.ObjectDisposedException">
    ///  包未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property PackageProperties: DNPackageProperties read get_PackageProperties;
  end;

  TDNZipPackage = class(TDNGenericImport<DNZipPackageClass, DNZipPackage>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageDigitalSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A29D9758-1FD7-5DCF-9CAC-419F7617D4E4}']
  end;

  ///<summary>
  ///  表示应用于一组包部件和关系的数字签名。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageDigitalSignature')]
  DNPackageDigitalSignature = interface(DDN.mscorlib.DNObject)
  ['{94E97C04-1E6C-380C-AD59-EDC878F387CB}']
  { getters & setters } 

    function get_SignedParts: DDN.mscorlib.DNReadOnlyCollection<DDN.System.DNUri>;
    function get_SignedRelationshipSelectors: DDN.mscorlib.DNReadOnlyCollection<DNPackageRelationshipSelector>;
    function get_SignaturePart: DNPackagePart;
    function get_Signer: DDN.mscorlib.DNX509Certificate;
    function get_SigningTime: DDN.mscorlib.DNDateTime;
    function get_TimeFormat: string;
    function get_SignatureValue: TArray<Byte>;
    function get_SignatureType: string;
    function get_Signature: DDN.System.Security.DNSignature;
    procedure set_Signature(value: DDN.System.Security.DNSignature);
    function get_CertificateEmbeddingOption: DNCertificateEmbeddingOption;

  { methods } 

    ///<summary>
    ///  返回的有序列的表 <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  应用于给定部件的操作。
    ///</summary>
    ///  <param name="partName"><see cref="T:System.Uri" />
    ///  的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  要返回的转换列表。
    ///</param>
    ///<returns>
    ///  有序列的表的 URI 字符串，如 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" />
    ///  或 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
    ///  , ，表示规范的 XML 转换应用于具有部件给定 <paramref name="partName" />
    ///  URI。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    function GetPartTransformList(partName: DDN.System.DNUri): DDN.mscorlib.DNList<string>;
    ///<summary>
    ///  根据 X.509 证书验证数字签名。
    ///</summary>
    ///<returns>
    ///  如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  ；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    function Verify: DNVerifyResult; overload;
    ///<summary>
    ///  根据指定的 X.509 证书验证数字签名。
    ///</summary>
    ///  <param name="signingCertificate">
    ///  验证数字签名所根据的签名者的 X.509 证书。
    ///</param>
    ///<returns>
    ///  如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  ；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    function Verify(signingCertificate: DDN.mscorlib.DNX509Certificate): DNVerifyResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取所有的集合 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  对象签名的签名。
    ///</summary>
    ///<returns>
    ///  包含所有包部件的集合已使用进行签名。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SignedParts: DDN.mscorlib.DNReadOnlyCollection<DDN.System.DNUri> read get_SignedParts;
    ///<summary>
    ///  获取的列表 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  部件使用的签名进行过签名。
    ///</summary>
    ///<returns>
    ///  列表 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  部件使用的签名进行过签名。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SignedRelationshipSelectors: DDN.mscorlib.DNReadOnlyCollection<DNPackageRelationshipSelector> read get_SignedRelationshipSelectors;
    ///<summary>
    ///  获取 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  包含签名。
    ///</summary>
    ///<returns>
    ///  包含签名的包部分。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SignaturePart: DNPackagePart read get_SignaturePart;
    ///<summary>
    ///  获取签名程序的 X.509 证书。
    ///</summary>
    ///<returns>
    ///  签名程序的数字证书，或者，如果证书未存储于 <see cref="T:System.IO.Packaging.Package" />
    ///  ，则为<see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property Signer: DDN.mscorlib.DNX509Certificate read get_Signer;
    ///<summary>
    ///  获取日期和创建签名的时间。
    ///</summary>
    ///<returns>
    ///  日期和创建签名的时间。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SigningTime: DDN.mscorlib.DNDateTime read get_SigningTime;
    ///<summary>
    ///  获取格式的日期和时间返回 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  格式的日期和时间返回 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property TimeFormat: string read get_TimeFormat;
    ///<summary>
    ///  获取加密的哈希值 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  。
    ///</summary>
    ///<returns>
    ///  包含加密的哈希值的一个字节数组 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SignatureValue: TArray<Byte> read get_SignatureValue;
    ///<summary>
    ///  获取 URI 标识签名类型的字符串。 </summary>
    ///<returns>
    ///  一个 URI 标识签名类型的字符串。
    ///  默认值为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property SignatureType: string read get_SignatureType;
    ///<summary>
    ///  获取或设置 XML 数字签名。
    ///</summary>
    ///<returns>
    ///  XML 数字签名。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property Signature: DDN.System.Security.DNSignature read get_Signature write set_Signature;
    ///<summary>
    ///  获取 X.509 证书嵌入选项。
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />
    ///  值之一，指定数字签名的选项。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />
    ///  已被删除。
    ///</exception>
    property CertificateEmbeddingOption: DNCertificateEmbeddingOption read get_CertificateEmbeddingOption;
  end;

  TDNPackageDigitalSignature = class(TDNGenericImport<DNPackageDigitalSignatureClass, DNPackageDigitalSignature>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageDigitalSignatureManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F3A95624-0B0B-5662-AAA4-8B5EB6838E3E}']
  { static getter & setter } 

    {class} function get_SignatureOriginRelationshipType: string;
    {class} function get_DefaultHashAlgorithm: string;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" />
    ///  类用于指定 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///  <param name="package">
    ///  与此签名管理器关联的包。
    ///</param>
    {class} function init(&package: DNPackage): DNPackageDigitalSignatureManager;

  { static methods } 

    ///<summary>
    ///  验证给定的 X.509 证书。
    ///</summary>
    ///  <param name="certificate">
    ///  要验证的 X.509 证书。
    ///</param>
    ///<returns>
    ///  如果证书验证已成功，则为 <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />
    ///  （值为 0）；否则为错误标志的的按位枚举。
    ///</returns>
    {class} function VerifyCertificate(certificate: DDN.mscorlib.DNX509Certificate): DDN.System.DNX509ChainStatusFlags;

  { static propertys } 

    ///<summary>
    ///  获取默认签名源关系的类型。
    ///</summary>
    ///<returns>
    ///  默认签名源关系类型。
    ///</returns>
    {class} property SignatureOriginRelationshipType: string read get_SignatureOriginRelationshipType;
    ///<summary>
    ///  获取 URI 标识用于创建和验证签名的默认哈希算法的字符串。
    ///</summary>
    ///<returns>
    ///  一个 URI 标识用于创建和验证签名的默认哈希算法的字符串。
    ///</returns>
    {class} property DefaultHashAlgorithm: string read get_DefaultHashAlgorithm;
  end;

  ///<summary>
  ///  提供实用工具类，用于创建和验证中的数字签名 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageDigitalSignatureManager')]
  DNPackageDigitalSignatureManager = interface(DDN.mscorlib.DNObject)
  ['{E0499EAA-EAD8-33C1-889B-3DA058ADD975}']
  { getters & setters } 

    function get_IsSigned: Boolean;
    function get_Signatures: DDN.mscorlib.DNReadOnlyCollection<DNPackageDigitalSignature>;
    function get_TransformMapping: DDN.mscorlib.DNDictionary<string, string>;
    function get_ParentWindow: IntPtr;
    procedure set_ParentWindow(value: IntPtr);
    function get_HashAlgorithm: string;
    procedure set_HashAlgorithm(value: string);
    function get_CertificateOption: DNCertificateEmbeddingOption;
    procedure set_CertificateOption(value: DNCertificateEmbeddingOption);
    function get_TimeFormat: string;
    procedure set_TimeFormat(value: string);
    function get_SignatureOrigin: DDN.System.DNUri;

  { events } 

    procedure add_InvalidSignatureEvent(value: DNInvalidSignatureEventHandler);
    procedure remove_InvalidSignatureEvent(value: DNInvalidSignatureEventHandler);

  { methods } 

    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>): DNPackageDigitalSignature; overload;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>; signatureId: string): DNPackageDigitalSignature; overload;
    ///<summary>
    ///  使用用户选定的 X.509 证书副署包中的所有签名。
    ///</summary>
    ///<returns>
    ///  作为副署添加的签名；如果找不到证书或用户取消了证书选择对话框，则为 <see langword="null" />
    ///  。
    ///</returns>
    function Countersign: DNPackageDigitalSignature; overload;
    ///<summary>
    ///  验证包内所有已签名部件上的签名。
    ///</summary>
    ///  <param name="exitOnFailure">
    ///  若要在首次失败时退出，则为 <see langword="true" />
    ///  ；若要继续检查所有签名，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果成功验证所有签名，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />
    ///  （值为 0）；否则为标识错误的枚举。
    ///</returns>
    function VerifySignatures(exitOnFailure: Boolean): DNVerifyResult;
    ///<summary>
    ///  删除具有给定签名 统一资源标识符 (URI) 的数字签名。 </summary>
    ///  <param name="signatureUri">
    ///  要移除的 URI 的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
    ///  。
    ///</param>
    procedure RemoveSignature(signatureUri: DDN.System.DNUri);
    ///<summary>
    ///  从包中删除所有数字签名。
    ///</summary>
    procedure RemoveAllSignatures;
    ///<summary>
    ///  返回给定的签名的数字签名 统一资源标识符 (URI)。 </summary>
    ///  <param name="signatureUri">
    ///  URI 要返回的数字签名。
    ///</param>
    ///<returns>
    ///  指定的数字签名 <paramref name="signatureUri" />
    ///  , ，或 <see langword="null" />
    ///  如果签名的给定 <paramref name="signatureUri" />
    ///  找不到。
    ///</returns>
    function GetSignature(signatureUri: DDN.System.DNUri): DNPackageDigitalSignature;
    function Sign(parts: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>; certificate: DDN.mscorlib.DNX509Certificate; relationshipSelectors: DDN.mscorlib.DNIEnumerable<DNPackageRelationshipSelector>; signatureId: string; signatureObjects: DDN.mscorlib.DNIEnumerable<DDN.System.Security.DNDataObject>; objectReferences: DDN.mscorlib.DNIEnumerable<DDN.System.Security.DNReference>): DNPackageDigitalSignature; overload;
    ///<summary>
    ///  使用指定的 X.509 证书副署包中的所有签名。
    ///</summary>
    ///  <param name="certificate">
    ///  要作为副署签名添加的 X.509 证书。
    ///</param>
    ///<returns>
    ///  作为副署添加的签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="certificate" />
    ///  为 <see langword="null" />
    ///</exception>
    function Countersign(certificate: DDN.mscorlib.DNX509Certificate): DNPackageDigitalSignature; overload;
    function Countersign(certificate: DDN.mscorlib.DNX509Certificate; signatures: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>): DNPackageDigitalSignature; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示包是否包含任何签名。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果包中包含签名;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSigned: Boolean read get_IsSigned;
    ///<summary>
    ///  获取集合的包中包含的所有签名。
    ///</summary>
    ///<returns>
    ///  所有的集合 <see cref="T:System.IO.Packaging.PackageDigitalSignature" />
    ///  对象。
    ///</returns>
    property Signatures: DDN.mscorlib.DNReadOnlyCollection<DNPackageDigitalSignature> read get_Signatures;
    ///<summary>
    ///  获取一个字典，其中包含每个定义 <see cref="P:System.IO.Packaging.PackagePart.ContentType" />
    ///  及其关联 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" />
    ///  标识符。
    ///</summary>
    ///<returns>
    ///  一个字典，其中包含每个定义 <see cref="P:System.IO.Packaging.PackagePart.ContentType" />
    ///  及其关联 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />
    ///  。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" />
    ///  标识符。
    ///</returns>
    property TransformMapping: DDN.mscorlib.DNDictionary<string, string> read get_TransformMapping;
    ///<summary>
    ///  获取或设置用于显示证书选择对话框中的父窗口的句柄。
    ///</summary>
    ///<returns>
    ///  要用于显示证书选择对话框的父窗口的句柄。
    ///</returns>
    property ParentWindow: IntPtr read get_ParentWindow write set_ParentWindow;
    ///<summary>
    ///  获取或设置 URI 标识符 <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  实例，用于创建和验证签名。
    ///</summary>
    ///<returns><see cref="T:System.Security.Cryptography.Xml.SignedXml" />
    ///  URI 标识符 <see cref="T:System.Security.Cryptography.HashAlgorithm" />
    ///  实例，用于创建和验证签名。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  字符串 URI 设置 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  字符串 URI 设置为空。
    ///</exception>
    property HashAlgorithm: string read get_HashAlgorithm write set_HashAlgorithm;
    ///<summary>
    ///  获取或设置由 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" />
    ///  方法使用的 X.509 证书嵌入选项以对包部件进行数字签名。
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.CertificateEmbeddingOption" />
    ///  值之一。
    ///</returns>
    property CertificateOption: DNCertificateEmbeddingOption read get_CertificateOption write set_CertificateOption;
    ///<summary>
    ///  获取或设置用于创建签名的日期/时间格式 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于创建签名的日期/时间格式 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />
    ///  。
    ///</returns>
    property TimeFormat: string read get_TimeFormat write set_TimeFormat;
    ///<summary>
    ///  获取 统一资源标识符 (URI) 签名源部件。
    ///</summary>
    ///<returns>
    ///  URI 签名源部件。
    ///</returns>
    property SignatureOrigin: DDN.System.DNUri read get_SignatureOrigin;
  end;

  TDNPackageDigitalSignatureManager = class(TDNGenericImport<DNPackageDigitalSignatureManagerClass, DNPackageDigitalSignatureManager>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75F366D9-0429-5B89-8D90-F5202A3C7A4D}']
  end;

  ///<summary>
  ///  提供一个基类，部件存储在 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///  此类为抽象类。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackagePart')]
  DNPackagePart = interface(DDN.mscorlib.DNObject)
  ['{857D257F-E47D-3A3E-AD50-E039B205F092}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    function get_ContentType: string;
    function get_Package: DNPackage;
    function get_CompressionOption: DNCompressionOption;

  { methods } 

    ///<summary>
    ///  返回部分内容数据流。
    ///</summary>
    ///<returns>
    ///  部件内容数据流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  返回在指定的 I/O 中打开内容流 <see cref="T:System.IO.FileMode" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开内容流 I/O 模式。
    ///</param>
    ///<returns>
    ///  部件的内容流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />
    ///  参数不是有效 <see cref="T:System.IO.FileMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  参数不是与包和部分流兼容。
    ///  - 或 -
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  向指定目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</summary>
    ///  <param name="targetUri">
    ///  URI 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  枚举值之一。
    ///  例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />
    ///  ; 或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</param>
    ///  <param name="relationshipType">
    ///  关系的角色。
    ///</param>
    ///<returns>
    ///  这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  到目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />
    ///  参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  通过标识的部分 <paramref name="targetUri" />
    ///  （关系的目标不能是另一个关系） 的关系。
    ///  - 或 -
    ///  <paramref name="targetMode" />
    ///  指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  但 <paramref name="targetUri" />
    ///  是绝对外部 URI。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的关系）。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>
    ///  创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  向指定目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</summary>
    ///  <param name="targetUri">
    ///  URI 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  枚举值之一。
    ///  例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />
    ///  ; 或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</param>
    ///  <param name="relationshipType">
    ///  关系的角色。
    ///</param>
    ///  <param name="id">
    ///  唯一的 ID 之间的关系。
    ///</param>
    ///<returns>
    ///  这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  到目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />
    ///  参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  通过标识的部分 <paramref name="targetUri" />
    ///  （关系的目标不能是另一个关系） 的关系。
    ///  - 或 -
    ///  <paramref name="targetMode" />
    ///  指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  但 <paramref name="targetUri" />
    ///  是绝对外部 URI。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的关系）。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///  - 或 -
    ///  具有指定的部件 <paramref name="id" />
    ///  已存在。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>
    ///  返回所拥有的这一部分的所有关系的集合。
    ///</summary>
    ///<returns>
    ///  由部件拥有的所有关系的集合。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>
    ///  返回的匹配指定的关系集合 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  。
    ///</summary>
    ///  <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  定位并返回集合中的关系。
    ///</param>
    ///<returns>
    ///  具有指定关系的集合 <paramref name="relationshipType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>
    ///  返回具有指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要返回的关系。
    ///</param>
    ///<returns>
    ///  匹配指定的关系 <paramref name="id" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///  - 或 -
    ///  与指定的关系 <paramref name="id" />
    ///  包中不存在。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>
    ///  返回一个值，该值指示此部分是否拥有与指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此部分拥有具有指定关系 <paramref name="id" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>
    ///  删除指定的部件级 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要删除的关系。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （关系不能删除）。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>
    ///  返回与指定打开的部分内容流 <see cref="T:System.IO.FileMode" />
    ///  和 <see cref="T:System.IO.FileAccess" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开内容流 I/O 模式。
    ///</param>
    ///  <param name="access">
    ///  要在打开内容的流中使用的访问权限。
    ///</param>
    ///<returns>
    ///  用于该部件的内容流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />
    ///  参数不是有效 <see cref="T:System.IO.FileMode" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  参数不是有效 <see cref="T:System.IO.FileAccess" />
    ///  枚举值。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  或 <paramref name="access" />
    ///  软件包和部件流与不兼容。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  参数被指定为 <see cref="F:System.IO.FileAccess.Read" />
    ///  但 <paramref name="mode" />
    ///  参数需要写访问权限。
    ///  (<see cref="T:System.IO.FileMode" />
    ///  值 <see cref="F:System.IO.FileMode.Create" />
    ///  , ，<see cref="F:System.IO.FileMode.CreateNew" />
    ///  , ，<see cref="F:System.IO.FileMode.Truncate" />
    ///  , ，和 <see cref="F:System.IO.FileMode.Append" />
    ///  需要 <see cref="F:System.IO.FileAccess.Write" />
    ///  或 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  访问。)
    ///  - 或 -
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 URI 的部分。
    ///</summary>
    ///<returns>
    ///  URI 相对于程序包根目录的部分。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>
    ///  获取 MIME 内容流的类型。
    ///</summary>
    ///<returns>
    ///  MIME 部分的内容数据流的类型。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///  - 或 -
    ///  由派生类中返回的字符串 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
    ///  方法为空。
    ///</exception>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  获取父 <see cref="T:System.IO.Packaging.Package" />
    ///  的部分。
    ///</summary>
    ///<returns>
    ///  父包的部件。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property &Package: DNPackage read get_Package;
    ///<summary>
    ///  获取部分内容流的压缩选项。
    ///</summary>
    ///<returns>
    ///  部分内容流压缩选项。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
  end;

  TDNPackagePart = class(TDNGenericImport<DNPackagePartClass, DNPackagePart>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNZipPackagePartClass = interface(DNPackagePartClass)
  ['{067FCD09-E20B-5F21-9D97-F53AA46C3E08}']
  end;

  ///<summary>
  ///  表示存储在的一部分<see cref="T:System.IO.Packaging.ZipPackage" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.ZipPackagePart')]
  DNZipPackagePart = interface(DNPackagePart)
  ['{60E07AD0-380B-3B17-85E1-9D6344E02756}']
  { getters & setters } 

    function get_Uri: DDN.System.DNUri;
    function get_ContentType: string;
    function get_Package: DNPackage;
    function get_CompressionOption: DNCompressionOption;

  { methods } 

    ///<summary>
    ///  返回部分内容数据流。
    ///</summary>
    ///<returns>
    ///  部件内容数据流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  返回在指定的 I/O 中打开内容流 <see cref="T:System.IO.FileMode" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开内容流 I/O 模式。
    ///</param>
    ///<returns>
    ///  部件的内容流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />
    ///  参数不是有效 <see cref="T:System.IO.FileMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  参数不是与包和部分流兼容。
    ///  - 或 -
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  向指定目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</summary>
    ///  <param name="targetUri">
    ///  URI 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  枚举值之一。
    ///  例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />
    ///  ; 或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</param>
    ///  <param name="relationshipType">
    ///  关系的角色。
    ///</param>
    ///<returns>
    ///  这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  到目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />
    ///  参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  通过标识的部分 <paramref name="targetUri" />
    ///  （关系的目标不能是另一个关系） 的关系。
    ///  - 或 -
    ///  <paramref name="targetMode" />
    ///  指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  但 <paramref name="targetUri" />
    ///  是绝对外部 URI。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的关系）。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string): DNPackageRelationship; overload;
    ///<summary>
    ///  创建部件级关系之间这 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  向指定目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</summary>
    ///  <param name="targetUri">
    ///  URI 的目标部件。
    ///</param>
    ///  <param name="targetMode">
    ///  枚举值之一。
    ///  例如， <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  如果目标部件位于 <see cref="T:System.IO.Packaging.Package" />
    ///  ; 或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  如果目标是外部的资源 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</param>
    ///  <param name="relationshipType">
    ///  关系的角色。
    ///</param>
    ///  <param name="id">
    ///  唯一的 ID 之间的关系。
    ///</param>
    ///<returns>
    ///  这之间的部件级关系 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  到目标 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或外部资源。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="targetUri" />
    ///  或 <paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="targetMode" />
    ///  参数不是有效 <see cref="T:System.IO.Packaging.TargetMode" />
    ///  枚举值。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  通过标识的部分 <paramref name="targetUri" />
    ///  （关系的目标不能是另一个关系） 的关系。
    ///  - 或 -
    ///  <paramref name="targetMode" />
    ///  指定为 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  但 <paramref name="targetUri" />
    ///  是绝对外部 URI。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （不能添加新的关系）。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///  - 或 -
    ///  具有指定的部件 <paramref name="id" />
    ///  已存在。
    ///</exception>
    function CreateRelationship(targetUri: DDN.System.DNUri; targetMode: DNTargetMode; relationshipType: string; id: string): DNPackageRelationship; overload;
    ///<summary>
    ///  返回所拥有的这一部分的所有关系的集合。
    ///</summary>
    ///<returns>
    ///  由部件拥有的所有关系的集合。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationships: DNPackageRelationshipCollection;
    ///<summary>
    ///  返回的匹配指定的关系集合 <see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  。
    ///</summary>
    ///  <param name="relationshipType"><see cref="P:System.IO.Packaging.PackageRelationship.RelationshipType" />
    ///  定位并返回集合中的关系。
    ///</param>
    ///<returns>
    ///  具有指定关系的集合 <paramref name="relationshipType" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipType" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationshipsByType(relationshipType: string): DNPackageRelationshipCollection;
    ///<summary>
    ///  返回具有指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要返回的关系。
    ///</param>
    ///<returns>
    ///  匹配指定的关系 <paramref name="id" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipType" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///  - 或 -
    ///  与指定的关系 <paramref name="id" />
    ///  包中不存在。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function GetRelationship(id: string): DNPackageRelationship;
    ///<summary>
    ///  返回一个值，该值指示此部分是否拥有与指定的关系 <see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要检查的关系。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此部分拥有具有指定关系 <paramref name="id" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只写 （不能读取关系信息）。
    ///</exception>
    function RelationshipExists(id: string): Boolean;
    ///<summary>
    ///  删除指定的部件级 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  。
    ///</summary>
    ///  <param name="id"><see cref="P:System.IO.Packaging.PackageRelationship.Id" />
    ///  要删除的关系。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="id" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  包是只读的 （关系不能删除）。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="id" />
    ///  不是有效的 XML 标识符。
    ///</exception>
    procedure DeleteRelationship(id: string);
    ///<summary>
    ///  返回与指定打开的部分内容流 <see cref="T:System.IO.FileMode" />
    ///  和 <see cref="T:System.IO.FileAccess" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开内容流 I/O 模式。
    ///</param>
    ///  <param name="access">
    ///  要在打开内容的流中使用的访问权限。
    ///</param>
    ///<returns>
    ///  用于该部件的内容流。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="mode" />
    ///  参数不是有效 <see cref="T:System.IO.FileMode" />
    ///  枚举值。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  参数不是有效 <see cref="T:System.IO.FileAccess" />
    ///  枚举值。
    ///</exception><exception cref="T:System.IO.IOException"><paramref name="mode" />
    ///  或 <paramref name="access" />
    ///  软件包和部件流与不兼容。
    ///  - 或 -
    ///  <paramref name="access" />
    ///  参数被指定为 <see cref="F:System.IO.FileAccess.Read" />
    ///  但 <paramref name="mode" />
    ///  参数需要写访问权限。
    ///  (<see cref="T:System.IO.FileMode" />
    ///  值 <see cref="F:System.IO.FileMode.Create" />
    ///  , ，<see cref="F:System.IO.FileMode.CreateNew" />
    ///  , ，<see cref="F:System.IO.FileMode.Truncate" />
    ///  , ，和 <see cref="F:System.IO.FileMode.Append" />
    ///  需要 <see cref="F:System.IO.FileAccess.Write" />
    ///  或 <see cref="F:System.IO.FileAccess.ReadWrite" />
    ///  访问。)
    ///  - 或 -
    ///  返回的流对象 <see cref="M:System.IO.Packaging.PackagePart.GetStreamCore(System.IO.FileMode,System.IO.FileAccess)" />
    ///  派生子类的方法是 <see langword="null" />
    ///  。
    ///</exception>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 URI 的部分。
    ///</summary>
    ///<returns>
    ///  URI 相对于程序包根目录的部分。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property Uri: DDN.System.DNUri read get_Uri;
    ///<summary>
    ///  获取 MIME 内容流的类型。
    ///</summary>
    ///<returns>
    ///  MIME 部分的内容数据流的类型。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///  - 或 -
    ///  由派生类中返回的字符串 <see cref="M:System.IO.Packaging.PackagePart.GetContentTypeCore" />
    ///  方法为空。
    ///</exception>
    property ContentType: string read get_ContentType;
    ///<summary>
    ///  获取父 <see cref="T:System.IO.Packaging.Package" />
    ///  的部分。
    ///</summary>
    ///<returns>
    ///  父包的部件。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property &Package: DNPackage read get_Package;
    ///<summary>
    ///  获取部分内容流的压缩选项。
    ///</summary>
    ///<returns>
    ///  部分内容流压缩选项。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  该部件已被删除。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackagePart.Package" />
    ///  未打开 (<see cref="M:System.IO.Packaging.Package.Dispose(System.Boolean)" />
    ///  或 <see cref="M:System.IO.Packaging.Package.Close" />
    ///  已调用)。
    ///</exception>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
  end;

  TDNZipPackagePart = class(TDNGenericImport<DNZipPackagePartClass, DNZipPackagePart>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePartCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F42B37AB-59AF-50F6-A915-7222FE7B06C8}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.IO.Packaging.PackagePart" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackagePartCollection')]
  DNPackagePartCollection = interface(DDN.mscorlib.DNObject)
  ['{080F5D9A-0A28-3CA9-8D5A-B0F287CDC5BC}']
  { methods } 

    ///<summary>
    ///  返回一个枚举数循环访问集合中的部分。
    ///</summary>
    ///<returns>
    ///  用于循环访问的枚举数 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  集合中的元素。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPackagePart>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackagePartCollection = class(TDNGenericImport<DNPackagePartCollectionClass, DNPackagePartCollection>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackagePropertiesClass = interface(DNObjectClass)
  ['{47C0AEB2-E581-5E0A-BA27-562FF14A8597}']
  end;

  ///<summary>
  ///  表示的核心属性 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageProperties')]
  DNPackageProperties = interface(DDN.mscorlib.DNIDisposable)
  ['{8E0D9515-9AB1-3222-861F-1055272E7959}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_LastModifiedBy: string;
    procedure set_LastModifiedBy(value: string);
    function get_Revision: string;
    procedure set_Revision(value: string);
    function get_LastPrinted: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_LastPrinted(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Created: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_Created(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Modified: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>;
    procedure set_Modified(value: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime>);
    function get_Category: string;
    procedure set_Category(value: string);
    function get_Identifier: string;
    procedure set_Identifier(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_ContentStatus: string;
    procedure set_ContentStatus(value: string);

  { methods } 

    ///<summary>
    ///  释放 <see cref="T:System.IO.Packaging.PackageProperties" />
    ///  实例使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写，获取或设置为指定的名称 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</summary>
    ///<returns>
    ///  为指定的名称 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</returns>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  当在派生类中重写，获取或设置主题的 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</summary>
    ///<returns>
    ///  主题的 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</returns>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，标识的个人或实体创建 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</summary>
    ///<returns>
    ///  个人或实体创建 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</returns>
    property Creator: string read get_Creator write set_Creator;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，定义要支持搜索和索引的关键字分隔的集 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</summary>
    ///<returns>
    ///  要支持搜索和索引的关键字分隔的集 <see cref="T:System.IO.Packaging.Package" />
    ///  和内容。
    ///</returns>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  当在派生类中重写，获取或设置的说明中包含的内容 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中包含的内容的说明 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</returns>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，标识的用户的上次修改 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</summary>
    ///<returns>
    ///  上次修改的用户的 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</returns>
    property LastModifiedBy: string read get_LastModifiedBy write set_LastModifiedBy;
    ///<summary>
    ///  当在派生类中重写，获取或设置的修订号 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  修订号 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</returns>
    property Revision: string read get_Revision write set_Revision;
    ///<summary>
    ///  当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  上次打印内容。
    ///</summary>
    ///<returns>
    ///  日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  上次打印内容。
    ///</returns>
    property LastPrinted: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_LastPrinted write set_LastPrinted;
    ///<summary>
    ///  当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  已创建。
    ///</summary>
    ///<returns>
    ///  日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  最初创建。
    ///</returns>
    property Created: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_Created write set_Created;
    ///<summary>
    ///  当在派生类中重写，获取或设置的日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  上次更改。
    ///</summary>
    ///<returns>
    ///  日期和时间 <see cref="T:System.IO.Packaging.Package" />
    ///  上次更改。
    ///</returns>
    property Modified: DDN.mscorlib.DNNullable<DDN.mscorlib.DNDateTime> read get_Modified write set_Modified;
    ///<summary>
    ///  当在派生类中重写，获取或设置的类别 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中包含的内容的类别 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</returns>
    property Category: string read get_Category write set_Category;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，可以明确地标识 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</summary>
    ///<returns>
    ///  一个值，可以明确地标识 <see cref="T:System.IO.Packaging.Package" />
    ///  及其内容。
    ///</returns>
    property Identifier: string read get_Identifier write set_Identifier;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，表示的内容中包含的类型 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中包含的内容类型 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</returns>
    property ContentType: string read get_ContentType write set_ContentType;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，标识的语言 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</summary>
    ///<returns>
    ///  一个标识值 <see cref="T:System.IO.Packaging.Package" />
    ///  内容语言。
    ///</returns>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  当在派生类中重写，获取或设置版本数 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  版本号 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</returns>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  当在派生类中重写，获取或设置一个值，表示状态的 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  状态 <see cref="T:System.IO.Packaging.Package" />
    ///  内容。
    ///</returns>
    property ContentStatus: string read get_ContentStatus write set_ContentStatus;
  end;

  TDNPackageProperties = class(TDNGenericImport<DNPackagePropertiesClass, DNPackageProperties>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D111D645-490B-50ED-A0E7-A5380832660B}']
  end;

  ///<summary>
  ///  表示一个源之间的关联 <see cref="T:System.IO.Packaging.Package" />
  ///  或 <see cref="T:System.IO.Packaging.PackagePart" />
  ///  , ，和一个目标对象，它可以是 <see cref="T:System.IO.Packaging.PackagePart" />
  ///  或外部资源。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationship')]
  DNPackageRelationship = interface(DDN.mscorlib.DNObject)
  ['{9DFA56CE-0D16-3E13-84AF-4EA76757236E}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_TargetUri: DDN.System.DNUri;
    function get_RelationshipType: string;
    function get_TargetMode: DNTargetMode;
    function get_Id: string;
    function get_Package: DNPackage;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 URI 的数据包或部件拥有关系。
    ///</summary>
    ///<returns>
    ///  URI 的 <see cref="T:System.IO.Packaging.Package" />
    ///  或 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  拥有关系。
    ///</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    ///<summary>
    ///  获取关系的目标资源的 URI。
    ///</summary>
    ///<returns>
    ///  目标资源的 URI。
    ///</returns>
    property TargetUri: DDN.System.DNUri read get_TargetUri;
    ///<summary>
    ///  获取关系的限定的类型名称。
    ///</summary>
    ///<returns>
    ///  关系的限定的类型名称。
    ///</returns>
    property RelationshipType: string read get_RelationshipType;
    ///<summary>
    ///  获取一个值，该值指示关系的目标是 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  指向 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个枚举值，它指示 <see cref="P:System.IO.Packaging.PackageRelationship.TargetUri" />
    ///  是否引用指向 <see cref="T:System.IO.Packaging.Package" />
    ///  的 <see cref="F:System.IO.Packaging.TargetMode.Internal" />
    ///  或 <see cref="F:System.IO.Packaging.TargetMode.External" />
    ///  。
    ///</returns>
    property TargetMode: DNTargetMode read get_TargetMode;
    ///<summary>
    ///  获取一个字符串，标识关系。
    ///</summary>
    ///<returns>
    ///  一个字符串，标识关系。
    ///</returns>
    property Id: string read get_Id;
    ///<summary>
    ///  获取 <see cref="T:System.IO.Packaging.Package" />
    ///  ，其中包含此关系。
    ///</summary>
    ///<returns>
    ///  包含此关系的包。
    ///</returns>
    property &Package: DNPackage read get_Package;
  end;

  TDNPackageRelationship = class(TDNGenericImport<DNPackageRelationshipClass, DNPackageRelationship>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DECF96DA-060B-58A5-8674-7A758AF68FA3}']
  end;

  ///<summary>
  ///  表示一套 <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  元素所拥有的给定 <see cref="T:System.IO.Packaging.PackagePart" />
  ///  或 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipCollection')]
  DNPackageRelationshipCollection = interface(DDN.mscorlib.DNObject)
  ['{0B9D239A-1FB1-35CA-8665-0C637E28CABA}']
  { methods } 

    ///<summary>
    ///  返回用于遍历集合中的关系的枚举。
    ///</summary>
    ///<returns>
    ///  用于循环访问的枚举数 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  集合中的元素。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPackageRelationship>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackageRelationshipCollection = class(TDNGenericImport<DNPackageRelationshipCollectionClass, DNPackageRelationshipCollection>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackageRelationshipSelectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75D14400-2752-5E47-9C6C-3EF9E38AF585}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.IO.Packaging.PackageRelationshipSelector" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="sourceUri">
    ///  统一资源标识符 (URI) 的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  或 <see cref="T:System.IO.Packaging.Package" />
    ///  (<paramref name="SourceUri" />
    ///  ="/") 拥有关系。
    ///</param>
    ///  <param name="selectorType">
    ///  一种 <paramref name="selectionCriteria" />
    ///  , ，要么按关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  或关系 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  。
    ///</param>
    ///  <param name="selectionCriteria">
    ///  用于选择关系的限定字符串基于 <paramref name="selectorType" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourceUri" />
    ///  或 <paramref name="selectionCriteria" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="selectorType" />
    ///  参数无效。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="selectorType" />
    ///  参数是 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  但 <paramref name="selectionCriteria" />
    ///  不是有效 XML 架构定义 (XSD) 标识符 (ID)。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="selectionCriteria" />
    ///  无效，无法为指定 <paramref name="selectorType" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="sourceUri" />
    ///  不是 <see cref="T:System.IO.Packaging.Package" />
    ///  根 （"/"），也不是有效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</exception>
    {class} function init(sourceUri: DDN.System.DNUri; selectorType: DNPackageRelationshipSelectorType; selectionCriteria: string): DNPackageRelationshipSelector;

  end;

  ///<summary>
  ///  定义 <see cref="T:System.IO.Packaging.PackageRelationship" />
  ///  条件来选择一部分级别或数据包级关系。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackageRelationshipSelector')]
  DNPackageRelationshipSelector = interface(DDN.mscorlib.DNObject)
  ['{29E40F0A-D9D4-3B54-9D9B-8B00DE2FC181}']
  { getters & setters } 

    function get_SourceUri: DDN.System.DNUri;
    function get_SelectorType: DNPackageRelationshipSelectorType;
    function get_SelectionCriteria: string;

  { methods } 

    ///<summary>
    ///  返回的列表 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  匹配已定义的对象 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SourceUri" />
    ///  , ，<see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />
    ///  , ，和 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectionCriteria" />
    ///  。
    ///</summary>
    ///  <param name="package">
    ///  从中选择基于选择条件的关系包。
    ///</param>
    ///<returns>
    ///  为指定的选择参数匹配的关系的列表 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数。
    ///</returns>
    function Select(&package: DNPackage): DDN.mscorlib.DNList<DNPackageRelationship>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取根打包 URI （"/"） 或部件 <see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数中的关系的所有者。
    ///</summary>
    ///<returns>
    ///  根软件包 URI （"/"） 或部分 <see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数中的关系的所有者。
    ///</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri;
    ///<summary>
    ///  获取 <see cref="T:System.IO.Packaging.PackageRelationshipSelectorType" />
    ///  指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数。
    ///</summary>
    ///<returns>
    ///  选择器类型 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数。
    ///</returns>
    property SelectorType: DNPackageRelationshipSelectorType read get_SelectorType;
    ///<summary>
    ///  获取为指定的选择标准 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数。
    ///</summary>
    ///<returns>
    ///  选择条件基于 <see cref="P:System.IO.Packaging.PackageRelationshipSelector.SelectorType" />
    ///  的 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Id" />
    ///  或 <see cref="F:System.IO.Packaging.PackageRelationshipSelectorType.Type" />
    ///  指定给 <see cref="M:System.IO.Packaging.PackageRelationshipSelector.#ctor(System.Uri,System.IO.Packaging.PackageRelationshipSelectorType,System.String)" />
    ///  构造函数。
    ///</returns>
    property SelectionCriteria: string read get_SelectionCriteria;
  end;

  TDNPackageRelationshipSelector = class(TDNGenericImport<DNPackageRelationshipSelectorClass, DNPackageRelationshipSelector>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNPackUriHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E4E54953-0E17-59D2-84AA-A7578B973722}']
  { static fields getter & setter } 

   function __fakeFieldGet_UriSchemePack: string;

  { static fields } 

    ///<summary>
    ///  定义 pack URI 方案名称“pack”。
    ///</summary>
    ///<returns>
    ///  pack URI 方案名称字符串“pack”。
    ///</returns>
    {class} property UriSchemePack: string read __fakeFieldGet_UriSchemePack;

  { static methods } 

    ///<summary>
    ///  在给定 <see cref="T:System.IO.Packaging.Package" />
    ///  URI、包中部件的 URI 以及要追加的“#”片段的情况下创建包 URI。
    ///</summary>
    ///  <param name="packageUri"><see cref="T:System.IO.Packaging.Package" />
    ///  的 URI。
    ///</param>
    ///  <param name="partUri">
    ///  包中 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  的 URI。
    ///</param>
    ///  <param name="fragment">
    ///  标识包部件中的元素的“#”引用。
    ///</param>
    ///<returns>
    ///  标识指定包、包部件和片段的包 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  不是绝对 URI。
    ///  - 或 -
    ///  <paramref name="partUri" />
    ///  不是有效的部件 URI 语法。
    ///  - 或 -
    ///  <paramref name="fragment" />
    ///  为空或不以“#”开头。
    ///</exception>
    {class} function Create(packageUri: DDN.System.DNUri; partUri: DDN.System.DNUri; fragment: string): DDN.System.DNUri; overload;
    ///<summary>
    ///  创建一个指向包的新包 URI。
    ///</summary>
    ///  <param name="packageUri">
    ///  引用的 <see cref="T:System.IO.Packaging.Package" />
    ///  的 URI。
    ///</param>
    ///<returns>
    ///  由给定的 <paramref name="packageUri" />
    ///  引用的 <see cref="T:System.IO.Packaging.Package" />
    ///  的包 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  不是绝对 URI。
    ///</exception>
    {class} function Create(packageUri: DDN.System.DNUri): DDN.System.DNUri; overload;
    ///<summary>
    ///  已知 <see cref="T:System.IO.Packaging.Package" />
    ///  URI 及包中部件的 URI URI。
    ///</summary>
    ///  <param name="packageUri">
    ///  URI 的 <see cref="T:System.IO.Packaging.Package" />
    ///  。
    ///</param>
    ///  <param name="partUri">
    ///  包中 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  的 URI。
    ///</param>
    ///<returns>
    ///  给定 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  的包 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="packageUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="packageUri" />
    ///  不是绝对 URI。
    ///  - 或 -
    ///  <paramref name="partUri" />
    ///  不是有效的部件 URI 语法。
    ///</exception>
    {class} function Create(packageUri: DDN.System.DNUri; partUri: DDN.System.DNUri): DDN.System.DNUri; overload;
    ///<summary>
    ///  返回指向所指定包 URI 的整个程序包的内部 URI。
    ///</summary>
    ///  <param name="packUri">
    ///  从中返回 <see cref="T:System.IO.Packaging.Package" />
    ///  URI 的包 URI。
    ///</param>
    ///<returns>
    ///  来自指定 <paramref name="packUri" />
    ///  的 <see cref="T:System.IO.Packaging.Package" />
    ///  的 URI。
    ///</returns>
    {class} function GetPackageUri(packUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回指定包 URI 内的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  的 URI。
    ///</summary>
    ///  <param name="packUri">
    ///  从中返回 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI 的包 URI。
    ///</param>
    ///<returns>
    ///  给定 <paramref name="packUri" />
    ///  中 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  的 URI，如果 <paramref name="packUri" />
    ///  指向包而不是 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  ，则为 <see langword="null" />
    ///  。
    ///</returns>
    {class} function GetPartUri(packUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  创建一个格式化 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</summary>
    ///  <param name="partUri">
    ///  URI 的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  包内。
    ///</param>
    ///<returns>
    ///  一个格式化 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</returns>
    {class} function CreatePartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回部件 URI 给定源部件 URI 和 URI 的相对路径的目标部件。
    ///</summary>
    ///  <param name="sourcePartUri">
    ///  源部件 URI 或"/"以指定 <see cref="T:System.IO.Packaging.Package" />
    ///  根。
    ///</param>
    ///  <param name="targetUri">
    ///  指向目标部件的相对 URI。
    ///</param>
    ///<returns>
    ///  之间指定的目标部件 URI 解析 <paramref name="SourcePartUri" />
    ///  和 <paramref name="targetUri" />
    ///  参数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" />
    ///  或 <paramref name="targetUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="sourcePartUri" />
    ///  不是有效的一部分的 URI。
    ///  - 或 -
    ///  <paramref name="targetUri" />
    ///  不是有效的相对 URI。
    ///</exception>
    {class} function ResolvePartUri(sourcePartUri: DDN.System.DNUri; targetUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回相对 URI 指定两个区域之间 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</summary>
    ///  <param name="sourcePartUri">
    ///  URI 源部件。
    ///</param>
    ///  <param name="targetPartUri">
    ///  URI 的目标部件。
    ///</param>
    ///<returns>
    ///  使用相对 URI 从 <paramref name="sourcePartUri" />
    ///  到 <paramref name="targetPartUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="sourcePartUri" />
    ///  或 <paramref name="targetPartUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetRelativeUri(sourcePartUri: DDN.System.DNUri; targetPartUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回指定的标准化的形式 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI。
    ///</summary>
    ///  <param name="partUri"><see cref="T:System.IO.Packaging.PackagePart" />
    ///  URI 进行规范化。
    ///</param>
    ///<returns>
    ///  规范化的形式给定 <paramref name="partUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetNormalizedPartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回一个值，该值指示两个包 URI 是否等效。
    ///</summary>
    ///  <param name="firstPackUri">
    ///  第一个包 URI。
    ///</param>
    ///  <param name="secondPackUri">
    ///  第二个包 URI。
    ///</param>
    ///<returns>
    ///  一个带符号整数，指示 <paramref name="firstPackUri" />
    ///  和 <paramref name="secondPackUri" />
    ///  之间的关系。
    ///  值
    ///  含义
    ///  小于 0
    ///  <paramref name="firstPackUri" />
    ///  小于 <paramref name="secondPackUri" />
    ///  。
    ///  0
    ///  <paramref name="firstPackUri" />
    ///  与 <paramref name="secondPackUri" />
    ///  相等。
    ///  大于 0
    ///  <paramref name="firstPackUri" />
    ///  大于 <paramref name="secondPackUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="firstPackUri" />
    ///  或 <paramref name="secondPackUri" />
    ///  不是绝对 URI。
    ///  - 或 -
    ///  <paramref name="firstPackUri" />
    ///  或 <paramref name="secondPackUri" />
    ///  不以“pack://”方案开头。
    ///</exception>
    {class} function ComparePackUri(firstPackUri: DDN.System.DNUri; secondPackUri: DDN.System.DNUri): Int32;
    ///<summary>
    ///  返回一个值，该值指示两个包一部分 URI 是等效的。
    ///</summary>
    ///  <param name="firstPartUri">
    ///  URI 的第一个 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  。
    ///</param>
    ///  <param name="secondPartUri">
    ///  URI 第二个 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个值，指示之间的关系 <paramref name="firstPartUri" />
    ///  和 <paramref name="secondPartUri" />
    ///  。
    ///  值
    ///  含义
    ///  小于 0
    ///  <paramref name="firstPartUri" />
    ///  小于 <paramref name="secondPartUri" />
    ///  。
    ///  0
    ///  <paramref name="firstPartUri" />
    ///  与 <paramref name="secondPartUri" />
    ///  相等。
    ///  大于 0
    ///  <paramref name="firstPartUri" />
    ///  大于 <paramref name="secondPartUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="firstPartUri" />
    ///  或 <paramref name="secondPartUri" />
    ///  不是有效的一部分 URI 语法。
    ///</exception>
    {class} function ComparePartUri(firstPartUri: DDN.System.DNUri; secondPartUri: DDN.System.DNUri): Int32;
    ///<summary>
    ///  返回一个值，该值指示是否指定 URI 是 URI 的 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  部件。
    ///</summary>
    ///  <param name="partUri">
    ///  URI 检查 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  部件。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="partUri" />
    ///  标识 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  部分; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  是绝对 URI。
    ///  - 或 -
    ///  <paramref name="partUri" />
    ///  是一个无效 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  语法。
    ///</exception>
    {class} function IsRelationshipPartUri(partUri: DDN.System.DNUri): Boolean;
    ///<summary>
    ///  返回 URI 关联与指定的关系部件 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  。
    ///</summary>
    ///  <param name="partUri"><see cref="P:System.IO.Packaging.PackagePart.Uri" />
    ///  的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  来返回的关联 URI <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  。
    ///</param>
    ///<returns>
    ///  URI 的 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  与相关联部件 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  由标识 <paramref name="partUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="partUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="partUri" />
    ///  语法无效，不能为包部件 URI。
    ///  - 或 -
    ///  <paramref name="partUri" />
    ///  是一个绝对 URI。
    ///  - 或 -
    ///  <paramref name="partUri" />
    ///  引用关系部件。
    ///</exception>
    {class} function GetRelationshipPartUri(partUri: DDN.System.DNUri): DDN.System.DNUri;
    ///<summary>
    ///  返回 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  从 <see cref="T:System.IO.Packaging.PackageRelationship" />
    ///  与指定 URI。
    ///</summary>
    ///  <param name="relationshipPartUri">
    ///  URI 要返回的关系部件的 <see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  从。
    ///</param>
    ///<returns><see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  的 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  从具有指定关系 <paramref name="relationshipPartUri" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="relationshipPartUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="relationshipPartUri" />
    ///  是绝对 URI。
    ///  - 或 -
    ///  <paramref name="relationshipPartUri" />
    ///  语法无效，不能 <see cref="T:System.IO.Packaging.PackagePart" />
    ///  。
    ///  - 或 -
    ///  <paramref name="relationshipPartUri" />
    ///  不引用关系部件。
    ///  - 或 -
    ///<see cref="P:System.IO.Packaging.PackageRelationship.SourceUri" />
    ///  的关系部件引用另一个关系部件 （不是有效，请参阅备注）。
    ///</exception>
    {class} function GetSourcePartUriFromRelationshipPartUri(relationshipPartUri: DDN.System.DNUri): DDN.System.DNUri;

  end;

  ///<summary>
  ///  提供实用工具方法来撰写和分析 pack URI 对象。
  ///</summary>
  [DNTypeName('System.IO.Packaging.PackUriHelper')]
  DNPackUriHelper = interface(DDN.mscorlib.DNObject)
  ['{8186724F-86EF-305F-999A-905EBB4E9BB8}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPackUriHelper = class(TDNGenericImport<DNPackUriHelperClass, DNPackUriHelper>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNRightsManagementInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79B2FC96-3D01-5351-B4E4-4FD90317D246}']
  end;

  ///<summary>
  ///  表示存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />
  ///  中的数字版权管理 (DRM) 信息。
  ///</summary>
  [DNTypeName('System.IO.Packaging.RightsManagementInformation')]
  DNRightsManagementInformation = interface(DDN.mscorlib.DNObject)
  ['{63F0104C-046C-313E-8824-32B114EB8582}']
  { getters & setters } 

    function get_CryptoProvider: DNCryptoProvider;
    procedure set_CryptoProvider(value: DNCryptoProvider);

  { methods } 

    ///<summary>
    ///  返回嵌入 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  从加密的权限管理数据流。
    ///</summary>
    ///<returns>
    ///  嵌入 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  ; 或 <see langword="null" />
    ///  , ，如果包不包含 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.IO.FileFormatException">
    ///  此类的当前版本无法读取此包中的权限管理信息。
    ///</exception>
    function LoadPublishLicense: DNPublishLicense;
    ///<summary>
    ///  将保存给定 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  对加密的权限管理数据流。
    ///</summary>
    ///  <param name="publishLicense">
    ///  要存储和嵌入包中的发布许可证。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="publishLicense" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileFormatException">
    ///  此类的当前版本无法读取此包中的权限管理信息。
    ///</exception>
    procedure SavePublishLicense(publishLicense: DNPublishLicense);
    ///<summary>
    ///  返回指定的用户的嵌入 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  从加密的权限管理数据流。
    ///</summary>
    ///  <param name="userKey">
    ///  要返回的用户或用户组 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  有关。
    ///</param>
    ///<returns><see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  为指定的用户; 或 <see langword="null" />
    ///  , ，如果包不包含 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  匹配给定 <paramref name="userKey" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="userKey" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileFormatException">
    ///  此类的当前版本无法读取此包中的权限管理信息。
    ///</exception>
    function LoadUseLicense(userKey: DNContentUser): DNUseLicense;
    ///<summary>
    ///  将保存给定 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  指定用户对加密的权限管理数据流。
    ///</summary>
    ///  <param name="userKey">
    ///  用户 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  。
    ///</param>
    ///  <param name="useLicense">
    ///  要存储和嵌入包中的使用许可证。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="userKey" />
    ///  或 <paramref name="useLicense" />
    ///  参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileFormatException">
    ///  此类的当前版本无法读取此包中的权限管理信息。
    ///</exception>
    procedure SaveUseLicense(userKey: DNContentUser; useLicense: DNUseLicense);
    ///<summary>
    ///  删除 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  指定用户在从加密的权限管理数据流。
    ///</summary>
    ///  <param name="userKey">
    ///  用户 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  被删除。
    ///</param>
    procedure DeleteUseLicense(userKey: DNContentUser);
    ///<summary>
    ///  返回用户的字典集合和 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  键/值对从加密的权限管理数据流。
    ///</summary>
    ///<returns>
    ///  用户的集合和 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  权限管理中包含的键/值对受保护的包。
    ///</returns>
    function GetEmbeddedUseLicenses: DDN.mscorlib.DNIDictionary<DNContentUser, DNUseLicense>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  访问包的加密权限管理数据流。
    ///</summary>
    ///<returns><see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  访问的权限管理信息。
    ///</returns>
    property CryptoProvider: DNCryptoProvider read get_CryptoProvider write set_CryptoProvider;
  end;

  TDNRightsManagementInformation = class(TDNGenericImport<DNRightsManagementInformationClass, DNRightsManagementInformation>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNStorageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08D58140-3E93-5327-95F4-5BFBB8C4E6C3}']
  end;

  ///<summary>
  ///  提供访问和操作数据存储区中的信息 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.StorageInfo')]
  DNStorageInfo = interface(DDN.mscorlib.DNObject)
  ['{D838A82C-3F5E-3B6B-BB29-8A4F306F93C2}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>
    ///  具有给定名称创建一个新的流。
    ///</summary>
    ///  <param name="name">
    ///  新流的名称。
    ///</param>
    ///<returns>
    ///  使用指定的新流 <paramref name="name" />
    ///  。
    ///</returns>
    function CreateStream(name: string): DNStreamInfo; overload;
    ///<summary>
    ///  返回 <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  具有给定名称的实例。
    ///</summary>
    ///  <param name="name">
    ///  名称 <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  实例中要返回。
    ///</param>
    ///<returns>
    ///  使用指定的流 <paramref name="name" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function GetStreamInfo(name: string): DNStreamInfo;
    ///<summary>
    ///  返回一个值，该值指示是否存在给定的流。
    ///</summary>
    ///  <param name="name"><see cref="T:System.IO.Packaging.StreamInfo" />
    ///  要检查的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的流 <paramref name="name" />
    ///  存在; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function StreamExists(name: string): Boolean;
    ///<summary>
    ///  删除具有指定名称的流。
    ///</summary>
    ///  <param name="name"><see cref="T:System.IO.Packaging.StreamInfo" />
    ///  要删除的流的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DeleteStream(name: string);
    ///<summary>
    ///  新建子级 <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  ，使此 <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  作为父级。
    ///</summary>
    ///  <param name="name">
    ///  新的子级数据存储区的名称。
    ///</param>
    ///<returns>
    ///  新的子级数据存储区。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function CreateSubStorage(name: string): DNStorageInfo;
    ///<summary>
    ///  返回具有给定名称的子级子存储。
    ///</summary>
    ///  <param name="name">
    ///  要返回的子存储的名称。
    ///</param>
    ///<returns>
    ///  具有指定 <paramref name="name" />
    ///  的子级子存储。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    function GetSubStorageInfo(name: string): DNStorageInfo;
    ///<summary>
    ///  返回一个值，该值表示指定的子存储区是否存在。
    ///</summary>
    ///  <param name="name">
    ///  要检查的子存储区的 <see cref="T:System.IO.Packaging.StorageInfo" />
    ///  名称。
    ///</param>
    ///<returns>
    ///  如果存在具有指定 <paramref name="name" />
    ///  的子存储区，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SubStorageExists(name: string): Boolean;
    ///<summary>
    ///  删除指定的子存储区。
    ///</summary>
    ///  <param name="name">
    ///  要删除的子存储区的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    procedure DeleteSubStorage(name: string);
    ///<summary>
    ///  返回的数组 <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  此存储区中当前包含的实例。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.IO.Packaging.StreamInfo" />
    ///  对象时，在此存储内定义的每个都指向的 I/O 流。
    ///</returns>
    function GetStreams: TArray<DNStreamInfo>;
    ///<summary>
    ///  返回当前包含在此存储区中的子级子存储区的数组。
    ///</summary>
    ///<returns><see cref="T:System.IO.Packaging.StorageInfo" />
    ///  对象的数组，每个数组都指向在此存储区中定义的子存储区。
    ///</returns>
    function GetSubStorages: TArray<DNStorageInfo>;
    ///<summary>
    ///  创建具有给定名称的新流 <see cref="T:System.IO.Packaging.CompressionOption" />
    ///  , ，和 <see cref="T:System.IO.Packaging.EncryptionOption" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  新流的名称。
    ///</param>
    ///  <param name="compressionOption">
    ///  数据流压缩选项。
    ///</param>
    ///  <param name="encryptionOption">
    ///  用于数据流的加密选项。
    ///</param>
    ///<returns>
    ///  使用指定的新流 <paramref name="name" />
    ///  , ，<paramref name="compressionOption" />
    ///  , ，和 <paramref name="encryptionOption" />
    ///  。
    ///</returns>
    function CreateStream(name: string; compressionOption: DNCompressionOption; encryptionOption: DNEncryptionOption): DNStreamInfo; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取存储区的名称。
    ///</summary>
    ///<returns>
    ///  此存储区的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNStorageInfo = class(TDNGenericImport<DNStorageInfoClass, DNStorageInfo>) end;

  //-------------namespace: System.IO.Packaging----------------
  DNStreamInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1E8A613-6F89-5E29-909B-2483843F033D}']
  end;

  ///<summary>
  ///  提供访问和操作中的 I/O 流信息 <see cref="T:System.IO.Packaging.Package" />
  ///  。
  ///</summary>
  [DNTypeName('System.IO.Packaging.StreamInfo')]
  DNStreamInfo = interface(DDN.mscorlib.DNObject)
  ['{AD86EFB5-F2C5-3235-8D98-02C3A16B9EE4}']
  { getters & setters } 

    function get_CompressionOption: DNCompressionOption;
    function get_EncryptionOption: DNEncryptionOption;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  默认情况下打开的流返回 <see cref="T:System.IO.FileMode" />
    ///  和 <see cref="T:System.IO.FileAccess" />
    ///  。
    ///</summary>
    ///<returns>
    ///  默认情况下打开的 I/O 流 <see cref="T:System.IO.Packaging.Package" />
    ///  根 <see cref="T:System.IO.FileMode" />
    ///  和 <see cref="T:System.IO.FileAccess" />
    ///  ...
    ///</returns>
    function GetStream: DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  返回在指定的打开的 I/O 流 <see cref="T:System.IO.FileMode" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开流文件模式。
    ///</param>
    ///<returns>
    ///  指定的文件中打开的流 <paramref name="mode" />
    ///  。
    ///</returns>
    function GetStream(mode: DDN.mscorlib.DNFileMode): DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  返回在指定的打开的 I/O 流 <see cref="T:System.IO.FileMode" />
    ///  和与给定 <see cref="T:System.IO.FileAccess" />
    ///  。
    ///</summary>
    ///  <param name="mode">
    ///  要在其中打开流文件模式。
    ///</param>
    ///  <param name="access">
    ///  文件访问模式中进行读取或写入到流。
    ///</param>
    ///<returns>
    ///  在指定的 I/O 流打开 <see cref="T:System.IO.FileMode" />
    ///  和与给定 <see cref="T:System.IO.FileAccess" />
    ///  。
    ///</returns>
    function GetStream(mode: DDN.mscorlib.DNFileMode; access: DDN.mscorlib.DNFileAccess): DDN.mscorlib.DNStream; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.IO.Packaging.CompressionOption" />
    ///  设置为流。
    ///</summary>
    ///<returns>
    ///  针对包流的压缩选项设置。
    ///</returns>
    property CompressionOption: DNCompressionOption read get_CompressionOption;
    ///<summary>
    ///  获取 <see cref="T:System.IO.Packaging.EncryptionOption" />
    ///  设置为流。
    ///</summary>
    ///<returns>
    ///  加密选项设置为包的流的。
    ///</returns>
    property EncryptionOption: DNEncryptionOption read get_EncryptionOption;
    ///<summary>
    ///  获取流的名称。
    ///</summary>
    ///<returns>
    ///  此流的名称。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNStreamInfo = class(TDNGenericImport<DNStreamInfoClass, DNStreamInfo>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNMediaPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{514A6564-4F97-54A9-B4A3-1C05472003A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMediaPermission; overload;
    ///<summary>
    ///  通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  的枚举值。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNMediaPermission; overload;
    ///<summary>
    ///  通过指定音频权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="permissionAudio"><see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  的枚举值。
    ///</param>
    {class} function init(permissionAudio: DNMediaPermissionAudio): DNMediaPermission; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类通过指定视频的权限级别。
    ///</summary>
    ///  <param name="permissionVideo"><see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  的枚举值。
    ///</param>
    {class} function init(permissionVideo: DNMediaPermissionVideo): DNMediaPermission; overload;
    ///<summary>
    ///  通过指定一个图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="permissionImage"><see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  的枚举值。
    ///</param>
    {class} function init(permissionImage: DNMediaPermissionImage): DNMediaPermission; overload;
    ///<summary>
    ///  通过指定音频、视频和图像权限级别，初始化 <see cref="T:System.Security.Permissions.MediaPermission" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="permissionAudio"><see cref="T:System.Security.Permissions.MediaPermissionAudio" />
    ///  的枚举值。
    ///</param>
    ///  <param name="permissionVideo"><see cref="T:System.Security.Permissions.MediaPermissionVideo" />
    ///  的枚举值。
    ///</param>
    ///  <param name="permissionImage"><see cref="T:System.Security.Permissions.MediaPermissionImage" />
    ///  的枚举值。
    ///</param>
    {class} function init(permissionAudio: DNMediaPermissionAudio; permissionVideo: DNMediaPermissionVideo; permissionImage: DNMediaPermissionImage): DNMediaPermission; overload;

  end;

  ///<summary><see cref="T:System.Security.Permissions.MediaPermission" />
  ///  描述一组安全权限，该权限用于控制音频、图像和视频媒体在部分信任的 Windows Presentation Foundation (WPF) 应用程序中运行的功能。
  ///</summary>
  [DNTypeName('System.Security.Permissions.MediaPermission')]
  DNMediaPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{BF64F395-CD9B-345B-B4AB-7806E4CE2477}']
  { getters & setters } 

    function get_Audio: DNMediaPermissionAudio;
    function get_Video: DNMediaPermissionVideo;
    function get_Image: DNMediaPermissionImage;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示当前权限是否不受限制。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果音频、 图像和视频的权限将所有没有限制;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  确定当前权限是否为指定权限的子集。
    ///</summary>
    ///  <param name="target">
    ///  将要测试子集关系的权限。
    ///  此权限必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  如果当前权限是指定权限的子集，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  创建并返回一个权限，该权限是当前权限与指定权限的交集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限相交的权限。
    ///  它必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  两个权限的交集是一个权限，用于描述两者共同描述的状态。
    ///  只有将传递两个原始权限的请求将对相交的权限有效。
    ///</returns>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建一个权限，该权限是当前权限与指定权限的并集。
    ///</summary>
    ///  <param name="target">
    ///  与当前权限合并的权限。
    ///  它必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  表示同时兼具当前权限和指定权限的新权限。
    ///</returns>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建并返回当前权限的相同副本。
    ///</summary>
    ///<returns>
    ///  当前权限的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建权限及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  权限的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  从 XML 编码重新构造具有指定状态的权限。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造权限的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取音频权限级别的当前值。
    ///</summary>
    ///<returns>
    ///  音频权限级别。
    ///</returns>
    property Audio: DNMediaPermissionAudio read get_Audio;
    ///<summary>
    ///  获取视频权限级别的当前值。
    ///</summary>
    ///<returns>
    ///  媒体权限级别。
    ///</returns>
    property Video: DNMediaPermissionVideo read get_Video;
    ///<summary>
    ///  获取图像权限级别的当前值。
    ///</summary>
    ///<returns>
    ///  图像权限级别。
    ///</returns>
    property Image: DNMediaPermissionImage read get_Image;
  end;

  TDNMediaPermission = class(TDNGenericImport<DNMediaPermissionClass, DNMediaPermission>) end;

  //-------------namespace: System.Security.Permissions----------------
  DNWebBrowserPermissionClass = interface(DDN.mscorlib.DNCodeAccessPermissionClass)
  ['{D1E17305-0969-5562-906E-2C30A1CDEF19}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNWebBrowserPermission; overload;
    ///<summary>
    ///  通过指定一个权限状态，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="state"><see cref="T:System.Security.Permissions.PermissionState" />
    ///  的枚举值。
    ///</param>
    {class} function init(state: DDN.mscorlib.DNPermissionState): DNWebBrowserPermission; overload;
    ///<summary>
    ///  通过指定 Web 浏览器的权限级别，初始化 <see cref="T:System.Security.Permissions.WebBrowserPermission" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="webBrowserPermissionLevel"><see cref="T:System.Security.Permissions.WebBrowserPermissionLevel" />
    ///  的枚举值。
    ///</param>
    {class} function init(webBrowserPermissionLevel: DNWebBrowserPermissionLevel): DNWebBrowserPermission; overload;

  end;

  ///<summary><see cref="T:System.Security.Permissions.WebBrowserPermission" />
  ///  对象控制创建 WebBrowser 控件的能力。
  ///</summary>
  [DNTypeName('System.Security.Permissions.WebBrowserPermission')]
  DNWebBrowserPermission = interface(DDN.mscorlib.DNCodeAccessPermission)
  ['{12E97C8A-2A31-3E3E-8197-C897148A0560}']
  { getters & setters } 

    function get_Level: DNWebBrowserPermissionLevel;
    procedure set_Level(value: DNWebBrowserPermissionLevel);

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示当前权限是否不受限制。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="P:System.Security.Permissions.WebBrowserPermission.Level" />
    ///  属性设置为 <see cref="F:System.Security.Permissions.WebBrowserPermissionLevel.Unrestricted" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsUnrestricted: Boolean;
    ///<summary>
    ///  确定当前权限是否为指定权限的子集。
    ///</summary>
    ///  <param name="target">
    ///  将要测试子集关系的权限。
    ///  此权限必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  如果当前权限是指定权限的子集，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSubsetOf(target: DDN.mscorlib.DNIPermission): Boolean;
    ///<summary>
    ///  创建并返回一个权限，该权限是当前权限与指定权限的交集。
    ///</summary>
    ///  <param name="target">
    ///  要与当前权限相交的权限。
    ///  它必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  两个权限的交集是一个权限，用于描述两者共同描述的状态。
    ///  只有将传递两个原始权限的请求将对相交的权限有效。
    ///</returns>
    function Intersect(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建一个权限，该权限是当前权限与指定权限的并集。
    ///</summary>
    ///  <param name="target">
    ///  与当前权限合并的权限。
    ///  它必须与当前权限属于同一类型。
    ///</param>
    ///<returns>
    ///  表示同时兼具当前权限和指定权限的新权限。
    ///</returns>
    function Union(target: DDN.mscorlib.DNIPermission): DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建并返回当前权限的相同副本。
    ///</summary>
    ///<returns>
    ///  当前权限的副本。
    ///</returns>
    function Copy: DDN.mscorlib.DNIPermission;
    ///<summary>
    ///  创建权限及其当前状态的 XML 编码。
    ///</summary>
    ///<returns>
    ///  权限的 XML 编码，包括任何状态信息。
    ///</returns>
    function ToXml: DDN.mscorlib.DNSecurityElement;
    ///<summary>
    ///  从 XML 编码重新构造具有指定状态的权限。
    ///</summary>
    ///  <param name="securityElement">
    ///  用于重新构造权限的 XML 编码。
    ///</param>
    procedure FromXml(securityElement: DDN.mscorlib.DNSecurityElement);
    procedure Demand;
    procedure Assert;
    procedure Deny;
    procedure PermitOnly;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 Web 浏览器的权限级别的当前值。
    ///</summary>
    ///<returns>
    ///  Web 浏览器的权限级别的当前值。
    ///</returns>
    property Level: DNWebBrowserPermissionLevel read get_Level write set_Level;
  end;

  TDNWebBrowserPermission = class(TDNGenericImport<DNWebBrowserPermissionClass, DNWebBrowserPermission>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNContentGrantClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA5FA5CC-06C8-52C1-9146-0DC013C1B899}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" />
    ///  授予指定的类 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  指定 <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  。
    ///</summary>
    ///  <param name="user">
    ///  授予用户访问权限。
    ///</param>
    ///  <param name="right">
    ///  访问权限被授予。
    ///</param>
    {class} function init(user: DNContentUser; right: DNContentRight): DNContentGrant; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" />
    ///  授予指定的类 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  指定 <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  是否有指定 <see cref="T:System.DateTime" />
    ///  持续时间。
    ///</summary>
    ///  <param name="user">
    ///  授予用户访问权限。
    ///</param>
    ///  <param name="right">
    ///  访问权限被授予。
    ///</param>
    ///  <param name="validFrom">
    ///  起始日期和右侧开始的时间。
    ///</param>
    ///  <param name="validUntil">
    ///  结束日期和该权限到期的时间。
    ///</param>
    {class} function init(user: DNContentUser; right: DNContentRight; validFrom: DDN.mscorlib.DNDateTime; validUntil: DDN.mscorlib.DNDateTime): DNContentGrant; overload;

  end;

  ///<summary>
  ///  表示向用户授予的一个权限，该权限使用户可访问权限管理文档中的信息。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.ContentGrant')]
  DNContentGrant = interface(DDN.mscorlib.DNObject)
  ['{FEC5B4F1-77B9-3A77-82B0-53C420B26E5D}']
  { getters & setters } 

    function get_User: DNContentUser;
    function get_Right: DNContentRight;
    function get_ValidFrom: DDN.mscorlib.DNDateTime;
    function get_ValidUntil: DDN.mscorlib.DNDateTime;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取被授予访问权限的用户 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用户的访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  授予，指定给 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />
    ///  构造函数。
    ///</returns>
    property User: DNContentUser read get_User;
    ///<summary>
    ///  获取 <see cref="T:System.Security.RightsManagement.ContentRight" />
    ///  所授予。
    ///</summary>
    ///<returns>
    ///  访问权限授予 <see cref="P:System.Security.RightsManagement.ContentGrant.User" />
    ///  , 、 指定给 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />
    ///  构造函数。
    ///</returns>
    property Right: DNContentRight read get_Right;
    ///<summary>
    ///  获取开始日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  开始。
    ///</summary>
    ///<returns>
    ///  开始日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  开始时，或 <see cref="T:System.DateTime" />
    ///  。<see cref="F:System.DateTime.MinValue" />
    ///  没有是否没有开始限制。
    ///</returns>
    property ValidFrom: DDN.mscorlib.DNDateTime read get_ValidFrom;
    ///<summary>
    ///  获取结束的日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  过期。
    ///</summary>
    ///<returns>
    ///  结束日期和时间所授予 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />
    ///  到期，或 <see cref="T:System.DateTime" />
    ///  。<see cref="F:System.DateTime.MaxValue" />
    ///  如果没有结束日期和时间限制。
    ///</returns>
    property ValidUntil: DDN.mscorlib.DNDateTime read get_ValidUntil;
  end;

  TDNContentGrant = class(TDNGenericImport<DNContentGrantClass, DNContentGrant>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNContentUserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC885AF0-5B9D-5256-BA83-D8C96EEEB5FA}']
  { static getter & setter } 

    {class} function get_AnyoneUser: DNContentUser;
    {class} function get_OwnerUser: DNContentUser;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  用户或组的名称。
    ///</param>
    ///  <param name="authenticationType">
    ///  用于身份验证方法。
    ///</param>
    {class} function init(name: string; authenticationType: DNAuthenticationType): DNContentUser;

  { static propertys } 

    ///<summary>
    ///  获取实例的"任何人" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  角色。
    ///</summary>
    ///<returns>
    ///  "任何人"的实例 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  角色。
    ///</returns>
    {class} property AnyoneUser: DNContentUser read get_AnyoneUser;
    ///<summary>
    ///  获取实例的"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  角色。
    ///</summary>
    ///<returns>
    ///  "所有者"的实例 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  角色。
    ///</returns>
    {class} property OwnerUser: DNContentUser read get_OwnerUser;
  end;

  ///<summary>
  ///  表示要为其授予权限管理内容访问权限的用户或用户组。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.ContentUser')]
  DNContentUser = interface(DDN.mscorlib.DNObject)
  ['{EC2247A2-538F-3A09-9E3C-C00F06F62B4F}']
  { getters & setters } 

    function get_AuthenticationType: DNAuthenticationType;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  返回一个值，该值指示是否对用户当前身份验证。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果用户当前通过身份验证;否则为 <see langword="false" />
    ///  。
    ///  默认值是 <see langword="false" />
    ///  直到身份验证。
    ///</returns>
    function IsAuthenticated: Boolean;
    ///<summary>
    ///  返回一个值，该值指示是否此 <see cref="T:System.Security.RightsManagement.ContentUser" />
    ///  等效于另一个给定实例。
    ///</summary>
    ///  <param name="obj">
    ///  要比较相等的用户实例。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  都是相同的此用户，给定的用户; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回计算所得的哈希代码基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  从用户的哈希代码计算 <see cref="P:System.Security.RightsManagement.ContentUser.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />
    ///  。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  指定给 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  构造函数。
    ///</summary>
    ///<returns><see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  指定给 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  构造函数。
    ///</returns>
    property AuthenticationType: DNAuthenticationType read get_AuthenticationType;
    ///<summary>
    ///  获取指定的用户或组名称 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  构造函数。
    ///</summary>
    ///<returns>
    ///  为指定的用户或组名称 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />
    ///  构造函数。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNContentUser = class(TDNGenericImport<DNContentUserClass, DNContentUser>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNCryptoProviderClass = interface(DNObjectClass)
  ['{1F644620-16FD-5451-B6FA-13B8BF0F0AAB}']
  end;

  ///<summary>
  ///  为加密和解密受保护的内容提供数字权限管理服务。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.CryptoProvider')]
  DNCryptoProvider = interface(DDN.mscorlib.DNIDisposable)
  ['{4C06B4D4-30CE-3C8F-8769-965C283CDD79}']
  { getters & setters } 

    function get_BlockSize: Int32;
    function get_CanMergeBlocks: Boolean;
    function get_BoundGrants: DDN.mscorlib.DNReadOnlyCollection<DNContentGrant>;
    function get_CanEncrypt: Boolean;
    function get_CanDecrypt: Boolean;

  { methods } 

    ///<summary>
    ///  释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将明文加密为密文。
    ///</summary>
    ///  <param name="clearText">
    ///  要加密的明文内容。
    ///</param>
    ///<returns>
    ///  指定 <paramref name="clearText" />
    ///  的已加密密文。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="clearText" />
    ///  为 null。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">
    ///  不允许加密。
    ///</exception>
    function Encrypt(clearText: TArray<Byte>): TArray<Byte>;
    ///<summary>
    ///  密码以明文形式的文本进行解密。
    ///</summary>
    ///  <param name="cryptoText">
    ///  要解密的密码文本。
    ///</param>
    ///<returns>
    ///  解密明文 <paramref name="cryptoText" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="cipherText" />
    ///  为 null。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">
    ///  未授予解密权限。
    ///</exception>
    function Decrypt(cryptoText: TArray<Byte>): TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取密码块大小，以字节为单位。
    ///</summary>
    ///<returns>
    ///  密码块大小，以字节为单位。
    ///  默认块大小为 高级加密标准 (AES) 为 8。
    ///</returns>
    property BlockSize: Int32 read get_BlockSize;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  可以接受不同的缓冲区块大小的长度。
    ///</summary>
    ///<returns>
    ///  true 如果缓冲区传递给 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  可以是传递给的缓冲区的长度不同 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  ; 否则为 false 如果缓冲区传递给 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" />
    ///  和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />
    ///  必须是完全相同的长度。
    ///  有关 高级加密标准 (AES) 默认值是 true。
    ///</returns>
    property CanMergeBlocks: Boolean read get_CanMergeBlocks;
    ///<summary>
    ///  获取一个集合，列出通过验证，并向用户授予的权限。
    ///</summary>
    ///<returns>
    ///  一个集合，枚举通过验证并的权限都授予用户。
    ///</returns>
    property BoundGrants: DDN.mscorlib.DNReadOnlyCollection<DNContentGrant> read get_BoundGrants;
    ///<summary>
    ///  获取一个值，该值指示用户是否具有权限进行加密。
    ///</summary>
    ///<returns>
    ///  true 如果 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  授予用户权限进行加密; 否则为 false。
    ///</returns>
    property CanEncrypt: Boolean read get_CanEncrypt;
    ///<summary>
    ///  获取一个值，该值指示用户是否具有权限进行解密。
    ///</summary>
    ///<returns>
    ///  true 如果 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  授予用户权限进行解密; 否则为 false。
    ///</returns>
    property CanDecrypt: Boolean read get_CanDecrypt;
  end;

  TDNCryptoProvider = class(TDNGenericImport<DNCryptoProviderClass, DNCryptoProvider>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNLocalizedNameDescriptionPairClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8C7A365B-7FC1-5A72-B910-FA94FE618B53}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  区域设置的值 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  属性。
    ///</param>
    ///  <param name="description">
    ///  区域设置的值 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  属性。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  要么 <paramref name="name" />
    ///  参数或 <paramref name="description" />
    ///  参数是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(name: string; description: string): DNLocalizedNameDescriptionPair;

  end;

  ///<summary>
  ///  表示“Name”和“Description”字符串的不可变（只读）对。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.LocalizedNameDescriptionPair')]
  DNLocalizedNameDescriptionPair = interface(DDN.mscorlib.DNObject)
  ['{56509365-E88F-3269-A37B-6B3FAD16BD20}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    ///<summary>
    ///  指示是否 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  给定对象的属性匹配此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要比较的对象 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  给定对象的属性与此实例的匹配; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取基于 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  属性计算所得的哈希代码。
    ///</summary>
    ///<returns>
    ///  基于此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />
    ///  .的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" />
    ///  和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" />
    ///  属性计算所得的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取区域设置名称。
    ///</summary>
    ///<returns>
    ///  区域设置名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取区域设置说明。
    ///</summary>
    ///<returns>
    ///  区域设置说明。
    ///</returns>
    property Description: string read get_Description;
  end;

  TDNLocalizedNameDescriptionPair = class(TDNGenericImport<DNLocalizedNameDescriptionPairClass, DNLocalizedNameDescriptionPair>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNPublishLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6572480A-1B8D-518C-AEEE-F29C62E90E96}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  类从指定序列化和签名 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  。
    ///</summary>
    ///  <param name="signedPublishLicense">
    ///  已签名，并序列化发布许可证。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="signedPublishLicense" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">
    ///  许可证无效。
    ///</exception>
    {class} function init(signedPublishLicense: string): DNPublishLicense;

  end;

  ///<summary>
  ///  表示已签名的权限管理发布许可证。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.PublishLicense')]
  DNPublishLicense = interface(DDN.mscorlib.DNObject)
  ['{78DD373F-97ED-390C-A6F4-4E46E480B1C2}']
  { getters & setters } 

    function get_ReferralInfoName: string;
    function get_ReferralInfoUri: DDN.System.DNUri;
    function get_ContentId: DDN.mscorlib.DNGuid;
    function get_UseLicenseAcquisitionUrl: DDN.System.DNUri;

  { methods } 

    ///<summary>
    ///  返回一个已解密 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  已签名的此版本 <see cref="T:System.Security.RightsManagement.PublishLicense" />
    ///  。
    ///</summary>
    ///  <param name="cryptoProvider">
    ///  要使用该许可证进行解密的权限管理服务。
    ///</param>
    ///<returns>
    ///  此许可证解密后，未签名版本。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="cryptoProvider" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function DecryptUnsignedPublishLicense(cryptoProvider: DNCryptoProvider): DNUnsignedPublishLicense;
    ///<summary>
    ///  返回用于创建此许可证的序列化 XrML 字符串。
    ///</summary>
    ///<returns>
    ///  用于创建此许可证的序列化 Extensible Rights Markup Language (XrML) 字符串。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  尝试获取 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  为用户或用户组中指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  。
    ///</summary>
    ///  <param name="secureEnvironment">
    ///  许可证激活和绑定的安全环境。
    ///</param>
    ///<returns><see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  为用户或用户组中指定 <paramref name="secureEnvironment" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">
    ///  身份验证失败。
    ///</exception>
    function AcquireUseLicense(secureEnvironment: DNSecureEnvironment): DNUseLicense;
    ///<summary>
    ///  尝试获取 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  为用户或用户组中指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  。
    ///</summary>
    ///  <param name="secureEnvironment">
    ///  许可证激活和绑定的安全环境。
    ///</param>
    ///<returns><see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  为用户或用户组中指定 <paramref name="secureEnvironment" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException">
    ///  身份验证失败。
    ///</exception>
    function AcquireUseLicenseNoUI(secureEnvironment: DNSecureEnvironment): DNUseLicense;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取作者或内容的发布者的联系人姓名。
    ///</summary>
    ///<returns>
    ///  作者或内容的发布者的联系人名称。
    ///</returns>
    property ReferralInfoName: string read get_ReferralInfoName;
    ///<summary>
    ///  获取联系人 URI 作者或发布服务器上的内容。
    ///</summary>
    ///<returns>
    ///  联系人 统一资源标识符 (URI) 作者或发布服务器上的内容。
    ///</returns>
    property ReferralInfoUri: DDN.System.DNUri read get_ReferralInfoUri;
    ///<summary>
    ///  获取发布服务器上创建内容标识符。
    ///</summary>
    ///<returns>
    ///  发布服务器上创建的内容标识符。
    ///</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId;
    ///<summary>
    ///  获取 URI 用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  。
    ///</summary>
    ///<returns>
    ///  URI 用于获取 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  。
    ///</returns>
    property UseLicenseAcquisitionUrl: DDN.System.DNUri read get_UseLicenseAcquisitionUrl;
  end;

  TDNPublishLicense = class(TDNGenericImport<DNPublishLicenseClass, DNPublishLicense>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNSecureEnvironmentClass = interface(DNObjectClass)
  ['{66C51EAD-42D0-5942-8FAB-764F2657FCC6}']
  { static methods } 

    ///<summary>
    ///  使用给定权限清单为指定用户创建安全客户端会话。
    ///</summary>
    ///  <param name="applicationManifest">
    ///  应用程序权限清单。
    ///</param>
    ///  <param name="user">
    ///  要为其授予权限管理内容访问权限的用户或用户组。
    ///</param>
    ///<returns>
    ///  一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。
    ///</returns>
    {class} function Create(applicationManifest: string; user: DNContentUser): DNSecureEnvironment; overload;
    ///<summary>
    ///  创建给定了应用程序权限清单 <see cref="T:System.Security.RightsManagement.AuthenticationType" />
    ///  和 <see cref="T:System.Security.RightsManagement.UserActivationMode" />
    ///  的安全客户端会话。
    ///</summary>
    ///  <param name="applicationManifest">
    ///  应用程序权限清单。
    ///</param>
    ///  <param name="authentication">
    ///  身份验证的方法。
    ///</param>
    ///  <param name="userActivationMode">
    ///  用户权限帐户证书的类型。
    ///</param>
    ///<returns>
    ///  一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。
    ///</returns>
    {class} function Create(applicationManifest: string; authentication: DNAuthenticationType; userActivationMode: DNUserActivationMode): DNSecureEnvironment; overload;
    ///<summary>
    ///  表示是否已激活访问权限管理内容的给定用户。
    ///</summary>
    ///  <param name="user">
    ///  要为其授予权限管理内容访问权限的用户或用户组。
    ///</param>
    ///<returns>
    ///  如果已激活访问权限管理内容的给定 <paramref name="user" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsUserActivated(user: DNContentUser): Boolean;
    ///<summary>
    ///  返回激活用户的列表。
    ///</summary>
    ///<returns>
    ///  当前活动用户的列表。
    ///</returns>
    {class} function GetActivatedUsers: DDN.mscorlib.DNReadOnlyCollection<DNContentUser>;
    ///<summary>
    ///  删除指定用户的许可证激活。
    ///</summary>
    ///  <param name="user">
    ///  要为其删除许可证激活的用户。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="user" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  给定的 <paramref name="user" />
    ///  既未经过 Windows 身份验证也未经过 Passport 身份验证的验证。
    ///</exception>
    {class} procedure RemoveActivatedUser(user: DNContentUser);

  end;

  ///<summary>
  ///  表示一个用于用户激活、许可证绑定和其他权限管理操作的安全客户端会话。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.SecureEnvironment')]
  DNSecureEnvironment = interface(DDN.mscorlib.DNIDisposable)
  ['{204B8E3F-555B-3A76-83DA-6BD9DCFE4BA2}']
  { getters & setters } 

    function get_User: DNContentUser;
    function get_ApplicationManifest: string;

  { methods } 

    ///<summary>
    ///  释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用户组时，指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  已创建。
    ///</summary>
    ///<returns>
    ///  用户组指定了对 <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" />
    ///  方法时 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  已创建。
    ///</returns>
    property User: DNContentUser read get_User;
    ///<summary>
    ///  获取 <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" />
    ///  时指定 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  已创建。
    ///</summary>
    ///<returns>
    ///  为指定的应用程序清单 <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" />
    ///  方法时 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  创建。
    ///</returns>
    property ApplicationManifest: string read get_ApplicationManifest;
  end;

  TDNSecureEnvironment = class(TDNGenericImport<DNSecureEnvironmentClass, DNSecureEnvironment>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNUnsignedPublishLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5031376F-85CC-58EE-90BD-46D73C41947A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNUnsignedPublishLicense; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  从指定的类 XrML 发布许可证模板。 </summary>
    ///  <param name="publishLicenseTemplate">
    ///  Extensible Rights Markup Language (XrML) 发布许可证模板用于创建此许可证。
    ///</param>
    {class} function init(publishLicenseTemplate: string): DNUnsignedPublishLicense; overload;

  end;

  ///<summary>
  ///  表示一个未签名的权限管理 <see cref="T:System.Security.RightsManagement.PublishLicense" />
  ///  或未签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" />
  ///  模板。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.UnsignedPublishLicense')]
  DNUnsignedPublishLicense = interface(DDN.mscorlib.DNObject)
  ['{4C44A1DC-0B6F-3833-AFE8-2F9081410FA3}']
  { getters & setters } 

    function get_Owner: DNContentUser;
    procedure set_Owner(value: DNContentUser);
    function get_ReferralInfoName: string;
    procedure set_ReferralInfoName(value: string);
    function get_ReferralInfoUri: DDN.System.DNUri;
    procedure set_ReferralInfoUri(value: DDN.System.DNUri);
    function get_ContentId: DDN.mscorlib.DNGuid;
    procedure set_ContentId(value: DDN.mscorlib.DNGuid);
    function get_Grants: DDN.mscorlib.DNICollection<DNContentGrant>;
    function get_LocalizedNameDescriptionDictionary: DDN.mscorlib.DNIDictionary<Int32, DNLocalizedNameDescriptionPair>;

  { methods } 

    function Sign(secureEnvironment: DNSecureEnvironment; out authorUseLicense: DNUseLicense): DNPublishLicense;
    ///<summary>
    ///  返回从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  的 XrML 创建的序列化模板。
    ///</summary>
    ///<returns>
    ///  从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />
    ///  的 XrML 创建的序列化模板。
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置内容所有者。
    ///</summary>
    ///<returns>
    ///  拥有已发布的内容的用户。
    ///</returns>
    property Owner: DNContentUser read get_Owner write set_Owner;
    ///<summary>
    ///  获取或设置作者或内容的发布者的联系人姓名。
    ///</summary>
    ///<returns>
    ///  作者或内容的发布者的联系人名称。
    ///</returns>
    property ReferralInfoName: string read get_ReferralInfoName write set_ReferralInfoName;
    ///<summary>
    ///  获取或设置联系人 URI 作者或发布服务器上的内容。
    ///</summary>
    ///<returns>
    ///  联系人 统一资源标识符 (URI) 作者或发布服务器上的内容。
    ///</returns>
    property ReferralInfoUri: DDN.System.DNUri read get_ReferralInfoUri write set_ReferralInfoUri;
    ///<summary>
    ///  获取或设置发布者创建的内容标识符。
    ///</summary>
    ///<returns>
    ///  发布者创建的权限管理内容标识符。
    ///</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId write set_ContentId;
    ///<summary>
    ///  获取分配的用户权限的集合。
    ///</summary>
    ///<returns>
    ///  此许可证中提供的分配的用户权限的集合。
    ///</returns>
    property Grants: DDN.mscorlib.DNICollection<DNContentGrant> read get_Grants;
    ///<summary>
    ///  获取名称和描述对的集合。
    ///</summary>
    ///<returns>
    ///  名称和说明对一个集合。
    ///</returns>
    property LocalizedNameDescriptionDictionary: DDN.mscorlib.DNIDictionary<Int32, DNLocalizedNameDescriptionPair> read get_LocalizedNameDescriptionDictionary;
  end;

  TDNUnsignedPublishLicense = class(TDNGenericImport<DNUnsignedPublishLicenseClass, DNUnsignedPublishLicense>) end;

  //-------------namespace: System.Security.RightsManagement----------------
  DNUseLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61ADF14F-C95D-5C6C-873B-FBBCE8CAD442}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Security.RightsManagement.UseLicense" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="useLicense">
    ///  使用许可证，以序列化 Extensible Rights Markup Language (XrML) 窗体。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="useLicense" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.RightsManagement.RightsManagementException"><paramref name="useLicense" />
    ///  无效。
    ///</exception>
    {class} function init(useLicense: string): DNUseLicense;

  end;

  ///<summary>
  ///  表示使用户可以访问受保护的权限管理内容的许可证。
  ///</summary>
  [DNTypeName('System.Security.RightsManagement.UseLicense')]
  DNUseLicense = interface(DDN.mscorlib.DNObject)
  ['{BD61521E-E105-389D-8243-125E17BFD22D}']
  { getters & setters } 

    function get_Owner: DNContentUser;
    function get_ContentId: DDN.mscorlib.DNGuid;
    function get_ApplicationData: DDN.mscorlib.DNIDictionary<string, string>;

  { methods } 

    ///<summary>
    ///  返回的序列化 XrML 字符串，用来创建此许可证。
    ///</summary>
    ///<returns>
    ///  序列化 Extensible Rights Markup Language (XrML) 字符串最初传递到 <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" />
    ///  构造函数。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  将许可证绑定到给定的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />
    ///  。
    ///</summary>
    ///  <param name="secureEnvironment">
    ///  要将许可证绑定到的环境。
    ///</param>
    ///<returns>
    ///  如果许可证绑定成功，则为 <see cref="T:System.Security.RightsManagement.CryptoProvider" />
    ///  实例；否则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="secureEnvironment" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Bind(secureEnvironment: DNSecureEnvironment): DNCryptoProvider;
    ///<summary>
    ///  指示此许可证是否等效于指定的另一个许可证。
    ///</summary>
    ///  <param name="x">
    ///  要比较的许可证。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果这两种许可证等效项。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(x: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回与此许可证关联的哈希代码。
    ///</summary>
    ///<returns>
    ///  此许可证的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取许可证的所有者。
    ///</summary>
    ///<returns>
    ///  许可证的所有者。
    ///</returns>
    property Owner: DNContentUser read get_Owner;
    ///<summary>
    ///  获取发布者创建的内容标识符。
    ///</summary>
    ///<returns>
    ///  创建发布服务器上的内容标识符。
    ///</returns>
    property ContentId: DDN.mscorlib.DNGuid read get_ContentId;
    ///<summary>
    ///  获取应用程序数据字典，其中包含从向使用方应用程序的发布应用程序传递的键/值对。
    ///</summary>
    ///<returns>
    ///  发布应用程序中对使用方应用程序传递应用程序数据字典，其中包含键/值对。
    ///</returns>
    property ApplicationData: DDN.mscorlib.DNIDictionary<string, string> read get_ApplicationData;
  end;

  TDNUseLicense = class(TDNGenericImport<DNUseLicenseClass, DNUseLicense>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherSynchronizationContextClass = interface(DDN.mscorlib.DNSynchronizationContextClass)
  ['{980381EE-E16A-551F-BFFB-154E725EF013}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  类通过使用当前 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    {class} function init: DNDispatcherSynchronizationContext; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  初始化 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dispatcher"><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  关联这 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  与。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(dispatcher: DNDispatcher): DNDispatcherSynchronizationContext; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  初始化 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="dispatcher"><see cref="T:System.Windows.Threading.Dispatcher" />
    ///  关联这 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  与。
    ///</param>
    ///  <param name="priority">
    ///  与用来发送和发布回调方法的优先级。
    ///</param>
    {class} function init(dispatcher: DNDispatcher; priority: DNDispatcherPriority): DNDispatcherSynchronizationContext; overload;

  end;

  ///<summary>
  ///  提供同步上下文 Windows Presentation Foundation (WPF)。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherSynchronizationContext')]
  DNDispatcherSynchronizationContext = interface(DDN.mscorlib.DNSynchronizationContext)
  ['{73D885A0-7A9E-36EC-94DE-3A777E4E3E2E}']
  { methods } 

    ///<summary>
    ///  以同步方式调用同步上下文中的回调。
    ///</summary>
    ///  <param name="d">
    ///  要调用的委托。
    ///</param>
    ///  <param name="state">
    ///  传递给委托的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="d" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Send(d: DDN.mscorlib.DNSendOrPostCallback; state: DDN.mscorlib.DNObject);
    ///<summary>
    ///  以异步方式调用同步上下文中的回调。
    ///</summary>
    ///  <param name="d">
    ///  要调用的委托。
    ///</param>
    ///  <param name="state">
    ///  传递给委托的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="d" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Post(d: DDN.mscorlib.DNSendOrPostCallback; state: DDN.mscorlib.DNObject);
    ///<summary>
    ///  等待指定数组中的任一元素或所有元素接收信号。
    ///</summary>
    ///  <param name="waitHandles">
    ///  一个数组，包含本机操作系统句柄。
    ///</param>
    ///  <param name="waitAll">
    ///  如果等待所有句柄，则为 <see langword="true" />
    ///  ；如果等待任一句柄，则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="millisecondsTimeout">
    ///  等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" />
    ///  (-1)，表示无限期等待。
    ///</param>
    ///<returns>
    ///  满足等待的对象的数组索引。
    ///</returns>
    function Wait(waitHandles: TArray<IntPtr>; waitAll: Boolean; millisecondsTimeout: Int32): Int32;
    ///<summary>
    ///  会创建一份 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此同步上下文的副本。
    ///</returns>
    function CreateCopy: DDN.mscorlib.DNSynchronizationContext;
    procedure OperationStarted;
    procedure OperationCompleted;
    function IsWaitNotificationRequired: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispatcherSynchronizationContext = class(TDNGenericImport<DNDispatcherSynchronizationContextClass, DNDispatcherSynchronizationContext>) end;

  //-------------namespace: System.ComponentModel----------------
  DNSortDescriptionClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{594F45B1-D8C6-599A-87F8-A03191CA8E9B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.ComponentModel.SortDescription" />
    ///  结构的新实例。
    ///</summary>
    ///  <param name="propertyName">
    ///  对列表进行排序所用的属性名称。
    ///</param>
    ///  <param name="direction">
    ///  排序顺序。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="propertyName" />
    ///  参数不能为 null。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="propertyName" />
    ///  参数不能为空
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="direction" />
    ///  参数未指定有效值。
    ///</exception>
    {class} function init(propertyName: string; direction: DDN.System.DNListSortDirection): DNSortDescription;

  end;

  ///<summary>
  ///  定义要用作集合排序条件的方向和属性名。
  ///</summary>
  [DNTypeName('System.ComponentModel.SortDescription')]
  DNSortDescription = interface(DDN.mscorlib.DNValueType)
  ['{B071A4ED-78A6-3FDB-8F78-3330B96E0BB4}']
  { getters & setters } 

    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_Direction: DDN.System.DNListSortDirection;
    procedure set_Direction(value: DDN.System.DNListSortDirection);
    function get_IsSealed: Boolean;

  { methods } 

    ///<summary>
    ///  将指定实例与当前的 <see cref="T:System.ComponentModel.SortDescription" />
    ///  实例比较值是否相等。
    ///</summary>
    ///  <param name="obj">
    ///  要比较的 <see cref="T:System.ComponentModel.SortDescription" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="obj" />
    ///  与 <see cref="T:System.ComponentModel.SortDescription" />
    ///  的此实例具有相同值，则为 <see langword="true" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回 <see cref="T:System.ComponentModel.SortDescription" />
    ///  的此实例的哈希代码。
    ///</summary>
    ///<returns><see cref="T:System.ComponentModel.SortDescription" />
    ///  的此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置要用作排序条件的属性名称。
    ///</summary>
    ///<returns>
    ///  默认值为 null。
    ///</returns>
    property PropertyName: string read get_PropertyName write set_PropertyName;
    ///<summary>
    ///  获取或设置一个值，该值指示是按升序还是降序进行排序。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.ComponentModel.ListSortDirection" />
    ///  值，指示是按升序还是降序进行排序。
    ///</returns>
    property Direction: DDN.System.DNListSortDirection read get_Direction write set_Direction;
    ///<summary>
    ///  获取一个值，该值指示此对象是否为不可变状态。
    ///</summary>
    ///<returns>
    ///  如果此对象在使用中，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSealed: Boolean read get_IsSealed;
  end;

  TDNSortDescription = class(TDNGenericImport<DNSortDescriptionClass, DNSortDescription>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyChangedEventArgsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1043A968-EBF2-5A0E-A233-C255118AFC7F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="property">
    ///  更改的依赖项属性标识符。
    ///</param>
    ///  <param name="oldValue">
    ///  之前报告的状态更改的相关事件的更改的属性值。
    ///</param>
    ///  <param name="newValue">
    ///  报告相关的事件或状态更改的更改后的属性的值。
    ///</param>
    {class} function init(&property: DNDependencyProperty; oldValue: DDN.mscorlib.DNObject; newValue: DDN.mscorlib.DNObject): DNDependencyPropertyChangedEventArgs;

  end;

  ///<summary>
  ///  提供各种属性更改事件的数据。
  ///  通常这些事件对只读依赖属性的值中的有效值更改进行报告。
  ///  另一个用法是用作 <see cref="T:System.Windows.PropertyChangedCallback" />
  ///  实现的一部分。
  ///</summary>
  [DNTypeName('System.Windows.DependencyPropertyChangedEventArgs')]
  DNDependencyPropertyChangedEventArgs = interface(DDN.mscorlib.DNValueType)
  ['{7D6F0EB5-506E-35BF-BFFA-CA81D64EABEC}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_OldValue: DDN.mscorlib.DNObject;
    function get_NewValue: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  获取此 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号 32 位整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定所提供的对象是否等效于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前比较的对象 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果所提供的对象等效于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  确定是否提供 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  等同于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  。
    ///</summary>
    ///  <param name="args"><see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  要与当前进行比较 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///</param>
    ///<returns><see langword="true" />
    ///  如果提供 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  等同于当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(args: DNDependencyPropertyChangedEventArgs): Boolean; overload;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取发生值更改依赖项属性的标识符。
    ///</summary>
    ///<returns>
    ///  依赖项属性标识符字段，其中的值更改时发生。
    ///</returns>
    property &Property: DNDependencyProperty read get_Property;
    ///<summary>
    ///  获取更改之前的属性的值。
    ///</summary>
    ///<returns>
    ///  更改之前的属性值。
    ///</returns>
    property OldValue: DDN.mscorlib.DNObject read get_OldValue;
    ///<summary>
    ///  在更改后获取属性的值。
    ///</summary>
    ///<returns>
    ///  更改后的属性值。
    ///</returns>
    property NewValue: DDN.mscorlib.DNObject read get_NewValue;
  end;

  TDNDependencyPropertyChangedEventArgs = class(TDNGenericImport<DNDependencyPropertyChangedEventArgsClass, DNDependencyPropertyChangedEventArgs>) end;

  //-------------namespace: System.Windows----------------
  DNInt32RectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{97F71006-A87B-54D0-8BCA-CCC7D9E17DF6}']
  { static getter & setter } 

    {class} function get_Empty: DNInt32Rect;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Int32Rect" />
    ///  具有指定 <see cref="P:System.Windows.Int32Rect.X" />
    ///  和 <see cref="P:System.Windows.Int32Rect.Y" />
    ///  坐标和指定 <see cref="P:System.Windows.Int32Rect.Width" />
    ///  和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  。
    ///</summary>
    ///  <param name="x"><see cref="P:System.Windows.Int32Rect.X" />
    ///  新 <see cref="T:System.Windows.Int32Rect" />
    ///  实例，其中指定的矩形的左上角的 x 坐标。
    ///</param>
    ///  <param name="y"><see cref="P:System.Windows.Int32Rect.Y" />
    ///  新 <see cref="T:System.Windows.Int32Rect" />
    ///  实例，其中指定的矩形的左上角的 y 坐标。
    ///</param>
    ///  <param name="width"><see cref="P:System.Windows.Int32Rect.Width" />
    ///  新 <see cref="T:System.Windows.Int32Rect" />
    ///  实例指定的矩形的宽度。
    ///</param>
    ///  <param name="height"><see cref="P:System.Windows.Int32Rect.Height" />
    ///  新 <see cref="T:System.Windows.Int32Rect" />
    ///  实例指定的矩形的高度。
    ///</param>
    {class} function init(x: Int32; y: Int32; width: Int32; height: Int32): DNInt32Rect;

  { static methods } 

    ///<summary>
    ///  确定指定的矩形是否相等。
    ///</summary>
    ///  <param name="int32Rect1">
    ///  要比较的第一个矩形。
    ///</param>
    ///  <param name="int32Rect2">
    ///  要比较的第二个矩形。
    ///</param>
    ///<returns>
    ///  true 如果 int32Rect1 和 int32Rect2 具有相同 <see cref="P:System.Windows.Int32Rect.X" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Y" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Width" />
    ///  , ，和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  ; 否则为 false。
    ///</returns>
    {class} function Equals(int32Rect1: DNInt32Rect; int32Rect2: DNInt32Rect): Boolean; overload;
    ///<summary>
    ///  创建 <see cref="T:System.Windows.Int32Rect" />
    ///  从指定的结构 <see cref="T:System.String" />
    ///  表示形式。
    ///</summary>
    ///  <param name="source">
    ///  字符串表示形式 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</param>
    ///<returns>
    ///  等效于 <see cref="T:System.Windows.Int32Rect" />
    ///  结构。
    ///</returns>
    {class} function Parse(source: string): DNInt32Rect;

  { static propertys } 

    ///<summary>
    ///  获取空的矩形中，一个特殊值，表示一个矩形，有没有位置或区域。
    ///</summary>
    ///<returns>
    ///  任何位置或区域为空矩形。
    ///</returns>
    {class} property Empty: DNInt32Rect read get_Empty;
  end;

  ///<summary>
  ///  描述整数矩形的宽度、高度和位置。
  ///</summary>
  [DNTypeName('System.Windows.Int32Rect')]
  DNInt32Rect = interface(DDN.mscorlib.DNValueType)
  ['{5F943127-FAB2-3DCD-BB34-D6430F6957D0}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_IsEmpty: Boolean;
    function get_HasArea: Boolean;

  { methods } 

    ///<summary>
    ///  确定指定的矩形是否等于此矩形。
    ///</summary>
    ///  <param name="o">
    ///  要与当前矩形进行比较的对象。
    ///</param>
    ///<returns>
    ///  true 如果 o 是 <see cref="T:System.Windows.Int32Rect" />
    ///  和相同 <see cref="P:System.Windows.Int32Rect.X" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Y" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Width" />
    ///  , ，和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  为此矩形; 否则为 false。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  确定指定的矩形是否等于此矩形。
    ///</summary>
    ///  <param name="value">
    ///  要与当前矩形进行比较的矩形。
    ///</param>
    ///<returns>
    ///  true 如果这两个矩形具有相同 <see cref="P:System.Windows.Int32Rect.X" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Y" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Width" />
    ///  , ，和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  为此矩形; 否则为 false。
    ///</returns>
    function Equals(value: DNInt32Rect): Boolean; overload;
    ///<summary>
    ///  创建从此矩形的哈希代码 <see cref="P:System.Windows.Int32Rect.X" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Y" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Width" />
    ///  , ，和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  值。
    ///</summary>
    ///<returns>
    ///  此矩形的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建的字符串表示形式 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个包含相同字符串 <see cref="P:System.Windows.Int32Rect.X" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Y" />
    ///  , ，<see cref="P:System.Windows.Int32Rect.Width" />
    ///  , ，和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  值 <see cref="T:System.Windows.Int32Rect" />
    ///  结构。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  创建的字符串表示形式 <see cref="T:System.Windows.Int32Rect" />
    ///  基于提供 <see cref="T:System.IFormatProvider" />
    ///  。
    ///</summary>
    ///  <param name="provider">
    ///  要使用的格式提供程序。
    ///  如果提供程序为 <see langword="null" />
    ///  , ，则使用当前区域性。
    ///</param>
    ///<returns>
    ///  此实例的字符串表示 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置矩形左上角的 x 坐标。
    ///</summary>
    ///<returns>
    ///  矩形左上角的 x 坐标。
    ///  默认值为 0。
    ///</returns>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  获取或设置矩形左上角的 y 坐标。
    ///</summary>
    ///<returns>
    ///  矩形左上角的 y 坐标。
    ///  默认值为 0。
    ///</returns>
    property Y: Int32 read get_Y write set_Y;
    ///<summary>
    ///  获取或设置矩形的宽度。
    ///</summary>
    ///<returns>
    ///  矩形的宽度。
    ///  默认值为 0。
    ///</returns>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  获取或设置矩形的高度。
    ///</summary>
    ///<returns>
    ///  矩形的高度。
    ///  默认值为 0。
    ///</returns>
    property Height: Int32 read get_Height write set_Height;
    ///<summary>
    ///  获取一个值，该值指示是否为空矩形。
    ///</summary>
    ///<returns>
    ///  true 如果矩形为空; 否则为 false。
    ///  默认值为 true。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="P:System.Windows.Int32Rect.Width" />
    ///  和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  属性 <see cref="T:System.Windows.Int32Rect" />
    ///  大于 0。
    ///</summary>
    ///<returns>
    ///  true <see cref="P:System.Windows.Int32Rect.Width" />
    ///  和 <see cref="P:System.Windows.Int32Rect.Height" />
    ///  属性 <see cref="T:System.Windows.Int32Rect" />
    ///  大于 0; 否则为 <paramref name="false" />
    ///  。
    ///</returns>
    property HasArea: Boolean read get_HasArea;
  end;

  TDNInt32Rect = class(TDNGenericImport<DNInt32RectClass, DNInt32Rect>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNMSGClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{A00FC6CD-E54F-5687-9335-8EBE16D118B0}']
  end;

  ///<summary>
  ///  包含从线程的消息队列的消息信息。
  ///</summary>
  [DNTypeName('System.Windows.Interop.MSG')]
  DNMSG = interface(DDN.mscorlib.DNValueType)
  ['{B908E879-0C00-3800-9E17-8F5C3D0CF736}']
  { getters & setters } 

    function get_hwnd: IntPtr;
    procedure set_hwnd(value: IntPtr);
    function get_message: Int32;
    procedure set_message(value: Int32);
    function get_wParam: IntPtr;
    procedure set_wParam(value: IntPtr);
    function get_lParam: IntPtr;
    procedure set_lParam(value: IntPtr);
    function get_time: Int32;
    procedure set_time(value: Int32);
    function get_pt_x: Int32;
    procedure set_pt_x(value: Int32);
    function get_pt_y: Int32;
    procedure set_pt_y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置为其窗口过程接收消息窗口的窗口句柄 (HWND)。
    ///</summary>
    ///<returns>
    ///  窗口句柄 (HWND)。
    ///</returns>
    property hwnd: IntPtr read get_hwnd write set_hwnd;
    ///<summary>
    ///  获取或设置消息标识符。
    ///</summary>
    ///<returns>
    ///  消息的标识符。
    ///</returns>
    property message: Int32 read get_message write set_message;
    ///<summary>
    ///  获取或设置 <paramref name="wParam" />
    ///  值为消息，该值指定消息有关的其他信息。
    ///  确切含义取决于消息的值。
    ///</summary>
    ///<returns><paramref name="wParam" />
    ///  用于消息的值。
    ///</returns>
    property wParam: IntPtr read get_wParam write set_wParam;
    ///<summary>
    ///  获取或设置 <paramref name="lParam" />
    ///  值，该值指定消息有关的其他信息。
    ///  值的确切含义取决于 <see cref="P:System.Windows.Interop.MSG.message" />
    ///  成员。
    ///</summary>
    ///<returns><paramref name="lParam" />
    ///  用于消息的值。
    ///</returns>
    property lParam: IntPtr read get_lParam write set_lParam;
    ///<summary>
    ///  获取或设置发送消息之后的时间。
    ///</summary>
    ///<returns>
    ///  所发送消息之后的时间。
    ///</returns>
    property time: Int32 read get_time write set_time;
    ///<summary>
    ///  获取或设置发送消息之后在屏幕上、 在光标位置的 x 坐标。
    ///</summary>
    ///<returns>
    ///  光标位置的 x 坐标。
    ///</returns>
    property pt_x: Int32 read get_pt_x write set_pt_x;
    ///<summary>
    ///  获取或设置发送消息之后在屏幕上、 在光标位置的 y 坐标。
    ///</summary>
    ///<returns>
    ///  光标位置的 y 坐标。
    ///</returns>
    property pt_y: Int32 read get_pt_y write set_pt_y;
  end;

  TDNMSG = class(TDNGenericImport<DNMSGClass, DNMSG>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEntryClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{6D491468-4A5A-5D8C-926F-E98B006DF08C}']
  end;

  ///<summary>
  ///  表示本地设置的依赖属性的属性标识符和属性值。
  ///</summary>
  [DNTypeName('System.Windows.LocalValueEntry')]
  DNLocalValueEntry = interface(DDN.mscorlib.DNValueType)
  ['{637EC814-5100-3B56-80D0-05B3BEA16AD5}']
  { getters & setters } 

    function get_Property: DNDependencyProperty;
    function get_Value: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  返回此 <see cref="T:System.Windows.LocalValueEntry" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号的 32 位整数值。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定两个 <see cref="T:System.Windows.LocalValueEntry" />
    ///  实例是否相等。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Windows.LocalValueEntry" />
    ///  进行比较的 <see cref="T:System.Windows.LocalValueEntry" />
    ///  。
    ///</param>
    ///<returns>
    ///  这 <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" />
    ///  实现比较的值 <see cref="P:System.Windows.LocalValueEntry.Property" />
    ///  , ，并可能比较的值 <see cref="P:System.Windows.LocalValueEntry.Value" />
    ///  。
    ///<see cref="P:System.Windows.LocalValueEntry.Property" />
    ///  组件 <see cref="T:System.Windows.LocalValueEntry" />
    ///  是值类型，因此将始终为按位比较。
    ///  有关 <see cref="P:System.Windows.LocalValueEntry.Value" />
    ///  组件，此实现将使用按位比较，如果它是值类型。
    ///  对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制，因为它只是使用内部 = = 运算符对两个值。
    ///  默认情况下，为这些值的引用相等，因此的相等性的整个 <see cref="T:System.Windows.LocalValueEntry" />
    ///  将变得引用相等性。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取该条目表示的本地设置的依赖项属性的标识符。
    ///</summary>
    ///<returns>
    ///  本地设置的依赖项属性的标识符。
    ///</returns>
    property &Property: DNDependencyProperty read get_Property;
    ///<summary>
    ///  获取本地设置的依赖属性的值。
    ///</summary>
    ///<returns>
    ///  对象形式的本地设置的依赖属性的值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
  end;

  TDNLocalValueEntry = class(TDNGenericImport<DNLocalValueEntryClass, DNLocalValueEntry>) end;

  //-------------namespace: System.Windows----------------
  DNLocalValueEnumeratorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{81080CE4-3DA2-543C-9F1A-20A61867A608}']
  end;

  ///<summary>
  ///  为 <see cref="T:System.Windows.DependencyObject" />
  ///  上存在的任何依赖属性的本地值提供枚举支持。
  ///</summary>
  [DNTypeName('System.Windows.LocalValueEnumerator')]
  DNLocalValueEnumerator = interface(DDN.mscorlib.DNValueType)
  ['{7560CD58-6EA4-3167-99C6-1DA6D308772A}']
  { getters & setters } 

    function get_Current: DNLocalValueEntry;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  返回当前 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定是否提供 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  等效于此 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  。
    ///</summary>
    ///  <param name="obj">
    ///  要与当前的 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  进行比较的 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果指定的 <see langword="true" />
    ///  等于当前的 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  ，则为 <see cref="T:System.Windows.LocalValueEnumerator" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  将枚举数推进到集合的下一个元素。
    ///</summary>
    ///<returns>
    ///  如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />
    ///  ；如果枚举数传递到集合的末尾，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveNext: Boolean;
    ///<summary>
    ///  将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。
    ///</summary>
    procedure Reset;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取集合中的当前元素。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Windows.LocalValueEntry" />
    ///  集合中。
    ///</returns>
    property Current: DNLocalValueEntry read get_Current;
    ///<summary>
    ///  获取集合中表示的项的数目。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNLocalValueEnumerator = class(TDNGenericImport<DNLocalValueEnumeratorClass, DNLocalValueEnumerator>) end;

  //-------------namespace: System.Windows.Media----------------
  DNMatrixClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C2D284FD-CEC8-58EB-99B6-46402D8B8C84}']
  { static getter & setter } 

    {class} function get_Identity: DNMatrix;

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的新实例。
    ///</summary>
    ///  <param name="m11">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  系数。
    ///</param>
    ///  <param name="m12">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.M12" />
    ///  系数。
    ///</param>
    ///  <param name="m21">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.M21" />
    ///  系数。
    ///</param>
    ///  <param name="m22">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.M22" />
    ///  系数。
    ///</param>
    ///  <param name="offsetX">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  系数。
    ///</param>
    ///  <param name="offsetY">
    ///  新的 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的 <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  系数。
    ///</param>
    {class} function init(m11: Double; m12: Double; m21: Double; m22: Double; offsetX: Double; offsetY: Double): DNMatrix;

  { static methods } 

    ///<summary>
    ///  乘以 <see cref="T:System.Windows.Media.Matrix" />
    ///  由另一个结构 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="trans1">
    ///  第一个 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构进行乘法运算。
    ///</param>
    ///  <param name="trans2">
    ///  第二个 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构进行乘法运算。
    ///</param>
    ///<returns><paramref name="trans1" />
    ///  与 <paramref name="trans2" />
    ///  相乘的结果。
    ///</returns>
    {class} function Multiply(trans1: DNMatrix; trans2: DNMatrix): DNMatrix;
    ///<summary>
    ///  确定两个指定 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构是否相等。
    ///</summary>
    ///  <param name="matrix1">
    ///  要比较的第一个 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</param>
    ///  <param name="matrix2">
    ///  要比较的第二个 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="matrix1" />
    ///  和 <paramref name="matrix2" />
    ///  相同; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(matrix1: DNMatrix; matrix2: DNMatrix): Boolean; overload;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  矩阵表示形式为等效 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="source"><see cref="T:System.String" />
    ///  矩阵表示形式。
    ///</param>
    ///<returns>
    ///  等效于 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</returns>
    {class} function Parse(source: string): DNMatrix;

  { static propertys } 

    ///<summary>
    ///  获取一个标识 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///<returns>
    ///  恒等矩阵。
    ///</returns>
    {class} property Identity: DNMatrix read get_Identity;
  end;

  ///<summary>
  ///  表示用于在 二维 空间中进行转换的 3x3 仿射转换矩阵。
  ///</summary>
  [DNTypeName('System.Windows.Media.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNValueType)
  ['{F2A79FC1-F4B4-30C3-AEBE-CC6B1DF2B467}']
  { getters & setters } 

    function get_IsIdentity: Boolean;
    function get_Determinant: Double;
    function get_HasInverse: Boolean;
    function get_M11: Double;
    procedure set_M11(value: Double);
    function get_M12: Double;
    procedure set_M12(value: Double);
    function get_M21: Double;
    procedure set_M21(value: Double);
    function get_M22: Double;
    procedure set_M22(value: Double);
    function get_OffsetX: Double;
    procedure set_OffsetX(value: Double);
    function get_OffsetY: Double;
    procedure set_OffsetY(value: Double);

  { methods } 

    ///<summary>
    ///  改变了这 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构单位矩阵。
    ///</summary>
    procedure SetIdentity;
    ///<summary>
    ///  指定将追加 <see cref="T:System.Windows.Media.Matrix" />
    ///  到此结构 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Windows.Media.Matrix" />
    ///  结构要追加到此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</param>
    procedure Append(matrix: DNMatrix);
    ///<summary>
    ///  将指定的前面添加 <see cref="T:System.Windows.Media.Matrix" />
    ///  部署到此结构 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="matrix"><see cref="T:System.Windows.Media.Matrix" />
    ///  结构以预先计算此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</param>
    procedure Prepend(matrix: DNMatrix);
    ///<summary>
    ///  有关此源的指定角度旋转 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度。
    ///</param>
    procedure Rotate(angle: Double);
    ///<summary>
    ///  前面添加旋转指定角度 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="angle">
    ///  要在前面添加的旋转角度。
    ///</param>
    procedure RotatePrepend(angle: Double);
    ///<summary>
    ///  有关指定点此矩阵的旋转。
    ///</summary>
    ///  <param name="angle">
    ///  角度 （以度为单位，旋转此矩阵）。
    ///</param>
    ///  <param name="centerX">
    ///  要围绕其旋转此矩阵的点的 x 坐标。
    ///</param>
    ///  <param name="centerY">
    ///  要围绕其旋转此矩阵的点的 y 坐标。
    ///</param>
    procedure RotateAt(angle: Double; centerX: Double; centerY: Double);
    ///<summary>
    ///  前面添加到此指定点处的指定角度的旋转 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="angle">
    ///  旋转角度，以度为单位。
    ///</param>
    ///  <param name="centerX">
    ///  旋转中心 x 坐标。
    ///</param>
    ///  <param name="centerY">
    ///  旋转中心 y 坐标。
    ///</param>
    procedure RotateAtPrepend(angle: Double; centerX: Double; centerY: Double);
    ///<summary>
    ///  将指定的比例向量追加到此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="scaleX">
    ///  值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 x 轴。
    ///</param>
    ///  <param name="scaleY">
    ///  值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 y 轴。
    ///</param>
    procedure Scale(scaleX: Double; scaleY: Double);
    ///<summary>
    ///  左乘指定的比例向量到此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="scaleX">
    ///  值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 x 轴的结构。
    ///</param>
    ///  <param name="scaleY">
    ///  值，通过它来调整此 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 y 轴的结构。
    ///</param>
    procedure ScalePrepend(scaleX: Double; scaleY: Double);
    ///<summary>
    ///  可以扩展这 <see cref="T:System.Windows.Media.Matrix" />
    ///  有关指定点指定的量。
    ///</summary>
    ///  <param name="scaleX">
    ///  缩放量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 x 轴。
    ///</param>
    ///  <param name="scaleY">
    ///  缩放量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 y 轴。
    ///</param>
    ///  <param name="centerX">
    ///  缩放操作的中心点的 x 坐标。
    ///</param>
    ///  <param name="centerY">
    ///  缩放操作的中心点的 y 坐标。
    ///</param>
    procedure ScaleAt(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    ///<summary>
    ///  将指定的小数位数围绕此指定的点前面添加 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="scaleX">
    ///  X 轴缩放比例。
    ///</param>
    ///  <param name="scaleY">
    ///  Y 轴缩放比例。
    ///</param>
    ///  <param name="centerX">
    ///  有关哪些执行缩放操作点的 x 坐标。
    ///</param>
    ///  <param name="centerY">
    ///  有关哪些执行缩放操作的点的 y 坐标值。
    ///</param>
    procedure ScaleAtPrepend(scaleX: Double; scaleY: Double; centerX: Double; centerY: Double);
    ///<summary>
    ///  将 x 和 y 中指定角度的倾斜追加到此维度 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="skewX">
    ///  X 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    ///  <param name="skewY">
    ///  Y 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    procedure Skew(skewX: Double; skewY: Double);
    ///<summary>
    ///  将 x 和 y 中指定角度的倾斜前面添加到此维度 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="skewX">
    ///  X 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    ///  <param name="skewY">
    ///  Y 维度中进行扭曲此所依据的角度 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    procedure SkewPrepend(skewX: Double; skewY: Double);
    ///<summary>
    ///  将指定的偏移量的翻译追加到此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="offsetX">
    ///  此偏移量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 x 轴。
    ///</param>
    ///  <param name="offsetY">
    ///  此偏移量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 y 轴。
    ///</param>
    procedure Translate(offsetX: Double; offsetY: Double);
    ///<summary>
    ///  前面添加到此指定偏移量的平移 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="offsetX">
    ///  此偏移量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 x 轴。
    ///</param>
    ///  <param name="offsetY">
    ///  此偏移量 <see cref="T:System.Windows.Media.Matrix" />
    ///  沿 y 轴。
    ///</param>
    procedure TranslatePrepend(offsetX: Double; offsetY: Double);
    ///<summary>
    ///  变换由指定的点 <see cref="T:System.Windows.Media.Matrix" />
    ///  并返回结果。
    ///</summary>
    ///  <param name="point">
    ///  要变换的点。
    ///</param>
    ///<returns>
    ///  转换的结果 <paramref name="point" />
    ///  由此 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    function Transform(point: DNPoint): DNPoint; overload;
    ///<summary>
    ///  此转换指定的点 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="points">
    ///  要变换的点。
    ///  数组中的原始点将替换由其转换值。
    ///</param>
    procedure Transform(points: TArray<DNPoint>); overload;
    ///<summary>
    ///  此转换指定的向量 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="vector">
    ///  要转换的向量。
    ///</param>
    ///<returns>
    ///  转换的结果 <paramref name="vector" />
    ///  由此 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    function Transform(vector: DNVector): DNVector; overload;
    ///<summary>
    ///  将指定的向量转换由此 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="vectors">
    ///  要变换的向量。
    ///  转换后的值替换为数组中的原始向量。
    ///</param>
    procedure Transform(vectors: TArray<DNVector>); overload;
    ///<summary>
    ///  反转此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Media.Matrix" />
    ///  结构不是可逆转。
    ///</exception>
    procedure Invert;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Object" />
    ///  是 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构，它是等同于此 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="o">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构，它是等同于此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构是否与此实例相同。
    ///</summary>
    ///  <param name="value">
    ///  实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  要与此实例进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果实例相等，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DNMatrix): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构的哈希代码。
    ///</summary>
    ///<returns>
    ///  此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建 <see cref="T:System.String" />
    ///  这种表示形式 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M12" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M21" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M22" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  , ，和 <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  值 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  创建 <see cref="T:System.String" />
    ///  这种表示形式 <see cref="T:System.Windows.Media.Matrix" />
    ///  使用区域性特定格式设置信息的结构。
    ///</summary>
    ///  <param name="provider">
    ///  区域性特定格式设置信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 <see cref="P:System.Windows.Media.Matrix.M11" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M12" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M21" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.M22" />
    ///  , ，<see cref="P:System.Windows.Media.Matrix.OffsetX" />
    ///  , ，和 <see cref="P:System.Windows.Media.Matrix.OffsetY" />
    ///  值 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构是单位矩阵。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构是单位矩阵; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property IsIdentity: Boolean read get_IsIdentity;
    ///<summary>
    ///  获取此决定 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  此决定 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</returns>
    property Determinant: Double read get_Determinant;
    ///<summary>
    ///  获取一个值，该值指示是否这<see cref="T:System.Windows.Media.Matrix" />
    ///  结构是可逆转。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果<see cref="T:System.Windows.Media.Matrix" />
    ///  具有逆实例; 否则为<see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property HasInverse: Boolean read get_HasInverse;
    ///<summary>
    ///  获取或设置的值的第一行和第一列这 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  值的第一行和第一列这 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///  默认值为 1。
    ///</returns>
    property M11: Double read get_M11 write set_M11;
    ///<summary>
    ///  获取或设置此第一的行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  这第一个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///  默认值为 0。
    ///</returns>
    property M12: Double read get_M12 write set_M12;
    ///<summary>
    ///  获取或设置第二个行和这第一列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  这第一列的第二行的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///  默认值为 0。
    ///</returns>
    property M21: Double read get_M21 write set_M21;
    ///<summary>
    ///  获取或设置此的第二行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  这第二个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///  默认值为 1。
    ///</returns>
    property M22: Double read get_M22 write set_M22;
    ///<summary>
    ///  获取或设置第三行、 第一列，此值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  第三行、 第一列，此值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///  默认值为 0。
    ///</returns>
    property OffsetX: Double read get_OffsetX write set_OffsetX;
    ///<summary>
    ///  获取或设置此第三个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  这第三个行和第二列的值 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///  默认值为 0。
    ///</returns>
    property OffsetY: Double read get_OffsetY write set_OffsetY;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: System.Windows----------------
  DNPointClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BF3D9A6A-3303-5D36-9170-E071F4B612E7}']
  { constructors } 

    ///<summary>
    ///  创建一个新 <see cref="T:System.Windows.Point" />
    ///  结构，其中包含指定的坐标。
    ///</summary>
    ///  <param name="x">
    ///  新的 x 坐标 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</param>
    ///  <param name="y">
    ///  新的 y 坐标 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</param>
    {class} function init(x: Double; y: Double): DNPoint;

  { static methods } 

    ///<summary>
    ///  比较两个 <see cref="T:System.Windows.Point" />
    ///  结构是否相等。
    ///</summary>
    ///  <param name="point1">
    ///  要比较的第一个点。
    ///</param>
    ///  <param name="point2">
    ///  要比较的第二个点。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="point1" />
    ///  和 <paramref name="point2" />
    ///  包含相同 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(point1: DNPoint; point2: DNPoint): Boolean; overload;
    ///<summary>
    ///  构造 <see cref="T:System.Windows.Point" />
    ///  从指定 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="source">
    ///  点的字符串表示形式。
    ///</param>
    ///<returns>
    ///  等效于 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</returns>
    ///<exception cref="T:System.FormatException"><paramref name="source" />
    ///  不包含两个以逗号或空格分隔的双精度值。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="source" />
    ///  不包含两个数字。
    ///  - 或 -
    ///  <paramref name="source" />
    ///  包含太多的分隔符。
    ///</exception>
    {class} function Parse(source: string): DNPoint;
    ///<summary>
    ///  添加 <see cref="T:System.Windows.Vector" />
    ///  到 <see cref="T:System.Windows.Point" />
    ///  ，并返回结果作为 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</summary>
    ///  <param name="point"><see cref="T:System.Windows.Point" />
    ///  可添加结构。
    ///</param>
    ///  <param name="vector"><see cref="T:System.Windows.Vector" />
    ///  可添加结构。
    ///</param>
    ///<returns>
    ///  返回的总和 <paramref name="point" />
    ///  和 <paramref name="vector" />
    ///  。
    ///</returns>
    {class} function Add(point: DNPoint; vector: DNVector): DNPoint;
    ///<summary>
    ///  中减去指定 <see cref="T:System.Windows.Vector" />
    ///  从指定 <see cref="T:System.Windows.Point" />
    ///  ，并返回结果 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="point">
    ///  起始位置的点 <paramref name="vector" />
    ///  中减去。
    ///</param>
    ///  <param name="vector"><paramref name="vector" />
    ///  要从中减去 <paramref name="point" />
    ///  。
    ///</param>
    ///<returns>
    ///  之间的差异 <paramref name="point" />
    ///  和 <paramref name="vector" />
    ///  。
    ///</returns>
    {class} function Subtract(point: DNPoint; vector: DNVector): DNPoint; overload;
    ///<summary>
    ///  中减去指定 <see cref="T:System.Windows.Point" />
    ///  从另一个指定 <see cref="T:System.Windows.Point" />
    ///  ，并返回的差异为 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="point1">
    ///  起始位置的点 <paramref name="point2" />
    ///  中减去。
    ///</param>
    ///  <param name="point2">
    ///  要从中减去的点 <paramref name="point1" />
    ///  。
    ///</param>
    ///<returns>
    ///  之间的差异 <paramref name="point1" />
    ///  和 <paramref name="point2" />
    ///  。
    ///</returns>
    {class} function Subtract(point1: DNPoint; point2: DNPoint): DNVector; overload;
    ///<summary>
    ///  转换指定 <see cref="T:System.Windows.Point" />
    ///  由指定的结构 <see cref="T:System.Windows.Media.Matrix" />
    ///  结构。
    ///</summary>
    ///  <param name="point">
    ///  要变换的点。
    ///</param>
    ///  <param name="matrix">
    ///  变换矩阵。
    ///</param>
    ///<returns>
    ///  已转换的点。
    ///</returns>
    {class} function Multiply(point: DNPoint; matrix: DNMatrix): DNPoint;

  end;

  ///<summary>
  ///  表示二维空间中的 x 坐标和 y 坐标对。
  ///</summary>
  [DNTypeName('System.Windows.Point')]
  DNPoint = interface(DDN.mscorlib.DNValueType)
  ['{8C9042D3-3635-3580-934F-8A49A1CD8E97}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);

  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.Object" />
    ///  是 <see cref="T:System.Windows.Point" />
    ///  以及它是否包含与此相同的坐标 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="o">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Windows.Point" />
    ///  和包含相同 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  值，则为此 <see cref="T:System.Windows.Point" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  比较两个 <see cref="T:System.Windows.Point" />
    ///  结构是否相等。
    ///</summary>
    ///  <param name="value">
    ///  要与此实例进行比较的点。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="T:System.Windows.Point" />
    ///  结构都包含相同 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DNPoint): Boolean; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.Point" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此哈希代码 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  创建 <see cref="T:System.String" />
    ///  这种表示形式 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  值 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  创建 <see cref="T:System.String" />
    ///  这种表示形式 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="provider">
    ///  区域性特定格式设置信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  值 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary>
    ///  偏移量的点 <see cref="P:System.Windows.Point.X" />
    ///  和 <see cref="P:System.Windows.Point.Y" />
    ///  坐标指定的量。
    ///</summary>
    ///  <param name="offsetX">
    ///  该点的偏移量
    ///<see cref="P:System.Windows.Point.X" />
    ///  坐标值。
    ///</param>
    ///  <param name="offsetY">
    ///  偏移量
    ///  点的 <see cref="P:System.Windows.Point.Y" />
    ///  协调。
    ///</param>
    procedure Offset(offsetX: Double; offsetY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Point.X" />
    ///  -协调此值的 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Point.X" />
    ///  -协调此值的 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///  默认值为 0。
    ///</returns>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Point.Y" />
    ///  -协调此值的 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Point.Y" />
    ///  -协调此值的 <see cref="T:System.Windows.Point" />
    ///  结构。
    ///  默认值为 0。
    ///</returns>
    property Y: Double read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: System.Windows----------------
  DNRectClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{419A9400-87EB-53CC-B620-A2368A596521}']
  { static getter & setter } 

    {class} function get_Empty: DNRect;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Rect" />
    ///  结构，它具有指定的左上角位置和指定的宽度和高度。
    ///</summary>
    ///  <param name="location">
    ///  一个指定的矩形的左上角的位置的点。
    ///</param>
    ///  <param name="size">
    ///  一个 <see cref="T:System.Windows.Size" />
    ///  结构，它指定的宽度和矩形的高度。
    ///</param>
    {class} function init(location: DNPoint; size: DNSize): DNRect; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Rect" />
    ///  结构，它具有指定的 x 坐标，y 坐标、 宽度和高度。
    ///</summary>
    ///  <param name="x">
    ///  矩形左上角的 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  矩形左上角的 y 坐标。
    ///</param>
    ///  <param name="width">
    ///  矩形的宽度。
    ///</param>
    ///  <param name="height">
    ///  矩形的高度。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="width" />
    ///  是负值。
    ///  - 或 -
    ///  <paramref name="height" />
    ///  是负值。
    ///</exception>
    {class} function init(x: Double; y: Double; width: Double; height: Double): DNRect; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Rect" />
    ///  结构，它是刚好足以包含两个指定的点。
    ///</summary>
    ///  <param name="point1">
    ///  新添加的矩形必须包含的第一个点。
    ///</param>
    ///  <param name="point2">
    ///  新添加的矩形必须包含第二个点。
    ///</param>
    {class} function init(point1: DNPoint; point2: DNPoint): DNRect; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Rect" />
    ///  结构，它是刚好足以包含指定的点和指定的点和指定的向量的总和。
    ///</summary>
    ///  <param name="point">
    ///  必须包含该矩形的第一个点。
    ///</param>
    ///  <param name="vector">
    ///  若要指定的点的偏移量。
    ///  生成的矩形将刚好足以包含这两个点。
    ///</param>
    {class} function init(point: DNPoint; vector: DNVector): DNRect; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Rect" />
    ///  结构，它指定大小的是，它位于 (0，0)。
    ///</summary>
    ///  <param name="size">
    ///  一个 <see cref="T:System.Windows.Size" />
    ///  结构，它指定的宽度和矩形的高度。
    ///</param>
    {class} function init(size: DNSize): DNRect; overload;

  { static methods } 

    ///<summary>
    ///  指示指定的矩形是否相等。
    ///</summary>
    ///  <param name="rect1">
    ///  要比较的第一个矩形。
    ///</param>
    ///  <param name="rect2">
    ///  要比较的第二个矩形。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果这些矩形具有相同 <see cref="P:System.Windows.Rect.Location" />
    ///  和 <see cref="P:System.Windows.Rect.Size" />
    ///  值; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(rect1: DNRect; rect2: DNRect): Boolean; overload;
    ///<summary>
    ///  返回指定的矩形的交集。
    ///</summary>
    ///  <param name="rect1">
    ///  要比较的第一个矩形。
    ///</param>
    ///  <param name="rect2">
    ///  要比较的第二个矩形。
    ///</param>
    ///<returns>
    ///  两个矩形交集或 <see cref="P:System.Windows.Rect.Empty" />
    ///  如果不存在任何交集。
    ///</returns>
    {class} function Intersect(rect1: DNRect; rect2: DNRect): DNRect; overload;
    ///<summary>
    ///  创建正好包含两个指定的矩形的矩形。
    ///</summary>
    ///  <param name="rect1">
    ///  要包含的第一个矩形。
    ///</param>
    ///  <param name="rect2">
    ///  要包含的第二个矩形。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    {class} function Union(rect1: DNRect; rect2: DNRect): DNRect; overload;
    ///<summary>
    ///  创建正好包含指定的矩形和指定的点的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要包括的矩形。
    ///</param>
    ///  <param name="point">
    ///  要包括的点。
    ///</param>
    ///<returns>
    ///  完全足够大，以指定的矩形和指定的点包含一个矩形。
    ///</returns>
    {class} function Union(rect: DNRect; point: DNPoint): DNRect; overload;
    ///<summary>
    ///  通过使用指定的向量，从指定的矩形中返回的偏移量的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  原始矩形。
    ///</param>
    ///  <param name="offsetVector">
    ///  一个指定新添加的矩形的水平和垂直偏移量的向量。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  为 <see cref="P:System.Windows.Rect.Empty" />
    ///  。
    ///</exception>
    {class} function Offset(rect: DNRect; offsetVector: DNVector): DNRect; overload;
    ///<summary>
    ///  通过使用指定的水平和垂直量从指定的矩形返回偏移量的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要移动的矩形。
    ///</param>
    ///  <param name="offsetX">
    ///  新的矩形的水平偏移量。
    ///</param>
    ///  <param name="offsetY">
    ///  新的矩形的垂直偏移量。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  为 <see cref="P:System.Windows.Rect.Empty" />
    ///  。
    ///</exception>
    {class} function Offset(rect: DNRect; offsetX: Double; offsetY: Double): DNRect; overload;
    ///<summary>
    ///  返回矩形是指定的矩形指定的矩形 <see cref="T:System.Windows.Size" />
    ///  , ，在所有方向。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Windows.Rect" />
    ///  结构修改。
    ///</param>
    ///  <param name="size">
    ///  指定要扩展矩形的量。
    ///<see cref="T:System.Windows.Size" />
    ///  结构的 <see cref="P:System.Windows.Size.Width" />
    ///  属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Left" />
    ///  和 <see cref="P:System.Windows.Rect.Right" />
    ///  属性。
    ///<see cref="T:System.Windows.Size" />
    ///  结构的 <see cref="P:System.Windows.Size.Height" />
    ///  属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Top" />
    ///  和 <see cref="P:System.Windows.Rect.Bottom" />
    ///  属性。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  是 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    {class} function Inflate(rect: DNRect; size: DNSize): DNRect; overload;
    ///<summary>
    ///  创建扩展或缩小的指定的矩形的指定宽度和高度值，请在所有方向得到的一个矩形。
    ///</summary>
    ///  <param name="rect"><see cref="T:System.Windows.Rect" />
    ///  结构修改。
    ///</param>
    ///  <param name="width">
    ///  若要展开或收缩的左侧和右侧的矩形的量。
    ///</param>
    ///  <param name="height">
    ///  若要展开或收缩该矩形的顶部和底部边的量。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><paramref name="rect" />
    ///  是 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    {class} function Inflate(rect: DNRect; width: Double; height: Double): DNRect; overload;
    ///<summary>
    ///  返回通过指定的矩阵应用到指定的矩形所产生的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  一个矩形，为转换的基础。
    ///</param>
    ///  <param name="matrix">
    ///  指定要应用的变换矩阵。
    ///</param>
    ///<returns>
    ///  从操作生成的矩形。
    ///</returns>
    {class} function Transform(rect: DNRect; matrix: DNMatrix): DNRect; overload;
    ///<summary>
    ///  从指定的字符串表示形式创建一个新矩形。
    ///</summary>
    ///  <param name="source">
    ///  字符串表示形式要在窗体的矩形"x、 y、 宽度和高度"。
    ///</param>
    ///<returns>
    ///  生成的矩形。
    ///</returns>
    {class} function Parse(source: string): DNRect;

  { static propertys } 

    ///<summary>
    ///  获取一个特殊值，表示一个矩形，有没有位置或区域。
    ///</summary>
    ///<returns>
    ///  具有空矩形 <see cref="P:System.Windows.Rect.X" />
    ///  和 <see cref="P:System.Windows.Rect.Y" />
    ///  属性值 <see cref="F:System.Double.PositiveInfinity" />
    ///  , ，并且具有 <see cref="P:System.Windows.Rect.Width" />
    ///  和 <see cref="P:System.Windows.Rect.Height" />
    ///  属性值 <see cref="F:System.Double.NegativeInfinity" />
    ///  。
    ///</returns>
    {class} property Empty: DNRect read get_Empty;
  end;

  ///<summary>
  ///  描述矩形的宽度、高度和位置。
  ///</summary>
  [DNTypeName('System.Windows.Rect')]
  DNRect = interface(DDN.mscorlib.DNValueType)
  ['{8BD3E975-4EAE-354C-B79B-8F2BA096461F}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Location: DNPoint;
    procedure set_Location(value: DNPoint);
    function get_Size: DNSize;
    procedure set_Size(value: DNSize);
    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Left: Double;
    function get_Top: Double;
    function get_Right: Double;
    function get_Bottom: Double;
    function get_TopLeft: DNPoint;
    function get_TopRight: DNPoint;
    function get_BottomLeft: DNPoint;
    function get_BottomRight: DNPoint;

  { methods } 

    ///<summary>
    ///  指示指定的对象是否等于当前的矩形。
    ///</summary>
    ///  <param name="o">
    ///  要与当前矩形进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Windows.Rect" />
    ///  并具有相同 <see cref="P:System.Windows.Rect.Location" />
    ///  和 <see cref="P:System.Windows.Rect.Size" />
    ///  值作为当前矩形; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  指示指定的矩形是否等于当前的矩形。
    ///</summary>
    ///  <param name="value">
    ///  要与当前矩形进行比较的矩形。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的矩形具有相同 <see cref="P:System.Windows.Rect.Location" />
    ///  和 <see cref="P:System.Windows.Rect.Size" />
    ///  值作为当前矩形; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DNRect): Boolean; overload;
    ///<summary>
    ///  创建该矩形的哈希代码。
    ///</summary>
    ///<returns>
    ///  当前的哈希代码 <see cref="T:System.Windows.Rect" />
    ///  结构。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回的字符串表示形式的矩形。
    ///</summary>
    ///<returns>
    ///  当前矩形的字符串表示形式。
    ///  字符串具有以下形式:"<see cref="P:System.Windows.Rect.X" />
    ///  ,，<see cref="P:System.Windows.Rect.Y" />
    ///  ,，<see cref="P:System.Windows.Rect.Width" />
    ///  ,，<see cref="P:System.Windows.Rect.Height" />
    ///  "。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  通过使用指定的格式提供程序返回的字符串表示形式的矩形。
    ///</summary>
    ///  <param name="provider">
    ///  区域性特定格式设置信息。
    ///</param>
    ///<returns>
    ///  当前指定的格式提供商确定的矩形的字符串表示形式。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary>
    ///  指示该矩形是否包含指定的点。
    ///</summary>
    ///  <param name="point">
    ///  要检查的点。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果矩形中包含指定的点;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(point: DNPoint): Boolean; overload;
    ///<summary>
    ///  指示该矩形是否包含指定的 x 坐标和 y 坐标。
    ///</summary>
    ///  <param name="x">
    ///  要检查的点 x 坐标。
    ///</param>
    ///  <param name="y">
    ///  要检查的点的 y 坐标。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 (<paramref name="x" />
    ///  , ，<paramref name="y" />
    ///  ) 包含由矩形; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(x: Double; y: Double): Boolean; overload;
    ///<summary>
    ///  指示该矩形是否包含指定的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要检查的矩形。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="rect" />
    ///  完全包含由矩形; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(rect: DNRect): Boolean; overload;
    ///<summary>
    ///  指示指定的矩形是否与当前矩形相交。
    ///</summary>
    ///  <param name="rect">
    ///  要检查的矩形。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的矩形相交，与当前矩形;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IntersectsWith(rect: DNRect): Boolean;
    ///<summary>
    ///  查找当前矩形的交集指定的矩形，并将结果存储为当前的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要与当前矩形相交的矩形。
    ///</param>
    procedure Intersect(rect: DNRect); overload;
    ///<summary>
    ///  刚好足以放大当前矩形包含指定的矩形。
    ///</summary>
    ///  <param name="rect">
    ///  要包括的矩形。
    ///</param>
    procedure Union(rect: DNRect); overload;
    ///<summary>
    ///  放大当前矩形刚好足以包含指定的点。
    ///</summary>
    ///  <param name="point">
    ///  要包括的点。
    ///</param>
    procedure Union(point: DNPoint); overload;
    ///<summary>
    ///  将矩形移动指定的向量。
    ///</summary>
    ///  <param name="offsetVector">
    ///  一个向量，指定要移动矩形水平和垂直的金额。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  对调用此方法 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    procedure Offset(offsetVector: DNVector); overload;
    ///<summary>
    ///  将矩形移动指定的水平和垂直量。
    ///</summary>
    ///  <param name="offsetX">
    ///  要水平移动矩形的量。
    ///</param>
    ///  <param name="offsetY">
    ///  要垂直移动矩形的量。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  对调用此方法 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    procedure Offset(offsetX: Double; offsetY: Double); overload;
    ///<summary>
    ///  使用指定的放大矩形 <see cref="T:System.Windows.Size" />
    ///  , ，在所有方向。
    ///</summary>
    ///  <param name="size">
    ///  指定要扩展矩形的量。
    ///<see cref="T:System.Windows.Size" />
    ///  结构的 <see cref="P:System.Windows.Size.Width" />
    ///  属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Left" />
    ///  和 <see cref="P:System.Windows.Rect.Right" />
    ///  属性。
    ///<see cref="T:System.Windows.Size" />
    ///  结构的 <see cref="P:System.Windows.Size.Height" />
    ///  属性指定要增加的矩形的量 <see cref="P:System.Windows.Rect.Top" />
    ///  和 <see cref="P:System.Windows.Rect.Bottom" />
    ///  属性。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  对调用此方法 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    procedure Inflate(size: DNSize); overload;
    ///<summary>
    ///  展开或功能通过使用指定的宽度和高度值，请在所有方向来减小该矩形。
    ///</summary>
    ///  <param name="width">
    ///  若要展开或收缩的左侧和右侧的矩形的量。
    ///</param>
    ///  <param name="height">
    ///  若要展开或收缩该矩形的顶部和底部边的量。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  对调用此方法 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    procedure Inflate(width: Double; height: Double); overload;
    ///<summary>
    ///  将矩形转换通过应用指定的矩阵。
    ///</summary>
    ///  <param name="matrix">
    ///  指定要应用的变换矩阵。
    ///</param>
    procedure Transform(matrix: DNMatrix); overload;
    ///<summary>
    ///  当前矩形的大小乘以指定 x 和 y 值。
    ///</summary>
    ///  <param name="scaleX">
    ///  X 方向的缩放比例。
    ///</param>
    ///  <param name="scaleY">
    ///  Y 方向的缩放比例。
    ///</param>
    procedure Scale(scaleX: Double; scaleY: Double);
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否为该矩形 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此矩形 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置的矩形的左上角的位置。
    ///</summary>
    ///<returns>
    ///  该矩形的左上角的位置。
    ///  默认值为 (0, 0)。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Location" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property Location: DNPoint read get_Location write set_Location;
    ///<summary>
    ///  获取或设置宽度和矩形的高度。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.Size" />
    ///  结构，它指定的宽度和矩形的高度。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Size" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property Size: DNSize read get_Size write set_Size;
    ///<summary>
    ///  获取或设置矩形的左侧的 x 轴值。
    ///</summary>
    ///<returns>
    ///  左侧的矩形的 x 轴值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.X" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  获取或设置矩形的顶边的 y 轴值。
    ///</summary>
    ///<returns>
    ///  该矩形的顶边 y 轴的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Y" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  获取或设置矩形的宽度。
    ///</summary>
    ///<returns>
    ///  正数，表示矩形的宽度。
    ///  默认值为 0。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Rect.Width" />
    ///  设置为负值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Width" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  获取或设置矩形的高度。
    ///</summary>
    ///<returns>
    ///  正数，表示矩形的高度。
    ///  默认值为 0。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Rect.Height" />
    ///  设置为负值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Rect.Height" />
    ///  在上设置 <see cref="P:System.Windows.Rect.Empty" />
    ///  矩形。
    ///</exception>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  获取矩形的左侧的 x 轴值。
    ///</summary>
    ///<returns>
    ///  左侧的矩形的 x 轴值。
    ///</returns>
    property Left: Double read get_Left;
    ///<summary>
    ///  获取矩形的顶部的 y 轴位置。
    ///</summary>
    ///<returns>
    ///  Y 轴位置的矩形的顶部。
    ///</returns>
    property Top: Double read get_Top;
    ///<summary>
    ///  获取矩形的右端的 x 轴值。
    ///</summary>
    ///<returns>
    ///  右侧的矩形的 x 轴值。
    ///</returns>
    property Right: Double read get_Right;
    ///<summary>
    ///  获取该矩形的底部的 y 轴值。
    ///</summary>
    ///<returns>
    ///  该矩形的底部 y 轴的值。
    ///  如果该矩形为空，则值是 <see cref="F:System.Double.NegativeInfinity" />
    ///  。
    ///</returns>
    property Bottom: Double read get_Bottom;
    ///<summary>
    ///  获取矩形的左上角的位置。
    ///</summary>
    ///<returns>
    ///  该矩形的左上角的位置。
    ///</returns>
    property TopLeft: DNPoint read get_TopLeft;
    ///<summary>
    ///  获取矩形的右上角的位置。
    ///</summary>
    ///<returns>
    ///  矩形右上角的位置。
    ///</returns>
    property TopRight: DNPoint read get_TopRight;
    ///<summary>
    ///  获取矩形的左下角的位置
    ///</summary>
    ///<returns>
    ///  矩形的左下角的位置。
    ///</returns>
    property BottomLeft: DNPoint read get_BottomLeft;
    ///<summary>
    ///  获取矩形的右下角的位置。
    ///</summary>
    ///<returns>
    ///  矩形的右下角的位置。
    ///</returns>
    property BottomRight: DNPoint read get_BottomRight;
  end;

  TDNRect = class(TDNGenericImport<DNRectClass, DNRect>) end;

  //-------------namespace: System.Windows----------------
  DNSizeClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{8F140A85-9E83-524D-938A-26F90880709C}']
  { static getter & setter } 

    {class} function get_Empty: DNSize;

  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Size" />
    ///  结构，并将其分配一个初始 <paramref name="width" />
    ///  和 <paramref name="height" />
    ///  。
    ///</summary>
    ///  <param name="width">
    ///  实例的初始宽度 <see cref="T:System.Windows.Size" />
    ///  。
    ///</param>
    ///  <param name="height">
    ///  实例的初始高度 <see cref="T:System.Windows.Size" />
    ///  。
    ///</param>
    {class} function init(width: Double; height: Double): DNSize;

  { static methods } 

    ///<summary>
    ///  比较两个实例的 <see cref="T:System.Windows.Size" />
    ///  是否相等。
    ///</summary>
    ///  <param name="size1">
    ///  要比较的第一个 <see cref="T:System.Windows.Size" />
    ///  实例。
    ///</param>
    ///  <param name="size2">
    ///  要比较的第二个 <see cref="T:System.Windows.Size" />
    ///  实例。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Windows.Size" />
    ///  的实例相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(size1: DNSize; size2: DNSize): Boolean; overload;
    ///<summary>
    ///  返回的实例 <see cref="T:System.Windows.Size" />
    ///  从转换后 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="source">
    ///  一个 <see cref="T:System.String" />
    ///  值分析到 <see cref="T:System.Windows.Size" />
    ///  值。
    ///</param>
    ///<returns><see cref="T:System.Windows.Size" />
    ///  的一个实例。
    ///</returns>
    {class} function Parse(source: string): DNSize;

  { static propertys } 

    ///<summary>
    ///  获取一个值，表示静态空 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///<returns>
    ///  空实例 <see cref="T:System.Windows.Size" />
    ///  。
    ///</returns>
    {class} property Empty: DNSize read get_Empty;
  end;

  ///<summary>
  ///  实现一个结构，该结构用于描述对象的 <see cref="T:System.Windows.Size" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Size')]
  DNSize = interface(DDN.mscorlib.DNValueType)
  ['{B9173617-7205-33E7-9783-1FDE49D29AE4}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);

  { methods } 

    ///<summary>
    ///  比较对象的实例与 <see cref="T:System.Windows.Size" />
    ///  是否相等。
    ///</summary>
    ///  <param name="o">
    ///  要比较的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果大小相等;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  比较值的实例和 <see cref="T:System.Windows.Size" />
    ///  是否相等。
    ///</summary>
    ///  <param name="value">
    ///  要与此当前实例进行比较的大小 <see cref="T:System.Windows.Size" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Windows.Size" />
    ///  的实例相等，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DNSize): Boolean; overload;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Size" />
    ///  的此实例的哈希代码。
    ///</summary>
    ///<returns><see cref="T:System.Windows.Size" />
    ///  的此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  ，表示此 <see cref="T:System.Windows.Size" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它指定跟高度的宽度。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  返回 <see cref="T:System.String" />
    ///  ，它表示此实例的 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///  <param name="provider">
    ///  一个对象，提供一种方法，用于控制格式设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，表示此 <see cref="T:System.Windows.Size" />
    ///  对象。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否此实例的 <see cref="T:System.Windows.Size" />
    ///  是 <see cref="P:System.Windows.Size.Empty" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此实例的大小为 <see cref="P:System.Windows.Size.Empty" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Size.Width" />
    ///  的此实例的 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Size.Width" />
    ///  的此实例的 <see cref="T:System.Windows.Size" />
    ///  。
    ///  默认值为 0。
    ///  值不能为负数。
    ///</returns>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Size.Height" />
    ///  的此实例的 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Size.Height" />
    ///  的此实例的 <see cref="T:System.Windows.Size" />
    ///  。
    ///  默认值为 0。
    ///  值不能为负数。
    ///</returns>
    property Height: Double read get_Height write set_Height;
  end;

  TDNSize = class(TDNGenericImport<DNSizeClass, DNSize>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaitableClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{68932EF2-4918-5B84-A847-E51EFDA132A4}']
  end;

  ///<summary>
  ///  表示异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaitable')]
  DNDispatcherPriorityAwaitable = interface(DDN.mscorlib.DNValueType)
  ['{5ADAA5A0-A182-3F7F-AC73-0D120170F338}']
  { methods } 

    ///<summary>
    ///  返回的异步任务完成后等待的对象。
    ///</summary>
    ///<returns>
    ///  一个对象，等待异步任务完成。
    ///</returns>
    function GetAwaiter: DNDispatcherPriorityAwaiter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherPriorityAwaitable = class(TDNGenericImport<DNDispatcherPriorityAwaitableClass, DNDispatcherPriorityAwaitable>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherPriorityAwaiterClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{46C5A669-629F-55FD-8BE5-14F424826A40}']
  end;

  ///<summary>
  ///  表示等待异步任务完成的对象。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherPriorityAwaiter')]
  DNDispatcherPriorityAwaiter = interface(DDN.mscorlib.DNValueType)
  ['{BCA34C06-4AF6-3CF5-8D85-F30652B81880}']
  { getters & setters } 

    function get_IsCompleted: Boolean;

  { methods } 

    ///<summary>
    ///  结束异步任务完成之前的等待。
    ///</summary>
    procedure GetResult;
    ///<summary>
    ///  设置时应执行的操作 <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" />
    ///  对象停止等待异步任务完成。
    ///</summary>
    ///  <param name="continuation">
    ///  要在等待操作完成时执行的操作。
    ///</param>
    procedure OnCompleted(continuation: DDN.mscorlib.DNAction);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否已完成的异步任务。
    ///</summary>
    ///<returns>
    ///  在所有情况下均为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompleted: Boolean read get_IsCompleted;
  end;

  TDNDispatcherPriorityAwaiter = class(TDNGenericImport<DNDispatcherPriorityAwaiterClass, DNDispatcherPriorityAwaiter>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherProcessingDisabledClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{BE141EE5-CD7F-525F-BED6-F45D886F0D5B}']
  end;

  ///<summary>
  ///  当它处于禁用状态，并提供一种方法来重新启用调度程序处理，则表示调度程序。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherProcessingDisabled')]
  DNDispatcherProcessingDisabled = interface(DDN.mscorlib.DNValueType)
  ['{86728AEF-3F4A-3D48-BAA3-42814888B8B1}']
  { methods } 

    ///<summary>
    ///  重新启用调度程序处理。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  对象是否等于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  对象。
    ///</summary>
    ///  <param name="obj">
    ///  要评估相等的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的对象是否等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" />
    ///  对象; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此实例的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号 32 位整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNDispatcherProcessingDisabled = class(TDNGenericImport<DNDispatcherProcessingDisabledClass, DNDispatcherProcessingDisabled>) end;

  //-------------namespace: System.Windows----------------
  DNVectorClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{84691167-212B-5C2D-8FDA-6D8FEE090D75}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Vector" />
    ///  结构的新实例。
    ///</summary>
    ///  <param name="x"><see cref="P:System.Windows.Vector.X" />
    ///  -新的偏移量 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</param>
    ///  <param name="y"><see cref="P:System.Windows.Vector.Y" />
    ///  -新的偏移量 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</param>
    {class} function init(x: Double; y: Double): DNVector;

  { static methods } 

    ///<summary>
    ///  比较两个指定的向量相等。
    ///</summary>
    ///  <param name="vector1">
    ///  要比较的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要比较的第二个向量。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 t 他 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  组成部分 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  相等; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function Equals(vector1: DNVector; vector2: DNVector): Boolean; overload;
    ///<summary>
    ///  将向量的字符串表示形式转换为等效 <see cref="T:System.Windows.Vector" />
    ///  结构。
    ///</summary>
    ///  <param name="source">
    ///  向量的字符串表示形式。
    ///</param>
    ///<returns>
    ///  等效于 <see cref="T:System.Windows.Vector" />
    ///  结构。
    ///</returns>
    {class} function Parse(source: string): DNVector;
    ///<summary>
    ///  计算两个向量的叉积。
    ///</summary>
    ///  <param name="vector1">
    ///  要评估的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要评估的第二个向量。
    ///</param>
    ///<returns>
    ///  叉积的 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  。
    ///  下面的公式用于计算叉积︰
    ///  (Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)
    ///</returns>
    {class} function CrossProduct(vector1: DNVector; vector2: DNVector): Double;
    ///<summary>
    ///  检索以度数 （介于两个指定向量） 表示的角。
    ///</summary>
    ///  <param name="vector1">
    ///  要评估的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要评估的第二个向量。
    ///</param>
    ///<returns>
    ///  以度为单位的角度之间 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  。
    ///</returns>
    {class} function AngleBetween(vector1: DNVector; vector2: DNVector): Double;
    ///<summary>
    ///  添加两个向量，并返回结果作为 <see cref="T:System.Windows.Vector" />
    ///  结构。
    ///</summary>
    ///  <param name="vector1">
    ///  要相加的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要相加的第二个向量。
    ///</param>
    ///<returns><paramref name="vector1" />
    ///  与 <paramref name="vector2" />
    ///  的和。
    ///</returns>
    {class} function Add(vector1: DNVector; vector2: DNVector): DNVector; overload;
    ///<summary>
    ///  从向量中减去指定另一个指定向量。
    ///</summary>
    ///  <param name="vector1">
    ///  从该向量 <paramref name="vector2" />
    ///  中减去。
    ///</param>
    ///  <param name="vector2">
    ///  要从中减去的向量 <paramref name="vector1" />
    ///  。
    ///</param>
    ///<returns>
    ///  之间的差异 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  。
    ///</returns>
    {class} function Subtract(vector1: DNVector; vector2: DNVector): DNVector;
    ///<summary>
    ///  按指定向量平移指定的点并返回所产生的点。
    ///</summary>
    ///  <param name="vector">
    ///  要指定的点的平移的量。
    ///</param>
    ///  <param name="point">
    ///  要转换的点。
    ///</param>
    ///<returns>
    ///  将转换结果 <paramref name="point" />
    ///  通过 <paramref name="vector" />
    ///  。
    ///</returns>
    {class} function Add(vector: DNVector; point: DNPoint): DNPoint; overload;
    ///<summary>
    ///  将指定的向量乘以指定标量，并返回结果 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="vector">
    ///  要相乘的向量。
    ///</param>
    ///  <param name="scalar">
    ///  要相乘的标量。
    ///</param>
    ///<returns><paramref name="vector" />
    ///  与 <paramref name="scalar" />
    ///  相乘的结果。
    ///</returns>
    {class} function Multiply(vector: DNVector; scalar: Double): DNVector; overload;
    ///<summary>
    ///  将指定向量乘以指定的标量，并返回结果 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="scalar">
    ///  要相乘的标量。
    ///</param>
    ///  <param name="vector">
    ///  要相乘的向量。
    ///</param>
    ///<returns><paramref name="scalar" />
    ///  与 <paramref name="vector" />
    ///  相乘的结果。
    ///</returns>
    {class} function Multiply(scalar: Double; vector: DNVector): DNVector; overload;
    ///<summary>
    ///  将指定的向量除以指定标量，并返回结果作为 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="vector">
    ///  将向量结构。
    ///</param>
    ///  <param name="scalar">
    ///  所根据的数量 <paramref name="vector" />
    ///  划分。
    ///</param>
    ///<returns><paramref name="vector" />
    ///  除以 <paramref name="scalar" />
    ///  的结果。
    ///</returns>
    {class} function Divide(vector: DNVector; scalar: Double): DNVector;
    ///<summary>
    ///  将指定向量使用指定的坐标空间转换 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="vector">
    ///  要变换的向量结构。
    ///</param>
    ///  <param name="matrix">
    ///  要应用于转换 <paramref name="vector" />
    ///  。
    ///</param>
    ///<returns>
    ///  转换的结果 <paramref name="vector" />
    ///  通过 <paramref name="matrix" />
    ///  。
    ///</returns>
    {class} function Multiply(vector: DNVector; matrix: DNMatrix): DNVector; overload;
    ///<summary>
    ///  计算两个指定的点积向量，并返回结果作为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="vector1">
    ///  要相乘的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要相乘的第二个向量结构。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Double" />
    ///  包含标量的点乘积的 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  , ，使用以下公式计算︰
    ///  (vector1.X * vector2.X) + (vector1.Y * vector2.Y)
    ///</returns>
    {class} function Multiply(vector1: DNVector; vector2: DNVector): Double; overload;
    ///<summary>
    ///  计算两个向量的行列式。
    ///</summary>
    ///  <param name="vector1">
    ///  要评估的第一个向量。
    ///</param>
    ///  <param name="vector2">
    ///  要评估的第二个向量。
    ///</param>
    ///<returns>
    ///  行列式 <paramref name="vector1" />
    ///  和 <paramref name="vector2" />
    ///  。
    ///</returns>
    {class} function Determinant(vector1: DNVector; vector2: DNVector): Double;

  end;

  ///<summary>
  ///  表示中的位移 二维 空间。
  ///</summary>
  [DNTypeName('System.Windows.Vector')]
  DNVector = interface(DDN.mscorlib.DNValueType)
  ['{F17EA9EC-1E4B-3A7F-A2D7-DA5E4DAD6AFA}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Length: Double;
    function get_LengthSquared: Double;

  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.Object" />
    ///  是 <see cref="T:System.Windows.Vector" />
    ///  结构，并且，如果是，它是否具有相同 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  与此向量的值。
    ///</summary>
    ///  <param name="o">
    ///  要比较的向量。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="o" />
    ///  是 <see cref="T:System.Windows.Vector" />
    ///  并具有相同 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  值作为此向量; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(o: DDN.mscorlib.DNObject): Boolean; overload;
    ///<summary>
    ///  比较两个向量相等。
    ///</summary>
    ///  <param name="value">
    ///  要与此向量比较的向量。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="value" />
    ///  具有相同 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  值作为此向量; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(value: DNVector): Boolean; overload;
    ///<summary>
    ///  返回此向量的哈希代码。
    ///</summary>
    ///<returns>
    ///  此实例的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Windows.Vector" />
    ///  结构。
    ///</summary>
    ///<returns>
    ///  一个字符串，表示 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  值 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</returns>
    function ToString: string; overload;
    ///<summary>
    ///  返回的字符串表示形式 <see cref="T:System.Windows.Vector" />
    ///  与指定的格式设置信息的结构。
    ///</summary>
    ///  <param name="provider">
    ///  区域性特定格式设置信息。
    ///</param>
    ///<returns>
    ///  一个字符串，表示 <see cref="P:System.Windows.Vector.X" />
    ///  和 <see cref="P:System.Windows.Vector.Y" />
    ///  值 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</returns>
    function ToString(provider: DDN.mscorlib.DNIFormatProvider): string; overload;
    ///<summary>
    ///  规范化此向量。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  对此向量求反。
    ///  向量具有相同的量级为之前，但其方向现在相反。
    ///</summary>
    procedure Negate;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Vector.X" />
    ///  此向量的组件。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Vector.X" />
    ///  此向量的组件。
    ///  默认值为 0。
    ///</returns>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  获取或设置 <see cref="P:System.Windows.Vector.Y" />
    ///  此向量的组件。
    ///</summary>
    ///<returns><see cref="P:System.Windows.Vector.Y" />
    ///  此向量的组件。
    ///  默认值为 0。
    ///</returns>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  获取此向量的长度。
    ///</summary>
    ///<returns>
    ///  此向量的长度。
    ///</returns>
    property Length: Double read get_Length;
    ///<summary>
    ///  获取此向量的长度的平方。
    ///</summary>
    ///<returns>
    ///  平方 <see cref="P:System.Windows.Vector.Length" />
    ///  此向量。
    ///</returns>
    property LengthSquared: Double read get_LengthSquared;
  end;

  TDNVector = class(TDNGenericImport<DNVectorClass, DNVector>) end;

  //-------------namespace: System.Windows----------------
  DNBaseCompatibilityPreferencesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{426E44C3-1313-5A76-894E-2C70D14AAD2E}']
  { static getter & setter } 

    {class} function get_ReuseDispatcherSynchronizationContextInstance: Boolean;
    {class} procedure set_ReuseDispatcherSynchronizationContextInstance(value: Boolean);
    {class} function get_FlowDispatcherSynchronizationContextPriority: Boolean;
    {class} procedure set_FlowDispatcherSynchronizationContextPriority(value: Boolean);
    {class} function get_InlineDispatcherSynchronizationContextSend: Boolean;
    {class} procedure set_InlineDispatcherSynchronizationContextSend(value: Boolean);
    {class} function get_HandleDispatcherRequestProcessingFailure: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions;
    {class} procedure set_HandleDispatcherRequestProcessingFailure(value: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions);

  { static propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  用于多个调度程序操作。
    ///</summary>
    ///<returns>
    ///  如果一个为 true <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  用于多个 dispatcher 操作; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} property ReuseDispatcherSynchronizationContextInstance: Boolean read get_ReuseDispatcherSynchronizationContextInstance write set_ReuseDispatcherSynchronizationContextInstance;
    ///<summary>
    ///  获取或设置一个值，该值指示是否有关的信息 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />
    ///  保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有关的信息 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />
    ///  保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} property FlowDispatcherSynchronizationContextPriority: Boolean read get_FlowDispatcherSynchronizationContextPriority write set_FlowDispatcherSynchronizationContextPriority;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />
    ///  方法将委托放在调度程序队列中或直接调用委托时。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />
    ///  方法将委托放在调度程序队列中或如果该委托是直接调用; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} property InlineDispatcherSynchronizationContextSend: Boolean read get_InlineDispatcherSynchronizationContextSend write set_InlineDispatcherSynchronizationContextSend;
    ///<summary>
    ///  定义调度程序如何应对请求处理时遇到的失败。
    ///</summary>
    ///<returns>
    ///  定义调度程序如何应对失败的值。
    ///</returns>
    {class} property HandleDispatcherRequestProcessingFailure: DNBaseCompatibilityPreferences_HandleDispatcherRequestProcessingFailureOptions read get_HandleDispatcherRequestProcessingFailure write set_HandleDispatcherRequestProcessingFailure;
  end;

  ///<summary>
  ///  包含指定应用程序相对于 WindowsBase 程序集中的新的 WPF 功能的行为方式的属性。
  ///</summary>
  [DNTypeName('System.Windows.BaseCompatibilityPreferences')]
  DNBaseCompatibilityPreferences = interface(DDN.mscorlib.DNObject)
  ['{47D6DB4C-75ED-34E8-9C13-E3ECD48C47C1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseCompatibilityPreferences = class(TDNGenericImport<DNBaseCompatibilityPreferencesClass, DNBaseCompatibilityPreferences>) end;

  //-------------namespace: System.Windows.Data----------------
  DNDataSourceProviderClass = interface(DNObjectClass)
  ['{6497BCAF-A290-5E8C-B139-70BA436C0A7E}']
  end;

  ///<summary><see cref="T:System.Windows.Data.DataSourceProvider" />
  ///  对象的公共基类和协定，它们是执行某些查询以生成可以用作绑定源对象的单个对象或对象列表的工厂。
  ///</summary>
  [DNTypeName('System.Windows.Data.DataSourceProvider')]
  DNDataSourceProvider = interface(DDN.System.DNINotifyPropertyChanged)
  ['{08AA1407-3558-3E56-9BF4-BE3B13545776}']
  { getters & setters } 

    function get_IsInitialLoadEnabled: Boolean;
    procedure set_IsInitialLoadEnabled(value: Boolean);
    function get_Data: DDN.mscorlib.DNObject;
    function get_Error: DDN.mscorlib.DNException;

  { events } 

    procedure add_DataChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  启动对基础数据模型的初始查询。
    ///  在返回的结果 <see cref="P:System.Windows.Data.DataSourceProvider.Data" />
    ///  属性。
    ///</summary>
    procedure InitialLoad;
    ///<summary>
    ///  启动对基础数据模型刷新操作。
    ///  在返回的结果 <see cref="P:System.Windows.Data.DataSourceProvider.Data" />
    ///  属性。
    ///</summary>
    procedure Refresh;
    ///<summary>
    ///  进入延迟循环，该循环可用于更改提供程序并延迟自动刷新的属性。
    ///</summary>
    ///<returns>
    ///  一个可用于释放调用对象的 <see cref="T:System.IDisposable" />
    ///  对象。
    ///</returns>
    function DeferRefresh: DDN.mscorlib.DNIDisposable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否可以阻止或延迟自动加载的数据。
    ///</summary>
    ///<returns><see langword="false" />
    ///  若要阻止或延迟的数据; 自动加载否则为 <see langword="true" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property IsInitialLoadEnabled: Boolean read get_IsInitialLoadEnabled write set_IsInitialLoadEnabled;
    ///<summary>
    ///  获取基础数据对象。
    ///</summary>
    ///<returns>
    ///  属于基础数据对象的类型 <see cref="T:System.Object" />
    ///  的值。
    ///</returns>
    property Data: DDN.mscorlib.DNObject read get_Data;
    ///<summary>
    ///  获取最新的查询操作的错误。
    ///</summary>
    ///<returns>
    ///  类型的值 <see cref="T:System.Exception" />
    ///  ，它是最新的查询操作，该错误或 <see langword="null" />
    ///  如果没有错误。
    ///</returns>
    property Error: DDN.mscorlib.DNException read get_Error;
  end;

  TDNDataSourceProvider = class(TDNGenericImport<DNDataSourceProviderClass, DNDataSourceProvider>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2ACA1967-1326-56C5-9D92-407BCEBFA664}']
  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Windows.DependencyObjectType" />
    ///  ，表示给定的系统 (CLR) 类型。
    ///</summary>
    ///  <param name="systemType">
    ///  系统 (CLR) 要转换类型。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.DependencyObjectType" />
    ///  表示系统 (CLR) 类型。
    ///</returns>
    {class} function FromSystemType(systemType: DDN.mscorlib.DNType): DNDependencyObjectType;

  end;

  ///<summary>
  ///  实现所有的基础类型缓存 <see cref="T:System.Windows.DependencyObject" />
  ///  派生类型。
  ///</summary>
  [DNTypeName('System.Windows.DependencyObjectType')]
  DNDependencyObjectType = interface(DDN.mscorlib.DNObject)
  ['{1921CB8E-808D-3ACA-BCBD-129E70001695}']
  { getters & setters } 

    function get_Id: Int32;
    function get_SystemType: DDN.mscorlib.DNType;
    function get_BaseType: DNDependencyObjectType;
    function get_Name: string;

  { methods } 

    ///<summary>
    ///  确定指定的对象是否是当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  的实例。
    ///</summary>
    ///  <param name="dependencyObject">
    ///  将与当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  进行比较的对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此类表示由当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  的继承层次结构中是 <see cref="T:System.Windows.DependencyObject" />
    ///  作为传递 <paramref name="d" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsInstanceOfType(dependencyObject: DNDependencyObject): Boolean;
    ///<summary>
    ///  确定当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  是否派生自指定的 <see cref="T:System.Windows.DependencyObjectType" />
    ///  。
    ///</summary>
    ///  <param name="dependencyObjectType">
    ///  要比较的 <see cref="T:System.Windows.DependencyObjectType" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="dependencyObjectType" />
    ///  参数和当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  表示类型的类，以及由当前类 <see cref="T:System.Windows.DependencyObjectType" />
    ///  所表示的类都源自 <paramref name="dependencyObjectType" />
    ///  。
    ///  否则为 <see langword="false" />
    ///  。
    ///  此方法也返回 <see langword="false" />
    ///  如果 <paramref name="dependencyObjectType" />
    ///  和当前 <see cref="T:System.Windows.DependencyObjectType" />
    ///  表示相同的类。
    ///</returns>
    function IsSubclassOf(dependencyObjectType: DNDependencyObjectType): Boolean;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.DependencyObjectType" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  32 位有符号整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  这对于定时数组查找操作中获取的从零开始的唯一标识符。
    ///</summary>
    ///<returns>
    ///  一个内部标识符。
    ///</returns>
    property Id: Int32 read get_Id;
    ///<summary>
    ///  获取 公共语言运行时 (CLR) 由此所表示的系统类型 <see cref="T:System.Windows.DependencyObjectType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  CLR 由此所表示的系统类型 <see cref="T:System.Windows.DependencyObjectType" />
    ///  。
    ///</returns>
    property SystemType: DDN.mscorlib.DNType read get_SystemType;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.DependencyObjectType" />
    ///  当前即时基类 <see cref="T:System.Windows.DependencyObjectType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  基本类的类型。
    ///</returns>
    property BaseType: DNDependencyObjectType read get_BaseType;
    ///<summary>
    ///  获取表示的名称 公共语言运行时 (CLR) 系统类型。
    ///</summary>
    ///<returns>
    ///  名称表示 CLR 系统类型。
    ///</returns>
    property Name: string read get_Name;
  end;

  TDNDependencyObjectType = class(TDNGenericImport<DNDependencyObjectTypeClass, DNDependencyObjectType>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{088296B5-AE06-579C-AF3A-FC64CC724EEA}']
  { static fields getter & setter } 

   function __fakeFieldGet_UnsetValue: DDN.mscorlib.DNObject;

  { static fields } 

    ///<summary>
    ///  指定静态值，它由 WPF 属性系统而不是 <see langword="null" />
    ///  以指示该属性存在，但不具有属性系统设置其值。
    ///</summary>
    ///<returns>
    ///  未设置的值。
    ///  这实际上是对的调用结果 <see cref="T:System.Object" />
    ///  构造函数。
    ///</returns>
    {class} property UnsetValue: DDN.mscorlib.DNObject read __fakeFieldGet_UnsetValue;

  { static methods } 

    ///<summary>
    ///  使用指定的属性名称、属性类型和所有者类型注册依赖属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///  名称必须在所有者类型的注册命名空间中是唯一的。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>
    ///  使用指定的属性名称、属性类型、所有者类型和属性元数据注册依赖属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    ///<summary>
    ///  使用指定的属性名称、属性类型、所有者类型、属性元数据和属性的值验证回叫来注册依赖属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///  <param name="validateValueCallback">
    ///  对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function &Register(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;
    ///<summary>
    ///  使用指定的属性名称、所有者类型和属性元数据注册只读依赖属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///<returns>
    ///  一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。
    ///</returns>
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    ///<summary>
    ///  使用指定的属性类型、所有者类型、属性元数据和验证回叫来注册只读依赖属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///  <param name="validateValueCallback">
    ///  对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
    ///</param>
    ///<returns>
    ///  一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。
    ///</returns>
    {class} function RegisterReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    ///<summary>
    ///  使用指定的属性名称、所有者类型和属性元数据注册只读附加属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="defaultMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///<returns>
    ///  一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。
    ///</returns>
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyPropertyKey; overload;
    ///<summary>
    ///  使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读附加属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="defaultMetadata">
    ///  依赖属性的属性元数据。
    ///</param>
    ///  <param name="validateValueCallback">
    ///  对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
    ///</param>
    ///<returns>
    ///  一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。
    ///</returns>
    {class} function RegisterAttachedReadOnly(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyPropertyKey; overload;
    ///<summary>
    ///  使用指定的属性名称、属性类型和所有者类型注册附加属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>
    ///  使用指定的属性名、属性类型、所有者类型和属性元数据注册附加的属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="defaultMetadata">
    ///  依赖属性的属性元数据。
    ///  这可以包括默认值和其他特征。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    ///<summary>
    ///  使用指定的属性类型、所有者类型、属性元数据和属性的值验证回调来注册附加属性。
    ///</summary>
    ///  <param name="name">
    ///  要注册的依赖属性的名称。
    ///</param>
    ///  <param name="propertyType">
    ///  属性的类型。
    ///</param>
    ///  <param name="ownerType">
    ///  正在注册依赖属性的所有者类型。
    ///</param>
    ///  <param name="defaultMetadata">
    ///  依赖属性的属性元数据。
    ///  这可以包括默认值和其他特征。
    ///</param>
    ///  <param name="validateValueCallback">
    ///  对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。
    ///</param>
    ///<returns>
    ///  一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" />
    ///  字段的值。
    ///  稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。
    ///</returns>
    {class} function RegisterAttached(name: string; propertyType: DDN.mscorlib.DNType; ownerType: DDN.mscorlib.DNType; defaultMetadata: DNPropertyMetadata; validateValueCallback: DNValidateValueCallback): DNDependencyProperty; overload;

  end;

  ///<summary>
  ///  表示可通过诸如样式、数据绑定、动画和继承等方法设置的属性。
  ///</summary>
  [DNTypeName('System.Windows.DependencyProperty')]
  DNDependencyProperty = interface(DDN.mscorlib.DNObject)
  ['{FBE9F247-33CA-3CBF-99CB-DD40F5A0C3B2}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_OwnerType: DDN.mscorlib.DNType;
    function get_DefaultMetadata: DNPropertyMetadata;
    function get_ValidateValueCallback: DNValidateValueCallback;
    function get_GlobalIndex: Int32;
    function get_ReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  返回此依赖属性的元数据，因为它存在于指定的现有类型上。
    ///</summary>
    ///  <param name="forType">
    ///  要从中检索依赖属性元数据的特定类型。
    ///</param>
    ///<returns>
    ///  属性元数据对象。
    ///</returns>
    function GetMetadata(forType: DDN.mscorlib.DNType): DNPropertyMetadata; overload;
    ///<summary>
    ///  返回此依赖属性的元数据，因为它存在于指定的对象实例上。
    ///</summary>
    ///  <param name="dependencyObject">
    ///  一个依赖对象，检查了其类型，以便确定元数据应来自依赖属性的哪个类型特定版本。
    ///</param>
    ///<returns>
    ///  属性元数据对象。
    ///</returns>
    function GetMetadata(dependencyObject: DNDependencyObject): DNPropertyMetadata; overload;
    ///<summary>
    ///  为此依赖属性（当它位于指定的对象实例上时）返回元数据。
    ///</summary>
    ///  <param name="dependencyObjectType">
    ///  一个特定对象，该对象记录需要其中的依赖属性元数据的依赖项对象类型。
    ///</param>
    ///<returns>
    ///  属性元数据对象。
    ///</returns>
    function GetMetadata(dependencyObjectType: DNDependencyObjectType): DNPropertyMetadata; overload;
    ///<summary>
    ///  将另一种类型添加为已注册的依赖属性的所有者。
    ///</summary>
    ///  <param name="ownerType">
    ///  要作为此依赖属性所有者添加的类型。
    ///</param>
    ///<returns>
    ///  一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///  应通过将类添加为 <see langword="public static readonly" />
    ///  字段来公开此标识符。
    ///</returns>
    function AddOwner(ownerType: DDN.mscorlib.DNType): DNDependencyProperty; overload;
    ///<summary>
    ///  返回此 <see cref="T:System.Windows.DependencyProperty" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此 <see cref="T:System.Windows.DependencyProperty" />
    ///  的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定指定的值是否可接受的此依赖项属性的类型，原始的依赖关系属性注册中提供的属性类型相对照。
    ///</summary>
    ///  <param name="value">
    ///  要检查的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的值是已注册的属性类型或可接受的派生的类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValidType(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  确定是否将所提供的值接受类型的属性通过基本类型检查，而且还可能会允许该类型的值的范围内。
    ///</summary>
    ///  <param name="value">
    ///  要检查的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果值是可以接受的并且是正确的类型或派生的类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsValidValue(value: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回依赖属性的字符串表示形式。
    ///</summary>
    ///<returns>
    ///  依赖属性的字符串表示形式。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  当此依赖属性位于指定类型的实例上时为其指定替换元数据，以在该依赖属性继承自基类型时重写该属性已存在的元数据。
    ///</summary>
    ///  <param name="forType">
    ///  一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。
    ///</param>
    ///  <param name="typeMetadata">
    ///  一种元数据，它将应用于重写类型上的依赖属性。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试重写只读依赖属性的元数据（不能使用此签名完成该操作）。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  已为依赖属性建立元数据，因为它存在于所提供的类型上。
    ///</exception>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata); overload;
    ///<summary>
    ///  当只读依赖属性位于指定类型的实例上时为其提供替换元数据，以便重写在最初注册依赖属性时提供的元数据。
    ///  你必须为只读依赖属性传递 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  ，以免引发异常。
    ///</summary>
    ///  <param name="forType">
    ///  一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。
    ///</param>
    ///  <param name="typeMetadata">
    ///  一种元数据，它将应用于重写类型上的依赖属性。
    ///</param>
    ///  <param name="key">
    ///  只读依赖属性的访问键。
    ///</param>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata; key: DNDependencyPropertyKey); overload;
    ///<summary>
    ///  将其他类型添加为已注册的依赖对象所有者，从而为依赖属性提供依赖属性元数据使其存在于提供的所有者类型上。
    ///</summary>
    ///  <param name="ownerType">
    ///  要作为此依赖属性所有者添加的类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  在依赖属性存在于所提供的类型上时对其进行限定的元数据。
    ///</param>
    ///<returns>
    ///  一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///  应通过将类添加为 <see langword="public static readonly" />
    ///  字段来公开此标识符。
    ///</returns>
    function AddOwner(ownerType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata): DNDependencyProperty; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取依赖属性的名称。
    ///</summary>
    ///<returns>
    ///  属性的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取用于其值的依赖项属性的类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  属性值。
    ///</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>
    ///  获取使用属性系统注册依赖属性或者将自己作为属性所有者添加的对象的类型。
    ///</summary>
    ///<returns>
    ///  注册属性或者将自己作为属性所有者添加的对象的类型。
    ///</returns>
    property OwnerType: DDN.mscorlib.DNType read get_OwnerType;
    ///<summary>
    ///  获取依赖项属性的默认元数据。
    ///</summary>
    ///<returns>
    ///  依赖项属性的默认元数据。
    ///</returns>
    property DefaultMetadata: DNPropertyMetadata read get_DefaultMetadata;
    ///<summary>
    ///  获取依赖项属性的值验证回调。
    ///</summary>
    ///<returns>
    ///  此依赖项属性，为提供的值验证回调 <paramref name="validateValueCallback" />
    ///  原始的依赖关系属性注册中的参数。
    ///</returns>
    property ValidateValueCallback: DNValidateValueCallback read get_ValidateValueCallback;
    ///<summary>
    ///  获取唯一标识依赖项属性的内部生成的值。
    ///</summary>
    ///<returns>
    ///  唯一的数字标识符。
    ///</returns>
    property GlobalIndex: Int32 read get_GlobalIndex;
    ///<summary>
    ///  获取一个值，该值指示是否依赖项属性标识由此 <see cref="T:System.Windows.DependencyProperty" />
    ///  实例是只读的依赖项属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果依赖项属性是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ReadOnly: Boolean read get_ReadOnly;
  end;

  TDNDependencyProperty = class(TDNGenericImport<DNDependencyPropertyClass, DNDependencyProperty>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyPropertyKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A62B526-354A-5346-BC3E-AB7DA7003C0F}']
  end;

  ///<summary>
  ///  提供有限的写访问权限的只读依赖项属性的依赖项属性标识符。
  ///</summary>
  [DNTypeName('System.Windows.DependencyPropertyKey')]
  DNDependencyPropertyKey = interface(DDN.mscorlib.DNObject)
  ['{120F12BC-31DD-36BF-B9BE-80493EEA9E82}']
  { getters & setters } 

    function get_DependencyProperty: DNDependencyProperty;

  { methods } 

    ///<summary>
    ///  重写都由该依赖项属性标识符的只读依赖项属性的元数据。
    ///</summary>
    ///  <param name="forType">
    ///  在其存在此依赖项属性，并应重写元数据的类型。
    ///</param>
    ///  <param name="typeMetadata">
    ///  为此类型提供的元数据。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试的元数据上读写依赖项属性重写 (不能使用此签名)。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  因为它位于所提供的类型，已建立该属性的元数据。
    ///</exception>
    procedure OverrideMetadata(forType: DDN.mscorlib.DNType; typeMetadata: DNPropertyMetadata);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此专用的只读依赖项属性标识符关联的依赖项属性标识符。
    ///</summary>
    ///<returns>
    ///  相关的依赖项属性标识符。
    ///</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
  end;

  TDNDependencyPropertyKey = class(TDNGenericImport<DNDependencyPropertyKeyClass, DNDependencyPropertyKey>) end;

  //-------------namespace: System.Windows----------------
  DNExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AD5CA09-E60C-5098-BAE1-997B5DC2F91E}']
  end;

  ///<summary>
  ///  此类型支持 Windows Presentation Foundation (WPF) 基础结构，但不可直接在代码中使用。
  ///</summary>
  [DNTypeName('System.Windows.Expression')]
  DNExpression = interface(DDN.mscorlib.DNObject)
  ['{1F05D065-E3D3-3AC4-9EDE-62A0E991DD0F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExpression = class(TDNGenericImport<DNExpressionClass, DNExpression>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyInteropClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C776FC50-E7B5-5FDB-8112-345B4A7B0181}']
  { static methods } 

    ///<summary>
    ///  将转换 Win32 虚拟键到 WPF <see cref="T:System.Windows.Input.Key" />
    ///  。
    ///</summary>
    ///  <param name="virtualKey">
    ///  要转换的虚拟键。
    ///</param>
    ///<returns>
    ///  WPF 键。
    ///</returns>
    {class} function KeyFromVirtualKey(virtualKey: Int32): DNKey;
    ///<summary>
    ///  将转换 WPF <see cref="T:System.Windows.Input.Key" />
    ///  到 Win32 虚拟键。
    ///</summary>
    ///  <param name="key">
    ///  要转换的 WPF。
    ///</param>
    ///<returns>
    ///  Win32 虚拟键。
    ///</returns>
    {class} function VirtualKeyFromKey(key: DNKey): Int32;

  end;

  ///<summary>
  ///  提供静态方法之间进行转换 Win32 虚拟键和 WPF <see cref="T:System.Windows.Input.Key" />
  ///  枚举。
  ///</summary>
  [DNTypeName('System.Windows.Input.KeyInterop')]
  DNKeyInterop = interface(DDN.mscorlib.DNObject)
  ['{0BCEF380-C904-315A-888C-066D0031F4B6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyInterop = class(TDNGenericImport<DNKeyInteropClass, DNKeyInterop>) end;

  //-------------namespace: System.Windows.Input----------------
  DNTraversalRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D16AE65D-C65B-566F-82D8-8E0DAF7D6B71}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Input.TraversalRequest" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="focusNavigationDirection">
    ///  作为枚举的值的焦点遍历，预期的方向。
    ///</param>
    {class} function init(focusNavigationDirection: DNFocusNavigationDirection): DNTraversalRequest;

  end;

  ///<summary>
  ///  表示要将焦点移到另一个控件的请求。
  ///</summary>
  [DNTypeName('System.Windows.Input.TraversalRequest')]
  DNTraversalRequest = interface(DDN.mscorlib.DNObject)
  ['{E0FF0AB7-5D61-3CFE-809F-9AD90E3692C1}']
  { getters & setters } 

    function get_Wrapped: Boolean;
    procedure set_Wrapped(value: Boolean);
    function get_FocusNavigationDirection: DNFocusNavigationDirection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，指示焦点遍历是否已达到可以具有焦点的子元素的末尾。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果这种遍历已到达子元素可以具有焦点，则末尾否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Wrapped: Boolean read get_Wrapped write set_Wrapped;
    ///<summary>
    ///  获取遍历方向。
    ///</summary>
    ///<returns>
    ///  遍历方向的枚举值之一。
    ///</returns>
    property FocusNavigationDirection: DNFocusNavigationDirection read get_FocusNavigationDirection;
  end;

  TDNTraversalRequest = class(TDNGenericImport<DNTraversalRequestClass, DNTraversalRequest>) end;

  //-------------namespace: System.Windows.Interop----------------
  DNComponentDispatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D05EE5A-44FD-5F1F-9B28-E9C85E98AE82}']
  { static getter & setter } 

    {class} function get_IsThreadModal: Boolean;
    {class} function get_CurrentKeyboardMessage: DNMSG;

  { static methods } 

    ///<summary>
    ///  调用以指示该线程是模式。
    ///</summary>
    {class} procedure PushModal;
    ///<summary>
    ///  调用以指示模式线程不再是模式。
    ///</summary>
    {class} procedure PopModal;
    ///<summary>
    ///  调用以指示某线程处于空闲状态。
    ///</summary>
    {class} procedure RaiseIdle;
    {class} function RaiseThreadMessage(out msg: DNMSG): Boolean;

  { static propertys } 

    ///<summary>
    ///  获取一个值，该值指示线程是否是模式。
    ///</summary>
    ///<returns>
    ///  如果线程是模式，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} property IsThreadModal: Boolean read get_IsThreadModal;
    ///<summary>
    ///  获取已引发的最后一条消息。
    ///</summary>
    ///<returns>
    ///  最后一条消息。
    ///</returns>
    {class} property CurrentKeyboardMessage: DNMSG read get_CurrentKeyboardMessage;
  end;

  ///<summary>
  ///  在互操作方案中，启用 Win32 与 WPF 之间的消息泵的共享控件。
  ///</summary>
  [DNTypeName('System.Windows.Interop.ComponentDispatcher')]
  DNComponentDispatcher = interface(DDN.mscorlib.DNObject)
  ['{13DC69A2-0784-3EB4-B914-B44F4E61F7F3}']
  { events } 

    {class} procedure add_ThreadIdle(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_ThreadIdle(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_ThreadFilterMessage(value: DNThreadMessageEventHandler);
    {class} procedure remove_ThreadFilterMessage(value: DNThreadMessageEventHandler);
    {class} procedure add_ThreadPreprocessMessage(value: DNThreadMessageEventHandler);
    {class} procedure remove_ThreadPreprocessMessage(value: DNThreadMessageEventHandler);
    {class} procedure add_EnterThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_EnterThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure add_LeaveThreadModal(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_LeaveThreadModal(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComponentDispatcher = class(TDNGenericImport<DNComponentDispatcherClass, DNComponentDispatcher>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNInternalTypeHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC7C835B-D6ED-533E-8EFF-51A92B77CFBB}']
  end;

  ///<summary>
  ///  WPF XAML 编译器在内部用来支持内部类型使用的抽象类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.InternalTypeHelper')]
  DNInternalTypeHelper = interface(DDN.mscorlib.DNObject)
  ['{0BF28642-6ED8-3A31-8B2D-B11D093618BD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInternalTypeHelper = class(TDNGenericImport<DNInternalTypeHelperClass, DNInternalTypeHelper>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{406F2606-588B-5F50-8AE5-C0F82707D4DE}']
  end;

  ///<summary>
  ///  表示可用于导航树中的对象的对象的抽象类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.Primitives.MarkupObject')]
  DNMarkupObject = interface(DDN.mscorlib.DNObject)
  ['{5571F728-28B1-3956-8F92-25D2B222531F}']
  { getters & setters } 

    function get_ObjectType: DDN.mscorlib.DNType;
    function get_Instance: DDN.mscorlib.DNObject;
    function get_Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty>;
    function get_Attributes: DDN.System.DNAttributeCollection;

  { methods } 

    ///<summary>
    ///  当在派生类中重写，将分配根上下文 <see cref="T:System.Windows.Markup.ValueSerializer" />
    ///  类。
    ///</summary>
    ///  <param name="context"><see cref="T:System.Windows.Markup.IValueSerializerContext" />
    ///  分配根上下文。
    ///</param>
    procedure AssignRootContext(context: DDN.System.Xaml.DNIValueSerializerContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取的一种 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  实例。
    ///</summary>
    ///<returns>
    ///  对象的类型。
    ///</returns>
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    ///<summary>
    ///  当在派生类中重写时获取由此对象的实例 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对象的实例
    ///</returns>
    property Instance: DDN.mscorlib.DNObject read get_Instance;
    ///<summary>
    ///  当在派生类中重写时获取此属性 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  应写入的实例 XAML。
    ///</summary>
    ///<returns>
    ///  属性。
    ///</returns>
    property Properties: DDN.mscorlib.DNIEnumerable<DNMarkupProperty> read get_Properties;
    ///<summary>
    ///  当在派生类中重写时获取与此相关联的属性 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  特性的集合。
    ///</returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupObject = class(TDNGenericImport<DNMarkupObjectClass, DNMarkupObject>) end;

  //-------------namespace: System.Windows.Markup.Primitives----------------
  DNMarkupPropertyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FB5946F8-B51B-5DE1-8AF0-5A208E17C97D}']
  end;

  ///<summary>
  ///  提供在编写标记后者中封装对属性及相应值的访问时要使用的属性说明的抽象类。
  ///</summary>
  [DNTypeName('System.Windows.Markup.Primitives.MarkupProperty')]
  DNMarkupProperty = interface(DDN.mscorlib.DNObject)
  ['{F465C255-E04E-3BB3-B7CF-89ABB3804307}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertyType: DDN.mscorlib.DNType;
    function get_PropertyDescriptor: DDN.System.DNPropertyDescriptor;
    function get_DependencyProperty: DNDependencyProperty;
    function get_IsAttached: Boolean;
    function get_IsConstructorArgument: Boolean;
    function get_IsValueAsString: Boolean;
    function get_IsContent: Boolean;
    function get_IsKey: Boolean;
    function get_IsComposite: Boolean;
    function get_Value: DDN.mscorlib.DNObject;
    function get_StringValue: string;
    function get_TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function get_Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject>;
    function get_Attributes: DDN.System.DNAttributeCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取用于诊断和错误报告的名称。
    ///</summary>
    ///<returns>
    ///  标识符属性名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  当在派生类中重写时获取的属性的 CLR 类型。
    ///</summary>
    ///<returns>
    ///  CLR 类型。
    ///</returns>
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.ComponentModel.PropertyDescriptor" />
    ///  标记属性。
    ///</summary>
    ///<returns>
    ///  属性描述符。
    ///</returns>
    property PropertyDescriptor: DDN.System.DNPropertyDescriptor read get_PropertyDescriptor;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Windows.DependencyProperty" />
    ///  标记属性，如果此属性实现为依赖项属性标识符
    ///</summary>
    ///<returns>
    ///  依赖属性标识符。
    ///</returns>
    property DependencyProperty: DNDependencyProperty read get_DependencyProperty;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  是一个附加 <see cref="T:System.Windows.DependencyProperty" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性是一个附加 <see cref="T:System.Windows.DependencyProperty" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAttached: Boolean read get_IsAttached;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  表示构造函数参数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此属性表示的构造函数参数;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsConstructorArgument: Boolean read get_IsConstructorArgument;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  表示传递给类型转换器来创建该属性的实例的文本是否应使用的构造函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  表示的字符串; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsValueAsString: Boolean read get_IsValueAsString;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  表示直接集合的内容。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该属性表示直接内容;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsContent: Boolean read get_IsContent;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  表示使用的密钥 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />
    ///  以便存储在字典中的项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此属性表示一个密钥;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsKey: Boolean read get_IsKey;
    ///<summary>
    ///  当在派生类中重写，确定是否这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  是一个复合属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  此属性为复合属性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsComposite: Boolean read get_IsComposite;
    ///<summary>
    ///  当在派生类中重写时获取的当前值 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前值。
    ///</returns>
    property Value: DDN.mscorlib.DNObject read get_Value;
    ///<summary>
    ///  当在派生类中重写时获取的字符串值 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串值。
    ///</returns>
    property StringValue: string read get_StringValue;
    ///<summary>
    ///  当在派生类中重写时获取的类型集，这 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  时它将序列化为一个字符串作为其值将引用。
    ///</summary>
    ///<returns>
    ///  类型集合。
    ///</returns>
    property TypeReferences: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType> read get_TypeReferences;
    ///<summary>
    ///  当在派生类中重写，获取对此属性的值构成的项。
    ///</summary>
    ///<returns>
    ///  将此属性的值构成的项。
    ///</returns>
    property Items: DDN.mscorlib.DNIEnumerable<DNMarkupObject> read get_Items;
    ///<summary>
    ///  当在派生类中重写时获取与此相关联的属性 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />
    ///  。
    ///</summary>
    ///<returns>
    ///  特性的集合。
    ///</returns>
    property Attributes: DDN.System.DNAttributeCollection read get_Attributes;
  end;

  TDNMarkupProperty = class(TDNGenericImport<DNMarkupPropertyClass, DNMarkupProperty>) end;

  //-------------namespace: System.Windows.Markup----------------
  DNServiceProvidersClass = interface(DNObjectClass)
  ['{9FF498D0-994B-5F24-9C2A-8E552D755A09}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Markup.ServiceProviders" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNServiceProviders;

  end;

  ///<summary>
  ///  提供一个实现 <see cref="T:System.IServiceProvider" />
  ///  接口使用的方法来添加服务。
  ///</summary>
  [DNTypeName('System.Windows.Markup.ServiceProviders')]
  DNServiceProviders = interface(DDN.mscorlib.DNIServiceProvider)
  ['{E52C4415-C8BA-32D0-BB68-B03CAF8B102C}']
  { methods } 

    ///<summary>
    ///  获取指定类型的服务对象。
    ///</summary>
    ///  <param name="serviceType">
    ///  要获取的服务对象的类型。
    ///</param>
    ///<returns>
    ///  该类型的服务实现 <paramref name="serviceType" />
    ///  。
    ///  可能是 <see langword="null" />
    ///  如果没有为类型存储的服务 <paramref name="serviceType" />
    ///  。
    ///</returns>
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将服务添加到列表。
    ///</summary>
    ///  <param name="serviceType">
    ///  新的服务的服务类型。
    ///</param>
    ///  <param name="service">
    ///  服务实现类。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="serviceType" />
    ///  或 <paramref name="service" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  尝试在字典中添加已存在的服务。
    ///</exception>
    procedure AddService(serviceType: DDN.mscorlib.DNType; service: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNServiceProviders = class(TDNGenericImport<DNServiceProvidersClass, DNServiceProviders>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNInt32RectValueSerializerClass = interface(DNObjectClass)
  ['{6C070776-62BC-590B-B93A-9D2B0862C1F0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Converters.Int32RectValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNInt32RectValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Int32Rect" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Converters.Int32RectValueSerializer')]
  DNInt32RectValueSerializer = interface(DNObject)
  ['{018CBEAD-FE38-36A1-85A6-8CFF4CB74BA8}']
  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Int32Rect" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Int32Rect" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将 <see cref="T:System.Windows.Int32Rect" />
    ///  的实例转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  字符串表示形式指定 <see cref="T:System.Windows.Int32Rect" />
    ///  。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNInt32RectValueSerializer = class(TDNGenericImport<DNInt32RectValueSerializerClass, DNInt32RectValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNPointValueSerializerClass = interface(DNObjectClass)
  ['{05009FCE-B22D-58D7-9F9C-6D1B9B9DCB98}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Converters.PointValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPointValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Point" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Converters.PointValueSerializer')]
  DNPointValueSerializer = interface(DNObject)
  ['{9361D9E1-FA34-3EE1-8025-1CDB26180AB1}']
  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Point" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Point" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Point" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例转换 <see cref="T:System.Windows.Point" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  字符串表示形式指定 <see cref="T:System.Windows.Point" />
    ///  。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPointValueSerializer = class(TDNGenericImport<DNPointValueSerializerClass, DNPointValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNRectValueSerializerClass = interface(DNObjectClass)
  ['{CFC00544-5C1B-5CDC-AFD2-8F1EDADC4E62}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Converters.RectValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNRectValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Rect" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Converters.RectValueSerializer')]
  DNRectValueSerializer = interface(DNObject)
  ['{36731F48-797D-3C84-A695-0DD5D5FE9D6F}']
  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Rect" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Rect" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将 <see cref="T:System.Windows.Rect" />
    ///  的实例转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  字符串表示形式指定 <see cref="T:System.Windows.Rect" />
    ///  。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRectValueSerializer = class(TDNGenericImport<DNRectValueSerializerClass, DNRectValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNSizeValueSerializerClass = interface(DNObjectClass)
  ['{637D9FA5-0FAB-5FF5-BE33-60CAE7A7F008}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Converters.SizeValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSizeValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Size" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Converters.SizeValueSerializer')]
  DNSizeValueSerializer = interface(DNObject)
  ['{CC5F4927-CC0D-368C-9DF5-DBB5AB396158}']
  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Size" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Size" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Size" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例转换 <see cref="T:System.Windows.Size" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  字符串表示形式指定 <see cref="T:System.Windows.Size" />
    ///  。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSizeValueSerializer = class(TDNGenericImport<DNSizeValueSerializerClass, DNSizeValueSerializer>) end;

  //-------------namespace: System.Windows.Converters----------------
  DNVectorValueSerializerClass = interface(DNObjectClass)
  ['{DFDE1ED8-C1A0-529A-A2CB-A7C1EAACFC71}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Converters.VectorValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNVectorValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Vector" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Converters.VectorValueSerializer')]
  DNVectorValueSerializer = interface(DNObject)
  ['{8D5A89DA-B624-380E-99B6-E681863BA008}']
  { methods } 

    ///<summary>
    ///  确定是否指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Vector" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要进行计算以供转换的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Vector" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Vector" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  将 <see cref="T:System.Windows.Vector" />
    ///  的实例转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换为字符串的对象。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  指定的 <see cref="T:System.Windows.Vector" />
    ///  的字符串表示形式。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVectorValueSerializer = class(TDNGenericImport<DNVectorValueSerializerClass, DNVectorValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNKeyValueSerializerClass = interface(DNObjectClass)
  ['{8E5EE957-35DB-54C4-A406-2E4BBE349DD3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Input.KeyValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNKeyValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Input.Key" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Input.KeyValueSerializer')]
  DNKeyValueSerializer = interface(DNObject)
  ['{E473D58E-2B94-31F9-8C18-69CAFDCEEA11}']
  { methods } 

    ///<summary>
    ///  确定指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Input.Key" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定指定 <see cref="T:System.Windows.Input.Key" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要计算以供转换的键。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Input.Key" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串 <see cref="T:System.Windows.Input.Key" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Input.Key" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例转换 <see cref="T:System.Windows.Input.Key" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要将转换为字符串的键。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  指定的固定字符串表示 <see cref="T:System.Windows.Input.Key" />
    ///  。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyValueSerializer = class(TDNGenericImport<DNKeyValueSerializerClass, DNKeyValueSerializer>) end;

  //-------------namespace: System.Windows.Input----------------
  DNModifierKeysValueSerializerClass = interface(DNObjectClass)
  ['{3DF1EAF8-DF69-5516-8179-4DD45086900C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNModifierKeysValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Input.ModifierKeys" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Input.ModifierKeysValueSerializer')]
  DNModifierKeysValueSerializer = interface(DNObject)
  ['{4AE8E962-73A3-399A-9969-85A8074619DF}']
  { methods } 

    ///<summary>
    ///  确定指定 <see cref="T:System.String" />
    ///  可以转换为的一个实例 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定指定 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的修改键。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要转换的字符串 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例转换 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要将转换为字符串的键。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  指定的固定字符串表示 <see cref="T:System.Windows.Input.ModifierKeys" />
    ///  值。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModifierKeysValueSerializer = class(TDNGenericImport<DNModifierKeysValueSerializerClass, DNModifierKeysValueSerializer>) end;

  //-------------namespace: System.Windows.Media.Converters----------------
  DNMatrixValueSerializerClass = interface(DNObjectClass)
  ['{4D781055-5D82-508F-970B-9699C1E5F883}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNMatrixValueSerializer;

  end;

  ///<summary>
  ///  实例之间进行转换 <see cref="T:System.String" />
  ///  的实例与 <see cref="T:System.Windows.Media.Matrix" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Media.Converters.MatrixValueSerializer')]
  DNMatrixValueSerializer = interface(DNObject)
  ['{1CB5965A-4569-3BA1-BADD-D45004B2FC34}']
  { methods } 

    ///<summary>
    ///  确定是否从转换给定 <see cref="T:System.String" />
    ///  实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  一点的。
    ///</summary>
    ///  <param name="value">
    ///  若要计算以供转换的字符串。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果该值可以转换，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  确定的实例时，如果 <see cref="T:System.Windows.Media.Matrix" />
    ///  可以转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  要计算用于转换。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  如果可将 <paramref name="value" />
    ///  转换为 <see cref="T:System.String" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  发生时 <paramref name="value" />
    ///  不是 <see cref="T:System.Windows.Media.Int32Collection" />
    ///  。
    ///</exception>
    function CanConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): Boolean;
    ///<summary>
    ///  将转换 <see cref="T:System.String" />
    ///  到 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</summary>
    ///  <param name="value"><see cref="T:System.String" />
    ///  值将转换为 <see cref="T:System.Windows.Media.Matrix" />
    ///  。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  新实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  基于提供 <paramref name="value" />
    ///  。
    ///</returns>
    function ConvertFromString(value: string; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNObject;
    ///<summary>
    ///  实例转换 <see cref="T:System.Windows.Media.Matrix" />
    ///  到 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  实例 <see cref="T:System.Windows.Media.Matrix" />
    ///  要计算用于转换。
    ///</param>
    ///  <param name="context">
    ///  用于转换的上下文信息。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  所提供的表示形式 <see cref="T:System.Windows.Media.Matrix" />
    ///  对象。
    ///</returns>
    function ConvertToString(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): string;
    function TypeReferences(value: DDN.mscorlib.DNObject; context: DDN.System.Xaml.DNIValueSerializerContext): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNType>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMatrixValueSerializer = class(TDNGenericImport<DNMatrixValueSerializerClass, DNMatrixValueSerializer>) end;

  //-------------namespace: System.Windows----------------
  DNNameScopeClass = interface(DNObjectClass)
  ['{C0839F22-B3A9-5149-97D9-3AC477AA1A22}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.NameScope" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNameScope;

  { static fields getter & setter } 

   function __fakeFieldGet_NameScopeProperty: DNDependencyProperty;

  { static fields } 

    ///<summary>
    ///  标识 <see cref="P:System.Windows.NameScope.NameScope" />
    ///  附加属性。
    ///</summary>
    ///<returns><see cref="P:System.Windows.NameScope.NameScope" />
    ///  附加属性的标识符。
    ///</returns>
    {class} property NameScopeProperty: DNDependencyProperty read __fakeFieldGet_NameScopeProperty;

  { static methods } 

    ///<summary>
    ///  为 <see cref="P:System.Windows.NameScope.NameScope" />
    ///  附加属性提供附加属性 set 访问器。
    ///</summary>
    ///  <param name="dependencyObject">
    ///  要为其更改 XAML 名称范围的对象。
    ///</param>
    ///  <param name="value">
    ///  使用接口转换的新 XAML 名称范围。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dependencyObject" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} procedure SetNameScope(dependencyObject: DNDependencyObject; value: DDN.System.Xaml.DNINameScope);
    ///<summary>
    ///  为 <see cref="P:System.Windows.NameScope.NameScope" />
    ///  附加属性提供附加属性 get 访问器。
    ///</summary>
    ///  <param name="dependencyObject">
    ///  要从中获取 XAML 名称范围的对象。
    ///</param>
    ///<returns>
    ///  以 <see cref="T:System.Windows.Markup.INameScope" />
    ///  实例表示的 XAML 名称范围。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dependencyObject" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetNameScope(dependencyObject: DNDependencyObject): DDN.System.Xaml.DNINameScope;

  end;

  ///<summary>
  ///  实现对 <see cref="T:System.Windows.Markup.INameScope" />
  ///  方法的基本 WPF 支持，这些方法用于向特定 XAML 名称范围中存储名称-对象映射或检索此类映射。
  ///  添加附加属性支持，以便更简单地在元素级别动态获取或设置 XAML 名称范围的名称。
  ///</summary>
  [DNTypeName('System.Windows.NameScope')]
  DNNameScope = interface(DDN.System.Xaml.DNINameScopeDictionary)
  ['{9B417001-72EB-3C78-BE3C-89CE2379918E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DDN.mscorlib.DNObject>;

  { methods } 

    ///<summary>
    ///  将新的名称-对象对注册到当前的 XAML 名称范围中。
    ///</summary>
    ///  <param name="name">
    ///  要用于映射给定对象的名称。
    ///</param>
    ///  <param name="scopedElement">
    ///  要映射到所提供名称的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  提供的 <paramref name="name" />
    ///  或 <paramref name="scopedElement" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  提供的 <paramref name="name" />
    ///  为空字符串
    ///  - 或 -
    ///  提供的 <paramref name="name" />
    ///  包含对 XAML 名称无效的字符，因此被分析程序拒绝
    ///  - 或 -
    ///  提供的 <paramref name="name" />
    ///  导致注册重复的名称。
    ///</exception>
    procedure RegisterName(name: string; scopedElement: DDN.mscorlib.DNObject);
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>): Boolean;
    ///<summary>
    ///  从 XAML 名称范围中删除名称对象映射。
    ///</summary>
    ///  <param name="name">
    ///  要删除的映射的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  是作为空字符串提供的。
    ///  - 或 -
    ///  提供的 <paramref name="name" />
    ///  尚未注册。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure UnregisterName(name: string);
    ///<summary>
    ///  根据提供的名称字符串，返回由此 <see cref="T:System.Windows.NameScope" />
    ///  保留的 XAML 名称范围中的相应对象。
    ///</summary>
    ///  <param name="name">
    ///  要检索其对象部分的现有映射的名称部分。
    ///</param>
    ///<returns>
    ///  用 <paramref name="name" />
    ///  映射的所请求对象。
    ///  如果提供的 <paramref name="name" />
    ///  为 <see langword="null" />
    ///  或空字符串，或者未找到匹配的对象，则可返回 <see langword="null" />
    ///  。
    ///</returns>
    function FindName(name: string): DDN.mscorlib.DNObject;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DDN.mscorlib.DNObject>>; arrayIndex: Int32);
    ///<summary>
    ///  返回提供的名称中是否存在此 <see cref="T:System.Windows.NameScope" />
    ///  。
    ///</summary>
    ///  <param name="key">
    ///  要查找的字符串键。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定 <paramref name="key" />
    ///  标识在此现有映射的名称 <see cref="T:System.Windows.NameScope" />
    ///  。
    ///<see langword="false" />
    ///  如果指定 <paramref name="key" />
    ///  中当前不存在 <see cref="T:System.Windows.NameScope" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在此映射名称的集合中返回的项数 <see cref="T:System.Windows.NameScope" />
    ///  。
    ///</summary>
    ///<returns>
    ///  集合中项的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取一个值，该值指示集合是否为只读。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取集合中的键 <see cref="T:System.Windows.NameScope" />
    ///  字典。
    ///</summary>
    ///<returns>
    ///  中的键的集合 <see cref="T:System.Windows.NameScope" />
    ///  字典。
    ///</returns>
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    ///<summary>
    ///  获取集合中的值 <see cref="T:System.Windows.NameScope" />
    ///  字典。
    ///</summary>
    ///<returns>
    ///  中的值的集合 <see cref="T:System.Windows.NameScope" />
    ///  字典。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection<DDN.mscorlib.DNObject> read get_Values;
  end;

  TDNNameScope = class(TDNGenericImport<DNNameScopeClass, DNNameScope>) end;

  //-------------namespace: System.Windows----------------
  DNPropertyMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9645A368-C862-5437-866B-6C7C71730A73}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.PropertyMetadata" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNPropertyMetadata; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.PropertyMetadata" />
    ///  类，具有此元数据将应用到的依赖项属性指定的默认值。
    ///</summary>
    ///  <param name="defaultValue">
    ///  要指定作为某种特定类型的值通常提供的依赖项属性的默认值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; 请参阅备注。
    ///</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject): DNPropertyMetadata; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.PropertyMetadata" />
    ///  类与指定 <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  实现引用。
    ///</summary>
    ///  <param name="propertyChangedCallback">
    ///  对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
    ///</param>
    {class} function init(propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.PropertyMetadata" />
    ///  类，具有指定的默认值和 <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  实现引用。
    ///</summary>
    ///  <param name="defaultValue">
    ///  依赖项属性，作为某种特定类型的值通常提供默认值。
    ///</param>
    ///  <param name="propertyChangedCallback">
    ///  对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; 请参阅备注。
    ///</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback): DNPropertyMetadata; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.PropertyMetadata" />
    ///  用指定的默认值和回调类。
    ///</summary>
    ///  <param name="defaultValue">
    ///  依赖项属性，作为某种特定类型的值通常提供默认值。
    ///</param>
    ///  <param name="propertyChangedCallback">
    ///  对是有效的属性值发生更改时由属性系统调用的处理程序实现的引用。
    ///</param>
    ///  <param name="coerceValueCallback">
    ///  引用是每当属性系统调用的处理程序实现 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />
    ///  根据此属性。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="defaultValue" />
    ///  不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ; 请参阅备注。
    ///</exception>
    {class} function init(defaultValue: DDN.mscorlib.DNObject; propertyChangedCallback: DNPropertyChangedCallback; coerceValueCallback: DNCoerceValueCallback): DNPropertyMetadata; overload;

  end;

  ///<summary>
  ///  定义依赖属性在应用于特定类型（包括该属性向其注册的条件）时行为的某些方面。
  ///</summary>
  [DNTypeName('System.Windows.PropertyMetadata')]
  DNPropertyMetadata = interface(DDN.mscorlib.DNObject)
  ['{A5B94737-0792-361D-9239-1F0A7E9F9DBD}']
  { getters & setters } 

    function get_DefaultValue: DDN.mscorlib.DNObject;
    procedure set_DefaultValue(value: DDN.mscorlib.DNObject);
    function get_PropertyChangedCallback: DNPropertyChangedCallback;
    procedure set_PropertyChangedCallback(value: DNPropertyChangedCallback);
    function get_CoerceValueCallback: DNCoerceValueCallback;
    procedure set_CoerceValueCallback(value: DNCoerceValueCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置依赖属性的默认值。
    ///</summary>
    ///<returns>
    ///  属性的默认值。
    ///  用无参数构造函数创建的 <see cref="T:System.Windows.PropertyMetadata" />
    ///  实例上的默认值将为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ；请参阅“备注”。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  创建之后无法设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  ；请参阅“备注”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  将元数据属性应用于依赖属性操作后，无法设置该属性。
    ///</exception>
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue write set_DefaultValue;
    ///<summary>
    ///  获取或设置一个引用， <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  此元数据中指定的实现。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.PropertyChangedCallback" />
    ///  实现引用。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  将元数据属性应用于依赖属性操作后，无法设置该属性。
    ///</exception>
    property PropertyChangedCallback: DNPropertyChangedCallback read get_PropertyChangedCallback write set_PropertyChangedCallback;
    ///<summary>
    ///  获取或设置一个引用， <see cref="T:System.Windows.CoerceValueCallback" />
    ///  此元数据中指定的实现。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.CoerceValueCallback" />
    ///  实现引用。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  将元数据属性应用于依赖属性操作后，无法设置该属性。
    ///</exception>
    property CoerceValueCallback: DNCoerceValueCallback read get_CoerceValueCallback write set_CoerceValueCallback;
  end;

  TDNPropertyMetadata = class(TDNGenericImport<DNPropertyMetadataClass, DNPropertyMetadata>) end;

  //-------------namespace: System.Windows----------------
  DNSplashScreenClass = interface(DDN.mscorlib.DNObjectClass)
  ['{56DCC3EC-99C7-5A47-8E88-C2BAC9007FBD}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.SplashScreen" />
    ///  使用指定的资源的类。
    ///</summary>
    ///  <param name="resourceName">
    ///  嵌入的资源的名称。
    ///</param>
    {class} function init(resourceName: string): DNSplashScreen; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.SplashScreen" />
    ///  与指定的资源程序集的类。
    ///</summary>
    ///  <param name="resourceAssembly">
    ///  包含嵌入的资源的程序集。
    ///</param>
    ///  <param name="resourceName">
    ///  嵌入的资源的名称。
    ///</param>
    {class} function init(resourceAssembly: DDN.mscorlib.DNAssembly; resourceName: string): DNSplashScreen; overload;

  end;

  ///<summary>
  ///  提供 Windows Presentation Foundation (WPF) 应用程序启动屏幕。
  ///</summary>
  [DNTypeName('System.Windows.SplashScreen')]
  DNSplashScreen = interface(DDN.mscorlib.DNObject)
  ['{E25E7B38-19DF-31AA-BC8A-FAB0AAE1BEE3}']
  { methods } 

    ///<summary>
    ///  显示初始屏幕。
    ///</summary>
    ///  <param name="autoClose"><see langword="true" />
    ///  若要自动关闭初始屏幕上。 <see langword="false" />
    ///  若要手动关闭初始屏幕。
    ///</param>
    ///<exception cref="T:System.IO.IOException">
    ///  找不到构造函数中指定的资源。
    ///</exception>
    procedure Show(autoClose: Boolean); overload;
    ///<summary>
    ///  显示初始屏幕。
    ///</summary>
    ///  <param name="autoClose"><see langword="true" />
    ///  若要自动关闭初始屏幕上。 <see langword="false" />
    ///  若要手动关闭初始屏幕。
    ///</param>
    ///  <param name="topMost"><see langword="true" />
    ///  如果初始屏幕窗口应使用 WS_EX_TOPMOST 样式中;否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure Show(autoClose: Boolean; topMost: Boolean); overload;
    ///<summary>
    ///  关闭初始屏幕。
    ///</summary>
    ///  <param name="fadeoutDuration">
    ///  一个 <see cref="T:System.TimeSpan" />
    ///  ，它指定需要多长时间它将为初始屏幕以淡入淡出后关闭操作已启动。
    ///</param>
    procedure Close(fadeoutDuration: DDN.mscorlib.DNTimeSpan);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSplashScreen = class(TDNGenericImport<DNSplashScreenClass, DNSplashScreen>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FA3F7C83-1FA3-5F68-ADA4-1B8ACCB4E554}']
  { static getter & setter } 

    {class} function get_CurrentDispatcher: DNDispatcher;

  { static methods } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  指定的线程。
    ///</summary>
    ///  <param name="thread">
    ///  若要获取的线程 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  从。
    ///</param>
    ///<returns>
    ///  调度程序 <paramref name="thread" />
    ///  。
    ///</returns>
    {class} function FromThread(thread: DDN.mscorlib.DNThread): DNDispatcher;
    ///<summary>
    ///  将主执行帧推送的事件队列 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    {class} procedure Run;
    ///<summary>
    ///  进入执行循环。
    ///</summary>
    ///  <param name="frame">
    ///  为处理调度程序帧。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="frame" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />
    ///  为 <see langword="true" />
    ///  - 或 -
    ///  <paramref name="frame" />
    ///  运行于不同 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///  - 或 -
    ///  调度程序处理已被禁用。
    ///</exception>
    {class} procedure PushFrame(frame: DNDispatcherFrame);
    ///<summary>
    ///  创建异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象。
    ///</summary>
    ///<returns>
    ///  一个可等待操作对象，以异步方式会将控制权出让回/当前调度程序和为处理其他事件的调度程序提供了机会。
    ///</returns>
    {class} function Yield: DNDispatcherPriorityAwaitable; overload;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  是有效的优先级。
    ///</summary>
    ///  <param name="priority">
    ///  要检查的优先级。
    ///</param>
    ///  <param name="parameterName">
    ///  如果优先级无效则会发生的异常将返回一个字符串。
    ///</param>
    ///<exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  。
    ///</exception>
    {class} procedure ValidatePriority(priority: DNDispatcherPriority; parameterName: string);
    ///<summary>
    ///  退出所有帧，包括嵌套的帧的请求。
    ///</summary>
    {class} procedure ExitAllFrames;
    ///<summary>
    ///  创建异步会将控制权出让回/当前调度程序，并为要处理其他事件的调度程序提供了机会的等待对象。
    ///  用指定的优先级计划时发生控制返回到等待此方法的结果代码的工作。
    ///</summary>
    ///  <param name="priority">
    ///  在安排延续任务优先级。
    ///</param>
    ///<returns>
    ///  一个可等待操作对象，以异步方式会将控制权出让回/当前调度程序和为处理其他事件的调度程序提供了机会。
    ///</returns>
    {class} function Yield(priority: DNDispatcherPriority): DNDispatcherPriorityAwaitable; overload;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  线程当前正在执行，并创建新 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  如果尚未与该线程关联。
    ///</summary>
    ///<returns>
    ///  与当前线程关联的调度程序。
    ///</returns>
    {class} property CurrentDispatcher: DNDispatcher read get_CurrentDispatcher;
  end;

  ///<summary>
  ///  为管理的线程的工作项队列提供服务。
  ///</summary>
  [DNTypeName('System.Windows.Threading.Dispatcher')]
  DNDispatcher = interface(DDN.mscorlib.DNObject)
  ['{E5319C47-7036-38A5-BA1D-BBC394F3B822}']
  { getters & setters } 

    function get_Thread: DDN.mscorlib.DNThread;
    function get_HasShutdownStarted: Boolean;
    function get_HasShutdownFinished: Boolean;
    function get_Hooks: DNDispatcherHooks;

  { events } 

    procedure add_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ShutdownFinished(value: DDN.mscorlib.DNEventHandler);
    procedure add_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure remove_UnhandledExceptionFilter(value: DNDispatcherUnhandledExceptionFilterEventHandler);
    procedure add_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);
    procedure remove_UnhandledException(value: DNDispatcherUnhandledExceptionEventHandler);

  { methods } 

    ///<summary>
    ///  确定调用线程是否与此相关的线程 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  调用线程是否与此相关的线程 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CheckAccess: Boolean;
    ///<summary>
    ///  确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</exception>
    procedure VerifyAccess;
    ///<summary>
    ///  启动的关闭过程 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  以同步方式。
    ///</summary>
    procedure InvokeShutdown;
    ///<summary>
    ///  在线程上执行指定的委托以异步方式按指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  一个方法委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效 <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  。
    ///</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DNDispatcherOperation; overload;
    ///<summary>
    ///  在线程上执行指定的委托以异步方式按指定的优先级并使用指定的参数 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  带一个参数，将被推送到方法的委托 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给指定的方法的对象。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效 <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  。
    ///</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DNDispatcherOperation; overload;
    ///<summary>
    ///  在线程上执行指定的委托以异步方式在指定的优先级并且指定的参数数组 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给指定的方法的对象。
    ///</param>
    ///  <param name="args">
    ///  作为指定方法的自变量传递的对象数组。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  调用时，可用来按原样中挂起执行的委托交互 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  队列。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  不是有效的优先级。
    ///</exception>
    function BeginInvoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>
    ///  在线程上执行以异步方式使用指定的参数指定的委托， <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  上创建了。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>
    ///  在线程上执行指定的委托使用指定的参数，按指定的优先级，以异步方式， <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  上创建了。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    function BeginInvoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DNDispatcherOperation; overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  线程上同步 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction); overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///  <param name="priority">
    ///  确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority); overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///  <param name="priority">
    ///  确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</param>
    ///  <param name="cancellationToken">
    ///  一个对象，该值指示是否要取消的操作。
    ///</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken); overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  在线程上异步 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction): DNDispatcherOperation; overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  以异步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///  <param name="priority">
    ///  确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority): DNDispatcherOperation; overload;
    ///<summary>
    ///  在其上的线程上执行指定的委托以同步方式按指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  一种方法的委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的优先级。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在该线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  带一个参数，将被推送到方法的委托 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给给定方法的对象。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的优先级。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="method">
    ///  一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给给定方法的对象。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的优先级。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Invoke(priority: DNDispatcherPriority; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在线程上执行指定的委托以同步方式按指定的优先级并使用指定的超时值 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  已创建。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="timeout">
    ///  最长时间等待操作完成。
    ///</param>
    ///  <param name="method">
    ///  一个方法委托不采用任何参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在该线程上异步执行指定的委托，以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="timeout">
    ///  最长时间等待操作完成。
    ///</param>
    ///  <param name="method">
    ///  一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给给定方法的对象。
    ///  如果不需要参数，则可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的优先级。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在该线程上异步执行指定的委托以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="timeout">
    ///  最长时间等待操作完成。
    ///</param>
    ///  <param name="method">
    ///  一种方法的委托采用多个参数，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="arg">
    ///  要将作为参数传递给指定的方法的对象。
    ///</param>
    ///  <param name="args">
    ///  作为指定方法的自变量传递的对象数组。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="priority" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />
    ///  。
    ///</exception><exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="priority" />
    ///  不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="method" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Invoke(priority: DNDispatcherPriority; timeout: DDN.mscorlib.DNTimeSpan; method: DDN.mscorlib.DNDelegate; arg: DDN.mscorlib.DNObject; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在线程上异步执行指定的参数指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法的委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在该线程上异步执行指定的委托以使用指定的参数指定的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法的委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在线程上异步执行指定的委托以使用指定的参数指定的优先级的指定的时间跨度内 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法的委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="timeout">
    ///  最大，无法完成操作等待的时间量。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  在该线程上异步执行以使用指定的参数指定的优先级的指定的时间跨度内指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="method">
    ///  采用指定参数的方法的委托 <paramref name="args" />
    ///  , ，它将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列。
    ///</param>
    ///  <param name="timeout">
    ///  最大，无法完成操作等待的时间量。
    ///</param>
    ///  <param name="priority">
    ///  相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  事件队列中，指定的方法调用。
    ///</param>
    ///  <param name="args">
    ///  作为给定方法的自变量传递的对象数组。
    ///  可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  正在调用的委托的返回值或 <see langword="null" />
    ///  如果委托没有返回值。
    ///</returns>
    function Invoke(method: DDN.mscorlib.DNDelegate; timeout: DDN.mscorlib.DNTimeSpan; priority: DNDispatcherPriority; args: TArray<DDN.mscorlib.DNObject>): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  禁用处理 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  队列。
    ///</summary>
    ///<returns>
    ///  用于重新启用调度程序处理的结构。
    ///</returns>
    function DisableProcessing: DNDispatcherProcessingDisabled;
    ///<summary>
    ///  启动关机的 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  以异步方式。
    ///</summary>
    ///  <param name="priority">
    ///  从此处开始关闭调度程序优先级。
    ///</param>
    procedure BeginInvokeShutdown(priority: DNDispatcherPriority);
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  以异步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///  <param name="priority">
    ///  确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</param>
    ///  <param name="cancellationToken">
    ///  一个对象，该值指示是否要取消的操作。
    ///</param>
    ///<returns>
    ///  一个对象，它之后立即返回 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />
    ///  调用时，可用来按原样执行挂起在事件队列的委托交互。
    ///</returns>
    function InvokeAsync(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken): DNDispatcherOperation; overload;
    ///<summary>
    ///  执行指定 <see cref="T:System.Action" />
    ///  以同步方式按指定的优先级的线程上 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///  <param name="callback">
    ///  要通过调度程序调用的委托。
    ///</param>
    ///  <param name="priority">
    ///  确定以何种顺序指定的回调调用相对于其他中挂起的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</param>
    ///  <param name="cancellationToken">
    ///  一个对象，该值指示是否要取消的操作。
    ///</param>
    ///  <param name="timeout">
    ///  要启动的操作等待的时间最小数量。
    ///</param>
    procedure Invoke(callback: DDN.mscorlib.DNAction; priority: DNDispatcherPriority; cancellationToken: DDN.mscorlib.DNCancellationToken; timeout: DDN.mscorlib.DNTimeSpan); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取线程此 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  与相关联。
    ///</summary>
    ///<returns>
    ///  线程。
    ///</returns>
    property Thread: DDN.mscorlib.DNThread read get_Thread;
    ///<summary>
    ///  确定是否 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  正在关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  已开始关闭; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasShutdownStarted: Boolean read get_HasShutdownStarted;
    ///<summary>
    ///  确定是否 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  已经完成关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果调度程序已关闭，则完成否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasShutdownFinished: Boolean read get_HasShutdownFinished;
    ///<summary>
    ///  获取的挂钩，它们提供了一些额外的事件信息的集合 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    ///<returns>
    ///  与此相关的挂钩 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</returns>
    property Hooks: DNDispatcherHooks read get_Hooks;
  end;

  TDNDispatcher = class(TDNGenericImport<DNDispatcherClass, DNDispatcher>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherHooksClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9AFC17B0-5CBF-525E-85E8-B1923998E863}']
  end;

  ///<summary>
  ///  提供有关的附加事件信息 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  处理。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherHooks')]
  DNDispatcherHooks = interface(DDN.mscorlib.DNObject)
  ['{A0DF799D-F876-3568-A7A5-C25319747B58}']
  { events } 

    procedure add_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DispatcherInactive(value: DDN.mscorlib.DNEventHandler);
    procedure add_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPosted(value: DNDispatcherHookEventHandler);
    procedure add_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationStarted(value: DNDispatcherHookEventHandler);
    procedure add_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationCompleted(value: DNDispatcherHookEventHandler);
    procedure add_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure remove_OperationPriorityChanged(value: DNDispatcherHookEventHandler);
    procedure add_OperationAborted(value: DNDispatcherHookEventHandler);
    procedure remove_OperationAborted(value: DNDispatcherHookEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDispatcherHooks = class(TDNGenericImport<DNDispatcherHooksClass, DNDispatcherHooks>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E6F7708-7242-5AEB-A69E-295CF3B6B6AB}']
  end;

  ///<summary>
  ///  表示与关联的对象 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherObject')]
  DNDispatcherObject = interface(DDN.mscorlib.DNObject)
  ['{F76563BB-A612-3482-ACBE-7FF19E51A68B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>
    ///  确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果调用线程可以访问此对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CheckAccess: Boolean;
    ///<summary>
    ///  强制执行调用的线程有权访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用线程没有访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  这 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  与相关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherObject = class(TDNGenericImport<DNDispatcherObjectClass, DNDispatcherObject>) end;

  //-------------namespace: System.Windows----------------
  DNDependencyObjectClass = interface(DNDispatcherObjectClass)
  ['{413D2E66-8AC2-5D20-B437-171C661774A2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.DependencyObject" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDependencyObject;

  end;

  ///<summary>
  ///  表示参与依赖属性系统的对象。
  ///</summary>
  [DNTypeName('System.Windows.DependencyObject')]
  DNDependencyObject = interface(DNDispatcherObject)
  ['{00987CC5-472E-3854-8A5C-D746A7FD1739}']
  { getters & setters } 

    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>
    ///  确定提供 <see cref="T:System.Windows.DependencyObject" />
    ///  等同于当前 <see cref="T:System.Windows.DependencyObject" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.DependencyObject" />
    ///  要与当前实例进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个实例是否相同，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此 <see cref="T:System.Windows.DependencyObject" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号 32 位整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  对 <see cref="T:System.Windows.DependencyObject" />
    ///  的此实例返回依赖属性的当前有效值。
    ///</summary>
    ///  <param name="dp">
    ///  要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///</param>
    ///<returns>
    ///  返回当前有效值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  指定 <paramref name="dp" />
    ///  或其值无效，或者指定 <paramref name="dp" />
    ///  不存在。
    ///</exception>
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置依赖属性的本地值，该值由其依赖属性标识符指定。
    ///</summary>
    ///  <param name="dp">
    ///  要设置的依赖属性的标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" />
    ///  上的属性。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不是为 <paramref name="dp" />
    ///  属性注册的正确类型。
    ///</exception>
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置依赖属性的值而不更改其值源。
    ///</summary>
    ///  <param name="dp">
    ///  要设置的依赖属性的标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" />
    ///  上的属性。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不是为 <paramref name="dp" />
    ///  属性注册的正确类型。
    ///</exception>
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  标识符指定。
    ///</summary>
    ///  <param name="key">
    ///  要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  清除属性的本地值。
    ///  要清除的属性由 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符指定。
    ///</summary>
    ///  <param name="dp">
    ///  要清除的由 <see cref="T:System.Windows.DependencyProperty" />
    ///  对象引用指定的依赖属性。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试对密封 <see cref="T:System.Windows.DependencyObject" />
    ///  调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  。
    ///</exception>
    procedure ClearValue(dp: DNDependencyProperty); overload;
    ///<summary>
    ///  清除只读属性的本地值。
    ///  要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  指定。
    ///</summary>
    ///  <param name="key">
    ///  要清除的依赖属性的关键字。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试对密封 <see cref="T:System.Windows.DependencyObject" />
    ///  调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  。
    ///</exception>
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    ///<summary>
    ///  对指定依赖属性的值进行强制。
    ///  通过对调用方 <see cref="T:System.Windows.DependencyObject" />
    ///  上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" />
    ///  函数进行调用来完成此操作。
    ///</summary>
    ///  <param name="dp">
    ///  要强制转换的依赖项属性的标识符。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  指定的 <paramref name="dp" />
    ///  或其值无效或不存在。
    ///</exception>
    procedure CoerceValue(dp: DNDependencyProperty);
    ///<summary>
    ///  重新计算指定的依赖项属性的有效值
    ///</summary>
    ///  <param name="dp"><see cref="T:System.Windows.DependencyProperty" />
    ///  要使之无效的属性标识符。
    ///</param>
    procedure InvalidateProperty(dp: DNDependencyProperty);
    ///<summary>
    ///  如果存在，则返回依赖属性的本地值。
    ///</summary>
    ///  <param name="dp">
    ///  要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///</param>
    ///<returns>
    ///  返回本地值，或者如果未设置本地值，则返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  。
    ///</returns>
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建专用的枚举数，用于确定哪些依赖项属性具有本地设置值，对此 <see cref="T:System.Windows.DependencyObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个专用的本地值的枚举。
    ///</returns>
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    ///<summary>
    ///  确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果调用线程可以访问此对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CheckAccess: Boolean;
    ///<summary>
    ///  强制执行调用的线程有权访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用线程没有访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</exception>
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.DependencyObjectType" />
    ///  包装 CLR 此实例的类型。 </summary>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.DependencyObjectType" />
    ///  包装 CLR 此实例的类型。
    ///</returns>
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    ///<summary>
    ///  获取一个值，该值指示是否此实例当前密封 （只读）。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此实例密封的;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSealed: Boolean read get_IsSealed;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  这 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  与相关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDependencyObject = class(TDNGenericImport<DNDependencyObjectClass, DNDependencyObject>) end;

  //-------------namespace: System.Windows----------------
  DNFreezableClass = interface(DNDependencyObjectClass)
  ['{8FA2C711-3764-537A-9DCC-4D6597158D4B}']
  end;

  ///<summary>
  ///  定义具有可修改状态和只读（冻结）状态的对象。
  ///  从 <see cref="T:System.Windows.Freezable" />
  ///  派生的类提供详细更改通知，可以设置为不可变，并且可以克隆自身。
  ///</summary>
  [DNTypeName('System.Windows.Freezable')]
  DNFreezable = interface(DNDependencyObject)
  ['{FFD99072-5B12-3B0D-8491-D97DFF56CDCE}']
  { getters & setters } 

    function get_CanFreeze: Boolean;
    function get_IsFrozen: Boolean;
    function get_DependencyObjectType: DNDependencyObjectType;
    function get_IsSealed: Boolean;
    function get_Dispatcher: DNDispatcher;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  创建的可修改复本 <see cref="T:System.Windows.Freezable" />
    ///  , ，从而深度复制对象的值。
    ///  在复制此对象的依赖属性时，此方法会复制表达式（可能不再解析），但不复制动画或其当前值。
    ///</summary>
    ///<returns>
    ///  当前对象的可修改复本。
    ///  即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性为 <see langword="true." />
    ///  ，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性也为 <see langword="false" />
    ///</returns>
    function Clone: DNFreezable;
    ///<summary>
    ///  创建的可修改复本 （深层复制） <see cref="T:System.Windows.Freezable" />
    ///  使用其当前值。
    ///</summary>
    ///<returns>
    ///  当前对象的可修改复本。
    ///  即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性为 <see langword="true." />
    ///  ，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性也为 <see langword="false" />
    ///</returns>
    function CloneCurrentValue: DNFreezable;
    ///<summary>
    ///  创建冻结的副本 <see cref="T:System.Windows.Freezable" />
    ///  , ，使用基 （非动画） 属性值。
    ///  因为该副本将被冻结，任何已冻结的子对象是通过引用复制。
    ///</summary>
    ///<returns>
    ///  冻结的副本 <see cref="T:System.Windows.Freezable" />
    ///  。
    ///  该副本的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Windows.Freezable" />
    ///  无法冻结，因为它包含表达式或动画的属性。
    ///</exception>
    function GetAsFrozen: DNFreezable;
    ///<summary>
    ///  创建冻结的副本 <see cref="T:System.Windows.Freezable" />
    ///  使用当前属性值。
    ///  因为该副本将被冻结，任何已冻结的子对象是通过引用复制。
    ///</summary>
    ///<returns>
    ///  冻结的副本 <see cref="T:System.Windows.Freezable" />
    ///  。
    ///  该副本的 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</returns>
    function GetCurrentValueAsFrozen: DNFreezable;
    ///<summary>
    ///  使当前对象不可修改，并且将其 <see cref="P:System.Windows.Freezable.IsFrozen" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法将 <see cref="T:System.Windows.Freezable" />
    ///  设置为不可修改。
    ///</exception>
    procedure Freeze;
    ///<summary>
    ///  确定提供 <see cref="T:System.Windows.DependencyObject" />
    ///  等同于当前 <see cref="T:System.Windows.DependencyObject" />
    ///  。
    ///</summary>
    ///  <param name="obj"><see cref="T:System.Windows.DependencyObject" />
    ///  要与当前实例进行比较。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个实例是否相同，则为否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  获取此 <see cref="T:System.Windows.DependencyObject" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  带符号 32 位整数哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  对 <see cref="T:System.Windows.DependencyObject" />
    ///  的此实例返回依赖属性的当前有效值。
    ///</summary>
    ///  <param name="dp">
    ///  要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///</param>
    ///<returns>
    ///  返回当前有效值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  指定 <paramref name="dp" />
    ///  或其值无效，或者指定 <paramref name="dp" />
    ///  不存在。
    ///</exception>
    function GetValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>
    ///  设置依赖属性的本地值，该值由其依赖属性标识符指定。
    ///</summary>
    ///  <param name="dp">
    ///  要设置的依赖属性的标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" />
    ///  上的属性。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不是为 <paramref name="dp" />
    ///  属性注册的正确类型。
    ///</exception>
    procedure SetValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  设置依赖属性的值而不更改其值源。
    ///</summary>
    ///  <param name="dp">
    ///  要设置的依赖属性的标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" />
    ///  上的属性。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="value" />
    ///  不是为 <paramref name="dp" />
    ///  属性注册的正确类型。
    ///</exception>
    procedure SetCurrentValue(dp: DNDependencyProperty; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  标识符指定。
    ///</summary>
    ///  <param name="key">
    ///  要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  标识符。
    ///</param>
    ///  <param name="value">
    ///  新的本地值。
    ///</param>
    procedure SetValue(key: DNDependencyPropertyKey; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  清除属性的本地值。
    ///  要清除的属性由 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符指定。
    ///</summary>
    ///  <param name="dp">
    ///  要清除的由 <see cref="T:System.Windows.DependencyProperty" />
    ///  对象引用指定的依赖属性。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试对密封 <see cref="T:System.Windows.DependencyObject" />
    ///  调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  。
    ///</exception>
    procedure ClearValue(dp: DNDependencyProperty); overload;
    ///<summary>
    ///  清除只读属性的本地值。
    ///  要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" />
    ///  指定。
    ///</summary>
    ///  <param name="key">
    ///  要清除的依赖属性的关键字。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试对密封 <see cref="T:System.Windows.DependencyObject" />
    ///  调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />
    ///  。
    ///</exception>
    procedure ClearValue(key: DNDependencyPropertyKey); overload;
    ///<summary>
    ///  对指定依赖属性的值进行强制。
    ///  通过对调用方 <see cref="T:System.Windows.DependencyObject" />
    ///  上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" />
    ///  函数进行调用来完成此操作。
    ///</summary>
    ///  <param name="dp">
    ///  要强制转换的依赖项属性的标识符。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  指定的 <paramref name="dp" />
    ///  或其值无效或不存在。
    ///</exception>
    procedure CoerceValue(dp: DNDependencyProperty);
    ///<summary>
    ///  重新计算指定的依赖项属性的有效值
    ///</summary>
    ///  <param name="dp"><see cref="T:System.Windows.DependencyProperty" />
    ///  要使之无效的属性标识符。
    ///</param>
    procedure InvalidateProperty(dp: DNDependencyProperty);
    ///<summary>
    ///  如果存在，则返回依赖属性的本地值。
    ///</summary>
    ///  <param name="dp">
    ///  要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" />
    ///  标识符。
    ///</param>
    ///<returns>
    ///  返回本地值，或者如果未设置本地值，则返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />
    ///  。
    ///</returns>
    function ReadLocalValue(dp: DNDependencyProperty): DDN.mscorlib.DNObject;
    ///<summary>
    ///  创建专用的枚举数，用于确定哪些依赖项属性具有本地设置值，对此 <see cref="T:System.Windows.DependencyObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个专用的本地值的枚举。
    ///</returns>
    function GetLocalValueEnumerator: DNLocalValueEnumerator;
    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否可将对象变为不可修改。
    ///</summary>
    ///<returns>
    ///  如果当前对象可以变为不可修改，或者已经不可修改，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanFreeze: Boolean read get_CanFreeze;
    ///<summary>
    ///  获取一个值，该值指示对象当前是否可修改。
    ///</summary>
    ///<returns>
    ///  如果该对象已被冻结且无法修改，则为 <see langword="true" />
    ///  ；如果可以修改该对象，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsFrozen: Boolean read get_IsFrozen;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.DependencyObjectType" />
    ///  包装 CLR 此实例的类型。 </summary>
    ///<returns>
    ///  一个 <see cref="T:System.Windows.DependencyObjectType" />
    ///  包装 CLR 此实例的类型。
    ///</returns>
    property DependencyObjectType: DNDependencyObjectType read get_DependencyObjectType;
    ///<summary>
    ///  获取一个值，该值指示是否此实例当前密封 （只读）。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此实例密封的;，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsSealed: Boolean read get_IsSealed;
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNFreezable = class(TDNGenericImport<DNFreezableClass, DNFreezable>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherFrameClass = interface(DNDispatcherObjectClass)
  ['{E6DD9745-ADF2-559A-8CB6-316D900ECDFD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDispatcherFrame; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  类中，使用指定的退出请求标志。
    ///</summary>
    ///  <param name="exitWhenRequested">
    ///  指示是否所有帧都请求退出时将退出此帧。
    ///</param>
    {class} function init(exitWhenRequested: Boolean): DNDispatcherFrame; overload;

  end;

  ///<summary>
  ///  表示在执行循环 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherFrame')]
  DNDispatcherFrame = interface(DNDispatcherObject)
  ['{68499B53-61D4-3068-B35C-97BFE597985E}']
  { getters & setters } 

    function get_Continue: Boolean;
    procedure set_Continue(value: Boolean);
    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>
    ///  确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果调用线程可以访问此对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CheckAccess: Boolean;
    ///<summary>
    ///  强制执行调用的线程有权访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用线程没有访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否此 <see cref="T:System.Windows.Threading.DispatcherFrame" />
    ///  应继续。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应继续框架;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property &Continue: Boolean read get_Continue write set_Continue;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  这 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  与相关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNDispatcherFrame = class(TDNGenericImport<DNDispatcherFrameClass, DNDispatcherFrame>) end;

  //-------------namespace: System.Windows----------------
  DNWeakEventManagerClass = interface(DNDispatcherObjectClass)
  ['{EC1A780D-5474-5C90-A449-485A6D896FF3}']
  end;

  ///<summary>
  ///  提供基本类中使用的事件管理 弱事件模式。
  ///  该管理器添加和移除的事件 （或回调） 也使用该模式的侦听器。
  ///</summary>
  [DNTypeName('System.Windows.WeakEventManager')]
  DNWeakEventManager = interface(DNDispatcherObject)
  ['{1E3727EE-0804-35E0-A877-BE085FAB7564}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    ///<summary>
    ///  确定调用线程是否有权访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果调用线程可以访问此对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CheckAccess: Boolean;
    ///<summary>
    ///  强制执行调用的线程有权访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用线程没有访问此<see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  。
    ///</exception>
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  这 <see cref="T:System.Windows.Threading.DispatcherObject" />
    ///  与相关联。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNWeakEventManager = class(TDNGenericImport<DNWeakEventManagerClass, DNWeakEventManager>) end;

  //-------------namespace: System.Collections.Specialized----------------
  DNCollectionChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{FD184746-FF6C-575F-9E2C-0F70271216A6}']
  { static methods } 

    ///<summary>
    ///  指定将侦听器添加到 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要作为侦听器添加的对象。
    ///</param>
    {class} procedure AddListener(source: DDN.System.DNINotifyCollectionChanged; listener: DNIWeakEventListener);
    ///<summary>
    ///  删除指定的侦听器从 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要移除的侦听器。
    ///</param>
    {class} procedure RemoveListener(source: DDN.System.DNINotifyCollectionChanged; listener: DNIWeakEventListener);
    {class} procedure AddHandler(source: DDN.System.DNINotifyCollectionChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNNotifyCollectionChangedEventArgs>);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyCollectionChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNNotifyCollectionChangedEventArgs>);

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Windows.WeakEventManager" />
  ///  实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Collections.Specialized.CollectionChangedEventManager')]
  DNCollectionChangedEventManager = interface(DNWeakEventManager)
  ['{8B1E5228-C3B7-3A07-A24B-8D5563E0085A}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCollectionChangedEventManager = class(TDNGenericImport<DNCollectionChangedEventManagerClass, DNCollectionChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{D99B691F-5F39-5C67-9E03-9404D1528211}']
  { static methods } 

    {class} procedure AddHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DDN.mscorlib.DNEventArgs>);
    {class} procedure RemoveHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DDN.mscorlib.DNEventArgs>);
    ///<summary>
    ///  指定将侦听器添加到 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要作为侦听器添加的对象。
    ///</param>
    {class} procedure AddListener(source: DNICollectionView; listener: DNIWeakEventListener);
    ///<summary>
    ///  删除指定的侦听器从 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要移除的侦听器。
    ///</param>
    {class} procedure RemoveListener(source: DNICollectionView; listener: DNIWeakEventListener);

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Windows.WeakEventManager" />
  ///  实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.ComponentModel.CurrentChangedEventManager')]
  DNCurrentChangedEventManager = interface(DNWeakEventManager)
  ['{A9ADEF08-1872-3B9F-8535-5B4BF30F937B}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCurrentChangedEventManager = class(TDNGenericImport<DNCurrentChangedEventManagerClass, DNCurrentChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNCurrentChangingEventManagerClass = interface(DNWeakEventManagerClass)
  ['{3961BE8C-AF87-5D48-8D78-8DEC7FAD54F9}']
  { static methods } 

    {class} procedure AddHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DNCurrentChangingEventArgs>);
    {class} procedure RemoveHandler(source: DNICollectionView; handler: DDN.mscorlib.DNEventHandler<DNCurrentChangingEventArgs>);
    ///<summary>
    ///  指定将侦听器添加到 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要作为侦听器添加的对象。
    ///</param>
    {class} procedure AddListener(source: DNICollectionView; listener: DNIWeakEventListener);
    ///<summary>
    ///  删除指定的侦听器从 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
    ///  指定源的事件。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要移除的侦听器。
    ///</param>
    {class} procedure RemoveListener(source: DNICollectionView; listener: DNIWeakEventListener);

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Windows.WeakEventManager" />
  ///  实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.ComponentModel.CurrentChangingEventManager')]
  DNCurrentChangingEventManager = interface(DNWeakEventManager)
  ['{3B505C32-2DF8-381E-89C6-AA7ED6DCA914}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNCurrentChangingEventManager = class(TDNGenericImport<DNCurrentChangingEventManagerClass, DNCurrentChangingEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNErrorsChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{80E15846-562F-5F30-8684-36E7999F8F6B}']
  { static methods } 

    {class} procedure AddHandler(source: DDN.System.DNINotifyDataErrorInfo; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNDataErrorsChangedEventArgs>);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyDataErrorInfo; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNDataErrorsChangedEventArgs>);

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Windows.WeakEventManager" />
  ///  实现，以便您可以使用弱事件侦听器模式要附加的侦听器 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.ComponentModel.ErrorsChangedEventManager')]
  DNErrorsChangedEventManager = interface(DNWeakEventManager)
  ['{471A065D-4307-3A9C-A00D-2126673ACF39}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNErrorsChangedEventManager = class(TDNGenericImport<DNErrorsChangedEventManagerClass, DNErrorsChangedEventManager>) end;

  //-------------namespace: System.ComponentModel----------------
  DNPropertyChangedEventManagerClass = interface(DNWeakEventManagerClass)
  ['{A3E408A4-8B20-52B9-B4F9-8ED79C4999F0}']
  { static methods } 

    ///<summary>
    ///  将指定的侦听器添加到指定的源上的侦听器的列表。
    ///</summary>
    ///  <param name="source">
    ///  与事件对象。
    ///</param>
    ///  <param name="listener">
    ///  要作为侦听器添加的对象。
    ///</param>
    ///  <param name="propertyName">
    ///  存在的属性名称<paramref name="source" />
    ///  可侦听更改的依据。
    ///  设置为<see cref="F:System.String.Empty" />
    ///  以指示"任何属性"。
    ///</param>
    {class} procedure AddListener(source: DDN.System.DNINotifyPropertyChanged; listener: DNIWeakEventListener; propertyName: string);
    ///<summary>
    ///  从提供的源上的侦听器的列表中删除指定的侦听器。
    ///</summary>
    ///  <param name="source">
    ///  要从中移除侦听器的对象。
    ///</param>
    ///  <param name="listener">
    ///  要移除的侦听器。
    ///</param>
    ///  <param name="propertyName">
    ///  存在的属性的名称 <paramref name="source" />
    ///  可停止侦听更改的依据。
    ///  设置为 <see cref="F:System.String.Empty" />
    ///  以指示"任何属性"。
    ///</param>
    {class} procedure RemoveListener(source: DDN.System.DNINotifyPropertyChanged; listener: DNIWeakEventListener; propertyName: string);
    {class} procedure AddHandler(source: DDN.System.DNINotifyPropertyChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNPropertyChangedEventArgs>; propertyName: string);
    {class} procedure RemoveHandler(source: DDN.System.DNINotifyPropertyChanged; handler: DDN.mscorlib.DNEventHandler<DDN.System.DNPropertyChangedEventArgs>; propertyName: string);

  end;

  ///<summary>
  ///  提供了 <see cref="T:System.Windows.WeakEventManager" />
  ///  实现，以便您可以使用"弱事件侦听器"模式将附加的侦听器 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.ComponentModel.PropertyChangedEventManager')]
  DNPropertyChangedEventManager = interface(DNWeakEventManager)
  ['{EC82AD5B-0628-39D8-A596-9B130B8C1183}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNPropertyChangedEventManager = class(TDNGenericImport<DNPropertyChangedEventManagerClass, DNPropertyChangedEventManager>) end;

  //-------------namespace: System.Windows----------------
  DNWeakEventManagerClass<TEventSource, TEventArgs> = interface(DNWeakEventManagerClass)
  ['{791D2AEC-D463-557C-BA2A-56D2BD3CA71B}']
  { static methods } 

    {class} procedure AddHandler(source: TEventSource; eventName: string; handler: DDN.mscorlib.DNEventHandler<TEventArgs>);
    {class} procedure RemoveHandler(source: TEventSource; eventName: string; handler: DDN.mscorlib.DNEventHandler<TEventArgs>);

  end;

  ///<summary>
  ///  提供类型安全 <see cref="T:System.Windows.WeakEventManager" />
  ///  ，可用于指定要用于"弱事件侦听器"模式的事件处理程序。
  ///  此类定义事件源的类型参数和使用事件数据的类型参数。
  ///</summary>
  ///<typeparam name="TEventSource">
  ///  引发事件的类型。
  ///</typeparam><typeparam name="TEventArgs">
  ///  包含事件数据类型。
  ///</typeparam>
  [DNTypeName('System.Windows.WeakEventManager`2')]
  DNWeakEventManager<TEventSource, TEventArgs> = interface(DNWeakEventManager)
  ['{D1B61D1D-442D-3005-B85C-94149332E78C}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;

  { methods } 

    function CheckAccess: Boolean;
    procedure VerifyAccess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dispatcher: DNDispatcher read get_Dispatcher;
  end;

  TDNWeakEventManager<TEventSource, TEventArgs> = class(TDNGenericImport<DNWeakEventManagerClass<TEventSource, TEventArgs>, DNWeakEventManager<TEventSource, TEventArgs>>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherOperationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{48A2A2EF-CE7F-5B39-9372-F9A28A5D7AA7}']
  end;

  ///<summary>
  ///  表示用于与已发送到的操作进行交互的对象 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  队列。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherOperation')]
  DNDispatcherOperation = interface(DDN.mscorlib.DNObject)
  ['{DB22AF9A-DDDD-3CF5-8768-4C076EDBCC02}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_Priority: DNDispatcherPriority;
    procedure set_Priority(value: DNDispatcherPriority);
    function get_Status: DNDispatcherOperationStatus;
    function get_Task: DDN.mscorlib.DNTask;
    function get_Result: DDN.mscorlib.DNObject;

  { events } 

    procedure add_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  返回一个异步操作完成时通知的对象。
    ///</summary>
    ///<returns>
    ///  一个异步操作完成时通知的对象。
    ///</returns>
    function GetAwaiter: DDN.mscorlib.DNTaskAwaiter;
    ///<summary>
    ///  等待要完成的操作
    ///</summary>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  。
    ///  这会等待已在同一线程执行某个操作时发生。
    ///</exception>
    function Wait: DNDispatcherOperationStatus; overload;
    ///<summary>
    ///  等待要在指定的时间段内完成的操作。
    ///</summary>
    ///  <param name="timeout">
    ///  最大等待时间段。
    ///</param>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  。
    ///  这会等待已在同一线程执行某个操作时发生。
    ///</exception>
    function Wait(timeout: DDN.mscorlib.DNTimeSpan): DNDispatcherOperationStatus; overload;
    ///<summary>
    ///  将中止此操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果操作已中止。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Abort: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  投递该操作。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>
    ///  获取或设置中的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  队列。
    ///</summary>
    ///<returns>
    ///  在队列中的委托的优先级。
    ///</returns>
    property Priority: DNDispatcherPriority read get_Priority write set_Priority;
    ///<summary>
    ///  获取该操作的当前状态...
    ///</summary>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    property Status: DNDispatcherOperationStatus read get_Status;
    ///<summary>
    ///  获取 <see cref="T:System.Threading.Tasks.Task`1" />
    ///  ，表示当前操作。
    ///</summary>
    ///<returns>
    ///  一个表示当前操作的对象。
    ///</returns>
    property Task: DDN.mscorlib.DNTask read get_Task;
    ///<summary>
    ///  完成后，请获取操作的结果。
    ///</summary>
    ///<returns>
    ///  操作的结果- <see langword="null" />
    ///  如果该操作尚未完成。
    ///</returns>
    property Result: DDN.mscorlib.DNObject read get_Result;
  end;

  TDNDispatcherOperation = class(TDNGenericImport<DNDispatcherOperationClass, DNDispatcherOperation>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherOperationClass<TResult> = interface(DNDispatcherOperationClass)
  ['{AB908011-A6EF-506E-8D47-3742172AAFE3}']
  end;

  ///<summary>
  ///  表示用于与已发送到的操作进行交互的对象 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  排队，并包含 <see cref="T:System.Threading.Tasks.Task`1" />
  ///  。
  ///</summary>
  ///<typeparam name="TResult">
  ///  返回的类型 <see cref="T:System.Threading.Tasks.Task`1" />
  ///  。
  ///</typeparam>
  [DNTypeName('System.Windows.Threading.DispatcherOperation`1')]
  DNDispatcherOperation<TResult> = interface(DNDispatcherOperation)
  ['{FCE6E672-5B63-3EE2-90E3-91BE785A0FD5}']
  { getters & setters } 

    function get_Task: DDN.mscorlib.DNTask<TResult>;
    function get_Result: TResult;
    function get_Dispatcher: DNDispatcher;
    function get_Priority: DNDispatcherPriority;
    procedure set_Priority(value: DNDispatcherPriority);
    function get_Status: DNDispatcherOperationStatus;

  { events } 

    procedure add_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Aborted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Completed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Completed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  返回一个等待返回的结果的异步操作的对象。
    ///</summary>
    ///<returns>
    ///  等待异步操作的对象，它返回的结果。
    ///</returns>
    function GetAwaiter: DDN.mscorlib.DNTaskAwaiter<TResult>;
    ///<summary>
    ///  等待要完成的操作
    ///</summary>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  。
    ///  这会等待已在同一线程执行某个操作时发生。
    ///</exception>
    function Wait: DNDispatcherOperationStatus; overload;
    ///<summary>
    ///  等待要在指定的时间段内完成的操作。
    ///</summary>
    ///  <param name="timeout">
    ///  最大等待时间段。
    ///</param>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Threading.DispatcherOperation.Status" />
    ///  等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />
    ///  。
    ///  这会等待已在同一线程执行某个操作时发生。
    ///</exception>
    function Wait(timeout: DDN.mscorlib.DNTimeSpan): DNDispatcherOperationStatus; overload;
    ///<summary>
    ///  将中止此操作。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果操作已中止。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Abort: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Threading.Tasks.Task`1" />
    ///  ，表示当前操作。
    ///</summary>
    ///<returns>
    ///  一个表示当前操作的对象。
    ///</returns>
    property Task: DDN.mscorlib.DNTask<TResult> read get_Task;
    ///<summary>
    ///  完成后，请获取操作的结果。
    ///</summary>
    ///<returns>
    ///  操作的结果。
    ///</returns>
    property Result: TResult read get_Result;
    ///<summary>
    ///  获取 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  投递该操作。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>
    ///  获取或设置中的操作的优先级 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  队列。
    ///</summary>
    ///<returns>
    ///  在队列中的委托的优先级。
    ///</returns>
    property Priority: DNDispatcherPriority read get_Priority write set_Priority;
    ///<summary>
    ///  获取该操作的当前状态...
    ///</summary>
    ///<returns>
    ///  操作的状态。
    ///</returns>
    property Status: DNDispatcherOperationStatus read get_Status;
  end;

  TDNDispatcherOperation<TResult> = class(TDNGenericImport<DNDispatcherOperationClass<TResult>, DNDispatcherOperation<TResult>>) end;

  //-------------namespace: System.Windows.Threading----------------
  DNDispatcherTimerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAB225DA-E8ED-50C4-82B3-23DF67E2E759}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNDispatcherTimer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  处理按指定的优先级的计时器事件的类。
    ///</summary>
    ///  <param name="priority">
    ///  与在其调用计时器的优先级。
    ///</param>
    {class} function init(priority: DNDispatcherPriority): DNDispatcherTimer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  类上指定运行 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  按指定的优先级。
    ///</summary>
    ///  <param name="priority">
    ///  与在其调用计时器的优先级。
    ///</param>
    ///  <param name="dispatcher">
    ///  调度程序计时器相关联。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(priority: DNDispatcherPriority; dispatcher: DNDispatcher): DNDispatcherTimer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  类该类使用指定的时间间隔、 优先级别、 事件处理程序和 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  。
    ///</summary>
    ///  <param name="interval">
    ///  计时周期之间的时间段。
    ///</param>
    ///  <param name="priority">
    ///  与在其调用计时器的优先级。
    ///</param>
    ///  <param name="callback">
    ///  事件处理程序时调用 <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" />
    ///  事件发生。
    ///</param>
    ///  <param name="dispatcher">
    ///  调度程序计时器相关联。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="dispatcher" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="callback" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />
    ///  小于 0 或大于 <see cref="F:System.Int32.MaxValue" />
    ///  。
    ///</exception>
    {class} function init(interval: DDN.mscorlib.DNTimeSpan; priority: DNDispatcherPriority; callback: DDN.mscorlib.DNEventHandler; dispatcher: DNDispatcher): DNDispatcherTimer; overload;

  end;

  ///<summary>
  ///  集成到一个计时器 <see cref="T:System.Windows.Threading.Dispatcher" />
  ///  在指定时间间隔和指定的优先级处理的队列。
  ///</summary>
  [DNTypeName('System.Windows.Threading.DispatcherTimer')]
  DNDispatcherTimer = interface(DDN.mscorlib.DNObject)
  ['{D364767F-0592-3217-874C-3D7F0046AA1F}']
  { getters & setters } 

    function get_Dispatcher: DNDispatcher;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_Interval: DDN.mscorlib.DNTimeSpan;
    procedure set_Interval(value: DDN.mscorlib.DNTimeSpan);
    function get_Tag: DDN.mscorlib.DNObject;
    procedure set_Tag(value: DDN.mscorlib.DNObject);

  { events } 

    procedure add_Tick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Tick(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    ///<summary>
    ///  启动 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  。
    ///</summary>
    procedure Start;
    ///<summary>
    ///  停止 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  。
    ///</summary>
    procedure Stop;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取与此 <see cref="T:System.Windows.Threading.Dispatcher" />
    ///  关联的 <see cref="T:System.Windows.Threading.DispatcherTimer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  调度程序。
    ///</returns>
    property Dispatcher: DNDispatcher read get_Dispatcher;
    ///<summary>
    ///  获取或设置一个值，指示计时器是否正在运行。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果计时器处于启用状态;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    ///<summary>
    ///  获取或设置计时器刻度之间的时间段。
    ///</summary>
    ///<returns>
    ///  计时周期之间的时间段。
    ///  默认值为“00:00:00”。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="interval" />
    ///  小于 0 或大于 <see cref="F:System.Int32.MaxValue" />
    ///  毫秒为单位。
    ///</exception>
    property Interval: DDN.mscorlib.DNTimeSpan read get_Interval write set_Interval;
    ///<summary>
    ///  获取或设置用户定义数据对象。
    ///</summary>
    ///<returns>
    ///  用户定义的数据。
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property Tag: DDN.mscorlib.DNObject read get_Tag write set_Tag;
  end;

  TDNDispatcherTimer = class(TDNGenericImport<DNDispatcherTimerClass, DNDispatcherTimer>) end;


implementation


initialization
  LoadAssemblyModule('WPF\WindowsBase.dll', True);

finalization

end.
