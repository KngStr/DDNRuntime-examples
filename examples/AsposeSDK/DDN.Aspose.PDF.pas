// Aspose.PDF, Version=21.6.0.0, Culture=neutral, PublicKeyToken=f0262d67fe233d63
//-----------------------------------------------------------//
//                                                           //
//     DDN.Aspose.PDF                               
//     Delphi .NET Import                                    //
//     Author: ying32                                        //
//     .NET Framework: .NET 4.0                              //
//                                                           //
//-----------------------------------------------------------//

unit DDN.Aspose.PDF;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.Aspose.Common;

type

{ enums }

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration describes associated files relationship.
  ///</summary>
  [DNTypeName('Aspose.Pdf.AFRelationship')]
  DNAFRelationship = type Integer;
  DNAFRelationshipHelper = record helper for DNAFRelationship
  public const
    ///<summary>
    ///  Source
    ///</summary>
    Source = 0;
    ///<summary>
    ///  Data
    ///</summary>
    Data = 1;
    ///<summary>
    ///  Alternative
    ///</summary>
    Alternative = 2;
    ///<summary>
    ///  Supplement
    ///</summary>
    Supplement = 3;
    ///<summary>
    ///  Unspecified
    ///</summary>
    Unspecified = 4;
    ///<summary>
    ///  EncryptedPayload
    ///</summary>
    EncryptedPayload = 5;
    ///<summary>
    ///  None
    ///</summary>
    None = 6;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  A set of flags specifying various characteristics of the annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationFlags')]
  DNAnnotationFlags = type Integer;
  DNAnnotationFlagsHelper = record helper for DNAnnotationFlags
  public const
    ///<summary>
    ///  Default value.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  If set, do not display the annotation if it does not belong to one of the standard annotation types
    ///  and no annotation handler is available. If clear, display such an unknown annotation
    ///  using an appearance stream specified by its appearance dictionary, if any.
    ///</summary>
    Invisible = 1;
    ///<summary>
    ///  If set, do not display or print the annotation or allow it to interact with the user,
    ///  regardless of its annotation type or whether an annotation handler is available.
    ///  In cases where screen space is limited, the ability to hide and show annotations selectively
    ///  can be used in combination with appearance streams to display auxiliary pop-up information
    ///  similar in function to online help systems.
    ///</summary>
    Hidden = 2;
    ///<summary>
    ///  If set, print the annotation when the page is printed. If clear, never print the annotation,
    ///  regardless of whether it is displayed on the screen. This can be useful, for example, for annotations
    ///  representing interactive pushbuttons, which would serve no meaningful purpose on the printed page.
    ///</summary>
    Print = 4;
    ///<summary>
    ///  If set, do not scale the annotation�s appearance to match the magnification of the page.
    ///  The location of the annotation on the page (defined by the upper-left corner of its annotation rectangle)
    ///  remains fixed, regardless of the page magnification.
    ///</summary>
    NoZoom = 8;
    ///<summary>
    ///  If set, do not rotate the annotation�s appearance to match the rotation of the page.
    ///  The upper-left corner of the annotation rectangle remains in a fixed location on the page,
    ///  regardless of the page rotation.
    ///</summary>
    NoRotate = 16;
    ///<summary>
    ///  If set, do not display the annotation on the screen or allow it to interact with the user.
    ///  The annotation may be printed (depending on the setting of the Print flag)
    ///  but should be considered hidden for purposes of on-screen display and user interaction.
    ///</summary>
    NoView = 32;
    ///<summary>
    ///  If set, do not allow the annotation to interact with the user. The annotation may be displayed
    ///  or printed (depending on the settings of the NoView and Print flags) but should not respond to mouse
    ///  clicks or change its appearance in response to mouse motions. This flag is ignored for widget annotations;
    ///  its function is subsumed by the ReadOnly flag of the associated form field.
    ///</summary>
    ReadOnly = 64;
    ///<summary>
    ///  If set, do not allow the annotation to be deleted or its properties (including position and size)
    ///  to be modified by the user. However, this flag does not restrict changes to the annotation�s contents,
    ///  such as the value of a form field.
    ///</summary>
    Locked = 128;
    ///<summary>
    ///  If set, invert the interpretation of the NoView flag for certain events.
    ///  A typical use is to have an annotation that appears only when a mouse cursor is held over it.
    ///</summary>
    ToggleNoView = 256;
    ///<summary>
    ///  If set, do not allow the contents of the annotation to be modified by the user.
    ///  This flag does not restrict deletion of the annotation or changes to other annotation properties,
    ///  such as position and size.
    ///</summary>
    LockedContents = 512;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  The enumeration of states to which the original annotation can be set.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationState')]
  DNAnnotationState = type Integer;
  DNAnnotationStateHelper = record helper for DNAnnotationState
  public const
    ///<summary>
    ///  Not defined state.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  The annotation has been marked by the user.
    ///</summary>
    Marked = 1;
    ///<summary>
    ///  The annotation has not been marked by the user.
    ///</summary>
    Unmarked = 2;
    ///<summary>
    ///  The user agrees with the change.
    ///</summary>
    Accepted = 3;
    ///<summary>
    ///  The user disagrees with the change.
    ///</summary>
    Rejected = 4;
    ///<summary>
    ///  The change has been cancelled.
    ///</summary>
    Cancelled = 5;
    ///<summary>
    ///  The change has been completed.
    ///</summary>
    Completed = 6;
    ///<summary>
    ///  The user has indicated nothing about the change.
    ///</summary>
    None = 7;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  The state model corresponding to state of annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationStateModel')]
  DNAnnotationStateModel = type Integer;
  DNAnnotationStateModelHelper = record helper for DNAnnotationStateModel
  public const
    ///<summary>
    ///  Not defined state model.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  The annotation has been marked (or unmarked) by the user.
    ///</summary>
    Marked = 1;
    ///<summary>
    ///  The annotation has been reviewed (accepted, rejected, cancelled, completed, none) by the user.
    ///</summary>
    Review = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumeration of annotation types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationType')]
  DNAnnotationType = type Integer;
  DNAnnotationTypeHelper = record helper for DNAnnotationType
  public const
    ///<summary>
    ///  Text annotation type.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Circle annotation type.
    ///</summary>
    Circle = 1;
    ///<summary>
    ///  Polygon annotation type.
    ///</summary>
    Polygon = 2;
    ///<summary>
    ///  Plyline annotation type.
    ///</summary>
    PolyLine = 3;
    ///<summary>
    ///  Line annotation type.
    ///</summary>
    Line = 4;
    ///<summary>
    ///  Square annotatotion type.
    ///</summary>
    Square = 5;
    ///<summary>
    ///  Free text annotation type.
    ///</summary>
    FreeText = 6;
    ///<summary>
    ///  Highlight annotation type.
    ///</summary>
    Highlight = 7;
    ///<summary>
    ///  Underline annotation type.
    ///</summary>
    Underline = 8;
    ///<summary>
    ///  Squiggle annotation type.
    ///</summary>
    Squiggly = 9;
    ///<summary>
    ///  Strikeout annotation type.
    ///</summary>
    StrikeOut = 10;
    ///<summary>
    ///  Caret annotation type.
    ///</summary>
    Caret = 11;
    ///<summary>
    ///  Ink annotation type.
    ///</summary>
    Ink = 12;
    ///<summary>
    ///  Link annotation type.
    ///</summary>
    Link = 13;
    ///<summary>
    ///  Popup annotation type.
    ///</summary>
    Popup = 14;
    ///<summary>
    ///  File attachment annotation type.
    ///</summary>
    FileAttachment = 15;
    ///<summary>
    ///  Sound annotation type.
    ///</summary>
    Sound = 16;
    ///<summary>
    ///  Movie annotation type.
    ///</summary>
    Movie = 17;
    ///<summary>
    ///  Screen annotation type.
    ///</summary>
    Screen = 18;
    ///<summary>
    ///  Widget annotation type.
    ///</summary>
    Widget = 19;
    ///<summary>
    ///  Watermark annotation type.
    ///</summary>
    Watermark = 20;
    ///<summary>
    ///  Trap network annotation type.
    ///</summary>
    TrapNet = 21;
    ///<summary>
    ///  Printer mark annotation type.
    ///</summary>
    PrinterMark = 22;
    ///<summary>
    ///  Redaction annotation type.
    ///</summary>
    Redaction = 23;
    ///<summary>
    ///  Rubber stamp annotation type.
    ///</summary>
    Stamp = 24;
    ///<summary>
    ///  Rich media annotation type
    ///</summary>
    RichMedia = 25;
    ///<summary>
    ///  Unknown annotation.
    ///</summary>
    Unknown = 26;
    PDF3D = 27;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Describes effect which should be applied to the border of the annotations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.BorderEffect')]
  DNBorderEffect = type Integer;
  DNBorderEffectHelper = record helper for DNBorderEffect
  public const
    ///<summary>
    ///  No effect.
    ///</summary>
    None = 0;
    ///<summary>
    ///  The border will appear "cloudly".
    ///</summary>
    Cloudy = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Describes style of the annotation border.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.BorderStyle')]
  DNBorderStyle = type Integer;
  DNBorderStyleHelper = record helper for DNBorderStyle
  public const
    ///<summary>
    ///  Solid border.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  Dashed border.
    ///</summary>
    Dashed = 1;
    ///<summary>
    ///  Bevelled border.
    ///</summary>
    Beveled = 2;
    ///<summary>
    ///  Inset border.
    ///</summary>
    Inset = 3;
    ///<summary>
    ///  Underlined border.
    ///</summary>
    Underline = 4;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Style of line ending of Ink annotation line.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CapStyle')]
  DNCapStyle = type Integer;
  DNCapStyleHelper = record helper for DNCapStyle
  public const
    ///<summary>
    ///  End is rectangular.
    ///</summary>
    Rectangular = 1;
    ///<summary>
    ///  End is rounded.
    ///</summary>
    Rounded = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumeration of the annotation�s caption positioning.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CaptionPosition')]
  DNCaptionPosition = type Integer;
  DNCaptionPositionHelper = record helper for DNCaptionPosition
  public const
    ///<summary>
    ///  The caption will be centered inside the line (default value).
    ///</summary>
    Inline_ = 0;
    ///<summary>
    ///  The caption will be on top of the line.
    ///</summary>
    Top = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  A symbol to be associated with the caret.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CaretSymbol')]
  DNCaretSymbol = type Integer;
  DNCaretSymbolHelper = record helper for DNCaretSymbol
  public const
    ///<summary>
    ///  No symbol should be associated with the caret.
    ///</summary>
    None = 0;
    ///<summary>
    ///  A new paragraph symbol (�) should be associated with the caret.
    ///</summary>
    Paragraph = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the types of explicit destinations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ExplicitDestinationType')]
  DNExplicitDestinationType = type Integer;
  DNExplicitDestinationTypeHelper = record helper for DNExplicitDestinationType
  public const
    ///<summary>
    ///  Display the page with the coordinates (left,�top) positioned at the upper-left corner of the window
    ///  and the contents of the page magnified by the factor zoom. A null value for any of the parameters
    ///  left, top, or zoom specifies that the current value of that parameter is to be retained unchanged.
    ///  A zoom value of 0 has the same meaning as a null value.
    ///</summary>
    XYZ = 0;
    ///<summary>
    ///  Display the page with its contents magnified just enough to fit the entire page within the window
    ///  both horizontally and vertically. If the required horizontal and vertical magnification factors are
    ///  different, use the smaller of the two, centering the page within the window in the other dimension.
    ///</summary>
    Fit = 1;
    ///<summary>
    ///  Display the page with the vertical coordinate top positioned at the top edge of the window and
    ///  the contents of the page magnified just enough to fit the entire width of the page within the window.
    ///  A null value for top specifies that the current value of that parameter is to be retained unchanged.
    ///</summary>
    FitH = 2;
    ///<summary>
    ///  Display the page with the horizontal coordinate left positioned at the left edge of the window
    ///  and the contents of the page magnified just enough to fit the entire height of the page within the window.
    ///  A null value for left specifies that the current value of that parameter is to be retained unchanged.
    ///</summary>
    FitV = 3;
    ///<summary>
    ///  Display the page with its contents magnified just enough to fit the rectangle specified by the
    ///  coordinates left, bottom, right, and topentirely within the window both horizontally and vertically.
    ///  If the required horizontal and vertical magnification factors are different, use the smaller of
    ///  the two, centering the rectangle within the window in the other dimension. A null value for any
    ///  of the parameters may result in unpredictable behavior.
    ///</summary>
    FitR = 4;
    ///<summary>
    ///  Display the page with its contents magnified just enough to fit its bounding box entirely within
    ///  the window both horizontally and vertically. If the required horizontal and vertical magnification
    ///  factors are different, use the smaller of the two, centering the bounding box within the window
    ///  in the other dimension.
    ///</summary>
    FitB = 5;
    ///<summary>
    ///  Display the page with the vertical coordinate top positioned at the top edge of the window and the
    ///  contents of the page magnified just enough to fit the entire width of its bounding box within the window.
    ///  A null value for top specifies that the current value of that parameter is to be retained unchanged.
    ///</summary>
    FitBH = 6;
    ///<summary>
    ///  Display the page with the horizontal coordinate left positioned at the left edge of the window and the
    ///  contents of the page magnified just enough to fit the entire height of its bounding box within the window.
    ///  A null value for left specifies that the current value of that parameter is to be retained unchanged.
    ///</summary>
    FitBV = 7;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  An icon to be used in displaying the annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FileIcon')]
  DNFileIcon = type Integer;
  DNFileIconHelper = record helper for DNFileIcon
  public const
    ///<summary>
    ///  PushPin icon (default value).
    ///</summary>
    PushPin = 0;
    ///<summary>
    ///  Graph icon.
    ///</summary>
    Graph = 1;
    ///<summary>
    ///  Paperclip icon.
    ///</summary>
    Paperclip = 2;
    ///<summary>
    ///  This is tag icon.
    ///</summary>
    Tag = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the intents of the free text annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FreeTextIntent')]
  DNFreeTextIntent = type Integer;
  DNFreeTextIntentHelper = record helper for DNFreeTextIntent
  public const
    ///<summary>
    ///  Not defined state.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  Means that the annotation is intended to function as a callout.
    ///</summary>
    FreeTextCallout = 1;
    ///<summary>
    ///  Means that the annotation is intended to function as a click-to-type or typewriter object.
    ///</summary>
    FreeTextTypeWriter = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the annotation�s highlighting mode, the visual effect to be used when the mouse button is pressed or held down inside its active area.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.HighlightingMode')]
  DNHighlightingMode = type Integer;
  DNHighlightingModeHelper = record helper for DNHighlightingMode
  public const
    ///<summary>
    ///  No highlighting.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Invert the contents of the annotation rectangle.
    ///</summary>
    Invert = 1;
    ///<summary>
    ///  Invert the annotation�s border.
    ///</summary>
    Outline = 2;
    ///<summary>
    ///  Display the annotation�s down appearance, if any. If no down appearance is defined, offset the contents of the annotation rectangle to appear as if it were being pushed below the surface of the page.
    ///</summary>
    Push = 3;
    ///<summary>
    ///  Same as Push (which is preferred).
    ///</summary>
    Toggle = 4;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the forms of quadding (justification) to be used in displaying the annotation�s text.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Justification')]
  DNJustification = type Integer;
  DNJustificationHelper = record helper for DNJustification
  public const
    ///<summary>
    ///  Left justification.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Center justification.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Right justification.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the operations to perform with document during launch action executing.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LaunchActionOperation')]
  DNLaunchActionOperation = type Integer;
  DNLaunchActionOperationHelper = record helper for DNLaunchActionOperation
  public const
    ///<summary>
    ///  Undefined state.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  Open a document.
    ///</summary>
    Open = 1;
    ///<summary>
    ///  Print a document.
    ///</summary>
    Print = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enum LightingSchemeType: set of lighting scheme types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LightingSchemeType')]
  DNLightingSchemeType = type Integer;
  DNLightingSchemeTypeHelper = record helper for DNLightingSchemeType
  public const
    ///<summary>
    ///  The "Artwork" lighting scheme.
    ///</summary>
    Artwork = 0;
    ///<summary>
    ///  The "None" lighting scheme.
    ///</summary>
    None = 1;
    ///<summary>
    ///  The "White" lighting scheme.
    ///</summary>
    White = 2;
    ///<summary>
    ///  The "Day" lighting scheme.
    ///</summary>
    Day = 3;
    ///<summary>
    ///  The "Night" lighting scheme.
    ///</summary>
    Night = 4;
    ///<summary>
    ///  The "Hard" lighting scheme.
    ///</summary>
    Hard = 5;
    ///<summary>
    ///  The "Primary" lighting scheme.
    ///</summary>
    Primary = 6;
    ///<summary>
    ///  The "Blue" lighting scheme.
    ///</summary>
    Blue = 7;
    ///<summary>
    ///  The "Red" lighting scheme.
    ///</summary>
    Red = 8;
    ///<summary>
    ///  The "Cube" lighting scheme.
    ///</summary>
    Cube = 9;
    ///<summary>
    ///  The "Cad" lighting scheme.
    ///</summary>
    CAD = 10;
    ///<summary>
    ///  The "Headlamp" lighting scheme.
    ///</summary>
    Headlamp = 11;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the line ending styles to be used in drawing the line.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LineEnding')]
  DNLineEnding = type Integer;
  DNLineEndingHelper = record helper for DNLineEnding
  public const
    ///<summary>
    ///  No line ending.
    ///</summary>
    None = 0;
    ///<summary>
    ///  A square filled with the annotation�s interior color, if any.
    ///</summary>
    Square = 1;
    ///<summary>
    ///  A circle filled with the annotation�s interior color, if any.
    ///</summary>
    Circle = 2;
    ///<summary>
    ///  A diamond shape filled with the annotation�s interior color, if any.
    ///</summary>
    Diamond = 3;
    ///<summary>
    ///  Two short lines meeting in an acute angle to form an open arrowhead.
    ///</summary>
    OpenArrow = 4;
    ///<summary>
    ///  Two short lines meeting in an acute angle as in the OpenArrow style and connected by a third line to form a triangular closed arrowhead filled with the annotation�s interior color, if any.
    ///</summary>
    ClosedArrow = 5;
    ///<summary>
    ///  A short line at the endpoint perpendicular to the line itself.
    ///</summary>
    Butt = 6;
    ///<summary>
    ///  Two short lines in the reverse direction from OpenArrow.
    ///</summary>
    ROpenArrow = 7;
    ///<summary>
    ///  A triangular closed arrowhead in the reverse direction from ClosedArrow.
    ///</summary>
    RClosedArrow = 8;
    ///<summary>
    ///  A short line at the endpoint approximately 30 degrees clockwise from perpendicular to the line itself.
    ///</summary>
    Slash = 9;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the intents of the line annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LineIntent')]
  DNLineIntent = type Integer;
  DNLineIntentHelper = record helper for DNLineIntent
  public const
    ///<summary>
    ///  Undefined state.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  Means that the annotation is intended to function as an arrow.
    ///</summary>
    LineArrow = 1;
    ///<summary>
    ///  Means that the annotation is intended to function as a dimension line.
    ///</summary>
    LineDimension = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Value which indicates in which manner fraction values are displayed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormat+FractionStyle')]
  DNNumberFormat_FractionStyle = type Integer;
  DNNumberFormat_FractionStyleHelper = record helper for DNNumberFormat_FractionStyle
  public const
    ///<summary>
    ///  Show fractional values as decimal fraction.
    ///</summary>
    ShowAsDecimal = 0;
    ///<summary>
    ///  Show fractional value as fraction.
    ///</summary>
    ShowAsFraction = 1;
    ///<summary>
    ///  Round fractional values to the nearest whole integer.
    ///</summary>
    Round = 2;
    ///<summary>
    ///  Truncate to achieve whole units.
    ///</summary>
    Truncate = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enum PDF3DActivation: set of 3D annotation activation mode.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DActivation')]
  DNPDF3DActivation = type Integer;
  DNPDF3DActivationHelper = record helper for DNPDF3DActivation
  public const
    ///<summary>
    ///  The active when open
    ///</summary>
    activeWhenOpen = 0;
    ///<summary>
    ///  The active when visible
    ///</summary>
    activeWhenVisible = 1;
    ///<summary>
    ///  The activated by user or script action
    ///</summary>
    activatedUserOrScriptAction = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the intents of the polygon or polyline annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PolyIntent')]
  DNPolyIntent = type Integer;
  DNPolyIntentHelper = record helper for DNPolyIntent
  public const
    ///<summary>
    ///  Undefined state.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  Means that the annotation is intended to function as a cloud object.
    ///</summary>
    PolygonCloud = 1;
    ///<summary>
    ///  Indicates that the polyline annotation is intended to function as a dimension.
    ///</summary>
    PolyLineDimension = 2;
    ///<summary>
    ///  Indicates that the polygon annotation is intended to function as a dimension.
    ///</summary>
    PolygonDimension = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Defines different actions which can be triggered from a PDF file.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PredefinedAction')]
  DNPredefinedAction = type Integer;
  DNPredefinedActionHelper = record helper for DNPredefinedAction
  public const
    ///<summary>
    ///  A named action to go to the first page.
    ///</summary>
    FirstPage = 0;
    ///<summary>
    ///  A named action to go to the last page.
    ///</summary>
    LastPage = 1;
    ///<summary>
    ///  A named action to go to the next page.
    ///</summary>
    NextPage = 2;
    ///<summary>
    ///  A named action to go to the previous page.
    ///</summary>
    PrevPage = 3;
    ///<summary>
    ///  A named action to open a print dialog (JavaScript).
    ///</summary>
    PrintDialog = 4;
    ///<summary>
    ///  A named action to open a print dialog.
    ///</summary>
    Print = 5;
    ///<summary>
    ///  A named action to find current bookmark.
    ///</summary>
    Bookmarks_ExpanCurrentBookmark = 6;
    ///<summary>
    ///  A named action to highlight current bookmark.
    ///</summary>
    Bookmarks_HightlightCurrentBookmark = 7;
    ///<summary>
    ///  A named action to add file attachment.
    ///</summary>
    Document_AttachFile = 8;
    ///<summary>
    ///  A named action to crop document pages.
    ///</summary>
    Document_CropPages = 9;
    ///<summary>
    ///  A named action to delete document pages.
    ///</summary>
    Document_DeletePages = 10;
    ///<summary>
    ///  A named action to exctract document pages.
    ///</summary>
    Document_ExtractPages = 11;
    ///<summary>
    ///  A named action to insert pages from a document.
    ///</summary>
    Document_InsertPages = 12;
    ///<summary>
    ///  A named action to replace document pages.
    ///</summary>
    Document_ReplacePages = 13;
    ///<summary>
    ///  A named action to rotate document pages.
    ///</summary>
    Document_RotatePages = 14;
    ///<summary>
    ///  A named action to check spelling in comments.
    ///</summary>
    Edit_CheckSpelling_InComFieldEdit = 15;
    ///<summary>
    ///  A named action to find.
    ///</summary>
    Edit_Find = 16;
    ///<summary>
    ///  A named action to edit preferences.
    ///</summary>
    Edit_Preferences = 17;
    ///<summary>
    ///  A named action for searching.
    ///</summary>
    Edit_Search = 18;
    ///<summary>
    ///  A named action for attaching current pdf document into email message.
    ///</summary>
    File_AttachToEmail = 19;
    ///<summary>
    ///  A named action to close the document.
    ///</summary>
    File_Close = 20;
    ///<summary>
    ///  A named action to create pdf document from scanner.
    ///</summary>
    File_CreatePDF_FromScanner = 21;
    ///<summary>
    ///  A named action to create pdf document from web page.
    ///</summary>
    File_CreatePDF_FromWebPage = 22;
    ///<summary>
    ///  A named action to exit pdf reader.
    ///</summary>
    File_Exit = 23;
    ///<summary>
    ///  A named action to open organizer.
    ///</summary>
    File_Organizer_OpenOrganizer = 24;
    ///<summary>
    ///  A named action to print the document.
    ///</summary>
    File_Print = 25;
    ///<summary>
    ///  A named action to open the document properties.
    ///</summary>
    File_Properties = 26;
    ///<summary>
    ///  A named action to save the document with another name.
    ///</summary>
    File_SaveAs = 27;
    ///<summary>
    ///  A named action to zoom in the document.
    ///</summary>
    Miscellaneous_ZoomIn = 28;
    ///<summary>
    ///  A named action to zoom out the document.
    ///</summary>
    Miscellaneous_ZoomOut = 29;
    ///<summary>
    ///  A named action to print the document pages.
    ///</summary>
    PageImages_PrintPages = 30;
    ///<summary>
    ///  A named action to go to the next view.
    ///</summary>
    View_GoTo_NextView = 31;
    ///<summary>
    ///  A named action to go to the certain page.
    ///</summary>
    View_GoTo_Page = 32;
    ///<summary>
    ///  A named action to go to the previous document.
    ///</summary>
    View_GoTo_PreDocument = 33;
    ///<summary>
    ///  A named action to go to the previous view.
    ///</summary>
    View_GoTo_PreView = 34;
    ///<summary>
    ///  A named action to show/hide articles panel.
    ///</summary>
    View_NavigationPanels_Articles = 35;
    ///<summary>
    ///  A named action to show/hide attachment panel.
    ///</summary>
    View_NavigationPanels_Attachments = 36;
    ///<summary>
    ///  A named action to show/hide bookmark panel.
    ///</summary>
    View_NavigationPanels_Boomarks = 37;
    ///<summary>
    ///  A named action to show/hide comments panel.
    ///</summary>
    View_NavigationPanels_Comments = 38;
    ///<summary>
    ///  A named action to show/hide fields panel.
    ///</summary>
    View_NavigationPanels_Fields = 39;
    ///<summary>
    ///  A named action to show/hide layers panel.
    ///</summary>
    View_NavigationPanels_Layers = 40;
    ///<summary>
    ///  A named action to show/hide model tree panel.
    ///</summary>
    View_NavigationPanels_ModelTree = 41;
    ///<summary>
    ///  A named action to show/hide pages panel.
    ///</summary>
    View_NavigationPanels_Pages = 42;
    ///<summary>
    ///  A named action to show/hide signatures panel.
    ///</summary>
    View_NavigationPanels_Signatures = 43;
    ///<summary>
    ///  A named action to display single page.
    ///</summary>
    View_PageDisplay_SinglePage = 44;
    ///<summary>
    ///  A named action to display single continious page.
    ///</summary>
    View_PageDisplay_SinglePageContinuous = 45;
    ///<summary>
    ///  A named action to display pages as Two-Up.
    ///</summary>
    View_PageDisplay_TwoUp = 46;
    ///<summary>
    ///  A named action to display pages as Two-Up continious.
    ///</summary>
    View_PageDisplay_TwoUpContinuous = 47;
    ///<summary>
    ///  A named action to show/hide advanced editing toolbar.
    ///</summary>
    View_Toolbars_AdvanceEditing = 48;
    ///<summary>
    ///  A named action to show/hide commenting toolbar.
    ///</summary>
    View_Toolbars_CommentMarkup = 49;
    ///<summary>
    ///  A named action to show/hide edit toolbar.
    ///</summary>
    View_Toolbars_Edit = 50;
    ///<summary>
    ///  A named action to show/hide file toolbar.
    ///</summary>
    View_Toolbars_File = 51;
    ///<summary>
    ///  A named action to show/hide find toolbar.
    ///</summary>
    View_Toolbars_Find = 52;
    ///<summary>
    ///  A named action to show/hide forms toolbar.
    ///</summary>
    View_Toolbars_Forms = 53;
    ///<summary>
    ///  A named action to show/hide measuring toolbar.
    ///</summary>
    View_Toolbars_Measuring = 54;
    ///<summary>
    ///  A named action to show/hide object data toolbar.
    ///</summary>
    View_Toolbars_ObjectData = 55;
    ///<summary>
    ///  A named action to show/hide page display toolbar.
    ///</summary>
    View_Toolbars_PageDisplay = 56;
    ///<summary>
    ///  A named action to show/hide navigation toolbar.
    ///</summary>
    View_Toolbars_PageNavigation = 57;
    ///<summary>
    ///  A named action to show/hide print production toolbar.
    ///</summary>
    View_Toolbars_PrintProduction = 58;
    ///<summary>
    ///  A named action to show/hide property toolbar.
    ///</summary>
    View_Toolbars_PropertiesBar = 59;
    ///<summary>
    ///  A named action to show/hide redaction toolbar.
    ///</summary>
    View_Toolbars_Redaction = 60;
    ///<summary>
    ///  A named action to show/hide select &amp; zoom toolbar.
    ///</summary>
    View_Toolbars_SelectZoom = 61;
    ///<summary>
    ///  A named action to show/hide tasks toolbar.
    ///</summary>
    View_Toolbars_Tasks = 62;
    ///<summary>
    ///  A named action to show/hide typewriter toolbar.
    ///</summary>
    View_Toolbars_Typewriter = 63;
    ///<summary>
    ///  A named action to view pages in actual size.
    ///</summary>
    View_Zoom_ActualSize = 64;
    ///<summary>
    ///  A named action to fit page on height.
    ///</summary>
    View_Zoom_FitHeight = 65;
    ///<summary>
    ///  A named action to fit page.
    ///</summary>
    View_Zoom_FitPage = 66;
    ///<summary>
    ///  A named action to fit page visibility.
    ///</summary>
    View_Zoom_FitVisible = 67;
    ///<summary>
    ///  A named action to fit page on width.
    ///</summary>
    View_Zoom_FitWidth = 68;
    ///<summary>
    ///  A named action to make zoom.
    ///</summary>
    View_Zoom_ZoomTo = 69;
    ///<summary>
    ///  A named action to view the document in the full screen mode.
    ///</summary>
    Window_FullScreenMode = 70;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enum RenderModeType: set of render mode types
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RenderModeType')]
  DNRenderModeType = type Integer;
  DNRenderModeTypeHelper = record helper for DNRenderModeType
  public const
    ///<summary>
    ///  The "Solid" render mode.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  The "SolidWireFrame" render mode.
    ///</summary>
    SolidWireframe = 1;
    ///<summary>
    ///  The "Transparent" render mode.
    ///</summary>
    Transparent = 2;
    ///<summary>
    ///  The "TransparentWareFrame" render mode.
    ///</summary>
    TransparentWareFrame = 3;
    ///<summary>
    ///  The "BoundingBox" render mode.
    ///</summary>
    BoundingBox = 4;
    ///<summary>
    ///  The "TransparentBoundingBox" render mode.
    ///</summary>
    TransparentBoundingBox = 5;
    ///<summary>
    ///  The "TransparentBoundingBoxOutline" render mode.
    ///</summary>
    TransparentBoundingBoxOutline = 6;
    ///<summary>
    ///  The "WireFrame" render mode.
    ///</summary>
    Wireframe = 7;
    ///<summary>
    ///  The "ShadedWireFrame" render mode.
    ///</summary>
    ShadedWireframe = 8;
    ///<summary>
    ///  The "Vertices" render mode.
    ///</summary>
    Vertices = 9;
    ///<summary>
    ///  The "ShadedVertices" render mode.
    ///</summary>
    ShadedVertices = 10;
    ///<summary>
    ///  The "Illustration" render mode.
    ///</summary>
    Illustration = 11;
    ///<summary>
    ///  The "SolidOutline" render mode.
    ///</summary>
    SolidOutline = 12;
    ///<summary>
    ///  The "ShadedIllustration" render mode.
    ///</summary>
    ShadedIllustration = 13;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  The operation to perform when the action is triggered.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RenditionOperation')]
  DNRenditionOperation = type Integer;
  DNRenditionOperationHelper = record helper for DNRenditionOperation
  public const
    ///<summary>
    ///  If no rendition is associated with the annotation, play the specified rendition, associating it with the annotation. If a rendition is already associated with the annotation, it shall be stopped, and the new rendition shall be associated with the annotation.
    ///</summary>
    PlayStop = 0;
    ///<summary>
    ///  Stop any rendition being played in association with the annotation.
    ///</summary>
    Stop = 1;
    ///<summary>
    ///  Pause any rendition being played in association with the annotation.
    ///</summary>
    Pause = 2;
    ///<summary>
    ///  Resume any rendition being played in association with the annotation.
    ///</summary>
    Resume = 3;
    ///<summary>
    ///  Play the specified rendition, associating it with the annotation. If a rendition is already associated with the annotation, resume the rendition if it is paused.
    ///</summary>
    PlayResume = 4;
    ///<summary>
    ///  Operation not defined.
    ///</summary>
    Undefined = -1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumeration describes possible types of Rendition.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RenditionType')]
  DNRenditionType = type Integer;
  DNRenditionTypeHelper = record helper for DNRenditionType
  public const
    ///<summary>
    ///  Media rendition object.
    ///</summary>
    Media = 0;
    ///<summary>
    ///  Selector rendition object.
    ///</summary>
    Selector = 1;
    ///<summary>
    ///  Rendition type is undefined.
    ///</summary>
    Undefined = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the kinds of the relationships (the “reply type”) between the annotation and one specified by InReplyTo.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ReplyType')]
  DNReplyType = type Integer;
  DNReplyTypeHelper = record helper for DNReplyType
  public const
    ///<summary>
    ///  Undefined relationship.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  The annotation is considered a reply to the annotation specified by InReplyTo. Viewer applications should not display replies to an annotation individually but together in the form of threaded comments.
    ///</summary>
    Reply = 1;
    ///<summary>
    ///  The annotation is grouped with the annotation specified by InReplyTo.
    ///</summary>
    Group = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Event which activates annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation+ActivationEvent')]
  DNRichMediaAnnotation_ActivationEvent = type Integer;
  DNRichMediaAnnotation_ActivationEventHelper = record helper for DNRichMediaAnnotation_ActivationEvent
  public const
    ///<summary>
    ///  Activated by click on the annotation.
    ///</summary>
    Click = 0;
    ///<summary>
    ///  Activated on page open.
    ///</summary>
    PageOpen = 1;
    ///<summary>
    ///  Activated when page becames visible.
    ///</summary>
    PageVisible = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Type of the multimedia.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation+ContentType')]
  DNRichMediaAnnotation_ContentType = type Integer;
  DNRichMediaAnnotation_ContentTypeHelper = record helper for DNRichMediaAnnotation_ContentType
  public const
    ///<summary>
    ///  Audio data.
    ///</summary>
    Audio = 0;
    ///<summary>
    ///  Video data.
    ///</summary>
    Video = 1;
    ///<summary>
    ///  Unknown/unsupported type of data.
    ///</summary>
    Unknown = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  The encoding format for the sample data.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundEncoding')]
  DNSoundEncoding = type Integer;
  DNSoundEncodingHelper = record helper for DNSoundEncoding
  public const
    ///<summary>
    ///  Unspecified or unsigned values in the range 0 to 2^bits − 1.
    ///</summary>
    Raw = 0;
    ///<summary>
    ///  Twos-complement values.
    ///</summary>
    Signed = 1;
    ///<summary>
    ///  μ-law–encoded samples.
    ///</summary>
    MuLaw = 2;
    ///<summary>
    ///  A-law–encoded samples.
    ///</summary>
    ALaw = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the icons to be used in displaying the annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundIcon')]
  DNSoundIcon = type Integer;
  DNSoundIconHelper = record helper for DNSoundIcon
  public const
    ///<summary>
    ///  Speaker icon.
    ///</summary>
    Speaker = 0;
    ///<summary>
    ///  Microphone icon.
    ///</summary>
    Mic = 1;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  The encoding format for the sound sample data.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundSampleDataEncodingFormat')]
  DNSoundSampleDataEncodingFormat = type Integer;
  DNSoundSampleDataEncodingFormatHelper = record helper for DNSoundSampleDataEncodingFormat
  public const
    ///<summary>
    ///  Unspecified or unsigned values in the range 0 to 2B − 1.
    ///</summary>
    Raw = 0;
    ///<summary>
    ///  Twos-complement values.
    ///</summary>
    Signed = 1;
    ///<summary>
    ///  μ-law–encoded samples.
    ///</summary>
    muLaw = 2;
    ///<summary>
    ///  A-law–encoded samples.
    ///</summary>
    ALaw = 3;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the icons to be used in displaying the annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.StampIcon')]
  DNStampIcon = type Integer;
  DNStampIconHelper = record helper for DNStampIcon
  public const
    ///<summary>
    ///  Draft stamp icon.
    ///</summary>
    Draft = 0;
    ///<summary>
    ///  Approved stamp icon.
    ///</summary>
    Approved = 1;
    ///<summary>
    ///  Experimental stamp icon.
    ///</summary>
    Experimental = 2;
    ///<summary>
    ///  Stamp icon is not approved.
    ///</summary>
    NotApproved = 3;
    ///<summary>
    ///  Stamp icon "as is".
    ///</summary>
    AsIs = 4;
    ///<summary>
    ///  Stamp icon is expired.
    ///</summary>
    Expired = 5;
    ///<summary>
    ///  Not for public release.
    ///</summary>
    NotForPublicRelease = 6;
    ///<summary>
    ///  Confidential.
    ///</summary>
    Confidential = 7;
    ///<summary>
    ///  Final stamp.
    ///</summary>
    Final_ = 8;
    ///<summary>
    ///  Sold   stamp.
    ///</summary>
    Sold = 9;
    ///<summary>
    ///  Departamental.
    ///</summary>
    Departmental = 10;
    ///<summary>
    ///  For comment.
    ///</summary>
    ForComment = 11;
    ///<summary>
    ///  For public release.
    ///</summary>
    ForPublicRelease = 12;
    ///<summary>
    ///  Top secret.
    ///</summary>
    TopSecret = 13;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Alignment of text in annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.TextAlignment')]
  DNTextAlignment = type Integer;
  DNTextAlignmentHelper = record helper for DNTextAlignment
  public const
    ///<summary>
    ///  Text is aligned to left.
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Text is centered.
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Text is aligned to right.
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Enumerates the icons to be used in displaying the annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.TextIcon')]
  DNTextIcon = type Integer;
  DNTextIconHelper = record helper for DNTextIcon
  public const
    ///<summary>
    ///  Note icon.
    ///</summary>
    Note = 0;
    ///<summary>
    ///  Comment icon.
    ///</summary>
    Comment = 1;
    ///<summary>
    ///  Key    icon.
    ///</summary>
    Key = 2;
    ///<summary>
    ///  Help icon.
    ///</summary>
    Help = 3;
    ///<summary>
    ///  NewParagraph icon.
    ///</summary>
    NewParagraph = 4;
    ///<summary>
    ///  Paragraph icon.
    ///</summary>
    Paragraph = 5;
    ///<summary>
    ///  Insert icon.
    ///</summary>
    Insert = 6;
    ///<summary>
    ///  Check icon.
    ///</summary>
    Check = 7;
    ///<summary>
    ///  Cross icon.
    ///</summary>
    Cross = 8;
    ///<summary>
    ///  Circle icon.
    ///</summary>
    Circle = 9;
    ///<summary>
    ///  Star icon.
    ///</summary>
    Star = 10;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration of possible artifacts subtype.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Artifact+ArtifactSubtype')]
  DNArtifact_ArtifactSubtype = type Integer;
  DNArtifact_ArtifactSubtypeHelper = record helper for DNArtifact_ArtifactSubtype
  public const
    ///<summary>
    ///  Header artifact.
    ///</summary>
    Header = 0;
    ///<summary>
    ///  Footer artifact.
    ///</summary>
    Footer = 1;
    ///<summary>
    ///  Watermark artifact.
    ///</summary>
    Watermark = 2;
    ///<summary>
    ///  Background artifact.
    ///</summary>
    Background = 3;
    ///<summary>
    ///  Artifact subtype is not defined or unknown.
    ///</summary>
    Undefined = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration of possuble artifact types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Artifact+ArtifactType')]
  DNArtifact_ArtifactType = type Integer;
  DNArtifact_ArtifactTypeHelper = record helper for DNArtifact_ArtifactType
  public const
    ///<summary>
    ///  Pagination artifacts. Ancillary page features such as running heads and folios (page numbers).
    ///</summary>
    Pagination = 0;
    ///<summary>
    ///  Layout artifacts. Purely cosmetic typographical or design elements such as footnote rules or background screens.
    ///</summary>
    Layout = 1;
    ///<summary>
    ///  Page artifacts. Production aids extraneous to the document itself, such as cut marks and colour bars.
    ///</summary>
    Page = 2;
    ///<summary>
    ///  Background artifacts. Images, patterns or coloured blocks.
    ///</summary>
    Background = 3;
    ///<summary>
    ///  Artifact type is not defined or unknown.
    ///</summary>
    Undefined = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  The blend modes enumeration.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BlendMode')]
  DNBlendMode = type Integer;
  DNBlendModeHelper = record helper for DNBlendMode
  public const
    ///<summary>
    ///  Normal blend mode.
    ///</summary>
    Normal = 0;
    ///<summary>
    ///  Multiply blend mode.
    ///</summary>
    Multiply = 1;
    ///<summary>
    ///  Screen blend mode.
    ///</summary>
    Screen = 2;
    ///<summary>
    ///  Overlay blend mode.
    ///</summary>
    Overlay = 3;
    ///<summary>
    ///  Darken blend mode.
    ///</summary>
    Darken = 4;
    ///<summary>
    ///  Lighten blend mode.
    ///</summary>
    Lighten = 5;
    ///<summary>
    ///  ColorDodge blend mode.
    ///</summary>
    ColorDodge = 6;
    ///<summary>
    ///  ColorBurn blend mode.
    ///</summary>
    ColorBurn = 7;
    ///<summary>
    ///  HardLight blend mode.
    ///</summary>
    HardLight = 8;
    ///<summary>
    ///  SoftLight blend mode.
    ///</summary>
    SoftLight = 9;
    ///<summary>
    ///  Difference blend mode.
    ///</summary>
    Difference = 10;
    ///<summary>
    ///  Exclusion blend mode.
    ///</summary>
    Exclusion = 11;
    ///<summary>
    ///  Hue blend mode.
    ///</summary>
    Hue = 12;
    ///<summary>
    ///  Saturation blend mode.
    ///</summary>
    Saturation = 13;
    ///<summary>
    ///  Color blend mode.
    ///</summary>
    Color = 14;
    ///<summary>
    ///  Luminosity blend mode.
    ///</summary>
    Luminosity = 15;
    ///<summary>
    ///  Compatible blend mode.
    ///</summary>
    Compatible = 16;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates the border corner styles for border.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BorderCornerStyle')]
  DNBorderCornerStyle = type Integer;
  DNBorderCornerStyleHelper = record helper for DNBorderCornerStyle
  public const
    ///<summary>
    ///  None border style.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Round border style.
    ///</summary>
    Round = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates the border sides.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BorderSide')]
  DNBorderSide = type Integer;
  DNBorderSideHelper = record helper for DNBorderSide
  public const
    ///<summary>
    ///  No border.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Left border.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Top border.
    ///</summary>
    Top = 2;
    ///<summary>
    ///  Right border.
    ///</summary>
    Right = 4;
    ///<summary>
    ///  Bottom border.
    ///</summary>
    Bottom = 8;
    ///<summary>
    ///  All sides borders.It has the same meaning when useing "Box" and will be replaced by "Box" one year later. So, please use "Box" if possible.
    ///</summary>
    All = 15;
    ///<summary>
    ///  Four sides borders.
    ///</summary>
    Box = 15;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  The color spaces enumeration.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ColorSpace')]
  DNColorSpace = type Integer;
  DNColorSpaceHelper = record helper for DNColorSpace
  public const
    ///<summary>
    ///  The device-dependent RGB color space.
    ///</summary>
    DeviceRGB = 0;
    ///<summary>
    ///  The device-dependent CMYK color space.
    ///</summary>
    DeviceCMYK = 1;
    ///<summary>
    ///  The device-dependent gray color space.
    ///</summary>
    DeviceGray = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Specifies color type of elements on page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ColorType')]
  DNColorType = type Integer;
  DNColorTypeHelper = record helper for DNColorType
  public const
    ///<summary>
    ///  RGB color type.
    ///</summary>
    Rgb = 0;
    ///<summary>
    ///  Grayscale color type.
    ///</summary>
    Grayscale = 1;
    ///<summary>
    ///  Black and white color type.
    ///</summary>
    BlackAndWhite = 2;
    ///<summary>
    ///  Undefined color type value.
    ///</summary>
    Undefined = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates column adjustment types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ColumnAdjustment')]
  DNColumnAdjustment = type Integer;
  DNColumnAdjustmentHelper = record helper for DNColumnAdjustment
  public const
    ///<summary>
    ///  Customized.
    ///</summary>
    Customized = 0;
    ///<summary>
    ///  Auto fit to content.
    ///</summary>
    AutoFitToContent = 1;
    ///<summary>
    ///  Auto fit to window.
    ///</summary>
    AutoFitToWindow = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  MIME protocol Content-Disposition header.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ContentDisposition')]
  DNContentDisposition = type Integer;
  DNContentDispositionHelper = record helper for DNContentDisposition
  public const
    ///<summary>
    ///  Result is shown inline.
    ///</summary>
    Inline_ = 0;
    ///<summary>
    ///  Result is saved as attachment.
    ///</summary>
    Attachment = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This class represents action for conversion errors.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ConvertErrorAction')]
  DNConvertErrorAction = type Integer;
  DNConvertErrorActionHelper = record helper for DNConvertErrorAction
  public const
    ///  Delete convert errors
    Delete = 0;
    ///  Do nothing with convert errors
    None = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This action represents actions for conversion of images with soft mask.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ConvertSoftMaskAction')]
  DNConvertSoftMaskAction = type Integer;
  DNConvertSoftMaskActionHelper = record helper for DNConvertSoftMaskAction
  public const
    ///<summary>
    ///  Use default strategy.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Soft mask will be converted into stencil mask.
    ///</summary>
    ConvertToStencilMask = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This class represents action for conversion of transparency.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ConvertTransparencyAction')]
  DNConvertTransparencyAction = type Integer;
  DNConvertTransparencyActionHelper = record helper for DNConvertTransparencyAction
  public const
    ///<summary>
    ///  Use default strategy, no adding masks.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Add transparent mask image.
    ///</summary>
    Mask = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Represent type of cryptographic algorithm that used in encryption/decryption routines.
  ///</summary>
  [DNTypeName('Aspose.Pdf.CryptoAlgorithm')]
  DNCryptoAlgorithm = type Integer;
  DNCryptoAlgorithmHelper = record helper for DNCryptoAlgorithm
  public const
    ///<summary>
    ///  RC4 with key length 40.
    ///</summary>
    RC4x40 = 0;
    ///<summary>
    ///  RC4 with key length 128.
    ///</summary>
    RC4x128 = 1;
    ///<summary>
    ///  AES with key length 128.
    ///</summary>
    AESx128 = 2;
    ///<summary>
    ///  AES with key length 256.
    ///</summary>
    AESx256 = 3;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  ///<summary>
  ///  Used to specify the parameter value passed to a Tiff image device.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.ColorDepth')]
  DNColorDepth = type Integer;
  DNColorDepthHelper = record helper for DNColorDepth
  public const
    ///<summary>
    ///  Default color depth.
    ///  32 bit depth is used by default.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  8 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format8bppIndexed" />
    ///</summary>
    Format8bpp = 1;
    ///<summary>
    ///  4 bits per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format4bppIndexed" />
    ///</summary>
    Format4bpp = 2;
    ///<summary>
    ///  1 bit per pixel. Equal <see cref="F:System.Drawing.Imaging.PixelFormat.Format32bppRgb" />
    ///</summary>
    Format1bpp = 3;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  ///<summary>
  ///  Used to specify the parameter value passed to a Tiff image device.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.CompressionType')]
  DNCompressionType = type Integer;
  DNCompressionTypeHelper = record helper for DNCompressionType
  public const
    ///<summary>
    ///  Specifies the LZW compression scheme. Can be passed to the Tiff encoder as a parameter that belongs to the Compression category.
    ///</summary>
    LZW = 0;
    ///<summary>
    ///  Specifies the CCITT4 compression scheme. Can be passed to the CCITT4 encoder as a parameter that belongs to the Compression category.
    ///</summary>
    CCITT4 = 1;
    ///<summary>
    ///  Specifies the CCITT3 compression scheme. Can be passed to the CCITT3 encoder as a parameter that belongs to the Compression category.
    ///</summary>
    CCITT3 = 2;
    ///<summary>
    ///  Specifies the RLE compression scheme. Can be passed to the RLE encoder as a parameter that belongs to the Compression category.
    ///</summary>
    RLE = 3;
    ///<summary>
    ///  Specifies no compression. Can be passed to the Tiff encoder as a parameter that belongs to the compression category.
    ///</summary>
    None = 4;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  ///<summary>
  ///  Used to specify the form presentation mode when printing or converting to image pdf documents.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.FormPresentationMode')]
  DNFormPresentationMode = type Integer;
  DNFormPresentationModeHelper = record helper for DNFormPresentationMode
  public const
    ///<summary>
    ///  Specifies Production form presentation mode (used by default).
    ///</summary>
    Production = 0;
    ///<summary>
    ///  Specifies Editor form presentation mode.
    ///</summary>
    ///<remarks>
    ///  The Editor mode is used by some products to display forms.
    ///  In Editor mode some form elements are displayed as they are shown in form designer.
    ///</remarks>
    Editor = 1;
  end;


  //-------------namespace: Aspose.Pdf.Devices----------------
  ///<summary>
  ///  This enum represents shape type for the extracted images.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.ShapeType')]
  DNShapeType = type Integer;
  DNShapeTypeHelper = record helper for DNShapeType
  public const
    ///<summary>
    ///  Original image shape.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Landscape Shape.
    ///</summary>
    Landscape = 1;
    ///<summary>
    ///  Portrait Shape.
    ///</summary>
    Portrait = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Text direction.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Direction')]
  DNDirection = type Integer;
  DNDirectionHelper = record helper for DNDirection
  public const
    ///<summary>
    ///  Left to right direction.
    ///</summary>
    L2R = 0;
    ///<summary>
    ///  Right to left direction.
    ///</summary>
    R2L = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Allows to specify .doc or .docx file format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.DocSaveOptions+DocFormat')]
  DNDocSaveOptions_DocFormat = type Integer;
  DNDocSaveOptions_DocFormatHelper = record helper for DNDocSaveOptions_DocFormat
  public const
    ///<summary>
    ///  [MS-DOC]: Word (.doc) Binary File Format
    ///</summary>
    Doc = 0;
    ///<summary>
    ///  Office Open XML (.docx) File Format
    ///</summary>
    DocX = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Allows to control how a PDF document is converted into a word processing document.
  ///</summary>
  ///<remarks><para>Use the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Textbox" />
  ///  mode when the resulting document is not goining
  ///  to be heavily edited futher. Textboxes are easy to modify when there is not a lot to do.</para><para>Use the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Flow" />
  ///  mode when the output document needs further editing.
  ///  Paragraphs and texlines in the flow mode allow easy modification of text, but unupported
  ///  formatting objects will look worse than in the <see cref="F:Aspose.Pdf.DocSaveOptions.RecognitionMode.Textbox" />
  ///  mode.</para></remarks>
  [DNTypeName('Aspose.Pdf.DocSaveOptions+RecognitionMode')]
  DNDocSaveOptions_RecognitionMode = type Integer;
  DNDocSaveOptions_RecognitionModeHelper = record helper for DNDocSaveOptions_RecognitionMode
  public const
    ///<summary><para>This mode is fast and good for maximally preserving original look of the PDF file,
    ///  but editability of the resulting document could be limited.</para><para>Every visually grouped block of text int the original PDF file is converted into a textbox
    ///  in the resulting document. This achieves maximal resemblance of the output document to the original
    ///  PDF file. The output document will look good, but it will consist entirely of textboxes and it
    ///  could makes further editing of the document in Microsoft Word quite hard.</para><para>This is the default mode.</para></summary>
    Textbox = 0;
    ///<summary>
    ///  Full recognition mode, the engine performs grouping and multi-level analysis to restore
    ///  the original document author's intent and produce a maximally editable document.
    ///  The downside is that the output document might look different from the original PDF file.
    ///</summary>
    Flow = 1;
    ///<summary>
    ///  An early alfa version of a new Flow mode supporting recognition of tables.
    ///</summary>
    EnhancedFlow = 2;
  end;


  //-------------namespace: Aspose.Pdf.Drawing----------------
  ///<summary>
  ///  This enum represents image formats.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.ImageFormat')]
  DNImageFormat = type Integer;
  DNImageFormatHelper = record helper for DNImageFormat
  public const
    Bmp = 0;
    Jpeg = 1;
    Gif = 2;
    Png = 3;
    Tiff = 4;
    Emf = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  When PDF file (that usually has fixed layout) is being converted,
  ///  the conversion engine tries to perform grouping and multi-level analysis to restore
  ///  the original document author's intent and produce result in flow layout.
  ///  This property tunes that conversion for this or that
  ///  desirable method of recognition of content.
  ///</summary>
  [DNTypeName('Aspose.Pdf.EpubSaveOptions+RecognitionMode')]
  DNEpubSaveOptions_RecognitionMode = type Integer;
  DNEpubSaveOptions_RecognitionModeHelper = record helper for DNEpubSaveOptions_RecognitionMode
  public const
    ///<summary>
    ///  Full recognition mode, the engine tries to perform grouping and multi-level analysis to restore
    ///  the original document author's intent and produce xhtml in flow layout.
    ///</summary>
    Flow = 0;
    ///<summary>
    ///  The main idea of this conversion is based on saving "natural" order of content rendering that is formed during processing of pdf documents.
    ///  In the general cases pdf documents keep top-down\left-right rendering order (see attachment directions.png). This assumption allows to
    ///  create a single-path algorithm that will transform Aps elements that have positions (fixed-layout) into flow formats like HTML,EPUB,DOC.
    ///  This mode will be especially useful for converting from PDF(APS) into EPUB, because the EPUB format was developed for e-readers like the Kindle or
    ///  smart-phones. The size of screen those devices usually is less than the size of screen of ordinary PC. Therefore the content of EPUB documents is better to save
    ///  in the flow format, for correct rendering on screens with different sizes.
    ///  In this mode every column will be added to the end of previous column this allows to keep the logical structure of transformed document
    ///  during "pagination" in EPUB readers. This achievement allows correctly render scientific or magazine articles.
    ///</summary>
    PdfFlow = 1;
    ///<summary>
    ///  This mode is fast and good for maximally preserving the original look pages,
    ///  but unfortunately many EPUB readeres don't support xhtml with fixed layout
    ///</summary>
    Fixed = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates conversion engines that can be used for conversion
  ///  Default value is NewEngine
  ///</summary>
  [DNTypeName('Aspose.Pdf.ExcelSaveOptions+ConversionEngines')]
  DNExcelSaveOptions_ConversionEngines = type Integer;
  DNExcelSaveOptions_ConversionEnginesHelper = record helper for DNExcelSaveOptions_ConversionEngines
  public const
    ///<summary>
    ///  Legacy conversion engine is deprecated.
    ///</summary>
    LegacyEngine = 0;
    ///<summary>
    ///  The new conversion engine. Used by default.
    ///</summary>
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Allows to specify .xlsx, .xls/xml or csv file format.
  ///  Default value is XLSX;
  ///</summary>
  [DNTypeName('Aspose.Pdf.ExcelSaveOptions+ExcelFormat')]
  DNExcelSaveOptions_ExcelFormat = type Integer;
  DNExcelSaveOptions_ExcelFormatHelper = record helper for DNExcelSaveOptions_ExcelFormat
  public const
    ///<summary>
    ///  Excel 2003 XML Format
    ///</summary>
    XMLSpreadSheet2003 = 0;
    ///<summary>
    ///  Office Open XML (.xlsx) File Format
    ///</summary>
    XLSX = 1;
    ///<summary>
    ///  A comma-separated values (CSV) File Format
    ///</summary>
    CSV = 2;
    ///<summary>
    ///  A macro-enabled Office Open XML (.xlsm) File Format
    ///</summary>
    XLSM = 3;
    ///<summary>
    ///  OpenDocument Spreadsheet
    ///</summary>
    ODS = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Represents boolean type that supports Undefined value.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ExtendedBoolean')]
  DNExtendedBoolean = type Integer;
  DNExtendedBooleanHelper = record helper for DNExtendedBoolean
  public const
    ///<summary>
    ///  Undefined value value of ExtendnedBoolean.
    ///</summary>
    Undefined = 0;
    ///<summary>
    ///  False value of ExtendnedBoolean.
    ///</summary>
    False = 1;
    ///<summary>
    ///  True value of ExtendnedBoolean.
    ///</summary>
    True = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Defines different modes which can be used while extracting images from documents.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ExtractImageMode')]
  DNExtractImageMode = type Integer;
  DNExtractImageModeHelper = record helper for DNExtractImageMode
  public const
    ///<summary>
    ///  Defines image extraction mode in which all images defined in resources for particular page are extracted.
    ///</summary>
    DefinedInResources = 0;
    ///<summary>
    ///  Defines image extraction mode in which only those images are extracted that are actually shown on a page.
    ///</summary>
    ActuallyUsed = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Represents algorithms which can be used to encrypt pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Algorithm')]
  DNAlgorithm = type Integer;
  DNAlgorithmHelper = record helper for DNAlgorithm
  public const
    ///<summary>
    ///  RC4 algorithm.
    ///</summary>
    RC4 = 0;
    ///<summary>
    ///  AES algorithm.
    ///</summary>
    AES = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Direction of the rotation when document is printed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.AutoRotateMode')]
  DNAutoRotateMode = type Integer;
  DNAutoRotateModeHelper = record helper for DNAutoRotateMode
  public const
    ///<summary>
    ///  No rotation.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Rotation direction is clockwise.
    ///</summary>
    ClockWise = 1;
    ///<summary>
    ///  Rotation directon is counterclockwise.
    ///</summary>
    AntiClockWise = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Class represents blending color space.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.BlendingColorSpace')]
  DNBlendingColorSpace = type Integer;
  DNBlendingColorSpaceHelper = record helper for DNBlendingColorSpace
  public const
    ///<summary>
    ///  The blending color space is not changed.
    ///</summary>
    DontChange = 0;
    ///<summary>
    ///  The blending color space is determined automatically.
    ///</summary>
    Auto = 1;
    ///<summary>
    ///  Blending color space is set to DeviceRGB.
    ///</summary>
    DeviceRGB = 2;
    ///<summary>
    ///  Blending color space is set to DeviceCMYK.
    ///</summary>
    DeviceCMYK = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumerates field types definitions.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.DataType')]
  DNDataType = type Integer;
  DNDataTypeHelper = record helper for DNDataType
  public const
    ///<summary>
    ///  FDF stream.
    ///</summary>
    FDF = 0;
    ///<summary>
    ///  XML stream.
    ///</summary>
    XML = 1;
    ///<summary>
    ///  XFDF stream.
    ///</summary>
    XFDF = 2;
    ///<summary>
    ///  PDF stream.
    ///</summary>
    PDF = 3;
    ///<summary>
    ///  OLEDB database, such as MS Access.
    ///</summary>
    OLEDB = 4;
    ///<summary>
    ///  ODBC database, such as MS SQL Server.
    ///</summary>
    ODBC = 5;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumeration of standard XMP properties.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.DefaultMetadataProperties')]
  DNDefaultMetadataProperties = type Integer;
  DNDefaultMetadataPropertiesHelper = record helper for DNDefaultMetadataProperties
  public const
    ///<summary>
    ///  xmp:Advisory property.
    ///  An unordered array specifying properties that were edited outside the authoring application. Each item should contain a single          /// namespace and XPath separated by one ASCII space
    ///</summary>
    Advisory = 0;
    ///<summary>
    ///  xmp:BaseURL property.
    ///  The base URL for relative URLs in the document content. If this document contains Internet links, and those links are relative,          /// they are relative to this base URL. This property provides a standard way for embedded relative URLs to be interpreted by tools.        /// Web authoring tools should set the value based on their notion of where URLs will be interpreted
    ///</summary>
    BaseURL = 1;
    ///<summary>
    ///  xmp:CreateDate property.
    ///  The date and time the resource was originally created.
    ///</summary>
    CreateDate = 2;
    ///<summary>
    ///  xmp:CreatorTool property.
    ///  The name of the first known tool used to create the resource.
    ///</summary>
    CreatorTool = 3;
    ///<summary>
    ///  xmp:Identifier property.
    ///  An unordered array of text strings that unambiguously
    ///  identify the resource within a given context
    ///</summary>
    Identifier = 4;
    ///<summary>
    ///  xmp:MetadataDate property.
    ///  The date and time that any metadata for this resource
    ///  was last changed
    ///</summary>
    MetadataDate = 5;
    ///<summary>
    ///  xmp:ModifyDate property.
    ///  The date and time the resource was last modified.
    ///</summary>
    ModifyDate = 6;
    ///<summary>
    ///  xmp:Nickname property.
    ///  A short informal name for the resource.
    ///</summary>
    Nickname = 7;
    ///<summary>
    ///  xmp:Thumbnails property.
    ///  An alternative array of thumbnail images for a file,
    ///  which can differ in characteristics such as size or image
    ///  encoding.
    ///</summary>
    Thumbnails = 8;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumerates encoding types of the text using.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.EncodingType')]
  DNEncodingType = type Integer;
  DNEncodingTypeHelper = record helper for DNEncodingType
  public const
    ///<summary>
    ///  The Unicode encoding with horizontal writing.
    ///</summary>
    Identity_h = 0;
    ///<summary>
    ///  The Unicode encoding with vertical writing.
    ///</summary>
    Identity_v = 1;
    ///<summary>
    ///  A windows text encoding name.
    ///</summary>
    Cp1250 = 2;
    ///<summary>
    ///  A windows text encoding name.
    ///</summary>
    Cp1252 = 3;
    ///<summary>
    ///  A windows text encoding name.
    ///</summary>
    Cp1257 = 4;
    ///<summary>
    ///  Windows ansi encoding.
    ///</summary>
    Winansi = 5;
    ///<summary>
    ///  Mac os standard encoding for Latin text.
    ///</summary>
    Macroman = 6;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumeration of possible field types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FieldType')]
  DNFieldType = type Integer;
  DNFieldTypeHelper = record helper for DNFieldType
  public const
    ///<summary>
    ///  Text field.
    ///</summary>
    Text = 0;
    ///<summary>
    ///  Combo box field.
    ///</summary>
    ComboBox = 1;
    ///<summary>
    ///  List box field.
    ///</summary>
    ListBox = 2;
    ///<summary>
    ///  Radio button field.
    ///</summary>
    Radio = 3;
    ///<summary>
    ///  Check box field.
    ///</summary>
    CheckBox = 4;
    ///<summary>
    ///  Push button field.
    ///</summary>
    PushButton = 5;
    ///<summary>
    ///  Multiline text field.
    ///</summary>
    MultiLineText = 6;
    ///<summary>
    ///  Barcode field.
    ///</summary>
    Barcode = 7;
    ///<summary>
    ///  Invalid field type.
    ///</summary>
    InvalidNameOrType = 8;
    ///<summary>
    ///  Signature field.
    ///</summary>
    Signature = 9;
    ///<summary>
    ///  Image field.
    ///</summary>
    Image = 10;
    ///<summary>
    ///  Numeric field
    ///</summary>
    Numeric = 11;
    ///<summary>
    ///  Date/time field
    ///</summary>
    DateTime = 12;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumerates 14 types of font.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FontStyle')]
  DNFontStyle = type Integer;
  DNFontStyleHelper = record helper for DNFontStyle
  public const
    ///<summary>
    ///  Courier font.
    ///</summary>
    Courier = 0;
    ///<summary>
    ///  Bold Courier font.
    ///</summary>
    CourierBold = 1;
    ///<summary>
    ///  Oblique Curier font.
    ///</summary>
    CourierOblique = 2;
    ///<summary>
    ///  Bold oblique Courier font.
    ///</summary>
    CourierBoldOblique = 3;
    ///<summary>
    ///  Helvetica font.
    ///</summary>
    Helvetica = 4;
    ///<summary>
    ///  Bold Helvetica font.
    ///</summary>
    HelveticaBold = 5;
    ///<summary>
    ///  Oblique Helvetica font.
    ///</summary>
    HelveticaOblique = 6;
    ///<summary>
    ///  Bold oblique Helvetica font.
    ///</summary>
    HelveticaBoldOblique = 7;
    ///<summary>
    ///  Symbol font.
    ///</summary>
    Symbol = 8;
    ///<summary>
    ///  Times-Roman font.
    ///</summary>
    TimesRoman = 9;
    ///<summary>
    ///  Bold Times font.
    ///</summary>
    TimesBold = 10;
    ///<summary>
    ///  Italic Times font.
    ///</summary>
    TimesItalic = 11;
    ///<summary>
    ///  Bold italic Times font.
    ///</summary>
    TimesBoldItalic = 12;
    ///<summary>
    ///  ZapfDingbats font.
    ///</summary>
    ZapfDingbats = 13;
    ///<summary>
    ///  Unknown font. Standard font will be used.
    ///</summary>
    Unknown = 14;
    ///<summary>
    ///  True Type Font for CJK supporting ,default is MS PGothic font.
    ///</summary>
    CjkFont = 15;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Status of imported field
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Form+ImportStatus')]
  DNForm_ImportStatus = type Integer;
  DNForm_ImportStatusHelper = record helper for DNForm_ImportStatus
  public const
    ///<summary>
    ///  Field was successfully imported
    ///</summary>
    Success = 0;
    ///<summary>
    ///  Field with this name was not found in the document form.
    ///</summary>
    FieldNotFound = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Represents modes for merging images.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ImageMergeMode')]
  DNImageMergeMode = type Integer;
  DNImageMergeModeHelper = record helper for DNImageMergeMode
  public const
    ///<summary>
    ///  Images merged vertically.
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  Images merged horizontally.
    ///</summary>
    Horizontal = 2;
    ///<summary>
    ///  Images aligned by center.
    ///</summary>
    Center = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Defines different key sizes which can be used to encrypt pdf documents.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.KeySize')]
  DNKeySize = type Integer;
  DNKeySizeHelper = record helper for DNKeySize
  public const
    ///<summary>
    ///  40 bit key. Such key size is used with RC4 algorithm and provides low level of security.
    ///  Nevertheless old versions of pdf documents can be encrypted only with such keys (v. 1.3 and lower);
    ///</summary>
    x40 = 0;
    ///<summary>
    ///  128 bit key. Both RC4 and AES algorithms can use such key size.
    ///</summary>
    x128 = 1;
    ///<summary>
    ///  256 bit key. Such key size can be used only with AES and is recognized with the last Adobe Reader versions (starting from v.9).
    ///</summary>
    x256 = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Action performed when corrupted file was met in concatenation process.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ConcatenateCorruptedFileAction')]
  DNPdfFileEditor_ConcatenateCorruptedFileAction = type Integer;
  DNPdfFileEditor_ConcatenateCorruptedFileActionHelper = record helper for DNPdfFileEditor_ConcatenateCorruptedFileAction
  public const
    ///<summary>
    ///  If corrupted file was met, then stop concatentation process and return error.
    ///</summary>
    StopWithError = 0;
    ///<summary>
    ///  If corrupted file was met, then don't stop concatenation and don't process corrupted file.
    ///  List of corrupted files is accessible in Failures property.
    ///</summary>
    ConcatenateIgnoringCorrupted = 1;
    ///<summary>
    ///  When corrupted object is met in source document, process will not stopped and corrupted object only is ignored.
    ///</summary>
    ConcatenateIgnoringCorruptedObjects = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Defines positioning mode.
  ///  Possible values include Legacy (backward compatibility) and
  ///  Current (updated text position calculation method)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PositioningMode')]
  DNPositioningMode = type Integer;
  DNPositioningModeHelper = record helper for DNPositioningMode
  public const
    ///<summary>
    ///  Legacy text positioning
    ///</summary>
    Legacy = 0;
    ///<summary>
    ///  Updated line spacing, vertical position calculation is done by the old rules
    ///  (i.e. text is positioned relative to bottom-left corner of the specified rectangle)
    ///</summary>
    ModernLineSpacing = 1;
    ///<summary>
    ///  Updated line spacing and vertical position calculation is done based on left-top corner rather than left-bottom.
    ///</summary>
    Current = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumeration of possible field flags.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PropertyFlag')]
  DNPropertyFlag = type Integer;
  DNPropertyFlagHelper = record helper for DNPropertyFlag
  public const
    ///<summary>
    ///  Field is read-only.
    ///</summary>
    ReadOnly = 0;
    ///<summary>
    ///  Field is required.
    ///</summary>
    Required = 1;
    ///<summary>
    ///  Field is not exportable.
    ///</summary>
    NoExport = 2;
    ///<summary>
    ///  Invalid field flag.
    ///</summary>
    InvalidFlag = 3;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Action to perform if font does not contain required character
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy+NoCharacterAction')]
  DNFacades_ReplaceTextStrategy_NoCharacterAction = type Integer;
  DNFacades_ReplaceTextStrategy_NoCharacterActionHelper = record helper for DNFacades_ReplaceTextStrategy_NoCharacterAction
  public const
    ///<summary>
    ///  Throw exception
    ///</summary>
    ThrowException = 0;
    ///<summary>
    ///  Repalce font to standard font which contains required character
    ///</summary>
    UseStandardFont = 1;
    ///<summary>
    ///  Replace text anyway without font substitution
    ///</summary>
    ReplaceAnyway = 2;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Scope where replace text operation is applied
  ///  REPLACE_FIRST by default
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy+Scope')]
  DNFacades_ReplaceTextStrategy_Scope = type Integer;
  DNFacades_ReplaceTextStrategy_ScopeHelper = record helper for DNFacades_ReplaceTextStrategy_Scope
  public const
    ///<summary>
    ///  Replace only first occurence of the text on each of affected pages
    ///</summary>
    ReplaceFirst = 0;
    ///<summary>
    ///  Replace all text occurences on all affected pages
    ///</summary>
    ReplaceAll = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Describes stamp types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.StampType')]
  DNStampType = type Integer;
  DNStampTypeHelper = record helper for DNStampType
  public const
    ///<summary>
    ///  Stamp if Form.
    ///</summary>
    Form = 0;
    ///<summary>
    ///  Stamp is image.
    ///</summary>
    Image = 1;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Enumeration of possible submit form flags.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.SubmitFormFlag')]
  DNSubmitFormFlag = type Integer;
  DNSubmitFormFlagHelper = record helper for DNSubmitFormFlag
  public const
    ///<summary>
    ///  Data will be returned in FDF format.
    ///</summary>
    Fdf = 0;
    ///<summary>
    ///  Data will be returned in HTML format.
    ///</summary>
    Html = 1;
    ///<summary>
    ///  Data will be returned in XFDF format.
    ///</summary>
    Xfdf = 2;
    ///<summary>
    ///  Data will be returned in FDF format with comments.
    ///</summary>
    FdfWithComments = 3;
    ///<summary>
    ///  Data will be returned in XFDF format with comments.
    ///</summary>
    XfdfWithComments = 4;
    ///<summary>
    ///  Whole PDF file will be submitted.
    ///</summary>
    Pdf = 5;
  end;


  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Defines word wrapping strategies
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.WordWrapMode')]
  DNFacades_WordWrapMode = type Integer;
  DNFacades_WordWrapModeHelper = record helper for DNFacades_WordWrapMode
  public const
    ///<summary>
    ///  Default algorithm (allows breaking words in the middle)
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Word wrapping only wraps complete words.
    ///  If the complete word cannot be wrapped, attempts
    ///  to wrap word in the middle
    ///</summary>
    ByWords = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Encoding of the attached file. Possible values: Zip - file is compressed with ZIP, None - file is non compressed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FileEncoding')]
  DNFileEncoding = type Integer;
  DNFileEncodingHelper = record helper for DNFileEncoding
  public const
    ///<summary>
    ///  File is not compressed.
    ///</summary>
    None = 0;
    ///<summary>
    ///  File is compressed with ZIP algorithhm.
    ///</summary>
    Zip = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  enumerates strategies for font subsetting
  ///</summary>
  [DNTypeName('Aspose.Pdf.FontSubsetStrategy')]
  DNFontSubsetStrategy = type Integer;
  DNFontSubsetStrategyHelper = record helper for DNFontSubsetStrategy
  public const
    ///<summary>
    ///  Declares to subset only fonts which are embedded in document already
    ///</summary>
    SubsetEmbeddedFontsOnly = 0;
    ///<summary>
    ///  Declares to subsets all the fonts, non-embedded and embedded both
    ///</summary>
    SubsetAllFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  [DNTypeName('Aspose.Pdf.Forms.BoxStyle')]
  DNBoxStyle = type Integer;
  DNBoxStyleHelper = record helper for DNBoxStyle
  public const
    ///<summary>
    ///  Circle style.
    ///</summary>
    Circle = 0;
    ///<summary>
    ///  Check style.
    ///</summary>
    Check = 1;
    ///<summary>
    ///  Cross style.
    ///</summary>
    Cross = 2;
    ///<summary>
    ///  Diamond style.
    ///</summary>
    Diamond = 3;
    ///<summary>
    ///  Square style.
    ///</summary>
    Square = 4;
    ///<summary>
    ///  Star style.
    ///</summary>
    Star = 5;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  The access permissions granted for this document.
  ///  Valid values are:
  ///  1 - No changes to the document are permitted; any change to the document invalidates the signature.
  ///  2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
  ///  3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.DocMDPAccessPermissions')]
  DNDocMDPAccessPermissions = type Integer;
  DNDocMDPAccessPermissionsHelper = record helper for DNDocMDPAccessPermissions
  public const
    ///<summary>
    ///  1 - No changes to the document are permitted; any change to the document invalidates the signature.
    ///</summary>
    NoChanges = 1;
    ///<summary>
    ///  2 - Permitted changes are filling in forms, instantiating page templates, and signing; other changes invalidate the signature.
    ///</summary>
    FillingInForms = 2;
    ///<summary>
    ///  3 - Permitted changes are the same as for 2, as well as annotation creation, deletion, and modification; other changes invalidate the signature.
    ///</summary>
    AnnotationModification = 3;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  Forms can contain signing information and can be signed or unsigned.
  ///  Sometimes view of forms in viewer must depend on whether form is signed or not.
  ///  This enum enumerates possible rendering modes during convertion of form type in regard to sign.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Form+SignDependentElementsRenderingModes')]
  DNForm_SignDependentElementsRenderingModes = type Integer;
  DNForm_SignDependentElementsRenderingModesHelper = record helper for DNForm_SignDependentElementsRenderingModes
  public const
    RenderFormAsUnsigned = 0;
    RenderFormAsSigned = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  Enumeration of posible types of Acro Form.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.FormType')]
  DNFormType = type Integer;
  DNFormTypeHelper = record helper for DNFormType
  public const
    ///<summary>
    ///  Standard AcroForm.
    ///</summary>
    Standard = 0;
    ///<summary>
    ///  Static XFA form.
    ///</summary>
    Static_ = 1;
    ///<summary>
    ///  Dynamic XFA form.
    ///</summary>
    Dynamic_ = 2;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  Describes position of icon.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.IconCaptionPosition')]
  DNIconCaptionPosition = type Integer;
  DNIconCaptionPositionHelper = record helper for DNIconCaptionPosition
  public const
    ///<summary>
    ///  Icon is not displayed.
    ///</summary>
    NoIcon = 0;
    ///<summary>
    ///  Caption is not displayed.
    ///</summary>
    NoCaption = 1;
    ///<summary>
    ///  Caption is below icon.
    ///</summary>
    CaptionBelowIcon = 2;
    ///<summary>
    ///  Caption is above icon.
    ///</summary>
    CaptionAboveIcon = 3;
    ///<summary>
    ///  Caption to the right.
    ///</summary>
    CaptionToTheRight = 4;
    ///<summary>
    ///  Caption to the left.
    ///</summary>
    CaptionToTheLeft = 5;
    ///<summary>
    ///  Caption over laid.
    ///</summary>
    CaptionOverlaid = 6;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  The type of scaling that shall be used.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ScalingMode')]
  DNScalingMode = type Integer;
  DNScalingModeHelper = record helper for DNScalingMode
  public const
    ///<summary>
    ///  Scale the icon to fit the width or height of the annotation rectangle while maintaining the icon�s original aspect ratio.
    ///</summary>
    Proportional = 0;
    ///<summary>
    ///  Scale the icon to fill the annotation rectangle exactly.
    ///</summary>
    Anamorphic = 1;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  The circumstances under which the icon shall be scaled inside the annotation rectangle.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ScalingReason')]
  DNScalingReason = type Integer;
  DNScalingReasonHelper = record helper for DNScalingReason
  public const
    ///<summary>
    ///  Always scale.
    ///</summary>
    Always = 0;
    ///<summary>
    ///  BScale only when the icon is bigger than the annotation rectangle.
    ///</summary>
    IconIsBigger = 1;
    ///<summary>
    ///  Scale only when the icon is smaller than the annotation rectangle.
    ///</summary>
    IconIsSmaller = 2;
    ///<summary>
    ///  Never scale.
    ///</summary>
    Never = 3;
  end;


  //-------------namespace: Aspose.Pdf.Forms----------------
  ///<summary>
  ///  A (Barcode) Symbology defines the technical details of a particular type of barcode:
  ///  the width of the bars, character set, method of encoding, checksum specifications, etc.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Symbology')]
  DNSymbology = type Integer;
  DNSymbologyHelper = record helper for DNSymbology
  public const
    ///<summary>
    ///  A multi-row, variable-length 2D symbology with high data capacity and error-correction capability.
    ///</summary>
    PDF417 = 0;
    ///<summary>
    ///  QR code (short for Quick Response) is a specific matrix barcode (2D code),
    ///  readable by dedicated QR barcode readers and camera phones.
    ///</summary>
    QRCode = 1;
    ///<summary>
    ///  A 2D matrix symbology consisting of black and white square modules arranged in either a square or
    ///  rectangular pattern.
    ///</summary>
    DataMatrix = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Describes horizontal alignment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HorizontalAlignment')]
  DNHorizontalAlignment = type Integer;
  DNHorizontalAlignmentHelper = record helper for DNHorizontalAlignment
  public const
    ///<summary>
    ///  No alignment.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Align to left.
    ///</summary>
    Left = 1;
    ///<summary>
    ///  Center alignment.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Align to right.
    ///</summary>
    Right = 3;
    ///<summary>
    ///  Justify alignment. Text will be aligned on both left and right margins.
    ///</summary>
    Justify = 4;
    ///<summary>
    ///  Similar to 'Justify' alignment, except that the very last line will only be
    ///  left-aligned in 'Justify' mode, while in 'FullJustify' mode all lines will be
    ///  left- and right-aligned.
    ///</summary>
    FullJustify = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Represents enumeration of the Html document types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlDocumentType')]
  DNHtmlDocumentType = type Integer;
  DNHtmlDocumentTypeHelper = record helper for DNHtmlDocumentType
  public const
    ///<summary>
    ///  The XHtml Document Type.
    ///</summary>
    Xhtml = 0;
    ///<summary>
    ///  The HTML5 Document Type.
    ///</summary>
    Html5 = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Specifies possible media types used during rendering.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlMediaType')]
  DNHtmlMediaType = type Integer;
  DNHtmlMediaTypeHelper = record helper for DNHtmlMediaType
  public const
    Print = 0;
    Screen = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum describes possible antialiasing measures during conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+AntialiasingProcessingType')]
  DNHtmlSaveOptions_AntialiasingProcessingType = type Integer;
  DNHtmlSaveOptions_AntialiasingProcessingTypeHelper = record helper for DNHtmlSaveOptions_AntialiasingProcessingType
  public const
    ///<summary>
    ///  no special antialiasing processing in use. This is an optimal option
    ///  for overhelming majority of documents and it does not require additional time
    ///  during conversion
    ///</summary>
    NoAdditionalProcessing = 0;
    ///<summary>
    ///  In such case converter tries to detect places with ajacent background graphical
    ///  elements and correct result HTML in relevant way.
    ///  This option allows enhance result of export for documents that contain backgrounds
    ///  built from several ajacent graphical elements (for such kind of documents PDF renderers , f.e. Acrobat Reader,
    ///  usually try smooth boundaries of elements during rendering.
    ///  With this option converter imitates that behaviour of PDF-renderers.
    ///  This option allows enhance layout of result of export for some specific documents (that use such compound backgrounds),
    ///  but it requires additional time for processng (usually about 10-15% of additional time).
    ///  So usage of this mode in general case is not recommended.
    ///</summary>
    TryCorrectResultHtml = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enumeration defines rules which tune encoding logic
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+FontEncodingRules')]
  DNHtmlSaveOptions_FontEncodingRules = type Integer;
  DNHtmlSaveOptions_FontEncodingRulesHelper = record helper for DNHtmlSaveOptions_FontEncodingRules
  public const
    ///<summary>
    ///  Leave encoding logic "as is" - in accordance with PDF specification
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  ToUnicode is a special mechanism which helps to decode input codes to unicode symbols.
    ///  According to specification it must be used first of all mechanisms to get unicode symbols
    ///  for specific input code. But some documents has non-standard fonts and to convert these
    ///  documents correctly it may be necessary to decrease ToUnicode priority and use another
    ///  mechanisms to decode input codes.
    ///</summary>
    DecreaseToUnicodePriorityLevel = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates modes that can be used for saving of fonts
  ///  referenced in saved PDF
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+FontSavingModes')]
  DNHtmlSaveOptions_FontSavingModes = type Integer;
  DNHtmlSaveOptions_FontSavingModesHelper = record helper for DNHtmlSaveOptions_FontSavingModes
  public const
    ///<summary>
    ///  All referenced fonts will be saved and referenced as WOFF-fonts
    ///</summary>
    AlwaysSaveAsWOFF = 0;
    ///<summary>
    ///  All referenced fonts will be saved and referenced as TTF-fonts
    ///</summary>
    AlwaysSaveAsTTF = 1;
    ///<summary>
    ///  All referenced fonts will be saved and referenced as EOT-fonts
    ///</summary>
    AlwaysSaveAsEOT = 2;
    ///<summary>
    ///  All referenced fonts will be saved (and referenced in CSS) as 3 independent files : EOT, TTH,WOFF.
    ///  It increases size of output data but makes output sutable for overhelming majority of web brawsers
    ///</summary>
    SaveInAllFormats = 3;
    ///<summary>
    ///  All referenced fonts will not be saved.
    ///</summary>
    DontSave = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  enumerates possible types of image files
  ///  that can be saved as external resources
  ///  during Pdf to Html conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlImageType')]
  DNHtmlSaveOptions_HtmlImageType = type Integer;
  DNHtmlSaveOptions_HtmlImageTypeHelper = record helper for DNHtmlSaveOptions_HtmlImageType
  public const
    ///<summary>
    ///  Jpeg format
    ///</summary>
    Jpeg = 0;
    ///<summary>
    ///  Png format
    ///</summary>
    Png = 1;
    ///<summary>
    ///  Bmp format
    ///</summary>
    Bmp = 2;
    ///<summary>
    ///  Gif format
    ///</summary>
    Gif = 3;
    ///<summary>
    ///  Tiff format
    ///</summary>
    Tiff = 4;
    ///<summary>
    ///  Svg format
    ///</summary>
    Svg = 5;
    ///<summary>
    ///  Zipped Svg format
    ///</summary>
    ZippedSvg = 6;
    ///<summary>
    ///  Unknown - means that converter cannot detect type of content itself
    ///</summary>
    Unknown = 7;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Sometimes specific reqirments to created HTML are present.
  ///  This enum defines HTML preparing modes that can be used
  ///  during conversion of PDF to HTML to match such specific requirments.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlMarkupGenerationModes')]
  DNHtmlSaveOptions_HtmlMarkupGenerationModes = type Integer;
  DNHtmlSaveOptions_HtmlMarkupGenerationModesHelper = record helper for DNHtmlSaveOptions_HtmlMarkupGenerationModes
  public const
    ///<summary>
    ///  Default mode any specific requirments are absent.
    ///  Will be generated output that will contain all parts of HTML
    ///  without any special additional processing.
    ///</summary>
    WriteAllHtml = 0;
    ///<summary>
    ///  will be stripped away all HTML content that is outside HTML's body,
    ///  i.e. will be left only content that is inside <body></body> tags
    ///</summary>
    WriteOnlyBodyContent = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates possible types of image's parents
  ///  Image can pertain to HTML page or to SVG parent image
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+ImageParentTypes')]
  DNHtmlSaveOptions_ImageParentTypes = type Integer;
  DNHtmlSaveOptions_ImageParentTypesHelper = record helper for DNHtmlSaveOptions_ImageParentTypes
  public const
    ///<summary>
    ///  Image pertains to HTML page itself
    ///</summary>
    HtmlPage = 0;
    ///<summary>
    ///  Image was embedded in SVG image
    ///</summary>
    SvgImage = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  It enumerates possible modes of positioning of letters in words in result HTML
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+LettersPositioningMethods')]
  DNHtmlSaveOptions_LettersPositioningMethods = type Integer;
  DNHtmlSaveOptions_LettersPositioningMethodsHelper = record helper for DNHtmlSaveOptions_LettersPositioningMethods
  public const
    ///<summary>
    ///  It's default method. It uses EM-units and special alhorithm of compensation of rounding errors
    ///  It's preferable for usage in IE10.0 and more fresh versions and gives better scaling of captions when scaling is necessary
    ///</summary>
    UseEmUnitsAndCompensationOfRoundingErrorsInCss = 0;
    ///<summary>
    ///  It allows to get sometimes more precise results in old IE browser versions
    ///</summary>
    UsePixelUnitsInCssLetterSpacingForIE = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum enumerates possible modes of embedding of files referenced in HTML
  ///  It allows to control whether referenced files (HTML, Fonts,Images, CSSes)
  ///  will be embedded into main HTML file or will be generated as apart binary entities
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+PartsEmbeddingModes')]
  DNHtmlSaveOptions_PartsEmbeddingModes = type Integer;
  DNHtmlSaveOptions_PartsEmbeddingModesHelper = record helper for DNHtmlSaveOptions_PartsEmbeddingModes
  public const
    ///<summary>
    ///  Enforces embed all referenced files(Css,Images,Fonts) into generated HTML markup (i.e. into HTML itself)
    ///  This approach generates one HTML file, but total size of output
    ///  becames bigger(because Base64 encoding of binaries is in use) and not all browsers (especially legacy)
    ///  successfully process binaries embedded into HTML. But it allows get HTML that contains whole result, without any additional files.
    ///</summary>
    EmbedAllIntoHtml = 0;
    ///<summary>
    ///  Enforces put apart all referenced files except CSS (Images and Fonts)
    ///  I.e. CSS will be embedded into result HTML , and all other referenced files(Images and Fonts)
    ///  will be processed as external parts
    ///  It generates HTML that is sutable for wide set of browsers
    ///</summary>
    EmbedCssOnly = 1;
    ///<summary>
    ///  Enforces put apart referenced files(Css,Images,Fonts)
    ///  This approach generates set of files, but total size of output
    ///  becames smaller(because no Base64 encoding of binaries is in use)
    ///  Also such approach generates HTML that is sutable for wide set of browsers
    ///</summary>
    NoEmbedding = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Converted PDF can contain raster images(.png, *.jpeg etc.)
  ///  This enum defines methods of how raster images can be handled
  ///  during conversion of PDF to HTML
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+RasterImagesSavingModes')]
  DNHtmlSaveOptions_RasterImagesSavingModes = type Integer;
  DNHtmlSaveOptions_RasterImagesSavingModesHelper = record helper for DNHtmlSaveOptions_RasterImagesSavingModes
  public const
    ///<summary>
    ///  for each distinct raster file will be generated wrapper SVG image,
    ///  and raster image will be embedded as Base64 encoded strings
    ///  into that SVG image
    ///</summary>
    AsPngImagesEmbeddedIntoSvg = 0;
    ///<summary>
    ///  distinct raster images will be put apart as PNG files but will be referenced through wrapping SVG images,
    ///  i.e. will be generated one PNG file and one SVG for each raster image,
    ///  and each of such SVGs will contain links to relevant PNG file
    ///</summary>
    AsExternalPngFilesReferencedViaSvg = 1;
    ///<summary>
    ///  Will be generated one big PNG background file for each result page.
    ///  Raster images will be embedded into that file and rendered as regions of that image.
    ///  No external PNG files for each image will be generated,
    ///  only one PNG file per page will be present in conversion result set of files.
    ///</summary>
    AsEmbeddedPartsOfPngPageBackground = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Action which performed with image object when image is removed from collection. If image object is removed
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImageDeleteAction')]
  DNImageDeleteAction = type Integer;
  DNImageDeleteActionHelper = record helper for DNImageDeleteAction
  public const
    ///<summary>
    ///  Image will be removed from the collection. If page contents contains references to the image they will not be removed. Document may became invalid.
    ///</summary>
    KeepContents = 0;
    ///<summary>
    ///  Image will be removed from the collection and from page contents, but image object will not be deleted. File size will not be decreased.
    ///</summary>
    None = 1;
    ///<summary>
    ///  Image will be removed from the collection and image object will be removed from the document. If other references on the same object exist the document may be corrupted.
    ///</summary>
    ForceDelete = 2;
    ///<summary>
    ///  Image will be removed from the collection and image object will be removed only if no other references to the image from other pages. This may require more time in comparision with ForeDelete option.
    ///</summary>
    Check = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates the image file types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImageFileType')]
  DNImageFileType = type Integer;
  DNImageFileTypeHelper = record helper for DNImageFileType
  public const
    ///<summary>
    ///  Unknown type.
    ///</summary>
    Unknown = 0;
    ///<summary>
    ///  svg image file type.
    ///</summary>
    Svg = 1;
    ///<summary>
    ///  Dicom image file type.
    ///</summary>
    Dicom = 2;
    ///<summary>
    ///  Base64 image file type.
    ///</summary>
    Base64 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration representing image filter type.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImageFilterType')]
  DNImageFilterType = type Integer;
  DNImageFilterTypeHelper = record helper for DNImageFilterType
  public const
    Jpeg2000 = 0;
    Jpeg = 1;
    Flate = 2;
    CCITTFax = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Specifies import format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImportFormat')]
  DNImportFormat = type Integer;
  DNImportFormatHelper = record helper for DNImportFormat
  public const
    ///<summary>
    ///  Computer Graphics Metafile format.
    ///</summary>
    Cgm = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Specifies load format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LoadFormat')]
  DNLoadFormat = type Integer;
  DNLoadFormatHelper = record helper for DNLoadFormat
  public const
    ///<summary>
    ///  means loading of document in CGM format
    ///</summary>
    CGM = 0;
    ///<summary>
    ///  means loading of document in HTML format
    ///</summary>
    HTML = 1;
    ///<summary>
    ///  means loading of document in EPUB format(special format of e-books)
    ///</summary>
    EPUB = 2;
    ///<summary>
    ///  means loading of document in XML format(special XML that represent logical structure of PDF document)
    ///</summary>
    XML = 3;
    ///<summary>
    ///  means loading of document in XSLFO format
    ///</summary>
    XSLFO = 4;
    ///<summary>
    ///  means loading of document in PCL format
    ///</summary>
    PCL = 5;
    ///<summary>
    ///  means loading of document in XPS format
    ///</summary>
    XPS = 6;
    ///<summary>
    ///  means loading of document in TEX format - format of Latex text editor
    ///</summary>
    TEX = 7;
    ///<summary>
    ///  means loading of document in SVG format - format of Latex text editor
    ///</summary>
    SVG = 8;
    ///<summary>
    ///  means loading of document in MHT format(that is packed HTML format)
    ///</summary>
    MHT = 9;
    ///<summary>
    ///  means loading of document in PS format(format of PostScript document)
    ///</summary>
    PS = 10;
    ///<summary>
    ///  means loading document is in MD format (markdown).
    ///</summary>
    MD = 11;
    ///<summary>
    ///  means loading document is in TXT format.
    ///</summary>
    TXT = 12;
    ///<summary>
    ///  means loading document in APS format.
    ///</summary>
    APS = 13;
    ///<summary>
    ///  Internal PDF document structure in XML format.
    ///</summary>
    PDFXML = 14;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Represents mode of usage of margins area during conversion
  ///  (like HTML, EPUB etc), defines treatement of instructions of imported format
  ///  related to usage of margins.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LoadOptions+MarginsAreaUsageModes')]
  DNLoadOptions_MarginsAreaUsageModes = type Integer;
  DNLoadOptions_MarginsAreaUsageModesHelper = record helper for DNLoadOptions_MarginsAreaUsageModes
  public const
    ///<summary>
    ///  In this mode converter obeyes format of imported document (f.e. CSS of imported HTML)
    ///  in usage of margins area.So, if format of imported document requires usage
    ///  of margins area for rendering , converter will allow that
    ///</summary>
    PutContentOnMarginAreaIfNecessary = 0;
    ///<summary>
    ///  This mode strictly forbids usage of margins area,
    ///  so, converter will never use area of margins for rendering,
    ///  even if CSS or format of source document allows or requirs that
    ///</summary>
    NeverPutContentOnMarginArea = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  ATTENTION! The feature implemented but did not put yet to public API since blocker issue in
  ///  OSHARED layer revealed for sample document.
  ///  Represents mode of usage of page size during conversion.
  ///  Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required
  ///  pagesize. But sometimes content has specifies horizontal positions or size that
  ///  does not allow put content into required page size.
  ///  In such case we can define what should be done in this case (i.e when size of content does not fit
  ///  required initial page size of result PDF document).
  ///</summary>
  [DNTypeName('Aspose.Pdf.LoadOptions+PageSizeAdjustmentModes')]
  DNLoadOptions_PageSizeAdjustmentModes = type Integer;
  DNLoadOptions_PageSizeAdjustmentModesHelper = record helper for DNLoadOptions_PageSizeAdjustmentModes
  public const
    ///<summary>
    ///  In this mode result pages will have required pagesize defined in LoadOptions,
    ///  no matter whether content after conversion goes out of page boundaries or no.
    ///</summary>
    NoAjustmentAllwaysUsePredefinedSize = 0;
    ///<summary>
    ///  This mode defines such behaviour: after getting of conversion result ,
    ///  and detecting of fact that some content has been truncated,
    ///  width of portview is enlarged to fit content and conversion is repeated.
    ///  This mode allows getting of less pages in result in such case but requires repeated
    ///  rendering(and therefore more processing time).
    ///</summary>
    EnlargeRequiredViewportWidthAndDoConversionAgain = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration of supported page numbering style for PageLabel class.
  ///</summary>
  [DNTypeName('Aspose.Pdf.NumberingStyle')]
  DNNumberingStyle = type Integer;
  DNNumberingStyleHelper = record helper for DNNumberingStyle
  public const
    ///<summary>
    ///  Arabic decimal numbers.
    ///</summary>
    NumeralsArabic = 0;
    ///<summary>
    ///  Uppercase roman numbers (I, II, III...).
    ///</summary>
    NumeralsRomanUppercase = 1;
    ///<summary>
    ///  Lowercase roman numbers (i, ii, iii...).
    ///</summary>
    NumeralsRomanLowercase = 2;
    ///<summary>
    ///  Uppercase latin letters (A, B, C...).
    ///</summary>
    LettersUppercase = 3;
    ///<summary>
    ///  Lowercase latin letters (a, b, c...).
    ///</summary>
    LettersLowercase = 4;
    ///<summary>
    ///  No numbering.
    ///</summary>
    None = 5;
  end;


  //-------------namespace: Aspose.Pdf.Optimization----------------
  ///<summary>
  ///  Describes versions of image compression algorithm.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Optimization.ImageCompressionVersion')]
  DNImageCompressionVersion = type Integer;
  DNImageCompressionVersionHelper = record helper for DNImageCompressionVersion
  public const
    ///<summary>
    ///  Standard algorithm. Default value.
    ///</summary>
    Standard = 0;
    ///<summary>
    ///  Improved algorithm faster then standard but applicable not for all cases.
    ///</summary>
    Fast = 2;
    ///<summary>
    ///  Use fast algorithm when possible and standard for other cases. May be slower then "Fast" but may produce better compression.
    ///</summary>
    Mixed = 3;
  end;


  //-------------namespace: Aspose.Pdf.Optimization----------------
  [DNTypeName('Aspose.Pdf.Optimization.ImageEncoding')]
  DNImageEncoding = type Integer;
  DNImageEncodingHelper = record helper for DNImageEncoding
  public const
    ///<summary>
    ///  Don't change encoding.
    ///</summary>
    Unchanged = 0;
    ///<summary>
    ///  JPEG (DCT) encoding.
    ///</summary>
    Jpeg = 1;
    ///<summary>
    ///  Flate encoding.
    ///</summary>
    Flate = 2;
    ///<summary>
    ///  JPEG2000 (JPX) encoding.
    ///</summary>
    Jpeg2000 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Describes page coordinate type.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageCoordinateType')]
  DNPageCoordinateType = type Integer;
  DNPageCoordinateTypeHelper = record helper for DNPageCoordinateType
  public const
    ///<summary>
    ///  The MediaBox is used to specify the width and height of the page.
    ///  For the average user, this probably equals the actual page size.
    ///  The MediaBox is the largest page box in a PDF. The other page boxes can equal the
    ///  size of the MediaBox but they cannot be larger.
    ///</summary>
    MediaBox = 0;
    ///<summary>
    ///  The CropBox defines the region to which the page contents are to be clipped.
    ///  Acrobat uses this size for screen display and printing.
    ///</summary>
    CropBox = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Descibes page layout.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageLayout')]
  DNPageLayout = type Integer;
  DNPageLayoutHelper = record helper for DNPageLayout
  public const
    ///<summary>
    ///  Single page.
    ///</summary>
    SinglePage = 0;
    ///<summary>
    ///  Display the pages in one column.
    ///</summary>
    OneColumn = 1;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the left.
    ///</summary>
    TwoColumnLeft = 2;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the right.
    ///</summary>
    TwoColumnRight = 3;
    ///<summary>
    ///  Display the pages two at a time, with odd-numbered pages on the left.
    ///</summary>
    TwoPageLeft = 4;
    ///<summary>
    ///  Display the pages two at a time, with odd-numbered pages on the right.
    ///</summary>
    TwoPageRight = 5;
    ///<summary>
    ///  Default layout.
    ///</summary>
    Default_ = 6;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Class descibes used components of the document page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageMode')]
  DNPageMode = type Integer;
  DNPageModeHelper = record helper for DNPageMode
  public const
    ///<summary>
    ///  Dont use any components.
    ///</summary>
    UseNone = 0;
    ///<summary>
    ///  Document outline visible.
    ///</summary>
    UseOutlines = 1;
    ///<summary>
    ///  Thumbnail images visible.
    ///</summary>
    UseThumbs = 2;
    ///<summary>
    ///  FullScreenFull-screen mode, with no menu bar, window controls, or any other window visible.
    ///</summary>
    FullScreen = 3;
    ///<summary>
    ///  Optional content group panel visible.
    ///</summary>
    UseOC = 4;
    ///<summary>
    ///  Attachments panel visible.
    ///</summary>
    UseAttachments = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum represents  known password types used for password protected pdf documents.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PasswordType')]
  DNPasswordType = type Integer;
  DNPasswordTypeHelper = record helper for DNPasswordType
  public const
    ///<summary>
    ///  Pdf document is not password protected.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Pdf document was opened using document open password (restricted access).
    ///</summary>
    User = 1;
    ///<summary>
    ///  Pdf document was opened using change permissions password (full access).
    ///</summary>
    Owner = 2;
    ///<summary>
    ///  Pdf document is password protected but both user and owner passwords are not empty and
    ///  none of the passwords was defined or supplied password was incorrect. So it impossible to deduce the type of the password.
    ///</summary>
    Inaccessible = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates conversion engines that can be used for conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.PclLoadOptions+ConversionEngines')]
  DNPclLoadOptions_ConversionEngines = type Integer;
  DNPclLoadOptions_ConversionEnginesHelper = record helper for DNPclLoadOptions_ConversionEngines
  public const
    ///<summary>
    ///  Legacy conversion engine is conversion engine thay was used for a while and is used by default.
    ///</summary>
    LegacyEngine = 0;
    ///<summary>
    ///  New conversion engine is currently in A-testing state. We open it into public API to get some feedback.
    ///  It's currently recommended to use it only when old conversion engine cannot convert document for some reasons.
    ///</summary>
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Declares set of some known encoding subtables
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem+CMapEncodingTableType')]
  DNQueueItem_CMapEncodingTableType = type Integer;
  DNQueueItem_CMapEncodingTableTypeHelper = record helper for DNQueueItem_CMapEncodingTableType
  public const
    ///<summary>
    ///  Specifies windows unicode table(3,1) - Unicode BMP-only (UCS-2)
    ///</summary>
    WindowsUnicodeTable = 0;
    ///<summary>
    ///  Specifies windows symbolic table - (3,0)
    ///</summary>
    WindowsSymbolicTable = 1;
    ///<summary>
    ///  Specifies mac table(1,0)
    ///</summary>
    MacTable = 2;
    ///<summary>
    ///  Specifies unicode table(0,3)
    ///</summary>
    UnicodeTable = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This class represents an pdf format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfFormat')]
  DNPdfFormat = type Integer;
  DNPdfFormatHelper = record helper for DNPdfFormat
  public const
    ///  Pdf/A-1a format
    PDF_A_1A = 0;
    ///  Pdf/A-1b format
    PDF_A_1B = 1;
    ///  Pdf/A-2a format
    PDF_A_2A = 2;
    ///  Pdf/A-3a format
    PDF_A_3A = 3;
    ///  Pdf/A-2b format
    PDF_A_2B = 4;
    ///  Pdf/A-2u format
    PDF_A_2U = 5;
    ///  Pdf/A-3b format
    PDF_A_3B = 6;
    ///  Pdf/A-3u format
    PDF_A_3U = 7;
    ///  Adobe version 1.3
    v_1_3 = 8;
    ///  Adobe version 1.4
    v_1_4 = 9;
    ///  Adobe version 1.5
    v_1_5 = 10;
    ///  Adobe version 1.6
    v_1_6 = 11;
    ///  Adobe version 1.7
    v_1_7 = 12;
    ///  PDF/UA-1 format
    PDF_UA_1 = 13;
    ///  PDF/X-1a-2001 format
    PDF_X_1A_2001 = 14;
    ///  PDF/X-1a format
    PDF_X_1A = 15;
    ///  PDF/X-3 format
    PDF_X_3 = 16;
    ///<summary>
    ///  ZUGFeRD format
    ///</summary>
    ZUGFeRD = 17;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Some PDF documents have special unicode symbols, which are belonged to Private Use Area (PUA),
  ///  see description at https://en.wikipedia.org/wiki/Private_Use_Areas.
  ///  This symbols cause an PDF/A compliant errors like "Text is mapped to Unicode Private Use Area but no ActualText entry is present".
  ///  This enumeration declares a strategies which can be used to handle PUA symbols.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+PuaProcessingStrategy')]
  DNPdfFormatConversionOptions_PuaProcessingStrategy = type Integer;
  DNPdfFormatConversionOptions_PuaProcessingStrategyHelper = record helper for DNPdfFormatConversionOptions_PuaProcessingStrategy
  public const
    ///<summary>
    ///  Disable PUA symbol processing. This strategy used by default for PDF/A documents with Level B conformance.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Inserts marked content block with ActualText entry which contains empty text.
    ///  This strategy gives good results for documents without marked content blocks. Used by default for PDF/A documents with Level A conformance.
    ///</summary>
    SurroundPuaTextWithEmptyActualText = 1;
    ///<summary>
    ///  This strategy works slower than 'SurroundPuaTextWithEmptyActualText' but it can remove
    ///  PUA compliant errors for documents which can't be handled properly by SurroundPuaTextWithEmptyActualText. PUA symbols
    ///  are substituted on symbol 'space' or special unicode (some PUA symbols have unicode analogs). Substitution applied
    ///  not to document's text but to font's internal data ToUnicode so it doesn't affects symbol's vision but it
    ///  affects symbol's presentation in copy/paste operation system buffer.
    ///</summary>
    SubstitutePuaSymbols = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Some documens have large size after converison into PDF/A format. To reduce file size for these
  ///  documents it's necessary to define a strategy of fonts removing.
  ///  This enumeration declares a strategies which can be used to optimize fonts usage.
  ///  Every strategy from this enumeration has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.OptimizeFileSize" />
  ///  is set.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+RemoveFontsStrategy')]
  DNPdfFormatConversionOptions_RemoveFontsStrategy = type Integer;
  DNPdfFormatConversionOptions_RemoveFontsStrategyHelper = record helper for DNPdfFormatConversionOptions_RemoveFontsStrategy
  public const
    ///<summary>
    ///  This strategy looks like <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" />
    ///  but it removes not fully
    ///  duplicated fonts but fonts which are similar one to another and differs only by parameter "Widths".
    ///  This parameter contains set of some widths for specified symbols of font. Every value of width
    ///  from this "Widths" set is not the real width of symbol(glyph), real width for this symbol already
    ///  defined in font's binary data. Value of width from "Widths" set means visual width for this
    ///  symbol - the width which PDF viewer software must set on displaying symbol instead of real width
    ///  defined in the font. More accurately specification tells:
    ///  Acrobat 5.0 and later viewers use the glyph widths stored in the font dictionary to override the
    ///  widths of glyphs in the font program itself, which improves the consistency of the display and
    ///  printing of the document.
    ///  This strategy is more effective than <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" />
    ///  but using of this
    ///  strategy in some cases theoretically could damage visual presentation of converted document.
    ///  This defect is possible due to that declared widths of fonts could be different for the same
    ///  symbol and in this case width of this symbol will be changed to new one after font
    ///  substitution - when removed font will be replaced in document with already embedded one.
    ///  And if symbol's visual width will be changed - it will be shown incorrectly and this
    ///  distinction could cause visual defects such as text overlapping or another problems.
    ///  But visual defect described is a very rare case and this strategy reduces size of
    ///  document more effectively.
    ///</summary>
    RemoveSimilarFontsWithDifferentWidths = 1;
    ///<summary>
    ///  This is most effective strategy to reduce document's size. It takes fully embedded font sets
    ///  and trim them down to only the subsets used. It's recommended to use this strategy in combination
    ///  with <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveDuplicatedFonts" />
    ///  or <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths" />
    ///  to
    ///  get multiple compression effect for file size. Using of all three strategies simultaneously
    ///  has no sense and strategy <see cref="F:Aspose.Pdf.PdfFormatConversionOptions.RemoveFontsStrategy.RemoveSimilarFontsWithDifferentWidths" />
    ///  will not
    ///  be used in this case.
    ///</summary>
    SubsetFonts = 2;
    ///<summary>
    ///  This strategy removes all the fonts which have duplicates in document. If document
    ///  contains group of duplicated fonts only one font from this group is embedded in document.
    ///  All other fonts from this group are removed from document, every removed font
    ///  substituted with the already embedded analog.
    ///</summary>
    RemoveDuplicatedFonts = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Describes strategies used to align document text segments.
  ///  Now only strategy to restore segments to original bounds is supported.
  ///  In future another strategies could be added.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions+SegmentAlignStrategy')]
  DNPdfFormatConversionOptions_SegmentAlignStrategy = type Integer;
  DNPdfFormatConversionOptions_SegmentAlignStrategyHelper = record helper for DNPdfFormatConversionOptions_SegmentAlignStrategy
  public const
    None = 0;
    RestoreSegmentBounds = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum represents user's permissions for a pdf.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Permissions')]
  DNPermissions = type Integer;
  DNPermissionsHelper = record helper for DNPermissions
  public const
    ///<summary>
    ///  (Security handlers of revision 2) Print the document.
    ///  (Security handlers of revision 3 or greater) Print the document
    ///  (possibly not at the highest quality level,
    ///  depending on whether <see cref="F:Aspose.Pdf.Permissions.PrintingQuality" />
    ///  is also set).
    ///</summary>
    PrintDocument = 4;
    ///<summary>
    ///  Modify the contents of the document by operations other
    ///  than those controlled by  <see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" />
    ///  ,
    ///<see cref="F:Aspose.Pdf.Permissions.FillForm" />
    ///  , and 11.
    ///</summary>
    ModifyContent = 8;
    ///<summary>
    ///  (Security handlers of revision 2) Copy or otherwise extract
    ///  text and graphics from the document, including extracting
    ///  text and graphics (in support of accessibility to users
    ///  with disabilities or for other purposes).
    ///  (Security handlers of revision 3 or greater) Copy or otherwise
    ///  extract text and graphics from the document by operations
    ///  other than that controlled by <see cref="F:Aspose.Pdf.Permissions.ExtractContentWithDisabilities" />
    ///  .
    ///</summary>
    ExtractContent = 16;
    ///<summary>
    ///  Add or modify text annotations, fill in interactive form fields,
    ///  and, if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" />
    ///  is also set, create or modify interactive form
    ///  fields (including signature fields).
    ///</summary>
    ModifyTextAnnotations = 32;
    ///<summary>
    ///  (Security handlers of revision 3 or greater) Fill in existing
    ///  interactive form fields (including signature fields), even if
    ///<see cref="F:Aspose.Pdf.Permissions.ModifyTextAnnotations" />
    ///  is clear.
    ///</summary>
    FillForm = 256;
    ///<summary>
    ///  (Security handlers of revision 3 or greater) Extract text and
    ///  graphics (in support of accessibility to users with disabilities
    ///  or for other purposes).
    ///</summary>
    ExtractContentWithDisabilities = 512;
    ///<summary>
    ///  (Security handlers of revision 3 or greater) Assemble the document
    ///  (insert, rotate, or delete pages and create bookmarks or thumbnail
    ///  images), even if <see cref="F:Aspose.Pdf.Permissions.ModifyContent" />
    ///  is clear.
    ///</summary>
    AssembleDocument = 1024;
    ///<summary>
    ///  (Security handlers of revision 3 or greater) Print the document to
    ///  a representation from which a faithful digital copy of the PDF content
    ///  could be generated. When this bit is clear (and bit 3 is set),
    ///  printing is limited to a low-level representation of the appearance,
    ///  possibly of degraded quality.
    ///</summary>
    PrintingQuality = 2048;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  The paper handling option to use when printing the file from the print dialog..
  ///</summary>
  [DNTypeName('Aspose.Pdf.PrintDuplex')]
  DNPrintDuplex = type Integer;
  DNPrintDuplexHelper = record helper for DNPrintDuplex
  public const
    ///<summary>
    ///  Print single-sided.
    ///</summary>
    Simplex = 0;
    ///<summary>
    ///  Duplex and flip on the short edge of the sheet.
    ///</summary>
    DuplexFlipShortEdge = 1;
    ///<summary>
    ///  Duplex and flip on the long edge of the sheet.
    ///</summary>
    DuplexFlipLongEdge = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum describes possible progress event types
  ///  that can occure during conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.ProgressEventType')]
  DNProgressEventType = type Integer;
  DNProgressEventTypeHelper = record helper for DNProgressEventType
  public const
    ///<summary>
    ///  means that occured event informs about total progress of conversion
    ///</summary>
    TotalProgress = 0;
    ///<summary>
    ///  means that occured event informs about end of analysis of one of pages before conversion
    ///</summary>
    SourcePageAnalysed = 1;
    ///<summary>
    ///  means that occured event informs about creation of one result page before phisical export
    ///</summary>
    ResultPageCreated = 2;
    ///<summary>
    ///  means that occured event informs about finished saving of one result page
    ///</summary>
    ResultPageSaved = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enum represented a program workflow action in case of invoking the
  ///<see cref="M:Aspose.Pdf.IWarningCallback.Warning(Aspose.Pdf.WarningInfo)" />
  ///  method.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ReturnAction')]
  DNReturnAction = type Integer;
  DNReturnActionHelper = record helper for DNReturnAction
  public const
    ///<summary>
    ///  Used for continue flow.
    ///</summary>
    Continue_ = 0;
    ///<summary>
    ///  Used for abort flow.
    ///</summary>
    Abort_ = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration of possible rotation values.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Rotation')]
  DNRotation = type Integer;
  DNRotationHelper = record helper for DNRotation
  public const
    ///<summary>
    ///  Non-rotated.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Rotated on 90 degrees clockwise.
    ///</summary>
    on90 = 1;
    ///<summary>
    ///  Rotated on 180 degrees.
    ///</summary>
    on180 = 2;
    ///<summary>
    ///  Rotated on 270 degrees clockwise.
    ///</summary>
    on270 = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Specifies format
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveFormat')]
  DNSaveFormat = type Integer;
  DNSaveFormatHelper = record helper for DNSaveFormat
  public const
    ///<summary>
    ///  means saving without change of format, i.e. as PDF
    ///  use it please instead of 'SaveFormat.None', that is obsolete one
    ///</summary>
    Pdf = 0;
    ///<summary>
    ///  means saving without change of format, i.e. as PDF
    ///  It's obsolete one and will be deleted eventually,
    ///  please use instead 'SaveFormat.Pdf'
    ///</summary>
    None = 0;
    ///<summary>
    ///  means saving in DOC format
    ///</summary>
    Doc = 1;
    ///<summary>
    ///  means saving in XPS format
    ///</summary>
    Xps = 2;
    ///<summary>
    ///  means saving in HTML format
    ///</summary>
    Html = 3;
    ///<summary>
    ///  means saving in XML format
    ///</summary>
    Xml = 4;
    ///<summary>
    ///  means saving in TEX format i.e. format suitable for Latex text editor
    ///</summary>
    TeX = 5;
    ///<summary>
    ///  means saving in DOCX format
    ///</summary>
    DocX = 6;
    ///<summary>
    ///  means saving in SVG format
    ///</summary>
    Svg = 7;
    ///<summary>
    ///  means saving in MobiXML format(special format of e-books)
    ///</summary>
    MobiXml = 8;
    ///<summary>
    ///  means saving in MsExcel format
    ///</summary>
    Excel = 9;
    ///<summary>
    ///  means saving in EPUB format(special format of e-books)
    ///</summary>
    Epub = 10;
    ///<summary>
    ///  means saving in PPTX format
    ///</summary>
    Pptx = 14;
    ///<summary>
    ///  Saving as APS XML file.
    ///</summary>
    Aps = 15;
    ///<summary>
    ///  Internal PDF document structure in XML format
    ///</summary>
    PdfXml = 16;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Represents line types that can be used in result document for drawing borders or another lines
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+HtmlBorderLineType')]
  DNSaveOptions_HtmlBorderLineType = type Integer;
  DNSaveOptions_HtmlBorderLineTypeHelper = record helper for DNSaveOptions_HtmlBorderLineType
  public const
    ///<summary>
    ///  No line will be shown
    ///</summary>
    None = 0;
    ///<summary>
    ///  dotted line will be shown
    ///</summary>
    Dotted = 1;
    ///<summary>
    ///  dashed line will be shown
    ///</summary>
    Dashed = 2;
    ///<summary>
    ///  solid line will be shown
    ///</summary>
    Solid = 3;
    ///<summary>
    ///  double line will be shown
    ///</summary>
    Double = 4;
    ///<summary>
    ///  grove line will be shown
    ///</summary>
    Groove = 5;
    ///<summary>
    ///  ridhe line will be shown
    ///</summary>
    Ridge = 6;
    ///<summary>
    ///  inset line will be shown
    ///</summary>
    Inset = 7;
    ///<summary>
    ///  outset line will be shown
    ///</summary>
    Outset = 8;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  enumerates possible types of saved external resources
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+NodeLevelResourceType')]
  DNSaveOptions_NodeLevelResourceType = type Integer;
  DNSaveOptions_NodeLevelResourceTypeHelper = record helper for DNSaveOptions_NodeLevelResourceType
  public const
    ///<summary>
    ///  Means that supplied resource is image
    ///</summary>
    Image = 0;
    ///<summary>
    ///  Means that supplied resource is font
    ///</summary>
    Font = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates conversion engines that can be used for conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgLoadOptions+ConversionEngines')]
  DNSvgLoadOptions_ConversionEngines = type Integer;
  DNSvgLoadOptions_ConversionEnginesHelper = record helper for DNSvgLoadOptions_ConversionEngines
  public const
    ///<summary>
    ///  Represents legacy SVG to PDF conversion engine.
    ///</summary>
    LegacyEngine = 0;
    ///<summary>
    ///  Represents new SVG to PDF conversion engine.
    ///</summary>
    NewEngine = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  enumerates possible types of image files
  ///  that can be saved as external resources during
  ///  during Pdf to SVG conversion
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgSaveOptions+SvgExternalImageType')]
  DNSvgSaveOptions_SvgExternalImageType = type Integer;
  DNSvgSaveOptions_SvgExternalImageTypeHelper = record helper for DNSvgSaveOptions_SvgExternalImageType
  public const
    ///<summary>
    ///  Jpeg format
    ///</summary>
    Jpeg = 0;
    ///<summary>
    ///  Png format
    ///</summary>
    Png = 1;
    ///<summary>
    ///  Bmp format
    ///</summary>
    Bmp = 2;
    ///<summary>
    ///  Gif format
    ///</summary>
    Gif = 3;
    ///<summary>
    ///  Tiff format
    ///</summary>
    Tiff = 4;
    ///<summary>
    ///  Unknown - means that converter cannot detect type of content itself
    ///</summary>
    Unknown = 5;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumerates the table broken.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TableBroken')]
  DNTableBroken = type Integer;
  DNTableBrokenHelper = record helper for DNTableBroken
  public const
    ///<summary>
    ///  No broken.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Vertical broken.
    ///</summary>
    Vertical = 1;
    ///<summary>
    ///  Vertical broken in same page.
    ///</summary>
    VerticalInSamePage = 2;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Tab order on the page
  ///</summary>
  [DNTypeName('Aspose.Pdf.TabOrder')]
  DNTabOrder = type Integer;
  DNTabOrderHelper = record helper for DNTabOrder
  public const
    ///<summary>
    ///  No tab order.
    ///</summary>
    None = 0;
    ///<summary>
    ///  Row order.
    ///</summary>
    Row = 1;
    ///<summary>
    ///  Column order.
    ///</summary>
    Column = 2;
    ///<summary>
    ///  Default tab order.
    ///</summary>
    Default_ = 3;
    ///<summary>
    ///  Manual tab order.
    ///</summary>
    Manual = 4;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Specifies style information applied to text.
  ///</summary>
  ///<remarks>
  ///  This enumeration has a <see cref="T:System.FlagsAttribute" />
  ///  attribute that allows a combination of its member values.
  ///</remarks>
  [DNTypeName('Aspose.Pdf.Text.FontStyles')]
  DNFontStyles = type Integer;
  DNFontStylesHelper = record helper for DNFontStyles
  public const
    ///<summary>
    ///  Regular text.
    ///</summary>
    Regular = 0;
    ///<summary>
    ///  Bold text.
    ///</summary>
    Bold = 1;
    ///<summary>
    ///  Italic text.
    ///</summary>
    Italic = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Supported font types enumeration.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontTypes')]
  DNFontTypes = type Integer;
  DNFontTypesHelper = record helper for DNFontTypes
  public const
    ///<summary>
    ///  TTF font type
    ///</summary>
    TTF = 0;
    ///<summary>
    ///  OTF font type
    ///</summary>
    OTF = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Represents font categories that can be substituted.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.SubstitutionFontCategories')]
  DNSubstitutionFontCategories = type Integer;
  DNSubstitutionFontCategoriesHelper = record helper for DNSubstitutionFontCategories
  public const
    ///<summary>
    ///  The fonts that are named the same as system fonts.
    ///  Those fonts are mostly safe to be substituted with the same named system fonts.
    ///</summary>
    TheSameNamedEmbeddedFonts = 0;
    ///<summary>
    ///  All embedded fonts are substituted.
    ///</summary>
    AllEmbeddedFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Enumerates the tab alignment types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TabAlignmentType')]
  DNTabAlignmentType = type Integer;
  DNTabAlignmentTypeHelper = record helper for DNTabAlignmentType
  public const
    ///<summary>
    ///  Text aligned left from tab stop
    ///</summary>
    Left = 0;
    ///<summary>
    ///  Text aligned center from tab stop
    ///</summary>
    Center = 1;
    ///<summary>
    ///  Text aligned right from tab stop
    ///</summary>
    Right = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Enumerates the tab leader types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TabLeaderType')]
  DNTabLeaderType = type Integer;
  DNTabLeaderTypeHelper = record helper for DNTabLeaderType
  public const
    ///<summary>
    ///  Solid tab leader.
    ///</summary>
    Solid = 0;
    ///<summary>
    ///  Dash tab leader.
    ///</summary>
    Dash = 1;
    ///<summary>
    ///  Dot tab leader.
    ///</summary>
    Dot = 2;
    ///<summary>
    ///  No tab leader.
    ///</summary>
    None = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Clipping path processing modes
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+ClippingPathsProcessingMode')]
  DNTextEditOptions_ClippingPathsProcessingMode = type Integer;
  DNTextEditOptions_ClippingPathsProcessingModeHelper = record helper for DNTextEditOptions_ClippingPathsProcessingMode
  public const
    ///<summary>
    ///  Keeps clipping paths of the original page layout. (Default)
    ///</summary>
    KeepIntact = 0;
    ///<summary>
    ///  Original clipping path will be expanded in the case edited text requires more space.
    ///</summary>
    Expand = 1;
    ///<summary>
    ///  Original clipping path will be removed in the case edited text requires more space. Caution: Because of clipping paths may interact with each other removing of it may lead to unexpected result on the page layout.
    ///</summary>
    Remove = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Font replacement behavior.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+FontReplace')]
  DNTextEditOptions_FontReplace = type Integer;
  DNTextEditOptions_FontReplaceHelper = record helper for DNTextEditOptions_FontReplace
  public const
    ///<summary>
    ///  No additional changes performed during font replacement.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Fonts that become unused during font replacement will be removed from resulting document.
    ///</summary>
    RemoveUnusedFonts = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Language transformation modes
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+LanguageTransformation')]
  DNTextEditOptions_LanguageTransformation = type Integer;
  DNTextEditOptions_LanguageTransformationHelper = record helper for DNTextEditOptions_LanguageTransformation
  public const
    ///<summary>
    ///  Default language transformation is performed.
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  Language transformation is performed the same way as in a text editor. It usually means text will looks in the document exactly as You see it in code. But no warranties.
    ///</summary>
    ExactlyAsISee = 1;
    ///<summary>
    ///  Language transformation is not performed.
    ///</summary>
    None = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Action to perform if font does not contain required character
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions+NoCharacterAction')]
  DNText_TextEditOptions_NoCharacterAction = type Integer;
  DNText_TextEditOptions_NoCharacterActionHelper = record helper for DNText_TextEditOptions_NoCharacterAction
  public const
    ///<summary>
    ///  Throw exception
    ///</summary>
    ThrowException = 0;
    ///<summary>
    ///  Repalce font to standard font which contains required character
    ///</summary>
    UseStandardFont = 1;
    ///<summary>
    ///  Replace text anyway without font substitution
    ///</summary>
    ReplaceAnyway = 2;
    ///<summary>
    ///  Repalce font to defined replacement font
    ///</summary>
    UseCustomReplacementFont = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Defines different modes which can be used while converting pdf document into text. See <see cref="!:TextDevice" />
  ///  class.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextExtractionOptions+TextFormattingMode')]
  DNTextExtractionOptions_TextFormattingMode = type Integer;
  DNTextExtractionOptions_TextFormattingModeHelper = record helper for DNTextExtractionOptions_TextFormattingMode
  public const
    ///<summary>
    ///  Represent pdf content with a bit of formatting routines.
    ///</summary>
    Pure = 0;
    ///<summary>
    ///  Represent pdf content as is, i.e. without formatting.
    ///</summary>
    Raw = 1;
    ///<summary>
    ///  Extraction with memory saving. It is almost same to 'Raw' mode but works slightly faster and uses less memory.
    ///</summary>
    MemorySaving = 2;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Defines line spacing specifics
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions+LineSpacingMode')]
  DNTextFormattingOptions_LineSpacingMode = type Integer;
  DNTextFormattingOptions_LineSpacingModeHelper = record helper for DNTextFormattingOptions_LineSpacingMode
  public const
    ///<summary>
    ///  Line spacing is font size
    ///</summary>
    FontSize = 0;
    ///<summary>
    ///  Line spacing is a full space between descender and ascender
    ///</summary>
    FullSize = 1;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Defines word wrapping strategies
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions+WordWrapMode')]
  DNText_TextFormattingOptions_WordWrapMode = type Integer;
  DNText_TextFormattingOptions_WordWrapModeHelper = record helper for DNText_TextFormattingOptions_WordWrapMode
  public const
    ///<summary>
    ///  No wrapping is performed
    ///</summary>
    NoWrap = 0;
    ///<summary>
    ///  Discretionary hyphenation is performed. Allows breaking words in the middle.
    ///</summary>
    DiscretionaryHyphenation = 1;
    ///<summary>
    ///  Word wrapping only wraps complete words.
    ///  If the complete word cannot be wrapped, attempts to use discretionary hyphenation
    ///</summary>
    ByWords = 2;
    ///<summary>
    ///  WordWrapMode not set.
    ///  Wrapping strategie of upper level structure (table cell, paragraph etc.) will be used.
    ///</summary>
    Undefined = 3;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  The text rendering mode, Tmode, determines whether showing text shall cause glyph outlines to be stroked, filled, used as a clipping boundary, or some combination of the three.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextRenderingMode')]
  DNTextRenderingMode = type Integer;
  DNTextRenderingModeHelper = record helper for DNTextRenderingMode
  public const
    ///<summary>
    ///  Fill text.
    ///</summary>
    FillText = 0;
    ///<summary>
    ///  Stroke text.
    ///</summary>
    StrokeText = 1;
    ///<summary>
    ///  Fill, then stroke text.
    ///</summary>
    FillThenStrokeText = 2;
    ///<summary>
    ///  Neither fill nor stroke text (invisible).
    ///</summary>
    Invisible = 3;
    ///<summary>
    ///  Fill text and add to path for clipping (see 9.3.6, "Text Rendering Mode,").
    ///</summary>
    FillTextAndAddPathToClipping = 4;
    ///<summary>
    ///  Stroke text and add to path for clipping.
    ///</summary>
    StrokeTextAndAddPathToClipping = 5;
    ///<summary>
    ///  Fill, then stroke text and add to path for clipping.
    ///</summary>
    FillThenStrokeTextAndAddPathToClipping = 6;
    ///<summary>
    ///  Add text to path for clipping.
    ///</summary>
    AddPathToClipping = 7;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Determines action that will be done after replace of text fragment to more short.
  ///  None - no action, replaced text may overlaps rest of the line;
  ///  AdjustSpaceWidth - tries adjust spaces between words to keep line length;
  ///  WholeWordsHyphenation - tries distribute words between paragraph lines to keep paragraph's right field;
  ///  ShiftRestOfLine - shifts rest of the line according to changing length of text, length of the line may be changed;
  ///  Default value is ShiftRestOfLine.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions+ReplaceAdjustment')]
  DNTextReplaceOptions_ReplaceAdjustment = type Integer;
  DNTextReplaceOptions_ReplaceAdjustmentHelper = record helper for DNTextReplaceOptions_ReplaceAdjustment
  public const
    ///<summary>
    ///  No action, replaced text may overlaps rest of the line
    ///</summary>
    None = 0;
    ///<summary>
    ///  Tries adjust spaces between words to keep line length
    ///</summary>
    AdjustSpaceWidth = 1;
    ///<summary>
    ///  Tries distribute words between paragraph lines to keep paragraph's right field
    ///</summary>
    WholeWordsHyphenation = 2;
    ///<summary>
    ///  (Default) Shifts rest of the line according to changing length of text, length of the line may be changed
    ///</summary>
    ShiftRestOfLine = 4;
  end;


  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Scope where replace text operation is applied
  ///  REPLACE_FIRST by default
  ///  This obsolete option was kept for compatibility. It affects to PdfContentEditor and has no effect to TextFragmentAbsorber.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions+Scope')]
  DNText_TextReplaceOptions_Scope = type Integer;
  DNText_TextReplaceOptions_ScopeHelper = record helper for DNText_TextReplaceOptions_Scope
  public const
    ///<summary>
    ///  Replace only first occurrence of the text on each of affected pages
    ///</summary>
    REPLACE_FIRST = 0;
    ///<summary>
    ///  Replace all text occurrences on all affected pages
    ///</summary>
    REPLACE_ALL = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enumeration of possible vertical alignment values.
  ///</summary>
  [DNTypeName('Aspose.Pdf.VerticalAlignment')]
  DNVerticalAlignment = type Integer;
  DNVerticalAlignmentHelper = record helper for DNVerticalAlignment
  public const
    ///<summary>
    ///  No alignment (use specified position).
    ///</summary>
    None = 0;
    ///<summary>
    ///  Align to top.
    ///</summary>
    Top = 1;
    ///<summary>
    ///  Center alignment.
    ///</summary>
    Center = 2;
    ///<summary>
    ///  Align to bottom.
    ///</summary>
    Bottom = 3;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Enum represented warning type.
  ///</summary>
  [DNTypeName('Aspose.Pdf.WarningType')]
  DNWarningType = type Integer;
  DNWarningTypeHelper = record helper for DNWarningType
  public const
    ///<summary>
    ///  The file is corrupted.
    ///</summary>
    SourceFileCorruption = 0;
    ///<summary>
    ///  Text/chart/image or other data is completely missing from either the documet tree following load, or the created document following save.
    ///</summary>
    DataLoss = 1;
    ///<summary>
    ///  Major formatting losses compared to the original document. This is for occasions when the formatting loss is substantial but the data is still there.
    ///</summary>
    MajorFormattingLoss = 2;
    ///<summary>
    ///  Minor formatting losses compared to the original document. This is for minor losses of fidelity.
    ///</summary>
    MinorFormattingLoss = 3;
    ///<summary>
    ///  Known issue that will prevent the document being opened by certain user agents, or previous versions of user agents.
    ///</summary>
    CompatibilityIssue = 4;
    ///<summary>
    ///  Invalid input stream type
    ///</summary>
    InvalidInputStreamType = 5;
    ///<summary>
    ///  The file has unexpected content.
    ///</summary>
    UnexpectedContent = 99;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This enum represents types of a XMP field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpFieldType')]
  DNXmpFieldType = type Integer;
  DNXmpFieldTypeHelper = record helper for DNXmpFieldType
  public const
    ///<summary>
    ///  This type represents a structure.
    ///</summary>
    Struct = 0;
    ///<summary>
    ///  This type represents a array.
    ///</summary>
    Array_ = 1;
    ///<summary>
    ///  This type represents a property.
    ///</summary>
    Property_ = 2;
    ///<summary>
    ///  This type represents a packet.
    ///</summary>
    Packet = 3;
    ///<summary>
    ///  This field represents an unknown type.
    ///</summary>
    Unknown = 4;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Property category: internal or external.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionCategoryType')]
  DNXmpPdfAExtensionCategoryType = type Integer;
  DNXmpPdfAExtensionCategoryTypeHelper = record helper for DNXmpPdfAExtensionCategoryType
  public const
    ///<summary>
    ///  Internal properties are created automatically from document content.
    ///</summary>
    Internal = 0;
    ///<summary>
    ///  External properties are based on user input.
    ///</summary>
    External_ = 1;
  end;


  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handling of such formatting errors
  ///</summary>
  [DNTypeName('Aspose.Pdf.XslFoLoadOptions+ParsingErrorsHandlingTypes')]
  DNXslFoLoadOptions_ParsingErrorsHandlingTypes = type Integer;
  DNXslFoLoadOptions_ParsingErrorsHandlingTypesHelper = record helper for DNXslFoLoadOptions_ParsingErrorsHandlingTypes
  public const
    ///<summary>
    ///  In this case converter will be instructed to try proceed
    ///  with conversion and ignore found formatting errors.
    ///  In this case success not guaranteed,
    ///  serious problems can occure later in converter,
    ///  anf in suck case will be thrown exception with list of found
    ///  formatting errors.
    ///</summary>
    TryIgnore = 0;
    ///<summary>
    ///  In this case conversion will be stopped immediately
    ///  and exception will be thrown immediately after detecting
    ///  of first formatting error
    ///</summary>
    ThrowExceptionImmediately = 1;
    ///<summary>
    ///  This is the most agile method - custom code must supply (in WarningCallback property) special
    ///  handler that will  be called when formatting error detected.
    ///  That handler can f.e. log or count errors etc and
    ///  will supply decision whether processing can be continued for this or that error.
    ///</summary>
    InvokeCustomHandler = 2;
  end;




type


{ declares }

  DNActionCollection = interface; // type: Aspose.Pdf.Annotations.ActionCollection, namespace: Aspose.Pdf.Annotations
  DNAnnotationCollection = interface; // type: Aspose.Pdf.Annotations.AnnotationCollection, namespace: Aspose.Pdf.Annotations
  DNAnnotationSelector = interface; // type: Aspose.Pdf.Annotations.AnnotationSelector, namespace: Aspose.Pdf.Annotations
  DNAppearanceDictionary = interface; // type: Aspose.Pdf.Annotations.AppearanceDictionary, namespace: Aspose.Pdf.Annotations
  DNBorder = interface; // type: Aspose.Pdf.Annotations.Border, namespace: Aspose.Pdf.Annotations
  DNCharacteristics = interface; // type: Aspose.Pdf.Annotations.Characteristics, namespace: Aspose.Pdf.Annotations
  DNDash = interface; // type: Aspose.Pdf.Annotations.Dash, namespace: Aspose.Pdf.Annotations
  DNDefaultAppearance = interface; // type: Aspose.Pdf.Annotations.DefaultAppearance, namespace: Aspose.Pdf.Annotations
  DNDocumentActionCollection = interface; // type: Aspose.Pdf.Annotations.DocumentActionCollection, namespace: Aspose.Pdf.Annotations
  DNExplicitDestination = interface; // type: Aspose.Pdf.Annotations.ExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNCustomExplicitDestination = interface; // type: Aspose.Pdf.Annotations.CustomExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBHExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBHExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitBVExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitBVExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitHExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitHExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitRExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitRExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFitVExplicitDestination = interface; // type: Aspose.Pdf.Annotations.FitVExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNXYZExplicitDestination = interface; // type: Aspose.Pdf.Annotations.XYZExplicitDestination, namespace: Aspose.Pdf.Annotations
  DNFixedPrint = interface; // type: Aspose.Pdf.Annotations.FixedPrint, namespace: Aspose.Pdf.Annotations
  DNIAnnotationVisitor = interface; // type: Aspose.Pdf.Annotations.IAnnotationVisitor, namespace: Aspose.Pdf.Annotations
  DNIAppointment = interface; // type: Aspose.Pdf.Annotations.IAppointment, namespace: Aspose.Pdf.Annotations
  DNMeasure = interface; // type: Aspose.Pdf.Annotations.Measure, namespace: Aspose.Pdf.Annotations
  DNMeasure_NumberFormat = interface; // type: Aspose.Pdf.Annotations.Measure+NumberFormat, namespace: Aspose.Pdf.Annotations
  DNMeasure_NumberFormatList = interface; // type: Aspose.Pdf.Annotations.Measure+NumberFormatList, namespace: Aspose.Pdf.Annotations
  DNMediaClip = interface; // type: Aspose.Pdf.Annotations.MediaClip, namespace: Aspose.Pdf.Annotations
  DNMediaClipData = interface; // type: Aspose.Pdf.Annotations.MediaClipData, namespace: Aspose.Pdf.Annotations
  DNMediaClipSection = interface; // type: Aspose.Pdf.Annotations.MediaClipSection, namespace: Aspose.Pdf.Annotations
  DNNamedDestination = interface; // type: Aspose.Pdf.Annotations.NamedDestination, namespace: Aspose.Pdf.Annotations
  DNPDF3DArtwork = interface; // type: Aspose.Pdf.Annotations.PDF3DArtwork, namespace: Aspose.Pdf.Annotations
  DNPDF3DContent = interface; // type: Aspose.Pdf.Annotations.PDF3DContent, namespace: Aspose.Pdf.Annotations
  DNPDF3DCrossSection = interface; // type: Aspose.Pdf.Annotations.PDF3DCrossSection, namespace: Aspose.Pdf.Annotations
  DNPDF3DCrossSectionArray = interface; // type: Aspose.Pdf.Annotations.PDF3DCrossSectionArray, namespace: Aspose.Pdf.Annotations
  DNPDF3DCuttingPlaneOrientation = interface; // type: Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation, namespace: Aspose.Pdf.Annotations
  DNPDF3DLightingScheme = interface; // type: Aspose.Pdf.Annotations.PDF3DLightingScheme, namespace: Aspose.Pdf.Annotations
  DNPDF3DRenderMode = interface; // type: Aspose.Pdf.Annotations.PDF3DRenderMode, namespace: Aspose.Pdf.Annotations
  DNPDF3DStream = interface; // type: Aspose.Pdf.Annotations.PDF3DStream, namespace: Aspose.Pdf.Annotations
  DNPDF3DView = interface; // type: Aspose.Pdf.Annotations.PDF3DView, namespace: Aspose.Pdf.Annotations
  DNPDF3DViewArray = interface; // type: Aspose.Pdf.Annotations.PDF3DViewArray, namespace: Aspose.Pdf.Annotations
  DNPdfAction = interface; // type: Aspose.Pdf.Annotations.PdfAction, namespace: Aspose.Pdf.Annotations
  DNGoToAction = interface; // type: Aspose.Pdf.Annotations.GoToAction, namespace: Aspose.Pdf.Annotations
  DNGoToRemoteAction = interface; // type: Aspose.Pdf.Annotations.GoToRemoteAction, namespace: Aspose.Pdf.Annotations
  DNGoToURIAction = interface; // type: Aspose.Pdf.Annotations.GoToURIAction, namespace: Aspose.Pdf.Annotations
  DNHideAction = interface; // type: Aspose.Pdf.Annotations.HideAction, namespace: Aspose.Pdf.Annotations
  DNImportDataAction = interface; // type: Aspose.Pdf.Annotations.ImportDataAction, namespace: Aspose.Pdf.Annotations
  DNJavascriptAction = interface; // type: Aspose.Pdf.Annotations.JavascriptAction, namespace: Aspose.Pdf.Annotations
  DNLaunchAction = interface; // type: Aspose.Pdf.Annotations.LaunchAction, namespace: Aspose.Pdf.Annotations
  DNNamedAction = interface; // type: Aspose.Pdf.Annotations.NamedAction, namespace: Aspose.Pdf.Annotations
  DNRenditionAction = interface; // type: Aspose.Pdf.Annotations.RenditionAction, namespace: Aspose.Pdf.Annotations
  DNSubmitFormAction = interface; // type: Aspose.Pdf.Annotations.SubmitFormAction, namespace: Aspose.Pdf.Annotations
  DNPdfActionCollection = interface; // type: Aspose.Pdf.Annotations.PdfActionCollection, namespace: Aspose.Pdf.Annotations
  DNRendition = interface; // type: Aspose.Pdf.Annotations.Rendition, namespace: Aspose.Pdf.Annotations
  DNMediaRendition = interface; // type: Aspose.Pdf.Annotations.MediaRendition, namespace: Aspose.Pdf.Annotations
  DNSelectorRendition = interface; // type: Aspose.Pdf.Annotations.SelectorRendition, namespace: Aspose.Pdf.Annotations
  DNSoundData = interface; // type: Aspose.Pdf.Annotations.SoundData, namespace: Aspose.Pdf.Annotations
  DNSoundSampleData = interface; // type: Aspose.Pdf.Annotations.SoundSampleData, namespace: Aspose.Pdf.Annotations
  DNTextStyle = interface; // type: Aspose.Pdf.Annotations.TextStyle, namespace: Aspose.Pdf.Annotations
  DNXfdfReader = interface; // type: Aspose.Pdf.Annotations.XfdfReader, namespace: Aspose.Pdf.Annotations
  DNArtifact = interface; // type: Aspose.Pdf.Artifact, namespace: Aspose.Pdf
  DNBackgroundArtifact = interface; // type: Aspose.Pdf.BackgroundArtifact, namespace: Aspose.Pdf
  DNFooterArtifact = interface; // type: Aspose.Pdf.FooterArtifact, namespace: Aspose.Pdf
  DNHeaderArtifact = interface; // type: Aspose.Pdf.HeaderArtifact, namespace: Aspose.Pdf
  DNWatermarkArtifact = interface; // type: Aspose.Pdf.WatermarkArtifact, namespace: Aspose.Pdf
  DNArtifactCollection = interface; // type: Aspose.Pdf.ArtifactCollection, namespace: Aspose.Pdf
  DNBaseActionCollection = interface; // type: Aspose.Pdf.BaseActionCollection, namespace: Aspose.Pdf
  DNAnnotationActionCollection = interface; // type: Aspose.Pdf.Annotations.AnnotationActionCollection, namespace: Aspose.Pdf.Annotations
  DNPageActionCollection = interface; // type: Aspose.Pdf.PageActionCollection, namespace: Aspose.Pdf
  DNBaseOperatorCollection = interface; // type: Aspose.Pdf.BaseOperatorCollection, namespace: Aspose.Pdf
  DNOperatorCollection = interface; // type: Aspose.Pdf.OperatorCollection, namespace: Aspose.Pdf
  DNBaseParagraph = interface; // type: Aspose.Pdf.BaseParagraph, namespace: Aspose.Pdf
  DNAnnotation = interface; // type: Aspose.Pdf.Annotations.Annotation, namespace: Aspose.Pdf.Annotations
  DNLinkAnnotation = interface; // type: Aspose.Pdf.Annotations.LinkAnnotation, namespace: Aspose.Pdf.Annotations
  DNMarkupAnnotation = interface; // type: Aspose.Pdf.Annotations.MarkupAnnotation, namespace: Aspose.Pdf.Annotations
  DNCaretAnnotation = interface; // type: Aspose.Pdf.Annotations.CaretAnnotation, namespace: Aspose.Pdf.Annotations
  DNCommonFigureAnnotation = interface; // type: Aspose.Pdf.Annotations.CommonFigureAnnotation, namespace: Aspose.Pdf.Annotations
  DNCircleAnnotation = interface; // type: Aspose.Pdf.Annotations.CircleAnnotation, namespace: Aspose.Pdf.Annotations
  DNSquareAnnotation = interface; // type: Aspose.Pdf.Annotations.SquareAnnotation, namespace: Aspose.Pdf.Annotations
  DNFileAttachmentAnnotation = interface; // type: Aspose.Pdf.Annotations.FileAttachmentAnnotation, namespace: Aspose.Pdf.Annotations
  DNFreeTextAnnotation = interface; // type: Aspose.Pdf.Annotations.FreeTextAnnotation, namespace: Aspose.Pdf.Annotations
  DNInkAnnotation = interface; // type: Aspose.Pdf.Annotations.InkAnnotation, namespace: Aspose.Pdf.Annotations
  DNLineAnnotation = interface; // type: Aspose.Pdf.Annotations.LineAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolyAnnotation = interface; // type: Aspose.Pdf.Annotations.PolyAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolygonAnnotation = interface; // type: Aspose.Pdf.Annotations.PolygonAnnotation, namespace: Aspose.Pdf.Annotations
  DNPolylineAnnotation = interface; // type: Aspose.Pdf.Annotations.PolylineAnnotation, namespace: Aspose.Pdf.Annotations
  DNRedactionAnnotation = interface; // type: Aspose.Pdf.Annotations.RedactionAnnotation, namespace: Aspose.Pdf.Annotations
  DNSoundAnnotation = interface; // type: Aspose.Pdf.Annotations.SoundAnnotation, namespace: Aspose.Pdf.Annotations
  DNStampAnnotation = interface; // type: Aspose.Pdf.Annotations.StampAnnotation, namespace: Aspose.Pdf.Annotations
  DNTextAnnotation = interface; // type: Aspose.Pdf.Annotations.TextAnnotation, namespace: Aspose.Pdf.Annotations
  DNTextMarkupAnnotation = interface; // type: Aspose.Pdf.Annotations.TextMarkupAnnotation, namespace: Aspose.Pdf.Annotations
  DNHighlightAnnotation = interface; // type: Aspose.Pdf.Annotations.HighlightAnnotation, namespace: Aspose.Pdf.Annotations
  DNSquigglyAnnotation = interface; // type: Aspose.Pdf.Annotations.SquigglyAnnotation, namespace: Aspose.Pdf.Annotations
  DNStrikeOutAnnotation = interface; // type: Aspose.Pdf.Annotations.StrikeOutAnnotation, namespace: Aspose.Pdf.Annotations
  DNUnderlineAnnotation = interface; // type: Aspose.Pdf.Annotations.UnderlineAnnotation, namespace: Aspose.Pdf.Annotations
  DNMovieAnnotation = interface; // type: Aspose.Pdf.Annotations.MovieAnnotation, namespace: Aspose.Pdf.Annotations
  DNPDF3DAnnotation = interface; // type: Aspose.Pdf.Annotations.PDF3DAnnotation, namespace: Aspose.Pdf.Annotations
  DNPopupAnnotation = interface; // type: Aspose.Pdf.Annotations.PopupAnnotation, namespace: Aspose.Pdf.Annotations
  DNRichMediaAnnotation = interface; // type: Aspose.Pdf.Annotations.RichMediaAnnotation, namespace: Aspose.Pdf.Annotations
  DNScreenAnnotation = interface; // type: Aspose.Pdf.Annotations.ScreenAnnotation, namespace: Aspose.Pdf.Annotations
  DNWatermarkAnnotation = interface; // type: Aspose.Pdf.Annotations.WatermarkAnnotation, namespace: Aspose.Pdf.Annotations
  DNWidgetAnnotation = interface; // type: Aspose.Pdf.Annotations.WidgetAnnotation, namespace: Aspose.Pdf.Annotations
  DNField = interface; // type: Aspose.Pdf.Forms.Field, namespace: Aspose.Pdf.Forms
  DNButtonField = interface; // type: Aspose.Pdf.Forms.ButtonField, namespace: Aspose.Pdf.Forms
  DNCheckboxField = interface; // type: Aspose.Pdf.Forms.CheckboxField, namespace: Aspose.Pdf.Forms
  DNChoiceField = interface; // type: Aspose.Pdf.Forms.ChoiceField, namespace: Aspose.Pdf.Forms
  DNComboBoxField = interface; // type: Aspose.Pdf.Forms.ComboBoxField, namespace: Aspose.Pdf.Forms
  DNListBoxField = interface; // type: Aspose.Pdf.Forms.ListBoxField, namespace: Aspose.Pdf.Forms
  DNRadioButtonField = interface; // type: Aspose.Pdf.Forms.RadioButtonField, namespace: Aspose.Pdf.Forms
  DNRadioButtonOptionField = interface; // type: Aspose.Pdf.Forms.RadioButtonOptionField, namespace: Aspose.Pdf.Forms
  DNSignatureField = interface; // type: Aspose.Pdf.Forms.SignatureField, namespace: Aspose.Pdf.Forms
  DNTextBoxField = interface; // type: Aspose.Pdf.Forms.TextBoxField, namespace: Aspose.Pdf.Forms
  DNBarcodeField = interface; // type: Aspose.Pdf.Forms.BarcodeField, namespace: Aspose.Pdf.Forms
  DNFileSelectBoxField = interface; // type: Aspose.Pdf.Forms.FileSelectBoxField, namespace: Aspose.Pdf.Forms
  DNPasswordBoxField = interface; // type: Aspose.Pdf.Forms.PasswordBoxField, namespace: Aspose.Pdf.Forms
  DNRichTextBoxField = interface; // type: Aspose.Pdf.Forms.RichTextBoxField, namespace: Aspose.Pdf.Forms
  DNGraph = interface; // type: Aspose.Pdf.Drawing.Graph, namespace: Aspose.Pdf.Drawing
  DNFloatingBox = interface; // type: Aspose.Pdf.FloatingBox, namespace: Aspose.Pdf
  DNFormattedFragment = interface; // type: Aspose.Pdf.FormattedFragment, namespace: Aspose.Pdf
  DNHtmlFragment = interface; // type: Aspose.Pdf.HtmlFragment, namespace: Aspose.Pdf
  DNTeXFragment = interface; // type: Aspose.Pdf.TeXFragment, namespace: Aspose.Pdf
  DNLatexFragment = interface; // type: Aspose.Pdf.LatexFragment, namespace: Aspose.Pdf
  DNImage = interface; // type: Aspose.Pdf.Image, namespace: Aspose.Pdf
  DNTable = interface; // type: Aspose.Pdf.Table, namespace: Aspose.Pdf
  DNTextFragment = interface; // type: Aspose.Pdf.Text.TextFragment, namespace: Aspose.Pdf.Text
  DNHeading = interface; // type: Aspose.Pdf.Heading, namespace: Aspose.Pdf
  DNBorderInfo = interface; // type: Aspose.Pdf.BorderInfo, namespace: Aspose.Pdf
  DNBuildVersionInfo = interface; // type: Aspose.Pdf.BuildVersionInfo, namespace: Aspose.Pdf
  DNCell = interface; // type: Aspose.Pdf.Cell, namespace: Aspose.Pdf
  DNCells = interface; // type: Aspose.Pdf.Cells, namespace: Aspose.Pdf
  DNColor = interface; // type: Aspose.Pdf.Color, namespace: Aspose.Pdf
  DNColumnInfo = interface; // type: Aspose.Pdf.ColumnInfo, namespace: Aspose.Pdf
  DNComHelper = interface; // type: Aspose.Pdf.ComHelper, namespace: Aspose.Pdf
  DNCompositingParameters = interface; // type: Aspose.Pdf.CompositingParameters, namespace: Aspose.Pdf
  DNDestinationCollection = interface; // type: Aspose.Pdf.DestinationCollection, namespace: Aspose.Pdf
  DNDevice = interface; // type: Aspose.Pdf.Devices.Device, namespace: Aspose.Pdf.Devices
  DNDocumentDevice = interface; // type: Aspose.Pdf.Devices.DocumentDevice, namespace: Aspose.Pdf.Devices
  DNTiffDevice = interface; // type: Aspose.Pdf.Devices.TiffDevice, namespace: Aspose.Pdf.Devices
  DNPageDevice = interface; // type: Aspose.Pdf.Devices.PageDevice, namespace: Aspose.Pdf.Devices
  DNImageDevice = interface; // type: Aspose.Pdf.Devices.ImageDevice, namespace: Aspose.Pdf.Devices
  DNBmpDevice = interface; // type: Aspose.Pdf.Devices.BmpDevice, namespace: Aspose.Pdf.Devices
  DNEmfDevice = interface; // type: Aspose.Pdf.Devices.EmfDevice, namespace: Aspose.Pdf.Devices
  DNGifDevice = interface; // type: Aspose.Pdf.Devices.GifDevice, namespace: Aspose.Pdf.Devices
  DNJpegDevice = interface; // type: Aspose.Pdf.Devices.JpegDevice, namespace: Aspose.Pdf.Devices
  DNPngDevice = interface; // type: Aspose.Pdf.Devices.PngDevice, namespace: Aspose.Pdf.Devices
  DNTextDevice = interface; // type: Aspose.Pdf.Devices.TextDevice, namespace: Aspose.Pdf.Devices
  DNMargins = interface; // type: Aspose.Pdf.Devices.Margins, namespace: Aspose.Pdf.Devices
  DNResolution = interface; // type: Aspose.Pdf.Devices.Resolution, namespace: Aspose.Pdf.Devices
  DNTiffSettings = interface; // type: Aspose.Pdf.Devices.TiffSettings, namespace: Aspose.Pdf.Devices
  DNDocument = interface; // type: Aspose.Pdf.Document, namespace: Aspose.Pdf
  DNDocument_IDocumentFontUtilities = interface; // type: Aspose.Pdf.Document+IDocumentFontUtilities, namespace: Aspose.Pdf
  DNDocumentFactory = interface; // type: Aspose.Pdf.DocumentFactory, namespace: Aspose.Pdf
  DNPatternColorSpace = interface; // type: Aspose.Pdf.Drawing.PatternColorSpace, namespace: Aspose.Pdf.Drawing
  DNGradientAxialShading = interface; // type: Aspose.Pdf.Drawing.GradientAxialShading, namespace: Aspose.Pdf.Drawing
  DNGradientRadialShading = interface; // type: Aspose.Pdf.Drawing.GradientRadialShading, namespace: Aspose.Pdf.Drawing
  DNShape = interface; // type: Aspose.Pdf.Drawing.Shape, namespace: Aspose.Pdf.Drawing
  DNArc = interface; // type: Aspose.Pdf.Drawing.Arc, namespace: Aspose.Pdf.Drawing
  DNCircle = interface; // type: Aspose.Pdf.Drawing.Circle, namespace: Aspose.Pdf.Drawing
  DNCurve = interface; // type: Aspose.Pdf.Drawing.Curve, namespace: Aspose.Pdf.Drawing
  DNEllipse = interface; // type: Aspose.Pdf.Drawing.Ellipse, namespace: Aspose.Pdf.Drawing
  DNLine = interface; // type: Aspose.Pdf.Drawing.Line, namespace: Aspose.Pdf.Drawing
  DNPath = interface; // type: Aspose.Pdf.Drawing.Path, namespace: Aspose.Pdf.Drawing
  DNDrawing_Rectangle = interface; // type: Aspose.Pdf.Drawing.Rectangle, namespace: Aspose.Pdf.Drawing
  DNEmbeddedFileCollection = interface; // type: Aspose.Pdf.EmbeddedFileCollection, namespace: Aspose.Pdf
  DNCollection = interface; // type: Aspose.Pdf.Collection, namespace: Aspose.Pdf
  DNEncryptedPayload = interface; // type: Aspose.Pdf.EncryptedPayload, namespace: Aspose.Pdf
  DNAlignmentType = interface; // type: Aspose.Pdf.Facades.AlignmentType, namespace: Aspose.Pdf.Facades
  DNAutoFiller = interface; // type: Aspose.Pdf.Facades.AutoFiller, namespace: Aspose.Pdf.Facades
  DNBookmark = interface; // type: Aspose.Pdf.Facades.Bookmark, namespace: Aspose.Pdf.Facades
  DNDocumentPrivilege = interface; // type: Aspose.Pdf.Facades.DocumentPrivilege, namespace: Aspose.Pdf.Facades
  DNFacade = interface; // type: Aspose.Pdf.Facades.Facade, namespace: Aspose.Pdf.Facades
  DNPdfConverter = interface; // type: Aspose.Pdf.Facades.PdfConverter, namespace: Aspose.Pdf.Facades
  DNPdfExtractor = interface; // type: Aspose.Pdf.Facades.PdfExtractor, namespace: Aspose.Pdf.Facades
  DNSaveableFacade = interface; // type: Aspose.Pdf.Facades.SaveableFacade, namespace: Aspose.Pdf.Facades
  DNFacades_Form = interface; // type: Aspose.Pdf.Facades.Form, namespace: Aspose.Pdf.Facades
  DNFormEditor = interface; // type: Aspose.Pdf.Facades.FormEditor, namespace: Aspose.Pdf.Facades
  DNPdfAnnotationEditor = interface; // type: Aspose.Pdf.Facades.PdfAnnotationEditor, namespace: Aspose.Pdf.Facades
  DNPdfBookmarkEditor = interface; // type: Aspose.Pdf.Facades.PdfBookmarkEditor, namespace: Aspose.Pdf.Facades
  DNPdfContentEditor = interface; // type: Aspose.Pdf.Facades.PdfContentEditor, namespace: Aspose.Pdf.Facades
  DNPdfFileInfo = interface; // type: Aspose.Pdf.Facades.PdfFileInfo, namespace: Aspose.Pdf.Facades
  DNPdfFileMend = interface; // type: Aspose.Pdf.Facades.PdfFileMend, namespace: Aspose.Pdf.Facades
  DNPdfFileSecurity = interface; // type: Aspose.Pdf.Facades.PdfFileSecurity, namespace: Aspose.Pdf.Facades
  DNPdfFileSignature = interface; // type: Aspose.Pdf.Facades.PdfFileSignature, namespace: Aspose.Pdf.Facades
  DNPdfFileStamp = interface; // type: Aspose.Pdf.Facades.PdfFileStamp, namespace: Aspose.Pdf.Facades
  DNPdfPageEditor = interface; // type: Aspose.Pdf.Facades.PdfPageEditor, namespace: Aspose.Pdf.Facades
  DNPdfXmpMetadata = interface; // type: Aspose.Pdf.Facades.PdfXmpMetadata, namespace: Aspose.Pdf.Facades
  DNFontColor = interface; // type: Aspose.Pdf.Facades.FontColor, namespace: Aspose.Pdf.Facades
  DNForm_FormImportResult = interface; // type: Aspose.Pdf.Facades.Form+FormImportResult, namespace: Aspose.Pdf.Facades
  DNFormattedText = interface; // type: Aspose.Pdf.Facades.FormattedText, namespace: Aspose.Pdf.Facades
  DNFormDataConverter = interface; // type: Aspose.Pdf.Facades.FormDataConverter, namespace: Aspose.Pdf.Facades
  DNFormFieldFacade = interface; // type: Aspose.Pdf.Facades.FormFieldFacade, namespace: Aspose.Pdf.Facades
  DNLineInfo = interface; // type: Aspose.Pdf.Facades.LineInfo, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor = interface; // type: Aspose.Pdf.Facades.PdfFileEditor, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_ContentsResizeParameters = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeParameters, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_ContentsResizeValue = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeValue, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_CorruptedItem = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+CorruptedItem, namespace: Aspose.Pdf.Facades
  DNPdfFileEditor_PageBreak = interface; // type: Aspose.Pdf.Facades.PdfFileEditor+PageBreak, namespace: Aspose.Pdf.Facades
  DNPdfJavaScriptStripper = interface; // type: Aspose.Pdf.Facades.PdfJavaScriptStripper, namespace: Aspose.Pdf.Facades
  DNPdfPrintPageInfo = interface; // type: Aspose.Pdf.Facades.PdfPrintPageInfo, namespace: Aspose.Pdf.Facades
  DNPdfProducer = interface; // type: Aspose.Pdf.Facades.PdfProducer, namespace: Aspose.Pdf.Facades
  DNPdfViewer = interface; // type: Aspose.Pdf.Facades.PdfViewer, namespace: Aspose.Pdf.Facades
  DNReplaceTextStrategy = interface; // type: Aspose.Pdf.Facades.ReplaceTextStrategy, namespace: Aspose.Pdf.Facades
  DNFacades_Stamp = interface; // type: Aspose.Pdf.Facades.Stamp, namespace: Aspose.Pdf.Facades
  DNStampInfo = interface; // type: Aspose.Pdf.Facades.StampInfo, namespace: Aspose.Pdf.Facades
  DNTextProperties = interface; // type: Aspose.Pdf.Facades.TextProperties, namespace: Aspose.Pdf.Facades
  DNVerticalAlignmentType = interface; // type: Aspose.Pdf.Facades.VerticalAlignmentType, namespace: Aspose.Pdf.Facades
  DNViewerPreference = interface; // type: Aspose.Pdf.Facades.ViewerPreference, namespace: Aspose.Pdf.Facades
  DNFileParams = interface; // type: Aspose.Pdf.FileParams, namespace: Aspose.Pdf
  DNFileSpecification = interface; // type: Aspose.Pdf.FileSpecification, namespace: Aspose.Pdf
  DNDocMDPSignature = interface; // type: Aspose.Pdf.Forms.DocMDPSignature, namespace: Aspose.Pdf.Forms
  DNForms_Form = interface; // type: Aspose.Pdf.Forms.Form, namespace: Aspose.Pdf.Forms
  DNForm_FlattenSettings = interface; // type: Aspose.Pdf.Forms.Form+FlattenSettings, namespace: Aspose.Pdf.Forms
  DNIconFit = interface; // type: Aspose.Pdf.Forms.IconFit, namespace: Aspose.Pdf.Forms
  DNOption = interface; // type: Aspose.Pdf.Forms.Option, namespace: Aspose.Pdf.Forms
  DNOptionCollection = interface; // type: Aspose.Pdf.Forms.OptionCollection, namespace: Aspose.Pdf.Forms
  DNSignature = interface; // type: Aspose.Pdf.Forms.Signature, namespace: Aspose.Pdf.Forms
  DNExternalSignature = interface; // type: Aspose.Pdf.Forms.ExternalSignature, namespace: Aspose.Pdf.Forms
  DNPKCS1 = interface; // type: Aspose.Pdf.Forms.PKCS1, namespace: Aspose.Pdf.Forms
  DNPKCS7 = interface; // type: Aspose.Pdf.Forms.PKCS7, namespace: Aspose.Pdf.Forms
  DNPKCS7Detached = interface; // type: Aspose.Pdf.Forms.PKCS7Detached, namespace: Aspose.Pdf.Forms
  DNSignatureCustomAppearance = interface; // type: Aspose.Pdf.Forms.SignatureCustomAppearance, namespace: Aspose.Pdf.Forms
  DNXFA = interface; // type: Aspose.Pdf.Forms.XFA, namespace: Aspose.Pdf.Forms
  DNGraphInfo = interface; // type: Aspose.Pdf.GraphInfo, namespace: Aspose.Pdf
  DNGroup = interface; // type: Aspose.Pdf.Group, namespace: Aspose.Pdf
  DNPdfTypeObjectCreator = interface; // type: Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator, namespace: Aspose.Pdf.GroupProcessor.Creators
  DNExtractorFactory = interface; // type: Aspose.Pdf.GroupProcessor.ExtractorFactory, namespace: Aspose.Pdf.GroupProcessor
  DNIDocumentPageTextExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IDocumentPageTextExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNIDocumentTextExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IDocumentTextExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNIPdfTypeExtractor = interface; // type: Aspose.Pdf.GroupProcessor.IPdfTypeExtractor, namespace: Aspose.Pdf.GroupProcessor
  DNHeaderFooter = interface; // type: Aspose.Pdf.HeaderFooter, namespace: Aspose.Pdf
  DNHtmlSaveOptions_CssSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+CssSavingInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_CssUrlRequestInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+CssUrlRequestInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingInfo, namespace: Aspose.Pdf
  DNHyperlink = interface; // type: Aspose.Pdf.Hyperlink, namespace: Aspose.Pdf
  DNFileHyperlink = interface; // type: Aspose.Pdf.FileHyperlink, namespace: Aspose.Pdf
  DNLocalHyperlink = interface; // type: Aspose.Pdf.LocalHyperlink, namespace: Aspose.Pdf
  DNWebHyperlink = interface; // type: Aspose.Pdf.WebHyperlink, namespace: Aspose.Pdf
  DNIColorSpaceConversionStrategy = interface; // type: Aspose.Pdf.IColorSpaceConversionStrategy, namespace: Aspose.Pdf
  DNId = interface; // type: Aspose.Pdf.Id, namespace: Aspose.Pdf
  DNIIndexBitmapConverter = interface; // type: Aspose.Pdf.IIndexBitmapConverter, namespace: Aspose.Pdf
  DNImagePlacement = interface; // type: Aspose.Pdf.ImagePlacement, namespace: Aspose.Pdf
  DNImagePlacementAbsorber = interface; // type: Aspose.Pdf.ImagePlacementAbsorber, namespace: Aspose.Pdf
  DNImagePlacementCollection = interface; // type: Aspose.Pdf.ImagePlacementCollection, namespace: Aspose.Pdf
  DNImportOptions = interface; // type: Aspose.Pdf.ImportOptions, namespace: Aspose.Pdf
  DNCgmImportOptions = interface; // type: Aspose.Pdf.CgmImportOptions, namespace: Aspose.Pdf
  DNINamedDestinationCollection = interface; // type: Aspose.Pdf.INamedDestinationCollection, namespace: Aspose.Pdf
  DNIOperatorSelector = interface; // type: Aspose.Pdf.IOperatorSelector, namespace: Aspose.Pdf
  DNIPageSetOptions = interface; // type: Aspose.Pdf.IPageSetOptions, namespace: Aspose.Pdf
  DNIPipelineOptions = interface; // type: Aspose.Pdf.IPipelineOptions, namespace: Aspose.Pdf
  DNIResourceLoadingCallback = interface; // type: Aspose.Pdf.IResourceLoadingCallback, namespace: Aspose.Pdf
  DNIWarningCallback = interface; // type: Aspose.Pdf.IWarningCallback, namespace: Aspose.Pdf
  DNJavaScriptCollection = interface; // type: Aspose.Pdf.JavaScriptCollection, namespace: Aspose.Pdf
  DNLayer = interface; // type: Aspose.Pdf.Layer, namespace: Aspose.Pdf
  DNLevelFormat = interface; // type: Aspose.Pdf.LevelFormat, namespace: Aspose.Pdf
  DNLicense = interface; // type: Aspose.Pdf.License, namespace: Aspose.Pdf
  DNLoadOptions = interface; // type: Aspose.Pdf.LoadOptions, namespace: Aspose.Pdf
  DNApsLoadOptions = interface; // type: Aspose.Pdf.ApsLoadOptions, namespace: Aspose.Pdf
  DNCgmLoadOptions = interface; // type: Aspose.Pdf.CgmLoadOptions, namespace: Aspose.Pdf
  DNEpubLoadOptions = interface; // type: Aspose.Pdf.EpubLoadOptions, namespace: Aspose.Pdf
  DNHtmlLoadOptions = interface; // type: Aspose.Pdf.HtmlLoadOptions, namespace: Aspose.Pdf
  DNMdLoadOptions = interface; // type: Aspose.Pdf.MdLoadOptions, namespace: Aspose.Pdf
  DNMhtLoadOptions = interface; // type: Aspose.Pdf.MhtLoadOptions, namespace: Aspose.Pdf
  DNPclLoadOptions = interface; // type: Aspose.Pdf.PclLoadOptions, namespace: Aspose.Pdf
  DNPdfXmlLoadOptions = interface; // type: Aspose.Pdf.PdfXmlLoadOptions, namespace: Aspose.Pdf
  DNPsLoadOptions = interface; // type: Aspose.Pdf.PsLoadOptions, namespace: Aspose.Pdf
  DNSvgLoadOptions = interface; // type: Aspose.Pdf.SvgLoadOptions, namespace: Aspose.Pdf
  DNTeXLoadOptions = interface; // type: Aspose.Pdf.TeXLoadOptions, namespace: Aspose.Pdf
  DNLatexLoadOptions = interface; // type: Aspose.Pdf.LatexLoadOptions, namespace: Aspose.Pdf
  DNTxtLoadOptions = interface; // type: Aspose.Pdf.TxtLoadOptions, namespace: Aspose.Pdf
  DNXmlLoadOptions = interface; // type: Aspose.Pdf.XmlLoadOptions, namespace: Aspose.Pdf
  DNXslFoLoadOptions = interface; // type: Aspose.Pdf.XslFoLoadOptions, namespace: Aspose.Pdf
  DNXpsLoadOptions = interface; // type: Aspose.Pdf.XpsLoadOptions, namespace: Aspose.Pdf
  DNLoadOptions_ResourceLoadingResult = interface; // type: Aspose.Pdf.LoadOptions+ResourceLoadingResult, namespace: Aspose.Pdf
  DNAttributeKey = interface; // type: Aspose.Pdf.LogicalStructure.AttributeKey, namespace: Aspose.Pdf.LogicalStructure
  DNAttributeName = interface; // type: Aspose.Pdf.LogicalStructure.AttributeName, namespace: Aspose.Pdf.LogicalStructure
  DNAttributeOwnerStandard = interface; // type: Aspose.Pdf.LogicalStructure.AttributeOwnerStandard, namespace: Aspose.Pdf.LogicalStructure
  DNLogicalStructure_Element = interface; // type: Aspose.Pdf.LogicalStructure.Element, namespace: Aspose.Pdf.LogicalStructure
  DNMCRElement = interface; // type: Aspose.Pdf.LogicalStructure.MCRElement, namespace: Aspose.Pdf.LogicalStructure
  DNOBJRElement = interface; // type: Aspose.Pdf.LogicalStructure.OBJRElement, namespace: Aspose.Pdf.LogicalStructure
  DNStructTreeRootElement = interface; // type: Aspose.Pdf.LogicalStructure.StructTreeRootElement, namespace: Aspose.Pdf.LogicalStructure
  DNStructureElement = interface; // type: Aspose.Pdf.LogicalStructure.StructureElement, namespace: Aspose.Pdf.LogicalStructure
  DNBLSElement = interface; // type: Aspose.Pdf.LogicalStructure.BLSElement, namespace: Aspose.Pdf.LogicalStructure
  DNBLSTextElement = interface; // type: Aspose.Pdf.LogicalStructure.BLSTextElement, namespace: Aspose.Pdf.LogicalStructure
  DNHeaderElement = interface; // type: Aspose.Pdf.LogicalStructure.HeaderElement, namespace: Aspose.Pdf.LogicalStructure
  DNParagraphElement = interface; // type: Aspose.Pdf.LogicalStructure.ParagraphElement, namespace: Aspose.Pdf.LogicalStructure
  DNListElement = interface; // type: Aspose.Pdf.LogicalStructure.ListElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableElement = interface; // type: Aspose.Pdf.LogicalStructure.TableElement, namespace: Aspose.Pdf.LogicalStructure
  DNGroupingElement = interface; // type: Aspose.Pdf.LogicalStructure.GroupingElement, namespace: Aspose.Pdf.LogicalStructure
  DNArtElement = interface; // type: Aspose.Pdf.LogicalStructure.ArtElement, namespace: Aspose.Pdf.LogicalStructure
  DNBlockQuoteElement = interface; // type: Aspose.Pdf.LogicalStructure.BlockQuoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNCaptionElement = interface; // type: Aspose.Pdf.LogicalStructure.CaptionElement, namespace: Aspose.Pdf.LogicalStructure
  DNDivElement = interface; // type: Aspose.Pdf.LogicalStructure.DivElement, namespace: Aspose.Pdf.LogicalStructure
  DNDocumentElement = interface; // type: Aspose.Pdf.LogicalStructure.DocumentElement, namespace: Aspose.Pdf.LogicalStructure
  DNIndexElement = interface; // type: Aspose.Pdf.LogicalStructure.IndexElement, namespace: Aspose.Pdf.LogicalStructure
  DNNonStructElement = interface; // type: Aspose.Pdf.LogicalStructure.NonStructElement, namespace: Aspose.Pdf.LogicalStructure
  DNPartElement = interface; // type: Aspose.Pdf.LogicalStructure.PartElement, namespace: Aspose.Pdf.LogicalStructure
  DNPrivateElement = interface; // type: Aspose.Pdf.LogicalStructure.PrivateElement, namespace: Aspose.Pdf.LogicalStructure
  DNSectElement = interface; // type: Aspose.Pdf.LogicalStructure.SectElement, namespace: Aspose.Pdf.LogicalStructure
  DNTOCElement = interface; // type: Aspose.Pdf.LogicalStructure.TOCElement, namespace: Aspose.Pdf.LogicalStructure
  DNTOCIElement = interface; // type: Aspose.Pdf.LogicalStructure.TOCIElement, namespace: Aspose.Pdf.LogicalStructure
  DNIllustrationElement = interface; // type: Aspose.Pdf.LogicalStructure.IllustrationElement, namespace: Aspose.Pdf.LogicalStructure
  DNLogicalStructure_FigureElement = interface; // type: Aspose.Pdf.LogicalStructure.FigureElement, namespace: Aspose.Pdf.LogicalStructure
  DNFormElement = interface; // type: Aspose.Pdf.LogicalStructure.FormElement, namespace: Aspose.Pdf.LogicalStructure
  DNFormulaElement = interface; // type: Aspose.Pdf.LogicalStructure.FormulaElement, namespace: Aspose.Pdf.LogicalStructure
  DNILSElement = interface; // type: Aspose.Pdf.LogicalStructure.ILSElement, namespace: Aspose.Pdf.LogicalStructure
  DNAnnotationElement = interface; // type: Aspose.Pdf.LogicalStructure.AnnotationElement, namespace: Aspose.Pdf.LogicalStructure
  DNAnnotElement = interface; // type: Aspose.Pdf.LogicalStructure.AnnotElement, namespace: Aspose.Pdf.LogicalStructure
  DNLinkElement = interface; // type: Aspose.Pdf.LogicalStructure.LinkElement, namespace: Aspose.Pdf.LogicalStructure
  DNBibEntryElement = interface; // type: Aspose.Pdf.LogicalStructure.BibEntryElement, namespace: Aspose.Pdf.LogicalStructure
  DNILSTextElement = interface; // type: Aspose.Pdf.LogicalStructure.ILSTextElement, namespace: Aspose.Pdf.LogicalStructure
  DNCodeElement = interface; // type: Aspose.Pdf.LogicalStructure.CodeElement, namespace: Aspose.Pdf.LogicalStructure
  DNNoteElement = interface; // type: Aspose.Pdf.LogicalStructure.NoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNQuoteElement = interface; // type: Aspose.Pdf.LogicalStructure.QuoteElement, namespace: Aspose.Pdf.LogicalStructure
  DNSpanElement = interface; // type: Aspose.Pdf.LogicalStructure.SpanElement, namespace: Aspose.Pdf.LogicalStructure
  DNReferenceElement = interface; // type: Aspose.Pdf.LogicalStructure.ReferenceElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuElement, namespace: Aspose.Pdf.LogicalStructure
  DNListChildElement = interface; // type: Aspose.Pdf.LogicalStructure.ListChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLblElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLblElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLBodyElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLBodyElement, namespace: Aspose.Pdf.LogicalStructure
  DNListLIElement = interface; // type: Aspose.Pdf.LogicalStructure.ListLIElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyChildElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRBElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRBElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRPElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRPElement, namespace: Aspose.Pdf.LogicalStructure
  DNRubyRTElement = interface; // type: Aspose.Pdf.LogicalStructure.RubyRTElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableChildElement = interface; // type: Aspose.Pdf.LogicalStructure.TableChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableCellElement = interface; // type: Aspose.Pdf.LogicalStructure.TableCellElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTDElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTDElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTHElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTHElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableRowCollectionElement = interface; // type: Aspose.Pdf.LogicalStructure.TableRowCollectionElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTBodyElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTBodyElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTFootElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTFootElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTHeadElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTHeadElement, namespace: Aspose.Pdf.LogicalStructure
  DNTableTRElement = interface; // type: Aspose.Pdf.LogicalStructure.TableTRElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuChildElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuChildElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuWPElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuWPElement, namespace: Aspose.Pdf.LogicalStructure
  DNWarichuWTElement = interface; // type: Aspose.Pdf.LogicalStructure.WarichuWTElement, namespace: Aspose.Pdf.LogicalStructure
  DNElementList = interface; // type: Aspose.Pdf.LogicalStructure.ElementList, namespace: Aspose.Pdf.LogicalStructure
  DNITextElement = interface; // type: Aspose.Pdf.LogicalStructure.ITextElement, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttribute = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttribute, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttributeCollection = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttributeCollection, namespace: Aspose.Pdf.LogicalStructure
  DNStructureAttributes = interface; // type: Aspose.Pdf.LogicalStructure.StructureAttributes, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTextState = interface; // type: Aspose.Pdf.LogicalStructure.StructureTextState, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTypeCategory = interface; // type: Aspose.Pdf.LogicalStructure.StructureTypeCategory, namespace: Aspose.Pdf.LogicalStructure
  DNStructureTypeStandard = interface; // type: Aspose.Pdf.LogicalStructure.StructureTypeStandard, namespace: Aspose.Pdf.LogicalStructure
  DNMarginInfo = interface; // type: Aspose.Pdf.MarginInfo, namespace: Aspose.Pdf
  DNMatrix = interface; // type: Aspose.Pdf.Matrix, namespace: Aspose.Pdf
  DNMatrix3D = interface; // type: Aspose.Pdf.Matrix3D, namespace: Aspose.Pdf
  DNMetadata = interface; // type: Aspose.Pdf.Metadata, namespace: Aspose.Pdf
  DNMetered = interface; // type: Aspose.Pdf.Metered, namespace: Aspose.Pdf
  DNNamedDestinationCollection = interface; // type: Aspose.Pdf.NamedDestinationCollection, namespace: Aspose.Pdf
  DNNote = interface; // type: Aspose.Pdf.Note, namespace: Aspose.Pdf
  DNOcspSettings = interface; // type: Aspose.Pdf.OcspSettings, namespace: Aspose.Pdf
  DNOperator = interface; // type: Aspose.Pdf.Operator, namespace: Aspose.Pdf
  DNBDC = interface; // type: Aspose.Pdf.Operators.BDC, namespace: Aspose.Pdf.Operators
  DNBI = interface; // type: Aspose.Pdf.Operators.BI, namespace: Aspose.Pdf.Operators
  DNBMC = interface; // type: Aspose.Pdf.Operators.BMC, namespace: Aspose.Pdf.Operators
  DNBX = interface; // type: Aspose.Pdf.Operators.BX, namespace: Aspose.Pdf.Operators
  DNClip = interface; // type: Aspose.Pdf.Operators.Clip, namespace: Aspose.Pdf.Operators
  DNClosePath = interface; // type: Aspose.Pdf.Operators.ClosePath, namespace: Aspose.Pdf.Operators
  DNClosePathEOFillStroke = interface; // type: Aspose.Pdf.Operators.ClosePathEOFillStroke, namespace: Aspose.Pdf.Operators
  DNClosePathFillStroke = interface; // type: Aspose.Pdf.Operators.ClosePathFillStroke, namespace: Aspose.Pdf.Operators
  DNClosePathStroke = interface; // type: Aspose.Pdf.Operators.ClosePathStroke, namespace: Aspose.Pdf.Operators
  DNConcatenateMatrix = interface; // type: Aspose.Pdf.Operators.ConcatenateMatrix, namespace: Aspose.Pdf.Operators
  DNCurveTo = interface; // type: Aspose.Pdf.Operators.CurveTo, namespace: Aspose.Pdf.Operators
  DNCurveTo1 = interface; // type: Aspose.Pdf.Operators.CurveTo1, namespace: Aspose.Pdf.Operators
  DNCurveTo2 = interface; // type: Aspose.Pdf.Operators.CurveTo2, namespace: Aspose.Pdf.Operators
  DNDo = interface; // type: Aspose.Pdf.Operators.Do, namespace: Aspose.Pdf.Operators
  DNDP = interface; // type: Aspose.Pdf.Operators.DP, namespace: Aspose.Pdf.Operators
  DNEI = interface; // type: Aspose.Pdf.Operators.EI, namespace: Aspose.Pdf.Operators
  DNEMC = interface; // type: Aspose.Pdf.Operators.EMC, namespace: Aspose.Pdf.Operators
  DNEndPath = interface; // type: Aspose.Pdf.Operators.EndPath, namespace: Aspose.Pdf.Operators
  DNEOClip = interface; // type: Aspose.Pdf.Operators.EOClip, namespace: Aspose.Pdf.Operators
  DNEOFill = interface; // type: Aspose.Pdf.Operators.EOFill, namespace: Aspose.Pdf.Operators
  DNEOFillStroke = interface; // type: Aspose.Pdf.Operators.EOFillStroke, namespace: Aspose.Pdf.Operators
  DNEX = interface; // type: Aspose.Pdf.Operators.EX, namespace: Aspose.Pdf.Operators
  DNFill = interface; // type: Aspose.Pdf.Operators.Fill, namespace: Aspose.Pdf.Operators
  DNFillStroke = interface; // type: Aspose.Pdf.Operators.FillStroke, namespace: Aspose.Pdf.Operators
  DNGRestore = interface; // type: Aspose.Pdf.Operators.GRestore, namespace: Aspose.Pdf.Operators
  DNGS = interface; // type: Aspose.Pdf.Operators.GS, namespace: Aspose.Pdf.Operators
  DNGSave = interface; // type: Aspose.Pdf.Operators.GSave, namespace: Aspose.Pdf.Operators
  DNOperators_ID = interface; // type: Aspose.Pdf.Operators.ID, namespace: Aspose.Pdf.Operators
  DNLineTo = interface; // type: Aspose.Pdf.Operators.LineTo, namespace: Aspose.Pdf.Operators
  DNMoveTo = interface; // type: Aspose.Pdf.Operators.MoveTo, namespace: Aspose.Pdf.Operators
  DNMP = interface; // type: Aspose.Pdf.Operators.MP, namespace: Aspose.Pdf.Operators
  DNObsoleteFill = interface; // type: Aspose.Pdf.Operators.ObsoleteFill, namespace: Aspose.Pdf.Operators
  DNRe = interface; // type: Aspose.Pdf.Operators.Re, namespace: Aspose.Pdf.Operators
  DNSetCharWidth = interface; // type: Aspose.Pdf.Operators.SetCharWidth, namespace: Aspose.Pdf.Operators
  DNSetCharWidthBoundingBox = interface; // type: Aspose.Pdf.Operators.SetCharWidthBoundingBox, namespace: Aspose.Pdf.Operators
  DNSetColorOperator = interface; // type: Aspose.Pdf.Operators.SetColorOperator, namespace: Aspose.Pdf.Operators
  DNBasicSetColorOperator = interface; // type: Aspose.Pdf.Operators.BasicSetColorOperator, namespace: Aspose.Pdf.Operators
  DNBasicSetColorAndPatternOperator = interface; // type: Aspose.Pdf.Operators.BasicSetColorAndPatternOperator, namespace: Aspose.Pdf.Operators
  DNSetAdvancedColor = interface; // type: Aspose.Pdf.Operators.SetAdvancedColor, namespace: Aspose.Pdf.Operators
  DNSetAdvancedColorStroke = interface; // type: Aspose.Pdf.Operators.SetAdvancedColorStroke, namespace: Aspose.Pdf.Operators
  DNSetColor = interface; // type: Aspose.Pdf.Operators.SetColor, namespace: Aspose.Pdf.Operators
  DNSetColorStroke = interface; // type: Aspose.Pdf.Operators.SetColorStroke, namespace: Aspose.Pdf.Operators
  DNSetCMYKColor = interface; // type: Aspose.Pdf.Operators.SetCMYKColor, namespace: Aspose.Pdf.Operators
  DNSetCMYKColorStroke = interface; // type: Aspose.Pdf.Operators.SetCMYKColorStroke, namespace: Aspose.Pdf.Operators
  DNSetGray = interface; // type: Aspose.Pdf.Operators.SetGray, namespace: Aspose.Pdf.Operators
  DNSetGrayStroke = interface; // type: Aspose.Pdf.Operators.SetGrayStroke, namespace: Aspose.Pdf.Operators
  DNSetRGBColor = interface; // type: Aspose.Pdf.Operators.SetRGBColor, namespace: Aspose.Pdf.Operators
  DNSetRGBColorStroke = interface; // type: Aspose.Pdf.Operators.SetRGBColorStroke, namespace: Aspose.Pdf.Operators
  DNSetColorRenderingIntent = interface; // type: Aspose.Pdf.Operators.SetColorRenderingIntent, namespace: Aspose.Pdf.Operators
  DNSetColorSpace = interface; // type: Aspose.Pdf.Operators.SetColorSpace, namespace: Aspose.Pdf.Operators
  DNSetColorSpaceStroke = interface; // type: Aspose.Pdf.Operators.SetColorSpaceStroke, namespace: Aspose.Pdf.Operators
  DNSetDash = interface; // type: Aspose.Pdf.Operators.SetDash, namespace: Aspose.Pdf.Operators
  DNSetFlat = interface; // type: Aspose.Pdf.Operators.SetFlat, namespace: Aspose.Pdf.Operators
  DNSetLineCap = interface; // type: Aspose.Pdf.Operators.SetLineCap, namespace: Aspose.Pdf.Operators
  DNSetLineJoin = interface; // type: Aspose.Pdf.Operators.SetLineJoin, namespace: Aspose.Pdf.Operators
  DNSetLineWidth = interface; // type: Aspose.Pdf.Operators.SetLineWidth, namespace: Aspose.Pdf.Operators
  DNSetMiterLimit = interface; // type: Aspose.Pdf.Operators.SetMiterLimit, namespace: Aspose.Pdf.Operators
  DNShFill = interface; // type: Aspose.Pdf.Operators.ShFill, namespace: Aspose.Pdf.Operators
  DNStroke = interface; // type: Aspose.Pdf.Operators.Stroke, namespace: Aspose.Pdf.Operators
  DNTextOperator = interface; // type: Aspose.Pdf.Operators.TextOperator, namespace: Aspose.Pdf.Operators
  DNBlockTextOperator = interface; // type: Aspose.Pdf.Operators.BlockTextOperator, namespace: Aspose.Pdf.Operators
  DNBT = interface; // type: Aspose.Pdf.Operators.BT, namespace: Aspose.Pdf.Operators
  DNET = interface; // type: Aspose.Pdf.Operators.ET, namespace: Aspose.Pdf.Operators
  DNTextPlaceOperator = interface; // type: Aspose.Pdf.Operators.TextPlaceOperator, namespace: Aspose.Pdf.Operators
  DNMoveTextPosition = interface; // type: Aspose.Pdf.Operators.MoveTextPosition, namespace: Aspose.Pdf.Operators
  DNMoveTextPositionSetLeading = interface; // type: Aspose.Pdf.Operators.MoveTextPositionSetLeading, namespace: Aspose.Pdf.Operators
  DNMoveToNextLine = interface; // type: Aspose.Pdf.Operators.MoveToNextLine, namespace: Aspose.Pdf.Operators
  DNSetTextMatrix = interface; // type: Aspose.Pdf.Operators.SetTextMatrix, namespace: Aspose.Pdf.Operators
  DNTextShowOperator = interface; // type: Aspose.Pdf.Operators.TextShowOperator, namespace: Aspose.Pdf.Operators
  DNMoveToNextLineShowText = interface; // type: Aspose.Pdf.Operators.MoveToNextLineShowText, namespace: Aspose.Pdf.Operators
  DNSetGlyphsPositionShowText = interface; // type: Aspose.Pdf.Operators.SetGlyphsPositionShowText, namespace: Aspose.Pdf.Operators
  DNSetSpacingMoveToNextLineShowText = interface; // type: Aspose.Pdf.Operators.SetSpacingMoveToNextLineShowText, namespace: Aspose.Pdf.Operators
  DNShowText = interface; // type: Aspose.Pdf.Operators.ShowText, namespace: Aspose.Pdf.Operators
  DNTextStateOperator = interface; // type: Aspose.Pdf.Operators.TextStateOperator, namespace: Aspose.Pdf.Operators
  DNSelectFont = interface; // type: Aspose.Pdf.Operators.SelectFont, namespace: Aspose.Pdf.Operators
  DNSetCharacterSpacing = interface; // type: Aspose.Pdf.Operators.SetCharacterSpacing, namespace: Aspose.Pdf.Operators
  DNSetHorizontalTextScaling = interface; // type: Aspose.Pdf.Operators.SetHorizontalTextScaling, namespace: Aspose.Pdf.Operators
  DNSetTextLeading = interface; // type: Aspose.Pdf.Operators.SetTextLeading, namespace: Aspose.Pdf.Operators
  DNSetTextRenderingMode = interface; // type: Aspose.Pdf.Operators.SetTextRenderingMode, namespace: Aspose.Pdf.Operators
  DNSetTextRise = interface; // type: Aspose.Pdf.Operators.SetTextRise, namespace: Aspose.Pdf.Operators
  DNSetWordSpacing = interface; // type: Aspose.Pdf.Operators.SetWordSpacing, namespace: Aspose.Pdf.Operators
  DNGlyphPosition = interface; // type: Aspose.Pdf.Operators.GlyphPosition, namespace: Aspose.Pdf.Operators
  DNOperatorSelector = interface; // type: Aspose.Pdf.OperatorSelector, namespace: Aspose.Pdf
  DNOpi = interface; // type: Aspose.Pdf.Opi, namespace: Aspose.Pdf
  DNImageCompressionOptions = interface; // type: Aspose.Pdf.Optimization.ImageCompressionOptions, namespace: Aspose.Pdf.Optimization
  DNOptimization_OptimizationOptions = interface; // type: Aspose.Pdf.Optimization.OptimizationOptions, namespace: Aspose.Pdf.Optimization
  DNDocument_OptimizationOptions = interface; // type: Aspose.Pdf.Document+OptimizationOptions, namespace: Aspose.Pdf
  DNOutlines = interface; // type: Aspose.Pdf.Outlines, namespace: Aspose.Pdf
  DNOutlineCollection = interface; // type: Aspose.Pdf.OutlineCollection, namespace: Aspose.Pdf
  DNOutlineItemCollection = interface; // type: Aspose.Pdf.OutlineItemCollection, namespace: Aspose.Pdf
  DNPage = interface; // type: Aspose.Pdf.Page, namespace: Aspose.Pdf
  DNPageCollection = interface; // type: Aspose.Pdf.PageCollection, namespace: Aspose.Pdf
  DNPageInfo = interface; // type: Aspose.Pdf.PageInfo, namespace: Aspose.Pdf
  DNPageLabel = interface; // type: Aspose.Pdf.PageLabel, namespace: Aspose.Pdf
  DNPageLabelCollection = interface; // type: Aspose.Pdf.PageLabelCollection, namespace: Aspose.Pdf
  DNPageSize = interface; // type: Aspose.Pdf.PageSize, namespace: Aspose.Pdf
  DNParagraphs = interface; // type: Aspose.Pdf.Paragraphs, namespace: Aspose.Pdf
  DNPdfANonSpecificationFlags = interface; // type: Aspose.Pdf.PdfANonSpecificationFlags, namespace: Aspose.Pdf
  DNFontEmbeddingOptions = interface; // type: Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions, namespace: Aspose.Pdf.PdfAOptionClasses
  DNToUnicodeProcessingRules = interface; // type: Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules, namespace: Aspose.Pdf.PdfAOptionClasses
  DNPdfASymbolicFontEncodingStrategy = interface; // type: Aspose.Pdf.PdfASymbolicFontEncodingStrategy, namespace: Aspose.Pdf
  DNPdfASymbolicFontEncodingStrategy_QueueItem = interface; // type: Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem, namespace: Aspose.Pdf
  DNPdfFormatConversionOptions = interface; // type: Aspose.Pdf.PdfFormatConversionOptions, namespace: Aspose.Pdf
  DNPoint = interface; // type: Aspose.Pdf.Point, namespace: Aspose.Pdf
  DNPoint3D = interface; // type: Aspose.Pdf.Point3D, namespace: Aspose.Pdf
  DNRectangle = interface; // type: Aspose.Pdf.Rectangle, namespace: Aspose.Pdf
  DNRenderingOptions = interface; // type: Aspose.Pdf.RenderingOptions, namespace: Aspose.Pdf
  DNResourceLoadingResult = interface; // type: Aspose.Pdf.ResourceLoadingResult, namespace: Aspose.Pdf
  DNResources = interface; // type: Aspose.Pdf.Resources, namespace: Aspose.Pdf
  DNRgbToDeviceGrayConversionStrategy = interface; // type: Aspose.Pdf.RgbToDeviceGrayConversionStrategy, namespace: Aspose.Pdf
  DNRow = interface; // type: Aspose.Pdf.Row, namespace: Aspose.Pdf
  DNRows = interface; // type: Aspose.Pdf.Rows, namespace: Aspose.Pdf
  DNSaveOptions = interface; // type: Aspose.Pdf.SaveOptions, namespace: Aspose.Pdf
  DNPdfSaveOptions = interface; // type: Aspose.Pdf.PdfSaveOptions, namespace: Aspose.Pdf
  DNUnifiedSaveOptions = interface; // type: Aspose.Pdf.UnifiedSaveOptions, namespace: Aspose.Pdf
  DNApsSaveOptions = interface; // type: Aspose.Pdf.ApsSaveOptions, namespace: Aspose.Pdf
  DNDocSaveOptions = interface; // type: Aspose.Pdf.DocSaveOptions, namespace: Aspose.Pdf
  DNEpubSaveOptions = interface; // type: Aspose.Pdf.EpubSaveOptions, namespace: Aspose.Pdf
  DNExcelSaveOptions = interface; // type: Aspose.Pdf.ExcelSaveOptions, namespace: Aspose.Pdf
  DNHtmlSaveOptions = interface; // type: Aspose.Pdf.HtmlSaveOptions, namespace: Aspose.Pdf
  DNMobiXmlSaveOptions = interface; // type: Aspose.Pdf.MobiXmlSaveOptions, namespace: Aspose.Pdf
  DNPdfXmlSaveOptions = interface; // type: Aspose.Pdf.PdfXmlSaveOptions, namespace: Aspose.Pdf
  DNPptxSaveOptions = interface; // type: Aspose.Pdf.PptxSaveOptions, namespace: Aspose.Pdf
  DNSvgSaveOptions = interface; // type: Aspose.Pdf.SvgSaveOptions, namespace: Aspose.Pdf
  DNTeXSaveOptions = interface; // type: Aspose.Pdf.TeXSaveOptions, namespace: Aspose.Pdf
  DNLaTeXSaveOptions = interface; // type: Aspose.Pdf.LaTeXSaveOptions, namespace: Aspose.Pdf
  DNXpsSaveOptions = interface; // type: Aspose.Pdf.XpsSaveOptions, namespace: Aspose.Pdf
  DNXmlSaveOptions = interface; // type: Aspose.Pdf.XmlSaveOptions, namespace: Aspose.Pdf
  DNSaveOptions_BorderInfo = interface; // type: Aspose.Pdf.SaveOptions+BorderInfo, namespace: Aspose.Pdf
  DNSaveOptions_BorderPartStyle = interface; // type: Aspose.Pdf.SaveOptions+BorderPartStyle, namespace: Aspose.Pdf
  DNSaveOptions_MarginInfo = interface; // type: Aspose.Pdf.SaveOptions+MarginInfo, namespace: Aspose.Pdf
  DNSaveOptions_MarginPartStyle = interface; // type: Aspose.Pdf.SaveOptions+MarginPartStyle, namespace: Aspose.Pdf
  DNSaveOptions_ResourceSavingInfo = interface; // type: Aspose.Pdf.SaveOptions+ResourceSavingInfo, namespace: Aspose.Pdf
  DNHtmlSaveOptions_HtmlImageSavingInfo = interface; // type: Aspose.Pdf.HtmlSaveOptions+HtmlImageSavingInfo, namespace: Aspose.Pdf
  DNSvgSaveOptions_SvgImageSavingInfo = interface; // type: Aspose.Pdf.SvgSaveOptions+SvgImageSavingInfo, namespace: Aspose.Pdf
  DNStamp = interface; // type: Aspose.Pdf.Stamp, namespace: Aspose.Pdf
  DNImageStamp = interface; // type: Aspose.Pdf.ImageStamp, namespace: Aspose.Pdf
  DNPdfPageStamp = interface; // type: Aspose.Pdf.PdfPageStamp, namespace: Aspose.Pdf
  DNTextStamp = interface; // type: Aspose.Pdf.TextStamp, namespace: Aspose.Pdf
  DNPageNumberStamp = interface; // type: Aspose.Pdf.PageNumberStamp, namespace: Aspose.Pdf
  DNStructure_Element = interface; // type: Aspose.Pdf.Structure.Element, namespace: Aspose.Pdf.Structure
  DNStructure_FigureElement = interface; // type: Aspose.Pdf.Structure.FigureElement, namespace: Aspose.Pdf.Structure
  DNRootElement = interface; // type: Aspose.Pdf.Structure.RootElement, namespace: Aspose.Pdf.Structure
  DNStructElement = interface; // type: Aspose.Pdf.Structure.StructElement, namespace: Aspose.Pdf.Structure
  DNTextElement = interface; // type: Aspose.Pdf.Structure.TextElement, namespace: Aspose.Pdf.Structure
  DNITaggedContent = interface; // type: Aspose.Pdf.Tagged.ITaggedContent, namespace: Aspose.Pdf.Tagged
  DNAbsorbedCell = interface; // type: Aspose.Pdf.Text.AbsorbedCell, namespace: Aspose.Pdf.Text
  DNAbsorbedRow = interface; // type: Aspose.Pdf.Text.AbsorbedRow, namespace: Aspose.Pdf.Text
  DNAbsorbedTable = interface; // type: Aspose.Pdf.Text.AbsorbedTable, namespace: Aspose.Pdf.Text
  DNCharInfo = interface; // type: Aspose.Pdf.Text.CharInfo, namespace: Aspose.Pdf.Text
  DNCharInfoCollection = interface; // type: Aspose.Pdf.Text.CharInfoCollection, namespace: Aspose.Pdf.Text
  DNCustomFontSubstitutionBase_OriginalFontSpecification = interface; // type: Aspose.Pdf.Text.CustomFontSubstitutionBase+OriginalFontSpecification, namespace: Aspose.Pdf.Text
  DNFont = interface; // type: Aspose.Pdf.Text.Font, namespace: Aspose.Pdf.Text
  DNFontAbsorber = interface; // type: Aspose.Pdf.Text.FontAbsorber, namespace: Aspose.Pdf.Text
  DNFontCollection = interface; // type: Aspose.Pdf.Text.FontCollection, namespace: Aspose.Pdf.Text
  DNFontRepository = interface; // type: Aspose.Pdf.Text.FontRepository, namespace: Aspose.Pdf.Text
  DNFontSource = interface; // type: Aspose.Pdf.Text.FontSource, namespace: Aspose.Pdf.Text
  DNFileFontSource = interface; // type: Aspose.Pdf.Text.FileFontSource, namespace: Aspose.Pdf.Text
  DNFolderFontSource = interface; // type: Aspose.Pdf.Text.FolderFontSource, namespace: Aspose.Pdf.Text
  DNMemoryFontSource = interface; // type: Aspose.Pdf.Text.MemoryFontSource, namespace: Aspose.Pdf.Text
  DNSystemFontSource = interface; // type: Aspose.Pdf.Text.SystemFontSource, namespace: Aspose.Pdf.Text
  DNFontSourceCollection = interface; // type: Aspose.Pdf.Text.FontSourceCollection, namespace: Aspose.Pdf.Text
  DNFontSubstitution = interface; // type: Aspose.Pdf.Text.FontSubstitution, namespace: Aspose.Pdf.Text
  DNCustomFontSubstitutionBase = interface; // type: Aspose.Pdf.Text.CustomFontSubstitutionBase, namespace: Aspose.Pdf.Text
  DNSimpleFontSubstitution = interface; // type: Aspose.Pdf.Text.SimpleFontSubstitution, namespace: Aspose.Pdf.Text
  DNSystemFontsSubstitution = interface; // type: Aspose.Pdf.Text.SystemFontsSubstitution, namespace: Aspose.Pdf.Text
  DNFontSubstitutionCollection = interface; // type: Aspose.Pdf.Text.FontSubstitutionCollection, namespace: Aspose.Pdf.Text
  DNIFontOptions = interface; // type: Aspose.Pdf.Text.IFontOptions, namespace: Aspose.Pdf.Text
  DNITableElement = interface; // type: Aspose.Pdf.Text.ITableElement, namespace: Aspose.Pdf.Text
  DNMarkupParagraph = interface; // type: Aspose.Pdf.Text.MarkupParagraph, namespace: Aspose.Pdf.Text
  DNMarkupSection = interface; // type: Aspose.Pdf.Text.MarkupSection, namespace: Aspose.Pdf.Text
  DNPageMarkup = interface; // type: Aspose.Pdf.Text.PageMarkup, namespace: Aspose.Pdf.Text
  DNParagraphAbsorber = interface; // type: Aspose.Pdf.Text.ParagraphAbsorber, namespace: Aspose.Pdf.Text
  DNPosition = interface; // type: Aspose.Pdf.Text.Position, namespace: Aspose.Pdf.Text
  DNTableAbsorber = interface; // type: Aspose.Pdf.Text.TableAbsorber, namespace: Aspose.Pdf.Text
  DNTabStop = interface; // type: Aspose.Pdf.Text.TabStop, namespace: Aspose.Pdf.Text
  DNTabStops = interface; // type: Aspose.Pdf.Text.TabStops, namespace: Aspose.Pdf.Text
  DNTextAbsorber = interface; // type: Aspose.Pdf.Text.TextAbsorber, namespace: Aspose.Pdf.Text
  DNTextFragmentAbsorber = interface; // type: Aspose.Pdf.Text.TextFragmentAbsorber, namespace: Aspose.Pdf.Text
  DNTextBuilder = interface; // type: Aspose.Pdf.Text.TextBuilder, namespace: Aspose.Pdf.Text
  DNTextExtractionError = interface; // type: Aspose.Pdf.Text.TextExtractionError, namespace: Aspose.Pdf.Text
  DNTextExtractionErrorLocation = interface; // type: Aspose.Pdf.Text.TextExtractionErrorLocation, namespace: Aspose.Pdf.Text
  DNTextFragmentCollection = interface; // type: Aspose.Pdf.Text.TextFragmentCollection, namespace: Aspose.Pdf.Text
  DNTextOptions = interface; // type: Aspose.Pdf.Text.TextOptions, namespace: Aspose.Pdf.Text
  DNTextEditOptions = interface; // type: Aspose.Pdf.Text.TextEditOptions, namespace: Aspose.Pdf.Text
  DNTextExtractionOptions = interface; // type: Aspose.Pdf.Text.TextExtractionOptions, namespace: Aspose.Pdf.Text
  DNTextFormattingOptions = interface; // type: Aspose.Pdf.Text.TextFormattingOptions, namespace: Aspose.Pdf.Text
  DNTextReplaceOptions = interface; // type: Aspose.Pdf.Text.TextReplaceOptions, namespace: Aspose.Pdf.Text
  DNTextSearchOptions = interface; // type: Aspose.Pdf.Text.TextSearchOptions, namespace: Aspose.Pdf.Text
  DNTextParagraph = interface; // type: Aspose.Pdf.Text.TextParagraph, namespace: Aspose.Pdf.Text
  DNTextSegment = interface; // type: Aspose.Pdf.Text.TextSegment, namespace: Aspose.Pdf.Text
  DNTextSegmentCollection = interface; // type: Aspose.Pdf.Text.TextSegmentCollection, namespace: Aspose.Pdf.Text
  DNTextState = interface; // type: Aspose.Pdf.Text.TextState, namespace: Aspose.Pdf.Text
  DNTextFragmentState = interface; // type: Aspose.Pdf.Text.TextFragmentState, namespace: Aspose.Pdf.Text
  DNTimestampSettings = interface; // type: Aspose.Pdf.TimestampSettings, namespace: Aspose.Pdf
  DNTocInfo = interface; // type: Aspose.Pdf.TocInfo, namespace: Aspose.Pdf
  DNUnifiedSaveOptions_ProgressEventHandlerInfo = interface; // type: Aspose.Pdf.UnifiedSaveOptions+ProgressEventHandlerInfo, namespace: Aspose.Pdf
  DNWarningInfo = interface; // type: Aspose.Pdf.WarningInfo, namespace: Aspose.Pdf
  DNWatermark = interface; // type: Aspose.Pdf.Watermark, namespace: Aspose.Pdf
  DNXfaParserOptions = interface; // type: Aspose.Pdf.XfaConverter.XfaParserOptions, namespace: Aspose.Pdf.XfaConverter
  DNXForm = interface; // type: Aspose.Pdf.XForm, namespace: Aspose.Pdf
  DNXFormCollection = interface; // type: Aspose.Pdf.XFormCollection, namespace: Aspose.Pdf
  DNXImage = interface; // type: Aspose.Pdf.XImage, namespace: Aspose.Pdf
  DNXImageCollection = interface; // type: Aspose.Pdf.XImageCollection, namespace: Aspose.Pdf
  DNXmpField = interface; // type: Aspose.Pdf.XmpField, namespace: Aspose.Pdf
  DNXmpPdfAExtensionObject = interface; // type: Aspose.Pdf.XmpPdfAExtensionObject, namespace: Aspose.Pdf
  DNXmpPdfAExtensionField = interface; // type: Aspose.Pdf.XmpPdfAExtensionField, namespace: Aspose.Pdf
  DNXmpPdfAExtensionProperty = interface; // type: Aspose.Pdf.XmpPdfAExtensionProperty, namespace: Aspose.Pdf
  DNXmpPdfAExtensionValueType = interface; // type: Aspose.Pdf.XmpPdfAExtensionValueType, namespace: Aspose.Pdf
  DNXmpPdfAExtensionSchema = interface; // type: Aspose.Pdf.XmpPdfAExtensionSchema, namespace: Aspose.Pdf
  DNXmpPdfAExtensionSchemaDescription = interface; // type: Aspose.Pdf.XmpPdfAExtensionSchemaDescription, namespace: Aspose.Pdf
  DNXmpValue = interface; // type: Aspose.Pdf.XmpValue, namespace: Aspose.Pdf
  DNDocumentInfo = interface; // type: Aspose.Pdf.DocumentInfo, namespace: Aspose.Pdf
  DNBookmarks = interface; // type: Aspose.Pdf.Facades.Bookmarks, namespace: Aspose.Pdf.Facades
  DNPrintController = interface; // type: Aspose.Pdf.PrintController, namespace: Aspose.Pdf
  DNResourceLoadingEventArgs = interface; // type: Aspose.Pdf.ResourceLoadingEventArgs, namespace: Aspose.Pdf
  DNIncorrectCMapUsageException = interface; // type: Aspose.Pdf.IncorrectCMapUsageException, namespace: Aspose.Pdf
  DNPdfException = interface; // type: Aspose.Pdf.PdfException, namespace: Aspose.Pdf
  DNEmptyValueException = interface; // type: Aspose.Pdf.EmptyValueException, namespace: Aspose.Pdf
  DNInvalidFileFormatException = interface; // type: Aspose.Pdf.InvalidFileFormatException, namespace: Aspose.Pdf
  DNIncorrectFontUsageException = interface; // type: Aspose.Pdf.IncorrectFontUsageException, namespace: Aspose.Pdf
  DNInvalidCgmFileFormatException = interface; // type: Aspose.Pdf.InvalidCgmFileFormatException, namespace: Aspose.Pdf
  DNInvalidPdfFileFormatException = interface; // type: Aspose.Pdf.InvalidPdfFileFormatException, namespace: Aspose.Pdf
  DNInvalidPasswordException = interface; // type: Aspose.Pdf.InvalidPasswordException, namespace: Aspose.Pdf
  DNInvalidValueFormatException = interface; // type: Aspose.Pdf.InvalidValueFormatException, namespace: Aspose.Pdf
  DNTaggedException = interface; // type: Aspose.Pdf.Tagged.TaggedException, namespace: Aspose.Pdf.Tagged
  DNSanitizationException = interface; // type: Aspose.Pdf.Sanitization.SanitizationException, namespace: Aspose.Pdf.Sanitization
  DNFontEmbeddingException = interface; // type: Aspose.Pdf.FontEmbeddingException, namespace: Aspose.Pdf
  DNFontNotFoundException = interface; // type: Aspose.Pdf.FontNotFoundException, namespace: Aspose.Pdf
  DNUnsupportedFontTypeException = interface; // type: Aspose.Pdf.UnsupportedFontTypeException, namespace: Aspose.Pdf
  DNInvalidFormTypeOperationException = interface; // type: Aspose.Pdf.InvalidFormTypeOperationException, namespace: Aspose.Pdf
  DNIFacade = interface; // type: Aspose.Pdf.Facades.IFacade, namespace: Aspose.Pdf.Facades
  DNISaveableFacade = interface; // type: Aspose.Pdf.Facades.ISaveableFacade, namespace: Aspose.Pdf.Facades

{ delegates }

  ///<summary>
  ///  The call back procedure for hocr recognize.
  ///</summary>
  ///  <param name="img">The hocr image.</param>
  ///<returns>The hocr text</returns>
  [DNTypeName('Aspose.Pdf.Document+CallBackGetHocr')]
  DNDocument_CallBackGetHocr = function(img: DDN.Aspose.Common.DNImage): string of object;

  ///<summary>
  ///  Represents the method that will handle FontSubstitution event.
  ///</summary>
  ///  <param name="oldFont">original font</param>
  ///  <param name="newFont">new font</param>
  [DNTypeName('Aspose.Pdf.Document+FontSubstitutionHandler')]
  DNDocument_FontSubstitutionHandler = procedure(oldFont: DNFont; newFont: DNFont) of object;

  ///<summary>
  ///  Represents the method that handles the QueryPageSettings event of a PrintDocument.
  ///</summary>
  ///  <param name="sender">The source of the event. </param>
  ///  <param name="queryPageSettingsEventArgs">A QueryPageSettingsEventArgs that contains the event data.</param>
  ///  <param name="currentPageInfo">Currently printed page info.</param>
  [DNTypeName('Aspose.Pdf.Facades.PdfQueryPageSettingsEventHandler')]
  DNPdfQueryPageSettingsEventHandler = procedure(sender: DDN.mscorlib.DNObject; queryPageSettingsEventArgs: DDN.Aspose.Common.DNQueryPageSettingsEventArgs; currentPageInfo: DNPdfPrintPageInfo) of object;

  ///<summary>
  ///  You can  assign to this property custom strategy that implements processing
  ///  or/and saving of one CSS's part that was created during conversion of PDF to HTML .
  ///  In such case  processing (like saving to stream or disk)
  ///  must be done in that custom code
  ///</summary>
  ///  <param name="partSavingInfo"> represents set of data that can be used for saving of supplied CSS part</param>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssSavingStrategy')]
  DNHtmlSaveOptions_CssSavingStrategy = procedure(partSavingInfo: DNHtmlSaveOptions_CssSavingInfo) of object;

  ///<summary>
  ///  You can  assign to this property  delegate created from custom method that implements creation of URL of CSS referenced
  ///  in generated HTML document. F.e. if You want to make CSS referenced in HTML f.e. as "otherPage.ASPX?CssID=zjjkklj"
  ///  Then such custom strategy must return "otherPage.ASPX?CssID=zjjkklj"
  ///</summary>
  ///  <param name="cssUrlRequestInfo"> represents set of data that can be used for generation of CSS' URL</param>
  ///<returns> must return string that represents CSS's URL or URL's template</returns>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssUrlMakingStrategy')]
  DNHtmlSaveOptions_CssUrlMakingStrategy = function(cssUrlRequestInfo: DNHtmlSaveOptions_CssUrlRequestInfo): string of object;

  ///<summary>
  ///  Result of conversion can contain one or several HTML-pages ( that also can reference external files like images or fonts)
  ///  You can  assign to this property delegate created from custom method that implements processing
  ///  of got HTML-page(HTML itself) that was created during conversion.
  ///  In such case  processing (like saving in stream or disk) can be done in that custom code .
  ///  In such case All the necessary actions for saving of HTML page's markup must be undertaken
  ///  in code of supplied method, because saving of result in code of converter will be not in use.
  ///  If processing for this or that case for some reason must be done by converter's code itself,
  ///  not in custom code, please set in custom code flag 'CustomProcessingCancelled'
  ///  of 'htmlSavingInfo' parameter's variable : it signals to converter that all the necessary
  ///  steps for processing of that resource  must be done in converter itself in same way
  ///  as if there was no any external custom saving code .
  ///</summary>
  ///  <param name="htmlSavingInfo"> represents data that can be used for saving or processing of supplied HTML page</param>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingStrategy')]
  DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy = procedure(htmlSavingInfo: DNHtmlSaveOptions_HtmlPageMarkupSavingInfo) of object;

  ///<summary>
  ///  To this property You can  assign delegate created from custom method that implements processing
  ///  of external resource(Font or Image)
  ///  that was extracted from PDF and must be saved as external resource during conversion of PDF to HTML.
  ///  In such case  processing (like saving in stream or disk)
  ///  can be done in that custom code and that custom code must return path(or any another string without quotemarks)
  ///  that will be afterwards incorporated into generated HTML instead of original supposed path to that image resource.
  ///  In such case All the necessary actions for saving of image must be undertaken
  ///  in code of supplied method, because saving of result in code of converter will be not in use  .
  ///  If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
  ///  please set in custom code flag 'CustomProcessingCancelled' of 'resourceSavingInfo' parameter's variable
  ///  It signals to converter that all the necessary steps for processing of that resource
  ///  must be done in converter itself as if there was no any external custom code .
  ///</summary>
  ///  <param name="resourceSavingInfo"> represents set of data for saving of resource</param>
  ///<returns> must return URL to saved resource that will be used during generation of HTML </returns>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+ResourceSavingStrategy')]
  DNHtmlSaveOptions_ResourceSavingStrategy = function(resourceSavingInfo: DNSaveOptions_ResourceSavingInfo): string of object;

  ///<summary>
  ///  Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes)
  ///  and supply custom method, that will get requested resources from somewhere. For example during usage
  ///  of Aspose.Pdf in cloud direct access to referenced files impossible, and some custome code put into special
  ///  method should be used.
  ///  This delegate defines signature of such custom method.
  ///</summary>
  ///  <param name="resourceURI">Resource URI.</param>
  ///<returns>ResourceLoadingResult object.</returns>
  [DNTypeName('Aspose.Pdf.LoadOptions+ResourceLoadingStrategy')]
  DNLoadOptions_ResourceLoadingStrategy = function(resourceURI: string): DNLoadOptions_ResourceLoadingResult of object;

  ///<summary>
  ///  Procedure for customize header and footer.
  ///</summary>
  ///  /// <param name="page">The current page.</param>
  [DNTypeName('Aspose.Pdf.Page+BeforePageGenerate')]
  DNPage_BeforePageGenerate = procedure(page: DNPage) of object;

  ///<summary>
  ///  To property of such type You can  assign delegate created from custom method that implements processing
  ///  of external saving of image  that was extracted from SVG created from PDF and must be saved as external resource during conversion of PDF to HTML.
  ///  In such case  processing (like self-made saving into stream or on disk)
  ///  can be done in that custom code and that custom code must return path(or any another string without quotemarks)
  ///  that will be afterwards incorporated into generated SVG instead of original supposed path to that image resource.
  ///  In such case all the necessary actions for saving of image must be undertaken
  ///  in code of supplied method, because saving of result in code of converter will be not in use.
  ///  If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
  ///  please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable
  ///  It signals to converter that all the necessary steps for processing of that resource
  ///  must be done in converter itself as if there was no any external custom code .
  ///  <param name="imageSavingInfo">represents information about saved image that can be use in custom code </param>
  ///<returns>must return string that represents URL of image that will be put into SVG</returns>
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgSaveOptions+EmbeddedImagesSavingStrategy')]
  DNSvgSaveOptions_EmbeddedImagesSavingStrategy = function(imageSavingInfo: DNSvgSaveOptions_SvgImageSavingInfo): string of object;

  ///<summary>
  ///  Represents method that usually supplied by calling side
  ///  and  handles progress events that comes from converter.
  ///  Usually such suplied customer's handler can be used to show
  ///  total conversion progress on console or in progress bar.
  ///  <param name="eventInfo">represents information about occured progress event</param>
  ///</summary>
  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions+ConversionProgressEventHandler')]
  DNUnifiedSaveOptions_ConversionProgressEventHandler = procedure(eventInfo: DNUnifiedSaveOptions_ProgressEventHandlerInfo) of object;




{ objects }

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{529DA8E0-CA2E-53F1-BDA8-024F3A35A41E}']
  end;

  ///<summary>
  ///  Collection of actions
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ActionCollection')]
  DNActionCollection = interface(DDN.mscorlib.DNICollection<DNPdfAction>)
  ['{8425AAA6-173B-3773-B1C2-B8D586560C7E}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPdfAction;

  { methods } 

    ///<summary>
    ///  Removes action from collection by index.
    ///</summary>
    ///  <param name="index">Index of action to remove.</param>
    procedure Delete(index: Int32); overload;
    ///<summary>
    ///  Delete all actions.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Copies actions array into collection.
    ///</summary>
    ///  <param name="array">Array of actions which must be copied into collection.</param>
    ///  <param name="index">Index starting from which array will be copied.</param>
    procedure CopyTo(&array: TArray<DNPdfAction>; index: Int32);
    ///<summary>
    ///  Returns enumerator for collection.
    ///</summary>
    ///<returns>Collection enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPdfAction>;
    ///<summary>
    ///  Returns true if give item presents in the collection.
    ///</summary>
    ///  <param name="item"></param>
    ///<returns></returns>
    function &Contains(item: DNPdfAction): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Count of actions on the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true if object is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Returns true if collection is readonly.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPdfAction read get_Item; default;
  end;

  TDNActionCollection = class(TDNGenericImport<DNActionCollectionClass, DNActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B3970C9A-DC82-51A2-B34B-EAEA329D837B}']
  end;

  ///<summary>
  ///  Class representing annotation collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationCollection')]
  DNAnnotationCollection = interface(DDN.mscorlib.DNICollection<DNAnnotation>)
  ['{E070C097-B984-3D69-8AC2-DF14715576F8}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNAnnotation;

  { methods } 

    ///<summary>
    ///  Adds annotation to the collection. If page is rotated then annotation rectangle will be recalculated accordingly.
    ///</summary>
    ///  <param name="annotation">Annotation which shall be added.</param>
    ///  <param name="considerRotation">If true and if page is rotated then annotation position will be recaculated accroding to page rotation.</param>
    procedure Add(annotation: DNAnnotation; considerRotation: Boolean);
    ///<summary>
    ///  Deletes annotation from the collection by index.
    ///</summary>
    ///  <param name="index">Index of annotation which shall be deleted.</param>
    procedure Delete(index: Int32); overload;
    ///<summary>
    ///  Deletes all annotations from the collection.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Copies array of annotations into collection.
    ///</summary>
    ///  <param name="array">Array to copy into collection.</param>
    ///  <param name="index">Starting index where colleciton wil lbe copied.</param>
    procedure CopyTo(&array: TArray<DNAnnotation>; index: Int32);
    ///<summary>
    ///  Returns collection enumerator.
    ///</summary>
    ///<returns>Enumerator object</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNAnnotation>;
    ///<summary>
    ///  Accepts visitor to process annotation.
    ///</summary>
    ///  <param name="visitor">Annotation selector object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Deletes specified annotation from the collection.
    ///</summary>
    ///  <param name="annotation">Annotation which shall be deleted.</param>
    procedure Delete(annotation: DNAnnotation); overload;
    ///<summary>
    ///  Checks if specified annotation belong to collection.
    ///</summary>
    ///  <param name="annotation">Annotation to be searched.</param>
    function &Contains(annotation: DNAnnotation): Boolean;
    ///<summary>
    ///  Returns annotation by its name.
    ///</summary>
    ///  <param name="name">Name of the annotation</param>
    ///<returns></returns>
    function FindByName(name: string): DNAnnotation;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a value indicating whether access to the Aspose.Pdf.Annotations.AnnotationCollection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to Aspose.Pdf.Annotations.AnnotationCollection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets count of annotations in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating if collection is readonly.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNAnnotation read get_Item; default;
  end;

  TDNAnnotationCollection = class(TDNGenericImport<DNAnnotationCollectionClass, DNAnnotationCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationSelectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{19187F87-EF9E-5492-B4CC-ADB2FB4D621F}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the AnnotationSelector class.
    ///</summary>
    {class} function init: DNAnnotationSelector; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" />
    ///  object.
    ///</summary>
    ///  <param name="annotation">
    ///  Annotation to be selected.
    ///  This object only describes some characteristics we want found annotations to have, e.g. the type of annotation.
    ///</param>
    {class} function init(annotation: DNAnnotation): DNAnnotationSelector; overload;

  end;

  ///<summary>
  ///  This class is used for selecting annotations using Visitor template idea.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationSelector')]
  DNAnnotationSelector = interface(DDN.mscorlib.DNObject)
  ['{AF620BE3-42DD-3C06-B70D-08DDC587EF1F}']
  { getters & setters } 

    function get_Selected: DDN.mscorlib.DNIList<DNAnnotation>;

  { methods } 

    ///<summary>
    ///  Select redact annotation if AnnotationSelector was initialized with RedactAnnotation object.
    ///</summary>
    ///  <param name="redact">RedactAnnotation object for selecting.</param>
    procedure Visit(redact: DNRedactionAnnotation); overload;
    ///<summary>
    ///  Select watermark annotation if AnnotationSelector was initialized with WatermarkAnnotation object.
    ///</summary>
    ///  <param name="watermark">WatermarkAnnotation for selecting.</param>
    procedure Visit(watermark: DNWatermarkAnnotation); overload;
    ///<summary>
    ///  Select movie annotation if AnnotationSelector was initialized with RichMedia annotation object.
    ///</summary>
    ///  <param name="richMedia">RichMedia annotation.</param>
    procedure Visit(richMedia: DNRichMediaAnnotation); overload;
    ///<summary>
    ///  Select PDF3D annotation if AnnotationSelector was initialized with PDF3DAnnotation object.
    ///</summary>
    ///  <param name="pdf3D">PDF3DAnnotation object for selecting.</param>
    procedure Visit(pdf3D: DNPDF3DAnnotation); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The list of selected objects.
    ///</summary>
    property Selected: DDN.mscorlib.DNIList<DNAnnotation> read get_Selected;
  end;

  TDNAnnotationSelector = class(TDNGenericImport<DNAnnotationSelectorClass, DNAnnotationSelector>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAppearanceDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6240BC5A-C56E-570C-B139-D44758952125}']
  end;

  ///<summary>
  ///  Annotation appearance dictionary specifying how the annotation shall be presented visually on the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AppearanceDictionary')]
  DNAppearanceDictionary = interface(DDN.mscorlib.DNObject)
  ['{0318009F-4470-3ACF-B6BB-8DC5B0D2A5EB}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_IsFixedSize: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DNXForm>;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds an element with the provided key and value.
    ///</summary>
    ///  <param name="key">
    ///  Element key.
    ///</param>
    ///  <param name="value">
    ///  Element value.
    ///</param>
    procedure Add(key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  Copies the elements of the dictionary to an Array, starting at a particular Array index.
    ///</summary>
    ///  <param name="array">Array where items must be copied.</param>
    ///  <param name="index">Index where items must be copied.</param>
    procedure CopyTo(&array: TArray<DNXForm>; index: Int32);
    ///<summary>
    ///  Determines does this dictionary contasins specified key.
    ///</summary>
    ///  <param name="key">Key to search in the dictionary.</param>
    ///<returns>true if key is found.</returns>
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXForm): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a value indicating whether dictionary is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Gets a value indicating whether dictionary has a fixed size.
    ///</summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  Gets keys of the dictionary. If appearance dictionary has subditionaries, then <see cref="P:Aspose.Pdf.Annotations.AppearanceDictionary.Keys" />
    ///  contains (N|R|D).state values,
    ///  where N - normal appearance, R - rollover appearance, D - down appearance and state - the name of the state
    ///  (e.g. On, Off for checkboxes).
    ///</summary>
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    ///<summary>
    ///  Gets the list of the dictionary values.
    ///  Result collection contains the list of XForm objects.
    ///</summary>
    property Values: DDN.mscorlib.DNICollection<DNXForm> read get_Values;
    ///<summary>
    ///  Gets a value indicating whether access to the dictionary is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the dictionary.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets the number of elements contained in the dictionary.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNAppearanceDictionary = class(TDNGenericImport<DNAppearanceDictionaryClass, DNAppearanceDictionary>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNBorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5434F105-53F8-54BB-B7F1-9BEFDDABA890}']
  { constructors } 

    ///<summary>
    ///  Constructor for border object.
    ///</summary>
    ///  <param name="parent">Parent annotation.</param>
    {class} function init(parent: DNAnnotation): DNBorder;

  end;

  ///<summary>
  ///  Class representing characteristics of annotation border.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Border')]
  DNBorder = interface(DDN.mscorlib.DNObject)
  ['{76717D34-90E4-32B7-971D-9D6C4E10D9D0}']
  { getters & setters } 

    function get_HCornerRadius: Double;
    procedure set_HCornerRadius(value: Double);
    function get_VCornerRadius: Double;
    procedure set_VCornerRadius(value: Double);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_EffectIntensity: Int32;
    procedure set_EffectIntensity(value: Int32);
    function get_Style: DNBorderStyle;
    procedure set_Style(value: DNBorderStyle);
    function get_Effect: DNBorderEffect;
    procedure set_Effect(value: DNBorderEffect);
    function get_Dash: DNDash;
    procedure set_Dash(value: DNDash);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets horizontal corner radius.
    ///</summary>
    property HCornerRadius: Double read get_HCornerRadius write set_HCornerRadius;
    ///<summary>
    ///  Gets or sets vertical corner radius.
    ///</summary>
    property VCornerRadius: Double read get_VCornerRadius write set_VCornerRadius;
    ///<summary>
    ///  Gets or sets border width.
    ///</summary>
    property Width: Int32 read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets effect intencity. Valid range of value is [0..2].
    ///</summary>
    property EffectIntensity: Int32 read get_EffectIntensity write set_EffectIntensity;
    ///<summary>
    ///  Gets or sets border style.
    ///</summary>
    ///<see cref="T:Aspose.Pdf.Annotations.BorderStyle" />
    property Style: DNBorderStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets border effect.
    ///</summary>
    ///<see cref="T:Aspose.Pdf.Annotations.BorderEffect" />
    property Effect: DNBorderEffect read get_Effect write set_Effect;
    ///<summary>
    ///  Gets or sets dash pattern.
    ///</summary>
    property Dash: DNDash read get_Dash write set_Dash;
  end;

  TDNBorder = class(TDNGenericImport<DNBorderClass, DNBorder>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCharacteristicsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{66A1C1B6-C4A2-5642-94E9-4CC0FF892201}']
  end;

  ///<summary>
  ///  Represents annotation characteristics
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Characteristics')]
  DNCharacteristics = interface(DDN.mscorlib.DNObject)
  ['{3897DFE0-7206-3F09-8D25-B1F3D756C48A}']
  { getters & setters } 

    function get_Background: DDN.Aspose.Common.DNColor;
    procedure set_Background(value: DDN.Aspose.Common.DNColor);
    function get_Border: DDN.Aspose.Common.DNColor;
    procedure set_Border(value: DDN.Aspose.Common.DNColor);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets color of the background
    ///</summary>
    property Background: DDN.Aspose.Common.DNColor read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets color of the border.
    ///</summary>
    property Border: DDN.Aspose.Common.DNColor read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets rotation of the annotation.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
  end;

  TDNCharacteristics = class(TDNGenericImport<DNCharacteristicsClass, DNCharacteristics>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDashClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A727230-E2E8-5334-9DD3-289FF55E8B67}']
  { constructors } 

    ///<summary>
    ///  Constructor for Dash.
    ///</summary>
    ///  <param name="on">Length of the dash.</param>
    ///  <param name="off">Length of the gap.</param>
    {class} function init(&on: Int32; off: Int32): DNDash;

  end;

  ///<summary>
  ///  Class representing line dash pattern.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Dash')]
  DNDash = interface(DDN.mscorlib.DNObject)
  ['{4878B964-A0CC-3A98-8A45-AC67A4D27743}']
  { getters & setters } 

    function get_On: Int32;
    procedure set_On(value: Int32);
    function get_Off: Int32;
    procedure set_Off(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets length of dash.
    ///</summary>
    property &On: Int32 read get_On write set_On;
    ///<summary>
    ///  Gets or sets length of gap between dashes.
    ///</summary>
    property Off: Int32 read get_Off write set_Off;
  end;

  TDNDash = class(TDNGenericImport<DNDashClass, DNDash>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDefaultAppearanceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18DD0221-5384-5B8A-A1FB-2BE3DEF9D36A}']
  { constructors } 

    ///<summary>
    ///  Constructor of DefaultAppearance.
    ///</summary>
    {class} function init: DNDefaultAppearance; overload;
    ///<summary>
    ///  Constructor of DefaultAppearance.
    ///</summary>
    ///  <param name="fontName">Font name.</param>
    ///  <param name="fontSize">Font size.</param>
    ///  <param name="textColor">Color of text.</param>
    {class} function init(fontName: string; fontSize: Double; textColor: DDN.Aspose.Common.DNColor): DNDefaultAppearance; overload;
    ///<summary>
    ///  Constructor of Default Appearance. Previously created font may be specified as default font.
    ///</summary>
    ///  <param name="font">Font which will be used as default.</param>
    ///  <param name="fontSize">Font size.</param>
    ///  <param name="textColor">Color of text.</param>
    {class} function init(font: DNFont; fontSize: Double; textColor: DDN.Aspose.Common.DNColor): DNDefaultAppearance; overload;

  end;

  ///<summary>
  ///  Describes default appearance of field (font, text size and color).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.DefaultAppearance')]
  DNDefaultAppearance = interface(DDN.mscorlib.DNObject)
  ['{303E8695-441E-3B5E-8B6D-6CCFD5452AC1}']
  { getters & setters } 

    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_TextColor: DDN.Aspose.Common.DNColor;
    procedure set_TextColor(value: DDN.Aspose.Common.DNColor);
    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_Font: DNFont;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets font size in default apperance.
    ///</summary>
    property FontSize: Double read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets the color of text in the default appearance.
    ///</summary>
    property TextColor: DDN.Aspose.Common.DNColor read get_TextColor write set_TextColor;
    ///<summary>
    ///  Gets font name in the default appearance.
    ///</summary>
    property FontName: string read get_FontName write set_FontName;
    ///<summary>
    ///  Gets font specified as default for text.
    ///</summary>
    property Font: DNFont read get_Font;
    ///<summary>
    ///  Gets the list of pdf operators which represent appearence.
    ///</summary>
    property Text: string read get_Text;
  end;

  TDNDefaultAppearance = class(TDNGenericImport<DNDefaultAppearanceClass, DNDefaultAppearance>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNDocumentActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BBA10093-ED23-50F5-AAD0-AC2A756B3B53}']
  { constructors } 

    ///<summary>
    ///  Constructor for DocumentActionCollection. Constructs DocumentActionCollection objects from Pdf.Kit.Engine Document object.
    ///</summary>
    ///  <param name="document">Document for which action colleciton is created.</param>
    {class} function init(document: DNDocument): DNDocumentActionCollection;

  end;

  ///<summary>
  ///  Class describes actions performed on some actions with document
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.DocumentActionCollection')]
  DNDocumentActionCollection = interface(DDN.mscorlib.DNObject)
  ['{81D0D694-8BB5-3E2E-AA9A-E0CF84A1484F}']
  { getters & setters } 

    function get_BeforeSaving: DNPdfAction;
    procedure set_BeforeSaving(value: DNPdfAction);
    function get_BeforeClosing: DNPdfAction;
    procedure set_BeforeClosing(value: DNPdfAction);
    function get_AfterSaving: DNPdfAction;
    procedure set_AfterSaving(value: DNPdfAction);
    function get_BeforePrinting: DNPdfAction;
    procedure set_BeforePrinting(value: DNPdfAction);
    function get_AfterPrinting: DNPdfAction;
    procedure set_AfterPrinting(value: DNPdfAction);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets action performed before document saving.
    ///</summary>
    property BeforeSaving: DNPdfAction read get_BeforeSaving write set_BeforeSaving;
    ///<summary>
    ///  Gets or sets action that will be performed before documetn closing.
    ///</summary>
    property BeforeClosing: DNPdfAction read get_BeforeClosing write set_BeforeClosing;
    ///<summary>
    ///  Gets or sets action that will be performed after document saving.
    ///</summary>
    property AfterSaving: DNPdfAction read get_AfterSaving write set_AfterSaving;
    ///<summary>
    ///  Action that will be performed before document printing.
    ///</summary>
    property BeforePrinting: DNPdfAction read get_BeforePrinting write set_BeforePrinting;
    ///<summary>
    ///  Action that will be performed after document printing.
    ///</summary>
    property AfterPrinting: DNPdfAction read get_AfterPrinting write set_AfterPrinting;
  end;

  TDNDocumentActionCollection = class(TDNGenericImport<DNDocumentActionCollectionClass, DNDocumentActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNExplicitDestinationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6388C7D-3B3C-54CB-9B9A-3DED06AA9734}']
  { static methods } 

    ///<summary>
    ///  Creates instances of ExplicitDestination descendant classes.
    ///</summary>
    ///  <param name="page">The object of destination page.</param>
    ///  <param name="type">The type of explicit destination.</param>
    ///  <param name="values">Array of double values.</param>
    ///<returns>The explicit destination object.</returns>
    {class} function CreateDestination(page: DNPage; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;
    ///<summary>
    ///  Creates instances of ExplicitDestination descendant classes.
    ///</summary>
    ///  <param name="doc">Document where destination will be created.</param>
    ///  <param name="pageNumber">Number of the page.</param>
    ///  <param name="type">Destionatyion type.</param>
    ///  <param name="values">Array of destination specific values.</param>
    ///<returns>The explicit destination object.</returns>
    {class} function CreateDestination(doc: DNDocument; pageNumber: Int32; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;
    ///<summary>
    ///  Creates instances of ExplicitDestination descendant classes.
    ///</summary>
    ///  <param name="pageNumber">The destination page number.</param>
    ///  <param name="type">The type of explicit destination.</param>
    ///  <param name="values">Array of double values.</param>
    ///<returns>The explicit destination object.</returns>
    {class} function CreateDestination(pageNumber: Int32; &type: DNExplicitDestinationType; values: TArray<Double>): DNExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents the base class for explicit destinations in PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ExplicitDestination')]
  DNExplicitDestination = interface(DDN.mscorlib.DNObject)
  ['{77CEED46-EDDA-3EBD-964A-4EDD38FBB3E7}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Returns string representation of ExplicitDestination object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNExplicitDestination = class(TDNGenericImport<DNExplicitDestinationClass, DNExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCustomExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{42140D29-872D-5B05-B839-F3CC488FE4FB}']
  end;

  ///<summary>
  ///  Represents custom explicit destination.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CustomExplicitDestination')]
  DNCustomExplicitDestination = interface(DNExplicitDestination)
  ['{9A73082D-727C-388B-8F9B-057FC3D4367D}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Returns string representation of ExplicitDestination object.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNCustomExplicitDestination = class(TDNGenericImport<DNCustomExplicitDestinationClass, DNCustomExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{0B7E45DA-0265-5FB4-8B66-3FD9AC3A6F00}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    {class} function init(page: DNPage): DNFitBExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    {class} function init(document: DNDocument; pageNumber: Int32): DNFitBExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    {class} function init(pageNumber: Int32): DNFitBExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with its contents magnified just enough to fit its bounding box entirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the bounding box within the window in the other dimension.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitBExplicitDestination')]
  DNFitBExplicitDestination = interface(DNExplicitDestination)
  ['{32C01FE2-2C24-3621-9E07-D4BC7EA97F4F}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitB".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBExplicitDestination = class(TDNGenericImport<DNFitBExplicitDestinationClass, DNFitBExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBHExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{D8221FA8-C725-5004-9B57-6DFFFFDCC8D6}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(page: DNPage; top: Double): DNFitBHExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; top: Double): DNFitBHExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(pageNumber: Int32; top: Double): DNFitBHExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of its bounding box within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitBHExplicitDestination')]
  DNFitBHExplicitDestination = interface(DNExplicitDestination)
  ['{E5565A32-7E6D-3EFD-BE51-99D1B16DA8AC}']
  { getters & setters } 

    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitBH 100".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the vertical coordinate top positioned at the top edge of the window.
    ///</summary>
    property Top: Double read get_Top;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBHExplicitDestination = class(TDNGenericImport<DNFitBHExplicitDestinationClass, DNFitBHExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitBVExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{AD5ED94B-9C6D-5644-A52F-ECA90C8D9A5A}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(page: DNPage; left: Double): DNFitBVExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double): DNFitBVExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(pageNumber: Int32; left: Double): DNFitBVExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of its bounding box within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitBVExplicitDestination')]
  DNFitBVExplicitDestination = interface(DNExplicitDestination)
  ['{F39AF27F-9A2C-38D0-92AB-B9CF8C694C28}']
  { getters & setters } 

    function get_Left: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitBV 100".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the horizontal coordinate left positioned at the left edge of the window.
    ///</summary>
    property Left: Double read get_Left;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitBVExplicitDestination = class(TDNGenericImport<DNFitBVExplicitDestinationClass, DNFitBVExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{C4E7AED2-CA9D-51CD-83FB-5D94E81BBA6B}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    {class} function init(page: DNPage): DNFitExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The Aspose.Pdf.Document object.</param>
    ///  <param name="pageNumber">The destination page number.</param>
    {class} function init(document: DNDocument; pageNumber: Int32): DNFitExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    {class} function init(pageNumber: Int32): DNFitExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with its contents magnified just enough to fit the entire page within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the page within the window in the other dimension.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitExplicitDestination')]
  DNFitExplicitDestination = interface(DNExplicitDestination)
  ['{C76393F1-03DB-3D72-957D-F9342C3E7FD0}']
  { getters & setters } 

    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 Fit".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitExplicitDestination = class(TDNGenericImport<DNFitExplicitDestinationClass, DNFitExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitHExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{0829E5C3-01E5-5999-B50D-AD612071BC8D}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(page: DNPage; top: Double): DNFitHExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; top: Double): DNFitHExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="top">The vertical coordinate top positioned at the top edge of the window.</param>
    {class} function init(pageNumber: Int32; top: Double): DNFitHExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with the vertical coordinate top positioned at the top edge of the window and the contents of the page magnified just enough to fit the entire width of the page within the window. A null value for top specifies that the current value of that parameter is to be retained unchanged.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitHExplicitDestination')]
  DNFitHExplicitDestination = interface(DNExplicitDestination)
  ['{2656A15D-A429-391B-9A80-54BBCC1F2CAA}']
  { getters & setters } 

    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitH 100".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the vertical coordinate top positioned at the top edge of the window.
    ///</summary>
    property Top: Double read get_Top;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitHExplicitDestination = class(TDNGenericImport<DNFitHExplicitDestinationClass, DNFitHExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitRExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{14C84A1C-B8FE-5C79-BD91-B424BF6D5B7F}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="left">Left horizontal coordinate of visible rectangle.</param>
    ///  <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
    ///  <param name="right">Right horizontal coordinate of visible rectangle.</param>
    ///  <param name="top">Top vertical coordinate of visible rectangle.</param>
    {class} function init(page: DNPage; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">Left horizontal coordinate of visible rectangle.</param>
    ///  <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
    ///  <param name="right">Right horizontal coordinate of visible rectangle.</param>
    ///  <param name="top">Top vertical coordinate of visible rectangle.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">Left horizontal coordinate of visible rectangle.</param>
    ///  <param name="bottom">Bottom vertical coordinate of visible rectangle.</param>
    ///  <param name="right">Right horizontal coordinate of visible rectangle.</param>
    ///  <param name="top">Top vertical coordinate of visible rectangle.</param>
    {class} function init(pageNumber: Int32; left: Double; bottom: Double; right: Double; top: Double): DNFitRExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with its contents magnified just enough to fit the rectangle specified by the coordinates left, bottom, right, and topentirely within the window both horizontally and vertically. If the required horizontal and vertical magnification factors are different, use the smaller of the two, centering the rectangle within the window in the other dimension. A null value for any of the parameters may result in unpredictable behavior.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitRExplicitDestination')]
  DNFitRExplicitDestination = interface(DNExplicitDestination)
  ['{EDA25105-E3C6-3369-A4EC-37036AC0BCDA}']
  { getters & setters } 

    function get_Left: Double;
    function get_Bottom: Double;
    function get_Right: Double;
    function get_Top: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitR 100 200 300 400".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets left horizontal coordinate of visible rectangle.
    ///</summary>
    property Left: Double read get_Left;
    ///<summary>
    ///  Gets bottom vertical coordinate of visible rectangle.
    ///</summary>
    property Bottom: Double read get_Bottom;
    ///<summary>
    ///  Gets right horizontal coordinate of visible rectangle.
    ///</summary>
    property Right: Double read get_Right;
    ///<summary>
    ///  Gets top vertical coordinate of visible rectangle.
    ///</summary>
    property Top: Double read get_Top;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitRExplicitDestination = class(TDNGenericImport<DNFitRExplicitDestinationClass, DNFitRExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFitVExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{50DCB931-3046-5457-ACC1-4FE56C37E596}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(page: DNPage; left: Double): DNFitVExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double): DNFitVExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">The horizontal coordinate left positioned at the left edge of the window.</param>
    {class} function init(pageNumber: Int32; left: Double): DNFitVExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with the horizontal coordinate left positioned at the left edge of the window and the contents of the page magnified just enough to fit the entire height of the page within the window. A null value for left specifies that the current value of that parameter is to be retained unchanged.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FitVExplicitDestination')]
  DNFitVExplicitDestination = interface(DNExplicitDestination)
  ['{6E435F34-903A-3C3B-9741-D433ACC0EC12}']
  { getters & setters } 

    function get_Left: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 FitV 100".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the horizontal coordinate left positioned at the left edge of the window.
    ///</summary>
    property Left: Double read get_Left;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNFitVExplicitDestination = class(TDNGenericImport<DNFitVExplicitDestinationClass, DNFitVExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNXYZExplicitDestinationClass = interface(DNExplicitDestinationClass)
  ['{7A21B98E-4D6F-5320-9797-C5BC7E51AA6B}']
  { constructors } 

    ///<summary>
    ///  Creates local explicit destination.
    ///</summary>
    ///  <param name="page">The destination page object.</param>
    ///  <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
    ///  <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
    ///  <param name="zoom">Zoom factor.</param>
    {class} function init(page: DNPage; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="document">The parent document that contains this object.</param>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
    ///  <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
    ///  <param name="zoom">Zoom factor.</param>
    {class} function init(document: DNDocument; pageNumber: Int32; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;
    ///<summary>
    ///  Creates remote explicit destination.
    ///</summary>
    ///  <param name="pageNumber">The destination page number of remote document.</param>
    ///  <param name="left">Left horizontal coordinate of the upper-left corner of the window.</param>
    ///  <param name="top">Top vertical coordinate of the upper-left corner of the window.</param>
    ///  <param name="zoom">Zoom factor.</param>
    {class} function init(pageNumber: Int32; left: Double; top: Double; zoom: Double): DNXYZExplicitDestination; overload;

  { static methods } 

    ///<summary>
    ///  Create destintion to specified location of the page considering page rotation if required.
    ///</summary>
    ///  <param name="page">Destination page.</param>
    ///  <param name="left">Left position on the page.</param>
    ///  <param name="top">Top position on the page.</param>
    ///  <param name="zoom">Zoom factor (0 for default).</param>
    ///  <param name="considerRotation">If true position will be recalculated according to page rotation.</param>
    ///<returns>Destination object.</returns>
    {class} function CreateDestination(page: DNPage; left: Double; top: Double; zoom: Double; considerRotation: Boolean): DNXYZExplicitDestination;
    ///<summary>
    ///  Create destionation to upper left corner of the specifed page.
    ///</summary>
    ///  <param name="page">Destination page.</param>
    ///  <param name="zoom">Zoom factor.</param>
    ///<returns>Destination object.</returns>
    {class} function CreateDestinationToUpperLeftCorner(page: DNPage; zoom: Double): DNXYZExplicitDestination; overload;
    ///<summary>
    ///  Create destination to specified page.
    ///</summary>
    ///  <param name="page">Destination page.</param>
    ///<returns>Destination object.</returns>
    {class} function CreateDestinationToUpperLeftCorner(page: DNPage): DNXYZExplicitDestination; overload;

  end;

  ///<summary>
  ///  Represents explicit destination that displays the page with the coordinates (left, top) positioned at the upper-left corner of the window and the contents of the page magnified by the factor zoom. A null value for any of the parameters left, top, or zoom specifies that the current value of that parameter is to be retained unchanged. A zoom value of 0 has the same meaning as a null value.
  ///</summary>
  ///<example><code lang="C#">
  ///  Document doc = new Document("example.pdf");
  ///  XYZExplicitDestination dest = (XYZExplicitDestination)doc.Outlines[1].Destination;
  ///  string left = dest.Left;
  ///  string top = dest.Top;
  ///  string zoom = dest.Zoom;
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Annotations.XYZExplicitDestination')]
  DNXYZExplicitDestination = interface(DNExplicitDestination)
  ['{707A55F5-B34E-3730-8C1B-45196CBC74CA}']
  { getters & setters } 

    function get_Left: Double;
    function get_Top: Double;
    function get_Zoom: Double;
    function get_Page: DNPage;
    function get_PageNumber: Int32;

  { methods } 

    ///<summary>
    ///  Converts the object state into string value. Example: "1 XYZ 100 200 3".
    ///</summary>
    ///<returns>String value representing object state.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets left horizontal coordinate of the upper-left corner of the window.
    ///</summary>
    property Left: Double read get_Left;
    ///<summary>
    ///  Gets top vertical coordinate of the upper-left corner of the window.
    ///</summary>
    property Top: Double read get_Top;
    ///<summary>
    ///  Gets zoom factor.
    ///</summary>
    property Zoom: Double read get_Zoom;
    ///<summary>
    ///  Gets the destination page object
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets the destination page number
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNXYZExplicitDestination = class(TDNGenericImport<DNXYZExplicitDestinationClass, DNXYZExplicitDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFixedPrintClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F278111F-A571-5DA8-91DB-E26870D42E1F}']
  end;

  ///<summary>
  ///  Represent Fixed print data of Watermark Annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FixedPrint')]
  DNFixedPrint = interface(DDN.mscorlib.DNObject)
  ['{F762CF66-308B-3CA1-B130-F1E117230995}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_HorizontalTranslation: Double;
    procedure set_HorizontalTranslation(value: Double);
    function get_VerticalTranslation: Double;
    procedure set_VerticalTranslation(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property HorizontalTranslation: Double read get_HorizontalTranslation write set_HorizontalTranslation;
    property VerticalTranslation: Double read get_VerticalTranslation write set_VerticalTranslation;
  end;

  TDNFixedPrint = class(TDNGenericImport<DNFixedPrintClass, DNFixedPrint>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Defines Visitor for visiting different document annotations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.IAnnotationVisitor')]
  DNIAnnotationVisitor = interface(DDN.mscorlib.DNObject)
  ['{B5C685A3-5B12-3DD9-9BD3-D667C6B6BDF5}']
  { methods } 

    ///<summary>
    ///  Visit/select link annotation.
    ///</summary>
    ///  <param name="link">
    ///  LinkAnnotation object example/template.
    ///</param>
    procedure Visit(link: DNLinkAnnotation); overload;
    ///<summary>
    ///  Visit/select attachment annotation.
    ///</summary>
    ///  <param name="attachment">
    ///  FileAttachmentAnnotation object example/template.
    ///</param>
    procedure Visit(attachment: DNFileAttachmentAnnotation); overload;
    ///<summary>
    ///  Visit/select text annotation.
    ///</summary>
    ///  <param name="text">
    ///  TextAnnotation object example/template.
    ///</param>
    procedure Visit(text: DNTextAnnotation); overload;
    ///<summary>
    ///  Visit/select freetext annotation.
    ///</summary>
    ///  <param name="freetext">
    ///  FreeTextAnnotation object example/template.
    ///</param>
    procedure Visit(freetext: DNFreeTextAnnotation); overload;
    ///<summary>
    ///  Visit/select highlight annotation.
    ///</summary>
    ///  <param name="highlight">
    ///  HighlightAnnotation object example/template.
    ///</param>
    procedure Visit(highlight: DNHighlightAnnotation); overload;
    ///<summary>
    ///  Visit/select underline annotation.
    ///</summary>
    ///  <param name="underline">
    ///  UnderlineAnnotation object example/template.
    ///</param>
    procedure Visit(underline: DNUnderlineAnnotation); overload;
    ///<summary>
    ///  Visit/select strikeOut annotation.
    ///</summary>
    ///  <param name="strikeOut">
    ///  StrikeOutAnnotation object example/template.
    ///</param>
    procedure Visit(strikeOut: DNStrikeOutAnnotation); overload;
    ///<summary>
    ///  Visit/select squiggly annotation.
    ///</summary>
    ///  <param name="squiggly">
    ///  SquigglyAnnotation object example/template.
    ///</param>
    procedure Visit(squiggly: DNSquigglyAnnotation); overload;
    ///<summary>
    ///  Visit/select popup annotation.
    ///</summary>
    ///  <param name="popup">
    ///  PopupAnnotation object example/template.
    ///</param>
    procedure Visit(popup: DNPopupAnnotation); overload;
    ///<summary>
    ///  Visit/select line annotation.
    ///</summary>
    ///  <param name="line">
    ///  LineAnnotation object example/template.
    ///</param>
    procedure Visit(line: DNLineAnnotation); overload;
    ///<summary>
    ///  Visit/select circle annotation.
    ///</summary>
    ///  <param name="circle">
    ///  CircleAnnotation object example/template.
    ///</param>
    procedure Visit(circle: DNCircleAnnotation); overload;
    ///<summary>
    ///  Visit/select square annotation.
    ///</summary>
    ///  <param name="square">
    ///  SquareAnnotation object example/template.
    ///</param>
    procedure Visit(square: DNSquareAnnotation); overload;
    ///<summary>
    ///  Visit/select ink annotation.
    ///</summary>
    ///  <param name="ink">
    ///  InkAnnotation object example/template.
    ///</param>
    procedure Visit(ink: DNInkAnnotation); overload;
    ///<summary>
    ///  Visit/select polyline annotation.
    ///</summary>
    ///  <param name="polyline">
    ///  PolylineAnnotation object example/template.
    ///</param>
    procedure Visit(polyline: DNPolylineAnnotation); overload;
    ///<summary>
    ///  Visit/select polygon annotation.
    ///</summary>
    ///  <param name="polygon">
    ///  PolygonAnnotation object example/template.
    ///</param>
    procedure Visit(polygon: DNPolygonAnnotation); overload;
    ///<summary>
    ///  Visit/select caret annotation.
    ///</summary>
    ///  <param name="caret">
    ///  CaretAnnotation object example/template.
    ///</param>
    procedure Visit(caret: DNCaretAnnotation); overload;
    ///<summary>
    ///  Visit/select stamp annotation.
    ///</summary>
    ///  <param name="stamp">
    ///  StampAnnotation object example/template.
    ///</param>
    procedure Visit(stamp: DNStampAnnotation); overload;
    ///<summary>
    ///  Visit/select widget annotation.
    ///</summary>
    ///  <param name="widget">
    ///  WidgetAnnotation object example/template.
    ///</param>
    procedure Visit(widget: DNWidgetAnnotation); overload;
    ///<summary>
    ///  Visit/select movie annotation.
    ///</summary>
    ///  <param name="movie">
    ///  MovieAnnotation object example/template.
    ///</param>
    procedure Visit(movie: DNMovieAnnotation); overload;
    ///<summary>
    ///  Visit/select screen annotation.
    ///</summary>
    ///  <param name="screen">
    ///  ScreenAnnotation object example/template.
    ///</param>
    procedure Visit(screen: DNScreenAnnotation); overload;

  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  ///<summary>
  ///  Represents general interface for actions and destinations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.IAppointment')]
  DNIAppointment = interface(DDN.mscorlib.DNObject)
  ['{68FB3EE4-EEF7-3960-89B4-EDD99C58EBEB}']
  { methods } 

    ///<summary>
    ///  Returns string representation
    ///</summary>
    ///<returns></returns>
    function ToString: string;

  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A038E47-AF30-5726-8A9B-F4D46A403AD6}']
  { constructors } 

    ///<summary>
    ///  Creates Measure object for measure annotations.
    ///</summary>
    ///  <param name="annotation">Annotation for which measure will be bound.</param>
    {class} function init(annotation: DNAnnotation): DNMeasure;

  end;

  ///<summary>
  ///  Class which describes Measure coordinate system.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Measure')]
  DNMeasure = interface(DDN.mscorlib.DNObject)
  ['{A505924C-5D69-3E2A-852B-6117E17C90C5}']
  { getters & setters } 

    function get_ScaleRatio: string;
    procedure set_ScaleRatio(value: string);
    function get_XFormat: DNMeasure_NumberFormatList;
    procedure set_XFormat(value: DNMeasure_NumberFormatList);
    function get_YFormat: DNMeasure_NumberFormatList;
    procedure set_YFormat(value: DNMeasure_NumberFormatList);
    function get_DistanceFormat: DNMeasure_NumberFormatList;
    procedure set_DistanceFormat(value: DNMeasure_NumberFormatList);
    function get_AreaFormat: DNMeasure_NumberFormatList;
    procedure set_AreaFormat(value: DNMeasure_NumberFormatList);
    function get_AngleFormat: DNMeasure_NumberFormatList;
    procedure set_AngleFormat(value: DNMeasure_NumberFormatList);
    function get_SlopeFormat: DNMeasure_NumberFormatList;
    procedure set_SlopeFormat(value: DNMeasure_NumberFormatList);
    function get_Origin: DNPoint;
    procedure set_Origin(value: DNPoint);
    function get_XYFactor: Double;
    procedure set_XYFactor(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  A text string expressing the scale ratio of the drawing.
    ///</summary>
    property ScaleRatio: string read get_ScaleRatio write set_ScaleRatio;
    ///<summary>
    ///  A number format array for measurement of change along the xaxis and, if Y is not present, along the y axis as well
    ///</summary>
    property XFormat: DNMeasure_NumberFormatList read get_XFormat write set_XFormat;
    ///<summary>
    ///  A number format array for measurement of change along the y axis.
    ///</summary>
    property YFormat: DNMeasure_NumberFormatList read get_YFormat write set_YFormat;
    ///<summary>
    ///  A number format array for measurement of distance in any direction.
    ///</summary>
    property DistanceFormat: DNMeasure_NumberFormatList read get_DistanceFormat write set_DistanceFormat;
    ///<summary>
    ///  A number format array for measurement of area.
    ///</summary>
    property AreaFormat: DNMeasure_NumberFormatList read get_AreaFormat write set_AreaFormat;
    ///<summary>
    ///  A number format array for measurement of angles.
    ///</summary>
    property AngleFormat: DNMeasure_NumberFormatList read get_AngleFormat write set_AngleFormat;
    ///<summary>
    ///  A number format array for measurement of the slope of a line.
    ///</summary>
    property SlopeFormat: DNMeasure_NumberFormatList read get_SlopeFormat write set_SlopeFormat;
    ///<summary>
    ///  Point that shall specify the origin of the measurement coordinate system in default user space coordinates.
    ///</summary>
    property Origin: DNPoint read get_Origin write set_Origin;
    ///<summary>
    ///  A factor that shall be used to convert the largest units along the y axis to the largest units along the x axis.
    ///</summary>
    property XYFactor: Double read get_XYFactor write set_XYFactor;
  end;

  TDNMeasure = class(TDNGenericImport<DNMeasureClass, DNMeasure>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasure_NumberFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AAE2B89F-15EF-58FE-A65A-CB34A6A14757}']
  { constructors } 

    ///<summary>
    ///  Constructor for NumberFormat class.
    ///</summary>
    ///  <param name="measure">Measure object which contains this number format.</param>
    {class} function init(measure: DNMeasure): DNMeasure_NumberFormat;

  end;

  ///<summary>
  ///  Number format for measure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormat')]
  DNMeasure_NumberFormat = interface(DDN.mscorlib.DNObject)
  ['{F8AFC3C0-1B42-3BD8-997E-1FFF7D53B5EC}']
  { getters & setters } 

    function get_UnitLabel: string;
    procedure set_UnitLabel(value: string);
    function get_ConvresionFactor: Double;
    procedure set_ConvresionFactor(value: Double);
    function get_FractionDisplayment: DNNumberFormat_FractionStyle;
    procedure set_FractionDisplayment(value: DNNumberFormat_FractionStyle);
    function get_Precision: Int32;
    procedure set_Precision(value: Int32);
    function get_Denominator: Int32;
    procedure set_Denominator(value: Int32);
    function get_ForceDenominator: Boolean;
    procedure set_ForceDenominator(value: Boolean);
    function get_ThousandsSeparator: string;
    procedure set_ThousandsSeparator(value: string);
    function get_FractionSeparator: string;
    procedure set_FractionSeparator(value: string);
    function get_BeforeText: string;
    procedure set_BeforeText(value: string);
    function get_AfterText: string;
    procedure set_AfterText(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  A text string specifying a label for displaying the units.
    ///</summary>
    property UnitLabel: string read get_UnitLabel write set_UnitLabel;
    ///<summary>
    ///  The conversion factor used to multiply a value in partial units of the previous number format array element to obtain a value in the units of this number format.
    ///</summary>
    property ConvresionFactor: Double read get_ConvresionFactor write set_ConvresionFactor;
    ///<summary>
    ///  In what manner fractional values are displayed.
    ///</summary>
    property FractionDisplayment: DNNumberFormat_FractionStyle read get_FractionDisplayment write set_FractionDisplayment;
    ///<summary>
    ///  If FractionDisplayment is ShowAsDecimal, this value is precision of fractional value; It shall me multiple of 10. Default is 100.
    ///</summary>
    property Precision: Int32 read get_Precision write set_Precision;
    ///<summary>
    ///  If FractionDisplayment is ShowAsFraction, this value is denominator of the fraction. Default value is 16.
    ///</summary>
    property Denominator: Int32 read get_Denominator write set_Denominator;
    ///<summary>
    ///  If FractionDisplayment is ShowAsFraction, this value determines meay or not the fraction be reduced. If value is true fraction may not be reduced.
    ///</summary>
    property ForceDenominator: Boolean read get_ForceDenominator write set_ForceDenominator;
    ///<summary>
    ///  Text that shall be used between orders of thousands in display of numerical values. An empty string indicates that no text shall be added. Default is comma.
    ///</summary>
    property ThousandsSeparator: string read get_ThousandsSeparator write set_ThousandsSeparator;
    ///<summary>
    ///  Text that shall be used as the decimal position in displaying numerical values. An empty string indicates that the default shall be used. Default is period character.
    ///</summary>
    property FractionSeparator: string read get_FractionSeparator write set_FractionSeparator;
    ///<summary>
    ///  Text that shall be concatenated to the left of the label.
    ///</summary>
    property BeforeText: string read get_BeforeText write set_BeforeText;
    ///<summary>
    ///  Text that shall be concatenated after the label
    ///</summary>
    property AfterText: string read get_AfterText write set_AfterText;
  end;

  TDNMeasure_NumberFormat = class(TDNGenericImport<DNMeasure_NumberFormatClass, DNMeasure_NumberFormat>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMeasure_NumberFormatListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1A856092-2F7F-52B6-9CB0-FB60151F4BE9}']
  { constructors } 

    ///<summary>
    ///  Constructor for NumberFormatList.
    ///</summary>
    ///  <param name="measure">Parent measure object.</param>
    {class} function init(measure: DNMeasure): DNMeasure_NumberFormatList;

  end;

  ///<summary>
  ///  Represents list of number formats.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Measure+NumberFormatList')]
  DNMeasure_NumberFormatList = interface(DDN.mscorlib.DNObject)
  ['{EF97B762-8F1E-3094-8C65-9597F67603EC}']
  { getters & setters } 

    function get_Item(index: Int32): DNMeasure_NumberFormat;
    procedure set_Item(index: Int32; value: DNMeasure_NumberFormat);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Adds number format to list.
    ///</summary>
    ///  <param name="value">Value to be added into list.</param>
    procedure Add(value: DNMeasure_NumberFormat);
    ///<summary>
    ///  Inserts number format into list.
    ///</summary>
    ///  <param name="index">Index where new element will be added.</param>
    ///  <param name="value">Value to be inserted.</param>
    procedure Insert(index: Int32; value: DNMeasure_NumberFormat);
    ///<summary>
    ///  Removes number format from list.
    ///</summary>
    ///  <param name="index">Index of item to be removed.</param>
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNMeasure_NumberFormat read get_Item write set_Item; default;
    ///<summary>
    ///  Count if items in the list.
    ///</summary>
    property Count: Int32 read get_Count;
  end;

  TDNMeasure_NumberFormatList = class(TDNGenericImport<DNMeasure_NumberFormatListClass, DNMeasure_NumberFormatList>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE1AD388-6BF1-5D79-A777-240F47A5B42E}']
  end;

  [DNTypeName('Aspose.Pdf.Annotations.MediaClip')]
  DNMediaClip = interface(DDN.mscorlib.DNObject)
  ['{44C3072D-29BE-3736-BFA1-6D72389FAA36}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaClip = class(TDNGenericImport<DNMediaClipClass, DNMediaClip>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipDataClass = interface(DNMediaClipClass)
  ['{8B66413D-1E64-54F9-A5E5-F2B0A1A3D4F3}']
  end;

  ///<summary>
  ///  Class describes media clip data.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.MediaClipData')]
  DNMediaClipData = interface(DNMediaClip)
  ['{B514F7EE-F35B-3FC1-B6BF-29FBD0541ADD}']
  { getters & setters } 

    function get_Data: DNFileSpecification;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Return file specification which contains actual media data .
    ///</summary>
    property Data: DNFileSpecification read get_Data;
  end;

  TDNMediaClipData = class(TDNGenericImport<DNMediaClipDataClass, DNMediaClipData>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaClipSectionClass = interface(DNMediaClipClass)
  ['{E732A316-B6A7-52C2-A3E6-FB703D49962C}']
  end;

  ///<summary>
  ///  This class descibes Media clip section.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.MediaClipSection')]
  DNMediaClipSection = interface(DNMediaClip)
  ['{45BD14B9-AEA7-3E6A-9294-66D9BDFB61D5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMediaClipSection = class(TDNGenericImport<DNMediaClipSectionClass, DNMediaClipSection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNNamedDestinationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{50826541-E783-521E-AE9B-3562F81195D6}']
  { constructors } 

    ///<summary>
    ///  Create named destination.
    ///</summary>
    ///  <param name="doc">Document where named destination should be created.</param>
    ///  <param name="name">Name to which destination refers.</param>
    {class} function init(doc: DNDocument; name: string): DNNamedDestination;

  end;

  ///<summary>
  ///  Instead of being defined directly with the explicit syntax, a destination may be referred to indirectly by means of a name object or a byte string.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.NamedDestination')]
  DNNamedDestination = interface(DDN.mscorlib.DNObject)
  ['{8E031FF3-DA99-36F6-92D7-454DBB142CE1}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    ///<summary>
    ///  Converts destination to string value.
    ///</summary>
    ///<returns>String value.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the name of named destination.
    ///</summary>
    property Name: string read get_Name;
  end;

  TDNNamedDestination = class(TDNGenericImport<DNNamedDestinationClass, DNNamedDestination>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DArtworkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F9F6B6F3-3B27-530E-AB5F-12F5E037DBB1}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DArtwork" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    ///  <param name="content">The content.</param>
    ///  <param name="lightingScheme">The lighting scheme.</param>
    ///  <param name="renderMode">The render mode.</param>
    {class} function init(doc: DNDocument; content: DNPDF3DContent; lightingScheme: DNPDF3DLightingScheme; renderMode: DNPDF3DRenderMode): DNPDF3DArtwork; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DArtwork" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    ///  <param name="content">The content.</param>
    {class} function init(doc: DNDocument; content: DNPDF3DContent): DNPDF3DArtwork; overload;

  end;

  ///<summary>
  ///  Class PDF3DArtwork.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DArtwork')]
  DNPDF3DArtwork = interface(DDN.mscorlib.DNObject)
  ['{22C08AB8-CF87-3BE9-BF83-264849184F01}']
  { getters & setters } 

    function get_LightingScheme: DNPDF3DLightingScheme;
    procedure set_LightingScheme(value: DNPDF3DLightingScheme);
    function get_RenderMode: DNPDF3DRenderMode;
    procedure set_RenderMode(value: DNPDF3DRenderMode);
    function get_ViewArray: DNPDF3DViewArray;

  { methods } 

    ///<summary>
    ///  Gets the views array.
    ///</summary>
    ///<returns>Array of views.</returns>
    function GetViewsArray: TArray<DNPDF3DView>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the lighting scheme.
    ///</summary>
    ///<value>The lighting scheme.</value>
    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme write set_LightingScheme;
    ///<summary>
    ///  Gets or sets the render mode.
    ///</summary>
    ///<value>The render mode.</value>
    property RenderMode: DNPDF3DRenderMode read get_RenderMode write set_RenderMode;
    ///<summary>
    ///  Gets the view array.
    ///</summary>
    ///<value>The view array.</value>
    property ViewArray: DNPDF3DViewArray read get_ViewArray;
  end;

  TDNPDF3DArtwork = class(TDNGenericImport<DNPDF3DArtworkClass, DNPDF3DArtwork>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DContentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73599C70-803A-5E53-B94D-12B8802710C6}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DContent" />
    ///  class.
    ///</summary>
    {class} function init: DNPDF3DContent; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DContent" />
    ///  class.
    ///</summary>
    ///  <param name="filename">The filename.</param>
    ///<exception cref="T:System.ArgumentException">Unknown 3D Artwork type</exception>
    {class} function init(filename: string): DNPDF3DContent; overload;

  end;

  ///<summary>
  ///  Class PDF3DContent.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DContent')]
  DNPDF3DContent = interface(DDN.mscorlib.DNObject)
  ['{0C589CCD-6083-34E3-8425-DD1134B6206B}']
  { getters & setters } 

    function get_Extension: string;

  { methods } 

    ///<summary>
    ///  Loads 3D content with the specified filename.
    ///</summary>
    ///  <param name="filename">The filename.</param>
    ///<exception cref="T:System.ArgumentException">Unknown 3D content type</exception>
    procedure Load(filename: string);
    ///<summary>
    ///  Loads 3D content with the specified filename as PRC format.
    ///</summary>
    ///  <param name="filename">The filename.</param>
    procedure LoadAsPRC(filename: string); overload;
    ///<summary>
    ///  Loads 3D content with the specified filename as U3D format.
    ///</summary>
    ///  <param name="filename">The filename.</param>
    procedure LoadAsU3D(filename: string); overload;
    ///<summary>
    ///  Loads 3D content from stream as PRC format.
    ///</summary>
    ///  <param name="stream">The 3D content stream.</param>
    procedure LoadAsPRC(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Loads 3D content from stream as U3D format.
    ///</summary>
    ///  <param name="stream">The 3D content stream.</param>
    procedure LoadAsU3D(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Loads 3D content from byte array as PRC format.
    ///</summary>
    ///  <param name="stream">The stream.</param>
    procedure LoadAsPRC(stream: TArray<Byte>); overload;
    ///<summary>
    ///  Loads 3D content from byte array as U3D format.
    ///</summary>
    ///  <param name="stream">The stream.</param>
    procedure LoadAsU3D(stream: TArray<Byte>); overload;
    ///<summary>
    ///  Saves 3D content to file.
    ///</summary>
    ///  <param name="filename">The file name.</param>
    ///<exception cref="T:System.ArgumentException">3DArtwork content format is PRC or U3D.</exception>
    procedure SaveToFile(filename: string);
    ///<summary>
    ///  Gets 3D content as stream.
    ///</summary>
    ///<returns>Stream.</returns>
    function GetAsStream: DDN.mscorlib.DNStream;
    ///<summary>
    ///  Gets 3D content as byte array.
    ///</summary>
    ///<returns>System.Byte[].</returns>
    function GetAsByteArray: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the extension .
    ///</summary>
    ///<value>The extension.</value>
    property Extension: string read get_Extension;
  end;

  TDNPDF3DContent = class(TDNGenericImport<DNPDF3DContentClass, DNPDF3DContent>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCrossSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0CB848F2-569A-5F21-84C8-F8B8B67E45CE}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCrossSection" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    {class} function init(doc: DNDocument): DNPDF3DCrossSection;

  end;

  ///<summary>
  ///  Class PDF3DCrossSection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCrossSection')]
  DNPDF3DCrossSection = interface(DDN.mscorlib.DNObject)
  ['{4A2A6338-4C64-32B9-B506-9C1EC18F6486}']
  { getters & setters } 

    function get_Center: DNPoint3D;
    procedure set_Center(value: DNPoint3D);
    function get_CuttingPlaneOpacity: Double;
    procedure set_CuttingPlaneOpacity(value: Double);
    function get_CuttingPlaneOrientation: DNPDF3DCuttingPlaneOrientation;
    procedure set_CuttingPlaneOrientation(value: DNPDF3DCuttingPlaneOrientation);
    function get_CuttingPlaneColor: DNColor;
    procedure set_CuttingPlaneColor(value: DNColor);
    function get_CuttingPlanesIntersectionColor: DNColor;
    procedure set_CuttingPlanesIntersectionColor(value: DNColor);
    function get_Visibility: Boolean;
    procedure set_Visibility(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the cross section rotation center.
    ///</summary>
    ///<value>The center.</value>
    property Center: DNPoint3D read get_Center write set_Center;
    ///<summary>
    ///  Gets or sets the cutting plane opacity.
    ///</summary>
    ///<value>The cutting plane opacity.</value><exception cref="T:System.Exception">The number must be in the range [0 , 1]</exception>
    property CuttingPlaneOpacity: Double read get_CuttingPlaneOpacity write set_CuttingPlaneOpacity;
    ///<summary>
    ///  Gets or sets the cutting plane orientation.
    ///</summary>
    ///<value>The cutting plane orientation.</value><exception cref="T:System.Exception">
    ///  Only one of the values shall be Null
    ///</exception>
    property CuttingPlaneOrientation: DNPDF3DCuttingPlaneOrientation read get_CuttingPlaneOrientation write set_CuttingPlaneOrientation;
    ///<summary>
    ///  Gets or sets the color of the cutting plane.
    ///</summary>
    ///<value>The color of the cutting plane.</value>
    property CuttingPlaneColor: DNColor read get_CuttingPlaneColor write set_CuttingPlaneColor;
    ///<summary>
    ///  Gets or sets the color of the cutting planes intersection.
    ///</summary>
    ///<value>The color of the cutting planes intersection.</value>
    property CuttingPlanesIntersectionColor: DNColor read get_CuttingPlanesIntersectionColor write set_CuttingPlanesIntersectionColor;
    ///<summary>
    ///  Gets or sets a value indicating visibility of the cutting planes intersection.
    ///</summary>
    ///<value><c>true</c> if visible; otherwise, <c>false</c>.</value>
    property Visibility: Boolean read get_Visibility write set_Visibility;
  end;

  TDNPDF3DCrossSection = class(TDNGenericImport<DNPDF3DCrossSectionClass, DNPDF3DCrossSection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCrossSectionArrayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B872CEFD-CBD3-5CC9-8A26-E443FD5A41D8}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCrossSectionArray" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    {class} function init(doc: DNDocument): DNPDF3DCrossSectionArray;

  end;

  ///<summary>
  ///  Class PDF3DCrossSectionArray.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCrossSectionArray')]
  DNPDF3DCrossSectionArray = interface(DDN.mscorlib.DNObject)
  ['{E8013215-9304-3A2B-A645-9D2C9AC901F3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPDF3DCrossSection;
    procedure set_Item(index: Int32; value: DNPDF3DCrossSection);

  { methods } 

    ///<summary>
    ///  Adds the specified cross section to views array .
    ///</summary>
    ///  <param name="crossSection">The cross section.</param>
    procedure Add(crossSection: DNPDF3DCrossSection);
    ///<summary>
    ///  Removes cross section from array at specified index.
    ///</summary>
    ///  <param name="index">The index of removed cross section in array.</param>
    ///<exception cref="T:System.IndexOutOfRangeException">Invalid index: index should be in the range [1..n] where n equals to the cross sections count.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all cross section from array.
    ///</summary>
    procedure RemoveAll;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the cross section count.
    ///</summary>
    ///<value>The cross section count.</value>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPDF3DCrossSection read get_Item write set_Item; default;
  end;

  TDNPDF3DCrossSectionArray = class(TDNGenericImport<DNPDF3DCrossSectionArrayClass, DNPDF3DCrossSectionArray>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DCuttingPlaneOrientationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{093DEF30-B5A7-58BE-9ECF-855E12D695ED}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation" />
    ///  class.
    ///</summary>
    {class} function init: DNPDF3DCuttingPlaneOrientation; overload;

  end;

  ///<summary>
  ///  Class PDF3DCuttingPlaneOrientation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DCuttingPlaneOrientation')]
  DNPDF3DCuttingPlaneOrientation = interface(DDN.mscorlib.DNObject)
  ['{B5889E9C-DA83-3193-8766-3F6A846B5F76}']
  { methods } 

    ///<summary>
    ///  Returns a <see cref="T:System.String" />
    ///  that represents this instance.
    ///</summary>
    ///<returns>A <see cref="T:System.String" />
    ///  that represents this instance.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNPDF3DCuttingPlaneOrientation = class(TDNGenericImport<DNPDF3DCuttingPlaneOrientationClass, DNPDF3DCuttingPlaneOrientation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DLightingSchemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15B83825-B1AF-5B11-9CD6-BA1A8C97B826}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DLightingScheme" />
    ///  class.
    ///</summary>
    ///  <param name="type">The lighting scheme type.</param>
    {class} function init(&type: DNLightingSchemeType): DNPDF3DLightingScheme; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DLightingScheme" />
    ///  class.
    ///</summary>
    ///  <param name="typeName">Name of the lighting scheme type.</param>
    ///<exception cref="T:System.ArgumentException">Unknown lighting scheme type argument</exception>
    {class} function init(typeName: string): DNPDF3DLightingScheme; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Artwork: DNPDF3DLightingScheme;
   function __fakeFieldGet_None: DNPDF3DLightingScheme;
   function __fakeFieldGet_White: DNPDF3DLightingScheme;
   function __fakeFieldGet_Day: DNPDF3DLightingScheme;
   function __fakeFieldGet_Night: DNPDF3DLightingScheme;
   function __fakeFieldGet_Hard: DNPDF3DLightingScheme;
   function __fakeFieldGet_Primary: DNPDF3DLightingScheme;
   function __fakeFieldGet_Blue: DNPDF3DLightingScheme;
   function __fakeFieldGet_Red: DNPDF3DLightingScheme;
   function __fakeFieldGet_Cube: DNPDF3DLightingScheme;
   function __fakeFieldGet_CAD: DNPDF3DLightingScheme;
   function __fakeFieldGet_Headlamp: DNPDF3DLightingScheme;

  { static fields } 

    ///<summary>
    ///  The "Artwork" lighting scheme.
    ///</summary>
    {class} property Artwork: DNPDF3DLightingScheme read __fakeFieldGet_Artwork;
    ///<summary>
    ///  The "None" lighting scheme.
    ///</summary>
    {class} property None: DNPDF3DLightingScheme read __fakeFieldGet_None;
    ///<summary>
    ///  The "White" lighting scheme.
    ///</summary>
    {class} property White: DNPDF3DLightingScheme read __fakeFieldGet_White;
    ///<summary>
    ///  The "Day" lighting scheme.
    ///</summary>
    {class} property Day: DNPDF3DLightingScheme read __fakeFieldGet_Day;
    ///<summary>
    ///  The "Night" lighting scheme.
    ///</summary>
    {class} property Night: DNPDF3DLightingScheme read __fakeFieldGet_Night;
    ///<summary>
    ///  The "Hard" lighting scheme.
    ///</summary>
    {class} property Hard: DNPDF3DLightingScheme read __fakeFieldGet_Hard;
    ///<summary>
    ///  The "Primary" lighting scheme.
    ///</summary>
    {class} property Primary: DNPDF3DLightingScheme read __fakeFieldGet_Primary;
    ///<summary>
    ///  The "Blue" lighting scheme.
    ///</summary>
    {class} property Blue: DNPDF3DLightingScheme read __fakeFieldGet_Blue;
    ///<summary>
    ///  The "Red" lighting scheme.
    ///</summary>
    {class} property Red: DNPDF3DLightingScheme read __fakeFieldGet_Red;
    ///<summary>
    ///  The "Cube" lighting scheme.
    ///</summary>
    {class} property Cube: DNPDF3DLightingScheme read __fakeFieldGet_Cube;
    ///<summary>
    ///  The "Cad" lighting scheme.
    ///</summary>
    {class} property CAD: DNPDF3DLightingScheme read __fakeFieldGet_CAD;
    ///<summary>
    ///  The "Headlamp" lighting scheme.
    ///</summary>
    {class} property Headlamp: DNPDF3DLightingScheme read __fakeFieldGet_Headlamp;

  end;

  ///<summary>
  ///  Class PDF3DLightingScheme.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DLightingScheme')]
  DNPDF3DLightingScheme = interface(DDN.mscorlib.DNObject)
  ['{0FD43A6D-3623-394F-831D-1775A4C2F893}']
  { getters & setters } 

    function get_Type: DNLightingSchemeType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the lighting scheme type.
    ///</summary>
    ///<value>The lighting scheme type.</value>
    property &Type: DNLightingSchemeType read get_Type;
  end;

  TDNPDF3DLightingScheme = class(TDNGenericImport<DNPDF3DLightingSchemeClass, DNPDF3DLightingScheme>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DRenderModeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{18EBAFA3-6DCB-5488-BC01-17D572D4E62F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DRenderMode" />
    ///  class.
    ///</summary>
    ///  <param name="subtype">The render mode type.</param>
    {class} function init(subtype: DNRenderModeType): DNPDF3DRenderMode; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DRenderMode" />
    ///  class.
    ///</summary>
    ///  <param name="typeName">Name of the type.</param>
    ///<exception cref="T:System.ArgumentException">Unknown a render mode type argument</exception>
    {class} function init(typeName: string): DNPDF3DRenderMode; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Solid: DNPDF3DRenderMode;
   function __fakeFieldGet_SolidWireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_Transparent: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentWareFrame: DNPDF3DRenderMode;
   function __fakeFieldGet_BoundingBox: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentBoundingBox: DNPDF3DRenderMode;
   function __fakeFieldGet_TransparentBoundingBoxOutline: DNPDF3DRenderMode;
   function __fakeFieldGet_Wireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedWireframe: DNPDF3DRenderMode;
   function __fakeFieldGet_Vertices: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedVertices: DNPDF3DRenderMode;
   function __fakeFieldGet_Illustration: DNPDF3DRenderMode;
   function __fakeFieldGet_SolidOutline: DNPDF3DRenderMode;
   function __fakeFieldGet_ShadedIllustration: DNPDF3DRenderMode;

  { static fields } 

    ///<summary>
    ///  The "Solid" render mode.
    ///</summary>
    {class} property Solid: DNPDF3DRenderMode read __fakeFieldGet_Solid;
    ///<summary>
    ///  The "SolidWireFrame" render mode.
    ///</summary>
    {class} property SolidWireframe: DNPDF3DRenderMode read __fakeFieldGet_SolidWireframe;
    ///<summary>
    ///  The "Transparent" render mode.
    ///</summary>
    {class} property Transparent: DNPDF3DRenderMode read __fakeFieldGet_Transparent;
    ///<summary>
    ///  The "TransparentWareFrame" render mode.
    ///</summary>
    {class} property TransparentWareFrame: DNPDF3DRenderMode read __fakeFieldGet_TransparentWareFrame;
    ///<summary>
    ///  The "BoundingBox" render mode.
    ///</summary>
    {class} property BoundingBox: DNPDF3DRenderMode read __fakeFieldGet_BoundingBox;
    ///<summary>
    ///  The "TransparentBoundingBox" render mode.
    ///</summary>
    {class} property TransparentBoundingBox: DNPDF3DRenderMode read __fakeFieldGet_TransparentBoundingBox;
    ///<summary>
    ///  The "TransparentBoundingBoxOutline" render mode.
    ///</summary>
    {class} property TransparentBoundingBoxOutline: DNPDF3DRenderMode read __fakeFieldGet_TransparentBoundingBoxOutline;
    ///<summary>
    ///  The "WireFrame" render mode.
    ///</summary>
    {class} property Wireframe: DNPDF3DRenderMode read __fakeFieldGet_Wireframe;
    ///<summary>
    ///  The "ShadedWireFrame" render mode.
    ///</summary>
    {class} property ShadedWireframe: DNPDF3DRenderMode read __fakeFieldGet_ShadedWireframe;
    ///<summary>
    ///  The "Vertices" render mode.
    ///</summary>
    {class} property Vertices: DNPDF3DRenderMode read __fakeFieldGet_Vertices;
    ///<summary>
    ///  The "ShadedVertices" render mode.
    ///</summary>
    {class} property ShadedVertices: DNPDF3DRenderMode read __fakeFieldGet_ShadedVertices;
    ///<summary>
    ///  The "Illustration" render mode.
    ///</summary>
    {class} property Illustration: DNPDF3DRenderMode read __fakeFieldGet_Illustration;
    ///<summary>
    ///  The "SolidOutline" render mode.
    ///</summary>
    {class} property SolidOutline: DNPDF3DRenderMode read __fakeFieldGet_SolidOutline;
    ///<summary>
    ///  The "ShadedIllustration" render mode.
    ///</summary>
    {class} property ShadedIllustration: DNPDF3DRenderMode read __fakeFieldGet_ShadedIllustration;

  end;

  ///<summary>
  ///  Class PDF3DRenderMode.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DRenderMode')]
  DNPDF3DRenderMode = interface(DDN.mscorlib.DNObject)
  ['{8A82F105-894A-3434-BE3C-54B0CE0831BB}']
  { getters & setters } 

    function get_Type: DNRenderModeType;

  { methods } 

    ///<summary>
    ///  Gets the auxiliary colour.
    ///</summary>
    ///<returns>Color.</returns>
    function GetAuxiliaryColour: DNColor;
    ///<summary>
    ///  Sets the auxiliary colour.
    ///</summary>
    ///  <param name="color">The color.</param>
    ///<returns>PDF3DRenderMode.</returns>
    function SetAuxiliaryColour(color: DNColor): DNPDF3DRenderMode;
    ///<summary>
    ///  Gets the color of the face.
    ///</summary>
    ///<returns>Object.</returns>
    function GetFaceColor: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Sets the color of the face.
    ///</summary>
    ///  <param name="color">The color.</param>
    ///<returns>PDF3DRenderMode.</returns>
    function SetFaceColor(color: DNColor): DNPDF3DRenderMode;
    ///<summary>
    ///  Gets the opacity.
    ///</summary>
    ///<returns>System.Double.</returns>
    function GetOpacity: Double;
    ///<summary>
    ///  Sets the opacity.
    ///</summary>
    ///  <param name="opacity">The opacity.</param>
    ///<returns>PDF3DRenderMode.</returns>
    function SetOpacity(opacity: Double): DNPDF3DRenderMode;
    ///<summary>
    ///  Sets the crease value.
    ///</summary>
    ///  <param name="creaseValue">The crease value.</param>
    ///<returns>PDF3DRenderMode.</returns>
    function SetCreaseValue(creaseValue: Double): DNPDF3DRenderMode;
    ///<summary>
    ///  Gets the crease value.
    ///</summary>
    ///<returns>System.Double.</returns>
    function GetCreaseValue: Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the type.
    ///</summary>
    ///<value>The type.</value>
    property &Type: DNRenderModeType read get_Type;
  end;

  TDNPDF3DRenderMode = class(TDNGenericImport<DNPDF3DRenderModeClass, DNPDF3DRenderMode>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DStreamClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8709DD2-A844-5EA3-A0AA-DC7B37AD40BA}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DStream" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    ///  <param name="pdf3DArtwork">The 3D Artwork.</param>
    {class} function init(doc: DNDocument; pdf3DArtwork: DNPDF3DArtwork): DNPDF3DStream;

  end;

  ///<summary>
  ///  Class PDF3DStream.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DStream')]
  DNPDF3DStream = interface(DDN.mscorlib.DNObject)
  ['{E797D4A2-E915-3B3C-B15D-6484502125DA}']
  { getters & setters } 

    function get_Content: DNPDF3DContent;
    procedure set_Content(value: DNPDF3DContent);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the content.
    ///</summary>
    ///<value>The content.</value>
    property Content: DNPDF3DContent read get_Content write set_Content;
  end;

  TDNPDF3DStream = class(TDNGenericImport<DNPDF3DStreamClass, DNPDF3DStream>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DViewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{86D4D085-54C0-568D-BBDF-F9D16E68689D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DView" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    ///  <param name="cameraPosition">The camera position.</param>
    ///  <param name="cameraOrbit">The camera orbit.</param>
    ///  <param name="viewName">Name of the view.</param>
    {class} function init(doc: DNDocument; cameraPosition: DNMatrix3D; cameraOrbit: Double; viewName: string): DNPDF3DView; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DView" />
    ///  class.
    ///</summary>
    ///  <param name="doc">The document.</param>
    ///  <param name="view">The view.</param>
    ///  <param name="viewName">Name of the view.</param>
    {class} function init(doc: DNDocument; view: DNPDF3DView; viewName: string): DNPDF3DView; overload;

  end;

  ///<summary>
  ///  Class PDF3DView.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DView')]
  DNPDF3DView = interface(DDN.mscorlib.DNObject)
  ['{7FDD92B8-7B3B-31AD-88A5-BBC7EF881FBA}']
  { getters & setters } 

    function get_LightingScheme: DNPDF3DLightingScheme;
    procedure set_LightingScheme(value: DNPDF3DLightingScheme);
    function get_RenderMode: DNPDF3DRenderMode;
    procedure set_RenderMode(value: DNPDF3DRenderMode);
    function get_CrossSectionsArray: DNPDF3DCrossSectionArray;
    function get_ViewName: string;
    procedure set_ViewName(value: string);
    function get_CameraPosition: DNMatrix3D;
    procedure set_CameraPosition(value: DNMatrix3D);
    function get_CameraOrbit: Double;
    procedure set_CameraOrbit(value: Double);
    function get_BackGroundColor: DNColor;
    procedure set_BackGroundColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the lighting scheme of view.
    ///</summary>
    ///<value>The lighting scheme of view.</value>
    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme write set_LightingScheme;
    ///<summary>
    ///  Gets or sets the render mode of view.
    ///</summary>
    ///<value>The render mode of view.</value>
    property RenderMode: DNPDF3DRenderMode read get_RenderMode write set_RenderMode;
    ///<summary>
    ///  Gets the cross sections array of view.
    ///</summary>
    ///<value>The cross sections array of view.</value>
    property CrossSectionsArray: DNPDF3DCrossSectionArray read get_CrossSectionsArray;
    ///<summary>
    ///  Gets or sets the name of the view.
    ///</summary>
    ///<value>The name of the view.</value>
    property ViewName: string read get_ViewName write set_ViewName;
    ///<summary>
    ///  Gets or sets the camera position of view.
    ///</summary>
    ///<value>The camera position of view.</value>
    property CameraPosition: DNMatrix3D read get_CameraPosition write set_CameraPosition;
    ///<summary>
    ///  Gets or sets the camera orbit of view.
    ///</summary>
    ///<value>The camera orbit of view.</value>
    property CameraOrbit: Double read get_CameraOrbit write set_CameraOrbit;
    ///<summary>
    ///  Gets or sets the color of the back ground of view.
    ///</summary>
    ///<value>The color of the back ground of view.</value>
    property BackGroundColor: DNColor read get_BackGroundColor write set_BackGroundColor;
  end;

  TDNPDF3DView = class(TDNGenericImport<DNPDF3DViewClass, DNPDF3DView>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DViewArrayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75D11A71-BC31-5364-BFDD-CCB1BAD1FA76}']
  end;

  ///<summary>
  ///  Class PDF3DViewArray.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DViewArray')]
  DNPDF3DViewArray = interface(DDN.mscorlib.DNObject)
  ['{D52F5236-27DB-3DC0-A30B-7785E17E4E1C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPDF3DView;
    procedure set_Item(index: Int32; value: DNPDF3DView);

  { methods } 

    ///<summary>
    ///  Adds the specified view.
    ///</summary>
    ///  <param name="view">The view.</param>
    ///<exception cref="T:System.ArgumentException">Only one entry of 3D view is allowed</exception>
    procedure Add(view: DNPDF3DView);
    ///<summary>
    ///  Removes view from views array at specified index.
    ///</summary>
    ///  <param name="index">The view index.</param>
    ///<exception cref="T:System.IndexOutOfRangeException">Invalid index: index should be in the range [1..n] where n equals to the views count.</exception>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Removes all views.
    ///</summary>
    procedure RemoveAll;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the views count.
    ///</summary>
    ///<value>The views count.</value>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPDF3DView read get_Item write set_Item; default;
  end;

  TDNPDF3DViewArray = class(TDNGenericImport<DNPDF3DViewArrayClass, DNPDF3DViewArray>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPdfActionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE4C22E1-6328-5A40-A88F-DC213BFFE479}']
  end;

  ///<summary>
  ///  Represents Action in PDF document
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PdfAction')]
  DNPdfAction = interface(DDN.mscorlib.DNObject)
  ['{24A6DFE0-B5CD-321B-A4AE-B8E2B4DE90F2}']
  { getters & setters } 

    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNPdfAction = class(TDNGenericImport<DNPdfActionClass, DNPdfAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToActionClass = interface(DNPdfActionClass)
  ['{DBFD9C56-9799-569B-A312-1F50C463628D}']
  { constructors } 

    ///<summary>
    ///  Constructor for GoToAction class.
    ///</summary>
    ///  <param name="page">The destination page number to jump to.</param>
    {class} function init(page: Int32): DNGoToAction; overload;
    ///<summary>
    ///  Constructor for GoToAction class.
    ///</summary>
    ///  <param name="page">Aspose.Pdf.Page destination object to jump to.</param>
    {class} function init(page: DNPage): DNGoToAction; overload;
    ///<summary>
    ///  Constructor for GoToAction class.
    ///</summary>
    ///  <param name="page">Destination page.</param>
    ///  <param name="type">Destination type.</param>
    ///  <param name="values">Action parameters.</param>
    {class} function init(page: DNPage; &type: DNExplicitDestinationType; values: TArray<Double>): DNGoToAction; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="destination">Explicit destination.</param>
    {class} function init(destination: DNExplicitDestination): DNGoToAction; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    {class} function init: DNGoToAction; overload;
    ///<summary>
    ///  Action which linked with Named Destination.
    ///</summary>
    ///  <param name="doc">Document where action will be created.</param>
    ///  <param name="name">Name of the destination.</param>
    {class} function init(doc: DNDocument; name: string): DNGoToAction; overload;

  end;

  ///<summary>
  ///  Represents a go-to action that changes the view to a specified destination (page, location, and magnification factor).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.GoToAction')]
  DNGoToAction = interface(DNPdfAction)
  ['{2A3F8BF8-4CE5-391B-8EA4-980EA1FA7ABC}']
  { getters & setters } 

    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the destination to jump to.
    ///</summary>
    property Destination: DNIAppointment read get_Destination write set_Destination;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToAction = class(TDNGenericImport<DNGoToActionClass, DNGoToAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToRemoteActionClass = interface(DNGoToActionClass)
  ['{4A6B727A-4DE8-5739-918C-7A9C2F8FBBAE}']
  { constructors } 

    ///<summary>
    ///  Initializes GoToRemoteAction object.
    ///</summary>
    ///  <param name="remotePdf">Destination PDF document.</param>
    ///  <param name="remotePageNumber">Destination page number.</param>
    {class} function init(remotePdf: string; remotePageNumber: Int32): DNGoToRemoteAction; overload;
    ///<summary>
    ///  Initializes GoToRemoteAction object.
    ///</summary>
    ///  <param name="remotePdf">Destination PDF document. </param>
    ///  <param name="destination">Destination in the  PDF document.</param>
    {class} function init(remotePdf: string; destination: DNExplicitDestination): DNGoToRemoteAction; overload;

  end;

  ///<summary>
  ///  Represents a remote go-to action that is similar to an ordinary go-to action but jumps to a destination in another PDF file instead of the current file.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.GoToRemoteAction')]
  DNGoToRemoteAction = interface(DNGoToAction)
  ['{2EF2BDEC-948D-3270-BB07-AC720A7830A7}']
  { getters & setters } 

    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_NewWindow: DNExtendedBoolean;
    procedure set_NewWindow(value: DNExtendedBoolean);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the specification of the file in which the destination is located.
    ///</summary>
    property &File: DNFileSpecification read get_File write set_File;
    ///<summary>
    ///  Gets or sets a flag specifying whether to open the destination document in a new window.
    ///</summary>
    property NewWindow: DNExtendedBoolean read get_NewWindow write set_NewWindow;
    ///<summary>
    ///  Gets or sets the destination to jump to.
    ///</summary>
    property Destination: DNIAppointment read get_Destination write set_Destination;
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToRemoteAction = class(TDNGenericImport<DNGoToRemoteActionClass, DNGoToRemoteAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNGoToURIActionClass = interface(DNPdfActionClass)
  ['{84EA7F9A-EB2E-565C-9031-5891DF7D362E}']
  { constructors } 

    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="uri">The uniform resource identifier to resolve.</param>
    {class} function init(uri: string): DNGoToURIAction;

  end;

  ///<summary>
  ///  Represents a URI action causes a URI to be resolved.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.GoToURIAction')]
  DNGoToURIAction = interface(DNPdfAction)
  ['{651A3E3D-5F5C-3F2B-B7CD-67C2DB517D13}']
  { getters & setters } 

    function get_URI: string;
    procedure set_URI(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the uniform resource identifier to resolve.
    ///</summary>
    property URI: string read get_URI write set_URI;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNGoToURIAction = class(TDNGenericImport<DNGoToURIActionClass, DNGoToURIAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNHideActionClass = interface(DNPdfActionClass)
  ['{84131BAA-2EF3-5413-B0CE-D265C4E10E8A}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified annotation.
    ///</summary>
    ///  <param name="annotation">An annotation to be hidden.</param>
    {class} function init(annotation: DNAnnotation): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified annotation and invisibility flag.
    ///</summary>
    ///  <param name="annotation">An annotation to be hidden or shown.</param>
    ///  <param name="isHidden">A flag indicating whether to hide the annotation (true) or show it (false).</param>
    {class} function init(annotation: DNAnnotation; isHidden: Boolean): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified field name.
    ///</summary>
    ///  <param name="fieldName">A text string giving the fully qualified field name of an interactive form field.</param>
    {class} function init(fieldName: string): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified field name and invisibility flag.
    ///</summary>
    ///  <param name="fieldName">A text string giving the fully qualified field name of an interactive form field.</param>
    ///  <param name="isHidden">A flag indicating whether to hide the field (true) or show it (false).</param>
    {class} function init(fieldName: string; isHidden: Boolean): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified annotations.
    ///</summary>
    ///  <param name="annotations">An array of annotations to be hidden.</param>
    {class} function init(annotations: TArray<DNAnnotation>): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified annotations and for invisibility flag.
    ///</summary>
    ///  <param name="annotations">An array of annotations to be hidden or shown.</param>
    ///  <param name="isHidden">A flag indicating whether to hide the annotations (true) or show it (false).</param>
    {class} function init(annotations: TArray<DNAnnotation>; isHidden: Boolean): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified field names.
    ///</summary>
    ///  <param name="names">An array of strings giving the fully qualified field names of an interactive form fields.</param>
    {class} function init(names: TArray<string>): DNHideAction; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.HideAction" />
    ///  class for the specified field names and for invisibility flag.
    ///</summary>
    ///  <param name="names">An array of strings giving the fully qualified field names of an interactive form fields.</param>
    ///  <param name="isHidden">A flag indicating whether to hide the fields (true) or show it (false).</param>
    {class} function init(names: TArray<string>; isHidden: Boolean): DNHideAction; overload;

  end;

  ///<summary>
  ///  Represents a hide action that hides or shows one or more annotations on the screen by setting or clearing their Hidden flags.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.HideAction')]
  DNHideAction = interface(DNPdfAction)
  ['{283BC020-9F74-35D6-A5E7-F29FF0393E1E}']
  { getters & setters } 

    function get_IsHidden: Boolean;
    procedure set_IsHidden(value: Boolean);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets status of the annotation(s) to hide/display.
    ///</summary>
    property IsHidden: Boolean read get_IsHidden write set_IsHidden;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNHideAction = class(TDNGenericImport<DNHideActionClass, DNHideAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNImportDataActionClass = interface(DNPdfActionClass)
  ['{18D4CAAD-FABA-5CBF-B4C1-3F052D0008C9}']
  end;

  ///<summary>
  ///  Upon invocation of an import-data action, Forms Data Format (FDF) data shall be imported into the document’s interactive form from a specified file.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ImportDataAction')]
  DNImportDataAction = interface(DNPdfAction)
  ['{6DAB2A45-7896-33CF-AF46-D6D5E4E666C9}']
  { getters & setters } 

    function get_Data: DNFileSpecification;
    procedure set_Data(value: DNFileSpecification);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The FDF file from which to import the data.
    ///</summary>
    property Data: DNFileSpecification read get_Data write set_Data;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNImportDataAction = class(TDNGenericImport<DNImportDataActionClass, DNImportDataAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNJavascriptActionClass = interface(DNPdfActionClass)
  ['{E9E19221-E866-5D7C-AF41-59EAF0040EC9}']
  { constructors } 

    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="javaScript">JavaScript code.</param>
    {class} function init(javaScript: string): DNJavascriptAction;

  end;

  ///<summary>
  ///  Class representing javascript action.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.JavascriptAction')]
  DNJavascriptAction = interface(DNPdfAction)
  ['{17245C15-90CD-359F-A4F4-1B4646AEBCD9}']
  { getters & setters } 

    function get_Script: string;
    procedure set_Script(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets javascript code.
    ///</summary>
    property Script: string read get_Script write set_Script;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNJavascriptAction = class(TDNGenericImport<DNJavascriptActionClass, DNJavascriptAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLaunchActionClass = interface(DNPdfActionClass)
  ['{A096DA75-6126-5BD9-919B-941596BBC933}']
  { constructors } 

    ///<summary>
    ///  Creates a launch action.
    ///</summary>
    ///  <param name="file">The file to be launched.</param>
    {class} function init(&file: string): DNLaunchAction; overload;
    ///<summary>
    ///  Creates a launch action.
    ///</summary>
    ///  <param name="document">Document where action will be created.</param>
    ///  <param name="file">The file to be launched.</param>
    {class} function init(document: DNDocument; &file: string): DNLaunchAction; overload;

  end;

  ///<summary>
  ///  Represents a launch action that launches an application or opens or prints a document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LaunchAction')]
  DNLaunchAction = interface(DNPdfAction)
  ['{001FA1E9-2724-3E78-B0F2-8F628935BE90}']
  { getters & setters } 

    function get_File: string;
    procedure set_File(value: string);
    function get_NewWindow: DNExtendedBoolean;
    procedure set_NewWindow(value: DNExtendedBoolean);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the application to be launched or the document to be opened or printed.
    ///</summary>
    property &File: string read get_File write set_File;
    ///<summary>
    ///  Gets or sets a flag specifying whether to open the destination document in a new window (affect PDF documents only).
    ///</summary>
    property NewWindow: DNExtendedBoolean read get_NewWindow write set_NewWindow;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNLaunchAction = class(TDNGenericImport<DNLaunchActionClass, DNLaunchAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNNamedActionClass = interface(DNPdfActionClass)
  ['{F88E7E32-E482-5710-8C47-44720FAB3C4D}']
  { constructors } 

    ///<summary>
    ///  Constructor for Named Action class.
    ///</summary>
    ///  <param name="action">Action for which this object is created.</param>
    {class} function init(action: DNPredefinedAction): DNNamedAction;

  end;

  ///<summary>
  ///  Represents named actions that PDF viewer applications are expected to support.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.NamedAction')]
  DNNamedAction = interface(DNPdfAction)
  ['{30463AC3-8370-3B26-BCC5-623A7D9F3EAD}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the action to be performed.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNNamedAction = class(TDNGenericImport<DNNamedActionClass, DNNamedAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRenditionActionClass = interface(DNPdfActionClass)
  ['{DB187375-0AE1-5766-9ED9-6630955B5A12}']
  end;

  ///<summary>
  ///  A rendition action that controls the playing of multimedia content.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RenditionAction')]
  DNRenditionAction = interface(DNPdfAction)
  ['{2F8918F8-F054-305B-B70C-99584021655E}']
  { getters & setters } 

    function get_Rendition: DNRendition;
    function get_RenditionOperation: DNRenditionOperation;
    procedure set_RenditionOperation(value: DNRenditionOperation);
    function get_JavaScript: string;
    procedure set_JavaScript(value: string);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets rendition associated with the action.
    ///</summary>
    property Rendition: DNRendition read get_Rendition;
    ///<summary>
    ///  The operation to perform when the action is triggered.
    ///</summary>
    property RenditionOperation: DNRenditionOperation read get_RenditionOperation write set_RenditionOperation;
    ///<summary>
    ///  Gets or sets JavaScript code associated with the action.
    ///</summary>
    property JavaScript: string read get_JavaScript write set_JavaScript;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNRenditionAction = class(TDNGenericImport<DNRenditionActionClass, DNRenditionAction>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSubmitFormActionClass = interface(DNPdfActionClass)
  ['{C190046D-CD40-50FD-9586-7CBC2D54A807}']
  { constructors } 

    ///<summary>
    ///  Initializes SubmitFormAction object.
    ///</summary>
    {class} function init: DNSubmitFormAction;

  { static fields getter & setter } 

   function __fakeFieldGet_Exclude: Int32;
   function __fakeFieldGet_IncludeNoValueFields: Int32;
   function __fakeFieldGet_ExportFormat: Int32;
   function __fakeFieldGet_GetMethod: Int32;
   function __fakeFieldGet_SubmitCoordinates: Int32;
   function __fakeFieldGet_Xfdf: Int32;
   function __fakeFieldGet_IncludeAppendSaves: Int32;
   function __fakeFieldGet_IncludeAnnotations: Int32;
   function __fakeFieldGet_SubmitPdf: Int32;
   function __fakeFieldGet_CanonicalFormat: Int32;
   function __fakeFieldGet_ExclNonUserAnnots: Int32;
   function __fakeFieldGet_ExclFKey: Int32;
   function __fakeFieldGet_EmbedForm: Int32;

  { static fields } 

    ///<summary>
    ///  If clear, the Fields array specifies which fields to include in the submission.
    ///</summary>
    {class} property Exclude: Int32 read __fakeFieldGet_Exclude;
    ///<summary>
    ///  If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.
    ///</summary>
    {class} property IncludeNoValueFields: Int32 read __fakeFieldGet_IncludeNoValueFields;
    ///<summary>
    ///  If set, field names and values shall be submitted in HTML Form format.
    ///</summary>
    {class} property ExportFormat: Int32 read __fakeFieldGet_ExportFormat;
    ///<summary>
    ///  If set, field names and values shall be submitted using an HTTP GET request.
    ///</summary>
    {class} property GetMethod: Int32 read __fakeFieldGet_GetMethod;
    ///<summary>
    ///  If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.
    ///</summary>
    {class} property SubmitCoordinates: Int32 read __fakeFieldGet_SubmitCoordinates;
    ///<summary>
    ///  If set, field names and values shall be submitted as XFDF.
    ///</summary>
    {class} property Xfdf: Int32 read __fakeFieldGet_Xfdf;
    ///<summary>
    ///  If set, the submitted FDF file shall include the contents of all incremental updates.
    ///</summary>
    {class} property IncludeAppendSaves: Int32 read __fakeFieldGet_IncludeAppendSaves;
    ///<summary>
    ///  If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.
    ///</summary>
    {class} property IncludeAnnotations: Int32 read __fakeFieldGet_IncludeAnnotations;
    ///<summary>
    ///  If set, the document shall be submitted as PDF, using the MIME content type application/pdf.
    ///</summary>
    {class} property SubmitPdf: Int32 read __fakeFieldGet_SubmitPdf;
    ///<summary>
    ///  If set, any submitted field values representing dates shall be converted to the standard format.
    ///</summary>
    {class} property CanonicalFormat: Int32 read __fakeFieldGet_CanonicalFormat;
    ///<summary>
    ///  If set, it shall include only those markup annotations whose T entry matches the name of the current user.
    ///</summary>
    {class} property ExclNonUserAnnots: Int32 read __fakeFieldGet_ExclNonUserAnnots;
    ///<summary>
    ///  If set, the submitted FDF shall exclude the F entry.
    ///</summary>
    {class} property ExclFKey: Int32 read __fakeFieldGet_ExclFKey;
    ///<summary>
    ///  If set, the F entry of the submitted FDF shall be a file specification containing an
    ///  embedded file stream representing the PDF file from which the FDF is being submitted.
    ///</summary>
    {class} property EmbedForm: Int32 read __fakeFieldGet_EmbedForm;

  end;

  ///<summary>
  ///  Class which describes submit-form action.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SubmitFormAction')]
  DNSubmitFormAction = interface(DNPdfAction)
  ['{390CDB9F-F1D5-3B60-A9A1-BEEFDB914A14}']
  { getters & setters } 

    function get_Flags: Int32;
    procedure set_Flags(value: Int32);
    function get_Url: DNFileSpecification;
    procedure set_Url(value: DNFileSpecification);
    function get_Next: DNActionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets flagas of submit action
    ///</summary>
    property Flags: Int32 read get_Flags write set_Flags;
    ///<summary>
    ///  Destination URL.
    ///</summary>
    property Url: DNFileSpecification read get_Url write set_Url;
    ///<summary>
    ///  Next actions in sequence.
    ///</summary>
    property Next: DNActionCollection read get_Next;
  end;

  TDNSubmitFormAction = class(TDNGenericImport<DNSubmitFormActionClass, DNSubmitFormAction>)
  public const
    ///<summary>
    ///  If clear, the Fields array specifies which fields to include in the submission.
    ///</summary>
   Exclude = 1;
    ///<summary>
    ///  If set, all fields designated by the Fields array and the Include/Exclude flag shall be submitted.
    ///</summary>
   IncludeNoValueFields = 2;
    ///<summary>
    ///  If set, field names and values shall be submitted in HTML Form format.
    ///</summary>
   ExportFormat = 4;
    ///<summary>
    ///  If set, field names and values shall be submitted using an HTTP GET request.
    ///</summary>
   GetMethod = 8;
    ///<summary>
    ///  If set, the coordinates of the mouse click that caused the submit-form action shall be transmitted as part of the form data.
    ///</summary>
   SubmitCoordinates = 16;
    ///<summary>
    ///  If set, field names and values shall be submitted as XFDF.
    ///</summary>
   Xfdf = 32;
    ///<summary>
    ///  If set, the submitted FDF file shall include the contents of all incremental updates.
    ///</summary>
   IncludeAppendSaves = 64;
    ///<summary>
    ///  If set, the submitted FDF file shall include includes all markup annotations in the underlying PDF document.
    ///</summary>
   IncludeAnnotations = 128;
    ///<summary>
    ///  If set, the document shall be submitted as PDF, using the MIME content type application/pdf.
    ///</summary>
   SubmitPdf = 256;
    ///<summary>
    ///  If set, any submitted field values representing dates shall be converted to the standard format.
    ///</summary>
   CanonicalFormat = 512;
    ///<summary>
    ///  If set, it shall include only those markup annotations whose T entry matches the name of the current user.
    ///</summary>
   ExclNonUserAnnots = 1024;
    ///<summary>
    ///  If set, the submitted FDF shall exclude the F entry.
    ///</summary>
   ExclFKey = 2048;
    ///<summary>
    ///  If set, the F entry of the submitted FDF shall be a file specification containing an
    ///  embedded file stream representing the PDF file from which the FDF is being submitted.
    ///</summary>
   EmbedForm = 8192;
  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPdfActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{860FE26C-CA0D-570D-B8D2-EDB5FAA6CCF9}']
  end;

  ///<summary>
  ///  Class describes list of actions.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PdfActionCollection')]
  DNPdfActionCollection = interface(DDN.mscorlib.DNObject)
  ['{C9730893-2417-3C6F-8BCF-55802DB1C919}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNPdfAction;

  { methods } 

    ///<summary>
    ///  Remove action by index.
    ///</summary>
    ///  <param name="index">Index of action to remove.</param>
    procedure Delete(index: Int32);
    ///<summary>
    ///  Add action to action list.
    ///</summary>
    ///  <param name="action">Action to be added.</param>
    procedure Add(action: DNPdfAction);
    ///<summary>
    ///  Gets enumerator.
    ///</summary>
    ///<returns>PDfAction enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPdfAction>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets count of actions.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNPdfAction read get_Item; default;
  end;

  TDNPdfActionCollection = class(TDNGenericImport<DNPdfActionCollectionClass, DNPdfActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRenditionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{91FCE545-313B-57BF-876D-890C867F6371}']
  end;

  ///<summary>
  ///  Class which describes rendition object of RendtionAnnotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Rendition')]
  DNRendition = interface(DDN.mscorlib.DNObject)
  ['{4DE578CA-4646-31F3-B44B-CEA6B74C7727}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Text string specifying the name of the rendition for use in a user interface and for name tree lookup by JavaScript actions.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets rendition type.
    ///</summary>
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNRendition = class(TDNGenericImport<DNRenditionClass, DNRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMediaRenditionClass = interface(DNRenditionClass)
  ['{D14BC4CE-F3E7-50D2-A60D-E33C21386ABD}']
  end;

  ///<summary>
  ///  Class describes media rendition.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.MediaRendition')]
  DNMediaRendition = interface(DNRendition)
  ['{F46ED2AF-CE21-39A8-8987-87F776FD8292}']
  { getters & setters } 

    function get_MediaClip: DNMediaClip;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets media clip obkects associated with rendition.
    ///</summary>
    property MediaClip: DNMediaClip read get_MediaClip;
    ///<summary>
    ///  Text string specifying the name of the rendition for use in a user interface and for name tree lookup by JavaScript actions.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets rendition type.
    ///</summary>
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNMediaRendition = class(TDNGenericImport<DNMediaRenditionClass, DNMediaRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSelectorRenditionClass = interface(DNRenditionClass)
  ['{A337C45C-C63F-5C8D-8CF5-56A90B742DC6}']
  end;

  ///<summary>
  ///  Class describes selector rendition.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SelectorRendition')]
  DNSelectorRendition = interface(DNRendition)
  ['{62F911C8-41B2-3008-8305-A0C334964430}']
  { getters & setters } 

    function get_Renditions: TArray<DNRendition>;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RenditionType: DNRenditionType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets array of renditions.
    ///</summary>
    property Renditions: TArray<DNRendition> read get_Renditions;
    ///<summary>
    ///  Text string specifying the name of the rendition for use in a user interface and for name tree lookup by JavaScript actions.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets rendition type.
    ///</summary>
    property RenditionType: DNRenditionType read get_RenditionType;
  end;

  TDNSelectorRendition = class(TDNGenericImport<DNSelectorRenditionClass, DNSelectorRendition>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{019E17E0-A060-5392-9528-565256A2A716}']
  end;

  ///<summary>
  ///  Represents a sound data defining the sound to be played when the annotation is activated.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundData')]
  DNSoundData = interface(DDN.mscorlib.DNObject)
  ['{4AB2F4A1-0A7B-3732-B5FB-9B8A718CA535}']
  { getters & setters } 

    function get_Rate: Int32;
    procedure set_Rate(value: Int32);
    function get_Channels: Int32;
    procedure set_Channels(value: Int32);
    function get_Bits: Int32;
    procedure set_Bits(value: Int32);
    function get_Contents: DDN.mscorlib.DNStream;
    function get_Encoding: DNSoundEncoding;
    procedure set_Encoding(value: DNSoundEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the sampling rate, in samples per second.
    ///</summary>
    property Rate: Int32 read get_Rate write set_Rate;
    ///<summary>
    ///  Gets or sets the number of sound channels.
    ///</summary>
    property Channels: Int32 read get_Channels write set_Channels;
    ///<summary>
    ///  Gets or sets the number of bits per sample value per channel.
    ///</summary>
    property Bits: Int32 read get_Bits write set_Bits;
    ///<summary>
    ///  Gets stream of the sound to be played when the annotation is activated.
    ///</summary>
    property Contents: DDN.mscorlib.DNStream read get_Contents;
    ///<summary>
    ///  Gets or sets the encoding format for the sample data.
    ///</summary>
    property Encoding: DNSoundEncoding read get_Encoding write set_Encoding;
  end;

  TDNSoundData = class(TDNGenericImport<DNSoundDataClass, DNSoundData>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundSampleDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{39DAF750-A4B0-515C-A746-41A5EE674087}']
  { constructors } 

    ///<summary>
    ///  Initializes new sound sample data.
    ///</summary>
    ///  <param name="samplingRate">The sampling rate.</param>
    {class} function init(samplingRate: Int64): DNSoundSampleData; overload;
    ///<summary>
    ///  Initializes new sound sample data.
    ///</summary>
    ///  <param name="samplingRate">The sampling rate.</param>
    ///  <param name="numberOfSoundChannels">The number of sound channels.</param>
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32): DNSoundSampleData; overload;
    ///<summary>
    ///  Initializes new sound sample data.
    ///</summary>
    ///  <param name="samplingRate">The sampling rate.</param>
    ///  <param name="numberOfSoundChannels">The number of sound channels.</param>
    ///  <param name="bitsPerChannel">The number of bits per sample value per channel.</param>
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32; bitsPerChannel: Int32): DNSoundSampleData; overload;
    ///<summary>
    ///  Initializes new sound sample data.
    ///</summary>
    ///  <param name="samplingRate">The sampling rate.</param>
    ///  <param name="numberOfSoundChannels">The number of sound channels.</param>
    ///  <param name="bitsPerChannel">The number of bits per sample value per channel.</param>
    ///  <param name="soundSampleDataEncodingFormat">The encoding format for the sample data.</param>
    {class} function init(samplingRate: Int64; numberOfSoundChannels: Int32; bitsPerChannel: Int32; soundSampleDataEncodingFormat: DNSoundSampleDataEncodingFormat): DNSoundSampleData; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultSamplingRate: Int64;
   function __fakeFieldGet_DefaultOfSoundChannels: Int32;
   function __fakeFieldGet_DefaultOfBitsPerChannel: Int32;
   function __fakeFieldGet_DefaultEncodingFormat: DNSoundSampleDataEncodingFormat;

  { static fields } 

    ///<summary>
    ///  Default value for SamplingRate.
    ///</summary>
    {class} property DefaultSamplingRate: Int64 read __fakeFieldGet_DefaultSamplingRate;
    ///<summary>
    ///  Default value for Channels parameter.
    ///</summary>
    {class} property DefaultOfSoundChannels: Int32 read __fakeFieldGet_DefaultOfSoundChannels;
    ///<summary>
    ///  Default value for BitsPerchannel parameter.
    ///</summary>
    {class} property DefaultOfBitsPerChannel: Int32 read __fakeFieldGet_DefaultOfBitsPerChannel;
    ///<summary>
    ///  Default value for encoding format.
    ///</summary>
    {class} property DefaultEncodingFormat: DNSoundSampleDataEncodingFormat read __fakeFieldGet_DefaultEncodingFormat;

  end;

  ///<summary>
  ///  Represents additional entries specific to a sound object (Section 9.2 PDF1-7)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundSampleData')]
  DNSoundSampleData = interface(DDN.mscorlib.DNObject)
  ['{B6825B40-EDE2-3B77-B65B-A288C0F93CC1}']
  { getters & setters } 

    function get_SamplingRate: Int64;
    procedure set_SamplingRate(value: Int64);
    function get_NumberOfSoundChannels: Int32;
    procedure set_NumberOfSoundChannels(value: Int32);
    function get_BitsPerChannel: Int32;
    procedure set_BitsPerChannel(value: Int32);
    function get_EncodingFormat: DNSoundSampleDataEncodingFormat;
    procedure set_EncodingFormat(value: DNSoundSampleDataEncodingFormat);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the sampling rate.
    ///</summary>
    property SamplingRate: Int64 read get_SamplingRate write set_SamplingRate;
    ///<summary>
    ///  Gets or sets the number of sound channels.
    ///</summary>
    property NumberOfSoundChannels: Int32 read get_NumberOfSoundChannels write set_NumberOfSoundChannels;
    ///<summary>
    ///  Gets or sets the number of bits per sample value per channel.
    ///</summary>
    property BitsPerChannel: Int32 read get_BitsPerChannel write set_BitsPerChannel;
    ///<summary>
    ///  Gets or sets the encoding format.
    ///</summary>
    property EncodingFormat: DNSoundSampleDataEncodingFormat read get_EncodingFormat write set_EncodingFormat;
  end;

  TDNSoundSampleData = class(TDNGenericImport<DNSoundSampleDataClass, DNSoundSampleData>)
  public const
    ///<summary>
    ///  Default value for SamplingRate.
    ///</summary>
   DefaultSamplingRate = 11025;
    ///<summary>
    ///  Default value for Channels parameter.
    ///</summary>
   DefaultOfSoundChannels = 1;
    ///<summary>
    ///  Default value for BitsPerchannel parameter.
    ///</summary>
   DefaultOfBitsPerChannel = 8;
    ///<summary>
    ///  Default value for encoding format.
    ///</summary>
   DefaultEncodingFormat = DNSoundSampleDataEncodingFormat.Raw;
  end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81CEAA2E-696E-58B6-AF1E-E69EB69799C1}']
  end;

  ///<summary>
  ///  Class represents style of text in annotation
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.TextStyle')]
  DNTextStyle = interface(DDN.mscorlib.DNObject)
  ['{0C6667C1-36DC-3D31-8F03-75CB83CABF2A}']
  { getters & setters } 

    function get_FontName: string;
    procedure set_FontName(value: string);
    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);

  { methods } 

    ///<summary>
    ///  String representation of TextStyle.
    ///</summary>
    ///<returns>String representation.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Name of the font.
    ///</summary>
    property FontName: string read get_FontName write set_FontName;
    ///<summary>
    ///  Fonst size.
    ///</summary>
    property FontSize: Double read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets horizontal alignment of the text.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Text alignment. Valid values are: Left, Center, Rigth.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Color of the text.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
  end;

  TDNTextStyle = class(TDNGenericImport<DNTextStyleClass, DNTextStyle>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNXfdfReaderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A6D5B0B1-D6B9-52E1-8C53-060A62381712}']
  { constructors } 

    {class} function init: DNXfdfReader;

  { static methods } 

    ///<summary>
    ///  Import annotations from XFDF file and put them into document.
    ///</summary>
    ///  <param name="stream">Source stream containing XFDF file.</param>
    ///  <param name="document">Document where annotations will be added.</param>
    {class} procedure ReadAnnotations(stream: DDN.mscorlib.DNStream; document: DNDocument);
    ///<summary>
    ///  Import field values from XFDF file.
    ///</summary>
    ///  <param name="stream">Stream containing XFDF data.</param>
    ///  <param name="document">Document where fields data will be imported.</param>
    {class} procedure ReadFields(stream: DDN.mscorlib.DNStream; document: DNDocument);

  end;

  ///<summary>
  ///  Class which peroformes reading of XFDF format.
  ///</summary>
  ///<example><code lang="C#">
  ///  Document doc = new Document("example.pdf");
  ///  Stream xfdfStream = File.OpenRead("file.xfdf");
  ///  XfdfReader.ReadAnnotations(xfdfStream, doc);
  ///  xfdfStream.Close();
  ///  doc.Save("example_out.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Annotations.XfdfReader')]
  DNXfdfReader = interface(DDN.mscorlib.DNObject)
  ['{44BB6BE8-639D-3DAE-99EF-DC7EB36065E2}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXfdfReader = class(TDNGenericImport<DNXfdfReaderClass, DNXfdfReader>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNArtifactClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4F9E15D0-CE54-5AB0-821B-CF2BFAE8D924}']
  { constructors } 

    ///<summary>
    ///  Constructor of artifact with specified type and subtype
    ///</summary>
    ///  <param name="type">Name of artifact type.</param>
    ///  <param name="subType">NAme of artifact subtype.</param>
    {class} function init(&type: string; subType: string): DNArtifact; overload;
    ///<summary>
    ///  Constructor of artifact with specified type and subtype
    ///</summary>
    ///  <param name="type">Artifact type.</param>
    ///  <param name="subType">Artifact subtype.</param>
    {class} function init(&type: DNArtifact_ArtifactType; subType: DNArtifact_ArtifactSubtype): DNArtifact; overload;

  end;

  ///<summary>
  ///  Class represetns PDF Artifact object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Artifact')]
  DNArtifact = interface(DDN.mscorlib.DNObject)
  ['{4E11936A-0D19-3943-A941-B25908C28FD8}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Form: DNXForm;
    function get_Rectangle: DNRectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets text of the artifact.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains artifact text.</param>
    procedure SetText(formattedText: DNFormattedText);
    ///<summary>
    ///  Set text and text properties of the artifact.
    ///</summary>
    ///  <param name="Text">Text string.</param>
    ///  <param name="textState">Text properties (color, </param>
    procedure SetTextAndState(text: string; textState: DNTextState);
    ///<summary>
    ///  Set text and text properties of the artifact. Allows to specify multiple lines.
    ///</summary>
    ///  <param name="text">Array of text string.</param>
    ///  <param name="textState">Text properties.</param>
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageStream">Stream which contains image data.</param>
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageName">Name of image file.</param>
    procedure SetImage(imageName: string); overload;
    ///<summary>
    ///  Sets PDF page which is placed on the document page as artifact.
    ///</summary>
    ///  <param name="page">Page which is placed as Artifcact. </param>
    procedure SetPdfPage(page: DNPage);
    ///<summary>
    ///  Dispose the artifact.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of value.</param>
    ///<returns>Value, or null if value does not exists.</returns>
    function GetValue(name: string): string;
    ///<summary>
    ///  Sets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of custom value.</param>
    ///  <param name="value">Custom value in the artifact.</param>
    procedure SetValue(name: string; value: string);
    ///<summary>
    ///  Remove custom value from the artifact.
    ///</summary>
    ///  <param name="name">Name of custom value to be removed.</param>
    procedure RemoveValue(name: string);
    ///<summary>
    ///  Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance.
    ///  Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
    ///  everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
    ///  This allows to change page contents only once.
    ///</summary>
    ///<example><code lang="C#">
    ///  Artifact art = doc.Pages[1].Artifacts[1];
    ///  art.BeginUpdates();
    ///  art.Opacity = 0.3f;
    ///  art.Position = new Point(10,10);
    ///  art.Rotation = 30;
    ///  art.SaveUpdates();
    ///</code></example>
    procedure BeginUpdates;
    ///<summary>
    ///  Saves all updates in artifact which were made after BeginUpdates() call.
    ///</summary>
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets name of artifact type. May be used if artifact type is non standard.
    ///</summary>
    property CustomType: string read get_CustomType write set_CustomType;
    ///<summary>
    ///  Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
    ///</summary>
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    ///<summary>
    ///  Gets artifact type.
    ///</summary>
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    ///<summary>
    ///  Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
    ///</summary>
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Gets XForm of the artifact (if XForm is used).
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets rectangle of the artifact.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets artifact position.
    ///  If this property is specified, then margins and alignments are ignored.
    ///</summary>
    property Position: DNPoint read get_Position write set_Position;
    ///<summary>
    ///  Right margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Left margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Top margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Bottom margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Horizontal alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    ///<summary>
    ///  Vertical alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    ///<summary>
    ///  Gets or sets artifact rotation angle.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets text of the artifact.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets image of the artifact (if presents).
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets or sets opacity of the artifact. Possible values are in range 0..1.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Text state for artifact text.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  If true Artifact is placed behind page contents.
    ///</summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNArtifact = class(TDNGenericImport<DNArtifactClass, DNArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBackgroundArtifactClass = interface(DNArtifactClass)
  ['{FBCA7DD5-532E-571A-BDC5-8DA761C4AFAB}']
  { constructors } 

    ///<summary>
    ///  Initializes BackgroundArtifact object.
    ///</summary>
    {class} function init: DNBackgroundArtifact;

  end;

  ///<summary>
  ///  Class descibes background artifact. This artifact allows to set background of the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BackgroundArtifact')]
  DNBackgroundArtifact = interface(DNArtifact)
  ['{CDBB1847-C63D-3C0D-B82E-C5FD8FD68C1D}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImage: DDN.mscorlib.DNStream;
    procedure set_BackgroundImage(value: DDN.mscorlib.DNStream);
    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Form: DNXForm;
    function get_Rectangle: DNRectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets text of the artifact.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains artifact text.</param>
    procedure SetText(formattedText: DNFormattedText);
    ///<summary>
    ///  Set text and text properties of the artifact.
    ///</summary>
    ///  <param name="Text">Text string.</param>
    ///  <param name="textState">Text properties (color, </param>
    procedure SetTextAndState(text: string; textState: DNTextState);
    ///<summary>
    ///  Set text and text properties of the artifact. Allows to specify multiple lines.
    ///</summary>
    ///  <param name="text">Array of text string.</param>
    ///  <param name="textState">Text properties.</param>
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageStream">Stream which contains image data.</param>
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageName">Name of image file.</param>
    procedure SetImage(imageName: string); overload;
    ///<summary>
    ///  Sets PDF page which is placed on the document page as artifact.
    ///</summary>
    ///  <param name="page">Page which is placed as Artifcact. </param>
    procedure SetPdfPage(page: DNPage);
    ///<summary>
    ///  Dispose the artifact.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of value.</param>
    ///<returns>Value, or null if value does not exists.</returns>
    function GetValue(name: string): string;
    ///<summary>
    ///  Sets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of custom value.</param>
    ///  <param name="value">Custom value in the artifact.</param>
    procedure SetValue(name: string; value: string);
    ///<summary>
    ///  Remove custom value from the artifact.
    ///</summary>
    ///  <param name="name">Name of custom value to be removed.</param>
    procedure RemoveValue(name: string);
    ///<summary>
    ///  Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance.
    ///  Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
    ///  everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
    ///  This allows to change page contents only once.
    ///</summary>
    ///<example><code lang="C#">
    ///  Artifact art = doc.Pages[1].Artifacts[1];
    ///  art.BeginUpdates();
    ///  art.Opacity = 0.3f;
    ///  art.Position = new Point(10,10);
    ///  art.Rotation = 30;
    ///  art.SaveUpdates();
    ///</code></example>
    procedure BeginUpdates;
    ///<summary>
    ///  Saves all updates in artifact which were made after BeginUpdates() call.
    ///</summary>
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets bacground color of background artifact
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets bacground image of background artifact
    ///</summary>
    property BackgroundImage: DDN.mscorlib.DNStream read get_BackgroundImage write set_BackgroundImage;
    ///<summary>
    ///  Gets name of artifact type. May be used if artifact type is non standard.
    ///</summary>
    property CustomType: string read get_CustomType write set_CustomType;
    ///<summary>
    ///  Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
    ///</summary>
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    ///<summary>
    ///  Gets artifact type.
    ///</summary>
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    ///<summary>
    ///  Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
    ///</summary>
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Gets XForm of the artifact (if XForm is used).
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets rectangle of the artifact.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets artifact position.
    ///  If this property is specified, then margins and alignments are ignored.
    ///</summary>
    property Position: DNPoint read get_Position write set_Position;
    ///<summary>
    ///  Right margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Left margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Top margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Bottom margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Horizontal alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    ///<summary>
    ///  Vertical alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    ///<summary>
    ///  Gets or sets artifact rotation angle.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets text of the artifact.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets image of the artifact (if presents).
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets or sets opacity of the artifact. Possible values are in range 0..1.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Text state for artifact text.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  If true Artifact is placed behind page contents.
    ///</summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNBackgroundArtifact = class(TDNGenericImport<DNBackgroundArtifactClass, DNBackgroundArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFooterArtifactClass = interface(DNArtifactClass)
  ['{D904672F-4DC4-5DBC-84CC-FD1783A1DB1B}']
  { constructors } 

    ///<summary>
    ///  Creates Footer Artifact instance.
    ///</summary>
    {class} function init: DNFooterArtifact;

  end;

  ///<summary>
  ///  Describes footer artifact. This may be used to set footer of the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FooterArtifact')]
  DNFooterArtifact = interface(DNArtifact)
  ['{DDDE536F-4E16-3B67-BC35-8DB8BA2E16B5}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Form: DNXForm;
    function get_Rectangle: DNRectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets text of the artifact.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains artifact text.</param>
    procedure SetText(formattedText: DNFormattedText);
    ///<summary>
    ///  Set text and text properties of the artifact.
    ///</summary>
    ///  <param name="Text">Text string.</param>
    ///  <param name="textState">Text properties (color, </param>
    procedure SetTextAndState(text: string; textState: DNTextState);
    ///<summary>
    ///  Set text and text properties of the artifact. Allows to specify multiple lines.
    ///</summary>
    ///  <param name="text">Array of text string.</param>
    ///  <param name="textState">Text properties.</param>
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageStream">Stream which contains image data.</param>
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageName">Name of image file.</param>
    procedure SetImage(imageName: string); overload;
    ///<summary>
    ///  Sets PDF page which is placed on the document page as artifact.
    ///</summary>
    ///  <param name="page">Page which is placed as Artifcact. </param>
    procedure SetPdfPage(page: DNPage);
    ///<summary>
    ///  Dispose the artifact.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of value.</param>
    ///<returns>Value, or null if value does not exists.</returns>
    function GetValue(name: string): string;
    ///<summary>
    ///  Sets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of custom value.</param>
    ///  <param name="value">Custom value in the artifact.</param>
    procedure SetValue(name: string; value: string);
    ///<summary>
    ///  Remove custom value from the artifact.
    ///</summary>
    ///  <param name="name">Name of custom value to be removed.</param>
    procedure RemoveValue(name: string);
    ///<summary>
    ///  Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance.
    ///  Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
    ///  everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
    ///  This allows to change page contents only once.
    ///</summary>
    ///<example><code lang="C#">
    ///  Artifact art = doc.Pages[1].Artifacts[1];
    ///  art.BeginUpdates();
    ///  art.Opacity = 0.3f;
    ///  art.Position = new Point(10,10);
    ///  art.Rotation = 30;
    ///  art.SaveUpdates();
    ///</code></example>
    procedure BeginUpdates;
    ///<summary>
    ///  Saves all updates in artifact which were made after BeginUpdates() call.
    ///</summary>
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets name of artifact type. May be used if artifact type is non standard.
    ///</summary>
    property CustomType: string read get_CustomType write set_CustomType;
    ///<summary>
    ///  Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
    ///</summary>
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    ///<summary>
    ///  Gets artifact type.
    ///</summary>
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    ///<summary>
    ///  Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
    ///</summary>
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Gets XForm of the artifact (if XForm is used).
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets rectangle of the artifact.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets artifact position.
    ///  If this property is specified, then margins and alignments are ignored.
    ///</summary>
    property Position: DNPoint read get_Position write set_Position;
    ///<summary>
    ///  Right margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Left margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Top margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Bottom margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Horizontal alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    ///<summary>
    ///  Vertical alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    ///<summary>
    ///  Gets or sets artifact rotation angle.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets text of the artifact.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets image of the artifact (if presents).
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets or sets opacity of the artifact. Possible values are in range 0..1.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Text state for artifact text.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  If true Artifact is placed behind page contents.
    ///</summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNFooterArtifact = class(TDNGenericImport<DNFooterArtifactClass, DNFooterArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeaderArtifactClass = interface(DNArtifactClass)
  ['{97FE5C2C-F688-50F7-A732-6BEECD68957A}']
  { constructors } 

    ///<summary>
    ///  Creates Header Artifact instance.
    ///</summary>
    {class} function init: DNHeaderArtifact;

  end;

  ///<summary>
  ///  Class describes Heaader artifact. This artifacgt may be used to set heading of the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HeaderArtifact')]
  DNHeaderArtifact = interface(DNArtifact)
  ['{ED17285E-B51B-349E-BBA6-B6F34186B7EA}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Form: DNXForm;
    function get_Rectangle: DNRectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets text of the artifact.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains artifact text.</param>
    procedure SetText(formattedText: DNFormattedText);
    ///<summary>
    ///  Set text and text properties of the artifact.
    ///</summary>
    ///  <param name="Text">Text string.</param>
    ///  <param name="textState">Text properties (color, </param>
    procedure SetTextAndState(text: string; textState: DNTextState);
    ///<summary>
    ///  Set text and text properties of the artifact. Allows to specify multiple lines.
    ///</summary>
    ///  <param name="text">Array of text string.</param>
    ///  <param name="textState">Text properties.</param>
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageStream">Stream which contains image data.</param>
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageName">Name of image file.</param>
    procedure SetImage(imageName: string); overload;
    ///<summary>
    ///  Sets PDF page which is placed on the document page as artifact.
    ///</summary>
    ///  <param name="page">Page which is placed as Artifcact. </param>
    procedure SetPdfPage(page: DNPage);
    ///<summary>
    ///  Dispose the artifact.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of value.</param>
    ///<returns>Value, or null if value does not exists.</returns>
    function GetValue(name: string): string;
    ///<summary>
    ///  Sets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of custom value.</param>
    ///  <param name="value">Custom value in the artifact.</param>
    procedure SetValue(name: string; value: string);
    ///<summary>
    ///  Remove custom value from the artifact.
    ///</summary>
    ///  <param name="name">Name of custom value to be removed.</param>
    procedure RemoveValue(name: string);
    ///<summary>
    ///  Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance.
    ///  Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
    ///  everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
    ///  This allows to change page contents only once.
    ///</summary>
    ///<example><code lang="C#">
    ///  Artifact art = doc.Pages[1].Artifacts[1];
    ///  art.BeginUpdates();
    ///  art.Opacity = 0.3f;
    ///  art.Position = new Point(10,10);
    ///  art.Rotation = 30;
    ///  art.SaveUpdates();
    ///</code></example>
    procedure BeginUpdates;
    ///<summary>
    ///  Saves all updates in artifact which were made after BeginUpdates() call.
    ///</summary>
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets name of artifact type. May be used if artifact type is non standard.
    ///</summary>
    property CustomType: string read get_CustomType write set_CustomType;
    ///<summary>
    ///  Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
    ///</summary>
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    ///<summary>
    ///  Gets artifact type.
    ///</summary>
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    ///<summary>
    ///  Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
    ///</summary>
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Gets XForm of the artifact (if XForm is used).
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets rectangle of the artifact.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets artifact position.
    ///  If this property is specified, then margins and alignments are ignored.
    ///</summary>
    property Position: DNPoint read get_Position write set_Position;
    ///<summary>
    ///  Right margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Left margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Top margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Bottom margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Horizontal alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    ///<summary>
    ///  Vertical alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    ///<summary>
    ///  Gets or sets artifact rotation angle.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets text of the artifact.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets image of the artifact (if presents).
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets or sets opacity of the artifact. Possible values are in range 0..1.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Text state for artifact text.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  If true Artifact is placed behind page contents.
    ///</summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNHeaderArtifact = class(TDNGenericImport<DNHeaderArtifactClass, DNHeaderArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWatermarkArtifactClass = interface(DNArtifactClass)
  ['{9D1B9078-21D1-5B25-87FB-4C9FD38F532A}']
  { constructors } 

    ///<summary>
    ///  Creates instance of Watermark artifact.
    ///</summary>
    {class} function init: DNWatermarkArtifact;

  end;

  ///<summary>
  ///  Class describes watermark artifact. This may be used to
  ///</summary>
  [DNTypeName('Aspose.Pdf.WatermarkArtifact')]
  DNWatermarkArtifact = interface(DNArtifact)
  ['{3AC922AC-D821-3D4B-B5DA-FE479F5B1477}']
  { getters & setters } 

    function get_CustomType: string;
    procedure set_CustomType(value: string);
    function get_CustomSubtype: string;
    procedure set_CustomSubtype(value: string);
    function get_Type: DNArtifact_ArtifactType;
    procedure set_Type(value: DNArtifact_ArtifactType);
    function get_Subtype: DNArtifact_ArtifactSubtype;
    procedure set_Subtype(value: DNArtifact_ArtifactSubtype);
    function get_Form: DNXForm;
    function get_Rectangle: DNRectangle;
    function get_Position: DNPoint;
    procedure set_Position(value: DNPoint);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_ArtifactHorizontalAlignment: DNHorizontalAlignment;
    procedure set_ArtifactHorizontalAlignment(value: DNHorizontalAlignment);
    function get_ArtifactVerticalAlignment: DNVerticalAlignment;
    procedure set_ArtifactVerticalAlignment(value: DNVerticalAlignment);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Image: DNXImage;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);

  { methods } 

    ///<summary>
    ///  Sets text of the artifact.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains artifact text.</param>
    procedure SetText(formattedText: DNFormattedText);
    ///<summary>
    ///  Set text and text properties of the artifact.
    ///</summary>
    ///  <param name="Text">Text string.</param>
    ///  <param name="textState">Text properties (color, </param>
    procedure SetTextAndState(text: string; textState: DNTextState);
    ///<summary>
    ///  Set text and text properties of the artifact. Allows to specify multiple lines.
    ///</summary>
    ///  <param name="text">Array of text string.</param>
    ///  <param name="textState">Text properties.</param>
    procedure SetLinesAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageStream">Stream which contains image data.</param>
    procedure SetImage(imageStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sets image of the artifact.
    ///</summary>
    ///  <param name="imageName">Name of image file.</param>
    procedure SetImage(imageName: string); overload;
    ///<summary>
    ///  Sets PDF page which is placed on the document page as artifact.
    ///</summary>
    ///  <param name="page">Page which is placed as Artifcact. </param>
    procedure SetPdfPage(page: DNPage);
    ///<summary>
    ///  Dispose the artifact.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Gets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of value.</param>
    ///<returns>Value, or null if value does not exists.</returns>
    function GetValue(name: string): string;
    ///<summary>
    ///  Sets custom value of artifact.
    ///</summary>
    ///  <param name="name">Name of custom value.</param>
    ///  <param name="value">Custom value in the artifact.</param>
    procedure SetValue(name: string; value: string);
    ///<summary>
    ///  Remove custom value from the artifact.
    ///</summary>
    ///  <param name="name">Name of custom value to be removed.</param>
    procedure RemoveValue(name: string);
    ///<summary>
    ///  Start delated updates. Use this feature if you need make several changes to the same artifact to improve performance.
    ///  Usually artifact operators are changed anytime when artifact property was changed. This causes changing of page contents
    ///  everytime when artifact was changed. To avoid this effect put all artifact updates between StartUpdates/SaveUpdates calls.
    ///  This allows to change page contents only once.
    ///</summary>
    ///<example><code lang="C#">
    ///  Artifact art = doc.Pages[1].Artifacts[1];
    ///  art.BeginUpdates();
    ///  art.Opacity = 0.3f;
    ///  art.Position = new Point(10,10);
    ///  art.Rotation = 30;
    ///  art.SaveUpdates();
    ///</code></example>
    procedure BeginUpdates;
    ///<summary>
    ///  Saves all updates in artifact which were made after BeginUpdates() call.
    ///</summary>
    procedure SaveUpdates;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets name of artifact type. May be used if artifact type is non standard.
    ///</summary>
    property CustomType: string read get_CustomType write set_CustomType;
    ///<summary>
    ///  Gets name of artifact subtype. May be used  if artifact subtype is not standard subtype.
    ///</summary>
    property CustomSubtype: string read get_CustomSubtype write set_CustomSubtype;
    ///<summary>
    ///  Gets artifact type.
    ///</summary>
    property &Type: DNArtifact_ArtifactType read get_Type write set_Type;
    ///<summary>
    ///  Gets artifact subtype. If artifact has non-standard subtype, name of the subtype may be read via CustomSubtype.
    ///</summary>
    property Subtype: DNArtifact_ArtifactSubtype read get_Subtype write set_Subtype;
    ///<summary>
    ///  Gets XForm of the artifact (if XForm is used).
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets rectangle of the artifact.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets artifact position.
    ///  If this property is specified, then margins and alignments are ignored.
    ///</summary>
    property Position: DNPoint read get_Position write set_Position;
    ///<summary>
    ///  Right margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Left margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Top margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Bottom margin of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Horizontal alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactHorizontalAlignment: DNHorizontalAlignment read get_ArtifactHorizontalAlignment write set_ArtifactHorizontalAlignment;
    ///<summary>
    ///  Vertical alignment of artifact.
    ///  If position is specified explicitly (in Position property) this value is ignored.
    ///</summary>
    property ArtifactVerticalAlignment: DNVerticalAlignment read get_ArtifactVerticalAlignment write set_ArtifactVerticalAlignment;
    ///<summary>
    ///  Gets or sets artifact rotation angle.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets text of the artifact.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets image of the artifact (if presents).
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets or sets opacity of the artifact. Possible values are in range 0..1.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Text state for artifact text.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  If true Artifact is placed behind page contents.
    ///</summary>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
  end;

  TDNWatermarkArtifact = class(TDNGenericImport<DNWatermarkArtifactClass, DNWatermarkArtifact>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNArtifactCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{273FAA65-F4CA-5942-9A42-9DBCF22C00B6}']
  end;

  ///<summary>
  ///  Class represents artifact collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ArtifactCollection')]
  DNArtifactCollection = interface(DDN.mscorlib.DNICollection<DNArtifact>)
  ['{749F7AA8-8594-3987-A4BB-740E218E5D22}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNArtifact;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Copies colection into an array.
    ///</summary>
    ///  <param name="dest">Destination array.</param>
    ///  <param name="index">Starting index.</param>
    procedure CopyTo(dest: TArray<DNArtifact>; index: Int32);
    ///<summary>
    ///  Gets enumerator for the collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNArtifact>;
    ///<summary>
    ///  Deletes specified artifact.
    ///</summary>
    ///  <param name="artifact">Artifact which will be deleted.</param>
    procedure Delete(artifact: DNArtifact); overload;
    ///<summary>
    ///  Update artifact inside the collection.
    ///</summary>
    ///  <param name="artifact">Artifact to be updated.</param>
    procedure Update(artifact: DNArtifact);
    ///<summary>
    ///  Deletes artifact by its index.
    ///</summary>
    ///  <param name="index">Index of artifact to delete.</param>
    procedure Delete(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Is this object synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets count of artifacts in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets synchronization object of the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNArtifact read get_Item; default;
    ///<summary>
    ///  Gets if collection is readonly. Always returns false.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNArtifactCollection = class(TDNGenericImport<DNArtifactCollectionClass, DNArtifactCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseActionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F2438543-C303-5280-A018-82DC2861B12C}']
  end;

  ///<summary>
  ///  Class incapsulates basic actions wuth page/annotation/field interactive actions
  ///</summary>
  [DNTypeName('Aspose.Pdf.BaseActionCollection')]
  DNBaseActionCollection = interface(DDN.mscorlib.DNObject)
  ['{8324B312-FC9F-3F15-9EAE-C6797C828B9D}']
  { methods } 

    ///<summary>
    ///  Removes all actions of the annotation.
    ///</summary>
    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseActionCollection = class(TDNGenericImport<DNBaseActionCollectionClass, DNBaseActionCollection>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationActionCollectionClass = interface(DNBaseActionCollectionClass)
  ['{9D25F5FE-E658-511B-B518-CA553FFB79E4}']
  end;

  ///<summary>
  ///  Represents the collection of annotation actions.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.AnnotationActionCollection')]
  DNAnnotationActionCollection = interface(DNBaseActionCollection)
  ['{876ACB7E-3195-3D02-ACFB-E25DE9931EC2}']
  { getters & setters } 

    function get_OnEnter: DNPdfAction;
    procedure set_OnEnter(value: DNPdfAction);
    function get_OnExit: DNPdfAction;
    procedure set_OnExit(value: DNPdfAction);
    function get_OnPressMouseBtn: DNPdfAction;
    procedure set_OnPressMouseBtn(value: DNPdfAction);
    function get_OnReleaseMouseBtn: DNPdfAction;
    procedure set_OnReleaseMouseBtn(value: DNPdfAction);
    function get_OnReceiveFocus: DNPdfAction;
    procedure set_OnReceiveFocus(value: DNPdfAction);
    function get_OnOpenPage: DNPdfAction;
    procedure set_OnOpenPage(value: DNPdfAction);
    function get_OnClosePage: DNPdfAction;
    procedure set_OnClosePage(value: DNPdfAction);
    function get_OnShowPage: DNPdfAction;
    procedure set_OnShowPage(value: DNPdfAction);
    function get_OnHidePage: DNPdfAction;
    procedure set_OnHidePage(value: DNPdfAction);
    function get_OnLostFocus: DNPdfAction;
    procedure set_OnLostFocus(value: DNPdfAction);
    function get_OnModifyCharacter: DNPdfAction;
    procedure set_OnModifyCharacter(value: DNPdfAction);
    function get_OnValidate: DNPdfAction;
    procedure set_OnValidate(value: DNPdfAction);
    function get_OnFormat: DNPdfAction;
    procedure set_OnFormat(value: DNPdfAction);
    function get_OnCalculate: DNPdfAction;
    procedure set_OnCalculate(value: DNPdfAction);

  { methods } 

    ///<summary>
    ///  Removes all actions of the annotation.
    ///</summary>
    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets an action to be performed when the cursor enters the annotation�s active area.
    ///</summary>
    property OnEnter: DNPdfAction read get_OnEnter write set_OnEnter;
    ///<summary>
    ///  Gets or sets an action to be performed when the cursor exits the annotation�s active area.
    ///</summary>
    property OnExit: DNPdfAction read get_OnExit write set_OnExit;
    ///<summary>
    ///  Gets or sets an action to be performed when the mouse button is pressed inside the annotation�s active area.
    ///</summary>
    property OnPressMouseBtn: DNPdfAction read get_OnPressMouseBtn write set_OnPressMouseBtn;
    ///<summary>
    ///  Gets or sets an action to be performed when the mouse button is released inside the annotation�s active area.
    ///</summary>
    property OnReleaseMouseBtn: DNPdfAction read get_OnReleaseMouseBtn write set_OnReleaseMouseBtn;
    ///<summary>
    ///  Gets or sets an action to be performed when the annotation receives the input focus.
    ///</summary>
    property OnReceiveFocus: DNPdfAction read get_OnReceiveFocus write set_OnReceiveFocus;
    ///<summary>
    ///  Gets or sets an action to be performed when the page containing the annotation is opened.
    ///</summary>
    property OnOpenPage: DNPdfAction read get_OnOpenPage write set_OnOpenPage;
    ///<summary>
    ///  Gets or sets an action to be performed when the page containing the annotation is closed.
    ///</summary>
    property OnClosePage: DNPdfAction read get_OnClosePage write set_OnClosePage;
    ///<summary>
    ///  Gets or sets an action to be performed when the page containing the annotation becomes visible in the viewer application�s user interface.
    ///</summary>
    property OnShowPage: DNPdfAction read get_OnShowPage write set_OnShowPage;
    ///<summary>
    ///  Gets or sets an action to be performed when the page containing the annotation is no longer visible in the viewer application�s user interface.
    ///</summary>
    property OnHidePage: DNPdfAction read get_OnHidePage write set_OnHidePage;
    ///<summary>
    ///  Gets or sets an action to be performed when the annotation loses the input focus.
    ///</summary>
    property OnLostFocus: DNPdfAction read get_OnLostFocus write set_OnLostFocus;
    ///<summary>
    ///  Gets or sets an action to be performed when user modifies character of the field.
    ///</summary>
    property OnModifyCharacter: DNPdfAction read get_OnModifyCharacter write set_OnModifyCharacter;
    ///<summary>
    ///  Gets or sets an action to be performed when user changes contents of the field.
    ///</summary>
    property OnValidate: DNPdfAction read get_OnValidate write set_OnValidate;
    ///<summary>
    ///  Gets or sets an action to be performed to format field value.
    ///</summary>
    property OnFormat: DNPdfAction read get_OnFormat write set_OnFormat;
    ///<summary>
    ///  Gets or sets an action to calculate field value.
    ///</summary>
    property OnCalculate: DNPdfAction read get_OnCalculate write set_OnCalculate;
  end;

  TDNAnnotationActionCollection = class(TDNGenericImport<DNAnnotationActionCollectionClass, DNAnnotationActionCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageActionCollectionClass = interface(DNBaseActionCollectionClass)
  ['{33AE155A-5FFC-5960-ABCB-BF94613F108A}']
  end;

  ///<summary>
  ///  This class describes page actions
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageActionCollection')]
  DNPageActionCollection = interface(DNBaseActionCollection)
  ['{2C4C6E1C-0E2F-322A-86BE-E8695963D82E}']
  { getters & setters } 

    function get_OnOpen: DNPdfAction;
    procedure set_OnOpen(value: DNPdfAction);
    function get_OnClose: DNPdfAction;
    procedure set_OnClose(value: DNPdfAction);

  { methods } 

    ///<summary>
    ///  Removes all actions of the annotation.
    ///</summary>
    procedure RemoveActions;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  An action that shall be performed when the page is opened.
    ///</summary>
    property OnOpen: DNPdfAction read get_OnOpen write set_OnOpen;
    ///<summary>
    ///  An action that shall be performed when the page is closed.
    ///</summary>
    property OnClose: DNPdfAction read get_OnClose write set_OnClose;
  end;

  TDNPageActionCollection = class(TDNGenericImport<DNPageActionCollectionClass, DNPageActionCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseOperatorCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B98A5D40-653C-5268-A170-C3B25F3AD869}']
  end;

  ///<summary>
  ///  Represents base class for operator collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BaseOperatorCollection')]
  DNBaseOperatorCollection = interface(DDN.mscorlib.DNICollection<DNOperator>)
  ['{D3142BB3-77C1-3C4D-B0A7-A92A45695308}']
  { getters & setters } 

    function get_Item(index: Int32): DNOperator;
    procedure set_Item(index: Int32; value: DNOperator);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsFastTextExtractionMode: Boolean;

  { methods } 

    ///<summary>
    ///  Returns enumerator for collection
    ///</summary>
    ///<returns>Collection enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOperator>;
    ///<summary>
    ///  Copies operators into operators list.
    ///</summary>
    ///  <param name="array">Array with operators which must to be copied. This array must be Object[] or Operator[].</param>
    ///  <param name="index">Starting index from which operators will be copied</param>
    procedure CopyTo(&array: TArray<DNOperator>; index: Int32);
    ///<summary>
    ///  Suppresses update contents data.
    ///  The contents stream is not updated until ResumeUpdate is called.
    ///</summary>
    procedure SuppressUpdate;
    ///<summary>
    ///  Resumes document update.
    ///  Updates contents stream in case there are any pending changes.
    ///</summary>
    procedure ResumeUpdate;
    ///<summary>
    ///  Inserts operator into collection.
    ///</summary>
    ///  <param name="index">Index where new operator must be added</param>
    ///  <param name="op">Operator which will be insterted</param>
    procedure Insert(index: Int32; op: DNOperator);
    ///<summary>
    ///  Adds new operator into collection.
    ///</summary>
    ///  <param name="op">Operator which must be added</param>
    procedure Add(op: DNOperator);
    ///<summary>
    ///  Removes operator from collection.
    ///</summary>
    ///  <param name="item"></param>
    ///<returns></returns>
    function Remove(item: DNOperator): Boolean;
    ///<summary></summary>
    ///  <param name="item"></param>
    ///<returns></returns>
    function &Contains(item: DNOperator): Boolean;
    ///<summary>
    ///  Clears collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Cancels last update.
    ///  This method may be called when the change should not raise contents update.
    ///</summary>
    procedure CancelUpdate;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNOperator read get_Item write set_Item; default;
    ///<summary>
    ///  Gets count of operators in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true if collection is read only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Indicates wheather collection is limited to fast text extraction
    ///</summary>
    property IsFastTextExtractionMode: Boolean read get_IsFastTextExtractionMode;
  end;

  TDNBaseOperatorCollection = class(TDNGenericImport<DNBaseOperatorCollectionClass, DNBaseOperatorCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorCollectionClass = interface(DNBaseOperatorCollectionClass)
  ['{AAEF8148-4C3A-5206-8DC0-F6954C2CBF78}']
  end;

  ///<summary>
  ///  Class represents collection of operators
  ///</summary>
  [DNTypeName('Aspose.Pdf.OperatorCollection')]
  DNOperatorCollection = interface(DNBaseOperatorCollection)
  ['{35DBBC6D-456C-3902-B6D4-A4A6EEE92D1C}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_IsFastTextExtractionMode: Boolean;
    function get_Item(index: Int32): DNOperator;
    procedure set_Item(index: Int32; value: DNOperator);

  { methods } 

    ///<summary>
    ///  Copies operators into operators list.
    ///</summary>
    ///  <param name="array">Array with operators which must to be copied. This array must be Object[] or Operator[].</param>
    ///  <param name="index">Starting index from which operators will be copied</param>
    procedure CopyTo(&array: TArray<DNOperator>; index: Int32);
    ///<summary>
    ///  Returns enumerator for collection
    ///</summary>
    ///<returns>Collection enumerator</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOperator>;
    ///<summary>
    ///  Accepts IOperatorSelector visitor object to process operators.
    ///</summary>
    ///  <param name="visitor">Visitor object</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Adds new operator into collection.
    ///</summary>
    ///  <param name="op">Operator which must be added</param>
    ///<example>
    ///  Example demonstrates how to add operators to the end of page.contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  doc.Pages[1].Contents.Add(new Aspose.Pdf.Operators.q());
    ///  doc.Pages[1].Contents.Add(new Aspose.Pdf.Operators.Q());
    ///</code></example>
    procedure Add(op: DNOperator); overload;
    ///<summary>
    ///  Deletes operator from collection.
    ///</summary>
    ///  <param name="index">Index of operator which must be deleted. Operators numbering starts from 1.</param>
    ///<example>
    ///  Example demonstrates how to delete operator by its index.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  OperatorCollection oc = doc.Pages[1].Contents;
    ///  oc.Delete(3);
    ///</code></example>
    procedure Delete(index: Int32); overload;
    ///<summary>
    ///  Inserts operator into collection.
    ///</summary>
    ///  <param name="index">Index where new operator must be added</param>
    ///  <param name="op">Operator which will be insterted</param>
    ///<example>
    ///  Example demonstrates how to insert operator to the page contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  OperatorCollection oc = doc.Pages[1].Contents;
    ///  oc.Insert(1, new Aspose.Pdf.Operators.q());
    ///  oc.Add(new Aspose.Pdf.Operators.Q());
    ///</code></example>
    procedure Insert(index: Int32; op: DNOperator); overload;
    procedure Replace(operators: DDN.mscorlib.DNIList<DNOperator>);
    ///<summary>
    ///  Add operators at the end of the contents operators.
    ///</summary>
    ///  <param name="ops">Array of operators to be added. Each operator can have any index (by default -1) because they come to the end of the contents operators i.e. indices are assigned automatically.</param>
    ///<example>
    ///  Example demonstrates how to add  operator to the end of page contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  OperatorCollection oc = doc.Pages[1].Contents;
    ///  oc.Add(new Operator[] { new Aspose.Pdf.Operators.q(), new Aspose.Pdf.Operators.Q() } );
    ///</code></example>
    procedure Add(ops: TArray<DNOperator>); overload;
    ///<summary>
    ///  Insert operators at the the given position.
    ///</summary>
    ///  <param name="at">Index from which operators are being started to insert.</param>
    ///  <param name="ops">Array of operators to be inserted. Each operator can have any index (by default -1) because their indices adjusted automatically starting from <paramref name="at" />
    ///  .</param>
    ///<example>
    ///  Example demonstrates how to insert operator to the page contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  OperatorCollection oc = doc.Pages[1].Contents;
    ///  oc.Insert(1, new Operator[] { new Aspose.Pdf.Operators.q(), new Aspose.Pdf.Operators.Q() } );
    ///</code></example>
    procedure Insert(at: Int32; ops: TArray<DNOperator>); overload;
    ///<summary>
    ///  Deletes operators from collection.
    ///</summary>
    ///  <param name="ops">Array of operators to delete</param>
    ///<example>
    ///  Example demonstrates how to remove operator from page contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  OperatorCollection oc = doc.Pages[1].Contents;
    ///  oc.Delete(new Operator[] { oc[1] } );
    ///</code></example>
    procedure Delete(ops: TArray<DNOperator>); overload;
    procedure Delete(list: DDN.mscorlib.DNIList<DNOperator>); overload;
    procedure Insert(at: Int32; ops: DDN.mscorlib.DNIList<DNOperator>); overload;
    ///<summary>
    ///  Removes all operators from list.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to clear page contents.
    ///<code lang="C#">
    ///  Document doc = new Document("input.pdf");
    ///  doc.Pages[1].Clear();
    ///</code></example>
    procedure Clear;
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    procedure Add(ops: DDN.mscorlib.DNICollection<DNOperator>); overload;
    ///<summary>
    ///  Suppresses update contents data.
    ///  The contents stream is not updated until ResumeUpdate is called.
    ///</summary>
    procedure SuppressUpdate;
    ///<summary>
    ///  Resumes document update.
    ///  Updates contents stream in case there are any pending changes.
    ///</summary>
    procedure ResumeUpdate;
    ///<summary>
    ///  Cancels last update.
    ///  This method may be called when the change should not raise contents update.
    ///</summary>
    procedure CancelUpdate;
    ///<summary>
    ///  Remove operator from the collection.
    ///</summary>
    ///  <param name="op">Operator to be removed.</param>
    ///<returns>True if operator was found and removed. False if operator did not belong to the collection.</returns>
    function Remove(op: DNOperator): Boolean;
    ///<summary>
    ///  Returns true if the collection contains given operator.
    ///</summary>
    ///  <param name="op"></param>
    ///<returns></returns>
    function &Contains(op: DNOperator): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Gets count of operators in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Indicates wheather collection is limited to fast text extraction
    ///</summary>
    property IsFastTextExtractionMode: Boolean read get_IsFastTextExtractionMode;
    property Item[index: Int32]: DNOperator read get_Item write set_Item; default;
  end;

  TDNOperatorCollection = class(TDNGenericImport<DNOperatorCollectionClass, DNOperatorCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBaseParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71434F94-BEA4-51E1-8966-61F56EED039E}']
  end;

  ///<summary>
  ///  Represents a abstract base object can be added to the page(doc.Paragraphs.Add()).
  ///</summary>
  [DNTypeName('Aspose.Pdf.BaseParagraph')]
  DNBaseParagraph = interface(DDN.mscorlib.DNObject)
  ['{1F0C92BB-C9EE-3E52-A2D1-CFABCA5CFFEB}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clones this instance.
    ///  Virtual method. Always return null.
    ///</summary>
    ///<returns></returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNBaseParagraph = class(TDNGenericImport<DNBaseParagraphClass, DNBaseParagraph>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNAnnotationClass = interface(DNBaseParagraphClass)
  ['{C49F0A2F-4ED8-5F6E-8704-D1976C4383EC}']
  { static getter & setter } 

    {class} function get_UpdateAppearanceOnConvert: Boolean;
    {class} procedure set_UpdateAppearanceOnConvert(value: Boolean);
    {class} function get_UseFontSubset: Boolean;
    {class} procedure set_UseFontSubset(value: Boolean);

  { static propertys } 

    ///<summary>
    ///  If true, annotation appearance will be updated before converting PF document into image. This allows convert fields correctly but probably demand more time.
    ///</summary>
    {class} property UpdateAppearanceOnConvert: Boolean read get_UpdateAppearanceOnConvert write set_UpdateAppearanceOnConvert;
    ///<summary>
    ///  If this property set to true, fonts will be added to document as subsets. Default value is true.
    ///</summary>
    {class} property UseFontSubset: Boolean read get_UseFontSubset write set_UseFontSubset;
  end;

  ///<summary>
  ///  Class representing annotation object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.Annotation')]
  DNAnnotation = interface(DNBaseParagraph)
  ['{76CC3C2F-FE41-314B-83C1-1EC311F3BF62}']
  { getters & setters } 

    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Accepts visitor for annotation processing.
    ///</summary>
    ///  <param name="visitor">AnnotationSelector object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Clones this instance.
    ///  Virtual method. Always return null.
    ///</summary>
    ///<returns></returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNAnnotation = class(TDNGenericImport<DNAnnotationClass, DNAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLinkAnnotationClass = interface(DNAnnotationClass)
  ['{28890E0D-6BE8-5284-BE06-F62484470338}']
  { constructors } 

    ///<summary>
    ///  Creates new Link annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNLinkAnnotation;

  end;

  ///<summary>
  ///  Represents either a hypertext link to a destination elsewhere in the document or an action to be performed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LinkAnnotation')]
  DNLinkAnnotation = interface(DNAnnotation)
  ['{00D93A63-112F-3FB2-9CB9-81E609CE88C9}']
  { getters & setters } 

    function get_Action: DNPdfAction;
    procedure set_Action(value: DNPdfAction);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  An action to be performed when the link annotation is activated.
    ///</summary>
    property Action: DNPdfAction read get_Action write set_Action;
    ///<summary>
    ///  A destination to be displayed when the annotation is activated.
    ///</summary>
    property Destination: DNIAppointment read get_Destination write set_Destination;
    ///<summary>
    ///  The visual effect to be used when the mouse button is pressed or held down inside its active area.
    ///</summary>
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLinkAnnotation = class(TDNGenericImport<DNLinkAnnotationClass, DNLinkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMarkupAnnotationClass = interface(DNAnnotationClass)
  ['{35F64032-0843-576A-B54A-55B5B89AF2AD}']
  { constructors } 

    ///<summary>
    ///  Constructor for markup annotation.
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    {class} function init(document: DNDocument): DNMarkupAnnotation;

  end;

  ///<summary>
  ///  Abstract class representing markup annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.MarkupAnnotation')]
  DNMarkupAnnotation = interface(DNAnnotation)
  ['{D3CB863A-3A70-3F14-98C4-8A46C5B42AA1}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Accepts visitor for annotation processing.
    ///</summary>
    ///  <param name="visitor">AnnotationSelector object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNMarkupAnnotation = class(TDNGenericImport<DNMarkupAnnotationClass, DNMarkupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCaretAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{5CF48934-16EE-515D-B2E9-C0E43F0019F0}']
  { constructors } 

    ///<summary>
    ///  Constructor for usign in Generator.
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    {class} function init(document: DNDocument): DNCaretAnnotation; overload;
    ///<summary>
    ///  Creates new Caret annotation on the specified page.
    ///</summary>
    ///  <param name="page">Document's page where annotation should be created.</param>
    ///  <param name="rect">Required rectangle that sets annotation's border.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNCaretAnnotation; overload;

  end;

  ///<summary>
  ///  Class representing Caret annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CaretAnnotation')]
  DNCaretAnnotation = interface(DNMarkupAnnotation)
  ['{38B09954-5641-37FD-9C92-35A14F5A90B2}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Frame: DNRectangle;
    procedure set_Frame(value: DNRectangle);
    function get_Symbol: DNCaretSymbol;
    procedure set_Symbol(value: DNCaretSymbol);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets caret rectangle.
    ///</summary>
    property Frame: DNRectangle read get_Frame write set_Frame;
    ///<summary>
    ///  Gets or sets symbol associated with caret.
    ///</summary>
    ///<see cref="T:Aspose.Pdf.Annotations.CaretSymbol" />
    property Symbol: DNCaretSymbol read get_Symbol write set_Symbol;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCaretAnnotation = class(TDNGenericImport<DNCaretAnnotationClass, DNCaretAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCommonFigureAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{F55EA253-0BAB-5127-BC2D-DE2B35182F4A}']
  { constructors } 

    ///<summary>
    ///  Constructor for using in Generator.
    ///</summary>
    ///  <param name="document">Document where annotation will be placed.</param>
    {class} function init(document: DNDocument): DNCommonFigureAnnotation;

  end;

  ///<summary>
  ///  Abstract class representing common figure annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CommonFigureAnnotation')]
  DNCommonFigureAnnotation = interface(DNMarkupAnnotation)
  ['{6EC34194-60B4-32E4-BEC7-E83C2BC262D7}']
  { getters & setters } 

    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNRectangle;
    procedure set_Frame(value: DNRectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Interior color with which to fill the annotation�s rectangle or ellipse.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  The rectangle describing the numerical differences between two rectangles:
    ///  the Rect entry of the annotation and the actual boundaries of the underlying square or circle.
    ///</summary>
    property Frame: DNRectangle read get_Frame write set_Frame;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCommonFigureAnnotation = class(TDNGenericImport<DNCommonFigureAnnotationClass, DNCommonFigureAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNCircleAnnotationClass = interface(DNCommonFigureAnnotationClass)
  ['{A7F73233-6CC7-56FE-A49D-3B379584A5FB}']
  { constructors } 

    ///<summary>
    ///  Constructor for Circle annotation.
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    {class} function init(document: DNDocument): DNCircleAnnotation; overload;
    ///<summary>
    ///  Creates new Circle annotation on the specified page.
    ///</summary>
    ///  <param name="page">Document's page where annotation should be created.</param>
    ///  <param name="rect">Required rectangle that sets annotation's border.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNCircleAnnotation; overload;

  end;

  ///<summary>
  ///  Class representing Circle annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.CircleAnnotation')]
  DNCircleAnnotation = interface(DNCommonFigureAnnotation)
  ['{D47C6BBE-CE78-35C0-8359-A3A01C70652F}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNRectangle;
    procedure set_Frame(value: DNRectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Interior color with which to fill the annotation�s rectangle or ellipse.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  The rectangle describing the numerical differences between two rectangles:
    ///  the Rect entry of the annotation and the actual boundaries of the underlying square or circle.
    ///</summary>
    property Frame: DNRectangle read get_Frame write set_Frame;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCircleAnnotation = class(TDNGenericImport<DNCircleAnnotationClass, DNCircleAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSquareAnnotationClass = interface(DNCommonFigureAnnotationClass)
  ['{B2B43D55-ED25-5784-A88D-BB3F860DE633}']
  { constructors } 

    ///<summary>
    ///  Constructor for using with Generator.
    ///</summary>
    ///  <param name="document">Documennt where annotation will be created.</param>
    {class} function init(document: DNDocument): DNSquareAnnotation; overload;
    ///<summary>
    ///  Creates new Square annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNSquareAnnotation; overload;

  end;

  ///<summary>
  ///  Class representing square annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SquareAnnotation')]
  DNSquareAnnotation = interface(DNCommonFigureAnnotation)
  ['{DFB626B0-5F74-3FC2-A815-9934784169C8}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_Frame: DNRectangle;
    procedure set_Frame(value: DNRectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor to process annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Interior color with which to fill the annotation�s rectangle or ellipse.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  The rectangle describing the numerical differences between two rectangles:
    ///  the Rect entry of the annotation and the actual boundaries of the underlying square or circle.
    ///</summary>
    property Frame: DNRectangle read get_Frame write set_Frame;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSquareAnnotation = class(TDNGenericImport<DNSquareAnnotationClass, DNSquareAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFileAttachmentAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{CC001A9F-114D-5853-8D9E-89BBD97DDE06}']
  { constructors } 

    ///<summary>
    ///  Creates new FileAttachment annotation on the specified page.
    ///</summary>
    ///  <param name="page">Document's page where annotation should be created.</param>
    ///  <param name="rect">Required rectangle that sets annotation's border.</param>
    ///  <param name="fileSpec">Describes the file that shoud be bound with the annotation.</param>
    {class} function init(page: DNPage; rect: DNRectangle; fileSpec: DNFileSpecification): DNFileAttachmentAnnotation;

  end;

  ///<summary>
  ///  Class describes file attachment annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FileAttachmentAnnotation')]
  DNFileAttachmentAnnotation = interface(DNMarkupAnnotation)
  ['{7C332EFB-9012-3C6F-8C0A-DC6C2F475E1D}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_Icon: DNFileIcon;
    procedure set_Icon(value: DNFileIcon);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  The specification of the file associated with this annotation.
    ///</summary>
    property &File: DNFileSpecification read get_File write set_File;
    ///<summary>
    ///  Gets or sets icon that shall be used in displaying annotation.
    ///</summary>
    property Icon: DNFileIcon read get_Icon write set_Icon;
    ///<summary>
    ///  Gets or sets icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFileAttachmentAnnotation = class(TDNGenericImport<DNFileAttachmentAnnotationClass, DNFileAttachmentAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNFreeTextAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{301EC734-292C-5DAB-AC01-144ADE3B3887}']
  { constructors } 

    ///<summary>
    ///  Constructor to use with Generator.
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    ///  <param name="appearance">Default Appearance</param>
    {class} function init(document: DNDocument; appearance: DNDefaultAppearance): DNFreeTextAnnotation; overload;
    ///<summary>
    ///  Creates new FreeText annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="appearance">The default appearance to be used in formatting the text.</param>
    {class} function init(page: DNPage; rect: DNRectangle; appearance: DNDefaultAppearance): DNFreeTextAnnotation; overload;

  end;

  ///<summary>
  ///  Represents a free text annotation that displays text directly on the page. Unlike an ordinary text annotation, a free text annotation has no open or closed state; instead of being displayed in a pop-up window, the text is always visible.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.FreeTextAnnotation')]
  DNFreeTextAnnotation = interface(DNMarkupAnnotation)
  ['{25368158-800D-389E-B4A5-808E320B0605}']
  { getters & setters } 

    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Justification: DNJustification;
    procedure set_Justification(value: DNJustification);
    function get_DefaultAppearance: string;
    procedure set_DefaultAppearance(value: string);
    function get_DefaultAppearanceObject: DNDefaultAppearance;
    function get_Intent: DNFreeTextIntent;
    procedure set_Intent(value: DNFreeTextIntent);
    function get_DefaultStyle: string;
    procedure set_DefaultStyle(value: string);
    function get_TextStyle: DNTextStyle;
    procedure set_TextStyle(value: DNTextStyle);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_AnnotationType: DNAnnotationType;
    function get_Callout: TArray<DNPoint>;
    procedure set_Callout(value: TArray<DNPoint>);
    function get_TextRectangle: DNRectangle;
    procedure set_TextRectangle(value: DNRectangle);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets line ending style for line ending point.
    ///  OThis property is obsolete, please use EndingStyle.
    ///</summary>
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    ///<summary>
    ///  Gets or sets line ending style for line ending point.
    ///</summary>
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    ///<summary>
    ///  Gets or set a code specifying the form of quadding (justification) to be used in displaying the annotation�s text.
    ///</summary>
    property Justification: DNJustification read get_Justification write set_Justification;
    ///<summary>
    ///  Gets or sets the default appearance string to be used in formatting the text.
    ///</summary>
    property DefaultAppearance: string read get_DefaultAppearance write set_DefaultAppearance;
    ///<summary>
    ///  Object which represents default appearance of FreeText annotation.
    ///</summary>
    property DefaultAppearanceObject: DNDefaultAppearance read get_DefaultAppearanceObject;
    ///<summary>
    ///  Gets or sets the intent of the free text annotation.
    ///</summary>
    property Intent: DNFreeTextIntent read get_Intent write set_Intent;
    ///<summary>
    ///  Gets or sets a default style string.
    ///</summary>
    property DefaultStyle: string read get_DefaultStyle write set_DefaultStyle;
    ///<summary>
    ///  Gets or sets style of the text in appearance. when text style is changed, text appearance is updated.
    ///</summary>
    property TextStyle: DNTextStyle read get_TextStyle write set_TextStyle;
    ///<summary>
    ///  Angle of annotation rotation.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Array of point specifying callout line.
    ///</summary>
    property Callout: TArray<DNPoint> read get_Callout write set_Callout;
    ///<summary>
    ///  Rectangle describing the numerical differences between two rectangles: the Rect entry of the annotation
    ///  and a rectangle contained within that rectangle. The inner rectangle is where the annotation�s text should be displayed.
    ///</summary>
    property TextRectangle: DNRectangle read get_TextRectangle write set_TextRectangle;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFreeTextAnnotation = class(TDNGenericImport<DNFreeTextAnnotationClass, DNFreeTextAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNInkAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{FFB7A601-1C2C-5641-A8DD-05F368E7DA95}']
  { constructors } 

    {class} function init(document: DNDocument; inkList: DDN.mscorlib.DNIList<TArray<DNPoint>>): DNInkAnnotation; overload;
    ///<summary>
    ///  Creates new Ink annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="inkList">An array of Point[] arrays, each representing a stroked path.</param>
    {class} function init(page: DNPage; rect: DNRectangle; inkList: DDN.mscorlib.DNIList): DNInkAnnotation; overload;
    {class} function init(page: DNPage; rect: DNRectangle; inkList: DDN.mscorlib.DNIList<TArray<DNPoint>>): DNInkAnnotation; overload;

  end;

  ///<summary>
  ///  Represents a freehand "scribble" composed of one or more disjoint paths.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.InkAnnotation')]
  DNInkAnnotation = interface(DNMarkupAnnotation)
  ['{1813D872-5E71-3158-8135-78E5EAB834BB}']
  { getters & setters } 

    function get_CapStyle: DNCapStyle;
    procedure set_CapStyle(value: DNCapStyle);
    function get_InkList: DDN.mscorlib.DNIList<TArray<DNPoint>>;
    procedure set_InkList(value: DDN.mscorlib.DNIList<TArray<DNPoint>>);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Style of ink annotation line endings.
    ///</summary>
    property CapStyle: DNCapStyle read get_CapStyle write set_CapStyle;
    ///<summary>
    ///  Gets or sets list of gestures that are independent lines which are represented by Point[] arrays.
    ///</summary>
    property InkList: DDN.mscorlib.DNIList<TArray<DNPoint>> read get_InkList write set_InkList;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNInkAnnotation = class(TDNGenericImport<DNInkAnnotationClass, DNInkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNLineAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{59C093FF-4A63-5A22-8D53-C477A964437D}']
  { constructors } 

    ///<summary>
    ///  Constructor for using with Generator.
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    ///  <param name="start">Starting point. </param>
    ///  <param name="end">Ending point. </param>
    {class} function init(document: DNDocument; start: DNPoint; &end: DNPoint): DNLineAnnotation; overload;
    ///<summary>
    ///  Creates new Line annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="start">A point, specifying the starting coordinate of the line.</param>
    ///  <param name="end">A point, specifying the ending coordinate of the line.</param>
    {class} function init(page: DNPage; rect: DNRectangle; start: DNPoint; &end: DNPoint): DNLineAnnotation; overload;

  end;

  ///<summary>
  ///  Class representing line annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.LineAnnotation')]
  DNLineAnnotation = interface(DNMarkupAnnotation)
  ['{FB4292C0-E200-33B5-B82E-109EDA22EAF9}']
  { getters & setters } 

    function get_Starting: DNPoint;
    procedure set_Starting(value: DNPoint);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_Ending: DNPoint;
    procedure set_Ending(value: DNPoint);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_LeaderLine: Double;
    procedure set_LeaderLine(value: Double);
    function get_LeaderLineExtension: Double;
    procedure set_LeaderLineExtension(value: Double);
    function get_ShowCaption: Boolean;
    procedure set_ShowCaption(value: Boolean);
    function get_LeaderLineOffset: Double;
    procedure set_LeaderLineOffset(value: Double);
    function get_CaptionOffset: DNPoint;
    procedure set_CaptionOffset(value: DNPoint);
    function get_CaptionPosition: DNCaptionPosition;
    procedure set_CaptionPosition(value: DNCaptionPosition);
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Intent: DNLineIntent;
    procedure set_Intent(value: DNLineIntent);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor to annotation processing.
    ///</summary>
    ///  <param name="visitor">Visitor object</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets starting point of line.
    ///</summary>
    property Starting: DNPoint read get_Starting write set_Starting;
    ///<summary>
    ///  Gets or sets line ending style for line starting point.
    ///</summary>
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    ///<summary>
    ///  Gets or sets line ending point.
    ///</summary>
    property Ending: DNPoint read get_Ending write set_Ending;
    ///<summary>
    ///  Gets or sets ending style for end point of line.
    ///</summary>
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    ///<summary>
    ///  Gets or sets interior color of the annotation.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  Gets or sets leader line length.
    ///</summary>
    property LeaderLine: Double read get_LeaderLine write set_LeaderLine;
    ///<summary>
    ///  Gets or sets length of leader line extension.
    ///</summary>
    property LeaderLineExtension: Double read get_LeaderLineExtension write set_LeaderLineExtension;
    ///<summary>
    ///  Gets or sets boolean flag which determinies is contents must be shown as caption.
    ///</summary>
    property ShowCaption: Boolean read get_ShowCaption write set_ShowCaption;
    ///<summary>
    ///  Gets or sets leader line offset.
    ///</summary>
    property LeaderLineOffset: Double read get_LeaderLineOffset write set_LeaderLineOffset;
    ///<summary>
    ///  Gets or sets caption text offset from its normal position.
    ///</summary>
    property CaptionOffset: DNPoint read get_CaptionOffset write set_CaptionOffset;
    ///<summary>
    ///  Gets or sets annotation caption position.
    ///</summary>
    property CaptionPosition: DNCaptionPosition read get_CaptionPosition write set_CaptionPosition;
    ///<summary>
    ///  Measure units specifed for this annotation.
    ///</summary>
    property Measure: DNMeasure read get_Measure write set_Measure;
    ///<summary>
    ///  Gets or sets the intent of the line annotation.
    ///</summary>
    property Intent: DNLineIntent read get_Intent write set_Intent;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLineAnnotation = class(TDNGenericImport<DNLineAnnotationClass, DNLineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolyAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{8BD2DFD8-4C6F-585F-AE68-4FDD400479B8}']
  end;

  ///<summary>
  ///  Abstract base class for poly- annotations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PolyAnnotation')]
  DNPolyAnnotation = interface(DNMarkupAnnotation)
  ['{413BC0C8-92B6-37C3-A3EB-0E05D8050031}']
  { getters & setters } 

    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Measure units specifed for this annotation.
    ///</summary>
    property Measure: DNMeasure read get_Measure write set_Measure;
    ///<summary>
    ///  Gets or sets an array of points representing the horizontal and vertical coordinates of each vertex.
    ///</summary>
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    ///<summary>
    ///  Gets or sets the interior color with which to fill the annotation�s line endings.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  Gets or sets the style of first line ending.
    ///</summary>
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    ///<summary>
    ///  Gets or sets the style of second line ending.
    ///</summary>
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    ///<summary>
    ///  Gets or sets the intent of the polygon or polyline annotation.
    ///</summary>
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolyAnnotation = class(TDNGenericImport<DNPolyAnnotationClass, DNPolyAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolygonAnnotationClass = interface(DNPolyAnnotationClass)
  ['{EAE5A983-B760-584F-948A-BE1FA14C94E7}']
  { constructors } 

    ///<summary>
    ///  Constructor for using with Generator.
    ///</summary>
    ///  <param name="document">Document where annotation will be added.</param>
    ///  <param name="vertices">Array of points.</param>
    {class} function init(document: DNDocument; vertices: TArray<DNPoint>): DNPolygonAnnotation; overload;
    ///<summary>
    ///  Creates new Polygon annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="vertices">An array of polygon vertices points.</param>
    {class} function init(page: DNPage; rect: DNRectangle; vertices: TArray<DNPoint>): DNPolygonAnnotation; overload;

  end;

  ///<summary>
  ///  Class representing polygon annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PolygonAnnotation')]
  DNPolygonAnnotation = interface(DNPolyAnnotation)
  ['{78E47EEC-97FC-335D-A1EF-74AAADAF372C}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object for annotation processing.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Measure units specifed for this annotation.
    ///</summary>
    property Measure: DNMeasure read get_Measure write set_Measure;
    ///<summary>
    ///  Gets or sets an array of points representing the horizontal and vertical coordinates of each vertex.
    ///</summary>
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    ///<summary>
    ///  Gets or sets the interior color with which to fill the annotation�s line endings.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  Gets or sets the style of first line ending.
    ///</summary>
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    ///<summary>
    ///  Gets or sets the style of second line ending.
    ///</summary>
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    ///<summary>
    ///  Gets or sets the intent of the polygon or polyline annotation.
    ///</summary>
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolygonAnnotation = class(TDNGenericImport<DNPolygonAnnotationClass, DNPolygonAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPolylineAnnotationClass = interface(DNPolyAnnotationClass)
  ['{F745A60D-E2B0-5440-9E9B-B4F3CDAF3719}']
  { constructors } 

    ///<summary>
    ///  Creates new Polyline annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="vertices">An array of polygon vertices points.</param>
    {class} function init(page: DNPage; rect: DNRectangle; vertices: TArray<DNPoint>): DNPolylineAnnotation;

  end;

  ///<summary>
  ///  Represents polyline annotation that is similar to polygon, except that the first and last vertex are not implicitly connected.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PolylineAnnotation')]
  DNPolylineAnnotation = interface(DNPolyAnnotation)
  ['{D609291D-E29A-3475-B45E-E0132500E237}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_Measure: DNMeasure;
    procedure set_Measure(value: DNMeasure);
    function get_Vertices: TArray<DNPoint>;
    procedure set_Vertices(value: TArray<DNPoint>);
    function get_InteriorColor: DNColor;
    procedure set_InteriorColor(value: DNColor);
    function get_StartingStyle: DNLineEnding;
    procedure set_StartingStyle(value: DNLineEnding);
    function get_EndingStyle: DNLineEnding;
    procedure set_EndingStyle(value: DNLineEnding);
    function get_Intent: DNPolyIntent;
    procedure set_Intent(value: DNPolyIntent);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Measure units specifed for this annotation.
    ///</summary>
    property Measure: DNMeasure read get_Measure write set_Measure;
    ///<summary>
    ///  Gets or sets an array of points representing the horizontal and vertical coordinates of each vertex.
    ///</summary>
    property Vertices: TArray<DNPoint> read get_Vertices write set_Vertices;
    ///<summary>
    ///  Gets or sets the interior color with which to fill the annotation�s line endings.
    ///</summary>
    property InteriorColor: DNColor read get_InteriorColor write set_InteriorColor;
    ///<summary>
    ///  Gets or sets the style of first line ending.
    ///</summary>
    property StartingStyle: DNLineEnding read get_StartingStyle write set_StartingStyle;
    ///<summary>
    ///  Gets or sets the style of second line ending.
    ///</summary>
    property EndingStyle: DNLineEnding read get_EndingStyle write set_EndingStyle;
    ///<summary>
    ///  Gets or sets the intent of the polygon or polyline annotation.
    ///</summary>
    property Intent: DNPolyIntent read get_Intent write set_Intent;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPolylineAnnotation = class(TDNGenericImport<DNPolylineAnnotationClass, DNPolylineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRedactionAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{2C07719E-130B-5B9C-819F-85089FF8865B}']
  { constructors } 

    ///<summary>
    ///  Constructor for RedactionAnnotation. For using in Generator.
    ///</summary>
    ///  <param name="document">Document where new annotation will be created.</param>
    {class} function init(document: DNDocument): DNRedactionAnnotation; overload;
    ///<summary>
    ///  Constructor for RedactAnnotation.
    ///</summary>
    ///  <param name="page">Page where annotation will be placed.</param>
    ///  <param name="rect">Annotation position on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNRedactionAnnotation; overload;

  end;

  ///<summary>
  ///  Represents Redact annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RedactionAnnotation')]
  DNRedactionAnnotation = interface(DNMarkupAnnotation)
  ['{3F6BD7F2-4BC3-3040-99DB-BA3A71CD6014}']
  { getters & setters } 

    function get_QuadPoint: TArray<DNPoint>;
    procedure set_QuadPoint(value: TArray<DNPoint>);
    function get_DefaultAppearance: string;
    procedure set_DefaultAppearance(value: string);
    function get_FillColor: DNColor;
    procedure set_FillColor(value: DNColor);
    function get_BorderColor: DNColor;
    procedure set_BorderColor(value: DNColor);
    function get_OverlayText: string;
    procedure set_OverlayText(value: string);
    function get_Repeat: Boolean;
    procedure set_Repeat(value: Boolean);
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Flattens annotation i.e. removes annotation and adds its
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Flattens annotation and redacts page contents (i.e. removes text and image under redacted annotation)
    ///</summary>
    procedure Redact;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  An array of 8xN numbers specifying the coordinates of content region that is intended to be removed.
    ///</summary>
    property QuadPoint: TArray<DNPoint> read get_QuadPoint write set_QuadPoint;
    ///<summary>
    ///  Gets or sets the default appearance string to be used in formatting the text.
    ///</summary>
    property DefaultAppearance: string read get_DefaultAppearance write set_DefaultAppearance;
    ///<summary>
    ///  Gets or sets color to fill annotation.
    ///</summary>
    property FillColor: DNColor read get_FillColor write set_FillColor;
    ///<summary>
    ///  Gets or sets color of border which is drawn when redaction is not active.
    ///</summary>
    property BorderColor: DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  Text to print on redact annotation.
    ///</summary>
    property OverlayText: string read get_OverlayText write set_OverlayText;
    ///<summary>
    ///  If true overlay text will be repated on the annotation.
    ///</summary>
    property &Repeat: Boolean read get_Repeat write set_Repeat;
    ///<summary>
    ///  Gets or sets. Alignment of Overlay Text.
    ///</summary>
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRedactionAnnotation = class(TDNGenericImport<DNRedactionAnnotationClass, DNRedactionAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSoundAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{0C3360DD-22D4-540F-BB1C-D00ADE6EC5BA}']
  { constructors } 

    ///<summary>
    ///  Creates new Sound annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="soundFile">A sound file defining the sound to be played when the annotation is activated.</param>
    {class} function init(page: DNPage; rect: DNRectangle; soundFile: string): DNSoundAnnotation; overload;
    ///<summary>
    ///  Creates new Sound annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="soundFile">A sound file defining the sound to be played when the annotation is activated.</param>
    ///  <param name="soundSampleData">A sound sample data contains extra of sound parameters such as sampling rate, bits per sample and so on.</param>
    {class} function init(page: DNPage; rect: DNRectangle; soundFile: string; soundSampleData: DNSoundSampleData): DNSoundAnnotation; overload;

  end;

  ///<summary>
  ///  Represents a sound annotation that contains sound recorded from the computer�s microphone or imported from a file.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SoundAnnotation')]
  DNSoundAnnotation = interface(DNMarkupAnnotation)
  ['{5135EAF6-DE99-3FC2-A7CE-F76823D2AF91}']
  { getters & setters } 

    function get_Icon: DNSoundIcon;
    procedure set_Icon(value: DNSoundIcon);
    function get_SoundData: DNSoundData;
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets an icon to be used in displaying the annotation.
    ///</summary>
    property Icon: DNSoundIcon read get_Icon write set_Icon;
    ///<summary>
    ///  Gets a sound object defining the sound to be played when the annotation is activated.
    ///</summary>
    property SoundData: DNSoundData read get_SoundData;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSoundAnnotation = class(TDNGenericImport<DNSoundAnnotationClass, DNSoundAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNStampAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{953F975F-1996-5D51-AB0D-7A7CB798C7F4}']
  { constructors } 

    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="document">Document where annotation will be created.</param>
    {class} function init(document: DNDocument): DNStampAnnotation; overload;
    ///<summary>
    ///  Creates new Stamp annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNStampAnnotation; overload;

  end;

  ///<summary>
  ///  Represents rubber stamp annotation.
  ///  This type of annotation displays text or graphics intended to look as if they were stamped on the page with a rubber stamp.
  ///</summary>
  ///<example>
  ///  Next code snippet demonstrates how to add 2 stamps into the first pdf document page.
  ///  Input document comes from inFile and changes are saved into the outFile.
  ///  The first stamp has icon NotForPublicRelease and the second comes with image from rubber.jpg.
  ///<code lang="C#">
  ///  Document document = new Document(inFile);
  ///  StampAnnotation stamp1 = new StampAnnotation(StampIcon.NotForPublicRelease);
  ///  stamp1.Rect = new Rectangle(100, 100, 120, 120)
  ///  document.Pages[1].Annotations.Add(stamp1);
  ///  StampAnnotation stamp2 = new StampAnnotation(new FileStream("rubber.jpg", FileMode.Open));
  ///  stamp2.Rect = new Rectangle(200, 200, 220, 220)
  ///  document.Pages[1].Annotations.Add(stamp2);
  ///  document.Save(outFile);
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Annotations.StampAnnotation')]
  DNStampAnnotation = interface(DNMarkupAnnotation)
  ['{D5A0EC51-7DAD-3D2A-988E-AFFE13F7C6F5}']
  { getters & setters } 

    function get_Icon: DNStampIcon;
    procedure set_Icon(value: DNStampIcon);
    function get_AnnotationType: DNAnnotationType;
    function get_Image: DDN.mscorlib.DNStream;
    procedure set_Image(value: DDN.mscorlib.DNStream);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Acepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" />
    ///  visitor when browsing annotation collection.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets icon for rubber stamp.
    ///</summary>
    property Icon: DNStampIcon read get_Icon write set_Icon;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets image of the annotation.
    ///</summary>
    property Image: DDN.mscorlib.DNStream read get_Image write set_Image;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNStampAnnotation = class(TDNGenericImport<DNStampAnnotationClass, DNStampAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{45D971AD-28A4-5F1A-8DAC-874732D2035B}']
  { constructors } 

    ///<summary>
    ///  Constructor for annotation when used in Generator.
    ///</summary>
    ///  <param name="document">Document where text annotation will be created.</param>
    {class} function init(document: DNDocument): DNTextAnnotation; overload;
    ///<summary>
    ///  Creates new Text annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNTextAnnotation; overload;

  end;

  ///<summary>
  ///  Represents a text annotation that is a �sticky note� attached to a point in the PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.TextAnnotation')]
  DNTextAnnotation = interface(DNMarkupAnnotation)
  ['{52187D7B-66A2-39B5-B359-6797D2C61BF8}']
  { getters & setters } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Icon: DNTextIcon;
    procedure set_Icon(value: DNTextIcon);
    function get_State: DNAnnotationState;
    procedure set_State(value: DNAnnotationState);
    function get_AnnotationType: DNAnnotationType;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a flag specifying whether the annotation should initially be displayed open.
    ///</summary>
    property Open: Boolean read get_Open write set_Open;
    ///<summary>
    ///  Gets or sets an icon to be used in displaying the annotation.
    ///</summary>
    property Icon: DNTextIcon read get_Icon write set_Icon;
    ///<summary>
    ///  Gets or sets the state to which the original annotation should be set.
    ///</summary>
    property State: DNAnnotationState read get_State write set_State;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextAnnotation = class(TDNGenericImport<DNTextAnnotationClass, DNTextAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNTextMarkupAnnotationClass = interface(DNMarkupAnnotationClass)
  ['{023F4DBE-58BE-587B-A21B-4E8F6FF5DA2F}']
  end;

  ///<summary>
  ///  Abstract base class for text markup annotations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.TextMarkupAnnotation')]
  DNTextMarkupAnnotation = interface(DNMarkupAnnotation)
  ['{366868D8-303B-3670-B90C-B7073AD4DBCD}']
  { getters & setters } 

    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_AnnotationType: DNAnnotationType;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Gets text under markup annotation as string.
    ///</summary>
    ///<returns>String containing text that is under markup annotation.</returns>
    function GetMarkedText: string;
    ///<summary>
    ///  Gets text under markup annotation as <see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  .
    ///</summary>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  containing <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  s that is under markup annotation.</returns>
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Accept(visitor: DNAnnotationSelector);
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
    ///</summary>
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    ///<summary>
    ///  Gets or sets a text that shall be displayed in title bar of annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a rich text string to be displayed in the pop-up window when the annotation is opened.
    ///</summary>
    property RichText: string read get_RichText write set_RichText;
    ///<summary>
    ///  Gets date and time when annotation was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    ///<summary>
    ///  Gets text representing desciption of the object.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Pop-up annotation for entering or editing the text associated with this annotation.
    ///</summary>
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    ///<summary>
    ///  Gets or sets the constant opacity value to be used in painting the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  A reference to the annotation that this annotation is "in reply to".
    ///  Both annotations must be on the same page of the document.
    ///</summary>
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    ///<summary>
    ///  A string specifying the relationship (the "reply type") between this annotation
    ///  and one specified by InReplyTo.
    ///</summary>
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextMarkupAnnotation = class(TDNGenericImport<DNTextMarkupAnnotationClass, DNTextMarkupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNHighlightAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{9A35BED5-852A-5140-ABE6-0C37CB3007C9}']
  { constructors } 

    ///<summary>
    ///  Creates new Highlight annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNHighlightAnnotation;

  end;

  ///<summary>
  ///  Represents a highlight annotation that highlights a range of text in the document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.HighlightAnnotation')]
  DNHighlightAnnotation = interface(DNTextMarkupAnnotation)
  ['{42EE240E-0652-3692-9D41-BD506681D580}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Gets text under markup annotation as string.
    ///</summary>
    ///<returns>String containing text that is under markup annotation.</returns>
    function GetMarkedText: string;
    ///<summary>
    ///  Gets text under markup annotation as <see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  .
    ///</summary>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  containing <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  s that is under markup annotation.</returns>
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
    ///</summary>
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHighlightAnnotation = class(TDNGenericImport<DNHighlightAnnotationClass, DNHighlightAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNSquigglyAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{AC284DF8-F007-588D-A427-13471F31B9C0}']
  { constructors } 

    ///<summary>
    ///  Creates new Squiggly annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNSquigglyAnnotation;

  end;

  ///<summary>
  ///  Represents the squiggly annotation that appears as a jagged underline in the text of a document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.SquigglyAnnotation')]
  DNSquigglyAnnotation = interface(DNTextMarkupAnnotation)
  ['{A9B00E99-51A0-3A3E-9152-EB0A109FDDE6}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Gets text under markup annotation as string.
    ///</summary>
    ///<returns>String containing text that is under markup annotation.</returns>
    function GetMarkedText: string;
    ///<summary>
    ///  Gets text under markup annotation as <see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  .
    ///</summary>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  containing <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  s that is under markup annotation.</returns>
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
    ///</summary>
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSquigglyAnnotation = class(TDNGenericImport<DNSquigglyAnnotationClass, DNSquigglyAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNStrikeOutAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{6DD94AB6-6D86-562C-ABCF-62420629491B}']
  { constructors } 

    ///<summary>
    ///  Creates new StrikeOut annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNStrikeOutAnnotation;

  end;

  ///<summary>
  ///  Represents a strikeout annotation that appears as a strikeout in the text of the document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.StrikeOutAnnotation')]
  DNStrikeOutAnnotation = interface(DNTextMarkupAnnotation)
  ['{95E794B5-1602-3E2A-A52D-F6F0B00EBAAA}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Gets text under markup annotation as string.
    ///</summary>
    ///<returns>String containing text that is under markup annotation.</returns>
    function GetMarkedText: string;
    ///<summary>
    ///  Gets text under markup annotation as <see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  .
    ///</summary>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  containing <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  s that is under markup annotation.</returns>
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
    ///</summary>
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNStrikeOutAnnotation = class(TDNGenericImport<DNStrikeOutAnnotationClass, DNStrikeOutAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNUnderlineAnnotationClass = interface(DNTextMarkupAnnotationClass)
  ['{74E92D58-FF3E-5BE2-9A6F-42ED58B0B1B5}']
  { constructors } 

    ///<summary>
    ///  Creates new Underline annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNUnderlineAnnotation;

  end;

  ///<summary>
  ///  Represents an underline annotation that appears as an underline in the text of the document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.UnderlineAnnotation')]
  DNUnderlineAnnotation = interface(DNTextMarkupAnnotation)
  ['{197E31C5-50F2-3139-9443-0CEAA68D7383}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_QuadPoints: TArray<DNPoint>;
    procedure set_QuadPoints(value: TArray<DNPoint>);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_RichText: string;
    procedure set_RichText(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Popup: DNPopupAnnotation;
    procedure set_Popup(value: DNPopupAnnotation);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_InReplyTo: DNAnnotation;
    procedure set_InReplyTo(value: DNAnnotation);
    function get_ReplyType: DNReplyType;
    procedure set_ReplyType(value: DNReplyType);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Gets text under markup annotation as string.
    ///</summary>
    ///<returns>String containing text that is under markup annotation.</returns>
    function GetMarkedText: string;
    ///<summary>
    ///  Gets text under markup annotation as <see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  .
    ///</summary>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextFragmentCollection" />
    ///  containing <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  s that is under markup annotation.</returns>
    function GetMarkedTextFragments: DNTextFragmentCollection;
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets an array of points specifying the coordinates of n quadrilaterals. Each quadrilateral encompasses a word or group of contiguous words in the text underlying the annotation.
    ///</summary>
    property QuadPoints: TArray<DNPoint> read get_QuadPoints write set_QuadPoints;
    property Title: string read get_Title write set_Title;
    property RichText: string read get_RichText write set_RichText;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property Subject: string read get_Subject write set_Subject;
    property Popup: DNPopupAnnotation read get_Popup write set_Popup;
    property Opacity: Double read get_Opacity write set_Opacity;
    property InReplyTo: DNAnnotation read get_InReplyTo write set_InReplyTo;
    property ReplyType: DNReplyType read get_ReplyType write set_ReplyType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Actions: DNPdfActionCollection read get_Actions;
    property Height: Double read get_Height write set_Height;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNUnderlineAnnotation = class(TDNGenericImport<DNUnderlineAnnotationClass, DNUnderlineAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNMovieAnnotationClass = interface(DNAnnotationClass)
  ['{CE02F63C-A23F-51D6-AB67-F3CFE510901B}']
  { constructors } 

    ///<summary>
    ///  Constructor for using with Generator.
    ///</summary>
    ///  <param name="document">Document where movie annotation will be created.</param>
    ///  <param name="movieFile">Name of movie file. </param>
    {class} function init(document: DNDocument; movieFile: string): DNMovieAnnotation; overload;
    ///<summary>
    ///  Creates new Sound annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="movieFile">A movie file to be played when the annotation is activated.</param>
    {class} function init(page: DNPage; rect: DNRectangle; movieFile: string): DNMovieAnnotation; overload;

  end;

  ///<summary>
  ///  Represents a movie annotation that contains animated graphics and sound to be presented on the computer screen and through the speakers. When the annotation is activated, the movie is played.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.MovieAnnotation')]
  DNMovieAnnotation = interface(DNAnnotation)
  ['{1B50D90F-5158-3BD4-9221-8FF1D7EE2A96}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_File: DNFileSpecification;
    procedure set_File(value: DNFileSpecification);
    function get_Poster: Boolean;
    procedure set_Poster(value: Boolean);
    function get_Aspect: DNPoint;
    procedure set_Aspect(value: DNPoint);
    function get_Rotate: Int32;
    procedure set_Rotate(value: Int32);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the title of the movie annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a file specification identifying a self-describing movie file.
    ///</summary>
    property &File: DNFileSpecification read get_File write set_File;
    ///<summary>
    ///  Gets or sets a flag or stream specifying whether and how a poster image representing the movie shall be displayed. If true, the poster image shall be retrieved from the movie file; if it is false, no poster shall be displayed.
    ///</summary>
    property Poster: Boolean read get_Poster write set_Poster;
    ///<summary>
    ///  Gets or sets the width and height of the movie�s bounding box, in pixels.
    ///</summary>
    property Aspect: DNPoint read get_Aspect write set_Aspect;
    ///<summary>
    ///  Gets or sets the number of degrees by which the movie shall be rotated clockwise relative to the page. The value shall be a multiple of 90.
    ///</summary>
    property Rotate: Int32 read get_Rotate write set_Rotate;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNMovieAnnotation = class(TDNGenericImport<DNMovieAnnotationClass, DNMovieAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPDF3DAnnotationClass = interface(DNAnnotationClass)
  ['{9A4B3703-DB4B-58E2-A1A6-A693C757293E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DAnnotation" />
    ///  class.
    ///</summary>
    ///  <param name="page">The page.</param>
    ///  <param name="rect">The rectangle.</param>
    ///  <param name="pdf3DArtwork">The 3D Artwork.</param>
    {class} function init(page: DNPage; rect: DNRectangle; pdf3DArtwork: DNPDF3DArtwork): DNPDF3DAnnotation; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Annotations.PDF3DAnnotation" />
    ///  class.
    ///</summary>
    ///  <param name="page">The page.</param>
    ///  <param name="rect">The rectangle.</param>
    ///  <param name="pdf3DArtwork">The 3D Artwork.</param>
    ///  <param name="activation">The activation mode.</param>
    ///<exception cref="T:System.Exception">3D Stream is already added to current 3D Artwork</exception>
    {class} function init(page: DNPage; rect: DNRectangle; pdf3DArtwork: DNPDF3DArtwork; activation: DNPDF3DActivation): DNPDF3DAnnotation; overload;

  end;

  ///<summary>
  ///  Class PDF3DAnnotation. This class cannot be inherited.
  ///</summary>
  ///<seealso cref="T:Aspose.Pdf.Annotations.Annotation" />
  [DNTypeName('Aspose.Pdf.Annotations.PDF3DAnnotation')]
  DNPDF3DAnnotation = interface(DNAnnotation)
  ['{DC780085-F5F5-3C08-A935-5707864641D0}']
  { getters & setters } 

    function get_Pdf3DArtwork: DNPDF3DArtwork;
    function get_LightingScheme: DNPDF3DLightingScheme;
    function get_Content: DNPDF3DContent;
    procedure set_Content(value: DNPDF3DContent);
    function get_RenderMode: DNPDF3DRenderMode;
    function get_ViewArray: DNPDF3DViewArray;
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Sets the index of the default view.
    ///</summary>
    ///  <param name="index">The default view index.</param>
    procedure SetDefaultViewIndex(index: Int32);
    ///<summary>
    ///  Accepts visitor for annotation processing.
    ///</summary>
    ///  <param name="visitor">AnnotationSelector object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Sets the image preview.
    ///</summary>
    ///  <param name="filename">The image preview filename.</param>
    procedure SetImagePreview(filename: string); overload;
    ///<summary>
    ///  Sets the image preview.
    ///</summary>
    ///  <param name="image">The image stream.</param>
    procedure SetImagePreview(image: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Clears the image preview.
    ///</summary>
    procedure ClearImagePreview;
    ///<summary>
    ///  Gets the image preview.
    ///</summary>
    ///<returns>Image preview as stream.</returns>
    function GetImagePreview: DDN.mscorlib.DNStream;
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the 3D Artwork.
    ///</summary>
    ///<value>The PDF3 d artwork.</value>
    property Pdf3DArtwork: DNPDF3DArtwork read get_Pdf3DArtwork;
    ///<summary>
    ///  Gets the lighting scheme.
    ///</summary>
    ///<value>The lighting scheme.</value>
    property LightingScheme: DNPDF3DLightingScheme read get_LightingScheme;
    ///<summary>
    ///  Gets or sets the content.
    ///</summary>
    ///<value>The content.</value>
    property Content: DNPDF3DContent read get_Content write set_Content;
    ///<summary>
    ///  Gets the render mode.
    ///</summary>
    ///<value>The render mode.</value>
    property RenderMode: DNPDF3DRenderMode read get_RenderMode;
    ///<summary>
    ///  Gets the view array.
    ///</summary>
    ///<value>The view array.</value>
    property ViewArray: DNPDF3DViewArray read get_ViewArray;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    ///<value>The type of the annotation.</value>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPDF3DAnnotation = class(TDNGenericImport<DNPDF3DAnnotationClass, DNPDF3DAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNPopupAnnotationClass = interface(DNAnnotationClass)
  ['{FD11DBE0-8CC6-58A0-859F-0635C69C9D03}']
  { constructors } 

    ///<summary>
    ///  Constructor. for using in Generator.
    ///</summary>
    ///  <param name="document">Document where new popup annotation will be created.</param>
    {class} function init(document: DNDocument): DNPopupAnnotation; overload;
    ///<summary>
    ///  Creates new Popup annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNPopupAnnotation; overload;

  end;

  ///<summary>
  ///  Represents the pop-up annotation that displays text in a pop-up window for entry and editing.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.PopupAnnotation')]
  DNPopupAnnotation = interface(DNAnnotation)
  ['{A1C585C8-1A6B-3C56-96FC-A4827A9DA782}']
  { getters & setters } 

    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Parent: DNAnnotation;
    procedure set_Parent(value: DNAnnotation);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a flag specifying whether the pop-up annotation should initially be displayed open.
    ///</summary>
    property Open: Boolean read get_Open write set_Open;
    ///<summary>
    ///  Gets or sets the parent annotation with which this pop-up annotation shall be associated.
    ///  If this entry is present, the parent annotation�s Contents, M, C, and T entries shall override those of the pop-up annotation itself.
    ///</summary>
    property Parent: DNAnnotation read get_Parent write set_Parent;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPopupAnnotation = class(TDNGenericImport<DNPopupAnnotationClass, DNPopupAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNRichMediaAnnotationClass = interface(DNAnnotationClass)
  ['{E6D1C60F-5607-537E-9DF5-73D185153517}']
  { constructors } 

    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="page">The page with which the annotation will be associated.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNRichMediaAnnotation;

  end;

  ///<summary>
  ///  Class describes RichMediaAnnotation which allows embed video/audio data into PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.RichMediaAnnotation')]
  DNRichMediaAnnotation = interface(DNAnnotation)
  ['{C64F8A13-45D2-3997-BABC-DCCDC974D34A}']
  { getters & setters } 

    function get_AnnotationType: DNAnnotationType;
    function get_CustomPlayer: DDN.mscorlib.DNStream;
    procedure set_CustomPlayer(value: DDN.mscorlib.DNStream);
    function get_CustomFlashVariables: string;
    procedure set_CustomFlashVariables(value: string);
    function get_Content: DDN.mscorlib.DNStream;
    function get_Type: DNRichMediaAnnotation_ContentType;
    procedure set_Type(value: DNRichMediaAnnotation_ContentType);
    function get_ActivateOn: DNRichMediaAnnotation_ActivationEvent;
    procedure set_ActivateOn(value: DNRichMediaAnnotation_ActivationEvent);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor for this annotation.
    ///</summary>
    ///  <param name="visitor">Visitor instance.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Add custom named data (for example required for flash script).
    ///</summary>
    ///  <param name="name">Name of the data.</param>
    ///  <param name="data">Data.</param>
    procedure AddCustomData(name: string; data: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Set content stream.
    ///</summary>
    ///  <param name="fileName">Name of the stream.</param>
    ///  <param name="audio">Data stream.</param>
    procedure SetContent(fileName: string; audio: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Set poster of the annotation.
    ///</summary>
    ///  <param name="imageStream">Stream containing poster image.</param>
    procedure SetPoster(imageStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Updates data with specified parameters.
    ///</summary>
    procedure Update;
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Sets or gets custom flash player to play video/audio data.
    ///</summary>
    property CustomPlayer: DDN.mscorlib.DNStream read get_CustomPlayer write set_CustomPlayer;
    ///<summary>
    ///  Sets or gets flash variables which passed to player.
    ///</summary>
    property CustomFlashVariables: string read get_CustomFlashVariables write set_CustomFlashVariables;
    ///<summary>
    ///  Data of the Rich Media content.
    ///</summary>
    property Content: DDN.mscorlib.DNStream read get_Content;
    ///<summary>
    ///  Gets or sets type of content. Possible values: Audio, Video.
    ///</summary>
    property &Type: DNRichMediaAnnotation_ContentType read get_Type write set_Type;
    ///<summary>
    ///  Event which activates application.
    ///</summary>
    property ActivateOn: DNRichMediaAnnotation_ActivationEvent read get_ActivateOn write set_ActivateOn;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRichMediaAnnotation = class(TDNGenericImport<DNRichMediaAnnotationClass, DNRichMediaAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNScreenAnnotationClass = interface(DNAnnotationClass)
  ['{8FA8E7C2-55FA-5169-B547-A70760573EA7}']
  { constructors } 

    ///<summary>
    ///  Creates new Screen annotation on the specified page.
    ///</summary>
    ///  <param name="page">The document's page where annotation should be created.</param>
    ///  <param name="rect">The annotation rectangle, defining the location of the annotation on the page.</param>
    ///  <param name="mediaFile">The path to multimedia file.</param>
    {class} function init(page: DNPage; rect: DNRectangle; mediaFile: string): DNScreenAnnotation;

  end;

  ///<summary>
  ///  A screen annotation that specifies a region of a page upon which media clips may be played.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.ScreenAnnotation')]
  DNScreenAnnotation = interface(DNAnnotation)
  ['{A8F1DF08-C487-337A-A6AB-1962C683B953}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Action: DNPdfAction;
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process the annotation.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the title of the screen annotation.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets an action to be performed when the annotation is activated.
    ///</summary>
    property Action: DNPdfAction read get_Action;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNScreenAnnotation = class(TDNGenericImport<DNScreenAnnotationClass, DNScreenAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNWatermarkAnnotationClass = interface(DNAnnotationClass)
  ['{51991EF8-AC83-5150-80B1-284FED95E5AD}']
  { constructors } 

    ///<summary>
    ///  Constuctore for Watermark annotation class.
    ///</summary>
    ///  <param name="page">Page where annotation should be placed.</param>
    ///  <param name="rect">Position of the annotation.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNWatermarkAnnotation;

  end;

  ///<summary>
  ///  Class representing annotation object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.WatermarkAnnotation')]
  DNWatermarkAnnotation = interface(DNAnnotation)
  ['{C2166FD4-8C85-36DD-9BE1-DB107BA2DA18}']
  { getters & setters } 

    function get_FixedPrint: DNFixedPrint;
    function get_AnnotationType: DNAnnotationType;
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Actions: DNPdfActionCollection;
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Set text of the annotation.
    ///</summary>
    ///  <param name="text"></param>
    procedure SetText(text: DNFormattedText);
    ///<summary>
    ///  Set text of the annotation.
    ///</summary>
    ///  <param name="text"></param>
    ///  <param name="textState"></param>
    procedure SetTextAndState(text: TArray<string>; textState: DNTextState);
    ///<summary>
    ///  Accepts visitor for annotation processing.
    ///</summary>
    ///  <param name="visitor">AnnotationSelector object.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Fuxed print object of Watermark annotation.
    ///</summary>
    property FixedPrint: DNFixedPrint read get_FixedPrint;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Gets or sets opacity of the annotation.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets list of annotatation actions.
    ///</summary>
    property Actions: DNPdfActionCollection read get_Actions;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNWatermarkAnnotation = class(TDNGenericImport<DNWatermarkAnnotationClass, DNWatermarkAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Annotations----------------
  DNWidgetAnnotationClass = interface(DNAnnotationClass)
  ['{23417580-9DEB-53E5-958C-70141FF6E05A}']
  { constructors } 

    ///<summary>
    ///  Create annotation (used for Generator)
    ///</summary>
    ///  <param name="doc">Document where annotation will be created.</param>
    {class} function init(doc: DNDocument): DNWidgetAnnotation;

  end;

  ///<summary>
  ///  Class representing widget annotation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Annotations.WidgetAnnotation')]
  DNWidgetAnnotation = interface(DNAnnotation)
  ['{71BB59A5-B87C-3483-91FE-C1D194216B2B}']
  { getters & setters } 

    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_PageIndex: Int32;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor.
    ///</summary>
    ///  <param name="visitor">Visitor to be accepted.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    ///<summary>
    ///  Returns rectangle of annotation taking into consideration page rotation.
    ///</summary>
    ///  <param name="considerRotation">If true, page rotation is takein into consideration.</param>
    ///<returns></returns>
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Places annotation contents directly on the page,
    ///  annotation object will be removed.
    ///</summary>
    procedure Flatten;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  An action which shall be performed when the annotation is activated.
    ///</summary>
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    ///<summary>
    ///  Gets the annotation actions.
    ///</summary>
    property Actions: DNAnnotationActionCollection read get_Actions;
    ///<summary>
    ///  Annotation highlighting mode.
    ///</summary>
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    ///<summary>
    ///  Gets annotation parent.
    ///</summary>
    property Parent: DNField read get_Parent;
    ///<summary>
    ///  Gets or sets default appearance of the field.
    ///</summary>
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    ///<summary>
    ///  Gets or sets read only status of the field.
    ///</summary>
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    ///<summary>
    ///  Gets or sets required status of the field.
    ///</summary>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  Gets or sets exportable flag of the field.
    ///</summary>
    property Exportable: Boolean read get_Exportable write set_Exportable;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    ///<summary>
    ///  Flags of the annotation.
    ///</summary>
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    ///<summary>
    ///  Gets or sets width of the annotation.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets height of the annotation.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets annotation rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Gets or sets annotation text.
    ///</summary>
    property Contents: string read get_Contents write set_Contents;
    ///<summary>
    ///  Gets or sets annotation name on the page.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets date and time when annotation was recently modified.
    ///</summary>
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    ///<summary>
    ///  Gets or sets annotation color.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets annotation border characteristics. <see cref="P:Aspose.Pdf.Annotations.Annotation.Border" />
    ///</summary>
    property Border: DNBorder read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets annotation characteristics.
    ///</summary>
    property Characteristics: DNCharacteristics read get_Characteristics;
    ///<summary>
    ///  Gets appearance dictionary of annotation.
    ///</summary>
    property States: DNAppearanceDictionary read get_States;
    ///<summary>
    ///  Annotation alignment. This property is obsolete. Use HorizontalAligment instead.
    ///</summary>
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets text alignment for annotation.
    ///</summary>
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    ///<summary>
    ///  Gets full qualified name of the annotation.
    ///</summary>
    ///<returns></returns>
    property FullName: string read get_FullName;
    ///<summary>
    ///  Gets appearance dictionary of the annotation.
    ///</summary>
    property Appearance: DNAppearanceDictionary read get_Appearance;
    ///<summary>
    ///  Gets index of page which contains annotation.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNWidgetAnnotation = class(TDNGenericImport<DNWidgetAnnotationClass, DNWidgetAnnotation>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNFieldClass = interface(DNWidgetAnnotationClass)
  ['{234CBF36-AFA0-57D6-A836-309E7F0066AF}']
  { static getter & setter } 

    {class} function get_FitIntoRectangle: Boolean;
    {class} procedure set_FitIntoRectangle(value: Boolean);
    {class} function get_MaxFontSize: Double;
    {class} procedure set_MaxFontSize(value: Double);
    {class} function get_MinFontSize: Double;
    {class} procedure set_MinFontSize(value: Double);

  { constructors } 

    ///<summary>
    ///  Creates field for use in Generator.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    {class} function init(doc: DNDocument): DNField;

  { static propertys } 

    ///<summary>
    ///  If true then font size will reduced to fit text to specified rectangle.
    ///</summary>
    {class} property FitIntoRectangle: Boolean read get_FitIntoRectangle write set_FitIntoRectangle;
    ///<summary>
    ///  Maximail font size which can be used for field contents. -1 to don't check size.
    ///</summary>
    {class} property MaxFontSize: Double read get_MaxFontSize write set_MaxFontSize;
    ///<summary>
    ///  Minimal font size which can be used for field contents. -1 to don't check size.
    ///</summary>
    {class} property MinFontSize: Double read get_MinFontSize write set_MinFontSize;
  end;

  ///<summary>
  ///  Base class for acro form fields.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Field')]
  DNField = interface(DNWidgetAnnotation)
  ['{289468F4-6382-3D1C-B8DF-2F003FC51C6B}']
  { getters & setters } 

    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    ///<summary>
    ///  Accepts visitor.
    ///</summary>
    ///  <param name="visitor">Visitor to be accepted.</param>
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    ///<summary>
    ///  An action which shall be performed when the annotation is activated.
    ///</summary>
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    ///<summary>
    ///  Gets the annotation actions.
    ///</summary>
    property Actions: DNAnnotationActionCollection read get_Actions;
    ///<summary>
    ///  Annotation highlighting mode.
    ///</summary>
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    ///<summary>
    ///  Gets annotation parent.
    ///</summary>
    property Parent: DNField read get_Parent;
    ///<summary>
    ///  Gets or sets default appearance of the field.
    ///</summary>
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    ///<summary>
    ///  Gets or sets read only status of the field.
    ///</summary>
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    ///<summary>
    ///  Gets or sets required status of the field.
    ///</summary>
    property Required: Boolean read get_Required write set_Required;
    ///<summary>
    ///  Gets or sets exportable flag of the field.
    ///</summary>
    property Exportable: Boolean read get_Exportable write set_Exportable;
    ///<summary>
    ///  Gets type of annotation.
    ///</summary>
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNField = class(TDNGenericImport<DNFieldClass, DNField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNButtonFieldClass = interface(DNFieldClass)
  ['{53836264-EEA6-5610-9528-8D348EC2E977}']
  { constructors } 

    ///<summary>
    ///  Button field constructor for Generator.
    ///</summary>
    {class} function init: DNButtonField; overload;
    ///<summary>
    ///  ButtonField constructor.
    ///</summary>
    ///  <param name="page">Page where button will be placed.</param>
    ///  <param name="rect">Rectangle where button is placed on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNButtonField; overload;
    ///<summary>
    ///  ButtonField constructore.
    ///</summary>
    ///  <param name="doc">Docuemtn where new field will be created.</param>
    ///  <param name="rect">Rectangle hwere button is placed on the page. </param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNButtonField; overload;

  end;

  ///<summary>
  ///  Class represnets push button field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ButtonField')]
  DNButtonField = interface(DNField)
  ['{A3890F24-E2A8-363A-9226-3AD7C58C18D4}']
  { getters & setters } 

    function get_NormalCaption: string;
    procedure set_NormalCaption(value: string);
    function get_RolloverCaption: string;
    procedure set_RolloverCaption(value: string);
    function get_AlternateCaption: string;
    procedure set_AlternateCaption(value: string);
    function get_NormalIcon: DNXForm;
    procedure set_NormalIcon(value: DNXForm);
    function get_RolloverIcon: DNXForm;
    procedure set_RolloverIcon(value: DNXForm);
    function get_AlternateIcon: DNXForm;
    procedure set_AlternateIcon(value: DNXForm);
    function get_IconFit: DNIconFit;
    function get_ICPosition: DNIconCaptionPosition;
    procedure set_ICPosition(value: DNIconCaptionPosition);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image ot add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets normal caption.
    ///</summary>
    property NormalCaption: string read get_NormalCaption write set_NormalCaption;
    ///<summary>
    ///  Gets or sets rollover caption of button which shall be displayed when the user rolls the cursor
    ///  into its active area without pressing the mouse button.
    ///</summary>
    property RolloverCaption: string read get_RolloverCaption write set_RolloverCaption;
    ///<summary>
    ///  Gets or sets alternate caption of the button which shall be displayed
    ///  when the mouse button is pressed within its active area.
    ///</summary>
    property AlternateCaption: string read get_AlternateCaption write set_AlternateCaption;
    ///<summary>
    ///  Gets or sets normal icon of the button which shall be displayed when it is not interacting with the user.
    ///</summary>
    property NormalIcon: DNXForm read get_NormalIcon write set_NormalIcon;
    ///<summary>
    ///  Gets or sets rollover icon of the button which shall be displayed when the user
    ///  rolls the cursor into its active area without pressing the mouse button.
    ///</summary>
    property RolloverIcon: DNXForm read get_RolloverIcon write set_RolloverIcon;
    ///<summary>
    ///  Gets or sets alternate icon which shall be displayed when the mouse button is pressed within its active area.
    ///</summary>
    property AlternateIcon: DNXForm read get_AlternateIcon write set_AlternateIcon;
    ///<summary>
    ///  Gets icon fit object specifying how the widget annotation's icon shall be displayed within its annotation rectangle.
    ///</summary>
    property IconFit: DNIconFit read get_IconFit;
    ///<summary>
    ///  Gets or sets icon caption position.
    ///</summary>
    property ICPosition: DNIconCaptionPosition read get_ICPosition write set_ICPosition;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNButtonField = class(TDNGenericImport<DNButtonFieldClass, DNButtonField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNCheckboxFieldClass = interface(DNFieldClass)
  ['{588984CB-5D86-55CF-9589-43910C6D9463}']
  { constructors } 

    ///<summary>
    ///  Constructor for CheckboxField class.
    ///</summary>
    ///  <param name="page">Page where check box will be placed.</param>
    ///  <param name="rect">Position and size of the check box.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNCheckboxField; overload;
    ///<summary>
    ///  Constructor for CheckboxField class.
    ///</summary>
    ///  <param name="doc">Document where will be new field created.</param>
    ///  <param name="rect">Rectangle where new field will be created.</param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNCheckboxField; overload;
    ///<summary>
    ///  Create instance of CheckboxField.
    ///</summary>
    {class} function init: DNCheckboxField; overload;
    ///<summary>
    ///  Constructor to use with Generator.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    {class} function init(doc: DNDocument): DNCheckboxField; overload;

  end;

  ///<summary>
  ///  Class representing checkbox field
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.CheckboxField')]
  DNCheckboxField = interface(DNField)
  ['{41015024-5534-346B-93F9-16A6FB6FCB30}']
  { getters & setters } 

    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ExportValue: string;
    procedure set_ExportValue(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clone the checkbox.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets style of check box.
    ///</summary>
    property Style: DNBoxStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets current annotation appearance state.
    ///</summary>
    property ActiveState: string read get_ActiveState write set_ActiveState;
    ///<summary>
    ///  Gets or sets state of check box.
    ///</summary>
    property Checked: Boolean read get_Checked write set_Checked;
    ///<summary>
    ///  Gets or sets value of check box field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets export value of CheckBox field.
    ///</summary>
    property ExportValue: string read get_ExportValue write set_ExportValue;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNCheckboxField = class(TDNGenericImport<DNCheckboxFieldClass, DNCheckboxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNChoiceFieldClass = interface(DNFieldClass)
  ['{5276F763-CB34-5624-94C0-1A7F97E3B565}']
  { constructors } 

    ///<summary>
    ///  Constructor for ChoiceField.
    ///</summary>
    ///  <param name="page">Page where field is situated.</param>
    ///  <param name="rect">Rectangle of the field.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNChoiceField; overload;
    ///<summary>
    ///  Creates choice field (for Generator)
    ///</summary>
    ///  <param name="doc">Document where choice field will be created.</param>
    {class} function init(doc: DNDocument): DNChoiceField; overload;
    ///<summary>
    ///  Constructor for ChoiceField.
    ///</summary>
    ///  <param name="doc">Document where field will be created. </param>
    ///  <param name="rect">Rectangle of the field. </param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNChoiceField; overload;

  end;

  ///<summary>
  ///  Represents base class for choice fields.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ChoiceField')]
  DNChoiceField = interface(DNField)
  ['{335D3158-DCDC-37BC-88C8-0AF399B11BDE}']
  { getters & setters } 

    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds new option with specified name.
    ///</summary>
    ///  <param name="optionName">Name of the new option.</param>
    procedure AddOption(optionName: string); overload;
    ///<summary>
    ///  Adds new option with specified export value and name.
    ///</summary>
    ///  <param name="export">Export value.</param>
    ///  <param name="name">Name of the new option.</param>
    procedure AddOption(&export: string; name: string); overload;
    ///<summary>
    ///  Deletes option by its name.
    ///</summary>
    ///  <param name="optionName">Name of the option which must be deleted.</param>
    procedure DeleteOption(optionName: string);
    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets commit on selection change flag.
    ///</summary>
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    ///<summary>
    ///  Gets or sets multiselection flag.
    ///</summary>
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    ///<summary>
    ///  Gets or sets index of selected option. This property allows to change selection.
    ///</summary>
    property Selected: Int32 read get_Selected write set_Selected;
    ///<summary>
    ///  Gets or sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.
    ///</summary>
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    ///<summary>
    ///  Gets collection of choice options.
    ///</summary>
    property Options: DNOptionCollection read get_Options;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNChoiceField = class(TDNGenericImport<DNChoiceFieldClass, DNChoiceField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNComboBoxFieldClass = interface(DNChoiceFieldClass)
  ['{A824B83D-6C35-5F89-B73E-DCC9AF8F4AEF}']
  { constructors } 

    ///<summary>
    ///  Constructor for ComboBoxField to be used in Generator.
    ///</summary>
    {class} function init: DNComboBoxField; overload;
    ///<summary>
    ///  Creates CombBox field to work with Generator.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    {class} function init(doc: DNDocument): DNComboBoxField; overload;
    ///<summary>
    ///  Constructor for Combobox Field.
    ///</summary>
    ///  <param name="page">Page where field will be placed. </param>
    ///  <param name="rect">Rectangle which defines size and position of the field on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNComboBoxField; overload;
    ///<summary>
    ///  Constructor for Combobox field.
    ///</summary>
    ///  <param name="doc">Document where field should be created.</param>
    ///  <param name="rect">Rectangle which defines size and position of the field. </param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNComboBoxField; overload;

  end;

  ///<summary>
  ///  Class representing Combobox field of the form.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ComboBoxField')]
  DNComboBoxField = interface(DNChoiceField)
  ['{E4EEE2CB-BF7F-3573-AFDC-33E9DB9AA3F1}']
  { getters & setters } 

    function get_Editable: Boolean;
    procedure set_Editable(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds new option with specified name.
    ///</summary>
    ///  <param name="optionName">Name of the new option.</param>
    procedure AddOption(optionName: string); overload;
    ///<summary>
    ///  Adds new option with specified export value and name.
    ///</summary>
    ///  <param name="export">Export value.</param>
    ///  <param name="name">Name of the new option.</param>
    procedure AddOption(&export: string; name: string); overload;
    ///<summary>
    ///  Deletes option by its name.
    ///</summary>
    ///  <param name="optionName">Name of the option which must be deleted.</param>
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets editable status of the field.
    ///</summary>
    property Editable: Boolean read get_Editable write set_Editable;
    ///<summary>
    ///  Gets or sets spellchaeck activiity status.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets commit on selection change flag.
    ///</summary>
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    ///<summary>
    ///  Gets or sets multiselection flag.
    ///</summary>
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    ///<summary>
    ///  Gets or sets index of selected option. This property allows to change selection.
    ///</summary>
    property Selected: Int32 read get_Selected write set_Selected;
    ///<summary>
    ///  Gets or sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.
    ///</summary>
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    ///<summary>
    ///  Gets collection of choice options.
    ///</summary>
    property Options: DNOptionCollection read get_Options;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNComboBoxField = class(TDNGenericImport<DNComboBoxFieldClass, DNComboBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNListBoxFieldClass = interface(DNChoiceFieldClass)
  ['{B246C696-42EB-5D0B-8012-4E81A03808FF}']
  { static getter & setter } 

    procedure set_Selected(value: Int32);
    procedure set_SelectedItems(value: TArray<Int32>);

  { constructors } 

    ///<summary>
    ///  Constructor for ListBoxField to be used in Generator.
    ///</summary>
    {class} function init: DNListBoxField; overload;
    ///<summary>
    ///  Creates new ListBox field.
    ///</summary>
    ///  <param name="page">Page where list box will be placed.</param>
    ///  <param name="rect">Rectangle where list box will be placed on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNListBoxField; overload;
    ///<summary>
    ///  Constructor for ListBox field.
    ///</summary>
    ///  <param name="doc">Document to which this field will belong.</param>
    ///  <param name="rect">Rectangle where list box will be placed. </param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNListBoxField; overload;

  { static propertys } 

    ///<summary>
    ///  Gets or sets index of the selected item. Items are numbered from 1.
    ///</summary>
    {class} property Selected: Int32 write set_Selected;
    ///<summary>
    ///  Gets or sets array of the selected items in the multiselect list. For single-select list returns array with single item.
    ///</summary>
    {class} property SelectedItems: TArray<Int32> write set_SelectedItems;
  end;

  ///<summary>
  ///  Class represents ListBox field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ListBoxField')]
  DNListBoxField = interface(DNChoiceField)
  ['{3C0D3999-8A56-3D4A-B3C7-BEE986E21D69}']
  { getters & setters } 

    function get_TopIndex: Int32;
    procedure set_TopIndex(value: Int32);
    procedure set_Selected(value: Int32);
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_Options: DNOptionCollection;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds new option with specified name.
    ///</summary>
    ///  <param name="optionName">Name of the new option.</param>
    procedure AddOption(optionName: string); overload;
    ///<summary>
    ///  Adds new option with specified export value and name.
    ///</summary>
    ///  <param name="export">Export value.</param>
    ///  <param name="name">Name of the new option.</param>
    procedure AddOption(&export: string; name: string); overload;
    ///<summary>
    ///  Deletes option by its name.
    ///</summary>
    ///  <param name="optionName">Name of the option which must be deleted.</param>
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets index of the top visible element of the list.
    ///</summary>
    property TopIndex: Int32 read get_TopIndex write set_TopIndex;
    ///<summary>
    ///  Gets or sets index of the selected item. Items are numbered from 1.
    ///</summary>
    property Selected: Int32 write set_Selected;
    ///<summary>
    ///  Gets or sets array of the selected items in the multiselect list. For single-select list returns array with single item.
    ///</summary>
    property SelectedItems: TArray<Int32> write set_SelectedItems;
    ///<summary>
    ///  Gets or sets commit on selection change flag.
    ///</summary>
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    ///<summary>
    ///  Gets or sets multiselection flag.
    ///</summary>
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    ///<summary>
    ///  Gets collection of choice options.
    ///</summary>
    property Options: DNOptionCollection read get_Options;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNListBoxField = class(TDNGenericImport<DNListBoxFieldClass, DNListBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRadioButtonFieldClass = interface(DNChoiceFieldClass)
  ['{57D20B0B-5C20-519C-AA4D-138F074E4F70}']
  { constructors } 

    ///<summary>
    ///  Constructor for RadiouttonField
    ///</summary>
    ///  <param name="page">Page where radio button will be placed.</param>
    {class} function init(page: DNPage): DNRadioButtonField; overload;
    ///<summary>
    ///  Constructor for RadioButtonField.
    ///</summary>
    ///  <param name="doc">Document where radio button will be created.</param>
    {class} function init(doc: DNDocument): DNRadioButtonField; overload;

  end;

  ///<summary>
  ///  Class representing radio button field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.RadioButtonField')]
  DNRadioButtonField = interface(DNChoiceField)
  ['{B604ECC6-AF30-3CCF-AA1A-F950DE29E0B5}']
  { getters & setters } 

    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_Selected: Int32;
    procedure set_Selected(value: Int32);
    function get_Options: DNOptionCollection;
    function get_PageIndex: Int32;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_CommitImmediately: Boolean;
    procedure set_CommitImmediately(value: Boolean);
    function get_MultiSelect: Boolean;
    procedure set_MultiSelect(value: Boolean);
    function get_SelectedItems: TArray<Int32>;
    procedure set_SelectedItems(value: TArray<Int32>);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds new option field to RadioButton field
    ///</summary>
    ///  <param name="newItem">Item which should be added.</param>
    procedure Add(newItem: DNRadioButtonOptionField);
    ///<summary>
    ///  Add  to radio button option with specifed rectangle.
    ///</summary>
    ///  <param name="optionName">Name of new option.</param>
    ///  <param name="rect">New item rectangle.</param>
    procedure AddOption(optionName: string; rect: DNRectangle); overload;
    ///<summary>
    ///  Add option to radion button.
    ///</summary>
    ///  <param name="optionName">Name of the option which will be added.</param>
    procedure AddOption(optionName: string); overload;
    ///<summary>
    ///  Move all subitems of radio button to specified positins on the page.
    ///</summary>
    ///  <param name="point">Sets position of RadioButton field annotations.</param>
    procedure SetPosition(point: DNPoint);
    ///<summary>
    ///  Adds new option with specified export value and name.
    ///</summary>
    ///  <param name="export">Export value.</param>
    ///  <param name="name">Name of the new option.</param>
    procedure AddOption(&export: string; name: string); overload;
    ///<summary>
    ///  Deletes option by its name.
    ///</summary>
    ///  <param name="optionName">Name of the option which must be deleted.</param>
    procedure DeleteOption(optionName: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Style of field box.
    ///</summary>
    property Style: DNBoxStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets index of selected item. Numbering of items is started from 1.
    ///</summary>
    property Selected: Int32 read get_Selected write set_Selected;
    ///<summary>
    ///  Gets collection of options of the radio button.
    ///</summary>
    property Options: DNOptionCollection read get_Options;
    ///<summary>
    ///  Gets index of page which contains this RadioButton field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets value of field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets commit on selection change flag.
    ///</summary>
    property CommitImmediately: Boolean read get_CommitImmediately write set_CommitImmediately;
    ///<summary>
    ///  Gets or sets multiselection flag.
    ///</summary>
    property MultiSelect: Boolean read get_MultiSelect write set_MultiSelect;
    ///<summary>
    ///  Gets or sets array of selected items. For multiselect list array contains more then one item. For single selection list it contains single item.
    ///</summary>
    property SelectedItems: TArray<Int32> read get_SelectedItems write set_SelectedItems;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRadioButtonField = class(TDNGenericImport<DNRadioButtonFieldClass, DNRadioButtonField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRadioButtonOptionFieldClass = interface(DNFieldClass)
  ['{A9D17CD2-E23A-57A1-9389-18D7DE4BE421}']
  { constructors } 

    ///<summary>
    ///  Create new RadioButtonOptionField instance.
    ///</summary>
    {class} function init: DNRadioButtonOptionField; overload;
    ///<summary>
    ///  Creates radiobutton in the specified recangle on specified page.
    ///</summary>
    ///  <param name="page">Page where RadioButton will be placed;</param>
    ///  <param name="rect">Recangle of RadioButton.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNRadioButtonOptionField; overload;

  end;

  ///<summary>
  ///  Class represents item of RadioButton field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.RadioButtonOptionField')]
  DNRadioButtonOptionField = interface(DNField)
  ['{6D25AFD4-3C5F-38FE-BB68-E2F62D6FAF2B}']
  { getters & setters } 

    function get_OptionName: string;
    procedure set_OptionName(value: string);
    function get_Caption: DNTextFragment;
    procedure set_Caption(value: DNTextFragment);
    function get_Style: DNBoxStyle;
    procedure set_Style(value: DNBoxStyle);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets name of the option.
    ///</summary>
    property OptionName: string read get_OptionName write set_OptionName;
    ///<summary>
    ///  Gets or sets caption.
    ///</summary>
    property Caption: DNTextFragment read get_Caption write set_Caption;
    ///<summary>
    ///  Gets or sets style of check box.
    ///</summary>
    property Style: DNBoxStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRadioButtonOptionField = class(TDNGenericImport<DNRadioButtonOptionFieldClass, DNRadioButtonOptionField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureFieldClass = interface(DNFieldClass)
  ['{36A227EE-6F73-5A49-BFA9-D1AF25D2C48A}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.SignatureField" />
    ///  class.
    ///</summary>
    ///  <param name="page">Page where signature field should be placed.</param>
    ///  <param name="rect">Position and size of signature field.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNSignatureField; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.SignatureField" />
    ///  class.
    ///</summary>
    ///  <param name="doc">Page where signature field should be placed.</param>
    ///  <param name="rect">Position and size of signature field.</param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNSignatureField; overload;

  end;

  ///<summary>
  ///  Represents signature form field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.SignatureField')]
  DNSignatureField = interface(DNField)
  ['{60145731-AA6C-3A3E-8524-4817D35FCF80}']
  { getters & setters } 

    function get_Signature: DNSignature;
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Signs the document using this signature field.
    ///</summary>
    ///  <param name="signature">
    ///  Signature object, see <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  , <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  , <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  .
    ///</param>
    ///  <param name="pfx">
    ///  Stream with certificate.
    ///</param>
    ///  <param name="pass">
    ///  Password to access private in the <paramref name="pfx" />
    ///  .
    ///</param>
    procedure Sign(signature: DNSignature; pfx: DDN.mscorlib.DNStream; pass: string); overload;
    ///<summary>
    ///  Sign the document using this signature field.
    ///</summary>
    ///  <param name="signature">Signature object, see <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  , <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  and <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  .</param>
    procedure Sign(signature: DNSignature); overload;
    ///<summary>
    ///  Extracts signature's image as jpeg encoded stream.
    ///</summary>
    ///<returns>If image was successfully found than returns jpeg encoded stream object; otherwise, null.</returns>
    function ExtractImage: DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  Extracts signature's image as encoded stream.
    ///</summary>
    ///  <param name="format">Image format for encoding.</param>
    ///<returns>If image was successfully found than returns encodedstream object; otherwise, null.</returns>
    function ExtractImage(format: DDN.Aspose.Common.DNImageFormat): DDN.mscorlib.DNStream; overload;
    ///<summary>
    ///  Extracts the single X.509 certificate in DER format as a stream.
    ///</summary>
    ///<returns>If certificate was found returns X.509 single certificate; otherwise, null.</returns>
    function ExtractCertificate: DDN.mscorlib.DNStream;
    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets signature object.
    ///  This object contains signature data regarding public-key cryptographic standards.
    ///  Classes <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  , <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  and <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  represent all supported types of signature objects.
    ///</summary>
    property Signature: DNSignature read get_Signature;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNSignatureField = class(TDNGenericImport<DNSignatureFieldClass, DNSignatureField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNTextBoxFieldClass = interface(DNFieldClass)
  ['{C6A9FF9A-E228-5A53-898A-638726F18288}']
  { constructors } 

    ///<summary>
    ///  Constructor which should be used with Generator.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    {class} function init(doc: DNDocument): DNTextBoxField; overload;
    ///<summary>
    ///  Create instance of TextBoxField.
    ///</summary>
    {class} function init: DNTextBoxField; overload;
    ///<summary>
    ///  Constructor of TextBox field.
    ///</summary>
    ///  <param name="page">Page where text field is placed.</param>
    ///  <param name="rect">Rectangle where the text field will be placed on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNTextBoxField; overload;
    ///<summary>
    ///  Constructor of TextBox field.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    ///  <param name="rect">Rectangle of the field.</param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNTextBoxField; overload;

  end;

  ///<summary>
  ///  Class representing text box field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.TextBoxField')]
  DNTextBoxField = interface(DNField)
  ['{FE61B31F-80A5-3D4B-B4D7-7679A424A680}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image to add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Adds barcode 128 into the field.
    ///  Field value will be changed onto the code and field become read only.
    ///</summary>
    ///  <param name="code">
    ///  The text to generate barcode 128.
    ///</param>
    procedure AddBarcode(code: string);
    ///<summary>
    ///  Recaculates all calculated fields on the form.
    ///</summary>
    ///<returns>true if field value was changed during recalculation.</returns>
    function Recalculate: Boolean;
    ///<summary>
    ///  Copies subfields of this field into array starting from specified index.
    ///</summary>
    ///  <param name="array">Array where field must be copied.</param>
    ///  <param name="index">Starting index where fields will be copied.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Returns enumerator of contained fields.
    ///</summary>
    ///<returns>Enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Removes this field and place its value directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Set position of the field.
    ///</summary>
    ///  <param name="point">Point where field should be positioned.</param>
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
    ///</summary>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets spellcheck flag for field. If true field shall be spell checked.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets scrollable flag of field. If true field can be scrolled.
    ///</summary>
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    ///<summary>
    ///  Gets or sets flag which indicates is field divided into spaced positions.
    ///</summary>
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    ///<summary>
    ///  Gets or sets maximum length of text in the field.
    ///</summary>
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    ///<summary>
    ///  Gets or sets text vertical alignment for annotation.
    ///</summary>
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets partial name of the field.
    ///</summary>
    property PartialName: string read get_PartialName write set_PartialName;
    ///<summary>
    ///  Gets or sets alternate name of the field (An alternate field
    ///  name that shall be used in place of the actual field name
    ///  wherever the field shall be identified in the user interface).
    ///  Alternate name is used as field tooltip in Adobe Acrobat.
    ///</summary>
    property AlternateName: string read get_AlternateName write set_AlternateName;
    ///<summary>
    ///  Gets or sets mapping name  of the field that shall be used when exporting interactive form field data from the document.
    ///</summary>
    property MappingName: string read get_MappingName write set_MappingName;
    ///<summary>
    ///  Returns true if dictionary is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets or sets number of subfields in this field. (For example number of items in radio button field).
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets or sets boolean value which indicates is this field non-terminal field i.e. group of fields.
    ///</summary>
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets or sets index of this anotation on the page.
    ///</summary>
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    ///<summary>
    ///  Gets index of page which contains this field.
    ///</summary>
    property PageIndex: Int32 read get_PageIndex;
    ///<summary>
    ///  Gets or sets the field rectangle.
    ///</summary>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Property for Generator support. Used when field is added to header or footer. If true, this field will created once and it's appearance will be visible on all pages of the document. If false, separated field will be created for every document page.
    ///</summary>
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    ///<summary>
    ///  Gets or sets tab order of the field.
    ///</summary>
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextBoxField = class(TDNGenericImport<DNTextBoxFieldClass, DNTextBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNBarcodeFieldClass = interface(DNTextBoxFieldClass)
  ['{32C6D130-5F94-5E11-AAAD-440E762956CB}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.BarcodeField" />
    ///  class.
    ///</summary>
    ///  <param name="page">
    ///  The page where to place new barcode.
    ///</param>
    ///  <param name="rect">
    ///  Barcode sizes given in rectangle.
    ///</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNBarcodeField; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.BarcodeField" />
    ///  class.
    ///</summary>
    ///  <param name="doc">Document where field will be created.</param>
    ///  <param name="rect">Rectangle where field will be placed on the page.</param>
    {class} function init(doc: DNDocument; rect: DNRectangle): DNBarcodeField; overload;

  end;

  ///<summary>
  ///  Class represents barcode field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.BarcodeField')]
  DNBarcodeField = interface(DNTextBoxField)
  ['{7921CDA0-BB00-3693-B834-B5F39AE14521}']
  { getters & setters } 

    function get_Resolution: Int32;
    function get_Caption: string;
    function get_Symbology: DNSymbology;
    function get_XSymWidth: Int32;
    function get_XSymHeight: Int32;
    function get_ECC: Int32;
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image to add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Adds barcode 128 into the field.
    ///  Field value will be changed onto the code and field become read only.
    ///</summary>
    ///  <param name="code">
    ///  The text to generate barcode 128.
    ///</param>
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the resolution, in dots-per-inch (dpi), at which the barcode object is rendered.
    ///</summary>
    property Resolution: Int32 read get_Resolution;
    ///<summary>
    ///  Gets the caption of the barcode object.
    ///</summary>
    property Caption: string read get_Caption;
    ///<summary>
    ///  Specifies which barcode or glyph technology is to be used on this annotation,
    ///  see <see cref="P:Aspose.Pdf.Forms.BarcodeField.Symbology" />
    ///  for details.
    ///</summary>
    property Symbology: DNSymbology read get_Symbology;
    ///<summary>
    ///  Gets The horizontal distance, in pixels, between two barcode modules.
    ///</summary>
    property XSymWidth: Int32 read get_XSymWidth;
    ///<summary>
    ///  Gets the the vertical distance between two barcode modules, measured in pixels.
    ///  The ratio XSymHeight/XSymWidth shall be an integer value.
    ///  For PDF417, the acceptable ratio range is from 1 to 4. For QRCode and DataMatrix,
    ///  this ratio shall always be 1
    ///</summary>
    property XSymHeight: Int32 read get_XSymHeight;
    ///<summary>
    ///  Gets an integer value representing the error correction coefficient.
    ///  For PDF417, shall be from 0 to 8. For QRCode, shall be from 0 to 3
    ///  (0 for �L�, 1 for �M�, 2 for �Q�, and 3 for �H�).
    ///</summary>
    property ECC: Int32 read get_ECC;
    ///<summary>
    ///  Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
    ///</summary>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets spellcheck flag for field. If true field shall be spell checked.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets scrollable flag of field. If true field can be scrolled.
    ///</summary>
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    ///<summary>
    ///  Gets or sets flag which indicates is field divided into spaced positions.
    ///</summary>
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    ///<summary>
    ///  Gets or sets maximum length of text in the field.
    ///</summary>
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    ///<summary>
    ///  Gets or sets text vertical alignment for annotation.
    ///</summary>
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNBarcodeField = class(TDNGenericImport<DNBarcodeFieldClass, DNBarcodeField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNFileSelectBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{84D177F9-F983-51D4-A1A5-260EF5EEAE65}']
  end;

  ///<summary>
  ///  Field for file select box element.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.FileSelectBoxField')]
  DNFileSelectBoxField = interface(DNTextBoxField)
  ['{9D96EABF-2CF5-3315-919E-9A248B53EBCE}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image to add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Adds barcode 128 into the field.
    ///  Field value will be changed onto the code and field become read only.
    ///</summary>
    ///  <param name="code">
    ///  The text to generate barcode 128.
    ///</param>
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
    ///</summary>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets spellcheck flag for field. If true field shall be spell checked.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets scrollable flag of field. If true field can be scrolled.
    ///</summary>
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    ///<summary>
    ///  Gets or sets flag which indicates is field divided into spaced positions.
    ///</summary>
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    ///<summary>
    ///  Gets or sets maximum length of text in the field.
    ///</summary>
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    ///<summary>
    ///  Gets or sets text vertical alignment for annotation.
    ///</summary>
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFileSelectBoxField = class(TDNGenericImport<DNFileSelectBoxFieldClass, DNFileSelectBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPasswordBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{7E223D52-1DF9-5B0E-8104-04B595903DF3}']
  end;

  ///<summary>
  ///  Class descibes text field for entering password.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.PasswordBoxField')]
  DNPasswordBoxField = interface(DNTextBoxField)
  ['{EEC1A56F-27C3-3FAC-A361-4CEF33213D21}']
  { getters & setters } 

    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image to add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Adds barcode 128 into the field.
    ///  Field value will be changed onto the code and field become read only.
    ///</summary>
    ///  <param name="code">
    ///  The text to generate barcode 128.
    ///</param>
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
    ///</summary>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets spellcheck flag for field. If true field shall be spell checked.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets scrollable flag of field. If true field can be scrolled.
    ///</summary>
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    ///<summary>
    ///  Gets or sets flag which indicates is field divided into spaced positions.
    ///</summary>
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    ///<summary>
    ///  Gets or sets maximum length of text in the field.
    ///</summary>
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    ///<summary>
    ///  Gets or sets text vertical alignment for annotation.
    ///</summary>
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    ///<summary>
    ///  Gets or sets value of the field.
    ///</summary>
    property Value: string read get_Value write set_Value;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNPasswordBoxField = class(TDNGenericImport<DNPasswordBoxFieldClass, DNPasswordBoxField>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNRichTextBoxFieldClass = interface(DNTextBoxFieldClass)
  ['{7EF1F3B0-DFF2-5DD2-A553-993A6C44D51A}']
  { constructors } 

    ///<summary>
    ///  Constructor for Rich Text Box  field.
    ///</summary>
    ///  <param name="page">Page where field will be placed.</param>
    ///  <param name="rect">Position of the field on the page.</param>
    {class} function init(page: DNPage; rect: DNRectangle): DNRichTextBoxField;

  end;

  ///<summary>
  ///  Class describes rich text editor component.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.RichTextBoxField')]
  DNRichTextBoxField = interface(DNTextBoxField)
  ['{68380C33-11C3-3635-835E-0AA611EEAF64}']
  { getters & setters } 

    function get_Style: string;
    procedure set_Style(value: string);
    function get_RichTextValue: string;
    procedure set_RichTextValue(value: string);
    function get_FormattedValue: string;
    procedure set_FormattedValue(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Justify: DNJustification;
    procedure set_Justify(value: DNJustification);
    function get_Multiline: Boolean;
    procedure set_Multiline(value: Boolean);
    function get_SpellCheck: Boolean;
    procedure set_SpellCheck(value: Boolean);
    function get_Scrollable: Boolean;
    procedure set_Scrollable(value: Boolean);
    function get_ForceCombs: Boolean;
    procedure set_ForceCombs(value: Boolean);
    function get_MaxLen: Int32;
    procedure set_MaxLen(value: Int32);
    function get_TextVerticalAlignment: DNVerticalAlignment;
    procedure set_TextVerticalAlignment(value: DNVerticalAlignment);
    function get_PartialName: string;
    procedure set_PartialName(value: string);
    function get_AlternateName: string;
    procedure set_AlternateName(value: string);
    function get_MappingName: string;
    procedure set_MappingName(value: string);
    function get_IsSynchronized: Boolean;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsGroup: Boolean;
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_AnnotationIndex: Int32;
    procedure set_AnnotationIndex(value: Int32);
    function get_PageIndex: Int32;
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_IsSharedField: Boolean;
    procedure set_IsSharedField(value: Boolean);
    function get_TabOrder: Int32;
    procedure set_TabOrder(value: Int32);
    function get_OnActivated: DNPdfAction;
    procedure set_OnActivated(value: DNPdfAction);
    function get_Actions: DNAnnotationActionCollection;
    function get_Highlighting: DNHighlightingMode;
    procedure set_Highlighting(value: DNHighlightingMode);
    function get_Parent: DNField;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Required: Boolean;
    procedure set_Required(value: Boolean);
    function get_Exportable: Boolean;
    procedure set_Exportable(value: Boolean);
    function get_AnnotationType: DNAnnotationType;
    function get_Flags: DNAnnotationFlags;
    procedure set_Flags(value: DNAnnotationFlags);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Contents: string;
    procedure set_Contents(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Modified: DDN.mscorlib.DNDateTime;
    procedure set_Modified(value: DDN.mscorlib.DNDateTime);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_Border: DNBorder;
    procedure set_Border(value: DNBorder);
    function get_ActiveState: string;
    procedure set_ActiveState(value: string);
    function get_Characteristics: DNCharacteristics;
    function get_States: DNAppearanceDictionary;
    function get_Alignment: DNTextAlignment;
    procedure set_Alignment(value: DNTextAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_TextHorizontalAlignment: DNHorizontalAlignment;
    procedure set_TextHorizontalAlignment(value: DNHorizontalAlignment);
    function get_FullName: string;
    function get_Appearance: DNAppearanceDictionary;
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Adds image into the field resources an draws it.
    ///</summary>
    ///  <param name="image">
    ///  Image to add into text field.
    ///</param>
    procedure AddImage(image: DDN.Aspose.Common.DNImage);
    ///<summary>
    ///  Adds barcode 128 into the field.
    ///  Field value will be changed onto the code and field become read only.
    ///</summary>
    ///  <param name="code">
    ///  The text to generate barcode 128.
    ///</param>
    procedure AddBarcode(code: string);
    function Recalculate: Boolean;
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    procedure Flatten;
    procedure SetPosition(point: DNPoint);
    procedure Accept(visitor: DNAnnotationSelector);
    function GetRectangle(considerRotation: Boolean): DNRectangle;
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets default style string of the rich text field.
    ///</summary>
    property Style: string read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets rich text value.
    ///</summary>
    property RichTextValue: string read get_RichTextValue write set_RichTextValue;
    ///<summary>
    ///  Gets or sets formatted rich text value with markup.
    ///</summary>
    property FormattedValue: string read get_FormattedValue write set_FormattedValue;
    ///<summary>
    ///  Value of RichTextField.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets justification of the rich text box.
    ///</summary>
    property Justify: DNJustification read get_Justify write set_Justify;
    ///<summary>
    ///  Gets or sets multiline flag of the field. If Multiline is true field can contain multiple lines of text.
    ///</summary>
    property Multiline: Boolean read get_Multiline write set_Multiline;
    ///<summary>
    ///  Gets or sets spellcheck flag for field. If true field shall be spell checked.
    ///</summary>
    property SpellCheck: Boolean read get_SpellCheck write set_SpellCheck;
    ///<summary>
    ///  Gets or sets scrollable flag of field. If true field can be scrolled.
    ///</summary>
    property Scrollable: Boolean read get_Scrollable write set_Scrollable;
    ///<summary>
    ///  Gets or sets flag which indicates is field divided into spaced positions.
    ///</summary>
    property ForceCombs: Boolean read get_ForceCombs write set_ForceCombs;
    ///<summary>
    ///  Gets or sets maximum length of text in the field.
    ///</summary>
    property MaxLen: Int32 read get_MaxLen write set_MaxLen;
    ///<summary>
    ///  Gets or sets text vertical alignment for annotation.
    ///</summary>
    property TextVerticalAlignment: DNVerticalAlignment read get_TextVerticalAlignment write set_TextVerticalAlignment;
    property PartialName: string read get_PartialName write set_PartialName;
    property AlternateName: string read get_AlternateName write set_AlternateName;
    property MappingName: string read get_MappingName write set_MappingName;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsGroup: Boolean read get_IsGroup;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    property AnnotationIndex: Int32 read get_AnnotationIndex write set_AnnotationIndex;
    property PageIndex: Int32 read get_PageIndex;
    property Rect: DNRectangle read get_Rect write set_Rect;
    property IsSharedField: Boolean read get_IsSharedField write set_IsSharedField;
    property TabOrder: Int32 read get_TabOrder write set_TabOrder;
    property OnActivated: DNPdfAction read get_OnActivated write set_OnActivated;
    property Actions: DNAnnotationActionCollection read get_Actions;
    property Highlighting: DNHighlightingMode read get_Highlighting write set_Highlighting;
    property Parent: DNField read get_Parent;
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Required: Boolean read get_Required write set_Required;
    property Exportable: Boolean read get_Exportable write set_Exportable;
    property AnnotationType: DNAnnotationType read get_AnnotationType;
    property Flags: DNAnnotationFlags read get_Flags write set_Flags;
    property Width: Double read get_Width write set_Width;
    property Height: Double read get_Height write set_Height;
    property Contents: string read get_Contents write set_Contents;
    property Name: string read get_Name write set_Name;
    property Modified: DDN.mscorlib.DNDateTime read get_Modified write set_Modified;
    property Color: DNColor read get_Color write set_Color;
    property Border: DNBorder read get_Border write set_Border;
    property ActiveState: string read get_ActiveState write set_ActiveState;
    property Characteristics: DNCharacteristics read get_Characteristics;
    property States: DNAppearanceDictionary read get_States;
    property Alignment: DNTextAlignment read get_Alignment write set_Alignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property TextHorizontalAlignment: DNHorizontalAlignment read get_TextHorizontalAlignment write set_TextHorizontalAlignment;
    property FullName: string read get_FullName;
    property Appearance: DNAppearanceDictionary read get_Appearance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNRichTextBoxField = class(TDNGenericImport<DNRichTextBoxFieldClass, DNRichTextBoxField>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGraphClass = interface(DNBaseParagraphClass)
  ['{2075B09A-6BBE-501D-8815-E9C611B4DCE5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Graph" />
    ///  class.
    ///</summary>
    ///  <param name="width">The width of the graph.</param>
    ///  <param name="height">The height of the graph.</param>
    {class} function init(width: Single; height: Single): DNGraph;

  end;

  ///<summary>
  ///  Represents graph - graphics generator paragraph.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Graph')]
  DNGraph = interface(DNBaseParagraph)
  ['{AF3998C8-1C70-32BA-AA19-2C29CCE45668}']
  { getters & setters } 

    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsChangePosition: Boolean;
    procedure set_IsChangePosition(value: Boolean);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clone the graph.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Graph.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets the border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets change curret position after process paragraph.(default true)
    ///</summary>
    property IsChangePosition: Boolean read get_IsChangePosition write set_IsChangePosition;
    ///<summary>
    ///  Gets or sets the table left coordinate.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the table top coordinate.
    ///</summary>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets a string value that indicates the title of the graph.
    ///</summary>
    property Title: DNTextFragment read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a float value that indicates the graph width.
    ///  The unit is point.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets a float value that indicates the graph height.
    ///  The unit is point.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNGraph = class(TDNGenericImport<DNGraphClass, DNGraph>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFloatingBoxClass = interface(DNBaseParagraphClass)
  ['{690F9EDC-520C-581E-A703-A3D49A568FC3}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" />
    ///  class with specified width and height.
    ///</summary>
    ///  <param name="width">The width of the box.</param>
    ///  <param name="height">The height of the box.</param>
    {class} function init(width: Single; height: Single): DNFloatingBox; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FloatingBox" />
    ///  class.
    ///</summary>
    {class} function init: DNFloatingBox; overload;

  end;

  ///  Represents a FloatingBox in a Pdf document. FloatingBox is custom positioned.
  [DNTypeName('Aspose.Pdf.FloatingBox')]
  DNFloatingBox = interface(DNBaseParagraph)
  ['{3CF32F15-9346-3D33-B955-6CC04F216430}']
  { getters & setters } 

    function get_ColumnInfo: DNColumnInfo;
    procedure set_ColumnInfo(value: DNColumnInfo);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_IsNeedRepeating: Boolean;
    procedure set_IsNeedRepeating(value: Boolean);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_Padding: DNMarginInfo;
    procedure set_Padding(value: DNMarginInfo);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clones a new <see cref="T:Aspose.Pdf.FloatingBox" />
    ///  object. Paragraphs in the floating box are not cloned.
    ///</summary>
    ///<returns>The new <see cref="T:Aspose.Pdf.FloatingBox" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a column info
    ///</summary>
    property ColumnInfo: DNColumnInfo read get_ColumnInfo write set_ColumnInfo;
    ///<summary>
    ///  Gets or sets a float value that indicates the width of the floating box.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets a float value that indicates the height of the floating box.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the paragraph need to be repeated on next page.
    ///  Default value is false.The attribute is only valid when the paragraph itself and the object its ReferenceParagraphID referred to both are included in RepeatingRows.
    ///</summary>
    property IsNeedRepeating: Boolean read get_IsNeedRepeating write set_IsNeedRepeating;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.FloatingBox.Paragraphs" />
    ///  collection that indicates all paragraphs in the cell.
    ///</summary>
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets a <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  object that indicates the border info of the floating box.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets a <see cref="T:Aspose.Pdf.Color" />
    ///  object that indicates the background color of the floating box.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets background image for page (for generator only).
    ///</summary>
    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    ///<summary>
    ///  Gets or sets a <see cref="T:Aspose.Pdf.MarginInfo" />
    ///  object that indicates the padding of the floating box.
    ///</summary>
    property Padding: DNMarginInfo read get_Padding write set_Padding;
    ///<summary>
    ///  Gets or sets the table left coordinate.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the table top coordinate.
    ///</summary>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFloatingBox = class(TDNGenericImport<DNFloatingBoxClass, DNFloatingBox>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFormattedFragmentClass = interface(DNBaseParagraphClass)
  ['{38D59D25-E234-59EB-8666-08342B250B08}']
  end;

  ///<summary>
  ///  Represents abstract formatted fragment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FormattedFragment')]
  DNFormattedFragment = interface(DNBaseParagraph)
  ['{C9C363B7-3C9F-3ADF-A776-5EB82B8BA43F}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clones this instance.
    ///  Virtual method. Always return null.
    ///</summary>
    ///<returns></returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNFormattedFragment = class(TDNGenericImport<DNFormattedFragmentClass, DNFormattedFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlFragmentClass = interface(DNFormattedFragmentClass)
  ['{021428F5-F440-586C-8893-DC94357E568C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the HtmlFragment class.
    ///</summary>
    ///  <param name="text">The fragment text</param>
    {class} function init(text: string): DNHtmlFragment;

  end;

  ///<summary>
  ///  Represents html fragment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlFragment')]
  DNHtmlFragment = interface(DNFormattedFragment)
  ['{24F23C7B-E9BB-3510-9AAB-1CFE8F66A144}']
  { getters & setters } 

    function get_Rectangle: DDN.Aspose.Common.DNRectangleF;
    function get_IsBreakWords: Boolean;
    procedure set_IsBreakWords(value: Boolean);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_HtmlLoadOptions: DNHtmlLoadOptions;
    procedure set_HtmlLoadOptions(value: DNHtmlLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets rectangle of the HtmlFragment
    ///</summary>
    property Rectangle: DDN.Aspose.Common.DNRectangleF read get_Rectangle;
    ///<summary>
    ///  Gets or sets words break
    ///</summary>
    property IsBreakWords: Boolean read get_IsBreakWords write set_IsBreakWords;
    ///<summary>
    ///  Gets or sets font
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  Gets or sets HtmlLoadOptions that will be used for loading (and rendering) of HTML into this instance of class.
    ///  Please use it when it's necessary use specific setting for import of HTML for this or that instance
    ///  (f.e when this or that instance should use specific BasePath for imported HTML or should use specific loader of external resources)
    ///  If parameter is default (null), then standard HTML loading options will be used.
    ///</summary>
    property HtmlLoadOptions: DNHtmlLoadOptions read get_HtmlLoadOptions write set_HtmlLoadOptions;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHtmlFragment = class(TDNGenericImport<DNHtmlFragmentClass, DNHtmlFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXFragmentClass = interface(DNFormattedFragmentClass)
  ['{B2DB5712-83BB-571A-A9CD-5871A9D71C13}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the HtmlFragment class.
    ///</summary>
    ///  <param name="text">The fragment text</param>
    {class} function init(text: string): DNTeXFragment; overload;
    ///<summary>
    ///  Initializes a new instance of the HtmlFragment class.
    ///</summary>
    ///  <param name="text">The fragment text</param>
    ///  <param name="removeIndents">Determines whether not to make indents while typesetting LaTeX fragment</param>
    {class} function init(text: string; removeIndents: Boolean): DNTeXFragment; overload;

  end;

  ///<summary>
  ///  Represents TeX fragment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TeXFragment')]
  DNTeXFragment = interface(DNFormattedFragment)
  ['{D7050D3D-B7E7-3F84-9101-5784A410AFB4}']
  { getters & setters } 

    function get_TeXLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_TeXLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_LatexLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_LatexLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class.
    ///  Please use it when it's necessary use specific setting for import of LaTeX for this or that instance
    ///  (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources)
    ///  If parameter is default (null), then standard LaTeX loading options will be used.
    ///</summary>
    property TeXLoadOptionsOfInstance: DNTeXLoadOptions read get_TeXLoadOptionsOfInstance write set_TeXLoadOptionsOfInstance;
    ///<summary>
    ///  Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class.
    ///  Please use it when it's necessary use specific setting for import of LaTeX for this or that instance
    ///  (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources)
    ///  If parameter is default (null), then standard LaTeX loading options will be used.
    ///</summary>
    property LatexLoadOptionsOfInstance: DNTeXLoadOptions read get_LatexLoadOptionsOfInstance write set_LatexLoadOptionsOfInstance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTeXFragment = class(TDNGenericImport<DNTeXFragmentClass, DNTeXFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLatexFragmentClass = interface(DNTeXFragmentClass)
  ['{48FA20BA-2A48-5FA3-BA6F-6E68C7025E1F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the HtmlFragment class.
    ///</summary>
    ///  <param name="text">The fragment text</param>
    {class} function init(text: string): DNLatexFragment; overload;
    ///<summary>
    ///  Initializes a new instance of the HtmlFragment class.
    ///</summary>
    ///  <param name="text">The fragment text</param>
    ///  <param name="removeIndents">Determines whether not to make indents while typesetting LaTeX fragment</param>
    {class} function init(text: string; removeIndents: Boolean): DNLatexFragment; overload;

  end;

  ///<summary>
  ///  Represents TeX fragment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LatexFragment')]
  DNLatexFragment = interface(DNTeXFragment)
  ['{9FF9FF5D-F251-3960-A299-065B19666B00}']
  { getters & setters } 

    function get_TeXLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_TeXLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_LatexLoadOptionsOfInstance: DNTeXLoadOptions;
    procedure set_LatexLoadOptionsOfInstance(value: DNTeXLoadOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class.
    ///  Please use it when it's necessary use specific setting for import of LaTeX for this or that instance
    ///  (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources)
    ///  If parameter is default (null), then standard LaTeX loading options will be used.
    ///</summary>
    property TeXLoadOptionsOfInstance: DNTeXLoadOptions read get_TeXLoadOptionsOfInstance write set_TeXLoadOptionsOfInstance;
    ///<summary>
    ///  Gets or sets TeXLoadOptions that will be used for loading (and rendering) of LaTeX into this instance of class.
    ///  Please use it when it's necessary use specific setting for import of LaTeX for this or that instance
    ///  (f.e when this or that instance should use specific BasePath for imported LaTeX or should use specific loader of external resources)
    ///  If parameter is default (null), then standard LaTeX loading options will be used.
    ///</summary>
    property LatexLoadOptionsOfInstance: DNTeXLoadOptions read get_LatexLoadOptionsOfInstance write set_LatexLoadOptionsOfInstance;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNLatexFragment = class(TDNGenericImport<DNLatexFragmentClass, DNLatexFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImageClass = interface(DNBaseParagraphClass)
  ['{8B40B7EA-257E-51F0-90D1-FF2EF50B1D5C}']
  { constructors } 

    {class} function init: DNImage;

  { static methods } 

    {class} function GetMimeType(i: DDN.Aspose.Common.DNImage): string;

  end;

  ///<summary>
  ///  Represents image.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Image')]
  DNImage = interface(DNBaseParagraph)
  ['{88B5521F-2DA7-3430-A982-76624437F801}']
  { getters & setters } 

    function get_File: string;
    procedure set_File(value: string);
    function get_FixWidth: Double;
    procedure set_FixWidth(value: Double);
    function get_FixHeight: Double;
    procedure set_FixHeight(value: Double);
    function get_FileType: DNImageFileType;
    procedure set_FileType(value: DNImageFileType);
    function get_ImageScale: Double;
    procedure set_ImageScale(value: Double);
    function get_ImageStream: DDN.mscorlib.DNStream;
    procedure set_ImageStream(value: DDN.mscorlib.DNStream);
    function get_IsApplyResolution: Boolean;
    procedure set_IsApplyResolution(value: Boolean);
    function get_IsBlackWhite: Boolean;
    procedure set_IsBlackWhite(value: Boolean);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clone the image.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the image file.
    ///</summary>
    property &File: string read get_File write set_File;
    ///<summary>
    ///  Gets or sets the image width.
    ///</summary>
    property FixWidth: Double read get_FixWidth write set_FixWidth;
    ///<summary>
    ///  Gets or sets the image height.
    ///</summary>
    property FixHeight: Double read get_FixHeight write set_FixHeight;
    ///<summary>
    ///  Gets or sets the image file type.
    ///</summary>
    property FileType: DNImageFileType read get_FileType write set_FileType;
    ///<summary>
    ///  Gets or sets the image scale.
    ///</summary>
    property ImageScale: Double read get_ImageScale write set_ImageScale;
    ///<summary>
    ///  Gets or sets the image stream.
    ///</summary>
    property ImageStream: DDN.mscorlib.DNStream read get_ImageStream write set_ImageStream;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the image use resolution during generation
    ///</summary>
    property IsApplyResolution: Boolean read get_IsApplyResolution write set_IsApplyResolution;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the image is forced to be black-and-white. If TIFF
    ///  image of CCITT subformat is used, this property must be set to true.
    ///</summary>
    property IsBlackWhite: Boolean read get_IsBlackWhite write set_IsBlackWhite;
    ///<summary>
    ///  Gets or sets a string value that indicates the title of the image.
    ///</summary>
    property Title: DNTextFragment read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTableClass = interface(DNBaseParagraphClass)
  ['{A9563D97-3AB0-58F9-9D5F-4CEA126EE95D}']
  { constructors } 

    {class} function init: DNTable;

  end;

  ///<summary>
  ///  Represents a table that can be added to the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Table')]
  DNTable = interface(DNBaseParagraph)
  ['{F0ACE9BA-A737-3BA9-B621-D6E862413415}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BreakText: DNTextFragment;
    procedure set_BreakText(value: DNTextFragment);
    function get_CornerStyle: DNBorderCornerStyle;
    procedure set_CornerStyle(value: DNBorderCornerStyle);
    function get_RepeatingRowsStyle: DNTextState;
    procedure set_RepeatingRowsStyle(value: DNTextState);
    function get_RepeatingColumnsCount: Int32;
    procedure set_RepeatingColumnsCount(value: Int32);
    function get_RepeatingRowsCount: Int32;
    procedure set_RepeatingRowsCount(value: Int32);
    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_Broken: DNTableBroken;
    procedure set_Broken(value: DNTableBroken);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_DefaultColumnWidth: string;
    procedure set_DefaultColumnWidth(value: string);
    function get_Rows: DNRows;
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_Left: Single;
    procedure set_Left(value: Single);
    function get_Top: Single;
    procedure set_Top(value: Single);
    function get_IsBroken: Boolean;
    procedure set_IsBroken(value: Boolean);
    function get_IsBordersIncluded: Boolean;
    procedure set_IsBordersIncluded(value: Boolean);
    function get_ColumnAdjustment: DNColumnAdjustment;
    procedure set_ColumnAdjustment(value: DNColumnAdjustment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Get width.
    ///</summary>
    ///<returns>The table width</returns>
    function GetWidth: Double;
    ///<summary>
    ///  Get height.
    ///</summary>
    ///<returns>The table height</returns>
    function GetHeight: Double;
    ///<summary>
    ///  Set height.
    ///</summary>
    ///  <param name="colNumber">The column number.</param>
    ///  <param name="textState">The text state for column.</param>
    procedure SetColumnTextState(colNumber: Int32; textState: DNTextState);
    ///<summary>
    ///  Imports one-dimensional array of data into table. Import goes one cell per each array's item and
    ///  starts from row and column defined in parameters. During import, if detected that necessary rows
    ///  are still absent(i.e. target table is too small to absorb all data), necessary rows will be created
    ///</summary>
    ///  <param name="importedArray">imported data, nulls will be imported as empty strings</param>
    ///  <param name="firstFilledRow">define number of first target row in target table from wich import will start.
    ///  If amount of rows in target table less then required, missing rows will be created first.
    ///</param>
    ///  <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
    ///  <param name="isLeftColumnsFilled">If 'isLeftColumnsFilled'=false, then in second and all subsequent filled rows cells that are on the left hand from
    ///  firstFilledColumn will be skipped</param>
    procedure ImportArray(importedArray: TArray<DDN.mscorlib.DNObject>; firstFilledRow: Int32; firstFilledColumn: Int32; isLeftColumnsFilled: Boolean);
    ///<summary>
    ///  Imports data from System.Data.DataTable into Aspose.Pdf.Table
    ///</summary>
    ///  <param name="importedDataTable"> source instance of System.Data.DataTable  </param>
    ///  <param name="isColumnNamesImported"> specifies whether column names will be imported as first row</param>
    ///  <param name="firstFilledRow"> specifies zero based number of first row in target table from which import will start, if row with such  number(and some previous rows) are absent in target table, they will be created first</param>
    ///  <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
    procedure ImportDataTable(importedDataTable: DDN.Aspose.Common.DNDataTable; isColumnNamesImported: Boolean; firstFilledRow: Int32; firstFilledColumn: Int32); overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object into the table.
    ///</summary>
    ///  <param name="importedDataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="isColumnNamesShown">Specifies whether the column names of the source datatable will be
    ///  imported as first row.</param>
    ///  <param name="firstFilledRow"> specifies zero based number of first row in target table from which import will start, if row with such  number(and some previous rows) are absent in target table, they will be created first</param>
    ///  <param name="firstFilledColumn">specifies number of first target column in target table , column must be present in target table before start of import </param>
    ///  <param name="maxRows">Maximum amount of rows to be imported from source table.</param>
    ///  <param name="maxColumns">Maximum amount of columns to be imported from source table.</param>
    ///  <param name="isHtmlSupported">Specifies whether the text is html string.</param>
    procedure ImportDataTable(importedDataTable: DDN.Aspose.Common.DNDataTable; isColumnNamesShown: Boolean; firstFilledRow: Int32; firstFilledColumn: Byte; maxRows: Int32; maxColumns: Int32; isHtmlSupported: Boolean); overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataTable" />
    ///  object, but not as whole entity. Only specified rows and columns are imported.
    ///</summary>
    ///  <param name="importedDataTable">The <see cref="T:System.Data.DataTable" />
    ///  object to be imported.</param>
    ///  <param name="sourceRowList">The array of numbers of rows in source <see cref="T:System.Data.DataTable" />
    ///  object that must be imported. List must be not null and must contain only numbers of existing rows, otherwise exception will be thrown.</param>
    ///  <param name="sourceColumnList">The array of numbers of columns in source <see cref="T:System.Data.DataTable" />
    ///  object that must be imported. List must be not null and must contain only numbers of existing columns, otherwise exception will be thrown.</param>
    ///  <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
    ///  If target table does not contain that row, it (and all previous if necessary) will be created</param>
    ///  <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start. The target table must contain that column befor import starts, otherwise exception will be thrown.</param>
    ///  <param name="showColumnNamesAsFirstRow">Specifies whether the column names of source datatable will be imported as first row.</param>
    ///  <param name="isHtmlSupported">Specifies whether the text is html string.</param>
    procedure ImportDataTable(importedDataTable: DDN.Aspose.Common.DNDataTable; sourceRowList: TArray<Int32>; sourceColumnList: TArray<Int32>; firstFilledRow: Int32; firstFilledColumn: Int32; showColumnNamesAsFirstRow: Boolean; isHtmlSupported: Boolean); overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object with given rows and columns into the table.
    ///</summary>
    ///  <param name="webDataGrid">The <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
    ///  If target table does not contain that row, it (and all previous if necessary) will be created</param>
    ///  <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start.
    ///  The target table must contain that column before import starts, otherwise exception will be thrown.
    ///</param>
    procedure ImportDataGrid(webDataGrid: DDN.Aspose.Common.DNDataGrid; firstFilledRow: Int32; firstFilledColumn: Byte); overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object datagrid's data into the table with specified maximum amount of imported rows and columns.
    ///</summary>
    ///  <param name="webDataGrid">The source <see cref="T:System.Web.UI.WebControls.DataGrid" />
    ///  object to be imported.</param>
    ///  <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
    ///  If target table does not contain that row, it (and all previous if necessary) will be created</param>
    ///  <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start.
    ///  The target table must contain that column before import starts, otherwise exception will be thrown.
    ///</param>
    ///  <param name="maxRows">Maximum amount of rows to be imported.</param>
    ///  <param name="maxColumns">Maximum amount of columns to be imported.</param>
    procedure ImportDataGrid(webDataGrid: DDN.Aspose.Common.DNDataGrid; firstFilledRow: Int32; firstFilledColumn: Byte; maxRows: Int32; maxColumns: Int32); overload;
    ///<summary>
    ///  Imports a <see cref="T:System.Data.DataView" />
    ///  object's data into the table.
    ///</summary>
    ///  <param name="sourceDataView">The <see cref="T:System.Data.DataView" />
    ///  object to be imported.</param>
    ///  <param name="isColumnNamesImported">Indicates whether the column names will be
    ///  imported as first row.</param>
    ///  <param name="firstFilledRow">The zero based row number of the first cell in targer table from which import will start.
    ///  If target table does not contain that row, it (and all previous if necessary) will be created</param>
    ///  <param name="firstFilledColumn">The zero based column number of the first cell in targer table from which import will start.
    ///  The target table must contain that column before import starts, otherwise exception will be thrown.
    ///</param>
    ///  <param name="maxRows">Maximum amount of rows to be imported from source dataview.</param>
    ///  <param name="maxColumns">Maximum columns to be imported from source dataview.</param>
    procedure ImportDataView(sourceDataView: DDN.Aspose.Common.DNDataView; isColumnNamesImported: Boolean; firstFilledRow: Int32; firstFilledColumn: Int32; maxRows: Int32; maxColumns: Int32);
    ///<summary>
    ///  Clone the table.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets table background color
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets break text for table
    ///</summary>
    property BreakText: DNTextFragment read get_BreakText write set_BreakText;
    ///<summary>
    ///  Gets or sets the styles of the border corners
    ///</summary>
    property CornerStyle: DNBorderCornerStyle read get_CornerStyle write set_CornerStyle;
    ///<summary>
    ///  Gets the style for repeating rows
    ///</summary>
    property RepeatingRowsStyle: DNTextState read get_RepeatingRowsStyle write set_RepeatingRowsStyle;
    ///<summary>
    ///  Gets or sets the maximum columns count for table
    ///</summary>
    property RepeatingColumnsCount: Int32 read get_RepeatingColumnsCount write set_RepeatingColumnsCount;
    ///<summary>
    ///  Gets the first rows count repeated for several pages
    ///</summary>
    property RepeatingRowsCount: Int32 read get_RepeatingRowsCount write set_RepeatingRowsCount;
    ///<summary>
    ///  Gets the column widths of the table.
    ///</summary>
    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    ///<summary>
    ///  Gets or sets table vertial broken;
    ///</summary>
    property Broken: DNTableBroken read get_Broken write set_Broken;
    ///<summary>
    ///  Gets default cell border;
    ///</summary>
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    ///<summary>
    ///  Gets default cell border;
    ///</summary>
    property DefaultColumnWidth: string read get_DefaultColumnWidth write set_DefaultColumnWidth;
    ///<summary>
    ///  Gets the rows of the table.
    ///</summary>
    property Rows: DNRows read get_Rows;
    ///<summary>
    ///  Gets or sets the border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the default cell padding.
    ///</summary>
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets the table alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the table left coordinate.
    ///</summary>
    property Left: Single read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the table top coordinate.
    ///</summary>
    property Top: Single read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets the table is broken - will be truncated for next page.
    ///</summary>
    property IsBroken: Boolean read get_IsBroken write set_IsBroken;
    ///<summary>
    ///  Gets or sets border included in column widhts.
    ///</summary>
    property IsBordersIncluded: Boolean read get_IsBordersIncluded write set_IsBordersIncluded;
    ///<summary>
    ///  Gets or sets the table column adjustment.
    ///</summary>
    property ColumnAdjustment: DNColumnAdjustment read get_ColumnAdjustment write set_ColumnAdjustment;
    ///<summary>
    ///  Gets or sets a vertical alignment of paragraph
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of paragraph
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets the fragment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentClass = interface(DNBaseParagraphClass)
  ['{31B401A8-5143-5050-993E-E3E151B67956}']
  { static getter & setter } 

    procedure set_Hyperlink(value: DNHyperlink);

  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    {class} function init: DNTextFragment; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object with predefined <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  positions.
    ///</summary>
    ///  <param name="tabStops">Tabulation positions</param>
    {class} function init(tabStops: DNTabStops): DNTextFragment; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object with single <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object inside.
    ///  Specifies text string inside the segment.
    ///</summary>
    ///  <param name="text">Text fragment's text.</param>
    {class} function init(text: string): DNTextFragment; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object with single <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object inside and predefined <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  positions.
    ///</summary>
    ///  <param name="text">Text fragment's text.</param>
    ///  <param name="tabStops">Tabulation positions</param>
    {class} function init(text: string; tabStops: DNTabStops): DNTextFragment; overload;

  { static propertys } 

    ///<summary>
    ///  Sets the fragment hyperlink
    ///</summary>
    {class} property Hyperlink: DNHyperlink write set_Hyperlink;
  end;

  ///<summary>
  ///  Represents fragment of Pdf text.
  ///</summary>
  ///<remarks>
  ///  In a few words, <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object contains list of <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects.
  ///  In details:
  ///  Text of pdf document in <see cref="N:Aspose.Pdf" />
  ///  is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  and <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  The differences between them is mostly context-dependent.
  ///  Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
  ///<code lang="C#">
  ///  Document doc = new Document(docFile);
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  doc.Pages[1].Accept(absorber);
  ///</code>
  ///  Phisycally pdf text's representation is very complex.
  ///  The text "hello world" may consist of several phisycally independent text segments.
  ///  The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object
  ///  provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects set that represent user's query.
  ///  In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  is logical "hello world" text representation,
  ///  and <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  object collection represents all physical segments that construct "hello world" text object.
  ///  So, <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  is close to logical text representation.
  ///  And <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  is close to physical text representation.
  ///  Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  object may have it's own font, coloring, positioning properties.
  ///<see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  provides simple way to change text with it's properties: set font, set font size, set font color etc.
  ///  Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects independently.
  ///  Note that changing TextFragment properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" />
  ///  collection because TextFragment is an aggregate object
  ///  and it may rearrange internal segments or merge them into single segment.
  ///  If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" />
  ///  collection unchanged, please change inner segments individually.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Find font that will be used to change document text font
  ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Change text and font of the first text occurrence
  ///  absorber.TextFragments[1].Text = "hi world";
  ///  absorber.TextFragments[1].TextState.Font = font;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TextFragment')]
  DNTextFragment = interface(DNBaseParagraph)
  ['{86BB5DED-D5A5-364C-AA4A-D4DDDB2AF822}']
  { getters & setters } 

    function get_ReplaceOptions: DNTextReplaceOptions;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    procedure set_Hyperlink(value: DNHyperlink);
    function get_TextState: DNTextFragmentState;
    function get_Segments: DNTextSegmentCollection;
    procedure set_Segments(value: DNTextSegmentCollection);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_Rectangle: DNRectangle;
    function get_Page: DNPage;
    function get_Form: DNXForm;
    function get_WrapLinesCount: Int32;
    procedure set_WrapLinesCount(value: Int32);
    function get_EndNote: DNNote;
    procedure set_EndNote(value: DNNote);
    function get_FootNote: DNNote;
    procedure set_FootNote(value: DNNote);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Gets <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s) representing specified part of the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  text.
    ///</summary>
    ///  <param name="startIndex">Position in text from which new <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s) will start.</param>
    ///  <param name="length">Length of the text that will isolated into <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s).</param>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextSegmentCollection" />
    ///  containing text segments represeting text substring starting at a specifing position and having a specified length.</returns>
    function IsolateTextSegments(startIndex: Int32; length: Int32): DNTextSegmentCollection;
    ///<summary>
    ///  Clone the fragment.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clone the fragment with all segments.
    ///</summary>
    ///<returns>The cloned object</returns>
    function CloneWithSegments: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets text replace options. The options define behavior when fragment text is replaced to more short/long.
    ///</summary>
    property ReplaceOptions: DNTextReplaceOptions read get_ReplaceOptions;
    ///<summary>
    ///  Gets or sets <see cref="T:System.String" />
    ///  text object that the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object represents.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to search a text and replace first occurrence represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object .
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].Text = "hi world";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets a vertical alignment of text fragment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of text fragment.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Sets the fragment hyperlink
    ///</summary>
    property Hyperlink: DNHyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object represents.
    ///</summary>
    ///<remarks>
    ///  Provides a way to change following properties of the text:
    ///  Font
    ///  FontSize
    ///  FontStyle
    ///  ForegroundColor
    ///  BackgroundColor
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" />
    ///  object.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change foreground color of the first text occurrence
    ///  absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
    ///  // Change font size of the first text occurrence
    ///  absorber.TextFragments[1].TextState.FontSize = 15;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property TextState: DNTextFragmentState read get_TextState;
    ///<summary>
    ///  Gets text segments for current <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///  Advanced users may access segments directly to perform more complex text edit scenarios.
    ///  For details, please look at <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object description.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to navigate all <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  objects inside <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  .
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Navigate all text segments and out their text and placement info
    ///  foreach (TextSegment segment in absorber.TextFragments[1].Segments)
    ///  {
    ///  Console.Out.WriteLine(string.Format("segment text: {0}", segment.Text));
    ///  Console.Out.WriteLine(string.Format("segment X indent: {0}", segment.Position.XIndent));
    ///  Console.Out.WriteLine(string.Format("segment Y indent: {0}", segment.Position.YIndent));
    ///  }
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    ///<seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    property Segments: DNTextSegmentCollection read get_Segments write set_Segments;
    ///<summary>
    ///  Gets or sets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to view placement of a text, represented by <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // View text and placement info of first text occurrence
    ///  TextFragment firstOccurrence = absorber.TextFragments[1];
    ///  Console.Out.WriteLine(string.Format("fragment text: {0}", firstOccurrence.Text));
    ///  Console.Out.WriteLine(string.Format("fragment X indent: {0}", firstOccurrence.Position.XIndent));
    ///  Console.Out.WriteLine(string.Format("fragment Y indent: {0}", firstOccurrence.Position.YIndent));
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    ///<seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    property Position: DNPosition read get_Position write set_Position;
    ///<summary>
    ///  Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///  The YIndent of the Position structure represents baseline coordinate of the text fragment.
    ///</summary>
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    ///<summary>
    ///  Gets rectangle of the TextFragment
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets page that contains the TextFragment
    ///</summary>
    ///<remarks>
    ///  The value can be null in case the TextFragment object doesn't belong to any page.
    ///</remarks>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets form object that contains the TextFragment
    ///</summary>
    ///<remarks>
    ///  The value can be null in case the TextFragment object doesn't belong to a form.
    ///</remarks>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets or sets wrap lines count for this paragraph(for pdf generation only)
    ///</summary>
    property WrapLinesCount: Int32 read get_WrapLinesCount write set_WrapLinesCount;
    ///<summary>
    ///  Gets or sets the paragraph end note.(for pdf generation only)
    ///</summary>
    property EndNote: DNNote read get_EndNote write set_EndNote;
    ///<summary>
    ///  Gets or sets the paragraph foot note.(for pdf generation only)
    ///</summary>
    property FootNote: DNNote read get_FootNote write set_FootNote;
    ///<summary>
    ///  Gets or sets a outer margin for paragraph (for pdf generation)
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether this paragraph will be at next column.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether current paragraph remains in the same page along with next paragraph.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    ///<summary>
    ///  Gets or sets a bool value that force this paragraph generates at new page.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets or sets a paragraph is inline.
    ///  Default is false.(for pdf generation)
    ///</summary>
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    ///<summary>
    ///  Gets or sets a int value that indicates the Z-order of the graph. A graph with larger ZIndex
    ///  will be placed over the graph with smaller ZIndex. ZIndex can be negative. Graph with negative
    ///  ZIndex will be placed behind the text in the page.
    ///</summary>
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNTextFragment = class(TDNGenericImport<DNTextFragmentClass, DNTextFragment>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeadingClass = interface(DNTextFragmentClass)
  ['{EBE550F8-35ED-59CA-9D29-256171324882}']
  { static getter & setter } 

    procedure set_Hyperlink(value: DNHyperlink);

  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Cell class.
    ///</summary>
    ///  <param name="level">The headings level.</param>
    {class} function init(level: Int32): DNHeading;

  { static propertys } 

    ///<summary>
    ///  Sets the fragment hyperlink
    ///</summary>
    {class} property Hyperlink: DNHyperlink write set_Hyperlink;
  end;

  ///<summary>
  ///  Represents heading.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Heading')]
  DNHeading = interface(DNTextFragment)
  ['{84DA0E02-A168-39B9-8234-9D85682F2607}']
  { getters & setters } 

    function get_TocPage: DNPage;
    procedure set_TocPage(value: DNPage);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_StartNumber: Int32;
    procedure set_StartNumber(value: Int32);
    function get_IsAutoSequence: Boolean;
    procedure set_IsAutoSequence(value: Boolean);
    function get_IsInList: Boolean;
    procedure set_IsInList(value: Boolean);
    function get_DestinationPage: DNPage;
    procedure set_DestinationPage(value: DNPage);
    function get_Level: Int32;
    procedure set_Level(value: Int32);
    function get_Style: DNNumberingStyle;
    procedure set_Style(value: DNNumberingStyle);
    function get_UserLabel: DNTextSegment;
    procedure set_UserLabel(value: DNTextSegment);
    function get_ReplaceOptions: DNTextReplaceOptions;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    procedure set_Hyperlink(value: DNHyperlink);
    function get_TextState: DNTextFragmentState;
    function get_Segments: DNTextSegmentCollection;
    procedure set_Segments(value: DNTextSegmentCollection);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_Rectangle: DNRectangle;
    function get_Page: DNPage;
    function get_Form: DNXForm;
    function get_WrapLinesCount: Int32;
    procedure set_WrapLinesCount(value: Int32);
    function get_EndNote: DNNote;
    procedure set_EndNote(value: DNNote);
    function get_FootNote: DNNote;
    procedure set_FootNote(value: DNNote);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_IsFirstParagraphInColumn: Boolean;
    procedure set_IsFirstParagraphInColumn(value: Boolean);
    function get_IsKeptWithNext: Boolean;
    procedure set_IsKeptWithNext(value: Boolean);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsInLineParagraph: Boolean;
    procedure set_IsInLineParagraph(value: Boolean);
    function get_ZIndex: Int32;
    procedure set_ZIndex(value: Int32);

  { methods } 

    ///<summary>
    ///  Clone the heading.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clone the heading with all segments.
    ///</summary>
    ///<returns>The cloned object</returns>
    function CloneWithSegments: DDN.mscorlib.DNObject;
    ///<summary>
    ///  Gets <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s) representing specified part of the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  text.
    ///</summary>
    ///  <param name="startIndex">Position in text from which new <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s) will start.</param>
    ///  <param name="length">Length of the text that will isolated into <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  (s).</param>
    ///<returns><see cref="T:Aspose.Pdf.Text.TextSegmentCollection" />
    ///  containing text segments represeting text substring starting at a specifing position and having a specified length.</returns>
    function IsolateTextSegments(startIndex: Int32; length: Int32): DNTextSegmentCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the page that contains this heading.
    ///</summary>
    property TocPage: DNPage read get_TocPage write set_TocPage;
    ///<summary>
    ///  Gets the top Y of this headings.
    ///</summary>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets the heading start number.
    ///</summary>
    property StartNumber: Int32 read get_StartNumber write set_StartNumber;
    ///<summary>
    ///  Gets the heading should be numered automatically.
    ///</summary>
    property IsAutoSequence: Boolean read get_IsAutoSequence write set_IsAutoSequence;
    ///<summary>
    ///  Gets the heading should be in toc list.
    ///</summary>
    property IsInList: Boolean read get_IsInList write set_IsInList;
    ///<summary>
    ///  Gets the destination page.
    ///</summary>
    property DestinationPage: DNPage read get_DestinationPage write set_DestinationPage;
    ///<summary>
    ///  Gets the level.
    ///</summary>
    property Level: Int32 read get_Level write set_Level;
    ///<summary>
    ///  Gets or sets style.
    ///</summary>
    property Style: DNNumberingStyle read get_Style write set_Style;
    ///<summary>
    ///  Gets or sets user label.
    ///</summary>
    property UserLabel: DNTextSegment read get_UserLabel write set_UserLabel;
    ///<summary>
    ///  Gets text replace options. The options define behavior when fragment text is replaced to more short/long.
    ///</summary>
    property ReplaceOptions: DNTextReplaceOptions read get_ReplaceOptions;
    ///<summary>
    ///  Gets or sets <see cref="T:System.String" />
    ///  text object that the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object represents.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to search a text and replace first occurrence represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object .
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].Text = "hi world";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets a vertical alignment of text fragment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a horizontal alignment of text fragment.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Sets the fragment hyperlink
    ///</summary>
    property Hyperlink: DNHyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object represents.
    ///</summary>
    ///<remarks>
    ///  Provides a way to change following properties of the text:
    ///  Font
    ///  FontSize
    ///  FontStyle
    ///  ForegroundColor
    ///  BackgroundColor
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" />
    ///  object.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change foreground color of the first text occurrence
    ///  absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
    ///  // Change font size of the first text occurrence
    ///  absorber.TextFragments[1].TextState.FontSize = 15;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property TextState: DNTextFragmentState read get_TextState;
    ///<summary>
    ///  Gets text segments for current <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///  Advanced users may access segments directly to perform more complex text edit scenarios.
    ///  For details, please look at <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object description.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to navigate all <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  objects inside <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  .
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Navigate all text segments and out their text and placement info
    ///  foreach (TextSegment segment in absorber.TextFragments[1].Segments)
    ///  {
    ///  Console.Out.WriteLine(string.Format("segment text: {0}", segment.Text));
    ///  Console.Out.WriteLine(string.Format("segment X indent: {0}", segment.Position.XIndent));
    ///  Console.Out.WriteLine(string.Format("segment Y indent: {0}", segment.Position.YIndent));
    ///  }
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    ///<seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    property Segments: DNTextSegmentCollection read get_Segments write set_Segments;
    ///<summary>
    ///  Gets or sets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to view placement of a text, represented by <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // View text and placement info of first text occurrence
    ///  TextFragment firstOccurrence = absorber.TextFragments[1];
    ///  Console.Out.WriteLine(string.Format("fragment text: {0}", firstOccurrence.Text));
    ///  Console.Out.WriteLine(string.Format("fragment X indent: {0}", firstOccurrence.Position.XIndent));
    ///  Console.Out.WriteLine(string.Format("fragment Y indent: {0}", firstOccurrence.Position.YIndent));
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    ///<seealso cref="T:Aspose.Pdf.Text.TextSegment" />
    property Position: DNPosition read get_Position write set_Position;
    ///<summary>
    ///  Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///  The YIndent of the Position structure represents baseline coordinate of the text fragment.
    ///</summary>
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    ///<summary>
    ///  Gets rectangle of the TextFragment
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets page that contains the TextFragment
    ///</summary>
    ///<remarks>
    ///  The value can be null in case the TextFragment object doesn't belong to any page.
    ///</remarks>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets form object that contains the TextFragment
    ///</summary>
    ///<remarks>
    ///  The value can be null in case the TextFragment object doesn't belong to a form.
    ///</remarks>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets or sets wrap lines count for this paragraph(for pdf generation only)
    ///</summary>
    property WrapLinesCount: Int32 read get_WrapLinesCount write set_WrapLinesCount;
    ///<summary>
    ///  Gets or sets the paragraph end note.(for pdf generation only)
    ///</summary>
    property EndNote: DNNote read get_EndNote write set_EndNote;
    ///<summary>
    ///  Gets or sets the paragraph foot note.(for pdf generation only)
    ///</summary>
    property FootNote: DNNote read get_FootNote write set_FootNote;
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    property IsFirstParagraphInColumn: Boolean read get_IsFirstParagraphInColumn write set_IsFirstParagraphInColumn;
    property IsKeptWithNext: Boolean read get_IsKeptWithNext write set_IsKeptWithNext;
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    property IsInLineParagraph: Boolean read get_IsInLineParagraph write set_IsInLineParagraph;
    property ZIndex: Int32 read get_ZIndex write set_ZIndex;
  end;

  TDNHeading = class(TDNGenericImport<DNHeadingClass, DNHeading>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBorderInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D121445-A9B0-5585-B176-E33FA926D404}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    ///  <param name="borderSide">Indicates the border sides info. For example: (int)(BorderSide.Left | BorderSide.Top).</param>
    ///  <param name="borderColor">The border color.</param>
    {class} function init(borderSide: DNBorderSide; borderColor: DNColor): DNBorderInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    {class} function init: DNBorderInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    ///  <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    {class} function init(borderSide: DNBorderSide): DNBorderInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    ///  <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    ///  <param name="borderWidth">The width of the border.</param>
    {class} function init(borderSide: DNBorderSide; borderWidth: Single): DNBorderInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    ///  <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    ///  <param name="borderWidth">The width of the border.</param>
    ///  <param name="borderColor">The border color.</param>
    {class} function init(borderSide: DNBorderSide; borderWidth: Single; borderColor: DNColor): DNBorderInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.BorderInfo" />
    ///  class.
    ///</summary>
    ///  <param name="borderSide">Indicates the border sides info. For example: (BorderSide.Left | BorderSide.Top).</param>
    ///  <param name="info">The border info.</param>
    {class} function init(borderSide: DNBorderSide; info: DNGraphInfo): DNBorderInfo; overload;

  end;

  ///<summary>
  ///  This class represents border for graphics elements.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BorderInfo')]
  DNBorderInfo = interface(DDN.mscorlib.DNObject)
  ['{80855217-2060-39ED-B7D3-CF7FBF5F584E}']
  { getters & setters } 

    function get_Left: DNGraphInfo;
    procedure set_Left(value: DNGraphInfo);
    function get_Right: DNGraphInfo;
    procedure set_Right(value: DNGraphInfo);
    function get_Top: DNGraphInfo;
    procedure set_Top(value: DNGraphInfo);
    function get_Bottom: DNGraphInfo;
    procedure set_Bottom(value: DNGraphInfo);
    function get_RoundedBorderRadius: Double;
    procedure set_RoundedBorderRadius(value: Double);

  { methods } 

    ///<summary>
    ///  Clones a new BorderInfo object.
    ///</summary>
    ///<returns>The new BorderInfo object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a object that indicates left of the border.
    ///</summary>
    property Left: DNGraphInfo read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets a object that indicates right of the border.
    ///</summary>
    property Right: DNGraphInfo read get_Right write set_Right;
    ///<summary>
    ///  Gets or sets a object that indicates the top border.
    ///</summary>
    property Top: DNGraphInfo read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets a object that indicates bottom of the border.
    ///</summary>
    property Bottom: DNGraphInfo read get_Bottom write set_Bottom;
    ///<summary>
    ///  Gets or sets a rouded border radius
    ///</summary>
    property RoundedBorderRadius: Double read get_RoundedBorderRadius write set_RoundedBorderRadius;
  end;

  TDNBorderInfo = class(TDNGenericImport<DNBorderInfoClass, DNBorderInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNBuildVersionInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{002B0E9E-6757-5D8A-AC3A-502EAB2DB9E5}']
  { constructors } 

    {class} function init: DNBuildVersionInfo;

  { static fields getter & setter } 

   function __fakeFieldGet_AssemblyVersion: string;
   function __fakeFieldGet_Product: string;
   function __fakeFieldGet_FileVersion: string;

  { static fields } 

    ///<summary>
    ///  Assembly Version
    ///</summary>
    {class} property AssemblyVersion: string read __fakeFieldGet_AssemblyVersion;
    ///<summary>
    ///  Product Name
    ///</summary>
    {class} property Product: string read __fakeFieldGet_Product;
    ///<summary>
    ///  File Version
    ///</summary>
    {class} property FileVersion: string read __fakeFieldGet_FileVersion;

  end;

  ///<summary>
  ///  This class provides information about current product build.
  ///</summary>
  [DNTypeName('Aspose.Pdf.BuildVersionInfo')]
  DNBuildVersionInfo = interface(DDN.mscorlib.DNObject)
  ['{FC992199-5C74-3647-8DC5-37A5EAD469D1}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBuildVersionInfo = class(TDNGenericImport<DNBuildVersionInfoClass, DNBuildVersionInfo>)
  public const
    ///<summary>
    ///  Assembly Version
    ///</summary>
   AssemblyVersion = '21.6.0';
    ///<summary>
    ///  Product Name
    ///</summary>
   Product = 'Aspose.PDF';
    ///<summary>
    ///  File Version
    ///</summary>
   FileVersion = '21.6.0';
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{932D4C03-4AF3-51E8-8788-5BFC4F96C80F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Cell class.
    ///</summary>
    ///  <param name="rect">The rectangle of the cell in page's coordinates.</param>
    {class} function init(rect: DNRectangle): DNCell; overload;
    ///<summary>
    ///  Initializes a new instance of the Cell class.
    ///</summary>
    {class} function init: DNCell; overload;

  end;

  ///<summary>
  ///  Represents a cell of the table's row.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Cell')]
  DNCell = interface(DDN.mscorlib.DNObject)
  ['{DA409227-7E12-3D00-96BA-F639AEB9F6FF}']
  { getters & setters } 

    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_BackgroundImageFile: string;
    procedure set_BackgroundImageFile(value: string);
    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Width: Double;

  { methods } 

    ///<summary>
    ///  Clone the cell.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the cell have border.
    ///</summary>
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    ///<summary>
    ///  Gets or sets the padding.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets the border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the background image file.
    ///</summary>
    property BackgroundImageFile: string read get_BackgroundImageFile write set_BackgroundImageFile;
    ///<summary>
    ///  Gets or sets the background image
    ///</summary>
    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    ///<summary>
    ///  Gets or sets the alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets the cell's formatted text.
    ///</summary>
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets the cell's text word wrapped.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets the column span.
    ///</summary>
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    ///<summary>
    ///  Gets or sets the row span.
    ///</summary>
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    ///<summary>
    ///  Gets or sets the column width.
    ///</summary>
    property Width: Double read get_Width;
  end;

  TDNCell = class(TDNGenericImport<DNCellClass, DNCell>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCellsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD96C7BA-5C4C-525D-86D1-E5C60D605974}']
  { constructors } 

    {class} function init: DNCells;

  end;

  ///<summary>
  ///  Represents a cells collection of row.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Cells')]
  DNCells = interface(DDN.mscorlib.DNObject)
  ['{36617020-1B9F-31BD-9D15-9D101377A573}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNCell;
    procedure set_Item(index: Int32; value: DNCell);

  { methods } 

    ///<summary>
    ///  Add cell to collection.
    ///</summary>
    ///<returns>The new cell</returns>
    function Add: DNCell; overload;
    ///<summary>
    ///  Add cell to collection.
    ///</summary>
    ///  <param name="text">The text for cell.</param>
    ///  <param name="ts">The text state.</param>
    ///<returns>The new cell</returns>
    function Add(text: string; ts: DNTextState): DNCell; overload;
    ///<summary>
    ///  Add cell to collection.
    ///</summary>
    ///  <param name="text">The text for cell.</param>
    ///<returns>The new cell</returns>
    function Add(text: string): DNCell; overload;
    ///<summary>
    ///  Add cell to collection.
    ///</summary>
    ///  <param name="cell">The cell to collection.</param>
    ///<returns></returns>
    procedure Add(cell: DNCell); overload;
    ///<summary>
    ///  Remove cell set from collection.
    ///</summary>
    ///  <param name="index">The collection index.</param>
    ///  <param name="count">The rows count.</param>
    procedure RemoveRange(index: Int32; count: Int32);
    ///<summary>
    ///  Remove cell set from collection.
    ///</summary>
    ///  <param name="obj">The object.</param>
    procedure Remove(obj: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Remove cell set from collection.
    ///</summary>
    ///  <param name="cell">The cell object.</param>
    procedure Remove(cell: DNCell); overload;
    ///<summary>
    ///  Insert cell to collection.
    ///</summary>
    ///  <param name="index">The selected index.</param>
    ///  <param name="cell">The selected cell.</param>
    procedure Insert(index: Int32; cell: DNCell);
    ///<summary>
    ///  Gets collection's enumerator
    ///</summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCell>;
    ///<summary>
    ///  Dispose method
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The items count.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNCell read get_Item write set_Item; default;
  end;

  TDNCells = class(TDNGenericImport<DNCellsClass, DNCells>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{04CC1FFC-4E24-52D2-9B54-36B3627AB7AF}']
  { static getter & setter } 

    {class} function get_Transparent: DNColor;
    {class} function get_AliceBlue: DNColor;
    {class} function get_AntiqueWhite: DNColor;
    {class} function get_Aqua: DNColor;
    {class} function get_Aquamarine: DNColor;
    {class} function get_Azure: DNColor;
    {class} function get_Beige: DNColor;
    {class} function get_Bisque: DNColor;
    {class} function get_Black: DNColor;
    {class} function get_BlanchedAlmond: DNColor;
    {class} function get_Blue: DNColor;
    {class} function get_BlueViolet: DNColor;
    {class} function get_Brown: DNColor;
    {class} function get_BurlyWood: DNColor;
    {class} function get_CadetBlue: DNColor;
    {class} function get_Chartreuse: DNColor;
    {class} function get_Chocolate: DNColor;
    {class} function get_Coral: DNColor;
    {class} function get_CornflowerBlue: DNColor;
    {class} function get_Cornsilk: DNColor;
    {class} function get_Crimson: DNColor;
    {class} function get_Cyan: DNColor;
    {class} function get_DarkBlue: DNColor;
    {class} function get_DarkCyan: DNColor;
    {class} function get_DarkGoldenrod: DNColor;
    {class} function get_DarkGray: DNColor;
    {class} function get_DarkGreen: DNColor;
    {class} function get_DarkKhaki: DNColor;
    {class} function get_DarkMagenta: DNColor;
    {class} function get_DarkOliveGreen: DNColor;
    {class} function get_DarkOrange: DNColor;
    {class} function get_DarkOrchid: DNColor;
    {class} function get_DarkRed: DNColor;
    {class} function get_DarkSalmon: DNColor;
    {class} function get_DarkSeaGreen: DNColor;
    {class} function get_DarkSlateBlue: DNColor;
    {class} function get_DarkSlateGray: DNColor;
    {class} function get_DarkTurquoise: DNColor;
    {class} function get_DarkViolet: DNColor;
    {class} function get_DeepPink: DNColor;
    {class} function get_DeepSkyBlue: DNColor;
    {class} function get_DimGray: DNColor;
    {class} function get_DodgerBlue: DNColor;
    {class} function get_Firebrick: DNColor;
    {class} function get_FloralWhite: DNColor;
    {class} function get_ForestGreen: DNColor;
    {class} function get_Fuchsia: DNColor;
    {class} function get_Gainsboro: DNColor;
    {class} function get_GhostWhite: DNColor;
    {class} function get_Gold: DNColor;
    {class} function get_Goldenrod: DNColor;
    {class} function get_Gray: DNColor;
    {class} function get_Green: DNColor;
    {class} function get_GreenYellow: DNColor;
    {class} function get_Honeydew: DNColor;
    {class} function get_HotPink: DNColor;
    {class} function get_IndianRed: DNColor;
    {class} function get_Indigo: DNColor;
    {class} function get_Ivory: DNColor;
    {class} function get_Khaki: DNColor;
    {class} function get_Lavender: DNColor;
    {class} function get_LavenderBlush: DNColor;
    {class} function get_LawnGreen: DNColor;
    {class} function get_LemonChiffon: DNColor;
    {class} function get_LightBlue: DNColor;
    {class} function get_LightCoral: DNColor;
    {class} function get_LightCyan: DNColor;
    {class} function get_LightGoldenrodYellow: DNColor;
    {class} function get_LightGreen: DNColor;
    {class} function get_LightGray: DNColor;
    {class} function get_LightPink: DNColor;
    {class} function get_LightSalmon: DNColor;
    {class} function get_LightSeaGreen: DNColor;
    {class} function get_LightSkyBlue: DNColor;
    {class} function get_LightSlateGray: DNColor;
    {class} function get_LightSteelBlue: DNColor;
    {class} function get_LightYellow: DNColor;
    {class} function get_Lime: DNColor;
    {class} function get_LimeGreen: DNColor;
    {class} function get_Linen: DNColor;
    {class} function get_Magenta: DNColor;
    {class} function get_Maroon: DNColor;
    {class} function get_MediumAquamarine: DNColor;
    {class} function get_MediumBlue: DNColor;
    {class} function get_MediumOrchid: DNColor;
    {class} function get_MediumPurple: DNColor;
    {class} function get_MediumSeaGreen: DNColor;
    {class} function get_MediumSlateBlue: DNColor;
    {class} function get_MediumSpringGreen: DNColor;
    {class} function get_MediumTurquoise: DNColor;
    {class} function get_MediumVioletRed: DNColor;
    {class} function get_MidnightBlue: DNColor;
    {class} function get_MintCream: DNColor;
    {class} function get_MistyRose: DNColor;
    {class} function get_Moccasin: DNColor;
    {class} function get_NavajoWhite: DNColor;
    {class} function get_Navy: DNColor;
    {class} function get_OldLace: DNColor;
    {class} function get_Olive: DNColor;
    {class} function get_OliveDrab: DNColor;
    {class} function get_Orange: DNColor;
    {class} function get_OrangeRed: DNColor;
    {class} function get_Orchid: DNColor;
    {class} function get_PaleGoldenrod: DNColor;
    {class} function get_PaleGreen: DNColor;
    {class} function get_PaleTurquoise: DNColor;
    {class} function get_PaleVioletRed: DNColor;
    {class} function get_PapayaWhip: DNColor;
    {class} function get_PeachPuff: DNColor;
    {class} function get_Peru: DNColor;
    {class} function get_Pink: DNColor;
    {class} function get_Plum: DNColor;
    {class} function get_PowderBlue: DNColor;
    {class} function get_Purple: DNColor;
    {class} function get_Red: DNColor;
    {class} function get_RosyBrown: DNColor;
    {class} function get_RoyalBlue: DNColor;
    {class} function get_SaddleBrown: DNColor;
    {class} function get_Salmon: DNColor;
    {class} function get_SandyBrown: DNColor;
    {class} function get_SeaGreen: DNColor;
    {class} function get_SeaShell: DNColor;
    {class} function get_Sienna: DNColor;
    {class} function get_Silver: DNColor;
    {class} function get_SkyBlue: DNColor;
    {class} function get_SlateBlue: DNColor;
    {class} function get_SlateGray: DNColor;
    {class} function get_Snow: DNColor;
    {class} function get_SpringGreen: DNColor;
    {class} function get_SteelBlue: DNColor;
    {class} function get_Tan: DNColor;
    {class} function get_Teal: DNColor;
    {class} function get_Thistle: DNColor;
    {class} function get_Tomato: DNColor;
    {class} function get_Turquoise: DNColor;
    {class} function get_Violet: DNColor;
    {class} function get_Wheat: DNColor;
    {class} function get_White: DNColor;
    {class} function get_WhiteSmoke: DNColor;
    {class} function get_Yellow: DNColor;
    {class} function get_YellowGreen: DNColor;

  { constructors } 

    {class} function init: DNColor;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNColor;

  { static fields } 

    ///<summary>
    ///  Represents empty color.
    ///</summary>
    {class} property Empty: DNColor read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  Extracts color components from the string.
    ///</summary>
    ///  <param name="value">
    ///  String value with color component values.
    ///</param>
    ///<returns>
    ///  Color object.
    ///</returns>
    {class} function Parse(value: string): DNColor;
    ///<summary>
    ///  Gets valid pdf Color object from System.Drawing.Color value.
    ///</summary>
    ///  <param name="color">
    ///  System.Drawing.Color value.
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..1] range.
    ///</returns>
    {class} function FromRgb(color: DDN.Aspose.Common.DNColor): DNColor; overload;
    ///<summary>
    ///  Gets valid pdf Color object from RGB color components.
    ///</summary>
    ///  <param name="r">
    ///  The Red color component (value 0 - 255).
    ///</param>
    ///  <param name="g">
    ///  The Green color component (value 0 - 255).
    ///</param>
    ///  <param name="b">
    ///  The Blue color component (value 0 - 255).
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..255] range.
    ///</returns>
    {class} function FromArgb(r: Int32; g: Int32; b: Int32): DNColor; overload;
    ///<summary>
    ///  Gets valid pdf Color object from RGB color components.
    ///</summary>
    ///  <param name="a">
    ///  The alpha component value (value 0 - 255).
    ///</param>
    ///  <param name="r">
    ///  The Red color component (value 0 - 255).
    ///</param>
    ///  <param name="g">
    ///  The Green color component (value 0 - 255).
    ///</param>
    ///  <param name="b">
    ///  The Blue color component (value 0 - 255).
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..255] range.
    ///</returns>
    {class} function FromArgb(a: Int32; r: Int32; g: Int32; b: Int32): DNColor; overload;
    ///<summary>
    ///  Gets valid pdf Color object from RGB color components.
    ///</summary>
    ///  <param name="r">
    ///  The Red color component (value 0 - 1).
    ///</param>
    ///  <param name="g">
    ///  The Green color component (value 0 - 1).
    ///</param>
    ///  <param name="b">
    ///  The Blue color component (value 0 - 1).
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..1] range.
    ///</returns>
    {class} function FromRgb(r: Double; g: Double; b: Double): DNColor; overload;
    ///<summary>
    ///  Gets valid pdf Color object from Gray color component.
    ///</summary>
    ///  <param name="g">
    ///  The Gray color component (value 0 - 1).
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..1] range.
    ///</returns>
    {class} function FromGray(g: Double): DNColor;
    ///<summary>
    ///  Gets valid pdf Color object from RGB color components.
    ///</summary>
    ///  <param name="c">
    ///  The Cyan color component (value 0 - 1).
    ///</param>
    ///  <param name="m">
    ///  The Magenta color component (value 0 - 1).
    ///</param>
    ///  <param name="y">
    ///  The Yellow color component (value 0 - 1).
    ///</param>
    ///  <param name="k">
    ///  The Key color component (value 0 - 1).
    ///</param>
    ///<returns>
    ///  Color object with each component value in [0..1] range.
    ///</returns>
    {class} function FromCmyk(c: Double; m: Double; y: Double; k: Double): DNColor;

  { static propertys } 

    ///<summary>
    ///  Gets a system-defined color.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Transparent: DNColor read get_Transparent;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF0F8FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property AliceBlue: DNColor read get_AliceBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFAEBD7.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property AntiqueWhite: DNColor read get_AntiqueWhite;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00FFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Aqua: DNColor read get_Aqua;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF7FFFD4.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Aquamarine: DNColor read get_Aquamarine;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF0FFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Azure: DNColor read get_Azure;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF5F5DC.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Beige: DNColor read get_Beige;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFE4C4.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Bisque: DNColor read get_Bisque;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF000000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Black: DNColor read get_Black;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFEBCD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property BlanchedAlmond: DNColor read get_BlanchedAlmond;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF0000FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Blue: DNColor read get_Blue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF8A2BE2.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property BlueViolet: DNColor read get_BlueViolet;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFA52A2A.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Brown: DNColor read get_Brown;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDEB887.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property BurlyWood: DNColor read get_BurlyWood;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF5F9EA0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property CadetBlue: DNColor read get_CadetBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF7FFF00.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Chartreuse: DNColor read get_Chartreuse;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFD2691E.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Chocolate: DNColor read get_Chocolate;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF7F50.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Coral: DNColor read get_Coral;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF6495ED.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property CornflowerBlue: DNColor read get_CornflowerBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFF8DC.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Cornsilk: DNColor read get_Cornsilk;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDC143C.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Crimson: DNColor read get_Crimson;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00FFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Cyan: DNColor read get_Cyan;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00008B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkBlue: DNColor read get_DarkBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF008B8B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkCyan: DNColor read get_DarkCyan;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFB8860B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkGoldenrod: DNColor read get_DarkGoldenrod;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFA9A9A9.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkGray: DNColor read get_DarkGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF006400.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkGreen: DNColor read get_DarkGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFBDB76B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkKhaki: DNColor read get_DarkKhaki;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF8B008B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkMagenta: DNColor read get_DarkMagenta;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF556B2F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkOliveGreen: DNColor read get_DarkOliveGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF8C00.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkOrange: DNColor read get_DarkOrange;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF9932CC.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkOrchid: DNColor read get_DarkOrchid;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF8B0000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkRed: DNColor read get_DarkRed;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFE9967A.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkSalmon: DNColor read get_DarkSalmon;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF8FBC8F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkSeaGreen: DNColor read get_DarkSeaGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF483D8B.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkSlateBlue: DNColor read get_DarkSlateBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF2F4F4F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkSlateGray: DNColor read get_DarkSlateGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00CED1.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkTurquoise: DNColor read get_DarkTurquoise;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF9400D3.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DarkViolet: DNColor read get_DarkViolet;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF1493.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DeepPink: DNColor read get_DeepPink;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00BFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DeepSkyBlue: DNColor read get_DeepSkyBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF696969.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DimGray: DNColor read get_DimGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF1E90FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property DodgerBlue: DNColor read get_DodgerBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFB22222.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Firebrick: DNColor read get_Firebrick;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFAF0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property FloralWhite: DNColor read get_FloralWhite;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF228B22.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property ForestGreen: DNColor read get_ForestGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF00FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Fuchsia: DNColor read get_Fuchsia;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDCDCDC.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Gainsboro: DNColor read get_Gainsboro;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF8F8FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property GhostWhite: DNColor read get_GhostWhite;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFD700.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Gold: DNColor read get_Gold;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDAA520.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Goldenrod: DNColor read get_Goldenrod;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF808080.
    ///</summary>
    ///<returns>
    ///  A  strcture representing a system-defined color.
    ///</returns>
    {class} property Gray: DNColor read get_Gray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF008000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Green: DNColor read get_Green;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFADFF2F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property GreenYellow: DNColor read get_GreenYellow;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF0FFF0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Honeydew: DNColor read get_Honeydew;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF69B4.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property HotPink: DNColor read get_HotPink;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFCD5C5C.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property IndianRed: DNColor read get_IndianRed;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF4B0082.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Indigo: DNColor read get_Indigo;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFFF0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Ivory: DNColor read get_Ivory;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF0E68C.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Khaki: DNColor read get_Khaki;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFE6E6FA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Lavender: DNColor read get_Lavender;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFF0F5.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LavenderBlush: DNColor read get_LavenderBlush;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF7CFC00.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LawnGreen: DNColor read get_LawnGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFACD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LemonChiffon: DNColor read get_LemonChiffon;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFADD8E6.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightBlue: DNColor read get_LightBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF08080.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightCoral: DNColor read get_LightCoral;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFE0FFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightCyan: DNColor read get_LightCyan;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFAFAD2.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightGoldenrodYellow: DNColor read get_LightGoldenrodYellow;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF90EE90.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightGreen: DNColor read get_LightGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFD3D3D3.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightGray: DNColor read get_LightGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFB6C1.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightPink: DNColor read get_LightPink;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFA07A.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightSalmon: DNColor read get_LightSalmon;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF20B2AA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightSeaGreen: DNColor read get_LightSeaGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF87CEFA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightSkyBlue: DNColor read get_LightSkyBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF778899.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightSlateGray: DNColor read get_LightSlateGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFB0C4DE.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightSteelBlue: DNColor read get_LightSteelBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFFE0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LightYellow: DNColor read get_LightYellow;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00FF00.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Lime: DNColor read get_Lime;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF32CD32.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property LimeGreen: DNColor read get_LimeGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFAF0E6.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Linen: DNColor read get_Linen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF00FF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Magenta: DNColor read get_Magenta;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF800000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Maroon: DNColor read get_Maroon;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF66CDAA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumAquamarine: DNColor read get_MediumAquamarine;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF0000CD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumBlue: DNColor read get_MediumBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFBA55D3.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumOrchid: DNColor read get_MediumOrchid;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF9370DB.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumPurple: DNColor read get_MediumPurple;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF3CB371.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumSeaGreen: DNColor read get_MediumSeaGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF7B68EE.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumSlateBlue: DNColor read get_MediumSlateBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00FA9A.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumSpringGreen: DNColor read get_MediumSpringGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF48D1CC.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumTurquoise: DNColor read get_MediumTurquoise;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFC71585.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MediumVioletRed: DNColor read get_MediumVioletRed;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF191970.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MidnightBlue: DNColor read get_MidnightBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF5FFFA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MintCream: DNColor read get_MintCream;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFE4E1.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property MistyRose: DNColor read get_MistyRose;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFE4B5.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Moccasin: DNColor read get_Moccasin;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFDEAD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property NavajoWhite: DNColor read get_NavajoWhite;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF000080.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Navy: DNColor read get_Navy;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFDF5E6.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property OldLace: DNColor read get_OldLace;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF808000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Olive: DNColor read get_Olive;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF6B8E23.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property OliveDrab: DNColor read get_OliveDrab;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFA500.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Orange: DNColor read get_Orange;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF4500.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property OrangeRed: DNColor read get_OrangeRed;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDA70D6.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Orchid: DNColor read get_Orchid;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFEEE8AA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PaleGoldenrod: DNColor read get_PaleGoldenrod;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF98FB98.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PaleGreen: DNColor read get_PaleGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFAFEEEE.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PaleTurquoise: DNColor read get_PaleTurquoise;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDB7093.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PaleVioletRed: DNColor read get_PaleVioletRed;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFEFD5.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PapayaWhip: DNColor read get_PapayaWhip;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFDAB9.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PeachPuff: DNColor read get_PeachPuff;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFCD853F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Peru: DNColor read get_Peru;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFC0CB.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Pink: DNColor read get_Pink;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFDDA0DD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Plum: DNColor read get_Plum;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFB0E0E6.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property PowderBlue: DNColor read get_PowderBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF800080.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Purple: DNColor read get_Purple;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF0000.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Red: DNColor read get_Red;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFBC8F8F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property RosyBrown: DNColor read get_RosyBrown;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF4169E1.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property RoyalBlue: DNColor read get_RoyalBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF8B4513.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SaddleBrown: DNColor read get_SaddleBrown;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFA8072.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Salmon: DNColor read get_Salmon;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF4A460.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SandyBrown: DNColor read get_SandyBrown;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF2E8B57.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SeaGreen: DNColor read get_SeaGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFF5EE.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SeaShell: DNColor read get_SeaShell;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFA0522D.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Sienna: DNColor read get_Sienna;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFC0C0C0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Silver: DNColor read get_Silver;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF87CEEB.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SkyBlue: DNColor read get_SkyBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF6A5ACD.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SlateBlue: DNColor read get_SlateBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF708090.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SlateGray: DNColor read get_SlateGray;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFAFA.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Snow: DNColor read get_Snow;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF00FF7F.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SpringGreen: DNColor read get_SpringGreen;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF4682B4.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property SteelBlue: DNColor read get_SteelBlue;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFD2B48C.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Tan: DNColor read get_Tan;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF008080.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Teal: DNColor read get_Teal;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFD8BFD8.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Thistle: DNColor read get_Thistle;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFF6347.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Tomato: DNColor read get_Tomato;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF40E0D0.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Turquoise: DNColor read get_Turquoise;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFEE82EE.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Violet: DNColor read get_Violet;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF5DEB3.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Wheat: DNColor read get_Wheat;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFFFF.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property White: DNColor read get_White;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFF5F5F5.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property WhiteSmoke: DNColor read get_WhiteSmoke;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FFFFFF00.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property Yellow: DNColor read get_Yellow;
    ///<summary>
    ///  Gets a system-defined color that has an ARGB value of #FF9ACD32.
    ///</summary>
    ///<returns>
    ///  A  representing a system-defined color.
    ///</returns>
    {class} property YellowGreen: DNColor read get_YellowGreen;
  end;

  ///<summary>
  ///  Represents class for color value which can be expressed in different color space.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Color')]
  DNColor = interface(DDN.mscorlib.DNObject)
  ['{EFF396AC-1637-3FE8-9912-62AEB12A8827}']
  { getters & setters } 

    function get_A: Double;
    function get_Data: TArray<Double>;
    function get_ColorSpace: DNColorSpace;
    function get_PatternColorSpace: DNPatternColorSpace;
    procedure set_PatternColorSpace(value: DNPatternColorSpace);

  { methods } 

    ///<summary>
    ///  Converts to string.
    ///</summary>
    ///<returns>
    ///  String representation of the Color object.
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  Converts color into rgb.
    ///</summary>
    ///<returns>
    ///  Rgb color value.
    ///</returns>
    function ToRgb: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Returns true if two Colors are equal.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>True in case Color objects are equal.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the alpha component value
    ///</summary>
    property A: Double read get_A;
    ///<summary>
    ///  Gets color value.
    ///</summary>
    property Data: TArray<Double> read get_Data;
    ///<summary>
    ///  Gets color space that the color represents.
    ///</summary>
    property ColorSpace: DNColorSpace read get_ColorSpace;
    ///<summary>
    ///  Represents a object that indicates the pattern colorspace.
    ///</summary>
    property PatternColorSpace: DNPatternColorSpace read get_PatternColorSpace write set_PatternColorSpace;
  end;

  TDNColor = class(TDNGenericImport<DNColorClass, DNColor>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNColumnInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{75444421-B340-5470-8523-01CED145B1B5}']
  { constructors } 

    {class} function init: DNColumnInfo;

  end;

  ///<summary>
  ///  This class represents a columns info.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ColumnInfo')]
  DNColumnInfo = interface(DDN.mscorlib.DNObject)
  ['{F6547A52-574E-3D92-ACFA-054BCA73AC6F}']
  { getters & setters } 

    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_ColumnSpacing: string;
    procedure set_ColumnSpacing(value: string);
    function get_ColumnCount: Int32;
    procedure set_ColumnCount(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a string that contains the width of columns.
    ///  The value of each column should be separated by blank.The default unit is point,
    ///  but cm, inch and percentage of available width are also supported.
    ///  For example,"120 2.5cm 1.5inch"
    ///</summary>
    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    ///<summary>
    ///  Gets or sets a string that contains the spacing between columns.
    ///  The value of each spacing should be separated by blank. The default unit is point,
    ///  but cm and inch are also supported.For example,"120 2.5cm 1.5inch".
    ///</summary>
    ///<remarks>
    ///  If this property is not set, default value 0 will be used for each spacing.
    ///</remarks>
    property ColumnSpacing: string read get_ColumnSpacing write set_ColumnSpacing;
    ///<summary>
    ///  Gets or sets a int value that indicates the number of columns.
    ///</summary>
    property ColumnCount: Int32 read get_ColumnCount write set_ColumnCount;
  end;

  TDNColumnInfo = class(TDNGenericImport<DNColumnInfoClass, DNColumnInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNComHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{28291306-6BD4-562F-BB27-9CA50066A741}']
  { constructors } 

    {class} function init: DNComHelper;

  end;

  ///<summary>
  ///  Provides methods for COM clients to load a document into Aspose.Pdf.
  ///</summary>
  ///<remarks>
  ///  Use the ComHelper class to load a document from a file or stream into a Document object in a COM application.
  ///  The Document class provides a default constructor to create a new document
  ///  and also provides overloaded constructors to load a document from a file or stream.
  ///  If you are using Aspose.Words from a .NET application, you can use all of the Document constructors directly, but if you are using Aspose.Pdf from a COM application,
  ///  only the default Document constructor is available.
  ///</remarks>
  [DNTypeName('Aspose.Pdf.ComHelper')]
  DNComHelper = interface(DDN.mscorlib.DNObject)
  ['{15B6B1FF-E9CC-357D-9BAF-D1591D62B04C}']
  { methods } 

    ///<summary>
    ///  Initialize and return new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    ///<returns>Document object</returns>
    function OpenStream(input: DDN.mscorlib.DNStream): DNDocument; overload;
    ///<summary>
    ///  Initialize and return new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Input stream object, corresponding pdf is password protected.</param>
    ///  <param name="password">User or owner password.</param>
    ///<returns>Document object</returns>
    function OpenStream(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    ///<summary>
    ///  Initialize and return new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    ///<returns>Document object</returns>
    function OpenStream(input: DDN.mscorlib.DNStream; isManagedStream: Boolean): DNDocument; overload;
    ///<summary>
    ///  Initialize and return new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    ///  <param name="password">User or owner password.</param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    ///<returns>Document object</returns>
    function OpenStream(input: DDN.mscorlib.DNStream; password: string; isManagedStream: Boolean): DNDocument; overload;
    ///<summary>
    ///  Open and return an existing document from a stream providing necessary converting to get pdf document.
    ///</summary>
    ///  <param name="input">
    ///  Input stream to convert into pdf document.
    ///</param>
    ///  <param name="options">
    ///  Represents properties for converting <paramref name="input" />
    ///  into pdf document.
    ///</param>
    ///<returns>Document object</returns>
    function OpenStream(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    ///<summary>
    ///  Just create and return Document using <paramref name="filename" />
    ///  . The same as <see cref="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)" />
    ///  .
    ///</summary>
    ///  <param name="filename">The name of the pdf document file. </param>
    ///<returns>Document object</returns>
    function OpenFile(filename: string): DNDocument; overload;
    ///<summary>
    ///  Initialize and return new instance of the <see cref="T:Aspose.Pdf.Document" />
    ///  class for working with encrypted document.
    ///</summary>
    ///  <param name="filename">Document file name.</param>
    ///  <param name="password">User or owner password.</param>
    ///<returns>Document object</returns>
    function OpenFile(filename: string; password: string): DNDocument; overload;
    ///<summary>
    ///  Initialize new instance of the <see cref="T:Aspose.Pdf.Document" />
    ///  class for working with encrypted document.
    ///</summary>
    ///  <param name="filename">Document file name.</param>
    ///  <param name="password">User or owner password.</param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    ///<returns>Document object</returns>
    function OpenFile(filename: string; password: string; isManagedStream: Boolean): DNDocument; overload;
    ///<summary>
    ///  Open an existing document from a file providing necessary converting oprions to get pdf document.
    ///</summary>
    ///  <param name="filename">
    ///  Input file to convert into pdf document.
    ///</param>
    ///  <param name="options">
    ///  Represents properties for converting <paramref name="filename" />
    ///  into pdf document.
    ///</param>
    ///<returns>Document object</returns>
    function OpenFile(filename: string; options: DNLoadOptions): DNDocument; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComHelper = class(TDNGenericImport<DNComHelperClass, DNComHelper>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCompositingParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{134551DE-FB0D-5B9F-AE21-1E2E6AA8EC5F}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" />
    ///  object.
    ///</summary>
    ///  <param name="blendMode">Blend mode of current graphics state.</param>
    {class} function init(blendMode: DNBlendMode): DNCompositingParameters; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" />
    ///  object.
    ///</summary>
    ///  <param name="blendMode">Blend mode of current graphics state.</param>
    ///  <param name="filterType">The image filter type.</param>
    {class} function init(blendMode: DNBlendMode; filterType: DNImageFilterType): DNCompositingParameters; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.CompositingParameters" />
    ///  object.
    ///</summary>
    ///  <param name="blendMode">Blend mode of current graphics state.</param>
    ///  <param name="filterType">The image filter type.</param>
    ///  <param name="isMasked">The adding mask flag.</param>
    {class} function init(blendMode: DNBlendMode; filterType: DNImageFilterType; isMasked: Boolean): DNCompositingParameters; overload;

  end;

  ///<summary>
  ///  Represents an object containing graphics compositing parameters of current graphics state.
  ///</summary>
  [DNTypeName('Aspose.Pdf.CompositingParameters')]
  DNCompositingParameters = interface(DDN.mscorlib.DNObject)
  ['{CE7367F9-56AF-338B-957C-BC576CCE68D7}']
  { getters & setters } 

    function get_BlendMode: DNBlendMode;
    function get_FilterType: DNImageFilterType;
    function get_IsMasked: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets blend mode of current graphics state.
    ///</summary>
    property BlendMode: DNBlendMode read get_BlendMode;
    ///<summary>
    ///  Gets the image filter type.
    ///</summary>
    property FilterType: DNImageFilterType read get_FilterType;
    ///<summary>
    ///  Gets the mask flag.
    ///</summary>
    property IsMasked: Boolean read get_IsMasked;
  end;

  TDNCompositingParameters = class(TDNGenericImport<DNCompositingParametersClass, DNCompositingParameters>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDestinationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA9C4B8F-E9B5-53FD-81FA-A54CF71402B2}']
  end;

  ///<summary>
  ///  Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.DestinationCollection')]
  DNDestinationCollection = interface(DDN.mscorlib.DNObject)
  ['{A6E7EA81-C7A3-3E5A-9D12-B92F4489C4FC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;

  { methods } 

    ///<summary>
    ///  Returns the page number of destination by the name.
    ///</summary>
    ///  <param name="destinameName">The name of destination.</param>
    ///  <param name="useCache">Determines whether cached version of collection is used or not.</param>
    ///<returns>The page number if destination was found; otherwise, -1.</returns>
    function GetPageNumber(destinameName: string; useCache: Boolean): Int32;
    ///<summary>
    ///  Returns the explicit destination by the name.
    ///</summary>
    ///  <param name="destinameName">The name of destination.</param>
    ///  <param name="useCache">Determines whether cached version of collection is used or not.</param>
    ///<returns>The ExplicitDestination object for destination found; otherwise, null.</returns>
    function GetExplicitDestination(destinameName: string; useCache: Boolean): DNExplicitDestination;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNDestinationCollection = class(TDNGenericImport<DNDestinationCollectionClass, DNDestinationCollection>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNDeviceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{89E18C8A-666A-5ACA-8F6D-4199439F19D3}']
  end;

  ///<summary>
  ///  Abstract class for all types of devices. Device is used to represent pdf document in some format.
  ///  For example, document page can be represented as image or text.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.Device')]
  DNDevice = interface(DDN.mscorlib.DNObject)
  ['{77AE60FD-E4BA-3BA2-89AB-E1D975649270}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDevice = class(TDNGenericImport<DNDeviceClass, DNDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNDocumentDeviceClass = interface(DNDeviceClass)
  ['{FC95C843-C4C3-5C8D-9539-A50D8599404C}']
  end;

  ///<summary>
  ///  Abstract class for all devices which is used to process the whole pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.DocumentDevice')]
  DNDocumentDevice = interface(DNDevice)
  ['{7D1A7E25-48B2-3281-8DAA-D73283E77E6E}']
  { methods } 

    ///<summary>
    ///  Each device represents some operation on the document, e.g. we can convert pdf document into another format.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="fromPage">
    ///  Defines the page from which to start processing.
    ///</param>
    ///  <param name="toPage">
    ///  Defines the last page to process.
    ///</param>
    ///  <param name="output">
    ///  Defines stream where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Processes the whole document and saves results into stream.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="output">
    ///  Defines stream where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Processes the whole document and saves results into file.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="outputFileName">
    ///  Defines file where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; outputFileName: string); overload;
    ///<summary>
    ///  Processes certain pages of the document and saves results into file.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="fromPage">
    ///  The first page to start processing.
    ///</param>
    ///  <param name="toPage">
    ///  The last page of processing.
    ///</param>
    ///  <param name="outputFileName">
    ///  Defines file where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    ///<summary>
    ///  Do Bradley binarization for input stream.
    ///</summary>
    ///  <param name="inputImageStream">The input image stream.</param>
    ///  <param name="outputImageStream">The output image stream.</param>
    ///  <param name="threshold">The threshold value between 0.0 and 1.0.</param>
    procedure BinarizeBradley(inputImageStream: DDN.mscorlib.DNStream; outputImageStream: DDN.mscorlib.DNStream; threshold: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentDevice = class(TDNGenericImport<DNDocumentDeviceClass, DNDocumentDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTiffDeviceClass = interface(DNDocumentDeviceClass)
  ['{704AE74D-A457-5ADE-B4BF-DB5F37770C06}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="resolution">
    ///  Resolution for the result image file.
    ///</param>
    {class} function init(resolution: DNResolution): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class with default settings.
    ///</summary>
    {class} function init: DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(width: Int32; height: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    ///  <param name="converter">
    ///  External converter
    ///</param>
    {class} function init(pageSize: DNPageSize; settings: DNTiffSettings; converter: DNIIndexBitmapConverter): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="settings">
    ///  Tiff settings, see <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; settings: DNTiffSettings): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNTiffDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffDevice" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNTiffDevice; overload;

  end;

  ///<summary>
  ///  This class helps to save pdf document page by page into the one tiff image.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.TiffDevice')]
  DNTiffDevice = interface(DNDocumentDevice)
  ['{EE6270AD-2252-32B7-88E7-956EE2461ECA}']
  { getters & setters } 

    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Settings: DNTiffSettings;
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts certain document pages into tiff and save it in the output stream.
    ///</summary>
    ///  <param name="document">
    ///  The document to convert.
    ///</param>
    ///  <param name="fromPage">
    ///  Defines page number from which converting will start.
    ///</param>
    ///  <param name="toPage">
    ///  Defines page number which will end the converting.
    ///</param>
    ///  <param name="output">
    ///  Output stream with tiff image.
    ///</param>
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Processes the whole document and saves results into stream.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="output">
    ///  Defines stream where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Processes the whole document and saves results into file.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="outputFileName">
    ///  Defines file where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; outputFileName: string); overload;
    ///<summary>
    ///  Processes certain pages of the document and saves results into file.
    ///</summary>
    ///  <param name="document">
    ///  The document to process.
    ///</param>
    ///  <param name="fromPage">
    ///  The first page to start processing.
    ///</param>
    ///  <param name="toPage">
    ///  The last page of processing.
    ///</param>
    ///  <param name="outputFileName">
    ///  Defines file where the results of processing are stored.
    ///</param>
    procedure Process(document: DNDocument; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    ///<summary>
    ///  Do Bradley binarization for input stream.
    ///</summary>
    ///  <param name="inputImageStream">The input image stream.</param>
    ///  <param name="outputImageStream">The output image stream.</param>
    ///  <param name="threshold">The threshold value between 0.0 and 1.0.</param>
    procedure BinarizeBradley(inputImageStream: DDN.mscorlib.DNStream; outputImageStream: DDN.mscorlib.DNStream; threshold: Double);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets settings for mapping pdf into tiff image.
    ///</summary>
    property Settings: DNTiffSettings read get_Settings;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNTiffDevice = class(TDNGenericImport<DNTiffDeviceClass, DNTiffDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNPageDeviceClass = interface(DNDeviceClass)
  ['{698E3BCC-8D56-5FBE-A156-BC64EA0A17C2}']
  end;

  ///<summary>
  ///  Abstract class for all devices which is used to process certain page the pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.PageDevice')]
  DNPageDevice = interface(DNDevice)
  ['{8A106CFE-559E-3D7C-9A88-BD828BB83ACE}']
  { methods } 

    ///<summary>
    ///  Perfoms some operation on the given page, e.g. converts page into graphic image.
    ///</summary>
    ///  <param name="page">
    ///  The page to process.
    ///</param>
    ///  <param name="output">
    ///  This stream contains the results of processing.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Perfoms some operation on the given page and saves results into the file.
    ///</summary>
    ///  <param name="page">
    ///  The page to process.
    ///</param>
    ///  <param name="outputFileName">
    ///  This file contains the results of processing.
    ///</param>
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageDevice = class(TDNGenericImport<DNPageDeviceClass, DNPageDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNImageDeviceClass = interface(DNPageDeviceClass)
  ['{6EC75F06-6D13-58B0-B3C8-45705D0CEDCB}']
  { constructors } 

    ///<summary>
    ///  Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" />
    ///  descendants, set resolution to 150x150.
    ///</summary>
    {class} function init: DNImageDevice; overload;
    ///<summary>
    ///  Abstract initializer for <see cref="T:Aspose.Pdf.Devices.ImageDevice" />
    ///  descendants.
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNImageDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions and default resolution (=150).
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNImageDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions and default resolution (=150).
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNImageDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions and resolution.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNImageDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions and resolution.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="P:Aspose.Pdf.Devices.ImageDevice.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNImageDevice; overload;

  end;

  ///<summary>
  ///  An abstract class for image devices.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.ImageDevice')]
  DNImageDevice = interface(DNPageDevice)
  ['{DA2DF0DA-8469-392D-8F79-1D2AC92C090B}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Perfoms some operation on the given page, e.g. converts page into graphic image.
    ///</summary>
    ///  <param name="page">
    ///  The page to process.
    ///</param>
    ///  <param name="output">
    ///  This stream contains the results of processing.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Perfoms some operation on the given page and saves results into the file.
    ///</summary>
    ///  <param name="page">
    ///  The page to process.
    ///</param>
    ///  <param name="outputFileName">
    ///  This file contains the results of processing.
    ///</param>
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNImageDevice = class(TDNGenericImport<DNImageDeviceClass, DNImageDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNBmpDeviceClass = interface(DNImageDeviceClass)
  ['{8735CB80-9342-510A-A3AD-6D83195C8CC0}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class with default resolution.
    ///</summary>
    {class} function init: DNBmpDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class.
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNBmpDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class with provided image dimensions and
    ///  resolution.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNBmpDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class with provided page size and
    ///  resolution.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNBmpDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class with provided image dimensions,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNBmpDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.BmpDevice" />
    ///  class with provided page size,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNBmpDevice; overload;

  end;

  ///<summary>
  ///  Represents image device that helps to save pdf document pages into bmp.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.BmpDevice')]
  DNBmpDevice = interface(DNImageDevice)
  ['{3E3172D6-E773-3C1D-9770-A13ECB7F506B}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts the page into bmp and saves it in the output stream.
    ///</summary>
    ///  <param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Output stream with bmp image.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNBmpDevice = class(TDNGenericImport<DNBmpDeviceClass, DNBmpDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNEmfDeviceClass = interface(DNImageDeviceClass)
  ['{7A7546A2-23D6-5D8F-A11F-0B3A6C744876}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" />
    ///  class with default resolution of raster image written to emf.
    ///</summary>
    {class} function init: DNEmfDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" />
    ///  class.
    ///  <param name="resolution">
    ///  Resolution for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNEmfDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" />
    ///  class with provided image dimensions,
    ///  and default resolution for the raster image written to emf (=150)
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNEmfDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.EmfDevice" />
    ///  class with provided page size,
    ///  and default resolution for the raster image written to emf (=150)
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNEmfDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions,
    ///  and resolution for the raster image written to emf.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNEmfDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided page size,
    ///  and resolution for the raster image written to emf.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the for the raster image written to emf, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNEmfDevice; overload;

  end;

  ///<summary>
  ///  Represents image device that helps to save pdf document pages into emf.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.EmfDevice')]
  DNEmfDevice = interface(DNImageDevice)
  ['{5A081FA0-6225-3980-880B-5438D9B1992A}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts the page into emf and saves it in the output stream.
    ///</summary>
    ///  <param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Output stream with emf image.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNEmfDevice = class(TDNGenericImport<DNEmfDeviceClass, DNEmfDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNGifDeviceClass = interface(DNImageDeviceClass)
  ['{7F69B686-9FEF-51C5-8C63-086D0EB187C4}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class with default resolution.
    ///</summary>
    {class} function init: DNGifDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class.
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNGifDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class with provided image dimensions and
    ///  resolution.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNGifDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class with provided page size and
    ///  resolution.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNGifDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class with provided image dimensions,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNGifDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.GifDevice" />
    ///  class with provided page size,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNGifDevice; overload;

  end;

  ///<summary>
  ///  Represents image device that helps to save pdf document pages into gif.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.GifDevice')]
  DNGifDevice = interface(DNImageDevice)
  ['{6D4B4ED3-679E-3CBA-91E9-389A96D4AD42}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts the page into gif and saves it in the output stream.
    ///</summary>
    ///  <param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Output stream with gif image.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNGifDevice = class(TDNGenericImport<DNGifDeviceClass, DNGifDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNJpegDeviceClass = interface(DNImageDeviceClass)
  ['{9600EF78-4476-5015-B372-9000D9DDB945}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with default resolution and maximum quality.
    ///</summary>
    {class} function init: DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class.
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class.
    ///</summary>
    ///  <param name="quality">
    ///  Specifies the level of compression for an image.
    ///  The range of useful values for the quality is from 0 to 100.
    ///  The lower the number specified, the higher the compression and therefore the lower the quality of the image.
    ///  Zero would give you the lowest quality image and 100 the highest.
    ///</param>
    {class} function init(quality: Int32): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class.
    ///</summary>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///  <param name="quality">
    ///  Specifies the level of compression for an image.
    ///  The range of useful values for the quality is from 0 to 100.
    ///  The lower the number specified, the higher the compression and therefore the lower the quality of the image.
    ///  Zero would give you the lowest quality image and 100 the highest.
    ///</param>
    {class} function init(resolution: DNResolution; quality: Int32): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions,
    ///  default resolution (=150) and maximum quality.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided page size,
    ///  default resolution (=150) and maximum quality.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions,
    ///  resolution and maximum quality.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided page size,
    ///  resolution and maximum quality.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided image dimensions,
    ///  resolution and quality.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///  <param name="quality">
    ///  Specifies the level of compression for an image.
    ///  The range of useful values for the quality is from 0 to 100.
    ///  The lower the number specified, the higher the compression and therefore the lower the quality of the image.
    ///  Zero would give you the lowest quality image and 100 the highest.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution; quality: Int32): DNJpegDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.JpegDevice" />
    ///  class with provided page size,
    ///  resolution and quality.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///  <param name="quality">
    ///  Specifies the level of compression for an image.
    ///  The range of useful values for the quality is from 0 to 100.
    ///  The lower the number specified, the higher the compression and therefore the lower the quality of the image.
    ///  Zero would give you the lowest quality image and 100 the highest.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution; quality: Int32): DNJpegDevice; overload;

  end;

  ///<summary>
  ///  Represents image device that helps to save pdf document pages into jpeg.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.JpegDevice')]
  DNJpegDevice = interface(DNImageDevice)
  ['{19BF1DDE-0E4A-3E70-BD19-DB7F8EEDB6FB}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts the page into jpeg and saves it in the output stream.
    ///</summary>
    ///  <param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Output stream with jpeg image.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNJpegDevice = class(TDNGenericImport<DNJpegDeviceClass, DNJpegDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNPngDeviceClass = interface(DNImageDeviceClass)
  ['{CA7CFFAE-D592-51E9-8800-04724F165056}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class with default resolution.
    ///</summary>
    {class} function init: DNPngDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class.
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    ///</summary>
    {class} function init(resolution: DNResolution): DNPngDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class with provided image dimensions and
    ///  resolution.
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(width: Int32; height: Int32; resolution: DNResolution): DNPngDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class with provided page size and
    ///  resolution.
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    ///  <param name="resolution">
    ///  Resolution for the result image file, see <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</param>
    {class} function init(pageSize: DNPageSize; resolution: DNResolution): DNPngDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class with provided image dimensions,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="width">
    ///  Image output width.
    ///</param>
    ///  <param name="height">
    ///  Image output height.
    ///</param>
    {class} function init(width: Int32; height: Int32): DNPngDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.PngDevice" />
    ///  class with provided page size,
    ///  default resolution (=150).
    ///</summary>
    ///  <param name="pageSize">
    ///  Page size of the output image.
    ///</param>
    {class} function init(pageSize: DNPageSize): DNPngDevice; overload;

  end;

  ///<summary>
  ///  Represents image device that helps to save pdf document pages into png.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.PngDevice')]
  DNPngDevice = interface(DNImageDevice)
  ['{E9F0C46E-390E-3860-9967-28009E4CAF68}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    function get_Width: Int32;
    function get_Height: Int32;

  { methods } 

    ///<summary>
    ///  Converts the page into png and saves it in the output stream.
    ///</summary>
    ///  <param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Output stream with png image.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets image resolution.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets image output width.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets image output height.
    ///</summary>
    property Height: Int32 read get_Height;
  end;

  TDNPngDevice = class(TDNGenericImport<DNPngDeviceClass, DNPngDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTextDeviceClass = interface(DNPageDeviceClass)
  ['{E6D06314-C3E5-5ACC-9279-253E263A48C2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" />
    ///  with text extraction options.
    ///</summary>
    ///  <param name="extractionOptions">
    ///  Text extraction options.
    ///</param>
    {class} function init(extractionOptions: DNTextExtractionOptions): DNTextDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" />
    ///  with the Raw text formatting mode and Unicode text encoding.
    ///</summary>
    {class} function init: DNTextDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" />
    ///  for the specified encoding.
    ///</summary>
    ///  <param name="encoding">
    ///  Encoding of extracted text
    ///</param>
    {class} function init(encoding: DDN.mscorlib.DNEncoding): DNTextDevice; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TextDevice" />
    ///  for the specified encoding with text extraction options.
    ///</summary>
    ///  <param name="extractionOptions">
    ///  Text extraction options.
    ///</param>
    ///  <param name="encoding">
    ///  Encoding of extracted text.
    ///</param>
    {class} function init(extractionOptions: DNTextExtractionOptions; encoding: DDN.mscorlib.DNEncoding): DNTextDevice; overload;

  end;

  ///<summary>
  ///  Represents class for converting pdf document pages into text.
  ///</summary>
  ///<remarks>
  ///  The <see cref="T:Aspose.Pdf.Devices.TextDevice" />
  ///  object is basically used to extract text from pdf page.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to extract text on the first PDF document page.
  ///<code lang="C#">
  ///  Document doc = new Document(inFile);
  ///  string extractedText;
  ///  using (MemoryStream ms = new MemoryStream())
  ///  {
  ///  // create text device
  ///  TextDevice device = new TextDevice();
  ///  // convert the page and save text to the stream
  ///  device.Process(doc.Pages[1], ms);
  ///  // use the extracted text
  ///  ms.Close();
  ///  extractedText = Encoding.Unicode.GetString(ms.ToArray());
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Devices.TextDevice')]
  DNTextDevice = interface(DNPageDevice)
  ['{2EDA726C-DC8E-30CC-B02B-76ED8376C5FB}']
  { getters & setters } 

    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    ///<summary>
    ///  Convert page and save it as text stream.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract text on the first PDF document page.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  string extractedText;
    ///  using (MemoryStream ms = new MemoryStream())
    ///  {
    ///  // create text device
    ///  TextDevice device = new TextDevice();
    ///  // convert the page and save text to the stream
    ///  device.Process(doc.Pages[1], ms);
    ///  // use the extracted text
    ///  ms.Close();
    ///  extractedText = Encoding.Unicode.GetString(ms.ToArray());
    ///  }
    ///</code></example><param name="page">
    ///  The page to convert.
    ///</param>
    ///  <param name="output">
    ///  Result stream.
    ///</param>
    procedure Process(page: DNPage; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Perfoms some operation on the given page and saves results into the file.
    ///</summary>
    ///  <param name="page">
    ///  The page to process.
    ///</param>
    ///  <param name="outputFileName">
    ///  This file contains the results of processing.
    ///</param>
    procedure Process(page: DNPage; outputFileName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text extraction options.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extracted text in raw order.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  string extractedText;
    ///  // create text device
    ///  TextDevice device = new TextDevice(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Raw));
    ///  // convert the page and save text to the stream
    ///  device.Process(doc.Pages[1], outFile);
    ///  // use the extracted text
    ///  extractedText = File.ReadAllText(outFile, Encoding.Unicode);
    ///</code></example>
    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
    ///<summary>
    ///  Gets or sets encoding of extracted text.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to represent extracted text in UTF-8 encoding.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  string extractedText;
    ///  // create text device
    ///  TextDevice device = new TextDevice(Encoding.UTF8);
    ///  // convert the page and save text to the stream
    ///  device.Process(doc.Pages[1], outFile);
    ///  // use the extracted text
    ///  extractedText = File.ReadAllText(outFile, Encoding.UTF8);
    ///</code></example>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNTextDevice = class(TDNGenericImport<DNTextDeviceClass, DNTextDevice>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNMarginsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A4DC4D5-D196-565E-9E47-4F27982094C1}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
    ///</summary>
    ///  <param name="left">The left coordinate.</param>
    ///  <param name="right">The right coordinate.</param>
    ///  <param name="top">The top coordinate.</param>
    ///  <param name="bottom">The bottom coordinate.</param>
    {class} function init(left: Int32; right: Int32; top: Int32; bottom: Int32): DNMargins; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Margins"></see> class.
    ///</summary>
    {class} function init: DNMargins; overload;

  end;

  ///<summary>
  ///  This class represents margins of an image.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.Margins')]
  DNMargins = interface(DDN.mscorlib.DNObject)
  ['{9E8C7AC6-34FD-3A81-BDE5-3B83ED4ABBE2}']
  { getters & setters } 

    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the left.
    ///</summary>
    ///<value>The left.</value>
    property Left: Int32 read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the right.
    ///</summary>
    ///<value>The right.</value>
    property Right: Int32 read get_Right write set_Right;
    ///<summary>
    ///  Gets or sets the top.
    ///</summary>
    ///<value>The top.</value>
    property Top: Int32 read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets the bottom.
    ///</summary>
    ///<value>The bottom.</value>
    property Bottom: Int32 read get_Bottom write set_Bottom;
  end;

  TDNMargins = class(TDNGenericImport<DNMarginsClass, DNMargins>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNResolutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B52B4056-7BD2-518E-A575-8F2CE5DFDF24}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</summary>
    ///  <param name="value">
    ///  Value which represents the horizontal and vertical resolution.
    ///</param>
    {class} function init(value: Int32): DNResolution; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.Resolution" />
    ///  class.
    ///</summary>
    ///  <param name="valueX">
    ///  Horizontal resolution.
    ///</param>
    ///  <param name="valueY">
    ///  Vertical resolution.
    ///</param>
    {class} function init(valueX: Int32; valueY: Int32): DNResolution; overload;

  end;

  ///<summary>
  ///  Represents class for holding image resolution.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.Resolution')]
  DNResolution = interface(DDN.mscorlib.DNObject)
  ['{49B807E8-EE70-3A96-AF29-391EA80C70A8}']
  { getters & setters } 

    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets horizontal image resolution.
    ///</summary>
    property X: Int32 read get_X write set_X;
    ///<summary>
    ///  Gets or sets vertical image resolution.
    ///</summary>
    property Y: Int32 read get_Y write set_Y;
  end;

  TDNResolution = class(TDNGenericImport<DNResolutionClass, DNResolution>) end;

  //-------------namespace: Aspose.Pdf.Devices----------------
  DNTiffSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C02E912-6128-547B-B596-650321A50B87}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    {class} function init: DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="shapeType">Type of the shape.</param>
    {class} function init(shapeType: DNShapeType): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="compressionType">Type of the compression.</param>
    {class} function init(compressionType: DNCompressionType): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="colorDepth">The color depth.</param>
    {class} function init(colorDepth: DNColorDepth): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="margins">The margins.</param>
    {class} function init(margins: DNMargins): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="compressionType">Type of the compression.</param>
    ///  <param name="colorDepth">The color depth.</param>
    ///  <param name="margins">The margins.</param>
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="compressionType">Type of the compression.</param>
    ///  <param name="colorDepth">The color depth.</param>
    ///  <param name="margins">The margins.</param>
    ///  <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins; skipBlankPages: Boolean): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="compressionType">Type of the compression.</param>
    ///  <param name="colorDepth">The color depth.</param>
    ///  <param name="margins">The margins.</param>
    ///  <param name="skipBlankPages">if set to <c>true</c> need to skip blank pages.</param>
    ///  <param name="shapeType">Type of the shape.</param>
    {class} function init(compressionType: DNCompressionType; colorDepth: DNColorDepth; margins: DNMargins; skipBlankPages: Boolean; shapeType: DNShapeType): DNTiffSettings; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Devices.TiffSettings" />
    ///  class.
    ///</summary>
    ///  <param name="skipBlankPages">if set to <c>true</c> [skip blank pages].</param>
    {class} function init(skipBlankPages: Boolean): DNTiffSettings; overload;

  end;

  ///<summary>
  ///  This class represents settings for importing pdf to Tiff.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Devices.TiffSettings')]
  DNTiffSettings = interface(DDN.mscorlib.DNObject)
  ['{5294A85A-26D6-3DEF-90C5-52EF8E88E941}']
  { getters & setters } 

    function get_Margins: DNMargins;
    function get_SkipBlankPages: Boolean;
    procedure set_SkipBlankPages(value: Boolean);
    function get_Compression: DNCompressionType;
    procedure set_Compression(value: DNCompressionType);
    function get_Depth: DNColorDepth;
    procedure set_Depth(value: DNColorDepth);
    function get_Shape: DNShapeType;
    procedure set_Shape(value: DNShapeType);
    function get_Brightness: Single;
    procedure set_Brightness(value: Single);
    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the margins.
    ///</summary>
    property Margins: DNMargins read get_Margins;
    ///<summary>
    ///  Gets or sets a value indicating whether to skip blank pages.
    ///</summary>
    ///<remarks>
    ///  Default value is false
    ///</remarks>
    ///<value><c>true</c> if need to skip blank pages; otherwise, <c>false</c>.</value>
    property SkipBlankPages: Boolean read get_SkipBlankPages write set_SkipBlankPages;
    ///<summary>
    ///  Gets or sets the type of the compression.
    ///</summary>
    ///<remarks>
    ///  Default value is CompressionType.LZW
    ///</remarks>
    ///<value>The type of the compression.</value>
    property Compression: DNCompressionType read get_Compression write set_Compression;
    ///<summary>
    ///  Gets or sets the color depth.
    ///</summary>
    ///<remarks>
    ///  Default value is ColorDepth.Default
    ///</remarks>
    ///<value>The color depth.</value>
    property Depth: DNColorDepth read get_Depth write set_Depth;
    ///<summary>
    ///  Gets or sets the type of the shape.
    ///</summary>
    ///<remarks>
    ///  Default value is ShapeType.None
    ///</remarks>
    ///<value>The type of the shape.</value>
    property Shape: DNShapeType read get_Shape write set_Shape;
    ///<summary>
    ///  Get or sets a value boundary of the transformation of colors in white and black.
    ///  This parameter can be applied with EncoderValue.CompressionCCITT4, EncoderValue.CompressionCCITT3, EncoderValue.CompressionRle or ColorDepth.Format1bpp == 1
    ///</summary>
    ///<value>Value of brightness should be in the range from 0 to 1. By default value is equal to 0.33f</value>
    property Brightness: Single read get_Brightness write set_Brightness;
    ///<summary>
    ///  Get or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
  end;

  TDNTiffSettings = class(TDNGenericImport<DNTiffSettingsClass, DNTiffSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE26CD5D-24AF-552A-8158-1A06DB667D46}']
  { static getter & setter } 

    {class} function get_IsLicensed: Boolean;

  { constructors } 

    ///<summary>
    ///  Initialize new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    {class} function init(input: DDN.mscorlib.DNStream): DNDocument; overload;
    ///<summary>
    ///  Initialize new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    ///  <param name="password">User or owner password.</param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    {class} function init(input: DDN.mscorlib.DNStream; password: string; isManagedStream: Boolean): DNDocument; overload;
    ///<summary>
    ///  Initialize new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Stream with pdf document. </param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    {class} function init(input: DDN.mscorlib.DNStream; isManagedStream: Boolean): DNDocument; overload;
    ///<summary>
    ///  Just init Document using <paramref name="filename" />
    ///  . The same as <see cref="M:Aspose.Pdf.Document.#ctor(System.IO.Stream)" />
    ///  .
    ///</summary>
    ///  <param name="filename">The name of the pdf document file. </param>
    {class} function init(filename: string): DNDocument; overload;
    ///<summary>
    ///  Initialize new Document instance from the <paramref name="input" />
    ///  stream.
    ///</summary>
    ///  <param name="input">Input stream object, corresponding pdf is password protected.</param>
    ///  <param name="password">User or owner password.</param>
    {class} function init(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    ///<summary>
    ///  Initializes empty document.
    ///</summary>
    {class} function init: DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a file providing necessary converting options to get pdf document.
    ///</summary>
    ///  <param name="filename">
    ///  Input file to convert into pdf document.
    ///</param>
    ///  <param name="options">
    ///  Represents properties for converting <paramref name="filename" />
    ///  into pdf document.
    ///</param>
    {class} function init(filename: string; options: DNLoadOptions): DNDocument; overload;
    ///<summary>
    ///  Opens an existing document from a stream providing necessary converting to get pdf document.
    ///</summary>
    ///  <param name="input">
    ///  Input stream to convert into pdf document.
    ///</param>
    ///  <param name="options">
    ///  Represents properties for converting <paramref name="input" />
    ///  into pdf document.
    ///</param>
    {class} function init(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Document" />
    ///  class for working with encrypted document.
    ///</summary>
    ///  <param name="filename">Document file name.</param>
    ///  <param name="password">User or owner password.</param>
    {class} function init(filename: string; password: string): DNDocument; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Document" />
    ///  class for working with encrypted document.
    ///</summary>
    ///  <param name="filename">Document file name.</param>
    ///  <param name="password">User or owner password.</param>
    ///  <param name="isManagedStream">if set to <c>true</c> inner stream is closed before exit; otherwise, is not.</param>
    {class} function init(filename: string; password: string; isManagedStream: Boolean): DNDocument; overload;

  { static methods } 

    ///<summary>
    ///  Converts source file in source format into destination file in destination format.
    ///</summary>
    ///  <param name="srcFileName">The source file name.</param>
    ///  <param name="loadOptions">The source file format.</param>
    ///  <param name="dstFileName">The destination file name.</param>
    ///  <param name="saveOptions">The destination file format.</param>
    {class} procedure Convert(srcFileName: string; loadOptions: DNLoadOptions; dstFileName: string; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Converts stream in source format into destination file in destination format.
    ///</summary>
    ///  <param name="srcStream">The source stream.</param>
    ///  <param name="loadOptions">The source stream format.</param>
    ///  <param name="dstFileName">The destination file name.</param>
    ///  <param name="saveOptions">The destination file format.</param>
    {class} procedure Convert(srcStream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; dstFileName: string; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Converts source file in source format into stream in destination format.
    ///</summary>
    ///  <param name="srcFileName">The source file name.</param>
    ///  <param name="loadOptions">The source file format.</param>
    ///  <param name="dstStream">The destination stream.</param>
    ///  <param name="saveOptions">The destination stream format.</param>
    {class} procedure Convert(srcFileName: string; loadOptions: DNLoadOptions; dstStream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;
    ///<summary>
    ///  Converts stream in source format into stream in destination format.
    ///</summary>
    ///  <param name="srcStream">The source stream.</param>
    ///  <param name="loadOptions">The source stream format.</param>
    ///  <param name="dstStream">The destination stream.</param>
    ///  <param name="saveOptions">The destination file format.</param>
    {class} procedure Convert(srcStream: DDN.mscorlib.DNStream; loadOptions: DNLoadOptions; dstStream: DDN.mscorlib.DNStream; saveOptions: DNSaveOptions); overload;

  { static propertys } 

    ///<summary>
    ///  Gets licensed state of the system. Returns true is system works in licensed mode and false otherwise.
    ///</summary>
    {class} property IsLicensed: Boolean read get_IsLicensed;
  end;

  ///<summary>
  ///  Class representing PDF document
  ///</summary>
  [DNTypeName('Aspose.Pdf.Document')]
  DNDocument = interface(DDN.mscorlib.DNObject)
  ['{BD40B53E-FD87-36AF-8C59-B05FB86C29EC}']
  { getters & setters } 

    function get_JavaScript: DNJavaScriptCollection;
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_EnableSignatureSanitization: Boolean;
    procedure set_EnableSignatureSanitization(value: Boolean);
    function get_IsPdfaCompliant: Boolean;
    function get_IsPdfUaCompliant: Boolean;
    function get_IsXrefGapsAllowed: Boolean;
    procedure set_IsXrefGapsAllowed(value: Boolean);
    function get_NamedDestinations: DNNamedDestinationCollection;
    function get_Destinations: DNDestinationCollection;
    function get_PdfFormat: DNPdfFormat;
    function get_EmbedStandardFonts: Boolean;
    procedure set_EmbedStandardFonts(value: Boolean);
    function get_DisableFontLicenseVerifications: Boolean;
    procedure set_DisableFontLicenseVerifications(value: Boolean);
    function get_FontUtilities: DNDocument_IDocumentFontUtilities;
    function get_Collection: DNCollection;
    procedure set_Collection(value: DNCollection);
    function get_Version: string;
    function get_OpenAction: DNIAppointment;
    procedure set_OpenAction(value: DNIAppointment);
    function get_HideToolBar: Boolean;
    procedure set_HideToolBar(value: Boolean);
    function get_HideMenubar: Boolean;
    procedure set_HideMenubar(value: Boolean);
    function get_HideWindowUI: Boolean;
    procedure set_HideWindowUI(value: Boolean);
    function get_FitWindow: Boolean;
    procedure set_FitWindow(value: Boolean);
    function get_CenterWindow: Boolean;
    procedure set_CenterWindow(value: Boolean);
    function get_DisplayDocTitle: Boolean;
    procedure set_DisplayDocTitle(value: Boolean);
    function get_Pages: DNPageCollection;
    function get_Outlines: DNOutlineCollection;
    function get_Actions: DNDocumentActionCollection;
    function get_Form: DNForms_Form;
    function get_EmbeddedFiles: DNEmbeddedFileCollection;
    function get_Direction: DNDirection;
    procedure set_Direction(value: DNDirection);
    function get_PageMode: DNPageMode;
    procedure set_PageMode(value: DNPageMode);
    function get_NonFullScreenPageMode: DNPageMode;
    procedure set_NonFullScreenPageMode(value: DNPageMode);
    function get_PageLayout: DNPageLayout;
    procedure set_PageLayout(value: DNPageLayout);
    function get_Duplex: DNPrintDuplex;
    procedure set_Duplex(value: DNPrintDuplex);
    function get_FileName: string;
    function get_Info: DNDocumentInfo;
    function get_Metadata: DNMetadata;
    function get_LogicalStructure: DNRootElement;
    function get_IsLinearized: Boolean;
    procedure set_IsLinearized(value: Boolean);
    function get_Permissions: Int32;
    function get_IsEncrypted: Boolean;
    function get_Id: DNId;
    function get_Background: DNColor;
    procedure set_Background(value: DNColor);
    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_IgnoreCorruptedObjects: Boolean;
    procedure set_IgnoreCorruptedObjects(value: Boolean);
    function get_PageLabels: DNPageLabelCollection;
    function get_EnableObjectUnload: Boolean;
    procedure set_EnableObjectUnload(value: Boolean);
    function get_TaggedContent: DNITaggedContent;

  { events } 

    procedure add_FontSubstitution(value: DNDocument_FontSubstitutionHandler);
    procedure remove_FontSubstitution(value: DNDocument_FontSubstitutionHandler);

  { methods } 

    ///<summary>
    ///  Removes all fields from the document and place their values instead.
    ///</summary>
    ///  <param name="flattenSettings">Settings for flattening process.</param>
    procedure Flatten(flattenSettings: DNForm_FlattenSettings); overload;
    ///<summary>
    ///  Encrypts the document. Call then Save to get encrypted version of the document.
    ///</summary>
    ///  <param name="userPassword">User password.</param>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="privileges">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" />
    ///  for details.</param>
    ///  <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" />
    ///  for details.</param>
    ///  <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    procedure Encrypt(userPassword: string; ownerPassword: string; privileges: DNDocumentPrivilege; cryptoAlgorithm: DNCryptoAlgorithm; usePdf20: Boolean); overload;
    ///<summary>
    ///  Encrypts the document. Call then Save to get encrypted version of the document.
    ///</summary>
    ///  <param name="userPassword">User password.</param>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" />
    ///  for details.</param>
    ///  <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" />
    ///  for details.</param>
    procedure Encrypt(userPassword: string; ownerPassword: string; permissions: DNPermissions; cryptoAlgorithm: DNCryptoAlgorithm); overload;
    ///<summary>
    ///  Encrypts the document. Call then Save to get encrypted version of the document.
    ///</summary>
    ///  <param name="userPassword">User password.</param>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="permissions">Document permissions, see <see cref="P:Aspose.Pdf.Document.Permissions" />
    ///  for details.</param>
    ///  <param name="cryptoAlgorithm">Cryptographic algorithm, see <see cref="P:Aspose.Pdf.Document.CryptoAlgorithm" />
    ///  for details.</param>
    ///  <param name="usePdf20">Support for revision 6 (Extension 8).</param>
    procedure Encrypt(userPassword: string; ownerPassword: string; permissions: DNPermissions; cryptoAlgorithm: DNCryptoAlgorithm; usePdf20: Boolean); overload;
    ///<summary>
    ///  Changes document passwords. This action can be done only using owner password.
    ///</summary>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="newUserPassword">New user password.</param>
    ///  <param name="newOwnerPassword">New owner password.</param>
    procedure ChangePasswords(ownerPassword: string; newUserPassword: string; newOwnerPassword: string);
    ///<summary>
    ///  Decrypts the document. Call then Save to obtain decrypted version of the document.
    ///</summary>
    procedure Decrypt;
    ///<summary>
    ///  Linearize document in order to
    ///  - open the first page as quickly as possible;
    ///  - display next page or follow by link to the next page as quickly as possible;
    ///  - display the page incrementally as it arrives when data for a page is delivered over a slow channel (display the most useful data first);
    ///  - permit user interaction, such as following a link, to be performed even before the entire page has been received and displayed.
    ///  Invoking this method doesn't actually saves the document. On the contrary the document only is prepared to have optimized structure,
    ///  call then Save to get optimized document.
    ///</summary>
    procedure Optimize;
    ///<summary>
    ///  Save document incrementally (i.e. using incremental update technque).
    ///</summary>
    ///<remarks>
    ///  In order to save document incremetally we should open the document file for writing.
    ///  Therefore Document must be initialized with writable stream like in the next code snippet:
    ///  Document doc = new Document(new FileStream("document.pdf", FileMode.Open, FileAccess.ReadWrite));
    ///  // make some changes and save the document incrementally
    ///  doc.Save();
    ///</remarks>
    procedure Save; overload;
    ///<summary>
    ///  Saves the document with a new name along with a file format.
    ///</summary>
    ///  <param name="outputFileName">Path to file where the document will be stored.</param>
    ///  <param name="format">Format options.</param>
    procedure Save(outputFileName: string; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves the document with a new name along with a file format.
    ///</summary>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.ArgumentException" />
    ///  when <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception><param name="outputStream">Stream where the document will be stored.</param>
    ///  <param name="format">Format options.</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream; format: DNSaveFormat); overload;
    ///<summary>
    ///  Saves the document with a new name setting its save options.
    ///</summary>
    ///  <param name="outputFileName">Path to file where the document will be stored.</param>
    ///  <param name="options">Save options.</param>
    procedure Save(outputFileName: string; options: DNSaveOptions); overload;
    ///<summary>
    ///  Saves the document to a stream with a save options.
    ///</summary>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.ArgumentException" />
    ///  when <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  is passed to a method. Save a document to the html stream is not supported. Please use method save to the file.</exception><param name="outputStream">Stream where the document will be stored.</param>
    ///  <param name="options">Save options.</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream; options: DNSaveOptions); overload;
    ///<summary>
    ///  Saves the document to a response stream with a save options.
    ///</summary>
    ///  <param name="response">Encapsulates HTTP-response information.</param>
    ///  <param name="outputFileName">Simple file name, i.e. without path.</param>
    ///  <param name="disposition">Represents a MIME protocol Content-Disposition header.</param>
    ///  <param name="options">Save options.</param>
    procedure Save(response: DDN.Aspose.Common.DNHttpResponse; outputFileName: string; disposition: DNContentDisposition; options: DNSaveOptions); overload;
    ///<summary>
    ///  Closes all resources used by this document.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Optimize resources in the document:
    ///  1. Resources which are not used on the document pages are removed;
    ///  2. Equal resources are joined into one object;
    ///  3. Unused objects are deleted.
    ///</summary>
    procedure OptimizeResources; overload;
    ///<summary>
    ///  Optimize resources in the document according to defined optimization strategy.
    ///</summary>
    ///  <param name="strategy">Optimization strategy.</param>
    procedure OptimizeResources(strategy: DNOptimization_OptimizationOptions); overload;
    ///<summary>
    ///  Returns item value from catalog dictionary.
    ///</summary>
    ///  <param name="key">The key of item.</param>
    ///<returns>Item value - if key was successfully found; otherwise, null.</returns>
    function GetCatalogValue(key: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Clears memory
    ///</summary>
    procedure FreeMemory;
    ///<summary>
    ///  Save document to XML.
    ///</summary>
    ///  <param name="file">The document model xml file</param>
    procedure SaveXml(&file: string);
    ///<summary>
    ///  Gets a object with specified ID in the document.
    ///</summary>
    ///  <param name="id">The object id.</param>
    ///<returns>The object with specified id. Null if the id is not found.</returns>
    function GetObjectById(id: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  Bind xml to document
    ///</summary>
    ///  <param name="file">The xml file</param>
    procedure BindXml(&file: string); overload;
    ///<summary>
    ///  Repairs broken document.
    ///</summary>
    procedure Repair;
    ///<summary>
    ///  Bind xml/xsl to document
    ///</summary>
    ///  <param name="xmlFile">The xml file.</param>
    ///  <param name="xslFile">The xsl file if XSLT is used.</param>
    procedure BindXml(xmlFile: string; xslFile: string); overload;
    ///<summary>
    ///  Bind xml/xsl to document
    ///</summary>
    ///  <param name="xmlStream">The xml stream.</param>
    ///  <param name="xslStream">The xsl stream if XSLT is used.</param>
    procedure BindXml(xmlStream: DDN.mscorlib.DNStream; xslStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Bind xml/xsl to document
    ///</summary>
    ///  <param name="xmlStream">The xml stream.</param>
    ///  <param name="xslStream">The xsl stream if XSLT is used.</param>
    ///  <param name="settings">The xml reader settings.</param>
    procedure BindXml(xmlStream: DDN.mscorlib.DNStream; xslStream: DDN.mscorlib.DNStream; settings: DDN.Aspose.Common.DNXmlReaderSettings); overload;
    ///<summary>
    ///  Bind xml to document
    ///</summary>
    ///  <param name="stream">The xml stream.</param>
    procedure BindXml(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Get XMP metadata from document.
    ///</summary>
    ///  <param name="stream">Stream where metadata will be stored.</param>
    procedure GetXmpMetadata(stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Set XMP metadata of document.
    ///</summary>
    ///  <param name="stream">Stream which contains XMP metadata.</param>
    procedure SetXmpMetadata(stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Validates document.
    ///</summary>
    ///  <param name="doRepair">If true found issues will be repaired.</param>
    ///<returns></returns>
    function Check(doRepair: Boolean): Boolean;
    ///<summary>
    ///  Process paragraphs for generator.
    ///</summary>
    procedure ProcessParagraphs;
    ///<summary>
    ///  Stores document into stream.
    ///</summary>
    ///  <param name="output">Stream where document shell be stored.</param>
    procedure Save(output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves document into the specified file.
    ///</summary>
    ///  <param name="outputFileName">Path to file where the document will be stored.</param>
    procedure Save(outputFileName: string); overload;
    ///<summary>
    ///  Exports all document annotations to XFDF file
    ///</summary>
    ///  <param name="fileName">XFDF file name</param>
    procedure ExportAnnotationsToXfdf(fileName: string); overload;
    ///<summary>
    ///  Export all document annotations into stream.
    ///</summary>
    ///  <param name="stream">Stream where store XFDF.</param>
    procedure ExportAnnotationsToXfdf(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sends the whole document to the document device for processing.
    ///</summary>
    ///  <param name="device">
    ///  Document device which is used to process the document.
    ///</param>
    ///  <param name="output">
    ///  Output stream contains the results of the document processing with given device.
    ///</param>
    procedure SendTo(device: DNDocumentDevice; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sends the certain pages of the document to the document device for processing.
    ///</summary>
    ///  <param name="device">
    ///  Document device which is used to process the document.
    ///</param>
    ///  <param name="fromPage">
    ///  The first page for processing.
    ///</param>
    ///  <param name="toPage">
    ///  The last page for processing.
    ///</param>
    ///  <param name="output">
    ///  Output stream contains the results of the document pages processing with given device.
    ///</param>
    procedure SendTo(device: DNDocumentDevice; fromPage: Int32; toPage: Int32; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Sends the whole document to the document device for processing.
    ///</summary>
    ///  <param name="device">
    ///  Document device which is used to process the document.
    ///</param>
    ///  <param name="outputFileName">
    ///  Output file name with the results of processing.
    ///</param>
    procedure SendTo(device: DNDocumentDevice; outputFileName: string); overload;
    ///<summary>
    ///  Sends the whole document to the document device for processing.
    ///</summary>
    ///  <param name="device">
    ///  Document device which is used to process the document.
    ///</param>
    ///  <param name="fromPage">
    ///  The first page for processing.
    ///</param>
    ///  <param name="toPage">
    ///  The last page for processing.
    ///</param>
    ///  <param name="outputFileName">
    ///  Output file name with the results of processing.
    ///</param>
    procedure SendTo(device: DNDocumentDevice; fromPage: Int32; toPage: Int32; outputFileName: string); overload;
    ///<summary>
    ///  Removes metadata from the document.
    ///</summary>
    procedure RemoveMetadata;
    ///<summary>
    ///  Imports annotations from XFDF file to document.
    ///</summary>
    ///  <param name="fileName">XFDF file name</param>
    procedure ImportAnnotationsFromXfdf(fileName: string); overload;
    ///<summary>
    ///  Imports annotations from stream to document.
    ///</summary>
    ///  <param name="stream">Stream contains XFDF data.</param>
    procedure ImportAnnotationsFromXfdf(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Validate document into the specified file.
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where the comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///<returns>The operation result</returns>
    function Validate(outputLogFileName: string; format: DNPdfFormat): Boolean; overload;
    ///<summary>
    ///  Convert document and save errors into the specified file.
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where the comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    ///  <param name="transparencyAction">Action for image masked objects</param>
    ///<returns>The operation result</returns>
    function Convert(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): Boolean; overload;
    ///<summary>
    ///  Convert document and save errors into the specified file.
    ///</summary>
    ///  <param name="outputLogStream">Stream where the comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    ///  <param name="transparencyAction">Action for image masked objects</param>
    ///<returns>The operation result</returns>
    function Convert(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): Boolean; overload;
    ///<summary>
    ///  Convert document and save errors into the specified file.
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where the comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    ///<returns>The operation result</returns>
    function Convert(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction): Boolean; overload;
    ///<summary>
    ///  Convert document using specified conversion options
    ///</summary>
    ///  <param name="options">set of options for convert PDF document</param>
    ///<returns>The operation result</returns>
    function Convert(options: DNPdfFormatConversionOptions): Boolean; overload;
    ///<summary>
    ///  Convert page to PNG for DSR, OMR , OCR
    ///</summary>
    ///<returns></returns>
    function ConvertPageToPNGMemoryStream(page: DNPage): DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Validate document into the specified file.
    ///</summary>
    ///  <param name="outputLogStream">Stream where the comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///<returns>The operation result</returns>
    function Validate(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat): Boolean; overload;
    ///<summary>
    ///  Validate document into the specified file.
    ///</summary>
    ///  <param name="options">set of options for convert PDF document</param>
    ///<returns>The operation result</returns>
    function Validate(options: DNPdfFormatConversionOptions): Boolean; overload;
    ///<summary>
    ///  Convert document and save errors into the specified file.
    ///</summary>
    ///  <param name="callback">Action for objects that can not be converted</param>
    ///<returns>The operation result</returns>
    function Convert(callback: DNDocument_CallBackGetHocr): Boolean; overload;
    ///<summary>
    ///  Convert document and save errors into the specified stream.
    ///</summary>
    ///  <param name="outputLogStream">Stream where the comments will be stored.</param>
    ///  <param name="format">Pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    ///<returns>The operation result</returns>
    function Convert(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction): Boolean; overload;
    ///<summary>
    ///  Removes all fields from the document and place their values instead.
    ///</summary>
    procedure Flatten; overload;
    ///<summary>
    ///  Remove pdfa compliance from the document
    ///</summary>
    procedure RemovePdfaCompliance;
    ///<summary>
    ///  Remove pdfUa compliance from the document
    ///</summary>
    procedure RemovePdfUaCompliance;
    ///<summary>
    ///  Set Title for Pdf Document
    ///</summary>
    ///  <param name="title">Document's title</param>
    procedure SetTitle(title: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Collection of JavaScript of document level.
    ///</summary>
    property JavaScript: DNJavaScriptCollection read get_JavaScript;
    ///<summary>
    ///  Gets or sets the page info.(for generator only)
    ///</summary>
    ///<value>The page info.</value>
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    ///<summary>
    ///  Gets or sets flag to manage signature fields sanitization. Enabled by default.
    ///</summary>
    property EnableSignatureSanitization: Boolean read get_EnableSignatureSanitization write set_EnableSignatureSanitization;
    ///<summary>
    ///  Gets the is document pdfa compliant.
    ///</summary>
    property IsPdfaCompliant: Boolean read get_IsPdfaCompliant;
    ///<summary>
    ///  Gets the is document pdfua compliant.
    ///</summary>
    property IsPdfUaCompliant: Boolean read get_IsPdfUaCompliant;
    ///<summary>
    ///  Gets or sets  the is document pdfa compliant.
    ///</summary>
    property IsXrefGapsAllowed: Boolean read get_IsXrefGapsAllowed write set_IsXrefGapsAllowed;
    ///<summary>
    ///  Collection of Named Destination in the document.
    ///</summary>
    property NamedDestinations: DNNamedDestinationCollection read get_NamedDestinations;
    ///<summary>
    ///  Gets the collection of destinations.
    ///  Obsolete. Please use NamedDestinations.
    ///</summary>
    property Destinations: DNDestinationCollection read get_Destinations;
    ///<summary>
    ///  Gets PDF format
    ///</summary>
    property PdfFormat: DNPdfFormat read get_PdfFormat;
    ///<summary>
    ///  Property which declares that document must embed all standard Type1 fonts
    ///  which  has flag IsEmbedded set into true. All PDF fonts can be embedded
    ///  into document simply via setting of flag IsEmbedded into true, but PDF standard Type1 fonts is an exception from this rule.
    ///  Standard Type1 font embedding requires much time, so to embed these fonts it's necessary
    ///  not only set flag IsEmbedded into true for specified font but also set
    ///  an additiona flag on document's level - EmbedStandardFonts = true;
    ///  This property can be set only one time for all fonts.
    ///  By default false.
    ///</summary>
    property EmbedStandardFonts: Boolean read get_EmbedStandardFonts write set_EmbedStandardFonts;
    property DisableFontLicenseVerifications: Boolean read get_DisableFontLicenseVerifications write set_DisableFontLicenseVerifications;
    ///<summary>
    ///  IDocumentFontUtilities instance
    ///</summary>
    property FontUtilities: DNDocument_IDocumentFontUtilities read get_FontUtilities;
    ///<summary>
    ///  Gets collection of document.
    ///</summary>
    property Collection: DNCollection read get_Collection write set_Collection;
    ///<summary>
    ///  Gets a version of Pdf from Pdf file header.
    ///</summary>
    property Version: string read get_Version;
    ///<summary>
    ///  Gets or sets action performed at document opening.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get CenterWindow flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  IAppointment value = document.OpenAction;
    ///</code></example>
    property OpenAction: DNIAppointment read get_OpenAction write set_OpenAction;
    ///<summary>
    ///  Gets or sets flag specifying whether toolbar should be hidden when document is active.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get HideToolBar flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.HideToolBar;
    ///</code></example>
    property HideToolBar: Boolean read get_HideToolBar write set_HideToolBar;
    ///<summary>
    ///  Gets or sets flag specifying whether menu bar should be hidden when document is active.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get HideMenubar flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.HideMenubar;
    ///</code></example>
    property HideMenubar: Boolean read get_HideMenubar write set_HideMenubar;
    ///<summary>
    ///  Gets or sets flag specifying whether user interface elements should be hidden when document is active.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get HideWindowUI flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.HideWindowUI;
    ///</code></example>
    property HideWindowUI: Boolean read get_HideWindowUI write set_HideWindowUI;
    ///<summary>
    ///  Gets or sets flag specifying whether document window must be resized to fit the first displayed page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get FitWindow flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.FitWindow;
    ///</code></example>
    property FitWindow: Boolean read get_FitWindow write set_FitWindow;
    ///<summary>
    ///  Gets or sets flag specifying whether position of the document's window will be centerd on the screen.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get CenterWindow flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.CenterWindow;
    ///</code></example>
    property CenterWindow: Boolean read get_CenterWindow write set_CenterWindow;
    ///<summary>
    ///  Gets or sets flag specifying whether document's window title bar should display document title.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get DisplayDocTitle flag:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  bool value = document.DisplayDocTitle;
    ///</code></example>
    property DisplayDocTitle: Boolean read get_DisplayDocTitle write set_DisplayDocTitle;
    ///<summary>
    ///  Gets or sets collection of document pages.
    ///  Note that pages are numbered from 1 in collection.
    ///</summary>
    ///<example>
    ///  Example below demonstrates how to operate with the document pages:
    ///  How to obtain number of pages and how to obtain rectangle of starting page of the document.
    ///<code lang="C#">
    ///  Aspose.Pdf.Document document = new Aspose.Pdf.Document("sample.pdf");
    ///  Aspose.Pdf.PageCollection pages = document.Pages;
    ///  System.Console.WriteLine("Document contains " + pages.Count);
    ///  Page page = pages[1];
    ///  Rectangle rect = page.Rect;
    ///</code></example>
    property Pages: DNPageCollection read get_Pages;
    ///<summary>
    ///  Gets document outlines.
    ///</summary>
    property Outlines: DNOutlineCollection read get_Outlines;
    ///<summary>
    ///  Gets document actions. This property is instance of DocumentActions class which allows to get/set BeforClosing, BeforSaving, etc. actions.
    ///</summary>
    ///<example>
    ///  This example demonstrates how to obtain after open action of the document:
    ///<code lang="C#">
    ///  Aspose.Pdf.Document document = new Aspose.Pdf.Document("d:\\work\\aspose\\aspose.pdf.kit.net.new\\trunk\\testdata\\Aspose.Pdf\\PdfWithOpenAction.pdf");
    ///  Aspose.Pdf.Annotations.DocumentActionCollection actions = document.Actions;
    ///  Aspose.Pdf.Annotations.PdfAction afterSavingAction = actions.AfterSaving;
    ///</code></example>
    property Actions: DNDocumentActionCollection read get_Actions;
    ///<summary>
    ///  Gets Acro Form of the document.
    ///</summary>
    property Form: DNForms_Form read get_Form;
    ///<summary>
    ///  Gets collection of files embedded to document.
    ///</summary>
    property EmbeddedFiles: DNEmbeddedFileCollection read get_EmbeddedFiles;
    ///<summary>
    ///  Gets or sets reading order of text: L2R (left to right) or R2L (right to left).
    ///</summary>
    property Direction: DNDirection read get_Direction write set_Direction;
    ///<summary>
    ///  Gets or sets page mode, specifying how document should be displayed when opened.
    ///</summary>
    property PageMode: DNPageMode read get_PageMode write set_PageMode;
    ///<summary>
    ///  Gets or sets page mode, specifying how to display the document on exiting full-screen mode.
    ///</summary>
    property NonFullScreenPageMode: DNPageMode read get_NonFullScreenPageMode write set_NonFullScreenPageMode;
    ///<summary>
    ///  Gets or sets page layout which shall be used when the document is opened.
    ///</summary>
    property PageLayout: DNPageLayout read get_PageLayout write set_PageLayout;
    ///<summary>
    ///  Gets or sets print duplex mode handling option to use when printing the file from the print dialog.
    ///</summary>
    property Duplex: DNPrintDuplex read get_Duplex write set_Duplex;
    ///<summary>
    ///  Name of the PDF file that caused this document
    ///</summary>
    property FileName: string read get_FileName;
    ///<summary>
    ///  Gets document info.
    ///</summary>
    property Info: DNDocumentInfo read get_Info;
    ///<summary>
    ///  Document metadata.
    ///  (A PDF document may include general information,
    ///  such as the document's title, author, and creation and modification dates.
    ///  Such global information about the document (as opposed to its content or structure) is called metadata
    ///  and is intended to assist in cataloguing and searching for documents in external databases.)
    ///</summary>
    property Metadata: DNMetadata read get_Metadata;
    ///<summary>
    ///  Gets logical structure of the document.
    ///</summary>
    property LogicalStructure: DNRootElement read get_LogicalStructure;
    ///<summary>
    ///  Gets or sets a value indicating whether document is linearized.
    ///</summary>
    property IsLinearized: Boolean read get_IsLinearized write set_IsLinearized;
    ///<summary>
    ///  Gets permissions of the document.
    ///</summary>
    property Permissions: Int32 read get_Permissions;
    ///<summary>
    ///  Gets encrypted status of the document. True if document is encrypted.
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Gets the ID.
    ///</summary>
    property Id: DNId read get_Id;
    ///<summary>
    ///  Gets or sets the background color of the document.
    ///</summary>
    property Background: DNColor read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets optimization flag. When pages are added to document, equal resource streams in resultant file are
    ///  merged into one PDF object if this flag set.
    ///  This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
    ///  Default value: false.
    ///</summary>
    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    ///<summary>
    ///  Allows to merge page contents to optimize docuement size. If used then differnet but duplicated pages may reference to the
    ///  same content object. Please note that this mode may cause side effects like changing page content when other page is changed.
    ///</summary>
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    ///<summary>
    ///  Gets or sets flag of ignoring errors in source files.
    ///  When pages from source document copied into destination document, copying process is stopped with exception
    ///  if some objects in source files are corrupted when this flag is false.
    ///  example: dest.Pages.Add(src.Pages);
    ///  If this flag is set to true then corrupted objects will be replaced with empty values.
    ///  By default: true.
    ///</summary>
    property IgnoreCorruptedObjects: Boolean read get_IgnoreCorruptedObjects write set_IgnoreCorruptedObjects;
    ///<summary>
    ///  Gets page labels in the document.
    ///</summary>
    property PageLabels: DNPageLabelCollection read get_PageLabels;
    ///<summary>
    ///  Get or sets flag which enables document partially be unloaded from memory.
    ///  This allow to decrease memory usage but may have negative effect on perfomance.
    ///</summary>
    property EnableObjectUnload: Boolean read get_EnableObjectUnload write set_EnableObjectUnload;
    ///<summary><para>Gets access to TaggedPdf content.</para></summary>
    ///<example><para>The example demonstrates how to use tagged content for creating new document with header, paragraphs and images.</para><code>
    ///  // Create new document
    ///  Document document = new Document();
    ///  // Get the tagged content
    ///  ITaggedContent taggedContent = document.TaggedContent;
    ///  // Set language for document
    ///  taggedContent.SetLanguage("en-US");
    ///  // Set title for PDF document
    ///  taggedContent.SetTitle("Example document");
    ///  // Creating and adding Section
    ///  SectElement sect = taggedContent.CreateSectElement();
    ///  taggedContent.RootElement.AppendChild(sect);
    ///  // Create Header
    ///  HeaderElement h1 = taggedContent.CreateHeaderElement(1);
    ///  h1.SetText("The Header");
    ///  sect.AppendChild(h1);
    ///  // Create paragraph
    ///  ParagraphElement p = taggedContent.CreateParagraphElement();
    ///  p.SetTag("Paragraph");
    ///  p.SetText("The text of paragraph.");
    ///  sect.AppendChild(p);
    ///  // Create illustration
    ///  IllustrationElement figure1 = taggedContent.CreateFigureElement();
    ///  sect.AppendChild(figure1);
    ///  figure1.AlternativeText = "Figure 1";
    ///  figure1.Title = "Image 1";
    ///  figure1.SetTag("Fig");
    ///  figure1.SetImage("path/of/image.jpg");
    ///  // Save document
    ///  document.Save("example.pdf");
    ///</code></example>
    property TaggedContent: DNITaggedContent read get_TaggedContent;
  end;

  TDNDocument = class(TDNGenericImport<DNDocumentClass, DNDocument>) end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Holds functionality to tune fonts
  ///</summary>
  [DNTypeName('Aspose.Pdf.Document+IDocumentFontUtilities')]
  DNDocument_IDocumentFontUtilities = interface(DDN.mscorlib.DNObject)
  ['{11514758-1979-37EB-8B5A-C57E8CFCCA29}']
  { methods } 

    ///<summary>
    ///  Subsets all fonts in document
    ///</summary>
    ///  <param name="subsetStrategy">strategy</param>
    procedure SubsetFonts(subsetStrategy: DNFontSubsetStrategy);
    ///<summary>
    ///  Returns all fonts from document
    ///</summary>
    ///<returns>fonts</returns>
    function GetAllFonts: TArray<DNFont>;

  end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8ED9390-0ED9-5E39-8DBE-261FB29C2722}']
  { constructors } 

    {class} function init: DNDocumentFactory;

  end;

  ///<summary>
  ///  Class which allows to create/load documents of different types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.DocumentFactory')]
  DNDocumentFactory = interface(DDN.mscorlib.DNObject)
  ['{9E99C074-B10C-3D15-9F62-7F58C9765205}']
  { methods } 

    ///<summary>
    ///  Create document.
    ///</summary>
    ///  <param name="input">Input stream.</param>
    ///  <param name="options">Document load options.</param>
    ///<returns>Created document.</returns>
    function CreateDocument(input: DDN.mscorlib.DNStream; options: DNLoadOptions): DNDocument; overload;
    ///<summary>
    ///  Create empty document.
    ///</summary>
    ///<returns>Created document.</returns>
    function CreateDocument: DNDocument; overload;
    ///<summary>
    ///  Load document from a stream.
    ///</summary>
    ///  <param name="input">Input stream.</param>
    ///<returns>Created document.</returns>
    function CreateDocument(input: DDN.mscorlib.DNStream): DNDocument; overload;
    ///<summary>
    ///  Load password protected document from a stream.
    ///</summary>
    ///  <param name="input">Source stream.</param>
    ///  <param name="password">Passowrd for access to document.</param>
    ///<returns>Created document.</returns>
    function CreateDocument(input: DDN.mscorlib.DNStream; password: string): DNDocument; overload;
    ///<summary>
    ///  Load document from a file.
    ///</summary>
    ///  <param name="fileName">Name of PDF file.</param>
    ///<returns>Created document.</returns>
    function CreateDocument(fileName: string): DNDocument; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDocumentFactory = class(TDNGenericImport<DNDocumentFactoryClass, DNDocumentFactory>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNPatternColorSpaceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C6D2F31-7936-53E7-A32E-897A2573094B}']
  end;

  ///<summary>
  ///  Represents base pattern class.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.PatternColorSpace')]
  DNPatternColorSpace = interface(DDN.mscorlib.DNObject)
  ['{6ADC5768-0A7F-3584-AA30-E796BF3B0CD6}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPatternColorSpace = class(TDNGenericImport<DNPatternColorSpaceClass, DNPatternColorSpace>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGradientAxialShadingClass = interface(DNPatternColorSpaceClass)
  ['{13712DB7-D7A4-572F-B0E1-2C4E66B5AA27}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientAxialShading" />
    ///  class.
    ///</summary>
    {class} function init: DNGradientAxialShading; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientAxialShading" />
    ///  class.
    ///</summary>
    ///  <param name="startColor">The start point.</param>
    ///  <param name="endColor">The end point.</param>
    {class} function init(startColor: DNColor; endColor: DNColor): DNGradientAxialShading; overload;

  end;

  ///<summary>
  ///  Represents gradient axial shading class.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.GradientAxialShading')]
  DNGradientAxialShading = interface(DNPatternColorSpace)
  ['{3003E101-0553-3334-9A1A-8D6793ACCAA2}']
  { getters & setters } 

    function get_Start: DNPoint;
    procedure set_Start(value: DNPoint);
    function get_End: DNPoint;
    procedure set_End(value: DNPoint);
    function get_StartColor: DNColor;
    procedure set_StartColor(value: DNColor);
    function get_EndColor: DNColor;
    procedure set_EndColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets start point.
    ///</summary>
    property Start: DNPoint read get_Start write set_Start;
    ///<summary>
    ///  Gets or sets end point.
    ///</summary>
    property &End: DNPoint read get_End write set_End;
    ///<summary>
    ///  Gets or sets start color.
    ///</summary>
    property StartColor: DNColor read get_StartColor write set_StartColor;
    ///<summary>
    ///  Gets or sets end color.
    ///</summary>
    property EndColor: DNColor read get_EndColor write set_EndColor;
  end;

  TDNGradientAxialShading = class(TDNGenericImport<DNGradientAxialShadingClass, DNGradientAxialShading>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNGradientRadialShadingClass = interface(DNPatternColorSpaceClass)
  ['{F2FC4373-9CF4-54A3-8126-EA8B8CE513F2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientRadialShading" />
    ///  class.
    ///</summary>
    {class} function init: DNGradientRadialShading; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.GradientRadialShading" />
    ///  class.
    ///</summary>
    ///  <param name="startColor">The starting circle color.</param>
    ///  <param name="endColor">The ending circle color.</param>
    {class} function init(startColor: DNColor; endColor: DNColor): DNGradientRadialShading; overload;

  end;

  ///<summary>
  ///  Represents gradient radial shading type.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.GradientRadialShading')]
  DNGradientRadialShading = interface(DNPatternColorSpace)
  ['{C6304ECC-1CDA-3454-AC3B-60125C87C5EE}']
  { getters & setters } 

    function get_Start: DNPoint;
    procedure set_Start(value: DNPoint);
    function get_End: DNPoint;
    procedure set_End(value: DNPoint);
    function get_StartingRadius: Double;
    procedure set_StartingRadius(value: Double);
    function get_EndingRadius: Double;
    procedure set_EndingRadius(value: Double);
    function get_StartColor: DNColor;
    procedure set_StartColor(value: DNColor);
    function get_EndColor: DNColor;
    procedure set_EndColor(value: DNColor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets starting circle center point.
    ///</summary>
    property Start: DNPoint read get_Start write set_Start;
    ///<summary>
    ///  Gets or sets ending circle center point.
    ///</summary>
    property &End: DNPoint read get_End write set_End;
    ///<summary>
    ///  Gets or sets starting circle radius.
    ///</summary>
    property StartingRadius: Double read get_StartingRadius write set_StartingRadius;
    ///<summary>
    ///  Gets or sets ending circle radius.
    ///</summary>
    property EndingRadius: Double read get_EndingRadius write set_EndingRadius;
    ///<summary>
    ///  Gets or sets start color.
    ///</summary>
    property StartColor: DNColor read get_StartColor write set_StartColor;
    ///<summary>
    ///  Gets or sets end color.
    ///</summary>
    property EndColor: DNColor read get_EndColor write set_EndColor;
  end;

  TDNGradientRadialShading = class(TDNGenericImport<DNGradientRadialShadingClass, DNGradientRadialShading>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNShapeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F158A0C6-33AF-5364-9C08-0D72C19EEE65}']
  end;

  ///<summary>
  ///  Represents shape - the base graphics object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Shape')]
  DNShape = interface(DDN.mscorlib.DNObject)
  ['{0C05BC1D-92C8-38BF-8E7D-97D4DE422985}']
  { getters & setters } 

    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNShape = class(TDNGenericImport<DNShapeClass, DNShape>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNArcClass = interface(DNShapeClass)
  ['{537C736E-5A7D-5066-BA9C-F742F8AAE88F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Arc" />
    ///  class.
    ///</summary>
    ///  <param name="posX">The x-coordinate of the center point of the arc.</param>
    ///  <param name="posY">The y-coordinate of the center point of the arc.</param>
    ///  <param name="radius">The radius value of the arc.</param>
    ///  <param name="alpha">The beginning angle value of the arc.</param>
    ///  <param name="beta">The end angle value of the arc.</param>
    {class} function init(posX: Single; posY: Single; radius: Single; alpha: Single; beta: Single): DNArc;

  end;

  ///<summary>
  ///  Represents arc.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Arc')]
  DNArc = interface(DNShape)
  ['{E82A294B-4639-30B4-9E27-C1F37E709D55}']
  { getters & setters } 

    function get_PosX: Double;
    procedure set_PosX(value: Double);
    function get_PosY: Double;
    procedure set_PosY(value: Double);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_Alpha: Double;
    procedure set_Alpha(value: Double);
    function get_Beta: Double;
    procedure set_Beta(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the x-coordinate of the center of the arc.
    ///</summary>
    property PosX: Double read get_PosX write set_PosX;
    ///<summary>
    ///  Gets or sets a float value that indicates the y-coordinate of the center of the arc.
    ///</summary>
    property PosY: Double read get_PosY write set_PosY;
    ///<summary>
    ///  Gets or sets a float value that indicates the radius of the arc.
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Gets or sets a float value that indicates the beginning angle degree of the arc.
    ///</summary>
    property Alpha: Double read get_Alpha write set_Alpha;
    ///<summary>
    ///  Gets or sets a float value that indicates the ending angle degree of the arc.
    ///</summary>
    property Beta: Double read get_Beta write set_Beta;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNArc = class(TDNGenericImport<DNArcClass, DNArc>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNCircleClass = interface(DNShapeClass)
  ['{9008CD92-8386-5B9C-B5FD-E80098EA90DB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Circle" />
    ///  class.
    ///</summary>
    ///  <param name="posX">The x-coordinate of the center of the circle.</param>
    ///  <param name="posY">The y-coordinate of the center of the circle.</param>
    ///  <param name="radius">The radius of the circle.</param>
    {class} function init(posX: Single; posY: Single; radius: Single): DNCircle;

  end;

  ///<summary>
  ///  Represents circle.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Circle')]
  DNCircle = interface(DNShape)
  ['{2CF62AF5-9D8B-30B7-9709-D35D67C72FDC}']
  { getters & setters } 

    function get_PosX: Double;
    procedure set_PosX(value: Double);
    function get_PosY: Double;
    procedure set_PosY(value: Double);
    function get_Radius: Double;
    procedure set_Radius(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the x-coordinate of the center of the circle.
    ///</summary>
    property PosX: Double read get_PosX write set_PosX;
    ///<summary>
    ///  Gets or sets a float value that indicates the y-coordinate of the center of the circle.
    ///</summary>
    property PosY: Double read get_PosY write set_PosY;
    ///<summary>
    ///  Gets or sets a float value that indicates the radius of the circle.
    ///</summary>
    property Radius: Double read get_Radius write set_Radius;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNCircle = class(TDNGenericImport<DNCircleClass, DNCircle>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNCurveClass = interface(DNShapeClass)
  ['{FDE97960-5B2F-5DBC-8A59-57CCAF6A1882}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Curve" />
    ///  class.
    ///</summary>
    ///  <param name="positionArray">The position array of the control points of the curve.There should be four
    ///  control points,so the length of the array should be eight.</param>
    {class} function init(positionArray: TArray<Single>): DNCurve;

  end;

  ///<summary>
  ///  Represents bezier curve.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Curve')]
  DNCurve = interface(DNShape)
  ['{68708DC5-DDCA-3EE7-95E7-0050D1DBCADD}']
  { getters & setters } 

    function get_PositionArray: TArray<Single>;
    procedure set_PositionArray(value: TArray<Single>);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float position array.
    ///</summary>
    property PositionArray: TArray<Single> read get_PositionArray write set_PositionArray;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNCurve = class(TDNGenericImport<DNCurveClass, DNCurve>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNEllipseClass = interface(DNShapeClass)
  ['{C85DDBBE-A37C-5210-962C-6BE2455CA471}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Ellipse" />
    ///  class.
    ///</summary>
    ///  <param name="left">The left position of the ellipse.</param>
    ///  <param name="bottom">The bottom position of the ellipse.</param>
    ///  <param name="width">The width of the ellipse.</param>
    ///  <param name="height">The height of the ellipse.</param>
    {class} function init(left: Double; bottom: Double; width: Double; height: Double): DNEllipse;

  end;

  ///<summary>
  ///  Represents ellipse.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Ellipse')]
  DNEllipse = interface(DNShape)
  ['{DD4F3A4C-B378-39C4-9C34-3789E835CA4B}']
  { getters & setters } 

    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the left position of the ellipse.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets a float value that indicates the bottom position of the ellipse.
    ///</summary>
    property Bottom: Double read get_Bottom write set_Bottom;
    ///<summary>
    ///  Gets or sets a float value that indicates the width of the ellipse.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets a float value that indicates the height of the ellipse.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNEllipse = class(TDNGenericImport<DNEllipseClass, DNEllipse>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNLineClass = interface(DNShapeClass)
  ['{C75AC53F-E10C-5861-B605-28B06BE6ED7D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Line" />
    ///  class.
    ///</summary>
    ///  <param name="positionArray">The line position array.</param>
    {class} function init(positionArray: TArray<Single>): DNLine;

  end;

  ///<summary>
  ///  Represents line.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Line')]
  DNLine = interface(DNShape)
  ['{FC728550-07D1-35DC-BBF9-D45E316CDB49}']
  { getters & setters } 

    function get_PositionArray: TArray<Single>;
    procedure set_PositionArray(value: TArray<Single>);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Line.PositionArray" />
    ///  object that indicates the position array.The array is
    ///  composed by coordinates of each control point of the line.
    ///  directly.
    ///</summary>
    property PositionArray: TArray<Single> read get_PositionArray write set_PositionArray;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNLine = class(TDNGenericImport<DNLineClass, DNLine>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNPathClass = interface(DNShapeClass)
  ['{8772845B-750E-538D-B0F4-5B39AEB54B2C}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Path" />
    ///  class.
    ///</summary>
    ///  <param name="shapes">The shape array contains path segments set.</param>
    {class} function init(shapes: TArray<DNShape>): DNPath; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Path" />
    ///  class.
    ///</summary>
    {class} function init: DNPath; overload;

  end;

  ///<summary>
  ///  Represents arc.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Path')]
  DNPath = interface(DNShape)
  ['{A2F7C03A-7F5F-3C3B-A2B2-65FF47205B7B}']
  { getters & setters } 

    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNPath = class(TDNGenericImport<DNPathClass, DNPath>) end;

  //-------------namespace: Aspose.Pdf.Drawing----------------
  DNDrawing_RectangleClass = interface(DNShapeClass)
  ['{CE0F589D-80CC-5810-BA37-EBB7D80DC9EA}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Drawing.Rectangle" />
    ///  class.
    ///</summary>
    ///  <param name="left">The left position of the rectangle.</param>
    ///  <param name="bottom">The bottom position of the rectangle.</param>
    ///  <param name="width">The width of the rectangle.</param>
    ///  <param name="height">The height of the rectangle.</param>
    {class} function init(left: Single; bottom: Single; width: Single; height: Single): DNDrawing_Rectangle;

  end;

  ///<summary>
  ///  Represents rectangle.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Drawing.Rectangle')]
  DNDrawing_Rectangle = interface(DNShape)
  ['{C4D399FA-DA61-3787-978E-A3916B6B0569}']
  { getters & setters } 

    function get_RoundedCornerRadius: Double;
    procedure set_RoundedCornerRadius(value: Double);
    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_GraphInfo: DNGraphInfo;
    procedure set_GraphInfo(value: DNGraphInfo);
    function get_Text: DNTextFragment;
    procedure set_Text(value: DNTextFragment);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the radius of rectangle corners.
    ///</summary>
    property RoundedCornerRadius: Double read get_RoundedCornerRadius write set_RoundedCornerRadius;
    ///<summary>
    ///  Gets or sets a float value that indicates the left position of the rectangle.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets a float value that indicates the bottom position of the rectangle.
    ///</summary>
    property Bottom: Double read get_Bottom write set_Bottom;
    ///<summary>
    ///  Gets or sets a float value that indicates the width of the rectangle.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets a float value that indicates the height of the rectangle.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Drawing.Shape.GraphInfo" />
    ///  object that indicates the graph info,such as color,
    ///  line width,etc.
    ///</summary>
    property GraphInfo: DNGraphInfo read get_GraphInfo write set_GraphInfo;
    ///<summary>
    ///  Gets or sets a text for shape
    ///</summary>
    property Text: DNTextFragment read get_Text write set_Text;
  end;

  TDNDrawing_Rectangle = class(TDNGenericImport<DNDrawing_RectangleClass, DNDrawing_Rectangle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEmbeddedFileCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{387F70DE-8E41-5F81-B03B-43F65289ACC0}']
  end;

  ///<summary>
  ///  Class representing embedded files collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.EmbeddedFileCollection')]
  DNEmbeddedFileCollection = interface(DDN.mscorlib.DNICollection<DNFileSpecification>)
  ['{DA70962C-8242-39CB-BD8A-2D95A2BDE2DA}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Item(index: Int32): DNFileSpecification; overload;
    function get_Item(name: string): DNFileSpecification; overload;

  { methods } 

    ///<summary>
    ///  Copies array of FileSpecification object into colleciton.
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNFileSpecification>; index: Int32);
    ///<summary>
    ///  Returns colleciton enumerator.
    ///</summary>
    ///<returns>Enumerator of colleciton.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFileSpecification>;
    ///<summary>
    ///  Adds file to embedded files with the specified key.
    ///</summary>
    ///  <param name="key">Key in the embedded files.</param>
    ///  <param name="file">File specification.</param>
    procedure Add(key: string; &file: DNFileSpecification);
    ///<summary>
    ///  Deletes file from the collection by its key in the collection.
    ///</summary>
    ///  <param name="name"></param>
    procedure DeleteByKey(key: string);
    ///<summary>
    ///  Returns embedded file by its name.
    ///</summary>
    ///  <param name="name">Name of the file.</param>
    ///<returns></returns>
    function FindByName(name: string): DNFileSpecification;
    ///<summary>
    ///  Delete embedded file by name.
    ///</summary>
    ///  <param name="name">Name of the embedded file which should be deleted.</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Remove all embedded files from document.
    ///</summary>
    procedure Delete; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets a value indicating whether access to this collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to this collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets number of embedded files in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNFileSpecification read get_Item; default;
    property Item[name: string]: DNFileSpecification read get_Item; default;
  end;

  TDNEmbeddedFileCollection = class(TDNGenericImport<DNEmbeddedFileCollectionClass, DNEmbeddedFileCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCollectionClass = interface(DNEmbeddedFileCollectionClass)
  ['{581C2CA2-E4DB-511A-A0B1-6E563F424C8B}']
  { constructors } 

    ///<summary>
    ///  Initializes new Collection object.
    ///</summary>
    {class} function init: DNCollection;

  end;

  ///<summary>
  ///  Represents class for Collection(12.3.5 Collections).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Collection')]
  DNCollection = interface(DNEmbeddedFileCollection)
  ['{3C61CB24-BB5D-38B6-A03D-AAD8A2EC1873}']
  { getters & setters } 

    function get_DefaultEntry: string;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Item(index: Int32): DNFileSpecification; overload;
    function get_Item(name: string): DNFileSpecification; overload;

  { methods } 

    ///<summary>
    ///  Copies array of FileSpecification object into colleciton.
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNFileSpecification>; index: Int32);
    ///<summary>
    ///  Returns colleciton enumerator.
    ///</summary>
    ///<returns>Enumerator of colleciton.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFileSpecification>;
    ///<summary>
    ///  Adds file to embedded files with the specified key.
    ///</summary>
    ///  <param name="key">Key in the embedded files.</param>
    ///  <param name="file">File specification.</param>
    procedure Add(key: string; &file: DNFileSpecification);
    ///<summary>
    ///  Deletes file from the collection by its key in the collection.
    ///</summary>
    ///  <param name="name"></param>
    procedure DeleteByKey(key: string);
    ///<summary>
    ///  Returns embedded file by its name.
    ///</summary>
    ///  <param name="name">Name of the file.</param>
    ///<returns></returns>
    function FindByName(name: string): DNFileSpecification;
    ///<summary>
    ///  Delete embedded file by name.
    ///</summary>
    ///  <param name="name">Name of the embedded file which should be deleted.</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Remove all embedded files from document.
    ///</summary>
    procedure Delete; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Default embedded file name.
    ///</summary>
    property DefaultEntry: string read get_DefaultEntry;
    ///<summary>
    ///  Gets a value indicating whether access to this collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to this collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets number of embedded files in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNFileSpecification read get_Item; default;
    property Item[name: string]: DNFileSpecification read get_Item; default;
  end;

  TDNCollection = class(TDNGenericImport<DNCollectionClass, DNCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEncryptedPayloadClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4463D76B-6B5F-52BB-B6BA-E2C52D49B1CB}']
  { constructors } 

    ///<summary>
    ///  Initialize Encrypted payload instance.
    ///</summary>
    ///  <param name="fileSpecification">The file specification used for initialization.</param>
    {class} function init(fileSpecification: DNFileSpecification): DNEncryptedPayload;

  end;

  ///<summary>
  ///  Represents encrypted payload in file specification.
  ///</summary>
  [DNTypeName('Aspose.Pdf.EncryptedPayload')]
  DNEncryptedPayload = interface(DDN.mscorlib.DNObject)
  ['{9554FD41-07FD-3A16-AE0B-2E7AD7236F2E}']
  { getters & setters } 

    function get_Type: string;
    function get_Subtype: string;
    function get_Version: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets type.
    ///</summary>
    property &Type: string read get_Type;
    ///<summary>
    ///  Gets subtype.
    ///</summary>
    property Subtype: string read get_Subtype;
    ///<summary>
    ///  Gets version number.
    ///</summary>
    property Version: string read get_Version;
  end;

  TDNEncryptedPayload = class(TDNGenericImport<DNEncryptedPayloadClass, DNEncryptedPayload>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNAlignmentTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A972F43B-85BA-5C76-AB2A-118FADE27A10}']
  { constructors } 

    ///<summary>
    ///  Constructor of AlignmentType.
    ///</summary>
    ///  <param name="name">Alignment type name.</param>
    {class} function init(name: string): DNAlignmentType;

  { static fields getter & setter } 

   function __fakeFieldGet_Center: DNAlignmentType;
   function __fakeFieldGet_Left: DNAlignmentType;
   function __fakeFieldGet_Right: DNAlignmentType;

  { static fields } 

    ///<summary>
    ///  Center alignment.
    ///</summary>
    {class} property Center: DNAlignmentType read __fakeFieldGet_Center;
    ///<summary>
    ///  Left alignment.
    ///</summary>
    {class} property Left: DNAlignmentType read __fakeFieldGet_Left;
    ///<summary>
    ///  Right alignment.
    ///</summary>
    {class} property Right: DNAlignmentType read __fakeFieldGet_Right;

  end;

  ///<summary>
  ///  Class contains possibly alignment types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.AlignmentType')]
  DNAlignmentType = interface(DDN.mscorlib.DNObject)
  ['{065D9E48-DD67-335C-ABB7-28255AB85FF3}']
  { methods } 

    ///<summary>
    ///  Returns string representation.
    ///</summary>
    ///<returns>Name value.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNAlignmentType = class(TDNGenericImport<DNAlignmentTypeClass, DNAlignmentType>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNAutoFillerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CA356048-4117-5F73-809E-0D8FFAAA4636}']
  { static getter & setter } 

    procedure set_UnFlattenFields(value: TArray<string>);

  { constructors } 

    {class} function init: DNAutoFiller;

  { static propertys } 

    ///<summary>
    ///  Sets the fields which will not be flattened.
    ///  If this property is not set, all the fields will be flattened.
    ///</summary>
    {class} property UnFlattenFields: TArray<string> write set_UnFlattenFields;
  end;

  ///<summary>
  ///  Represents a class to receive data from database or other datasource, fills them into the designed fields of the template pdf and at last generates new pdf file or stream.
  ///  It has two template file input modes:input as a stream or a pdf file.
  ///  It has four types of output modes:one merged stream, one merged file, many small streams, many small files.
  ///  It can recieve literal data contained in a System.Data.DataTable.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
  ///  ////Common part: Get the data from the database NorthWind.mdb fill it into the DataTable.
  ///  OleDbCommand mQueryCommand;
  ///  OleDbDataAdapter mDbDataAdapter;
  ///  OleDbConnection mDbConnection;
  ///  //Construct the data table.
  ///  DataTable mDataTable = new DataTable("MailMerge");
  ///  DataColumnCollection columns = mDataTable.Columns;
  ///  columns.Add("CompanyName",typeof(string));
  ///  columns.Add("ContactName",typeof(string));
  ///  columns.Add("Address",typeof(string));
  ///  columns.Add("PostalCode",typeof(string));
  ///  columns.Add("City",typeof(string));
  ///  columns.Add("Country",typeof(string));
  ///  columns.Add("Heading",typeof(string));
  ///  //Connect to the database source and query the data.
  ///  mDbConnection = new OleDbConnection();
  ///  mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" +
  ///  DbPath + "NorthWind.mdb";
  ///  mQueryCommand = new OleDbCommand();
  ///  mQueryCommand.Connection = mDbConnection;
  ///  mDbConnection.Open();
  ///  mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;";
  ///  mDbDataAdapter = new OleDbDataAdapter(mQueryCommand);
  ///  mDbDataAdapter.Fill(mDataTable);
  ///  for (int i = 0; i&lt;mDataTable.Rows.Count;i++)
  ///  {
  ///  mDataTable.Rows[i][mDataTable.Columns.Count - 1] = "Dear " + mDataTable.Rows[i][0].ToString() + ",";
  ///  System.Console.WriteLine("postalCode:" + mDataTable.Rows[i][3].ToString());
  ///  System.Console.WriteLine("Heading:" + mDataTable.Rows[i][mDataTable.Columns.Count - 1].ToString());
  ///  }
  ///  mDbDataAdapter.Dispose();
  ///  mDbConnection.Close();
  ///  ////End of Common part.
  ///  ////case one:
  ///  ////Input template pdf is a pdf file and output is a big merged stream.
  ///  AutoFiller autoFiller = new AutoFiller();
  ///  autoFiller.InputFileName = "mail.pdf";
  ///  autoFiller.OutputStream = Response.OutputStream;
  ///  autoFiller.ImportDataTable(mDataTable);
  ///  autoFiller.Save();
  ///  ////case two:
  ///  ////Input template pdf is a pdf file and output is a lot of small files.
  ///  AutoFiller autoFiller = new AutoFiller();
  ///  autoFiller.InputFileName = "mail.pdf";
  ///  autoFiller.GeneratingPath = ".\\";
  ///  autoFiller.BasicFileName = "outputFile";
  ///  autoFiller.ImportDataTable(mDataTable);
  ///  autoFiller.Save();
  ///  [Visual Basic]
  ///  'Note: mail.pdf is a template pdf which has seven text fields. NorthWind.mdb is the microsoft access db.
  ///  'Common part: Get the data from the database NorthWind.mdb fill it into the DataTable.
  ///  mQueryCommand As OleDbCommand = Nothing
  ///  mDbDataAdapter As OleDbDataAdapter = Nothing
  ///  mDbConnection As OleDbConnection = Nothing
  ///  mDataTable As DataTable = Nothing
  ///  mPath As String = Nothing
  ///  mTemplatePdf As String = Nothing
  ///  'Construct the data table.
  ///  mDataTable = New DataTable("MailMerge")
  ///  Dim columns As DataColumnCollection = mDataTable.Columns
  ///  'Create columns for the datatable.
  ///  'Every column's  name should be the same as one field's name of the templatePdf.
  ///  columns.Add("CompanyName", Type.GetType("System.String"))
  ///  columns.Add("ContactName", Type.GetType("System.String"))
  ///  columns.Add("Address", Type.GetType("System.String"))
  ///  columns.Add("PostalCode", Type.GetType("System.String"))
  ///  columns.Add("City", Type.GetType("System.String"))
  ///  columns.Add("Country", Type.GetType("System.String"))
  ///  columns.Add("Heading", Type.GetType("System.String"))
  ///  'Connect to the database source and query the data.
  ///  mDbConnection = New OleDbConnection
  ///  mDbConnection.ConnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + DbPath + "NorthWind.mdb"
  ///  mQueryCommand = New OleDbCommand
  ///  mQueryCommand.Connection = mDbConnection
  ///  mDbConnection.Open()
  ///  'Query the data and insert into the datatable.
  ///  mQueryCommand.CommandText = "select CompanyName, ContactName, Address, PostalCode, City, Country from Customers;"
  ///  mDbDataAdapter = New OleDbDataAdapter(mQueryCommand)
  ///  mDbDataAdapter.Fill(mDataTable)
  ///  'Construct the last column  of the Datatable.
  ///  Dim i As Integer
  ///  For i = 0 To mDataTable.Rows.Count - 1 Step i + 1
  ///  mDataTable.Rows(i)(mDataTable.Columns.Count - 1) = "Dear " + mDataTable.Rows(i)(0).ToString() + ","
  ///  System.Console.WriteLine("postalCode:" + mDataTable.Rows(i)(3).ToString())
  ///  System.Console.WriteLine("Heading:" + mDataTable.Rows(i)(mDataTable.Columns.Count - 1).ToString())
  ///  Next
  ///  mDbDataAdapter.Dispose()
  ///  mDbConnection.Close()
  ///  'End of Common part.
  ///  'case one:
  ///  'Input template pdf is a pdf file and output is a big merged stream.
  ///  Dim autoFiller As AutoFiller = New AutoFiller
  ///  autoFiller.InputFileName = "mail.pdf"
  ///  autoFiller.OutputStream = Response.OutputStream
  ///  autoFiller.ImportDataTable(mDataTable)
  ///  autoFiller.Save()
  ///  'case two:
  ///  'Input template pdf is a pdf file and output is a lot of small files.
  ///  Dim autoFiller As AutoFiller = New AutoFiller
  ///  autoFiller.InputFileName = "mail.pdf"
  ///  autoFiller.GeneratingPath = ".\";
  ///  autoFiller.BasicFileName = "outputFile"
  ///  autoFiller.ImportDataTable(mDataTable)
  ///  autoFiller.Save()
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Facades.AutoFiller')]
  DNAutoFiller = interface(DDN.mscorlib.DNObject)
  ['{2ED27758-B412-38AD-AC76-FD0AF7F02E7E}']
  { getters & setters } 

    procedure set_UnFlattenFields(value: TArray<string>);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_OutputStreams: TArray<DDN.mscorlib.DNStream>;
    procedure set_OutputStreams(value: TArray<DDN.mscorlib.DNStream>);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_InputFileName: string;
    procedure set_InputFileName(value: string);
    function get_OutputFileName: string;
    procedure set_OutputFileName(value: string);
    function get_GeneratingPath: string;
    procedure set_GeneratingPath(value: string);
    function get_BasicFileName: string;
    procedure set_BasicFileName(value: string);

  { methods } 

    ///<summary>
    ///  Saves all the pdfs.
    ///</summary>
    procedure Save; overload;
    ///<summary>
    ///  Imports data of DataTable type. Every column's name of the  dataTable must be the same as
    ///  one field name of the template pdf in case sensitive.
    ///</summary>
    ///  <param name="dataTable">The dataTable which contains all the data from database or other data source.</param>
    procedure ImportDataTable(dataTable: DDN.Aspose.Common.DNDataTable);
    ///<summary>
    ///  Saves all the pdfs.
    ///</summary>
    ///  <param name="destFile">Output file name.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves all the pdfs.
    ///</summary>
    ///  <param name="destStream">Output stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Binds a Pdf file.
    ///</summary>
    ///  <param name="srcFile">Pdf file name.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Binds a Pdf file.
    ///</summary>
    ///  <param name="srcStream">Pdf file stream.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Binds a Pdf document.
    ///</summary>
    ///  <param name="srcDoc">Pdf document.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Closes the object and output streams.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Closes the object and output streams.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets the fields which will not be flattened.
    ///  If this property is not set, all the fields will be flattened.
    ///</summary>
    property UnFlattenFields: TArray<string> write set_UnFlattenFields;
    ///<summary>
    ///  Gets or sets the OutputStream. One of four output modes. Its classical use case is Response.OutputStream.
    ///  Please refer to the online demo.
    ///</summary>
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    ///<summary>
    ///  Gets or sets the many Output Streams. One of four output modes.
    ///</summary>
    property OutputStreams: TArray<DDN.mscorlib.DNStream> read get_OutputStreams write set_OutputStreams;
    ///<summary>
    ///  Gets or sets the input template stream. One of two input modes.
    ///</summary>
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    ///<summary>
    ///  Gets or sets the input template file. One of two input modes.
    ///</summary>
    property InputFileName: string read get_InputFileName write set_InputFileName;
    ///<summary>
    ///  Gets or sets the one big merged output file. One of the four output modes.
    ///</summary>
    property OutputFileName: string read get_OutputFileName write set_OutputFileName;
    ///<summary>
    ///  Gets or sets the Generating Path of the small pdf files if many small pdf files to be generated. It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.BasicFileName" />
    ///  BasicFileName.
    ///  One of the four output modes.
    ///</summary>
    property GeneratingPath: string read get_GeneratingPath write set_GeneratingPath;
    ///<summary>
    ///  Gets or sets the basic file name if many small files will be generated. The generated file will be like "BasicFileName0","BasicFileName1",...
    ///  It works with another property <see cref="P:Aspose.Pdf.Facades.AutoFiller.GeneratingPath" />
    ///  GeneratingPath.
    ///</summary>
    property BasicFileName: string read get_BasicFileName write set_BasicFileName;
  end;

  TDNAutoFiller = class(TDNGenericImport<DNAutoFillerClass, DNAutoFiller>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNBookmarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97D3CB56-3B3B-5854-964B-E5E8088E2870}']
  { constructors } 

    {class} function init: DNBookmark;

  end;

  ///<summary>
  ///  Represents a bookmark.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Bookmark')]
  DNBookmark = interface(DDN.mscorlib.DNObject)
  ['{24A50779-26B2-35EA-A042-C1905425B20D}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_BoldFlag: Boolean;
    procedure set_BoldFlag(value: Boolean);
    function get_ChildItem: DNBookmarks;
    procedure set_ChildItem(value: DNBookmarks);
    function get_ChildItems: DNBookmarks;
    procedure set_ChildItems(value: DNBookmarks);
    function get_CustomAcorbatViewerMenuActionName: TArray<DDN.mscorlib.DNEnum>;
    procedure set_CustomAcorbatViewerMenuActionName(value: TArray<DDN.mscorlib.DNEnum>);
    function get_Destination: string;
    procedure set_Destination(value: string);
    function get_ItalicFlag: Boolean;
    procedure set_ItalicFlag(value: Boolean);
    function get_Level: Int32;
    procedure set_Level(value: Int32);
    function get_PageDisplay: string;
    procedure set_PageDisplay(value: string);
    function get_PageDisplay_Bottom: Int32;
    procedure set_PageDisplay_Bottom(value: Int32);
    function get_PageDisplay_Left: Int32;
    procedure set_PageDisplay_Left(value: Int32);
    function get_PageDisplay_Right: Int32;
    procedure set_PageDisplay_Right(value: Int32);
    function get_PageDisplay_Top: Int32;
    procedure set_PageDisplay_Top(value: Int32);
    function get_PageDisplay_Zoom: Int32;
    procedure set_PageDisplay_Zoom(value: Int32);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_RemoteFile: string;
    procedure set_RemoteFile(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleColor: DDN.Aspose.Common.DNColor;
    procedure set_TitleColor(value: DDN.Aspose.Common.DNColor);
    function get_Open: Boolean;
    procedure set_Open(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the action bound with the bookmark.
    ///  If PageNumber is presented the action can not be specified.
    ///  The action type includes: "GoTo", "GoToR", "Launch", "Named".
    ///</summary>
    property Action: string read get_Action write set_Action;
    ///<summary>
    ///  Gets or sets the bold flag of bookmark's title.
    ///</summary>
    property BoldFlag: Boolean read get_BoldFlag write set_BoldFlag;
    ///<summary>
    ///  Gets or sets bookmark's children.
    ///</summary>
    property ChildItem: DNBookmarks read get_ChildItem write set_ChildItem;
    ///<summary>
    ///  Gets or sets bookmark's children.
    ///</summary>
    property ChildItems: DNBookmarks read get_ChildItems write set_ChildItems;
    ///<summary>
    ///  The action name corresponding to execute a menu item in Acrobat viewer.
    ///</summary>
    property CustomAcorbatViewerMenuActionName: TArray<DDN.mscorlib.DNEnum> read get_CustomAcorbatViewerMenuActionName write set_CustomAcorbatViewerMenuActionName;
    ///<summary>
    ///  Gets or sets bookmark's destination page. Required if action is set as string.Empty.
    ///</summary>
    property Destination: string read get_Destination write set_Destination;
    ///<summary>
    ///  Gets or sets the italic flag of bookmark's title.
    ///</summary>
    property ItalicFlag: Boolean read get_ItalicFlag write set_ItalicFlag;
    ///<summary>
    ///  Gets or sets bookmark's hierarchy level.
    ///</summary>
    property Level: Int32 read get_Level write set_Level;
    ///<summary>
    ///  Gets or sets the type of display bookmark's destination page.
    ///</summary>
    property PageDisplay: string read get_PageDisplay write set_PageDisplay;
    ///<summary>
    ///  Gets or sets the bottom coordinate of page display.
    ///</summary>
    property PageDisplay_Bottom: Int32 read get_PageDisplay_Bottom write set_PageDisplay_Bottom;
    ///<summary>
    ///  Gets or sets the left coordinate of page display.
    ///</summary>
    property PageDisplay_Left: Int32 read get_PageDisplay_Left write set_PageDisplay_Left;
    ///<summary>
    ///  Gets or sets the right coordinate of page display.
    ///</summary>
    property PageDisplay_Right: Int32 read get_PageDisplay_Right write set_PageDisplay_Right;
    ///<summary>
    ///  Gets or sets the top coordinate of page display.
    ///</summary>
    property PageDisplay_Top: Int32 read get_PageDisplay_Top write set_PageDisplay_Top;
    ///<summary>
    ///  Gets or sets the zoom factor of page display.
    ///</summary>
    property PageDisplay_Zoom: Int32 read get_PageDisplay_Zoom write set_PageDisplay_Zoom;
    ///<summary>
    ///  Gets or sets the number of bookmark's destination page.
    ///</summary>
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    ///<summary>
    ///  Gets or sets the file (path) which is required for "GoToR" action of bookmark.
    ///</summary>
    property RemoteFile: string read get_RemoteFile write set_RemoteFile;
    ///<summary>
    ///  Gets or sets bookmark's title.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the color of bookmark's title.
    ///</summary>
    property TitleColor: DDN.Aspose.Common.DNColor read get_TitleColor write set_TitleColor;
    ///<summary>
    ///  Gets or sets bookmark state (open, close).
    ///</summary>
    property Open: Boolean read get_Open write set_Open;
  end;

  TDNBookmark = class(TDNGenericImport<DNBookmarkClass, DNBookmark>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNDocumentPrivilegeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A4969E1F-EC29-5F83-A257-0737485A2E95}']
  { static getter & setter } 

    procedure set_PrintAllowLevel(value: Int32);
    procedure set_ChangeAllowLevel(value: Int32);
    procedure set_CopyAllowLevel(value: Int32);
    {class} function get_DegradedPrinting: DNDocumentPrivilege;
    {class} function get_Print: DNDocumentPrivilege;
    {class} function get_ModifyContents: DNDocumentPrivilege;
    {class} function get_Copy: DNDocumentPrivilege;
    {class} function get_ModifyAnnotations: DNDocumentPrivilege;
    {class} function get_FillIn: DNDocumentPrivilege;
    {class} function get_ScreenReaders: DNDocumentPrivilege;
    {class} function get_Assembly: DNDocumentPrivilege;
    {class} function get_AllowAll: DNDocumentPrivilege;
    {class} function get_ForbidAll: DNDocumentPrivilege;

  { static propertys } 

    ///<summary>
    ///  Sets the print level of  document's privilege. Just as the Adobe Professional's Printing Allowed settings.
    ///  0: None.
    ///  1: Low Resolution (150 dpi).
    ///  2: High Resolution.
    ///</summary>
    {class} property PrintAllowLevel: Int32 write set_PrintAllowLevel;
    ///<summary>
    ///  Sets the change level of  document's privilege. Just as the Adobe Professional's Changes Allowed settings.
    ///  0: None.
    ///  1: Inserting, Deleting and Rotating pages.
    ///  2: Filling in form fields and signing existing signature fields.
    ///  3: Commenting, filling in form fields, and signing existing signature fields.
    ///  4: Any except extracting pages.
    ///</summary>
    {class} property ChangeAllowLevel: Int32 write set_ChangeAllowLevel;
    ///<summary>
    ///  Sets the copy level of  document's privilege. Just as the Adobe Professional's permission settings.
    ///  0: None.
    ///  1: Enable text access for screen reader devices for the visually impaired.
    ///  2: Enable copying of text, images and other content.
    ///</summary>
    {class} property CopyAllowLevel: Int32 write set_CopyAllowLevel;
    ///<summary>
    ///  Allows degraded printing.
    ///</summary>
    {class} property DegradedPrinting: DNDocumentPrivilege read get_DegradedPrinting;
    ///<summary>
    ///  Allows printing file.
    ///</summary>
    {class} property Print: DNDocumentPrivilege read get_Print;
    ///<summary>
    ///  Allows modifying file.
    ///</summary>
    {class} property ModifyContents: DNDocumentPrivilege read get_ModifyContents;
    ///<summary>
    ///  Allows copying file.
    ///</summary>
    {class} property Copy: DNDocumentPrivilege read get_Copy;
    ///<summary>
    ///  Allows modifying annotations of file.
    ///</summary>
    {class} property ModifyAnnotations: DNDocumentPrivilege read get_ModifyAnnotations;
    ///<summary>
    ///  Allows filling forms in file.
    ///</summary>
    {class} property FillIn: DNDocumentPrivilege read get_FillIn;
    ///<summary>
    ///  Allows to reader on screen only.
    ///</summary>
    {class} property ScreenReaders: DNDocumentPrivilege read get_ScreenReaders;
    ///<summary>
    ///  Allows assemblying file.
    ///</summary>
    {class} property Assembly: DNDocumentPrivilege read get_Assembly;
    ///<summary>
    ///  All allowed.
    ///</summary>
    {class} property AllowAll: DNDocumentPrivilege read get_AllowAll;
    ///<summary>
    ///  All Forbidded.
    ///</summary>
    {class} property ForbidAll: DNDocumentPrivilege read get_ForbidAll;
  end;

  ///<summary>
  ///  Represents the privileges for accessing Pdf file. Refer to<see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />
  ///  .
  ///  There are 4 ways using this class:
  ///  1.Using predefined privilege directly.
  ///  2.Based on a predefined privilege and change some specifical permissions.
  ///  3.Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
  ///  4.Mixes the way2 and way3.
  ///</summary>
  ///<example><code>
  ///  [C#]
  ///  //Way1: Using predefined privilege directly.
  ///  DocumentPrivilege privilege = DocumentPrivilege.Print;
  ///  //Way2: Based on a predefined privilege and change some specifical permissions.
  ///  DocumentPrivilege privilege = DocumentPrivilege.AllowAll;
  ///  privilege.AllowPrint = false;
  ///  privilege.AllowModifyContents = false;
  ///  //Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
  ///  DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
  ///  privilege.ChangeAllowLevel = 1;
  ///  privilege.PrintAllowLevel = 2;
  ///  //Way4: Mixes the way2 and way3
  ///  DocumentPrivilege privilege = DocumentPrivilege.ForbidAll;
  ///  privilege.ChangeAllowLevel = 1;
  ///  privilege.AllowPrint = true;
  ///  [Visual Basic]
  ///  'Way1: Using predefined privilege directly.
  ///  Dim privilege As DocumentPrivilege =  DocumentPrivilege.Print
  ///  'Way2: Based on a predefined privilege and change some specifical permissions.
  ///  Dim privilege As DocumentPrivilege =  DocumentPrivilege.AllowAll
  ///  privilege.AllowPrint = False
  ///  privilege.AllowModifyContents = False
  ///  'Way3: Based on a predefined privilege and change some specifical Adobe Professional permissions combination.
  ///  Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll
  ///  privilege.ChangeAllowLevel = 1
  ///  privilege.PrintAllowLevel = 2
  ///  'Way4: Mixes the way2 and way3
  ///  Dim privilege As DocumentPrivilege =  DocumentPrivilege.ForbidAll
  ///  privilege.ChangeAllowLevel = 1
  ///  privilege.AllowPrint = True
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Facades.DocumentPrivilege')]
  DNDocumentPrivilege = interface(DDN.mscorlib.DNObject)
  ['{069A67D6-775C-34A0-8E9B-37BCE92A438E}']
  { getters & setters } 

    function get_AllowPrint: Boolean;
    procedure set_AllowPrint(value: Boolean);
    function get_AllowDegradedPrinting: Boolean;
    procedure set_AllowDegradedPrinting(value: Boolean);
    function get_AllowModifyContents: Boolean;
    procedure set_AllowModifyContents(value: Boolean);
    function get_AllowCopy: Boolean;
    procedure set_AllowCopy(value: Boolean);
    function get_AllowModifyAnnotations: Boolean;
    procedure set_AllowModifyAnnotations(value: Boolean);
    function get_AllowFillIn: Boolean;
    procedure set_AllowFillIn(value: Boolean);
    function get_AllowScreenReaders: Boolean;
    procedure set_AllowScreenReaders(value: Boolean);
    function get_AllowAssembly: Boolean;
    procedure set_AllowAssembly(value: Boolean);
    procedure set_PrintAllowLevel(value: Int32);
    procedure set_ChangeAllowLevel(value: Int32);
    procedure set_CopyAllowLevel(value: Int32);

  { methods } 

    ///<summary>
    ///  Compares two <see cref="T:Aspose.Pdf.Facades.DocumentPrivilege" />
    ///  objects.
    ///  <param name="obj">
    ///  The object to compare with.
    ///</param>
    ///<returns>A signed integer that indicates the relative values of this instance and value. Less than zero this instance is less than value.
    ///  Zero this instance is equal to value. Greater than zero this instance is greater than value.</returns>
    ///</summary>
    function CompareTo(obj: DDN.mscorlib.DNObject): Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets the permission which allow print or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowPrint: Boolean read get_AllowPrint write set_AllowPrint;
    ///<summary>
    ///  Sets the permission which allow degraded printing or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowDegradedPrinting: Boolean read get_AllowDegradedPrinting write set_AllowDegradedPrinting;
    ///<summary>
    ///  Sets the permission which allow modify contents or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowModifyContents: Boolean read get_AllowModifyContents write set_AllowModifyContents;
    ///<summary>
    ///  Sets the permission which allow copy or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowCopy: Boolean read get_AllowCopy write set_AllowCopy;
    ///<summary>
    ///  Sets the permission which allow modify annotations or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowModifyAnnotations: Boolean read get_AllowModifyAnnotations write set_AllowModifyAnnotations;
    ///<summary>
    ///  Sets the permission which allow fill in forms or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowFillIn: Boolean read get_AllowFillIn write set_AllowFillIn;
    ///<summary>
    ///  Sets the permission which allow screen readers or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowScreenReaders: Boolean read get_AllowScreenReaders write set_AllowScreenReaders;
    ///<summary>
    ///  Sets the permission which allow assembly or not.
    ///  true is allow and false is forbidden.
    ///</summary>
    property AllowAssembly: Boolean read get_AllowAssembly write set_AllowAssembly;
    ///<summary>
    ///  Sets the print level of  document's privilege. Just as the Adobe Professional's Printing Allowed settings.
    ///  0: None.
    ///  1: Low Resolution (150 dpi).
    ///  2: High Resolution.
    ///</summary>
    property PrintAllowLevel: Int32 write set_PrintAllowLevel;
    ///<summary>
    ///  Sets the change level of  document's privilege. Just as the Adobe Professional's Changes Allowed settings.
    ///  0: None.
    ///  1: Inserting, Deleting and Rotating pages.
    ///  2: Filling in form fields and signing existing signature fields.
    ///  3: Commenting, filling in form fields, and signing existing signature fields.
    ///  4: Any except extracting pages.
    ///</summary>
    property ChangeAllowLevel: Int32 write set_ChangeAllowLevel;
    ///<summary>
    ///  Sets the copy level of  document's privilege. Just as the Adobe Professional's permission settings.
    ///  0: None.
    ///  1: Enable text access for screen reader devices for the visually impaired.
    ///  2: Enable copying of text, images and other content.
    ///</summary>
    property CopyAllowLevel: Int32 write set_CopyAllowLevel;
  end;

  TDNDocumentPrivilege = class(TDNGenericImport<DNDocumentPrivilegeClass, DNDocumentPrivilege>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacadeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6FD52F8-D337-5705-B394-2A04EA996F3A}']
  end;

  ///<summary>
  ///  Base facade class.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Facade')]
  DNFacade = interface(DDN.mscorlib.DNObject)
  ['{E773FC40-8366-3496-90A3-EDBA1AA42CD7}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcFile">The PDF file.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcStream">The stream of PDF file.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Disposes Aspose.Pdf.Document bound with a facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Disposes the facade.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document facade is working on.
    ///</summary>
    property Document: DNDocument read get_Document;
  end;

  TDNFacade = class(TDNGenericImport<DNFacadeClass, DNFacade>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfConverterClass = interface(DNFacadeClass)
  ['{6F0113EE-DFD1-58DF-9A89-9C800B00AB8A}']
  { constructors } 

    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" />
    ///  object.
    ///</summary>
    {class} function init: DNPdfConverter; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfConverter" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfConverter; overload;

  end;

  ///<summary>
  ///  Represents a class to convert a pdf file's each page to images, supporting BMP, JPEG, PNG and TIFF now.
  ///  Supported content in pdfs: pictures, form, comment.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfConverter')]
  DNPdfConverter = interface(DNFacade)
  ['{561BD0A9-093A-3F2A-A1B4-A311E8D27407}']
  { getters & setters } 

    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_ShowHiddenAreas: Boolean;
    procedure set_ShowHiddenAreas(value: Boolean);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_Resolution: DNResolution;
    procedure set_Resolution(value: DNResolution);
    function get_StartPage: Int32;
    procedure set_StartPage(value: Int32);
    function get_EndPage: Int32;
    procedure set_EndPage(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_UserPassword: string;
    procedure set_UserPassword(value: string);
    function get_PageCount: Int32;
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Do some initial works for converting a pdf document to images.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  String prefix = @"D:\Test\";
    ///  String suffix = ".jpg";
    ///  int imageCount = 1;
    ///  while (converter.HasNextImage())
    ///  {
    ///  converter.GetNextImage(prefix + imageCount + suffix);
    ///  imageCount++;
    ///  }
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  Dim prefix As String =  "D:\Test\"
    ///  Dim suffix As String =  ".jpg"
    ///  Dim imageCount As Integer =  1
    ///  While converter.HasNextImage()
    ///  converter.GetNextImage(prefix + imageCount + suffix)
    ///  imageCount = imageCount + 1
    ///  End While
    ///</code></example>
    procedure DoConvert;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file to save the TIFF image.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  converter.SaveAsTIFF(@"D:\Test\test.tiff");
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  converter.SaveAsTIFF(@"D:\Test\test.tiff")
    ///</code></example>
    procedure SaveAsTIFF(outputFile: string); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The output file.</param>
    ///  <param name="compressionType">Type of the compression.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  converter.SaveAsTIFF(@"D:\Test\test.tiff");
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  converter.SaveAsTIFF(@"D:\Test\test.tiff")
    ///</code></example>
    procedure SaveAsTIFF(outputFile: string; compressionType: DNCompressionType); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure SaveAsTIFF(outputFile: string; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with page size and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputFile: string; pageSize: DNPageSize; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="compressionType">Type of the compression.</param>
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; compressionType: DNCompressionType); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    ///  <param name="converter">External converter</param>
    procedure SaveAsTIFF(outputFile: string; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
    ///</summary>
    ///  <param name="outputFile">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196);
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  converter.SaveAsTIFFClassF(@"D:\Test\test.tiff",204,196)
    ///</code></example>
    procedure SaveAsTIFFClassF(outputFile: string; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
    ///</summary>
    ///  <param name="outputFile">The stream to save the TIFF image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure SaveAsTIFFClassF(outputFile: string; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputStream">The output stream.</param>
    ///  <param name="compressionType">Type of the compression.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; compressionType: DNCompressionType); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with page size and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="compressionType">Type of the compression.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; compressionType: DNCompressionType); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with dimensions, and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    ///  <param name="converter">External converter</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; imageWidth: Int32; imageHeight: Int32; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    ///<summary>
    ///  Indicates whether the pdf file has more images or not.
    ///</summary>
    ///<returns>Can get more images or not, true if can, or false.</returns>
    function HasNextImage: Boolean;
    ///<summary>
    ///  Saves image to file with default image format - jpeg.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    procedure GetNextImage(outputFile: string); overload;
    ///<summary>
    ///  Saves image to file with ith given page size and default image format - jpeg.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Saves image to file with the givin image format.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  String prefix = @"D:\Test\";
    ///  String suffix = ".png";
    ///  int imageCount = 1;
    ///  while (converter.HasNextImage())
    ///  {
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png);
    ///  imageCount++;
    ///  }
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  Dim prefix As String =  "D:\Test\"
    ///  Dim suffix As String =  ".png"
    ///  Dim imageCount As Integer =  1
    ///  While converter.HasNextImage()
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Png)
    ///  imageCount = imageCount + 1
    ///  End While
    ///</code></example>
    procedure GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat); overload;
    ///<summary>
    ///  Saves image to file with given page size and image format.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="format">The format of the image.</param>
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize; format: DDN.Aspose.Common.DNImageFormat); overload;
    ///<summary>
    ///  Saves image to stream with default image format - jpeg.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves image to stream with given page size.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize); overload;
    ///<summary>
    ///  Saves image to stream with given image format.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat); overload;
    ///<summary>
    ///  Saves image to stream with given page size.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="format">The format of the image.</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; format: DDN.Aspose.Common.DNImageFormat); overload;
    ///<summary>
    ///  Saves image to file with the given image format, dimensions and quality.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  String prefix = @"D:\Test\";
    ///  String suffix = ".jpg";
    ///  int imageCount = 1;
    ///  while (converter.HasNextImage())
    ///  {
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50);
    ///  imageCount++;
    ///  }
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  Dim prefix As String =  "D:\Test\"
    ///  Dim suffix As String =  ".jpg"
    ///  Dim imageCount As Integer =  1
    ///  While converter.HasNextImage()
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000, 50)
    ///  imageCount = imageCount + 1
    ///  End While
    ///</code></example>
    procedure GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Int32; imageHeight: Int32; quality: Int32); overload;
    ///<summary>
    ///  Saves image to stream with the givin image format, dimensions and quality.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Int32; imageHeight: Int32; quality: Int32); overload;
    ///<summary>
    ///  Saves image to file with the givin image format, image size,  and quality.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixels.</param>
    ///  <param name="imageHeight">The image height, the unit is pixels..</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  String prefix = @"D:\Test\";
    ///  String suffix = ".jpg";
    ///  int imageCount = 1;
    ///  float pixelX=800f;
    ///  float pixelY=600f;
    ///  while (converter.HasNextImage())
    ///  {
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50);
    ///  imageCount++;
    ///  }
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  Dim prefix As String =  "D:\Test\"
    ///  Dim suffix As String =  ".jpg"
    ///  Dim pixelX As float =800
    ///  Dim pixelY As float=600
    ///  Dim imageCount As Integer =  1
    ///  While converter.HasNextImage()
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, pixelX, pixelY, 50)
    ///  imageCount = imageCount + 1
    ///  End While
    ///</code></example>
    procedure GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Double; imageHeight: Double; quality: Int32); overload;
    ///<summary>
    ///  Saves image to stream with the givin image format, size and quality.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Double; imageHeight: Double; quality: Int32); overload;
    ///<summary>
    ///  Binds a Pdf file for converting.
    ///</summary>
    ///  <param name="inputFile">The pdf file.</param>
    procedure BindPdf(inputFile: string); overload;
    ///<summary>
    ///  Binds a Pdf Stream for convert.
    ///</summary>
    ///  <param name="inputStream">The pdf Stream.</param>
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Close the instance of PdfConverter and release the resources.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF file.
    ///</summary>
    ///  <param name="outputFile">The stream to save the TIFF image.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  converter.SaveAsTIFFClassF(@"D:\Test\test.tiff");
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  converter.SaveAsTIFFClassF(@"D:\Test\test.tiff")
    ///</code></example>
    procedure SaveAsTIFFClassF(outputFile: string); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and save images to a single TIFF ClassF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    procedure SaveAsTIFFClassF(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputFile: string; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images with and saves images to a single TIFF file.
    ///</summary>
    ///  <param name="outputFile">The file name to save the TIFF image</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    ///  <param name="converter">External converter</param>
    procedure SaveAsTIFF(outputFile: string; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; settings: DNTiffSettings); overload;
    ///<summary>
    ///  Converts each pages of a pdf document to images and saves images to a single TIFF stream.
    ///</summary>
    ///  <param name="outputStream">The stream to save the TIFF image.</param>
    ///  <param name="settings">Settings object that defines TIFF parameters.</param>
    ///  <param name="converter">External converter</param>
    procedure SaveAsTIFF(outputStream: DDN.mscorlib.DNStream; settings: DNTiffSettings; converter: DNIIndexBitmapConverter); overload;
    ///<summary>
    ///  Saves image to file with the given image format and dimensions.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfConverter converter = new PdfConverter();
    ///  converter.BindPdf(@"D:\Test\test.pdf");
    ///  converter.DoConvert();
    ///  String prefix = @"D:\Test\";
    ///  String suffix = ".jpg";
    ///  int imageCount = 1;
    ///  while (converter.HasNextImage())
    ///  {
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000);
    ///  imageCount++;
    ///  }
    ///  [Visual Basic]
    ///  Dim converter As PdfConverter =  New PdfConverter()
    ///  converter.BindPdf("D:\Test\test.pdf")
    ///  converter.DoConvert()
    ///  Dim prefix As String =  "D:\Test\"
    ///  Dim suffix As String =  ".jpg"
    ///  Dim imageCount As Integer =  1
    ///  While converter.HasNextImage()
    ///  converter.GetNextImage(prefix + imageCount + suffix, ImageFormat.Jpeg, 800, 1000)
    ///  imageCount = imageCount + 1
    ///  End While
    ///</code></example>
    procedure GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Saves image to stream with the givin image format, size and quality.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="imageWidth">The image width, the unit is pixel.</param>
    ///  <param name="imageHeight">The image height, the unit is pixel.</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat; imageWidth: Int32; imageHeight: Int32); overload;
    ///<summary>
    ///  Saves image to stream with given image format and quality.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat; quality: Int32); overload;
    ///<summary>
    ///  Saves image to stream with given page size, image format and quality.
    ///</summary>
    ///  <param name="outputStream">The stream to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; format: DDN.Aspose.Common.DNImageFormat; quality: Int32); overload;
    ///<summary>
    ///  Saves image to file with given image format and quality.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat; quality: Int32); overload;
    ///<summary>
    ///  Saves image to file with given page size, image format and quality.
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the image.</param>
    ///  <param name="pageSize">The page size of the image.</param>
    ///  <param name="format">The format of the image.</param>
    ///  <param name="quality">The Jpeg file's quality (0~100), 0 is lowest and 100 is highest</param>
    procedure GetNextImage(outputFile: string; pageSize: DNPageSize; format: DDN.Aspose.Common.DNImageFormat; quality: Int32); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Disposes the facade.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Gets or sets flag that controls visibility of hidden areas on the page.
    ///</summary>
    property ShowHiddenAreas: Boolean read get_ShowHiddenAreas write set_ShowHiddenAreas;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets or sets resolution during convertting. The higher resolution, the slower convertting speed. The default value is 150.
    ///</summary>
    property Resolution: DNResolution read get_Resolution write set_Resolution;
    ///<summary>
    ///  Gets or sets start position which you want to convert. The minimal value is 1.
    ///</summary>
    property StartPage: Int32 read get_StartPage write set_StartPage;
    ///<summary>
    ///  Gets or sets end position which you want to convert.
    ///</summary>
    property EndPage: Int32 read get_EndPage write set_EndPage;
    ///<summary>
    ///  Gets or sets document OwnerPassword.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets document UserPassword.
    ///</summary>
    property UserPassword: string read get_UserPassword write set_UserPassword;
    ///<summary>
    ///  Gets the page count.
    ///</summary>
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  Gets the document facade is working on.
    ///</summary>
    property Document: DNDocument read get_Document;
  end;

  TDNPdfConverter = class(TDNGenericImport<DNPdfConverterClass, DNPdfConverter>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfExtractorClass = interface(DNFacadeClass)
  ['{D8CB352E-E16C-5975-9D78-61CD7943FB85}']
  { constructors } 

    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" />
    ///  object.
    ///</summary>
    {class} function init: DNPdfExtractor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfExtractor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfExtractor; overload;

  end;

  ///<summary>
  ///  Class for extracting images and text from PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfExtractor')]
  DNPdfExtractor = interface(DNFacade)
  ['{268C1DE4-8F4E-35EC-95E8-C7651F0E4127}']
  { getters & setters } 

    function get_StartPage: Int32;
    procedure set_StartPage(value: Int32);
    function get_EndPage: Int32;
    procedure set_EndPage(value: Int32);
    function get_ExtractTextMode: Int32;
    procedure set_ExtractTextMode(value: Int32);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_ExtractImageMode: DNExtractImageMode;
    procedure set_ExtractImageMode(value: DNExtractImageMode);
    function get_IsBidi: Boolean;
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Extracts text from a Pdf document using Unicode encoding.
    ///</summary>
    ///<example>
    ///  First example demonstratres how to extract all the text from PDF file.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(@"D:\Text\text.pdf");
    ///  extractor.ExtractText();
    ///  extractor.GetText(@"D:\Text\text.txt");
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf("D:\Text\text.pdf")
    ///  extractor.ExtractText()
    ///  extractor.GetText("D:\Text\text.txt")
    ///</code>
    ///  Second example demonstratres how to extract each page's text into one txt file.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
    ///  extractor.ExtractText();
    ///  String prefix = TestPath + @"Aspose.Pdf.Kit";
    ///  String suffix = ".txt";
    ///  int pageCount = 1;
    ///  while (extractor.HasNextPageText())
    ///  {
    ///  extractor.GetNextPageText(prefix + pageCount + suffix);
    ///  pageCount++;
    ///  }
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
    ///  extractor.ExtractText()
    ///  Dim prefix As String =  TestPath + "Aspose.Pdf.Kit"
    ///  Dim suffix As String =  ".txt"
    ///  Dim pageCount As Integer =  1
    ///  While extractor.HasNextPageText()
    ///  extractor.GetNextPageText(prefix + pageCount + suffix)
    ///  pageCount = pageCount + 1
    ///  End While
    ///</code></example>
    procedure ExtractText; overload;
    ///<summary>
    ///  Extracts text from a Pdf document using specified encoding.
    ///</summary>
    ///<example>
    ///  First example demonstratres how to extract all the text from PDF file.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(@"D:\Text\text.pdf");
    ///  extractor.ExtractText(Encoding.Unicode);
    ///  extractor.GetText(@"D:\Text\text.txt");
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf("D:\Text\text.pdf")
    ///  extractor.ExtractText(Encoding.Unicode)
    ///  extractor.GetText("D:\Text\text.txt")
    ///</code>
    ///  Second example demonstratres how to extract each page's text into one txt file.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
    ///  extractor.ExtractText(Encoding.Unicode);
    ///  String prefix = TestPath + @"Aspose.Pdf.Kit";
    ///  String suffix = ".txt";
    ///  int pageCount = 1;
    ///  while (extractor.HasNextPageText())
    ///  {
    ///  extractor.GetNextPageText(prefix + pageCount + suffix);
    ///  pageCount++;
    ///  }
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
    ///  extractor.ExtractText(Encoding.Unicode)
    ///  Dim prefix As String =  TestPath + "Aspose.Pdf.Kit"
    ///  Dim suffix As String =  ".txt"
    ///  Dim pageCount As Integer =  1
    ///  While extractor.HasNextPageText()
    ///  extractor.GetNextPageText(prefix + pageCount + suffix)
    ///  pageCount = pageCount + 1
    ///  End While
    ///</code></example><param name="encoding">The encoding of the extracted text.</param>
    procedure ExtractText(encoding: DDN.mscorlib.DNEncoding); overload;
    ///<summary>
    ///  Saves text to file. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" />
    ///</summary>
    ///  <param name="outputFile">The file path and name to save the text.</param>
    procedure GetText(outputFile: string); overload;
    ///<summary>
    ///  Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" />
    ///</summary>
    ///  <param name="outputStream">The stream to save the text.</param>
    procedure GetText(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Bind input PDF file.
    ///</summary>
    ///  <param name="inputFile">PDF fiel to bind</param>
    ///<example><code lang="C#">
    ///  PdfExtractor ext = new PdfExtractor();
    ///  ext.BindPdf("sample.pdf");
    ///</code></example>
    procedure BindPdf(inputFile: string); overload;
    ///<summary>
    ///  Binds PDF document from stream.
    ///</summary>
    ///  <param name="inputStream">Stream containing PDF document data</param>
    ///<example><code lang="C#">
    ///  PdfExtractor ext = new PdfExtractor();
    ///  Stream stream = new FileStream("sample.pdf", FileMode.Open, FileAccess.Read);
    ///  ext.BindPdf(stream);
    ///</code></example>
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Extract images from PDF file.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf("sample.pdf");
    ///  extractor.ExtractImage();
    ///  int i = 1;
    ///  while (extractor.HasNextImage())
    ///  {
    ///  extractor.GetNextImage("image-" + i +".pdf");
    ///  }
    ///</code></example>
    procedure ExtractImage;
    ///<summary>
    ///  Checks if more images are accessible in PDF document. Note: ExtractImage must be called before using of this method.
    ///</summary>
    ///<returns>Trues if more images are accessible</returns>
    ///<example><code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf("sample.pdf");
    ///  extractor.ExtractImage();
    ///  int i = 1;
    ///  while (extractor.HasNextImage())
    ///  {
    ///  extractor.GetNextImage("image-" + i +".pdf");
    ///  }
    ///</code></example>
    function HasNextImage: Boolean;
    ///<summary>
    ///  Retreives next image from PDF document. Note: ExtractImage must be called before using of this method.
    ///</summary>
    ///  <param name="outputFile">File where image will be stored</param>
    ///<returns>True is image is successfully extracted</returns>
    ///<example><code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf("sample.pdf");
    ///  extractor.ExtractImage();
    ///  int i = 1;
    ///  while (extractor.HasNextImage())
    ///  {
    ///  extractor.GetNextImage("image-" + i +".pdf");
    ///  }
    ///</code></example>
    function GetNextImage(outputFile: string): Boolean; overload;
    ///<summary>
    ///  Retreives next image from PDF document with given image format. Note: ExtractImage must be called before using of this method.
    ///</summary>
    ///  <param name="outputFile">File where image will be stored</param>
    ///  <param name="format">The format of the image.</param>
    ///<returns>True is image is successfully extracted</returns>
    function GetNextImage(outputFile: string; format: DDN.Aspose.Common.DNImageFormat): Boolean; overload;
    ///<summary>
    ///  Retreive next image from PDF file and stores it into stream with given image format.
    ///</summary>
    ///  <param name="outputStream">Stream where image data will be saved</param>
    ///  <param name="format">The format of the image.</param>
    ///<returns>True in case the image is successfully extracted.</returns>
    function GetNextImage(outputStream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat): Boolean; overload;
    ///<summary>
    ///  Retreive next image from PDF file and stores it into stream.
    ///</summary>
    ///  <param name="outputStream">Stream where image data will be saved</param>
    ///<returns>True in case the image is successfully extracted.</returns>
    function GetNextImage(outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Returns list of attachments in PDF file. Note: ExtractAttachments must be called befor using this method.
    ///</summary>
    ///<returns>List of attachments</returns>
    ///<example>
    ///  Example demonstrates how to extract attachment names form PDF file.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestSettings.GetInputFile("sample.pdf"));
    ///  extractor.ExtractAttachment();
    ///  IList attachments = extractor.GetAttachNames();
    ///  foreach (string name in attachments)
    ///  Console.WriteLine(name);
    ///</code></example>
    function GetAttachNames: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  Extracts attachments from a Pdf document.
    ///</summary>
    procedure ExtractAttachment; overload;
    ///<summary>
    ///  Extracts attachment to PDF file by attachment name.
    ///</summary>
    ///  <param name="attachmentFileName">Name of attachment to extract</param>
    procedure ExtractAttachment(attachmentFileName: string); overload;
    ///<summary>
    ///  Stores attachment into file.
    ///</summary>
    ///  <param name="outputPath">
    ///  Directory path where attachment(s) will be stored.
    ///  Null or empty string means attachment(s) will be placed in the application directory.
    ///</param>
    procedure GetAttachment(outputPath: string); overload;
    ///<summary>
    ///  Indicates that whether can get more texts or not.
    ///</summary>
    ///<example>
    ///  The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.HasNextPageText" />
    ///  property usage in text extraction scenario.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
    ///  extractor.ExtractText(Encoding.Unicode);
    ///  String prefix = TestPath + @"Aspose.Pdf.Kit";
    ///  String suffix = ".txt";
    ///  int pageCount = 1;
    ///  while (extractor.HasNextPageText())
    ///  {
    ///  extractor.GetNextPageText(prefix + pageCount + suffix);
    ///  pageCount++;
    ///  }
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
    ///  extractor.ExtractText(Encoding.Unicode)
    ///  Dim prefix As String =  TestPath + "Aspose.Pdf.Kit"
    ///  Dim suffix As String =  ".txt"
    ///  Dim pageCount As Integer =  1
    ///  While extractor.HasNextPageText()
    ///  extractor.GetNextPageText(prefix + pageCount + suffix)
    ///  pageCount = pageCount + 1
    ///  End While
    ///</code></example><returns>Can get more texts or not, true is can, or false.</returns>
    function HasNextPageText: Boolean;
    ///<summary>
    ///  Saves one page's text to file.
    ///</summary>
    ///<example>
    ///  The example demonstratres the GetNextPageText method usage in text extraction scenario.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
    ///  extractor.ExtractText(Encoding.Unicode);
    ///  String prefix = TestPath + @"Aspose.Pdf.Kit";
    ///  String suffix = ".txt";
    ///  int pageCount = 1;
    ///  while (extractor.HasNextPageText())
    ///  {
    ///  extractor.GetNextPageText(prefix + pageCount + suffix);
    ///  pageCount++;
    ///  }
    ///</code><code lang="VB.NET">
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf(TestPath + "Aspose.Pdf.Kit.Pdf")
    ///  extractor.ExtractText(Encoding.Unicode)
    ///  Dim prefix As String =  TestPath + "Aspose.Pdf.Kit"
    ///  Dim suffix As String =  ".txt"
    ///  Dim pageCount As Integer =  1
    ///  While extractor.HasNextPageText()
    ///  extractor.GetNextPageText(prefix + pageCount + suffix)
    ///  pageCount = pageCount + 1
    ///  End While
    ///</code></example><param name="outputFile">The file path and name to save the text.</param>
    procedure GetNextPageText(outputFile: string); overload;
    ///<summary>
    ///  Saves one page's text to stream.
    ///</summary>
    ///<example>
    ///  The example demonstratres the <see cref="M:Aspose.Pdf.Facades.PdfExtractor.GetNextPageText(System.String)" />
    ///  method usage in text extraction scenario.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(TestPath + @"Aspose.Pdf.Kit.Pdf");
    ///  extractor.ExtractText(Encoding.Unicode);
    ///  String prefix = TestPath + @"Aspose.Pdf.Kit";
    ///  String suffix = ".txt";
    ///  int pageCount = 1;
    ///  while (extractor.HasNextPageText())
    ///  {
    ///  FileStream fs = new FileStream(prefix + pageCount + suffix, FileMode.Create);
    ///  extractor.GetNextPageText(prefix + pageCount + suffix);
    ///  fs.Close();
    ///  pageCount++;
    ///  }
    ///</code></example><param name="outputStream">The stream to save the text.</param>
    procedure GetNextPageText(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves text to stream. see also:<see cref="M:Aspose.Pdf.Facades.PdfExtractor.ExtractText" />
    ///</summary>
    ///  <param name="outputStream">The stream to save the text.</param>
    ///  <param name="filterNotAscii">If this parameter is true all Not ASCII simbols will be removed</param>
    procedure GetText(outputStream: DDN.mscorlib.DNStream; filterNotAscii: Boolean); overload;
    ///<summary>
    ///  Saves all the attachment file to streams.
    ///</summary>
    ///<returns>The stream array of the attachment file in the pdf document.</returns>
    ///<example><code>
    ///  [C#]
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(path + "Attach.pdf");
    ///  extractor.ExtractAttachment();
    ///  IList names = extractor.GetAttachNames();
    ///  MemoryStream[] tempStreams =  extractor.GetAttachment();
    ///  for (int i=0; i&lt;tempStreams.Length; i++)
    ///  {
    ///  string name = (string)names[i];
    ///  FileStream fs = new FileStream(path + name,System.IO.FileMode.Create);
    ///  byte[] tempBytes = new byte[4096];
    ///  tempStreams[i].Position = 0;
    ///  for (; ; )
    ///  {
    ///  int numOfBytes = tempStreams[i].Read(tempBytes, 0, 4096);
    ///  if (numOfBytes &lt; 1)
    ///  break;
    ///  fs.Write(tempBytes, 0, numOfBytes);
    ///  }
    ///  fs.Close();
    ///  }
    ///  [Visual Basic]
    ///  Dim extractor As PdfExtractor =  New PdfExtractor()
    ///  extractor.BindPdf(path + "Attach.pdf")
    ///  extractor.ExtractAttachment()
    ///  extractor.GetAttachment(path)
    ///  Dim names As IList =  extractor.GetAttachNames()
    ///  Dim tempStreams() As MemoryStream =  extractor.GetAttachment()
    ///  for(Integer i = 0 i&lt;tempStreams.Length i++)
    ///  {
    ///  Dim name As String = CType(names(i), String)
    ///  Dim fs As FileStream =  New FileStream(path + name,System.IO.FileMode.Create)
    ///  Dim tempBytes() As Byte =  New Byte(4096) {}
    ///  tempStreams(i).Position = 0
    ///  for()
    ///  {
    ///  Dim numOfBytes As Integer =  tempStreams(i).Read(tempBytes,0,4096)
    ///  If numOfBytes &lt; 1 Then
    ///  break
    ///  End If
    ///  fs.Write(tempBytes, 0, numOfBytes)
    ///  }
    ///  fs.Close()
    ///  }
    ///</code></example>
    function GetAttachment: TArray<DDN.mscorlib.DNMemoryStream>; overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Disposes Aspose.Pdf.Document bound with a facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Disposes the facade.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets start page in the page range where extracting operation will be performed.
    ///<example><code lang="C#">
    ///  PdfExtractor ext = new PdfExtractor();
    ///  ext.BindBdf("sample.pdf");
    ///  ext.StartPage = 2;
    ///  ext.EndPage = 5;
    ///  ext.ExtractText();
    ///</code></example></summary>
    property StartPage: Int32 read get_StartPage write set_StartPage;
    ///<summary>
    ///  Gets or sets end page in the page range where extracting operation will be performed.
    ///<example><code lang="C#">
    ///  PdfExtractor ext = new PdfExtractor();
    ///  ext.BindBdf("sample.pdf");
    ///  ext.StartPage = 2;
    ///  ext.EndPage = 3;
    ///  ext.ExtractText();
    ///</code></example></summary>
    property EndPage: Int32 read get_EndPage write set_EndPage;
    ///<summary>
    ///  Sets the mode for extract text's result.
    ///</summary>
    ///<value>0 is pure text mode and 1 is raw ordering mode. Default is 0.</value><example>
    ///  The example demonstratres the <see cref="P:Aspose.Pdf.Facades.PdfExtractor.ExtractTextMode" />
    ///  property usage in text extraction scenario.
    ///<code lang="C#">
    ///  PdfExtractor extractor = new PdfExtractor();
    ///  extractor.BindPdf(@"D:\Text\text.pdf");
    ///  extractor.ExtractTextMode = 1;
    ///  extractor.ExtractText();
    ///  extractor.GetText(@"D:\Text\text.txt");
    ///</code></example>
    property ExtractTextMode: Int32 read get_ExtractTextMode write set_ExtractTextMode;
    ///<summary>
    ///  Gets or sets text search options.
    ///</summary>
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    ///<summary>
    ///  Sets the mode for extract images process.
    ///</summary>
    ///<remarks>
    ///  Default value is ExtractImageMode.DefinedInResources that extracts all images defined in resources.
    ///  To extract actually shown images ExtractImageMode.ActuallyUsed mode should be used.
    ///</remarks>
    property ExtractImageMode: DNExtractImageMode read get_ExtractImageMode write set_ExtractImageMode;
    ///<summary>
    ///  Is true when text has hebriew or arabic symbols. This case must be specially considered because
    ///  string functions change their behaviour and start process text from right to left (except numbers
    ///  and other non text chars).
    ///</summary>
    property IsBidi: Boolean read get_IsBidi;
    ///<summary>
    ///  Set or gets resolution for extracted images.
    ///  Default value is 150.
    ///  Images which have greater resolution value are more clear.
    ///  However increasing resolution value results in increasing time and memory needed to extract images.
    ///  Usually to get clear image it's enough to set resolution to 150 or 300.
    ///</summary>
    property Resolution: Int32 read get_Resolution write set_Resolution;
    ///<summary>
    ///  Gets or sets input file's password.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets the document facade is working on.
    ///</summary>
    property Document: DNDocument read get_Document;
  end;

  TDNPdfExtractor = class(TDNGenericImport<DNPdfExtractorClass, DNPdfExtractor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNSaveableFacadeClass = interface(DNFacadeClass)
  ['{8C234CDD-8236-5B49-9BC7-429424235CD2}']
  end;

  ///<summary>
  ///  Base class for all saveable facades.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.SaveableFacade')]
  DNSaveableFacade = interface(DNFacade)
  ['{69908784-F007-31CB-8B1C-27AE9E2F3B08}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcFile">The PDF file.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcStream">The stream of PDF file.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Disposes Aspose.Pdf.Document bound with a facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Disposes the facade.
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the document facade is working on.
    ///</summary>
    property Document: DNDocument read get_Document;
  end;

  TDNSaveableFacade = class(TDNGenericImport<DNSaveableFacadeClass, DNSaveableFacade>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacades_FormClass = interface(DNSaveableFacadeClass)
  ['{6255B13E-976D-5F8A-81ED-CCF6248328B0}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    ///<summary>
    ///  Constructor of Form with two stream parameters.
    ///  Specify same source and destination stream for incremental update.
    ///</summary>
    ///  <param name="srcStream">Source stream.</param>
    ///  <param name="destStream">Destination stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form(
    ///  new FileStream( "InFile.pdf", FileMode.Open, FileAccess.Read),
    ///  new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write));
    ///</code></example>
    {class} function init(srcStream: DDN.mscorlib.DNStream; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    ///<summary>
    ///  Construtcor of Form without parameters.
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form();
    ///  form.SrcFileName = "file.pdf";
    ///</code></example></summary>
    {class} function init: DNFacades_Form; overload;
    ///<summary>
    ///  Constructor of Form.
    ///</summary>
    ///  <param name="srcFileName">Source file path.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///</code></example>
    {class} function init(srcFileName: string): DNFacades_Form; overload;
    ///<summary>
    ///  Constructor for form.
    ///</summary>
    ///  <param name="srcStream">source stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read));
    ///</code></example>
    {class} function init(srcStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    ///<summary>
    ///  Constructor of Form class.
    ///  Specify same source file name and destination file name to perform incremental update.
    ///</summary>
    ///  <param name="srcFileName">Path of the source file.</param>
    ///  <param name="destFileName">Path of the destination file.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
    ///</code></example>
    {class} function init(srcFileName: string; destFileName: string): DNFacades_Form; overload;
    ///<summary>
    ///  Constructor of Form.
    ///</summary>
    ///  <param name="srcFileName">Source file path.</param>
    ///  <param name="destStream">Destination file path.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_Updated.pdf");
    ///</code></example>
    {class} function init(srcFileName: string; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    ///<summary>
    ///  Constructor of Form
    ///</summary>
    ///  <param name="srcStream">Source stream.</param>
    ///  <param name="destFileName">Destination file path.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form(new FileStream("PdfForm.pdf", FileMode.Open, FileAccess.Read), "PdfForm_Updated.pdf");
    ///</code></example>
    {class} function init(srcStream: DDN.mscorlib.DNStream; destFileName: string): DNFacades_Form; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.Form" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNFacades_Form; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.Form" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="destFileName">
    ///  Path of the destination file.
    ///</param>
    {class} function init(document: DNDocument; destFileName: string): DNFacades_Form; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.Form" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="destStream">
    ///  Destination stream.
    ///</param>
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNFacades_Form; overload;
    ///<summary>
    ///  Creates form which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Stream containing source document.</param>
    ///  <param name="response">HttpResponse object where result will be saved.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.Aspose.Common.DNHttpResponse): DNFacades_Form; overload;
    ///<summary>
    ///  Creates form which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Name of input file.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    {class} function init(inputFile: string; response: DDN.Aspose.Common.DNHttpResponse): DNFacades_Form; overload;

  { static propertys } 

    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  ///<summary>
  ///  Class representing Acro form object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Form')]
  DNFacades_Form = interface(DNSaveableFacade)
  ['{83559992-CC72-3B38-891F-5D954EC5AD69}']
  { getters & setters } 

    function get_ImportResult: TArray<DNForm_FormImportResult>;
    function get_SrcFileName: string;
    procedure set_SrcFileName(value: string);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_DestFileName: string;
    procedure set_DestFileName(value: string);
    function get_SrcStream: DDN.mscorlib.DNStream;
    procedure set_SrcStream(value: DDN.mscorlib.DNStream);
    function get_DestStream: DDN.mscorlib.DNStream;
    procedure set_DestStream(value: DDN.mscorlib.DNStream);
    function get_FieldNames: TArray<string>;
    function get_FormSubmitButtonNames: TArray<string>;
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.Aspose.Common.DNHttpResponse;
    procedure set_Response(value: DDN.Aspose.Common.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Imports the content of the fields from the xml file and put them into the new pdf.
    ///</summary>
    ///  <param name="inputXmlStream">The input xml stream.</param>
    ///  <param name="IgnoreFormTemplateChanges">If this parameter is true then all changes of the XFA form template will not be saved</param>
    procedure ImportXml(inputXmlStream: DDN.mscorlib.DNStream; IgnoreFormTemplateChanges: Boolean); overload;
    ///<summary>
    ///  Fills field with specified value.
    ///</summary>
    ///  <param name="fieldName">Name of field</param>
    ///  <param name="value">New value of the field</param>
    ///  <param name="fitFontSize">If true, the font size in the edit boxes will be fitted.</param>
    ///<returns>true if field was found and successfully filled.</returns>
    function FillField(fieldName: string; value: string; fitFontSize: Boolean): Boolean; overload;
    ///<summary>
    ///  Returns FrofmFieldFacade object containing all appearance attributes.
    ///<example><code lang="C#">
    ///  Aspose.Pdf.Facades.Form form = new Aspose.Pdf.Facades.Form("form.pdf");
    ///  FormFieldFacade field = form.GetFieldFacade("field1");
    ///  Console.WriteLine("Color of field border: " + field.BorderColor);
    ///</code></example></summary>
    ///  <param name="fieldName">Name of field to read.</param>
    ///<returns>FormFieldFacade object</returns>
    function GetFieldFacade(fieldName: string): DNFormFieldFacade;
    ///<summary>
    ///  Fills the field with a valid value according to a fully qualified field name.
    ///  Before filling the fields, every field's names and its corresponding valid values must be known.
    ///  Both the fields' name and values are case sensitive.
    ///  Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial
    ///  field names in contrast with Aspose.Pdf.Kit;
    ///  For example if field has full name "Form.Subform.TextField" you should specify full name and not "TextField".
    ///  You can use FieldNames property to explore existing field names and search required field by its partial name.
    ///</summary>
    ///  <param name="fieldName">The field's name to be filled.</param>
    ///  <param name="fieldValue">The field's value which must be a valid value for some fields.</param>
    ///<returns>true if field is found and filled successfully.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form(TestSettings.GetInputFile("PdfForm.pdf"));
    ///  form.FillField("FirstName", "John");
    ///  form.FillField("LastName",  "Smith");
    ///</code><code lang="C#">
    ///  //how to search field by its partial name:
    ///  Form form = new Form("input.pdf", "output.pdf");
    ///  foreach(string fieldName in form.FieldNames)
    ///  {
    ///  if (fieldName.EndsWith("TextField"))
    ///  {
    ///  Console.WriteLine("Full name is: " + fieldName);
    ///  }
    ///  }
    ///</code></example>
    function FillField(fieldName: string; fieldValue: string): Boolean; overload;
    ///<summary>
    ///  Fills the radio box field with a valid index value according to a fully qualified field name.
    ///  Before filling the fields, only field's name must be known. While the value can be specified by its index.
    ///  Notice: Only be applied to Radio Box, Combo Box and List Box fields.
    ///  Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial
    ///  field names in contrast with Aspose.Pdf.Kit;
    ///  For example if field has full name "Form.Subform.ListBoxField" you should specify full name and not "ListBoxField".
    ///  You can use FieldNames property to explore existing field names and search required field by its partial name.
    ///</summary>
    ///  <param name="fieldName">Name of field to be filled.</param>
    ///  <param name="index">Index of chosen item.</param>
    ///<returns>true if field was found and successfully filled.</returns>
    ///<example lang="C#"><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  form.FillField("listboxField", 2);
    ///  form.FillField("comboboxField", 2);
    ///  form.FillField("radiobuttonField", 2);
    ///</code><code lang="C#">
    ///  //how to search field by its partial name:
    ///  Form form = new Form("input.pdf", "output.pdf");
    ///  foreach(string fieldName in form.FieldNames)
    ///  {
    ///  if (fieldName.EndsWith("ListBoxField"))
    ///  {
    ///  Console.WriteLine("Full name is: " + fieldName);
    ///  }
    ///  }
    ///</code></example>
    function FillField(fieldName: string; index: Int32): Boolean; overload;
    ///<summary>
    ///  Fills the check box field with a boolean value.
    ///  Notice: Only be applied to Check Box.
    ///  Please note that Aspose.Pdf.Facades supports only full field names and does not work with partial
    ///  field names in contrast with Aspose.Pdf.Kit;
    ///  For example if field has full name "Form.Subform.CheckBoxField" you should specify full name and not "CheckBoxField".
    ///  You can use FieldNames property to explore existing field names and search required field by its partial name.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  form.FillField("checkboxField", true);
    ///</code><code lang="C#">
    ///  //how to search field by its partial name:
    ///  Form form = new Form("input.pdf", "output.pdf");
    ///  foreach(string fieldName in form.FieldNames)
    ///  {
    ///  if (fieldName.EndsWith("CheckBoxField"))
    ///  {
    ///  Console.WriteLine("Full name is: " + fieldName);
    ///  }
    ///  }
    ///</code></example><param name="fieldName">The field's name to be filled.</param>
    ///  <param name="beChecked">A boolean flag: true means to check the box, while false to uncheck it.</param>
    ///<returns>true if field was found and successfully filled.</returns>
    function FillField(fieldName: string; beChecked: Boolean): Boolean; overload;
    ///<summary>
    ///  Returns the current value for radio button option fields.
    ///</summary>
    ///  <param name="fieldName">Field Name</param>
    ///<returns>String value for the current radio group optino. See also <see cref="M:Aspose.Pdf.Facades.Form.GetButtonOptionValues(System.String)" />
    ///</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Console.WriteLine(form.GetButtonOptionCurrentValue("btnField"));
    ///</code></example>
    function GetButtonOptionCurrentValue(fieldName: string): string;
    ///<summary>
    ///  Gets the field's value according to its field name.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///<returns>The field's value.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Console.WriteLine("Field value = " + form.GetField("Field1"));
    ///</code></example>
    function GetField(fieldName: string): string;
    ///<summary>
    ///  Gets the full field name according to its short field name.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///<returns>The full field name.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Console.WriteLine("Full field name is : " + form.GetFullFieldName("textField"));
    ///</code></example>
    function GetFullFieldName(fieldName: string): string;
    ///<summary>
    ///  Get the limitation of text field.
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///<returns>Return the limitation number of characters a text field can be filled. It not set, return 0.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Console.WriteLine(form.GetFieldLimit("textfieldBox"));
    ///</code></example>
    function GetFieldLimit(fieldName: string): Int32;
    ///<summary>
    ///  Saves the value of the filled fields and close the opened Pdf document.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_Changed.pdf");
    ///  form.FillField("textField", "new value");
    ///  form.Save();
    ///</code></example>
    procedure Save; overload;
    ///<summary>
    ///  Saves document into specified file.
    ///</summary>
    ///  <param name="destFile">File where document will be saved.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves document into specified stream.
    ///</summary>
    ///  <param name="destStream">Stream where document will be saved.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Closes opened files without any changes.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Flattens all the fields.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  form.FlattenAllFields();
    ///</code></example>
    procedure FlattenAllFields;
    ///<summary>
    ///  Flattens a specified field with the fully qualified field name.
    ///  Any other field will remain unchangable. If the fieldName is invalid,
    ///  all the fields will remain unchangable.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  form.FlattenField("textField");
    ///</code></example><param name="fieldName">The name of the field to be flattened.</param>
    procedure FlattenField(fieldName: string);
    ///<summary>
    ///  Fill a barcode field according to its fully qualified field name.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///  <param name="data">The new barcode value.</param>
    ///<returns>If filling succeed, return true; otherwise, false.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  form.FillBarcodeField("textField", "42207252");
    ///</code></example>
    function FillBarcodeField(fieldName: string; data: string): Boolean;
    ///<summary>
    ///  Imports the content of the fields from the fdf file and put them into the new pdf.
    ///</summary>
    ///  <param name="inputFdfStream">The input fdf stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_imported.pdf");
    ///  form.ImportFdf(new FileStream("data.fdf", FileMode.Open, FileAccess.Read));
    ///  form.Save();
    ///</code></example>
    procedure ImportFdf(inputFdfStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Exports the content of the fields of the pdf into the fdf stream.
    ///</summary>
    ///  <param name="outputFdfStream">The output fdf stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Stream stream = new FileStream("export.fdf", FileMode.Create, FileAccess.Write);
    ///  form.ExportFdf(stream);
    ///  stream.Close();
    ///</code></example>
    procedure ExportFdf(outputFdfStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Imports the content of the fields from the xml file and put them into the new pdf.
    ///</summary>
    ///  <param name="inputXmlStream">Stream from which XML for import is read.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "Form_Imported.pdf");
    ///  FileStream fs = new FileStream(TestSettings.GetInputFile("import.xml"), FileMode.Open, FileAccess.Read);
    ///  form.ImportXml(fs);
    ///  form.Save();
    ///</code></example>
    procedure ImportXml(inputXmlStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Exports the content of the fields of the pdf into the xml stream.
    ///  The button field's value will not be exported.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf"));
    ///  FileStream fs = new FileStream("export.xml", FileMode.Create, FileAccess.Write);
    ///  form.ExportXml(fs);
    ///  fs.Close();
    ///</code></example><param name="outputXmlStream">Output Xml stream.</param>
    procedure ExportXml(outputXmlStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Extracts XFA data packet
    ///</summary>
    ///  <param name="outputXmlStream">Stream where XML data will be stored.</param>
    procedure ExtractXfaData(outputXmlStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Replaces XFA data with specified data packet. Data packet may be extracted using ExtractXfaData.
    ///</summary>
    ///  <param name="inputXmlStream">Stream where XML is stored.</param>
    procedure SetXfaData(inputXmlStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Imports the content of the fields from the xfdf(xml) file and put them into the new pdf.
    ///</summary>
    ///  <param name="inputXfdfStream">The input xfdf(xml) stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "Form_ImportXfdf.pdf");
    ///  Stream fs = new FileStream("export_old.xfdf", FileMode.Open, FileAccess.Read);
    ///  form.ImportXfdf(fs);
    ///  fs.Close();
    ///  form.Save();
    ///</code></example>
    procedure ImportXfdf(inputXfdfStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Exports the content of the fields of the pdf into the xml stream.
    ///  The button field's value will not be exported.
    ///</summary>
    ///  <param name="outputXfdfStream">The output xml stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  FileStream fs = new FileStream("export.xfdf", FileMode.Create, FileAccess.Write);
    ///  form.ExportXfdf(fs);
    ///  fs.Close();
    ///</code></example>
    procedure ExportXfdf(outputXfdfStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Fill a field with multiple selections.Note: only for AcroForm List Box Field.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///  <param name="fieldValues">A string array which contains several items to be selected.</param>
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form("PdfForm.pdf", "Form_Updated.pdf");
    ///  form.FillField("ListBox1", new String[] { "Three", "One" });
    ///  form.Save();
    ///</code></example>
    procedure FillField(fieldName: string; fieldValues: TArray<string>); overload;
    ///<summary> Renames a field. Either AcroForm field or XFA field is OK.
    ///</summary>
    ///  <param name="fieldName">the old field name
    ///</param>
    ///  <param name="newFieldName">the new field name
    ///</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfFormUpdated.pdf");
    ///  form.RenameField("field", "field1");
    ///  form.Save();
    ///</code></example>
    procedure RenameField(fieldName: string; newFieldName: string);
    ///<summary>
    ///  Get a Rich Text field's value, including the formattinf information of every character.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name of the Rich Text field.</param>
    ///<returns>Return a string containing formatting information of the Rich Text field.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  Console.WriteLine(form.GetRichText("txtDescriptionRTF"));
    ///</code></example>
    function GetRichText(fieldName: string): string;
    ///<summary>
    ///  Returns the submit button's submission flags
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///<returns>Submission flags of the button.</returns>
    ///<example><code lang="C#">
    ///  Aspose.Pdf.Facades.Form form = new Aspose.Pdf.Facades.Form("PdfForm.pdf");
    ///  System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Xfdf )!= 0 ? " XFDF" : " ");
    ///  System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Fdf )!= 0 ? " FDF" : " ");
    ///  System.Console.WriteLine((form.GetSubmitFlags("btnSubmit") | Aspose.Pdf.Facades.SubmitFormFlag.Pdf )!= 0 ? " PDF" : " ");
    ///</code></example>
    function GetSubmitFlags(fieldName: string): DNSubmitFormFlag;
    ///<summary>
    ///  Returns type of field.
    ///</summary>
    ///  <param name="fieldName">Field name.</param>
    ///<returns>Element of FileType enumeration corresponding to field type.</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  if (form.GetFieldType("textField") == FieldType.Text)
    ///  {
    ///  Console.WriteLine("Type of field is text");
    ///  }
    ///</code></example>
    function GetFieldType(fieldName: string): DNFieldType;
    ///<summary>
    ///  Determines whether field is required or not.
    ///</summary>
    ///  <param name="fieldName">The name of field.</param>
    ///<returns>True - the field is required; otherwise, false.</returns>
    function IsRequiredField(fieldName: string): Boolean;
    ///<summary>
    ///  Returns flags of the field.
    ///</summary>
    ///  <param name="fieldName">Field name</param>
    ///<returns>Property flag (ReadOnly/ Required/NoExport</returns>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  if (form.GetFieldFlag("textField") == PropertyFlag.ReadOnly)
    ///  {
    ///  Console.WriteLine("Field is read-only");
    ///  }
    ///</code></example>
    function GetFieldFlag(fieldName: string): DNPropertyFlag;
    ///<summary>
    ///  Pastes an image onto the existing button field as its appearance according to
    ///  its fully qualified field name.
    ///</summary>
    ///  <param name="fieldName"> The fully qualified field name of the image button field.</param>
    ///  <param name="imageFileName">The path of the image file, relative and absolute are both ok.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
    ///  form.FillImageField("fieldName", "file.jpg");
    ///  form.Save();
    ///</code></example>
    procedure FillImageField(fieldName: string; imageFileName: string); overload;
    ///<summary>
    ///  Overloads function of FillImageField.
    ///  The input is a image stream.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///  <param name="imageStream">The image's stream.</param>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf", "PdfForm_filled.pdf");
    ///  form.FillImageField("fieldName", new FileStream("file.jpg", FileMode.Open, FileAccess.Read));
    ///</code></example>
    procedure FillImageField(fieldName: string; imageStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Result of last import operation. Array of objects which descibre result of import for each field.
    ///</summary>
    property ImportResult: TArray<DNForm_FormImportResult> read get_ImportResult;
    ///<summary>
    ///  Gets or sets source file name.
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form();
    ///  form.SrcFileName = "file.pdf";
    ///</code></example></summary>
    property SrcFileName: string read get_SrcFileName write set_SrcFileName;
    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    ///<summary>
    ///  Gets or sets destiination file name.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form();
    ///  form.DestFileName = "file.pdf";
    ///</code></example>
    property DestFileName: string read get_DestFileName write set_DestFileName;
    ///<summary>
    ///  Gets or sets source stream.
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form();
    ///  form.SrcStream = new FileStream("source.pdf", FileMode.Open, FileAccess.Read);
    ///</code></example></summary>
    property SrcStream: DDN.mscorlib.DNStream read get_SrcStream write set_SrcStream;
    ///<summary>
    ///  Gets or sets destination stream.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Aspose.Pdf.Facades.Form();
    ///  form.DestStream = new FileStream("file.pdf", FileMode.Open, FileAccess.Read);
    ///</code></example>
    property DestStream: DDN.mscorlib.DNStream read get_DestStream write set_DestStream;
    ///<summary>
    ///  Gets list of field names on the form.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  string[] fields = form.FieldNames;
    ///  foreach(string field in fields)
    ///  {
    ///  Console.WriteLine(field);
    ///  }
    ///</code></example>
    property FieldNames: TArray<string> read get_FieldNames;
    ///<summary>
    ///  Gets all form submit button names.
    ///</summary>
    ///<example><code lang="C#">
    ///  Form form = new Form("PdfForm.pdf");
    ///  string[] submits = form.FormSubmitButtonNames;
    ///  foreach(string btn in submits)
    ///  {
    ///  Console.WriteLine(btn);
    ///  }
    ///</code></example>
    property FormSubmitButtonNames: TArray<string> read get_FormSubmitButtonNames;
    ///<summary>
    ///  Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment.
    ///  Default: inline.
    ///</summary>
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    ///<summary>
    ///  Gets or sets Response object where result of operation will be stored.
    ///</summary>
    property Response: DDN.Aspose.Common.DNHttpResponse read get_Response write set_Response;
    ///<summary>
    ///  Gets or sets save options when result is stored as HttpResponse.
    ///  Default value: PdfSaveOptions.
    ///</summary>
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    ///<summary>
    ///  Gets or sets name of attachment when result of operation is stored into HttpResponse objects as attachment.
    ///</summary>
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNFacades_Form = class(TDNGenericImport<DNFacades_FormClass, DNFacades_Form>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormEditorClass = interface(DNSaveableFacadeClass)
  ['{93B6B997-58BA-5ECC-9489-EFA8F2FB6ACA}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    ///<summary>
    ///  Constructor for FormEditor.
    ///</summary>
    ///  <param name="srcStream">Source stream.</param>
    ///  <param name="destStream">Destination stream.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor(
    ///  new FileStream(new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read),
    ///  new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write));
    ///</code></example>
    {class} function init(srcStream: DDN.mscorlib.DNStream; destStream: DDN.mscorlib.DNStream): DNFormEditor; overload;
    ///<summary>
    ///  Constructor for FormEditor
    ///</summary>
    ///  <param name="srcFileName">Name of source file.</param>
    ///  <param name="destFileName">Name of destination file.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
    ///</code></example>
    {class} function init(srcFileName: string; destFileName: string): DNFormEditor; overload;
    ///<summary>
    ///  Constructor for FormEditor.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor();
    ///</code></example>
    {class} function init: DNFormEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">Pdf document.</param>
    {class} function init(document: DNDocument): DNFormEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="destFileName">Path of the destination file.</param>
    {class} function init(document: DNDocument; destFileName: string): DNFormEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.FormEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="destStream">Destination stream.</param>
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNFormEditor; overload;
    ///<summary>
    ///  Creates FormEditor which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Source stream.</param>
    ///  <param name="response">HttpResponse object where result will be saved.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.Aspose.Common.DNHttpResponse): DNFormEditor; overload;
    ///<summary>
    ///  Creates FormEditor which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Source file name.</param>
    ///  <param name="response">HttpResponse objects where result be saved.</param>
    {class} function init(inputFile: string; response: DDN.Aspose.Common.DNHttpResponse): DNFormEditor; overload;

  { static propertys } 

    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  ///<summary>
  ///  Class for editing forms (ading/deleting field etc)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FormEditor')]
  DNFormEditor = interface(DNSaveableFacade)
  ['{D207B362-E3FC-3497-BD08-BA6D50B0D0E7}']
  { getters & setters } 

    function get_SrcFileName: string;
    procedure set_SrcFileName(value: string);
    function get_DestFileName: string;
    procedure set_DestFileName(value: string);
    function get_SrcStream: DDN.mscorlib.DNStream;
    procedure set_SrcStream(value: DDN.mscorlib.DNStream);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_DestStream: DDN.mscorlib.DNStream;
    procedure set_DestStream(value: DDN.mscorlib.DNStream);
    function get_Items: TArray<string>;
    procedure set_Items(value: TArray<string>);
    function get_ExportItems: TArray<TArray<string>>;
    procedure set_ExportItems(value: TArray<TArray<string>>);
    function get_Facade: DNFormFieldFacade;
    procedure set_Facade(value: DNFormFieldFacade);
    function get_RadioGap: Single;
    procedure set_RadioGap(value: Single);
    function get_RadioHoriz: Boolean;
    procedure set_RadioHoriz(value: Boolean);
    function get_RadioButtonItemSize: Double;
    procedure set_RadioButtonItemSize(value: Double);
    function get_SubmitFlag: DNSubmitFormFlag;
    procedure set_SubmitFlag(value: DNSubmitFormFlag);
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.Aspose.Common.DNHttpResponse;
    procedure set_Response(value: DDN.Aspose.Common.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Closes the facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Saves changes into destination file.
    ///</summary>
    ///  FormEditor formEditor = new FormEditor("InFile.pdf", "OutFile.pdf");
    ///  //make some changes...
    ///  formEditor.Save();
    procedure Save; overload;
    ///<summary>
    ///  Set attributes of field.
    ///</summary>
    ///  <param name="fieldName">Name of field which attributes should be set.</param>
    ///  <param name="flag">Flag (NoExport/ReadOnly/Required)</param>
    ///<returns>true if attribute was set successfully.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf",  "PdfForm_SetFieldAttribute.pdf");
    ///  formEditor.SetFieldAttribute("listboxField", PropertyFlag.ReadOnly);
    ///  formEditor.SetFieldAttribute("textField", PropertyFlag.NoExport);
    ///</code></example>
    function SetFieldAttribute(fieldName: string; flag: DNPropertyFlag): Boolean;
    ///<summary>
    ///  Set field flags
    ///</summary>
    ///  <param name="fieldName">Name of field whose flags should be updated.</param>
    ///  <param name="flags">Flag of the field.</param>
    ///<returns>true if flags were updated successfully.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm1.pdf", "FormEditor_SetFieldAppearance.pdf");
    ///  formEditor.SetFieldAppearance("Name", AnnotationFlags.Hidden);
    ///  formEditor.SetFieldAppearance("Phone", AnnotationFlags.NoView | AnnotationFlags.Print);
    ///</code></example>
    function SetFieldAppearance(fieldName: string; flags: DNAnnotationFlags): Boolean;
    ///<summary>
    ///  Get field flags.
    ///</summary>
    ///  <param name="fieldName">Name of the field.</param>
    ///<returns>Set of field flags</returns>
    function GetFieldAppearance(fieldName: string): DNAnnotationFlags;
    ///<summary>
    ///  Set submit flag of submit button.
    ///</summary>
    ///  <param name="fieldName">Name of submit button.</param>
    ///  <param name="submitFormFlag">Submit flag.</param>
    ///<returns>true if field was found and submit flag was successfully set. </returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitFlag.pdf");
    ///  formEditor.SetSubmitFlag("btnSubmit", SubmitFormFlag.Fdf);
    ///</code></example>
    function SetSubmitFlag(fieldName: string; submitFormFlag: DNSubmitFormFlag): Boolean;
    ///<summary>
    ///  Sets URL of the button.
    ///</summary>
    ///  <param name="fieldName">Submit button name.</param>
    ///  <param name="url">Fully qualified URL.</param>
    ///<returns>true if URL for button was successfully set.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetSubmitUrl.pdf");
    ///  formEditor.SetSubmitUrl("btnSubmit", "www.mysite.com");
    ///</code></example>
    function SetSubmitUrl(fieldName: string; url: string): Boolean;
    ///<summary>
    ///  Sets maximum character count of the text field.
    ///</summary>
    ///  <param name="fieldName">Name of the text field.</param>
    ///  <param name="fieldLimit">New value of limit for the field.</param>
    ///<returns>true if field limit was successfully set.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_SetFieldLimit.pdf");
    ///  formEditor.SetFieldLimit("textField", 15);
    ///</code></example>
    function SetFieldLimit(fieldName: string; fieldLimit: Int32): Boolean;
    ///<summary>
    ///  Sets number of combs for a regular single-line text field (the field is
    ///  automatically divided into as many equally spaced positions, or combs,
    ///  as the value of combNumber parameter).
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///  <param name="combNumber">The number of combs to divide the field into.</param>
    ///<returns>If success, return true;else false.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_SetFieldComb.pdf"));
    ///  formEditor.SetFieldCombNumber("textCombField", 5);
    ///</code></example>
    function SetFieldCombNumber(fieldName: string; combNumber: Int32): Boolean;
    ///<summary>
    ///  Set new position of field.
    ///</summary>
    ///  <param name="fieldName">Name of field which must be moved.</param>
    ///  <param name="llx">Abscissa of the lower-left corner of the field.</param>
    ///  <param name="lly">Ordinate of the lower-left coerner of the field.</param>
    ///  <param name="urx">Abscissa of the upper-right corner of the field.</param>
    ///  <param name="ury">Ordinate of the upper-right corner of the field.</param>
    ///<returns>true if field position was changed successfully.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_MoveField.pdf");
    ///  formEditor.MoveField("textField", 20.5f, 20.3f, 120.6f, 40.8f);
    ///</code></example>
    function MoveField(fieldName: string; llx: Single; lly: Single; urx: Single; ury: Single): Boolean;
    ///<summary>
    ///  Add field of specified type to the form.
    ///</summary>
    ///  <param name="fieldType">Type of the field which must be added.</param>
    ///  <param name="fieldName">Name of the field whic must be added.</param>
    ///  <param name="pageNum">Page number where new field must be placed.</param>
    ///  <param name="llx">Abscissa of the lower-left corner of the field.</param>
    ///  <param name="lly">Ordinate of the lower-left corner of the field.</param>
    ///  <param name="urx">Abscissa of the upper-right corner of the field.</param>
    ///  <param name="ury">Ordinate of the upper-right corner of the field.</param>
    ///<returns>true if field was successfully added.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
    ///  formEditor.AddField(FieldType.Text, "AddedTextField",  1, 10, 30, 110, 46);
    ///  formEditor.Save();
    ///</code></example>
    function AddField(fieldType: DNFieldType; fieldName: string; pageNum: Int32; llx: Single; lly: Single; urx: Single; ury: Single): Boolean; overload;
    ///<summary>
    ///  Add field of specified type to the form.
    ///</summary>
    ///  <param name="fieldType">Type of the field which must be added.</param>
    ///  <param name="fieldName">Name of the field whic must be added.</param>
    ///  <param name="initValue">Initial value of the field.</param>
    ///  <param name="pageNum">Page number where new field must be placed.</param>
    ///  <param name="llx">Abscissa of the lower-left corner of the field.</param>
    ///  <param name="lly">Ordinate of the lower-left corner of the field.</param>
    ///  <param name="urx">Abscissa of the upper-right corner of the field.</param>
    ///  <param name="ury">Ordinate of the upper-right corner of the field.</param>
    ///<returns>true if field was successfully added.</returns>
    ///  /// <example><code lang="C#">
    ///  FormEditor formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_Text.pdf");
    ///  formEditor.AddField(FieldType.Text, "AddedTextField", "Text Value", 1, 10, 30, 110, 46);
    ///  formEditor.Items = new string[] { "Item1", "Item2", Item3" };
    ///  formEditor.AddField(FieldType.Radio, "RadioButtonField", 1, 265, 695, 365, 720);
    ///  formEditor.Save();
    ///</code></example>
    function AddField(fieldType: DNFieldType; fieldName: string; initValue: string; pageNum: Int32; llx: Single; lly: Single; urx: Single; ury: Single): Boolean; overload;
    ///<summary>
    ///  Remove field from the form.
    ///</summary>
    ///  <param name="fieldName">Name of the field which must be removed.</param>
    ///<example><code lang="C#">
    ///  FormEditr formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveField.pdf");
    ///  formEditor.RemoveField("listboxField");
    ///  formEditor.RemoveField("textField");
    ///</code></example>
    procedure RemoveField(fieldName: string);
    ///<summary>
    ///  Reset all visual attribtues to empty value.
    ///</summary>
    procedure ResetFacade;
    ///<summary>
    ///  Reset all visual attribtues of inner facade to empty value.
    ///</summary>
    procedure ResetInnerFacade;
    ///<summary>
    ///  Copies an existing field to the same position in specified page number.
    ///  A new document will be produced, which contains everything the source document has except for the newly copied field.
    ///</summary>
    ///  <param name="fieldName">The old fully qualified field name.</param>
    ///  <param name="newFieldName">The new fully qualified field name. If null, it will be set as fieldName + "~".</param>
    ///  <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
    ///  //Creates copy of text field on psecond page.
    ///  formEditor.CopyInnerField("textField", "textFieldCopy", 2);
    ///</code></example>
    procedure CopyInnerField(fieldName: string; newFieldName: string; pageNum: Int32); overload;
    ///<summary>
    ///  Copies an existing field to a new position specified by both page number and ordinates.
    ///  A new document will be produced, which contains everything the source document has except for the newly copied field.
    ///</summary>
    ///  <param name="fieldName">The old fully qualified field name.</param>
    ///  <param name="newFieldName">The new fully qualified field name. If null, it will be set as fieldName + "~".</param>
    ///  <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
    ///  <param name="abscissa">The abscissa of the new field. If -1, the abscissa will be equaled to the original one.</param>
    ///  <param name="ordinate">The ordinate of the new field. If -1, the ordinate will be equaled to the original one.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_out.pdf");
    ///  //Creates copy of text field on psecond page.
    ///  formEditor.CopyInnerField("textField", "textFieldCopy", 2, 100, 200);
    ///</code></example>
    procedure CopyInnerField(fieldName: string; newFieldName: string; pageNum: Int32; abscissa: Single; ordinate: Single); overload;
    ///<summary>
    ///  Copies an existing field from one PDF document to another document with original page number and ordinates.
    ///  Notice: Only for AcroForm fields (excluding radio box).
    ///</summary>
    ///  <param name="srcFileName"> The name of PDF document which containes the field to be copied.</param>
    ///  <param name="fieldName">The original fully qualified field name.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
    ///  //copies text field from source.pdf to PdfForm.pdf
    ///  formEditor.CopyOuterField("source.pdf", "textField");
    ///  formEditor.Save();
    ///</code></example>
    procedure CopyOuterField(srcFileName: string; fieldName: string); overload;
    ///<summary>
    ///  Copies an existing field from one PDF document to another document with specified page number and original ordinates.
    ///  Notice: Only for AcroForm fields (excluding radio box).
    ///</summary>
    ///  <param name="srcFileName">The name of PDF document which containes the field to be copied.</param>
    ///  <param name="fieldName">The original fully qualified field name.</param>
    ///  <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
    ///  formEditor.CopyOuterField("source.pdf", "textField", 2);
    ///  formEditor.Save();
    ///</code></example>
    procedure CopyOuterField(srcFileName: string; fieldName: string; pageNum: Int32); overload;
    ///<summary>
    ///  Copies an existing field from one PDF document to another document with specified page number and ordinates.
    ///  Notice: Only for AcroForm fields (excluding radio box).
    ///</summary>
    ///  <param name="srcFileName">The name of PDF document which containes the field to be copied.</param>
    ///  <param name="fieldName">The original fully qualified field name.</param>
    ///  <param name="pageNum">The number of page to hold the new field. If -1, new field will be copid to the same page as old one hosted.</param>
    ///  <param name="abscissa">The abscissa of the new field. If -1, the abscissa will be equaled to the original one.</param>
    ///  <param name="ordinate">The ordinate of the new field. If -1, the ordinate will be equaled to the original one.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
    ///  formEditor.CopyOuterField("source.pdf", "textField" , 2, 100, 200);
    ///</code></example>
    procedure CopyOuterField(srcFileName: string; fieldName: string; pageNum: Int32; abscissa: Single; ordinate: Single); overload;
    ///<summary>
    ///  Changes visual attributes of the specified field.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfWithAcroForm.pdf", "FormEditor_DecorateField_text.pdf");
    ///  fe.Facade = new FormFieldFacade();
    ///  fe.Facade.BackgroundColor = System.Drawing.Color.Red;
    ///  fe.Facade.TextColor = System.Drawing.Color.Blue;
    ///  fe.Facade.BorderColor = System.Drawing.Color.Green;
    ///  fe.Facade.Alignment = FormFieldFacade.AlignCenter;
    ///  fe.DecorateField("textField");
    ///</code></example>
    procedure DecorateField(fieldName: string); overload;
    ///<summary>
    ///  Changes visual attributes of all fields with the specified field type.
    ///</summary>
    ///  <param name="fieldType">Type of fields which will be decorated.</param>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
    ///  fe.Facade = new FormFieldFacade();
    ///  fe.Facade.BackgroundColor = System.Drawing.Color.Red;
    ///  fe.Facade.TextColor = System.Drawing.Color.Blue;
    ///  fe.Facade.BorderColor = System.Drawing.Color.Green;
    ///  fe.Facade.Alignment = FormFieldFacade.AlignRight;
    ///  //decorate all text fields.
    ///  fe.DecorateField(FieldType.Text);
    ///</code></example>
    procedure DecorateField(fieldType: DNFieldType); overload;
    ///<summary>
    ///  Changes visual attributes of all fields in the PDF document.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_DecorateField.pdf");
    ///  fe.Facade = new FormFieldFacade();
    ///  fe.Facade.BackgroundColor = System.Drawing.Color.Red;
    ///  fe.Facade.TextColor = System.Drawing.Color.Blue;
    ///  fe.Facade.BorderColor = System.Drawing.Color.Green;
    ///  fe.Facade.Alignment = FormFieldFacade.AlignRight;
    ///  //decorate all fields.
    ///  fe.DecorateField();
    ///</code></example>
    procedure DecorateField; overload;
    ///<summary>
    ///  Change name of the field.
    ///</summary>
    ///  <param name="fieldName">Old name of the field.</param>
    ///  <param name="newFieldName">New name of the field.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
    ///  formEditor.RenameField("textField", "textField_Renamed");
    ///</code></example>
    procedure RenameField(fieldName: string; newFieldName: string);
    ///<summary>
    ///  Remove submit action of the field.
    ///</summary>
    ///  <param name="fieldName">Name of the field.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_RemoveFieldAction.pdf");
    ///  formEditor.RemoveFieldAction("btnSubmit");
    ///</code></example>
    procedure RemoveFieldAction(fieldName: string);
    ///<summary>
    ///  Add submit button on the form.
    ///</summary>
    ///  <param name="fieldName">Name of new button. </param>
    ///  <param name="page">Page where button will be placed.</param>
    ///  <param name="label">Button caption.</param>
    ///  <param name="url">URL of the submit button.</param>
    ///  <param name="llx">Abscissa of the lower-left corner.</param>
    ///  <param name="lly">Ordinate of the lower-left corner.</param>
    ///  <param name="urx">Abscissa of the upper-right corner.</param>
    ///  <param name="ury">Ordinate of the upper-right corner.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "FormEditor_AddSubmitBtn.pdf");
    ///  formEditor.AddSubmitBtn("submit", 1, "Submit", "www.check.com", 10, 200, 70, 270);
    ///</code></example>
    procedure AddSubmitBtn(fieldName: string; page: Int32; &label: string; url: string; llx: Single; lly: Single; urx: Single; ury: Single);
    ///<summary>
    ///  Adds new item to the list box.
    ///</summary>
    ///  <param name="fieldName">Name of the field ot which new item will be added.</param>
    ///  <param name="itemName">Name if new item.</param>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", PdfForm_out.pdf");
    ///  formEditor.AddListItem("listBoxField", "Item 4 (New Item)");
    ///</code></example>
    procedure AddListItem(fieldName: string; itemName: string); overload;
    ///<summary>
    ///  Add a new item with Export value to the existing list box field, only for AcroForm combo box field.
    ///</summary>
    ///  <param name="fieldName">Name of field to which items will be added.</param>
    ///  <param name="exportName">A string array denoting a new list item with Export Value, i.e. (Item Label, Export Value).</param>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfForm.pdf", "FormEditor_AddListItem2.pdf");
    ///  fe.AddListItem("listboxField", new string[] { "4", "Item4(Added)" });
    ///</code></example>
    procedure AddListItem(fieldName: string; exportName: TArray<string>); overload;
    ///<summary>
    ///  Delete item from the list field.
    ///</summary>
    ///  <param name="fieldName">Name of the field.</param>
    ///  <param name="itemName">Name of the item which must be deleted.</param>
    ///<example><code lang="C#">
    ///  formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_DelListItem.pdf");
    ///  formEditor.DelListItem("listboxField", "item2");
    ///</code></example>
    procedure DelListItem(fieldName: string; itemName: string);
    ///<summary>
    ///  Set JavaScript for a PushButton field. If old JavaScript existed, it will be replaced by the new one.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///  <param name="script">The Java script to be added/placed into a push button field.</param>
    ///<returns>true if field scrip was successfully set. </returns>
    function SetFieldScript(fieldName: string; script: string): Boolean;
    ///<summary>
    ///  Add JavaScript for a PushButton field. If old event exists, new event is added after it.
    ///</summary>
    ///  <param name="fieldName">The fully qualified field name.</param>
    ///  <param name="script">The Java script to be added/placed into a push button field.</param>
    ///<returns>True in case script was added successfully.</returns>
    function AddFieldScript(fieldName: string; script: string): Boolean;
    ///<summary>
    ///  Change a single-lined text field to a multiple-lined one.
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///<returns>If success, return true;else false.</returns>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_updated.pdf");
    ///  formEditor.Single2Multiple("textField");
    ///</code></example>
    function Single2Multiple(fieldName: string): Boolean;
    ///<summary>
    ///  Set the alignment style of a text field.
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///  <param name="alignment">The alignment style definition, including FormFieldFacade.AlignLeft,
    ///  FormFieldFacade.AlignCenter and FormFieldFacade.AlignRight.</param>
    ///<returns>true if true if field was found and alignment was set.</returns>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf");
    ///  fe.SetFieldAlignment("form1[0].TextField[0]", FormFieldFacade.AlignLeft);
    ///</code></example>
    function SetFieldAlignment(fieldName: string; alignment: Int32): Boolean;
    ///<summary>
    ///  Set the vertical alignment style of a text field.
    ///</summary>
    ///  <param name="fieldName">The qualified field name.</param>
    ///  <param name="alignment">The alignment style definition, including FormFieldFacade.AlignTop,
    ///  FormFieldFacade.AlignMiddle and FormFieldFacade.AlignRight.</param>
    ///<returns>true if field was found and alignment was successfully filled.</returns>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfStaticForm.pdf", "VerticalAlign.pdf");
    ///  fe.SetFieldAlignmentV("form1[0].TextField[0]", FormFieldFacade.AlignBottom);
    ///</code></example>
    function SetFieldAlignmentV(fieldName: string; alignment: Int32): Boolean;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets name of source file.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor editor = new FormEditor();
    ///  editor.SrcFileName = "InputFile.pdf";
    ///</code></example>
    property SrcFileName: string read get_SrcFileName write set_SrcFileName;
    ///<summary>
    ///  Gets or sets destination file name.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor editor = new FormEditor();
    ///  editor.DestFileName = "OutFile.pdf";
    ///</code></example>
    property DestFileName: string read get_DestFileName write set_DestFileName;
    ///<summary>
    ///  Gets or sets source stream.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor editor = new FormEditor();
    ///  editor.SrcStream = new FileStream("InFile.pdf", FileMode.Open, FileAccess.Read);
    ///</code></example>
    property SrcStream: DDN.mscorlib.DNStream read get_SrcStream write set_SrcStream;
    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    ///<summary>
    ///  Gets or sets destination stream.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor editor = new FormEditor();
    ///  editor.DestStream = new FileStream("OutFile.pdf", FileMode.Create, FileAccess.Write);
    ///</code></example>
    property DestStream: DDN.mscorlib.DNStream read get_DestStream write set_DestStream;
    ///<summary>
    ///  Sets items which will be added t onewly created list box or combo box.
    ///<example><code lang="C#">
    ///  formEditor = new Aspose.Pdf.Facades.FormEditor("input.pdf", "output.pdf");
    ///  formEditor.Items = new string[] { "AAA", "BBB", "CCC" };
    ///  formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "BBB", 1, 10, 30, 110, 130);
    ///  formEditor.Save();
    ///</code></example></summary>
    property Items: TArray<string> read get_Items write set_Items;
    ///<summary> Sets options for combo box with export values.</summary>
    ///<example><code lang="C#">
    ///  FormEditor formEditor = new FormEditor("PdfForm.pdf", "PdfForm_Updated.pdf"));
    ///  formEditor.ExportItems = new string[][]
    ///  {
    ///  new string[] { "1", "Firs" },
    ///  new string[] { "2", "Second" },
    ///  new string[] { "3", "Third" }
    ///  };
    ///  formEditor.AddField(FieldType.ListBox, "AddedListBoxField", "Second", 1, 10, 30, 110, 130);
    ///  formEditor.Save();
    ///</code></example>
    property ExportItems: TArray<TArray<string>> read get_ExportItems write set_ExportItems;
    ///<summary>
    ///  Sets visual attributes of the field.
    ///</summary>
    ///<example><code lang="C#">
    ///  FormEditor fe = new FormEditor("PdfForm.pdf", "PdfForm_DecorateField_text.pdf");
    ///  fe.Facade = new FormFieldFacade();
    ///  fe.Facade.BackgroundColor = System.Drawing.Color.Red;
    ///  fe.Facade.TextColor = System.Drawing.Color.Blue;
    ///  fe.Facade.BorderColor = System.Drawing.Color.Green;
    ///  fe.Facade.Alignment = FormFieldFacade.AlignCenter;
    ///  fe.DecorateField("textField");
    ///  fe.Save();
    ///</code></example>
    property Facade: DNFormFieldFacade read get_Facade write set_Facade;
    ///<summary>
    ///  The member to record the gap between two neighboring radio buttons in pixels,default is 50.
    ///</summary>
    ///<example><code lang="C#">
    ///  formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
    ///  formEditor.RadioGap = 4;
    ///  formEditor.RadioHoriz = false;
    ///  formEditor.Items = new string[] { "First", "Second", "Third" };
    ///  formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
    ///  formEditor.Save();
    ///</code></example>
    property RadioGap: Single read get_RadioGap write set_RadioGap;
    ///<summary>
    ///  The flag to indicate whether the radios are arranged horizontally or vertically, default value is true.
    ///</summary>
    ///<example><code lang="C#">
    ///  formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
    ///  formEditor.RadioGap = 4;
    ///  formEditor.RadioHoriz = false;
    ///  formEditor.Items = new string[] { "First", "Second", "Third" };
    ///  formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
    ///  formEditor.Save();
    ///</code></example>
    property RadioHoriz: Boolean read get_RadioHoriz write set_RadioHoriz;
    ///<summary>
    ///  Gets or sets size of radio button item size (when new radio button field is added).
    ///<code lang="C#">
    ///  formEditor = new Aspose.Pdf.Facades.FormEditor("PdfForm.pdf", "FormEditor_AddField_RadioButton.pdf");
    ///  formEditor.RadioGap = 4;
    ///  formEditor.RadioHoriz = false;
    ///  formEditor.RadioButtonItemSize = 20;
    ///  formEditor.Items = new string[] { "First", "Second", "Third" };
    ///  formEditor.AddField(FieldType.Radio, "AddedRadioButtonField", "Second", 1, 10, 30, 110, 130);
    ///  formEditor.Save();
    ///</code></summary>
    property RadioButtonItemSize: Double read get_RadioButtonItemSize write set_RadioButtonItemSize;
    ///<summary>
    ///  Set the submit button's submission flags
    ///</summary>
    property SubmitFlag: DNSubmitFormFlag read get_SubmitFlag write set_SubmitFlag;
    ///<summary>
    ///  Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment.
    ///  Default: inline.
    ///</summary>
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    ///<summary>
    ///  Gets or sets Response object where result of operation will be stored.
    ///</summary>
    property Response: DDN.Aspose.Common.DNHttpResponse read get_Response write set_Response;
    ///<summary>
    ///  Gets or sets save options when result is stored as HttpResponse.
    ///  Default value: PdfSaveOptions.
    ///</summary>
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    ///<summary>
    ///  Gets or sets name of attachment when result of operation is stored into HttpResponse objects as attachment.
    ///</summary>
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNFormEditor = class(TDNGenericImport<DNFormEditorClass, DNFormEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfAnnotationEditorClass = interface(DNSaveableFacadeClass)
  ['{50FB11EF-3847-522A-B742-9F6830C147B4}']
  { constructors } 

    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" />
    ///  object.
    ///</summary>
    {class} function init: DNPdfAnnotationEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfAnnotationEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfAnnotationEditor; overload;

  end;

  ///<summary>
  ///  Represents a class for work with PDF document annotations (comments).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfAnnotationEditor')]
  DNPdfAnnotationEditor = interface(DNSaveableFacade)
  ['{71B87981-B880-31C1-BBD4-704B2F9A2334}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Imports all annotations from XFDF file.
    ///</summary>
    ///  <param name="xfdfFile">The input XFDF file.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ImportAnnotationsFromXfdf("annots.xfdf");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationsFromXfdf(xfdfFile: string); overload;
    ///<summary>
    ///  Imports all annotations from XFDF file.
    ///</summary>
    ///  <param name="xfdfFile">The input XFDF file.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ImportAnnotationsFromXfdf("annots.xfdf");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationFromXfdf(xfdfFile: string); overload;
    ///<summary>
    ///  Imports the specified annotations from XFDF file.
    ///</summary>
    ///  <param name="xfdfFile">The input XFDF file.</param>
    ///  <param name="annotType">The annotations array to be imported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  AnnotationType[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
    ///  editor.ImportAnnotationFromXfdf("annots.xfdf", annotTypes);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationFromXfdf(xfdfFile: string; annotType: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Imports the specified annotations from XFDF data stream.
    ///</summary>
    ///  <param name="xfdfStream">The input XFDF data stream.</param>
    ///  <param name="annotType">The array of annotation types to be imported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  AnnotationType[] annotTypes ={ AnnotationType.Highlight, AnnotationType.Line };
    ///  editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"), annotTypes);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationFromXfdf(xfdfStream: DDN.mscorlib.DNStream; annotType: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Imports all annotations from XFDF data stream.
    ///</summary>
    ///  <param name="xfdfStream">The input XFDF data stream.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ImportAnnotationsFromXfdf(File.OpenRead("annots.xfdf"));
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationsFromXfdf(xfdfStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Imports all annotations from XFDF data stream.
    ///</summary>
    ///  <param name="xfdfStream">The input XFDF data stream.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ImportAnnotationFromXfdf(File.OpenRead("annots.xfdf"));
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotationFromXfdf(xfdfStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Imports the specified annotations into document from array of another PDF documents.
    ///</summary>
    ///  <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
    ///  <param name="annotType">The array of annotation types to be imported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
    ///  AnnotationType[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
    ///  editor.ImportAnnotations(paths, annotTypes);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotations(annotFile: TArray<string>; annotType: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Imports annotations into document from array of another PDF documents.
    ///</summary>
    ///  <param name="annotFile">The array of paths of PDF documents that contain source annotations.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  string[] paths = new string[2] {"with_annots1.pdf", "with_annots2.pdf"};
    ///  editor.ImportAnnotations(paths);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportAnnotations(annotFile: TArray<string>); overload;
    ///<summary>
    ///  Imports the specified annotations into document from array of another PDF document streams.
    ///</summary>
    ///  <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
    ///  <param name="annotType">The annotation types to be imported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Stream[] streams = new FileStream[2];
    ///  stream[0]= File.OpenRead("with_annots1.pdf");
    ///  stream[1]= File.OpenRead("with_annots2.pdf");
    ///  AnnotationType[] annotTypes = {AnnotationType.Highlight, AnnotationType.Text};
    ///  editor.ImportAnnotations(streams, annotTypes);
    ///  editor.Save("example_out.pdf");
    ///  stream[0].Close();
    ///  stream[1].Close();
    ///</code></example>
    procedure ImportAnnotations(annotFileStream: TArray<DDN.mscorlib.DNStream>; annotType: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Imports annotations into document from array of another PDF document streams.
    ///</summary>
    ///  <param name="annotFileStream">The array of streams of PDF documents that contain source annotations.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Stream[] streams = new FileStream[2];
    ///  streams[0]= File.OpenRead("with_annots1.pdf");
    ///  streams[1]= File.OpenRead("with_annots2.pdf");
    ///  editor.ImportAnnotations(streams);
    ///  editor.Save("example_out.pdf");
    ///  streams[0].Close();
    ///  streams[1].Close();
    ///</code></example>
    procedure ImportAnnotations(annotFileStream: TArray<DDN.mscorlib.DNStream>); overload;
    ///<summary>
    ///  Modifies the annotations of the specifed type on the specified page range.
    ///  It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
    ///</summary>
    ///  <param name="start">The start page number.</param>
    ///  <param name="end">The end page number.</param>
    ///  <param name="annotType">The annotation type.</param>
    ///  <param name="annotation">The annotation object contains new properties.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  TextAnnotation annot = new TextAnnotation();
    ///  annot.Modified = DateTime.Now;
    ///  annot.Title = "NEW AUTHOR";
    ///  annot.Contents = "NEW CONTENTS";
    ///  annot.Color = Color.Red;
    ///  annot.Subject = "NEW SUBJECT";
    ///  annot.Open = true;
    ///  editor.ModifyAnnotations(1, 2, AnnotationType.Text, annot);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ModifyAnnotations(start: Int32; &end: Int32; annotType: DDN.mscorlib.DNEnum; annotation: DNAnnotation); overload;
    ///<summary>
    ///  Modifies the author of annotations on the specified page range.
    ///</summary>
    ///  <param name="start">The start page number.</param>
    ///  <param name="end">The end page number.</param>
    ///  <param name="srcAuthor">The author that must be modified.</param>
    ///  <param name="desAuthor">The new author.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ModifyAnnotationsAuthor(1, 2, "PREV AUTHOR", "NEW AUTHOR");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ModifyAnnotationsAuthor(start: Int32; &end: Int32; srcAuthor: string; desAuthor: string);
    ///<summary>
    ///  Flattens all annotations in the document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.FlatteningAnnotations();
    ///  editor.Save(example_out.pdf");
    ///</code></example>
    procedure FlatteningAnnotations; overload;
    ///<summary>
    ///  Flattens all annotations in the document.
    ///</summary>
    ///  <param name="flattenSettings">Specifies modes of flattening.</param>
    procedure FlatteningAnnotations(flattenSettings: DNForm_FlattenSettings); overload;
    ///<summary>
    ///  Flattens the annotations of the specified types.
    ///</summary>
    ///  <param name="start">The start page.</param>
    ///  <param name="end">Then end page.</param>
    ///  <param name="annotType">The annotation types should be flattened.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  AnnotationType[] annotTypes ={AnnotationType.Line, AnnotationType.FreeText};
    ///  editor.FlatteningAnnotations(1, 2, annotTypes);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure FlatteningAnnotations(start: Int32; &end: Int32; annotType: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Deletes all annotations in the document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteAnnotations();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteAnnotations; overload;
    ///<summary>
    ///  Deletes all annotations of the specified type in the document.
    ///</summary>
    ///  <param name="annotType">The type of annotation will be deleted.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteAnnotations("Text");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteAnnotations(annotType: string); overload;
    ///<summary>
    ///  Deletes the annotation with specified annotation name.
    ///</summary>
    ///  <param name="annotName">The annotation name</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteAnnotation("4cfa69cd-9bff-49e0-9005-e22a77cebf38");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteAnnotation(annotName: string);
    ///<summary>
    ///  Exports the content of the specified annotation types into XFDF
    ///</summary>
    ///  <param name="xmlOutputStream">The output XFDF stream.</param>
    ///  <param name="start">Start page from which the annotations of the document will be exported.</param>
    ///  <param name="end">End page to which the annotations of the document will be exported.</param>
    ///  <param name="annotTypes">The array of annotation types need be exported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  string[] annotTypes = new string[] {"Text", "Highlight"};
    ///  using (Stream stream = File.Create("example.xfdf"))
    ///  {
    ///  editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
    ///  }
    ///</code></example>
    procedure ExportAnnotationsXfdf(xmlOutputStream: DDN.mscorlib.DNStream; start: Int32; &end: Int32; annotTypes: TArray<string>); overload;
    ///<summary>
    ///  Exports the content of the specified annotations types into XFDF
    ///</summary>
    ///  <param name="xmlOutputStream">The output XFDF stream.</param>
    ///  <param name="start">Start page from which the annotations of the document will be exported.</param>
    ///  <param name="end">End page to which the annotations of the document will be exported.</param>
    ///  <param name="annotTypes">The array of annotation types need be exported.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  AnnotationType[] annotTypes = new AnnotationType[] {AnnotationType.Text, AnnotationType.Highlight};
    ///  using (Stream stream = File.Create("example.xfdf"))
    ///  {
    ///  editor.ExportAnnotationsXfdf(stream, 1, 2, annotTypes);
    ///  }
    ///</code></example>
    procedure ExportAnnotationsXfdf(xmlOutputStream: DDN.mscorlib.DNStream; start: Int32; &end: Int32; annotTypes: TArray<DNAnnotationType>); overload;
    ///<summary>
    ///  Exports
    ///</summary>
    ///  <param name="xmlOutputStream"></param>
    procedure ExportAnnotationsToXfdf(xmlOutputStream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Gets the list of annotations of the specified types.
    ///</summary>
    ///  <param name="start">Start page from which the annotations will be selected.</param>
    ///  <param name="end">End page to which the annotations will be selected.</param>
    ///  <param name="annotTypes">The array of needed annotation types.</param>
    ///<returns>Annotations list.</returns>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  string[] annotTypes = new string[] {"Text", "Highlight"};
    ///  IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
    ///</code></example>
    function ExtractAnnotations(start: Int32; &end: Int32; annotTypes: TArray<string>): DDN.mscorlib.DNIList<DNAnnotation>; overload;
    ///<summary>
    ///  Gets the list of annotations of the specified types.
    ///</summary>
    ///  <param name="start">Start page from which the annotations will be selected.</param>
    ///  <param name="end">End page to which the annotations will be selected.</param>
    ///  <param name="annotTypes">The array of needed annotation types.</param>
    ///<returns>Annotations list.</returns>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  AnnotationType[] annotTypes = new AnnotationType[] {AnnotationType.Text, AnnotationType.Highlight};
    ///  IList annotList = editor.ExtractAnnotations(1, 2 , annotTypes);
    ///</code></example>
    function ExtractAnnotations(start: Int32; &end: Int32; annotTypes: TArray<DNAnnotationType>): DDN.mscorlib.DNIList<DNAnnotation>; overload;
    ///<summary>
    ///  Modifies the annotations of the specifed type on the specified page range.
    ///  It supports to modify next annotation properties: Modified, Title, Contents, Color, Subject and Open.
    ///</summary>
    ///  <param name="start">The start page number.</param>
    ///  <param name="end">The end page number.</param>
    ///  <param name="annotation">The annotation object contains new properties.</param>
    ///<example><code lang="C#">
    ///  PdfAnnotationEditor editor = new PdfAnnotationEditor();
    ///  editor.BindPdf("example.pdf");
    ///  TextAnnotation annot = new TextAnnotation();
    ///  annot.Modified = DateTime.Now;
    ///  annot.Title = "NEW AUTHOR";
    ///  annot.Contents = "NEW CONTENTS";
    ///  annot.Color = Color.Red;
    ///  annot.Subject = "NEW SUBJECT";
    ///  annot.Open = true;
    ///  editor.ModifyAnnotations(1, 2, annot);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ModifyAnnotations(start: Int32; &end: Int32; annotation: DNAnnotation); overload;
    ///<summary>
    ///  Redacts area on the specified page. All contents is removed.
    ///</summary>
    ///  <param name="pageIndex">Index of the page.</param>
    ///  <param name="rect">Area rectangle.</param>
    ///  <param name="color">Filling color.</param>
    procedure RedactArea(pageIndex: Int32; rect: DNRectangle; color: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNPdfAnnotationEditor = class(TDNGenericImport<DNPdfAnnotationEditorClass, DNPdfAnnotationEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfBookmarkEditorClass = interface(DNSaveableFacadeClass)
  ['{59947EDF-B937-57FC-A2E0-89183CFBCB6F}']
  { constructors } 

    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" />
    ///  object.
    ///</summary>
    {class} function init: DNPdfBookmarkEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfBookmarkEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfBookmarkEditor; overload;

  { static methods } 

    ///<summary>
    ///  Exports bookmarks to HTML file.
    ///</summary>
    ///  <param name="inPdfFile">Input PDF file which bookmarks will be exported.</param>
    ///  <param name="outHtmlFile">Output HTML file</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor.ExtractBookmarksToHTML("example.pdf", "bookmarks.html");
    ///</code></example>
    {class} procedure ExportBookmarksToHtml(inPdfFile: string; outHtmlFile: string);

  end;

  ///<summary>
  ///  Represents a class to work with PDF file's bookmarks including create, modify, export, import and delete.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfBookmarkEditor')]
  DNPdfBookmarkEditor = interface(DNSaveableFacade)
  ['{708EC4CD-0BBA-3B62-93D9-291E2F4775A2}']
  { getters & setters } 

    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Creates bookmarks for all pages.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateBookmarks();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarks; overload;
    ///<summary>
    ///  Creates bookmark for the specified page.
    ///</summary>
    ///  <param name="bookmarkName">The specified bookmark name.</param>
    ///  <param name="pageNumber">The specified desination page.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateBookmarkOfPage("bookmark for page 1", 1);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarkOfPage(bookmarkName: string; pageNumber: Int32); overload;
    ///<summary>
    ///  Creates the specified bookmark in the document. The method can be used for forming nested bookmarks hierarchy.
    ///</summary>
    ///  <param name="bookmark">The bookmark will be added to the document.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Bookmark bm1=new Bookmark();
    ///  bm1.PageNumber=1;
    ///  bm1.Title="First child";
    ///  Bookmark bm2=new Bookmark();
    ///  bm2.PageNumber=2;
    ///  bm2.Title="Second child";
    ///  Bookmark bm=new Bookmark();
    ///  bm.Action="GoTo";
    ///  bm.PageNumber=1;
    ///  bm.Title="Parent";
    ///  Bookmarks bms=new Bookmarks();
    ///  bms.Add(bm1);
    ///  bms.Add(bm2);
    ///  bm.ChildItem=bms;
    ///  editor.CreateBookmarks(bm);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarks(bookmark: DNBookmark); overload;
    ///<summary>
    ///  Create bookmarks for all pages with specified color and style (bold, italic).
    ///</summary>
    ///  <param name="color">The color of title.</param>
    ///  <param name="boldFlag">The flag of bold attribution.</param>
    ///  <param name="italicFlag">The flag of italic attribution.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateBookmarks(System.Drawing.Color.Red, true, true);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarks(color: DDN.Aspose.Common.DNColor; boldFlag: Boolean; italicFlag: Boolean); overload;
    ///<summary>
    ///  Creates bookmarks for the specified pages.
    ///</summary>
    ///  <param name="bookmarkName">Bookmarks title array.</param>
    ///  <param name="pageNumber">Bookmarks desination page array.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateBookmarkOfPage("bookmark for page 1", 1);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarkOfPage(bookmarkName: TArray<string>; pageNumber: TArray<Int32>); overload;
    ///<summary>
    ///  Deletes all bookmarks of the PDF document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteBookmarks();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteBookmarks; overload;
    ///<summary>
    ///  Deletes the bookmark of the PDF document.
    ///</summary>
    ///  <param name="title">The title of bookmark deleted.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteBookmarks("existing bookmark title");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteBookmarks(title: string); overload;
    ///<summary>
    ///  Modifys bookmark title according to the specified bookmark title.
    ///</summary>
    ///  <param name="sTitle">Source bookmark title.</param>
    ///  <param name="dTitle">Modified bookmark title.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ModifyBookmarks("existing bookmark title", "new bookmark title");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ModifyBookmarks(sTitle: string; dTitle: string);
    ///<summary>
    ///  Extracts bookmarks of all levels from the document.
    ///</summary>
    ///<returns>The bookmarks collection of all bookmarks that exist in the document.</returns>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Bookmarks bms = editor.ExtractBookmarks();
    ///  foreach(Bookmark bm in bms)
    ///  Console.WriteLine(bm.Title);
    ///</code></example>
    function ExtractBookmarks: DNBookmarks; overload;
    ///<summary>
    ///  Extracts bookmarks of all levels from the document.
    ///</summary>
    ///  <param name="upperLevel">If true, extracts only upper level bookmarks. Else, extracts all bookmarks recursively.</param>
    ///<returns>List of extracted bookmarks.</returns>
    function ExtractBookmarks(upperLevel: Boolean): DNBookmarks; overload;
    ///<summary>
    ///  Extracts the bookmarks with the specified title.
    ///</summary>
    ///  <param name="title">Extracted item title.</param>
    ///<returns>Bookmark collection has items with the same title.</returns>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Bookmarks bms = editor.ExtractBookmarks("Title");
    ///  foreach(Bookmark bm in bms)
    ///  Console.WriteLine(bm.Title);
    ///</code></example>
    function ExtractBookmarks(title: string): DNBookmarks; overload;
    ///<summary>
    ///  Extracts the children of a bookmark with a title like in specified bookamrk.
    ///</summary>
    ///  <param name="bookmark">The specified bookamrk.</param>
    ///<returns>Bookmark collection with child bookmarks.</returns>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  Bookmark bookmark = new Bookmark();
    ///  bookmark.Title = "Title";
    ///  Bookmarks bms = editor.ExtractBookmarks(bookmark);
    ///  foreach(Bookmark bm in bms)
    ///  Console.WriteLine(bm.Title);
    ///</code></example>
    function ExtractBookmarks(bookmark: DNBookmark): DNBookmarks; overload;
    ///<summary>
    ///  Exports bookmarks to HTML file.
    ///</summary>
    ///  <param name="pdfFile">The PDF file which bookmarks will be exported.</param>
    ///  <param name="cssFile">The CSS file to display HTML file, can be null.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.ExtractBookmarksToHTML("example.pdf", null);
    ///</code></example>
    procedure ExtractBookmarksToHTML(pdfFile: string; cssFile: string);
    ///<summary>
    ///  Exports bookmarks to XML file.
    ///</summary>
    ///  <param name="xmlFile">The output XML file.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ExportBookmarksToXML("bookmarks.xml");
    ///</code></example>
    procedure ExportBookmarksToXML(xmlFile: string); overload;
    ///<summary>
    ///  Exports bookmarks to XML stream.
    ///</summary>
    ///  <param name="stream">Output stream where data will be stored.</param>
    procedure ExportBookmarksToXML(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Imports bookmarks to the document from XML file.
    ///</summary>
    ///  <param name="xmlFile">The XML file containing bookmarks list.</param>
    ///<example><code lang="C#">
    ///  PdfBookmarkEditor editor = new PdfBookmarkEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ImportBookmarksWithXML("bookmarks.xml");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ImportBookmarksWithXML(xmlFile: string); overload;
    ///<summary>
    ///  Imports bookmarks to the document from XML file.
    ///</summary>
    ///  <param name="stream">Stream with bookmarks data.</param>
    procedure ImportBookmarksWithXML(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Document: DNDocument read get_Document;
  end;

  TDNPdfBookmarkEditor = class(TDNGenericImport<DNPdfBookmarkEditorClass, DNPdfBookmarkEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfContentEditorClass = interface(DNSaveableFacadeClass)
  ['{2AF053D4-784B-5BF9-8084-7A8C9A14A36D}']
  { constructors } 

    ///<summary>
    ///  The constructor of the PdfContentEditor object.
    ///</summary>
    {class} function init: DNPdfContentEditor; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfContentEditor" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfContentEditor; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_DocumentOpen: string;
   function __fakeFieldGet_DocumentClose: string;
   function __fakeFieldGet_DocumentWillSave: string;
   function __fakeFieldGet_DocumentSaved: string;
   function __fakeFieldGet_DocumentWillPrint: string;
   function __fakeFieldGet_DocumentPrinted: string;

  { static fields } 

    ///<summary>
    ///  A document event type. Opens a document.
    ///</summary>
    {class} property DocumentOpen: string read __fakeFieldGet_DocumentOpen;
    ///<summary>
    ///  A document event type. Closes a document.
    ///</summary>
    {class} property DocumentClose: string read __fakeFieldGet_DocumentClose;
    ///<summary>
    ///  A document event type. Excute a action before saving.
    ///</summary>
    {class} property DocumentWillSave: string read __fakeFieldGet_DocumentWillSave;
    ///<summary>
    ///  A document event type. Excute a action after saving.
    ///</summary>
    {class} property DocumentSaved: string read __fakeFieldGet_DocumentSaved;
    ///<summary>
    ///  A document event type. Excute a action before printing.
    ///</summary>
    {class} property DocumentWillPrint: string read __fakeFieldGet_DocumentWillPrint;
    ///<summary>
    ///  A document event type. Excute a action after printing.
    ///</summary>
    {class} property DocumentPrinted: string read __fakeFieldGet_DocumentPrinted;

  end;

  ///<summary>
  ///  Represents a class to edit PDF file's content.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfContentEditor')]
  DNPdfContentEditor = interface(DNSaveableFacade)
  ['{551705CC-0B37-3140-8108-60BE1BFD8DAB}']
  { getters & setters } 

    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_TextReplaceOptions: DNTextReplaceOptions;
    procedure set_TextReplaceOptions(value: DNTextReplaceOptions);
    function get_ReplaceTextStrategy: DNReplaceTextStrategy;
    procedure set_ReplaceTextStrategy(value: DNReplaceTextStrategy);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Binds a PDF file for editing.
    ///</summary>
    ///  <param name="inputFile">A PDF file to be edited.</param>
    procedure BindPdf(inputFile: string); overload;
    ///<summary>
    ///  Binds a PDF stream for editing.
    ///</summary>
    ///  <param name="inputStream">A PDF stream to be edited.</param>
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Extracts the collection of Link instances contained in PDF document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  IList links = editor.ExtractLink();
    ///  foreach (object obj in links)
    ///  {
    ///  Link link = (Link)obj;
    ///  // work with Link instance
    ///  }
    ///</code></example><returns>The collection of Link objects</returns>
    function ExtractLink: DDN.mscorlib.DNIList<DNAnnotation>;
    ///<summary>
    ///  Creates a web link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="url">The web link destination.</param>
    ///  <param name="originalPage">The number of original page on which rectangle bound with web link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///  <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "http://www.aspose.com", 1, System.Drawing.Color.Red,
    ///  new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateWebLink(rect: DDN.Aspose.Common.DNRectangle; url: string; originalPage: Int32; clr: DDN.Aspose.Common.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    ///<summary>
    ///  Creates a web link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="url">The web link destination.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "http://www.aspose.com", 1, System.Drawing.Color.Red });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateWebLink(rect: DDN.Aspose.Common.DNRectangle; url: string; originalPage: Int32; clr: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates a web link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="url">The web link destination.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with web link will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateWebLink(new System.Drawing.Rectangle(0, 0, 100, 100), "http://www.aspose.com", 1 });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateWebLink(rect: DDN.Aspose.Common.DNRectangle; url: string; originalPage: Int32); overload;
    ///<summary>
    ///  Creates a local link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="desPage">The destination page.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///  <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  2, 1, System.Drawing.Color.Red,
    ///  new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateLocalLink(rect: DDN.Aspose.Common.DNRectangle; desPage: Int32; originalPage: Int32; clr: DDN.Aspose.Common.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    ///<summary>
    ///  Creates a local link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="desPage">The destination page.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  2, 1, System.Drawing.Color.Red });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateLocalLink(rect: DDN.Aspose.Common.DNRectangle; desPage: Int32; originalPage: Int32; clr: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates a link to another PDF document page.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="remotePdf">The PDF document which page will be opened.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="destinationPage">The destination page.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///  <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "another_example.pdf", 1, 1, System.Drawing.Color.Red,
    ///  new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePdfDocumentLink(rect: DDN.Aspose.Common.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32; clr: DDN.Aspose.Common.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    ///<summary>
    ///  Creates a link to another PDF document page.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="remotePdf">The PDF document which page will be opened.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="destinationPage">The destination page.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "another_example.pdf", 1, 1, System.Drawing.Color.Red });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePdfDocumentLink(rect: DDN.Aspose.Common.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32; clr: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates a link to another PDF document page.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="remotePdf">The PDF document which page will be opened.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="destinationPage">The destination page.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreatePdfDocumentLink(new System.Drawing.Rectangle(0, 0, 100, 100), "another_example.pdf", 1, 1 });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePdfDocumentLink(rect: DDN.Aspose.Common.DNRectangle; remotePdf: string; originalPage: Int32; destinationPage: Int32); overload;
    ///<summary>
    ///  Creates a link to custom actions in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="color">The colour of rectangle for active click.</param>
    ///  <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
    ///  ///
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateCustomActionLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  1, System.Drawing.Color.Red,
    ///  new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateCustomActionLink(rect: DDN.Aspose.Common.DNRectangle; originalPage: Int32; color: DDN.Aspose.Common.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>);
    ///<summary>
    ///  Creates a link to launch an application in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="application">The path of application to be launched.</param>
    ///  <param name="page">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///  <param name="actionName">The array of actions (members of PredefinedAction enum) corresponding to executing menu items in Acrobat viewer.</param>
    ///  ///
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "explorer", 1, System.Drawing.Color.Red,
    ///  new Enum[] { PredefinedAction.FirstPage, PredefinedAction.PrintDialog });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateApplicationLink(rect: DDN.Aspose.Common.DNRectangle; application: string; page: Int32; clr: DDN.Aspose.Common.DNColor; actionName: TArray<DDN.mscorlib.DNEnum>); overload;
    ///<summary>
    ///  Creates a link to launch an application in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="application">The path of application to be launched.</param>
    ///  <param name="page">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="clr">The colour of rectangle for active click.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "explorer", 1, System.Drawing.Color.Red });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateApplicationLink(rect: DDN.Aspose.Common.DNRectangle; application: string; page: Int32; clr: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates a link to launch an application in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="application">The path of application to be launched.</param>
    ///  <param name="page">The number of original page where rectangle bound with link will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateApplicationLink(new System.Drawing.Rectangle(0, 0, 100, 100), "explorer", 1 });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateApplicationLink(rect: DDN.Aspose.Common.DNRectangle; application: string; page: Int32); overload;
    ///<summary>
    ///  Creates a link to JavaScript in PDF document.
    ///</summary>
    ///  <param name="code">The JavaScript code.</param>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with link will be created.</param>
    ///  <param name="color">The colour of rectangle for active click.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateJavaScriptLink("app.alert('welcome to aspose!');",
    ///  new System.Drawing.Rectangle(0, 0, 100, 100), 1, System.Drawing.Color.Red });
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateJavaScriptLink(code: string; rect: DDN.Aspose.Common.DNRectangle; originalPage: Int32; color: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Creates text annotation in PDF document
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="title">The title of the annotation.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="open">A flag specifying whether the annotation should initially be displayed open.</param>
    ///  <param name="icon">The name of an icon will be used in displaying the annotation.
    ///  This value can be: "Comment", "Key", "Note", "Help", "NewParagraph", "Paragraph", "Insert"</param>
    ///  <param name="page">The number of original page where the text annotation will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateText(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", "You are welcome to Aspose!", true, "Key", 1);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateText(rect: DDN.Aspose.Common.DNRectangle; title: string; contents: string; open: Boolean; icon: string; page: Int32);
    ///<summary>
    ///  Creates free text annotation in PDF document
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="page">The number of original page where the text annotation will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateFreeText(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 1);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateFreeText(rect: DDN.Aspose.Common.DNRectangle; contents: string; page: Int32);
    ///<summary>
    ///  Creates markup annotation it PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="type">The type of markup annotation. Can be 0 (Highlight), 1 (Underline), 2 (StrikeOut), 3 (Squiggly).</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="clr">The color of markup.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateMarkup(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", 0, 1, System.Drawing.Color.Red);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateMarkup(rect: DDN.Aspose.Common.DNRectangle; contents: string; &type: Int32; page: Int32; clr: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Creates popup annotation in PDF document.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="open">A flag specifying whether the pop-up annotation should initially be displayed open.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreatePopup(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", true, 1);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePopup(rect: DDN.Aspose.Common.DNRectangle; contents: string; open: Boolean; page: Int32);
    ///<summary>
    ///  Creates file attachment annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="filePath">The path of the file will be attached.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="name">The name of an icon will be used in displaying the annotation.
    ///  This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", "attachment_file.pdf", 1, "Graph");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateFileAttachment(rect: DDN.Aspose.Common.DNRectangle; contents: string; filePath: string; page: Int32; name: string); overload;
    ///<summary>
    ///  Creates file attachment annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="filePath">The path of the file will be attached.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="name">The name of an icon will be used in displaying the annotation.
    ///  This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
    ///  <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", "attachment_file.pdf", 1, "Graph", 0.5);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateFileAttachment(rect: DDN.Aspose.Common.DNRectangle; contents: string; filePath: string; page: Int32; name: string; opacity: Double); overload;
    ///<summary>
    ///  Creates file attachment annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="attachmentStream">The attachment file stream.</param>
    ///  <param name="attachmentName">The attachment name.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="name">The name of an icon will be used in displaying the annotation.
    ///  This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
    ///  {
    ///  editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph");
    ///  editor.Save("example_out.pdf");
    ///  }
    ///</code></example>
    procedure CreateFileAttachment(rect: DDN.Aspose.Common.DNRectangle; contents: string; attachmentStream: DDN.mscorlib.DNStream; attachmentName: string; page: Int32; name: string); overload;
    ///<summary>
    ///  Creates file attachment annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="attachmentStream">The attachment file stream.</param>
    ///  <param name="attachmentName">The attachment name.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="name">The name of an icon will be used in displaying the annotation.
    ///  This value can be: "Graph", "PushPin", "Paperclip", "Tag".</param>
    ///  <param name="opacity">Icon's opacity from 0 to 1: 0 - completely transparant, 1 - completely opaque.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
    ///  {
    ///  editor.CreateFileAttachment(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", attStream, "attachment_file.pdf", 1, "Graph", 0.5);
    ///  editor.Save("example_out.pdf");
    ///  }
    ///</code></example>
    procedure CreateFileAttachment(rect: DDN.Aspose.Common.DNRectangle; contents: string; attachmentStream: DDN.mscorlib.DNStream; attachmentName: string; page: Int32; name: string; opacity: Double); overload;
    ///<summary>
    ///  Adds document attachment with no annotation.
    ///</summary>
    ///  <param name="fileAttachmentPath">The path of the file will be attached.</param>
    ///  <param name="description">The description information.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.AddDocumentAttachment("attachment_file.pdf", "description of attachment_file");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure AddDocumentAttachment(fileAttachmentPath: string; description: string); overload;
    ///<summary>
    ///  Adds document attachment with no annotation.
    ///</summary>
    ///  <param name="fileAttachmentStream">The stream of the file will be attached.</param>
    ///  <param name="fileAttachmentName">The attachment name.</param>
    ///  <param name="description">The description information.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  using(System.IO.FileStream attStream = System.IO.File.OpenRead("attachment_file.pdf"))
    ///  {
    ///  editor.AddDocumentAttachment(attStream, "attachment_file.pdf", "description of attachment_file");
    ///  editor.Save("example_out.pdf");
    ///  }
    ///</code></example>
    procedure AddDocumentAttachment(fileAttachmentStream: DDN.mscorlib.DNStream; fileAttachmentName: string; description: string); overload;
    ///<summary>
    ///  Deletes all attachments in PDF document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteAttachments();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteAttachments;
    ///<summary>
    ///  Creates line annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="x1">The starting horizontal coordinate of the line.</param>
    ///  <param name="y1">The starting vertical coordinate of the line.</param>
    ///  <param name="x2">The ending horizontal coordinate of the line.</param>
    ///  <param name="y2">The ending vertical coordinate of the line.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="border">The border width in points. If this value is 0 no border is drawn. Default value is 1.</param>
    ///  <param name="clr">The color of line.</param>
    ///  <param name="borderStyle">The border style specifying the width and dash pattern to be used in drawing the line.
    ///  This value can be: "S" (Solid), "D" (Dashed), "B" (Beveled), "I" (Inset), "U" (Underline).</param>
    ///  <param name="dashArray">A dash array defining a pattern of dashes and gaps to be used in drawing a dashed border.
    ///  If it is used, borderSyle must be accordingly set to "D".</param>
    ///  <param name="LEArray">An array of two values respectively specifying the beginning and ending style of the drawing line.
    ///  The values can be: "Square", "Circle", "Diamond", "OpenArrow", "ClosedArrow", "None", "Butt", "ROpenArrow", "RClosedArrow", "Slash".</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateLine(new System.Drawing.Rectangle(0, 0, 100, 100), "Welcome to Aspose", 0, 0, 100, 100,
    ///  1, 1, System.Drawing.Color.Red, "D", new int[] {2, 3}, new string[] {"OpenArrow", "ClosedArrow"});
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateLine(rect: DDN.Aspose.Common.DNRectangle; contents: string; x1: Single; y1: Single; x2: Single; y2: Single; page: Int32; border: Int32; clr: DDN.Aspose.Common.DNColor; borderStyle: string; dashArray: TArray<Int32>; LEArray: TArray<string>);
    ///<summary>
    ///  Creates square-circle annotation.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="contents">The contents of the annotation.</param>
    ///  <param name="clr">The colour of square or circle.</param>
    ///  <param name="square">True (square), false (sircle).</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="borderWidth">The border width of square or circle.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateSquareCircle(new System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", System.Drawing.Color.Red, false, 1, 5);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateSquareCircle(rect: DDN.Aspose.Common.DNRectangle; contents: string; clr: DDN.Aspose.Common.DNColor; square: Boolean; page: Int32; borderWidth: Int32);
    ///<summary>
    ///  Creates curve annotation.
    ///</summary>
    ///  <param name="lineInfo">The instance of LineInfo class.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  newApiEditor.BindPdf("example.pdf");
    ///  LineInfo lineInfo = new LineInfo();
    ///  lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100 };  //x1, y1, x2, y2, .. xn, yn
    ///  lineInfo.Visibility = true;
    ///  editor.DrawCurve(lineInfo, 1, new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DrawCurve(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; annotContents: string);
    ///<summary>
    ///  Creates polygon annotation.
    ///</summary>
    ///  <param name="lineInfo">The instance of LineInfo class.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  LineInfo lineInfo = new LineInfo();
    ///  lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
    ///  lineInfo.Visibility = true;
    ///  editor.CreatePolygon(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePolygon(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; annotContents: string);
    ///<summary>
    ///  Creates polyline annotation.
    ///</summary>
    ///  <param name="lineInfo">The instance of LineInfo class.</param>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  LineInfo lineInfo = new LineInfo();
    ///  lineInfo.VerticeCoordinate = new float[] { 0, 0, 100, 100, 100, 50 };
    ///  lineInfo.Visibility = true;
    ///  editor.CreatePolyLine(lineInfo, 1 , new System.Drawing.Rectangle(0, 0, 0, 0), "Welcome to Aspose");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreatePolyLine(lineInfo: DNLineInfo; page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; annotContents: string);
    ///<summary>
    ///  Creates caret annotation.
    ///</summary>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="caretRect">The actual boundaries of the underlying caret.</param>
    ///  <param name="symbol">A symbol will be associated with the caret. Value can be: "P" (Paragraph), "None".</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///  <param name="color">The colour of the annotation.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateCaret(1,
    ///  new System.Drawing.Rectangle(50, 50, 100, 100),
    ///  new System.Drawing.Rectangle(60, 60, 70, 70),
    ///  "None", "Welcome to Aspose", System.Drawing.Color.Red);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateCaret(page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; caretRect: DDN.Aspose.Common.DNRectangle; symbol: string; annotContents: string; color: DDN.Aspose.Common.DNColor);
    ///<summary>
    ///  Creates a rubber stamp annotation.
    ///</summary>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="icon">An icon is to be used in displaying the annotation. Default value: 'Draft'."</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///  <param name="color">The colour of the annotation.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", System.Drawing.Color.Red);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; icon: string; annotContents: string; color: DDN.Aspose.Common.DNColor); overload;
    ///<summary>
    ///  Creates a rubber stamp annotation.
    ///</summary>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///  <param name="color">The colour of the annotation.</param>
    ///  <param name="appearanceFile">The path of appearance file.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", System.Drawing.Color.Red, "appearance_file.pdf");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; annotContents: string; color: DDN.Aspose.Common.DNColor; appearanceFile: string); overload;
    ///<summary>
    ///  Creates a rubber stamp annotation.
    ///</summary>
    ///  <param name="page">The number of original page where the annotation will be created.</param>
    ///  <param name="annotRect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="annotContents">The contents of the annotation.</param>
    ///  <param name="color">The colour of the annotation.</param>
    ///  <param name="appearanceStream">The stream of appearance file.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  using (System.IO.FileStream appStream = File.OpenRead("appearance_file.pdf"))
    ///  {
    ///  editor.CreateRubberStamp(1, System.Drawing.Rectangle(0, 0, 100, 100),
    ///  "Welcome to Aspose", System.Drawing.Color.Red, appStream);
    ///  editor.Save("example_out.pdf");
    ///  }
    ///</code></example>
    procedure CreateRubberStamp(page: Int32; annotRect: DDN.Aspose.Common.DNRectangle; annotContents: string; color: DDN.Aspose.Common.DNColor; appearanceStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Creates a bookmark with the specified action.
    ///</summary>
    ///  <param name="title">The title of the bookmark.</param>
    ///  <param name="color">The colour of the bookmark's title.</param>
    ///  <param name="boldFlag">The flag of bold attribution.</param>
    ///  <param name="italicFlag">The flag of italic attribution.</param>
    ///  <param name="file">Another file or application required when the action type is "GoToR" or "Launch".</param>
    ///  <param name="actionType">The action type. The value can be: "GoToR", "Launch", "GoTo", "URI".</param>
    ///  <param name="destination">The local destination or remote destination or URL.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateBookmarksAction("bookmark title",
    ///  System.Drawing.Color.Red, true, true, null, "GoTo", 1/*page number*/);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateBookmarksAction(title: string; color: DDN.Aspose.Common.DNColor; boldFlag: Boolean; italicFlag: Boolean; &file: string; actionType: string; destination: string);
    ///<summary>
    ///  Adds additional action for document event.
    ///</summary>
    ///  <param name="eventType">The document event types.</param>
    ///  <param name="code">The code of JavaScript.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.AddDocumentAdditionalAction(PdfContentEditor.DocumentClose, "app.alert('Good-bye!');");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure AddDocumentAdditionalAction(eventType: string; code: string);
    ///<summary>
    ///  Removes open action from the document. This operation is useful when concatenating multiple documents that use explicit 'GoTo' action on startup.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.RemoveDocumentOpenAction();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure RemoveDocumentOpenAction;
    ///<summary>
    ///  Changes the view preference.
    ///</summary>
    ///  <param name="viewerAttribution">The view attribution defined in the ViewerPreference class.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ChangeViewerPreference(ViewerPreference.HideMenubar);
    ///  editor.ChangeViewerPreference(ViewerPreference.PageModeUseNone);
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ChangeViewerPreference(viewerAttribution: Int32);
    ///<summary>
    ///  Returns the view preference.
    ///</summary>
    ///<returns>Returns set of ViewerPrefernece flags </returns>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  int prefValue = editor.GetViewerPreference();
    ///  if ((prefValue &amp; ViewerPreference.PageModeUseOutline) != 0)
    ///  { // ... }
    ///</code></example>
    function GetViewerPreference: Int32;
    ///<summary>
    ///  Replaces the specified image on the specified page of PDF document with another image.
    ///</summary>
    ///  <param name="pageNumber">The number of page on which the image is replaced.</param>
    ///  <param name="index">The index of the image object must be replaced.</param>
    ///  <param name="imageFile">The image file will be used for replacing.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.ReplaceImage(1, 1, "image.jpg");
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure ReplaceImage(pageNumber: Int32; index: Int32; imageFile: string);
    ///<summary>
    ///  Deletes the specified images on the specified page.
    ///</summary>
    ///  <param name="pageNumber">The number of page on which images must be deleted.</param>
    ///  <param name="index">An array repsents images' indexes.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteImage(1, new int[] {1, 2});
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteImage(pageNumber: Int32; index: TArray<Int32>); overload;
    ///<summary>
    ///  Deletes all images from PDF document.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.DeleteImage();
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure DeleteImage; overload;
    ///<summary>
    ///  Replaces text in the PDF file on the specified page. <see cref="T:Aspose.Pdf.Text.TextState" />
    ///  object (font family, color) can be specified to replaced text.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to replace text on the first page of the PDF document and set <see cref="T:Aspose.Pdf.Text.TextState" />
    ///  text properties for the new text.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // Create font and mark it to be embedded
    ///  Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
    ///  font.IsEmbedded = true;
    ///  // create PdfContentEditor object to edit text
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf(doc);
    ///  // create textState object
    ///  TextState textState = new TextState();
    ///  textState.Font = font;
    ///  textState.FontSize = 17;
    ///  textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
    ///  textState.ForegroundColor = Color.Red;
    ///  // change text with specified font
    ///  editor.ReplaceText("hello world", 1, "hi world", textState);
    ///  // save document
    ///  doc.Save(outFile);
    ///</code></example><param name="srcString">The string to be replaced.</param>
    ///  <param name="thePage">Page number (0 means "all pages").</param>
    ///  <param name="destString">The replaced string.</param>
    ///  <param name="textState">Text state (Text Color, Font etc).</param>
    ///<returns>Returns true if replacement was made.</returns>
    function ReplaceText(srcString: string; thePage: Int32; destString: string; textState: DNTextState): Boolean; overload;
    ///<summary>
    ///  Replaces text in the PDF file.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to replace text in PDF document.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create PdfContentEditor object to edit text
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf(doc);
    ///  // change text
    ///  editor.ReplaceText("hello world", "hi world");
    ///  // save document
    ///  doc.Save(outFile);
    ///</code></example><param name="srcString">The string to be replaced.</param>
    ///  <param name="destString">Replacing string.</param>
    ///<returns>Returns true if replacement was made.</returns>
    function ReplaceText(srcString: string; destString: string): Boolean; overload;
    ///<summary>
    ///  Replaces text in the PDF file on the specified page.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to replace text in PDF document on the specified page.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create PdfContentEditor object to edit text
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf(doc);
    ///  // change text
    ///  editor.ReplaceText("hello world", 1, "hi world");
    ///  // save document
    ///  doc.Save(outFile);
    ///</code></example><param name="srcString">The sting to be replaced.</param>
    ///  <param name="thePage">Page number (0 for all pages)</param>
    ///  <param name="destString">Replacing string.</param>
    ///<returns>Returns true if replacement was made.</returns>
    function ReplaceText(srcString: string; thePage: Int32; destString: string): Boolean; overload;
    ///<summary>
    ///  Replaces text in the PDF file using specified <see cref="T:Aspose.Pdf.Text.TextState" />
    ///  object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to replace text and set <see cref="T:Aspose.Pdf.Text.TextState" />
    ///  text properties for the new text.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // Create font and mark it to be embedded
    ///  Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
    ///  font.IsEmbedded = true;
    ///  // create PdfContentEditor object to edit text
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf(doc);
    ///  // create textState object
    ///  TextState textState = new TextState();
    ///  textState.Font = font;
    ///  textState.FontStyle = FontStyle.Bold | FontStyle.Italic;
    ///  // change text with specified font
    ///  editor.ReplaceText("hello world", "hi world", textState);
    ///  // save document
    ///  doc.Save(outFile);
    ///</code></example><param name="srcString">String to be replaced</param>
    ///  <param name="destString">Replacing string</param>
    ///  <param name="textState">Text state (Text Color, Font etc)</param>
    ///<returns>Returns true if replacement was made.</returns>
    function ReplaceText(srcString: string; destString: string; textState: DNTextState): Boolean; overload;
    ///<summary>
    ///  Creates Movie Annotations.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="filePath">The path of movie file to be played.</param>
    ///  <param name="page">The page in which the Line annotation is created.</param>
    procedure CreateMovie(rect: DDN.Aspose.Common.DNRectangle; filePath: string; page: Int32);
    ///<summary>
    ///  Creates Sound Annotations.
    ///</summary>
    ///  <param name="rect">The annotation rectangle defining the location of the annotation on the page.</param>
    ///  <param name="filePath">The file path of sound file.</param>
    ///  <param name="name">The name of an icon to be used in displaying the annotation,include:Speaker and Mic.</param>
    ///  <param name="page">The page in which the Sound annotation is created.</param>
    ///  <param name="rate">The sampling rate, in samples per second.</param>
    procedure CreateSound(rect: DDN.Aspose.Common.DNRectangle; filePath: string; name: string; page: Int32; rate: string);
    ///<summary>
    ///  Deletes multiple stamps on the specified page by stamp indexes.
    ///</summary>
    ///  <param name="pageNumber">Page number where stamp will be deleted.</param>
    ///  <param name="index">Stamp indexes.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor contentEditor = new PdfContentEditor();
    ///  contentEditor.BindPdf("file.pdf");
    ///  contentEditor.DeleteStamp(1, new int[] { 2, 3, 5} );
    ///  contentEditor.Save("outfile.pdf");
    ///</code></example>
    procedure DeleteStamp(pageNumber: Int32; index: TArray<Int32>);
    ///<summary>
    ///  Deletes stamps with specified IDs from all pages of the document.
    ///</summary>
    ///  <param name="stampIds">Array of stamp IDs.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor contentEditor = new PdfContentEditor();
    ///  contentEditor.BindPdf("file.pdf");
    ///  contentEditor.DeleteStampByIds(new int[] { 102, 103 } );
    ///  contentEditor.Save("outfile.pdf");
    ///</code></example>
    procedure DeleteStampByIds(stampIds: TArray<Int32>); overload;
    ///<summary>
    ///  Deletes stamps on the specified page by multiple stamp IDs.
    ///</summary>
    ///  <param name="pageNumber">Page number where stamps will be deleted.</param>
    ///  <param name="stampIds">Array of stamp IDs.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor contentEditor = new PdfContentEditor();
    ///  contentEditor.BindPdf("file.pdf");
    ///  contentEditor.DeleteStampByIds(1, new int[] { 100, 101 } );
    ///  contentEditor.Save("outfile.pdf");
    ///</code></example>
    procedure DeleteStampByIds(pageNumber: Int32; stampIds: TArray<Int32>); overload;
    ///<summary>
    ///  Deletes stamp on the specified page by stamp ID.
    ///</summary>
    ///  <param name="pageNumber">Page number where stamp will be deleted.</param>
    ///  <param name="stampId">Identifier of stanp which should be deleted.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor contentEditor = new PdfContentEditor();
    ///  contentEditor.BindPdf("file.pdf");
    ///  contentEditor.DeleteStampById(1, 100);
    ///  contentEditor.Save("outfile.pdf");
    ///</code></example>
    procedure DeleteStampById(pageNumber: Int32; stampId: Int32); overload;
    ///<summary>
    ///  Hides the stamp. After hiding, stamp visibility may be restored with ShowStampById method.
    ///</summary>
    ///  <param name="pageNumber">Number of the page.</param>
    ///  <param name="stampId">Identifier of stamp which should be hidden.</param>
    procedure HideStampById(pageNumber: Int32; stampId: Int32);
    ///<summary>
    ///  Shows stamp which was hidden by HiddenStampById.
    ///</summary>
    ///  <param name="pageNumber">Number of the page.</param>
    ///  <param name="stampId">Identifier of stamp which should be shown.</param>
    procedure ShowStampById(pageNumber: Int32; stampId: Int32);
    ///<summary>
    ///  Changes position of the stamp on page.
    ///</summary>
    ///  <param name="pageNumber">Numer of page.</param>
    ///  <param name="stampId">Identifier of stamp which should be moved.</param>
    ///  <param name="x">New stamp horizontal pozition on the page.</param>
    ///  <param name="y">New stamp vertical position on the page.</param>
    procedure MoveStampById(pageNumber: Int32; stampId: Int32; x: Double; y: Double);
    ///<summary>
    ///  Changes position of the stamp on page.
    ///</summary>
    ///  <param name="pageNumber">Number of page.</param>
    ///  <param name="stampIndex">Index of stamp on the page.</param>
    ///  <param name="x">New stamp horizontal position.</param>
    ///  <param name="y">New stamp vertical position.</param>
    procedure MoveStamp(pageNumber: Int32; stampIndex: Int32; x: Double; y: Double);
    ///<summary>
    ///  Delete stamp by ID from all pages of the document.
    ///</summary>
    ///  <param name="stampId">Identifier of stamp which should be deleted.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor contentEditor = new PdfContentEditor();
    ///  contentEditor.BindPdf("file.pdf");
    ///  contentEditor.DeleteStampById(100);
    ///  contentEditor.Save("outfile.pdf");
    ///</code></example>
    procedure DeleteStampById(stampId: Int32); overload;
    ///<summary>
    ///  Creates a local link in PDF document.
    ///</summary>
    ///  <param name="rect">The rectangle for active click.</param>
    ///  <param name="desPage">The destination page.</param>
    ///  <param name="originalPage">The number of original page where rectangle bound with local link will be created.</param>
    ///<example><code lang="C#">
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf("example.pdf");
    ///  editor.CreateLocalLink(new System.Drawing.Rectangle(0, 0, 100, 100), 2, 1});
    ///  editor.Save("example_out.pdf");
    ///</code></example>
    procedure CreateLocalLink(rect: DDN.Aspose.Common.DNRectangle; desPage: Int32; originalPage: Int32); overload;
    ///<summary>
    ///  Replaces text in the PDF file and sets font size.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to replace text and set font size for the new text.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // Create font and mark it to be embedded
    ///  Aspose.Pdf.Text.Font font = FontRepository.FindFont("Courier New");
    ///  font.IsEmbedded = true;
    ///  // create PdfContentEditor object to edit text
    ///  PdfContentEditor editor = new PdfContentEditor();
    ///  editor.BindPdf(doc);
    ///  // change text with specified font
    ///  editor.ReplaceText("hello world", "hi world", 14);
    ///  // save document
    ///  doc.Save(outFile);
    ///</code></example><param name="srcString">String to be replaced.</param>
    ///  <param name="destString">Replacing string.</param>
    ///  <param name="fontSize">Font size.</param>
    ///<returns>Returns true if replacement was made.</returns>
    function ReplaceText(srcString: string; destString: string; fontSize: Int32): Boolean; overload;
    ///<summary>
    ///  Returns array of stamps on the page.
    ///</summary>
    ///  <param name="pageNumber">Page number where stamps will be searched.</param>
    ///<returns>Array of stamps.</returns>
    function GetStamps(pageNumber: Int32): TArray<DNStampInfo>;
    ///<summary>
    ///  Closes opened document.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text search options.
    ///</summary>
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    ///<summary>
    ///  Gets or sets text edit options.
    ///</summary>
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    ///<summary>
    ///  Gets or sets text replace options.
    ///</summary>
    property TextReplaceOptions: DNTextReplaceOptions read get_TextReplaceOptions write set_TextReplaceOptions;
    ///<summary>
    ///  A set of parameters for replace text operation
    ///</summary>
    property ReplaceTextStrategy: DNReplaceTextStrategy read get_ReplaceTextStrategy write set_ReplaceTextStrategy;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfContentEditor = class(TDNGenericImport<DNPdfContentEditorClass, DNPdfContentEditor>)
  public const
    ///<summary>
    ///  A document event type. Opens a document.
    ///</summary>
   DocumentOpen = 'DO';
    ///<summary>
    ///  A document event type. Closes a document.
    ///</summary>
   DocumentClose = 'WC';
    ///<summary>
    ///  A document event type. Excute a action before saving.
    ///</summary>
   DocumentWillSave = 'WS';
    ///<summary>
    ///  A document event type. Excute a action after saving.
    ///</summary>
   DocumentSaved = 'DS';
    ///<summary>
    ///  A document event type. Excute a action before printing.
    ///</summary>
   DocumentWillPrint = 'WP';
    ///<summary>
    ///  A document event type. Excute a action after printing.
    ///</summary>
   DocumentPrinted = 'DP';
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileInfoClass = interface(DNSaveableFacadeClass)
  ['{36C53ABB-0CC6-5651-A7ED-01C0703AA8A5}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class with default values.
    ///</summary>
    {class} function init: DNPdfFileInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
    ///</summary>
    ///  <param name="inputStream">Stream where input file is placed.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream): DNPdfFileInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
    ///</summary>
    ///  <param name="inputStream">Stream where input file is placed.</param>
    ///  <param name="password">Password for access to file.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; password: string): DNPdfFileInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
    ///</summary>
    ///  <param name="inputFile">Name of file containing input file.</param>
    {class} function init(inputFile: string): DNPdfFileInfo; overload;
    ///<summary>
    ///  Initializes a new instance of the Aspose.Pdf.Facades.PdfFileInfo class.
    ///</summary>
    ///  <param name="inputFile">Name of file containing input file.</param>
    ///  <param name="password">Password for access to file.</param>
    {class} function init(inputFile: string; password: string): DNPdfFileInfo; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">Pdf document.</param>
    {class} function init(document: DNDocument): DNPdfFileInfo; overload;

  end;

  ///<summary>
  ///  Represents a class for accessing meta information of PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileInfo')]
  DNPdfFileInfo = interface(DNSaveableFacade)
  ['{A14BAF72-404E-3C07-8FCD-A6D9EC6066A3}']
  { getters & setters } 

    function get_Author: string;
    procedure set_Author(value: string);
    function get_IsEncrypted: Boolean;
    function get_IsPdfFile: Boolean;
    function get_CreationDate: string;
    procedure set_CreationDate(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_HasCollection: Boolean;
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_ModDate: string;
    procedure set_ModDate(value: string);
    function get_NumberOfPages: Int32;
    function get_Producer: string;
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_PasswordType: DNPasswordType;
    function get_HasOpenPassword: Boolean;
    function get_HasEditPassword: Boolean;
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Clears all meta information of PDF document.
    ///</summary>
    ///<example><code lang="C#"></code></example>
    procedure ClearInfo;
    ///<summary>
    ///  Gets the PDF document privilege settings.
    ///</summary>
    ///<returns>The PDF document privilege settings.</returns>
    function GetDocumentPrivilege: DNDocumentPrivilege;
    ///<summary>
    ///  Gets customized information of PDF document with property name. If there is no property match the name it will return a blank string.
    ///</summary>
    ///  <param name="name">Custom meta property key.</param>
    ///<returns>Custom meta property value.</returns>
    function GetMetaInfo(name: string): string;
    ///<summary>
    ///  Gets the height of the specified page.
    ///</summary>
    ///  <param name="pageNum">Page number.</param>
    ///<returns>The height of the page.</returns>
    function GetPageHeight(pageNum: Int32): Single;
    ///<summary>
    ///  Gets the rotation of the specified page.
    ///</summary>
    ///  <param name="pageNum">Page number.</param>
    ///<returns>The rotation of the page. The value may be 0,90,180,270.</returns>
    function GetPageRotation(pageNum: Int32): Int32;
    ///<summary>
    ///  Gets the width of the specified page.
    ///</summary>
    ///  <param name="pageNum">Page number.</param>
    ///<returns>The width of the page.</returns>
    function GetPageWidth(pageNum: Int32): Single;
    ///<summary>
    ///  Gets the horizontal offset of the specified page display area.
    ///</summary>
    ///  <param name="pageNum">Page number.</param>
    ///<returns>The horizontal offset from the left side of the page.</returns>
    function GetPageXOffset(pageNum: Int32): Single;
    ///<summary>
    ///  Gets the vertical offset of the specified page display area.
    ///</summary>
    ///  <param name="pageNum">Page number.</param>
    ///<returns>The vertical offset of the page display area.</returns>
    function GetPageYOffset(pageNum: Int32): Single;
    ///<summary>
    ///  Gets the version info of PDF document.
    ///</summary>
    ///<returns>The version string.</returns>
    function GetPdfVersion: string;
    ///<summary>
    ///  Save updated PDF document into specified stream.
    ///</summary>
    ///  <param name="outputStream">Output stream.</param>
    ///<returns>True if success otherwise is false.</returns>
    function SaveNewInfo(outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Save updated PDF document into specified file.
    ///</summary>
    ///  <param name="outputFile">Output file.</param>
    ///<returns>True if success otherwise is false.</returns>
    function SaveNewInfo(outputFile: string): Boolean; overload;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Sets customized information of PDF document.
    ///</summary>
    ///  <param name="name">Custom meta property key.</param>
    ///  <param name="value">Custom meta property value.</param>
    procedure SetMetaInfo(name: string; value: string);
    ///<summary>
    ///  Changes the properties specified explicitly by setting file information, other properties remain.
    ///</summary>
    ///  <param name="outputFileName">Output file.</param>
    ///<returns>True for success, or false.</returns>
    function SaveNewInfoWithXmp(outputFileName: string): Boolean;
    ///<summary>
    ///  Deinitializes the instance.
    ///</summary>
    procedure Close;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the Author information of PDF document.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Checkes whether the PDF document is encrypted.
    ///</summary>
    property IsEncrypted: Boolean read get_IsEncrypted;
    ///<summary>
    ///  Checkes whether the source input is a valid PDF file.
    ///</summary>
    property IsPdfFile: Boolean read get_IsPdfFile;
    ///<summary>
    ///  Gets or sets the CreationDate information of PDF document.
    ///</summary>
    property CreationDate: string read get_CreationDate write set_CreationDate;
    ///<summary>
    ///  Gets or sets the Creator information of PDF document.
    ///</summary>
    property Creator: string read get_Creator write set_Creator;
    ///<summary>
    ///  Returns true if the current input file is a 'Portfolio' file containing collection of PDF files in it.
    ///</summary>
    property HasCollection: Boolean read get_HasCollection;
    ///<summary>
    ///  Gets or sets the input file.
    ///</summary>
    property InputFile: string read get_InputFile write set_InputFile;
    ///<summary>
    ///  Gets or sets the input stream.
    ///</summary>
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    ///<summary>
    ///  Gets or sets the Keywords information of PDF document.
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Gets or sets the ModDate date information of PDF document.
    ///</summary>
    property ModDate: string read get_ModDate write set_ModDate;
    ///<summary>
    ///  Gets the number of document pages.
    ///</summary>
    property NumberOfPages: Int32 read get_NumberOfPages;
    ///<summary>
    ///  Gets the Producer information of PDF document.
    ///</summary>
    property Producer: string read get_Producer;
    ///<summary>
    ///  Gets or sets the Subject information of PDF document.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Gets or sets the Title information of PDF document.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Returns the type of password which was passed for creating PdfFileInfo instance. See possible values in <see cref="P:Aspose.Pdf.Facades.PdfFileInfo.PasswordType" />
    ///  .
    ///  Pay attention that pdf document can be opened using both user (or open) password and owner (or permissions, edit) password.
    ///</summary>
    property PasswordType: DNPasswordType read get_PasswordType;
    ///<summary>
    ///  Returns true if password is needed to open password protected pdf document.
    ///</summary>
    property HasOpenPassword: Boolean read get_HasOpenPassword;
    ///<summary>
    ///  Returns true if password is needed to modify permissions or document security property.
    ///  Pay attention that this property can be read only if valid password was provided in <see cref="T:Aspose.Pdf.Facades.PdfFileInfo" />
    ///  constructor.
    ///  In case PasswordType is Inaccessible (means that invalid password was provided) reading this property will fail with <see cref="T:Aspose.Pdf.InvalidPasswordException" />
    ///  .
    ///</summary>
    property HasEditPassword: Boolean read get_HasEditPassword;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileInfo = class(TDNGenericImport<DNPdfFileInfoClass, DNPdfFileInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileMendClass = interface(DNSaveableFacadeClass)
  ['{8F15AF88-A2C3-5794-8023-6D80E2C7A01B}']
  { static getter & setter } 

    procedure set_IsWordWrap(value: Boolean);

  { constructors } 

    ///<summary>
    ///  Constructor.
    ///</summary>
    {class} function init: DNPdfFileMend; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="inputFileName">Input PDF file name.</param>
    ///  <param name="outputFileName">Output PDF file name.</param>
    {class} function init(inputFileName: string; outputFileName: string): DNPdfFileMend; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="inputStream">Input PDF stream.</param>
    ///  <param name="outputStream">Output PDF stream.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileMend; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfFileMend; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputFileName">
    ///  Output PDF file name.
    ///</param>
    {class} function init(document: DNDocument; outputFileName: string): DNPdfFileMend; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileMend" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="destStream">
    ///  Output PDF stream.
    ///</param>
    {class} function init(document: DNDocument; destStream: DDN.mscorlib.DNStream): DNPdfFileMend; overload;

  { static propertys } 

    ///<summary>
    ///  Sets a bool value that indicates word wrap in AddText methods.
    ///  If the value is true, the text in FormattedText will word wrap.
    ///  By defalt, the value is false.
    ///</summary>
    {class} property IsWordWrap: Boolean write set_IsWordWrap;
  end;

  ///<summary>
  ///  Represents a class for adding texts and images on the pages of existing PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileMend')]
  DNPdfFileMend = interface(DNSaveableFacade)
  ['{6F560993-73BC-3A8A-B77F-5355D020282A}']
  { getters & setters } 

    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_OutputFile: string;
    procedure set_OutputFile(value: string);
    procedure set_IsWordWrap(value: Boolean);
    function get_WrapMode: DNFacades_WordWrapMode;
    procedure set_WrapMode(value: DNFacades_WordWrapMode);
    function get_TextPositioningMode: DNPositioningMode;
    procedure set_TextPositioningMode(value: DNPositioningMode);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Adds image to the specified page of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageStream">Input image stream.</param>
    ///  <param name="pageNum">The number of page that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  using (Stream stream = File.OpenRead("picture.jpg"))
    ///  {
    ///  mendor.AddImage(stream, 1, 10, 10, 100, 100);
    ///  }
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified page of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageStream">Input image stream.</param>
    ///  <param name="pageNum">The number of page that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///  <param name="compositingParameters">The graphics compositing parameters for the image.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  using (Stream stream = File.OpenRead("picture.jpg"))
    ///  {
    ///  mendor.AddImage(stream, 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
    ///  }
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified pages of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageStream">Input image stream.</param>
    ///  <param name="pageNums">The numbers of pages that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  using (Stream stream = File.OpenRead("picture.jpg"))
    ///  {
    ///  mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100);
    ///  }
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified pages of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageStream">Input image stream.</param>
    ///  <param name="pageNums">The numbers of pages that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///  <param name="compositingParameters">The graphics compositing parameters for the images.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  using (Stream stream = File.OpenRead("picture.jpg"))
    ///  {
    ///  mendor.AddImage(stream, new int[]{1, 2}, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply);
    ///  }
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageStream: DDN.mscorlib.DNStream; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified page of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageName">The path of input image file.</param>
    ///  <param name="pageNum">The number of page that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageName: string; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified page of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageName">The path of input image file.</param>
    ///  <param name="pageNum">The number of page that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///  <param name="compositingParameters">The graphics compositing parameters for the images.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageName: string; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified pages of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageName">The path of input image file.</param>
    ///  <param name="pageNums">The numbers of pages that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100);
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageName: string; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Adds image to the specified pages of PDF document at specified coordinates.
    ///</summary>
    ///  <param name="imageName">The path of input image file.</param>
    ///  <param name="pageNums">The numbers of pages that will receive the image.</param>
    ///  <param name="lowerLeftX">The lower left x of image rectangle.</param>
    ///  <param name="lowerLeftY">The lower left y of image rectangle.</param>
    ///  <param name="upperRightX">The upper right x of image rectangle.</param>
    ///  <param name="upperRightY">The upper right y of image rectangle.</param>
    ///  <param name="compositingParameters">The graphics compositing parameters for the images.</param>
    ///<returns>True if success false otherwise.</returns>
    ///<example><code lang="C#">
    ///  PdfFileMend mendor = new PdfFileMend("example.pdf", "out_example.pdf");
    ///  mendor.AddImage("picture.jpg", 1, 10, 10, 100, 100, new CompositingParameters(BlendMode.Multiply));
    ///  mendor.Close();
    ///</code></example>
    function AddImage(imageName: string; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single; compositingParameters: DNCompositingParameters): Boolean; overload;
    ///<summary>
    ///  Not implemented.
    ///</summary>
    ///  <param name="text">FormattedText object.</param>
    ///  <param name="pageNum">Page number.</param>
    ///  <param name="lowerLeftX">Lower left X coordinate.</param>
    ///  <param name="lowerLeftY">Lower left Y coordinate.</param>
    ///<returns>True in case text was successfully added.</returns>
    function AddText(text: DNFormattedText; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single): Boolean; overload;
    ///<summary>
    ///  Not implemented.
    ///</summary>
    ///  <param name="text">FormattedText object.</param>
    ///  <param name="pageNum">Page number.</param>
    ///  <param name="lowerLeftX">Lower left X coordinate.</param>
    ///  <param name="lowerLeftY">Lower left Y coordinate.</param>
    ///  <param name="upperRightX">Upper right X coordinate.</param>
    ///  <param name="upperRightY">Upper right Y coordinate.</param>
    ///<returns>True in case text was successfully added.</returns>
    function AddText(text: DNFormattedText; pageNum: Int32; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Not implemented.
    ///</summary>
    ///  <param name="text">FormattedText object.</param>
    ///  <param name="pageNums">Page numbers array.</param>
    ///  <param name="lowerLeftX">Lower left X coordinate.</param>
    ///  <param name="lowerLeftY">Lower left Y coordinate.</param>
    ///  <param name="upperRightX">Upper right X coordinate.</param>
    ///  <param name="upperRightY">Upper right Y coordinate.</param>
    ///<returns>True in case text was successfully added.</returns>
    function AddText(text: DNFormattedText; pageNums: TArray<Int32>; lowerLeftX: Single; lowerLeftY: Single; upperRightX: Single; upperRightY: Single): Boolean; overload;
    ///<summary>
    ///  Closes PdfFileMend object.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets the input stream.
    ///</summary>
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    ///<summary>
    ///  Sets the output stream.
    ///</summary>
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    ///<summary>
    ///  Sets the input file.
    ///</summary>
    property InputFile: string read get_InputFile write set_InputFile;
    ///<summary>
    ///  Sets the output file.
    ///</summary>
    property OutputFile: string read get_OutputFile write set_OutputFile;
    ///<summary>
    ///  Sets a bool value that indicates word wrap in AddText methods.
    ///  If the value is true, the text in FormattedText will word wrap.
    ///  By defalt, the value is false.
    ///</summary>
    property IsWordWrap: Boolean write set_IsWordWrap;
    ///<summary>
    ///  Sets or gets word wrapping algorithm. See WordWrapMode and IsWordWrap.
    ///</summary>
    property WrapMode: DNFacades_WordWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>
    ///  Sets or gets text positioning strategy. <see cref="T:Aspose.Pdf.Facades.PositioningMode" />
    ///  Default mode is Legacy.
    ///</summary>
    property TextPositioningMode: DNPositioningMode read get_TextPositioningMode write set_TextPositioningMode;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileMend = class(TDNGenericImport<DNPdfFileMendClass, DNPdfFileMend>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileSecurityClass = interface(DNSaveableFacadeClass)
  ['{046C0955-74C1-5B91-BE4E-1F12ADE8DB7F}']
  { static getter & setter } 

    procedure set_InputFile(value: string);
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    procedure set_OutputFile(value: string);
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);

  { constructors } 

    ///<summary>
    ///  Initialize the object of PdfFileSecurity with input and output stream.
    ///</summary>
    ///  <param name="inputStream"> Input Pdf Stream.</param>
    ///  <param name="outputStream">Output Pdf Stream.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileSecurity; overload;
    ///<summary>
    ///  Initializes the object of PdfFileSecurity with input and output file.
    ///</summary>
    ///  <param name="inputFile">Source input Pdf file.</param>
    ///  <param name="outputFile">Output Pdf file.</param>
    {class} function init(inputFile: string; outputFile: string): DNPdfFileSecurity; overload;
    ///<summary>
    ///  Initialize the object of PdfFileSecurity.
    ///</summary>
    {class} function init: DNPdfFileSecurity; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfFileSecurity; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputFile">
    ///  Output Pdf file.
    ///</param>
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileSecurity; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSecurity" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputStream">
    ///  Output Pdf Stream.
    ///</param>
    {class} function init(document: DNDocument; outputStream: DDN.mscorlib.DNStream): DNPdfFileSecurity; overload;

  { static propertys } 

    ///<summary>
    ///  Sets the input file.
    ///</summary>
    {class} property InputFile: string write set_InputFile;
    ///<summary>
    ///  Sets the input stream.
    ///</summary>
    {class} property InputStream: DDN.mscorlib.DNStream write set_InputStream;
    ///<summary>
    ///  Sets the output file.
    ///</summary>
    {class} property OutputFile: string write set_OutputFile;
    ///<summary>
    ///  Sets the output stream.
    ///</summary>
    {class} property OutputStream: DDN.mscorlib.DNStream write set_OutputStream;
  end;

  ///<summary>
  ///  Represents encrypting or decrypting a Pdf file with owner or user password, changing the security setting and password.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileSecurity')]
  DNPdfFileSecurity = interface(DNSaveableFacade)
  ['{F4FA9502-5DE7-30A2-99A7-FC419352617C}']
  { getters & setters } 

    procedure set_InputFile(value: string);
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    procedure set_OutputFile(value: string);
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_AllowExceptions: Boolean;
    procedure set_AllowExceptions(value: Boolean);
    function get_LastException: DDN.mscorlib.DNException;
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
    ///  The user password and the owner password can be null or empty. The owner password will be replaced
    ///  with a random string if the input owner password is null or empty.
    ///</summary>
    ///  <param name="userPassword">User password.</param>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="privilege">Set privilege.</param>
    ///  <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity = New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.EncryptFile("userpass", "ownerpass", DocumentPrivilege.Print, KeySize.x256)
    ///</code></example>
    function EncryptFile(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize): Boolean; overload;
    ///<summary>
    ///  Encrypts Pdf file with userpassword and ownerpassword and sets the document's privileges to access.
    ///  The user password and the owner password can be null or empty. The owner password will be replaced
    ///  with a random string if the input owner password is null or empty.
    ///  There are 6 possible combinations of KeySize and Algorithm values.
    ///  However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding
    ///  exception will be raised if kit encounters this combination.
    ///</summary>
    ///  <param name="userPassword">User password.</param>
    ///  <param name="ownerPassword">Owner password.</param>
    ///  <param name="privilege">Set privilege.</param>
    ///  <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
    ///  <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"   'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.EncryptFile("userpass","ownerpass",DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
    ///</code></example>
    function EncryptFile(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize; cipher: DNAlgorithm): Boolean; overload;
    ///<summary>
    ///  Decrypts an encrypted Pdf document by owner password.
    ///  If the document hasn't owner password, it is allow to use user password.
    ///</summary>
    ///  <param name="ownerPassword">Owner password.</param>
    ///<returns>True for success,or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0404.pdf"; //The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.DecryptFile("ownerpass");
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0404.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.DecryptFile("ownerpass")
    ///</code></example>
    function DecryptFile(ownerPassword: string): Boolean;
    ///<summary>
    ///  Sets Pdf file security with empty user/owner passwords.
    ///  The owner password will be added by a random string.
    ///</summary>
    ///  <param name="privilege">Set privilege.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.SetPrivilege(DocumentPrivilege.Print);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.SetPrivilege(DocumentPrivilege.Print)
    ///</code></example>
    function SetPrivilege(privilege: DNDocumentPrivilege): Boolean; overload;
    ///<summary>
    ///  Sets Pdf file security with original password.
    ///</summary>
    ///  <param name="userPassword">Original user password.</param>
    ///  <param name="ownerPassword">Original owner password.</param>
    ///  <param name="privilege">Set privilege.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\example1.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0405.pdf"; //The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\example1.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..1\\AsposePdfKitExample\\Kit0405.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.SetPrivilege(userPassword, ownerPassword, DocumentPrivilege.Print)
    ///</code></example>
    function SetPrivilege(userPassword: string; ownerPassword: string; privilege: DNDocumentPrivilege): Boolean; overload;
    ///<summary>
    ///  Changes the user password and owner password by owner password, keeps the original security settings.
    ///  The new user password and the new owner password can be null or empty. The owner password will be replaced
    ///  with a random string if the new owner password is null or empty.
    ///</summary>
    ///  <param name="ownerPassword">Original Owner password.</param>
    ///  <param name="newUserPassword">New User password.</param>
    ///  <param name="newOwnerPassword">New Owner password.</param>
    ///<returns>True for success,or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\Kit0406.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.ChangePassword("owner","newuser","newowner");
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0406.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.ChangePassword("owner","newuser","newowner")
    ///</code></example>
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string): Boolean; overload;
    ///<summary>
    ///  Changes the user password and password by owner password, allows to reset Pdf documnent security.
    ///  The new user password and the new owner password can be null or empty. The owner password will be replaced
    ///  with a random string if the new owner password is null or empty.
    ///</summary>
    ///  <param name="ownerPassword">Original owner password.</param>
    ///  <param name="newUserPassword">New User password.</param>
    ///  <param name="newOwnerPassword">New Owner password.</param>
    ///  <param name="privilege">Reset security.</param>
    ///  <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256)
    ///</code></example>
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize): Boolean; overload;
    ///<summary>
    ///  Changes the user password and password by owner password, allows to reset Pdf documnent security.
    ///  The new user password and the new owner password can be null or empty. The owner password will be replaced
    ///  with a random string if the new owner password is null or empty.
    ///  There are 6 possible combinations of KeySize and Algorithm values.
    ///  However (KeySize.x40, Algorithm.AES) and (KeySize.x256, Algorithm.RC4) are invalid and corresponding
    ///  exception will be raised if kit encounters this combination.
    ///</summary>
    ///  <param name="ownerPassword">Original owner password.</param>
    ///  <param name="newUserPassword">New User password.</param>
    ///  <param name="newOwnerPassword">New Owner password.</param>
    ///  <param name="privilege">Reset security.</param>
    ///  <param name="keySize">KeySize.x40 for 40 bits encryption, KeySize.x128 for 128 bits encryption and KeySize.x256 for 256 bits encryption.</param>
    ///  <param name="cipher">Algorithm.AES to encrypt using AES algorithm or Algorithm.RC4 for RC4 encryption.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile = "..\\AsposePdfKitExample\\Kit0401.pdf"; //The TestPath may be re-assigned.
    ///  string outFile = "..\\AsposePdfKitExample\\Kit0407.pdf";	//The TestPath may be re-assigned.
    ///  PdfFileSecurity fileSecurity = new PdfFileSecurity(inFile,outFile);
    ///  fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES);
    ///  [Visual Basic]
    ///  Dim inFile As String =  "..\\AsposePdfKitExample\\Kit0401.pdf"  'The TestPath may be re-assigned.'
    ///  Dim outFile As String =  "..\\AsposePdfKitExample\\Kit0407.pdf"  'The TestPath may be re-assigned.'
    ///  Dim fileSecurity As PdfFileSecurity =  New PdfFileSecurity(inFile,outFile)
    ///  fileSecurity.ChangePassword("owner","newuser","newowner", DocumentPrivilege.Print,KeySize.x256,Algorithm.AES)
    ///</code></example>
    function ChangePassword(ownerPassword: string; newUserPassword: string; newOwnerPassword: string; privilege: DNDocumentPrivilege; keySize: DNKeySize; cipher: DNAlgorithm): Boolean; overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcFile">The PDF file.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcStream">The stream of PDF file.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Closes the facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets the input file.
    ///</summary>
    property InputFile: string write set_InputFile;
    ///<summary>
    ///  Sets the input stream.
    ///</summary>
    property InputStream: DDN.mscorlib.DNStream write set_InputStream;
    ///<summary>
    ///  Sets the output file.
    ///</summary>
    property OutputFile: string write set_OutputFile;
    ///<summary>
    ///  Sets the output stream.
    ///</summary>
    property OutputStream: DDN.mscorlib.DNStream write set_OutputStream;
    ///<summary>
    ///  If this value set to true, exception will be thrown on opearation failure. Else, method returns false on failure and last exception can be checked with LastException variable.
    ///</summary>
    property AllowExceptions: Boolean read get_AllowExceptions write set_AllowExceptions;
    ///<summary>
    ///  Returns exception which was thrown by last operation.
    ///</summary>
    property LastException: DDN.mscorlib.DNException read get_LastException;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileSecurity = class(TDNGenericImport<DNPdfFileSecurityClass, DNPdfFileSecurity>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileSignatureClass = interface(DNSaveableFacadeClass)
  ['{C3DD9D20-32B9-508E-B08D-60DA19A0C285}']
  { constructors } 

    ///<summary>
    ///  The constructor of PdfFileSignature class.
    ///</summary>
    {class} function init: DNPdfFileSignature; overload;
    ///<summary>
    ///  The constructor of PdfFileSignature class.
    ///</summary>
    ///  <param name="inputFile">The input file for signature.</param>
    {class} function init(inputFile: string): DNPdfFileSignature; overload;
    ///<summary>
    ///  The constructor of PdfFileSignature class.
    ///</summary>
    ///  <param name="inputFile">The input file for signature.</param>
    ///  <param name="outputFile">The output file.</param>
    {class} function init(inputFile: string; outputFile: string): DNPdfFileSignature; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfFileSignature; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileSignature" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputFile">
    ///  The output file.
    ///</param>
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileSignature; overload;

  end;

  ///<summary>
  ///  Represents a class to sign a pdf file with a certificate.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileSignature')]
  DNPdfFileSignature = interface(DNSaveableFacade)
  ['{7DFA82B6-799C-3252-A15D-488C525BBFD4}']
  { getters & setters } 

    function get_SignatureAppearance: string;
    procedure set_SignatureAppearance(value: string);
    function get_IsLtvEnabled: Boolean;
    function get_IsCertified: Boolean;
    function get_SignatureAppearanceStream: DDN.mscorlib.DNStream;
    procedure set_SignatureAppearanceStream(value: DDN.mscorlib.DNStream);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Binds a Pdf file for editing.
    ///</summary>
    ///  <param name="inputFile">The pdf file to be edited.</param>
    procedure BindPdf(inputFile: string); overload;
    ///<summary>
    ///  Binds a Pdf stream for editing.
    ///</summary>
    ///  <param name="inputStream">The pdf stream to be edited.</param>
    procedure BindPdf(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves the result PDF to file.
    ///</summary>
    ///  <param name="outputFile">output pdf file</param>
    procedure Save(outputFile: string); overload;
    ///<summary>
    ///  Saves the result PDF to stream.
    ///</summary>
    ///  <param name="outputStream">output pdf stream</param>
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Make a signature on the pdf document.
    ///</summary>
    ///  <param name="page">The page number on which signature is made.</param>
    ///  <param name="SigReason">The reason of signature.</param>
    ///  <param name="SigContact">The contact of signature.</param>
    ///  <param name="SigLocation">The location of signature.</param>
    ///  <param name="visible">The visiblity of signature.</param>
    ///  <param name="annotRect">The rect of signature.</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PdfFileSignature pdfSign = new PdfFileSignature();
    ///  pdfSign.BindPdf(inFile);
    ///  System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 200);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
    ///  pdfSign.SetCertificate("certificate.pfx", "password");
    ///  pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect);
    ///  pdfSign.Save(outFile);
    ///  [Visual Basic]
    ///  Dim pdfSign = new PdfFileSignature()
    ///  pdfSign.BindPdf(inFile)
    ///  Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 200)
    ///  pdfSign.SetCertificate("certificate.pfx", "password")
    ///  pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect)
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
    ///  pdfSign.Save(outFile)
    ///</code></example>
    procedure Sign(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.Aspose.Common.DNRectangle); overload;
    ///<summary>
    ///  Sign the document with the given type signature.
    ///</summary>
    ///  <param name="page">The page number on which signature is made.</param>
    ///  <param name="SigReason">The reason of signature.</param>
    ///  <param name="SigContact">The contact of signature.</param>
    ///  <param name="SigLocation">The location of signature.</param>
    ///  <param name="visible">The visiblity of signature.</param>
    ///  <param name="annotRect">The rect of signature.</param>
    ///  <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached. </param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
    ///  System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
    ///  pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, new PKCS1("certificate.pfx", "password"));
    ///  pdfSign.Save();
    ///  [Visual Basic]
    ///  Dim inFile As String = TestPath &amp; "example1.pdf"
    ///  Dim outFile As String = TestPath &amp; "signature.pdf"
    ///  Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
    ///  Dim pdfSign = new PdfFileSignature(inFile, outFile)
    ///  Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
    ///  pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
    ///  pdfSign.Sign(2, "Allen", "success", "ChangSha", true, rect, sig)
    ///  pdfSign.Save()
    ///</code></example>
    procedure Sign(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.Aspose.Common.DNRectangle; sig: DNSignature); overload;
    ///<summary>
    ///  Sign the document with the given type signature.
    ///</summary>
    ///  <param name="page">The page number on which signature is made.</param>
    ///  <param name="visible">The visiblity of signature.</param>
    ///  <param name="annotRect">The rect of signature.</param>
    ///  <param name="sig">
    ///  The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.
    ///  Such data as signature reason, contact and location must be already present in this object (see corresponding properties).
    ///</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PKCS1 sig = new PKCS1("certificate.pfx", "password");
    ///  sig.Reason = "Some reason";
    ///  sig.Contact = "Smith";
    ///  sig.Location = "New York";
    ///  PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
    ///  System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 200, 100);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
    ///  pdfSign.Sign(2, true, rect, sig);
    ///  pdfSign.Save();
    ///  [Visual Basic]
    ///  Dim inFile As String = TestPath &amp; "example1.pdf"
    ///  Dim outFile As String = TestPath &amp; "signature.pdf"
    ///  Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
    ///  sig.Reason = "Some reason"
    ///  sig.Contact = "Smith"
    ///  sig.Location = "New York"
    ///  Dim pdfSign = new PdfFileSignature(inFile, outFile)
    ///  Dim rect as System.Drawing.Rectangle = new System.Drawing.Rectangle(100, 100, 200, 100)
    ///  pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
    ///  pdfSign.Sign(2, true, rect, sig)
    ///  pdfSign.Save()
    ///</code></example>
    procedure Sign(page: Int32; visible: Boolean; annotRect: DDN.Aspose.Common.DNRectangle; sig: DNSignature); overload;
    ///<summary>
    ///  Sign the document with the given type signature which is placed in already presented signature field.
    ///  Before signing signature field must be empty, i.e. field must not contain signature dictionary.
    ///  Thus pdf document already has signature field, you should not supply the place to stamp the signature,
    ///  corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
    ///</summary>
    ///  <param name="SigName">The name of the signature field.</param>
    ///  <param name="SigReason">The reason of signature.</param>
    ///  <param name="SigContact">The contact of signature.</param>
    ///  <param name="SigLocation">The location of signature.</param>
    ///  <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PKCS1 sig = new PKCS1("certificate.pfx", "password");
    ///  PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
    ///  pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig);
    ///  pdfSign.Save();
    ///  [Visual Basic]
    ///  Dim inFile As String = TestPath &amp; "example1.pdf"
    ///  Dim outFile As String = TestPath &amp; "signature.pdf"
    ///  Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
    ///  Dim pdfSign = new PdfFileSignature(inFile, outFile)
    ///  pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
    ///  pdfSign.Sign("Signature1", "Allen", "success", "ChangSha", sig)
    ///  pdfSign.Save()
    ///</code></example>
    procedure Sign(SigName: string; SigReason: string; SigContact: string; SigLocation: string; sig: DNSignature); overload;
    ///<summary>
    ///  Sign the document with the given type signature which is placed in already presented signature field.
    ///  Before signing pdf document should already has signature field, corresponding page and rectangle are taken from
    ///  signature field which is found by signature name (see SigName parameter).
    ///</summary>
    ///  <param name="page">The page number on which signature is made.</param>
    ///  <param name="SigName">The name of the signature field.</param>
    ///  <param name="SigReason">The reason of signature.</param>
    ///  <param name="SigContact">The contact of signature.</param>
    ///  <param name="SigLocation">The location of signature.</param>
    ///  <param name="visible">The visiblity of signature.</param>
    ///  <param name="annotRect">The rect of signature.</param>
    ///  <param name="sig">The type of the signature, could be PKCS1, PKCS7 and PKCS7Detached.</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "blankWithSignature.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PKCS7 sig = new PKCS7("certificate.pfx", "password");
    ///  PdfFileSignature pdfSign = new PdfFileSignature(inFile);
    ///  System.Drawing.Rectangle rect = new System.Drawing.Rectangle(100, 100, 100, 100);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg"
    ///  pdfSign.Sign(1, "Signature1", "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig);
    ///  pdfSign.Save(outFile);
    ///  [Visual Basic]
    ///  Dim inFile As String = TestPath &amp; "blankWithSignature.pdf"
    ///  Dim outFile As String = TestPath &amp; "signature.pdf"
    ///  Dim sig As PKCS7 = new PKCS7("certificate.pfx", "password")
    ///  Dim pdfSign = new PdfFileSignature(inFile, outFile)
    ///  pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
    ///  pdfSign.Sign("Signature1",  "ReasonToTest", "ContactMe", "SomeLocation", true, rect, sig)
    ///  pdfSign.Save(outFile)
    ///</code></example>
    procedure Sign(page: Int32; SigName: string; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.Aspose.Common.DNRectangle; sig: DNSignature); overload;
    ///<summary>
    ///  Sign the document with the given type signature which is placed in already presented signature field.
    ///  Before signing signature field must be empty, i.e. field must not contain signature dictionary.
    ///  Thus pdf document already has signature field, you should not supply the place to stamp the signature,
    ///  corresponding page and rectangle are taken from signature field which is found by signature name (see SigName parameter).
    ///  Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.
    ///</summary>
    ///  <param name="SigName">The name of the signature field.</param>
    ///  <param name="sig">The type of the signature, could be PKCS1 (Pkcs1Signature object), PKCS7 and PKCS7 detached (Pkcs7Signature object) </param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  string outFile = TestPath + "signature.pdf";
    ///  PKCS1 sig = new PKCS1("certificate.pfx", "password");
    ///  sig.Reason = "Some reason";
    ///  sig.Contact = "Smith";
    ///  sig.Location = "New York";
    ///  PdfFileSignature pdfSign = new PdfFileSignature(inFile, outFile);
    ///  pdfSign.SignatureAppearance = TestPath + "butterfly.jpg";
    ///  pdfSign.Sign("Signature1", sig);
    ///  pdfSign.Save();
    ///  [Visual Basic]
    ///  Dim inFile As String = TestPath &amp; "example1.pdf"
    ///  Dim outFile As String = TestPath &amp; "signature.pdf"
    ///  Dim sig As PKCS1 = new PKCS1("certificate.pfx", "password")
    ///  sig.Reason = "Some reason"
    ///  sig.Contact = "Smith"
    ///  sig.Location = "New York"
    ///  Dim pdfSign = new PdfFileSignature(inFile, outFile)
    ///  pdfSign.SignatureAppearance = TestPath &amp; "butterfly.jpg"
    ///  pdfSign.Sign("Signature1", sig)
    ///  pdfSign.Save()
    ///</code></example>
    procedure Sign(SigName: string; sig: DNSignature); overload;
    ///<summary>
    ///  Returns the access permissions value of certified document by the MDP signature type.
    ///</summary>
    ///<returns>If the document is being certified, than returns access permissions value; otherwise, <exception cref="T:System.ApplicationException" />
    ///  is thrown.</returns>
    function GetAccessPermissions: DNDocMDPAccessPermissions;
    ///<summary>
    ///  Certify the document with the MDP signature.
    ///  Such data as signature reason, contact and location must be provided by corresponding properties of the Signature object sig.
    ///</summary>
    ///  <param name="page">The page on which signature is made.</param>
    ///  <param name="SigReason">The reason of signature.</param>
    ///  <param name="SigContact">The contact of signature.</param>
    ///  <param name="SigLocation">The location of signature.</param>
    ///  <param name="visible">The visiblity of signature.</param>
    ///  <param name="annotRect">The rect of signature.</param>
    ///  <param name="docMdpSignature">The document MDP type of the signature.</param>
    procedure Certify(page: Int32; SigReason: string; SigContact: string; SigLocation: string; visible: Boolean; annotRect: DDN.Aspose.Common.DNRectangle; docMdpSignature: DNDocMDPSignature);
    ///<summary>
    ///  Gets the names of all not empty signatures.
    ///</summary>
    ///<returns>Return an IList.</returns>
    ///<example><code>
    ///  [C#]
    ///  string inFile=TestPath + "example1.pdf";
    ///  PdfFileSignature pdfSign=new PdfFileSignature();
    ///  pdfSign.BindPdf(inFile);
    ///  IList names=pdfSign.GetSignNames();
    ///  for(int i=0;i&lt;names.Count;i++)
    ///  {
    ///  Console.WriteLine("signature name:"+(string)names[i]);
    ///  Console.WriteLine("coverswholedocument:"+pdfSign.IsCoversWholeDocument((string)names[i]));
    ///  Console.WriteLine("revision:"+pdfSign.GetRevision((string)names[i]));
    ///  Console.WriteLine("verifysigned:"+pdfSign.VerifySigned((string)names[i]));
    ///  Console.WriteLine("reason:"+pdfSign.GetReason((string)names[i]));
    ///  Console.WriteLine("location:"+pdfSign.GetLocation((string)names[i]));
    ///  Console.WriteLine("datatime:"+pdfSign.GetDateTime((string)names[i]));
    ///  }
    ///  Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision());
    ///  [Visual Basic]
    ///  Dim pdfSign as PdfFileSignature =new  PdfFileSignature
    ///  pdfSign.BindPdf(inFile)
    ///  Dim names as IList
    ///  names=pdfSign.GetSignNames()
    ///  For i=0 To names.Count
    ///  Console.WriteLine("signature name:" + (string)names[i])
    ///  Console.WriteLine("coverswholedocument:" + pdfSign.IsCoversWholeDocument((string)names[i]))
    ///  Console.WriteLine("revision:" + pdfSign.GetRevision((string)names[i]))
    ///  Console.WriteLine("verifysigned:" + pdfSign.VerifySigned((string)names[i]))
    ///  Console.WriteLine("reason:" + pdfSign.GetReason((string)names[i]))
    ///  Console.WriteLine("location:" + pdfSign.GetLocation((string)names[i]))
    ///  Console.WriteLine("datatime:" + pdfSign.GetDateTime((string)names[i]))
    ///  Next i
    ///  Console.WriteLine("totalvision:"+pdfSign.GetTotalRevision())
    ///</code></example>
    function GetSignNames: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  Gets the names of all empty signature fields.
    ///</summary>
    ///<returns>Return an IList.</returns>
    function GetBlankSignNames: DDN.mscorlib.DNIList<string>;
    ///<summary>
    ///  Checks if the pdf  has a digital signature or not.
    ///</summary>
    ///<returns>Return a  result of bool type.</returns>
    function IsContainSignature: Boolean;
    ///<summary>
    ///  Checks if the pdf  has a digital signature or not.
    ///</summary>
    ///<returns>Return a  result of bool type.</returns>
    function ContainsSignature: Boolean;
    ///<summary>
    ///  Checks if the pdf has a usage rights or not.
    ///</summary>
    ///<returns>Returns a result of bool type.</returns>
    function ContainsUsageRights: Boolean;
    ///<summary>
    ///  Checks if the signature covers the whole document.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return a  result of bool type.</returns>
    function IsCoversWholeDocument(signName: string): Boolean;
    ///<summary>
    ///  Checks if the signature covers the whole document.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return a  result of bool type.</returns>
    function CoversWholeDocument(signName: string): Boolean;
    ///<summary>
    ///  Gets the revision of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return the number of signature revision.</returns>
    function GetRevision(signName: string): Int32;
    ///<summary>
    ///  Gets the toltal revision.
    ///</summary>
    ///<returns>Return the total number of signature revision.</returns>
    function GetTotalRevision: Int32;
    ///<summary>
    ///  Removes the usage rights entry.
    ///</summary>
    procedure RemoveUsageRights;
    ///<summary>
    ///  Remove the signature according to the name of the signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  PdfFileSignature pdfSign = new PdfFileSignature();
    ///  pdfSign.BindPdf(inFile);
    ///  IList names = pdfSign.GetSignNames();
    ///  for(int i = 0; i &lt; names.Count; i++)
    ///  {
    ///  pdfSign.RemoveSignature((string)names[i]);
    ///  }
    ///  pdfSign.Save(TestPath + "signed_removed.pdf");
    ///  [Visual Basic]
    ///  Dim pdfSign as PdfFileSignature = new PdfFileSignature
    ///  pdfSign.BindPdf(inFile)
    ///  Dim names as IList
    ///  names = pdfSign.GetSignNames()
    ///  For i = 0 To names.Count
    ///  pdfSign.RemoveSignature((string)names[i])
    ///  Next i
    ///  pdfSign.Save(TestPath + "signed_removed.pdf")
    ///</code></example>
    procedure RemoveSignature(signName: string); overload;
    ///<summary>
    ///  Removes the signature according to the name of the signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///  <param name="removeField">If set to true, than removes both of signature and field from document; otherwise, signature only.</param>
    ///<example><code>
    ///  [C#]
    ///  string inFile = TestPath + "example1.pdf";
    ///  PdfFileSignature pdfSign = new PdfFileSignature();
    ///  pdfSign.BindPdf(inFile);
    ///  IList names = pdfSign.GetSignNames();
    ///  for(int i = 0; i &lt; names.Count; i++)
    ///  {
    ///  pdfSign.RemoveSignature((string)names[i], false);
    ///  }
    ///  pdfSign.Save(TestPath + "signed_removed.pdf");
    ///  [Visual Basic]
    ///  Dim pdfSign as PdfFileSignature = new PdfFileSignature
    ///  pdfSign.BindPdf(inFile)
    ///  Dim names as IList
    ///  names = pdfSign.GetSignNames()
    ///  For i = 0 To names.Count
    ///  pdfSign.RemoveSignature((string)names[i], false)
    ///  Next i
    ///  pdfSign.Save(TestPath + "signed_removed.pdf")
    ///</code></example>
    procedure RemoveSignature(signName: string; removeField: Boolean); overload;
    ///<summary>
    ///  Checks the validity of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return a result of bool type.</returns>
    function VerifySigned(signName: string): Boolean;
    ///<summary>
    ///  Gets the name of person or organization who signing the pdf document.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Returns the result of the signer's name.</returns>
    function GetSignerName(signName: string): string;
    ///<summary>
    ///  Gets the signature's datetime.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return the result of DateTime type.</returns>
    function GetDateTime(signName: string): DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  Gets the reason of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Returns a result of string type.</returns>
    function GetReason(signName: string): string;
    ///<summary>
    ///  Gets the location of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Returns a result of string type.</returns>
    function GetLocation(signName: string): string;
    ///<summary>
    ///  Gets the contact information of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Returns a result of string type.</returns>
    function GetContactInfo(signName: string): string;
    ///<summary>
    ///  Checks the validity of a signature.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>Return a result of bool type.</returns>
    function VerifySignature(signName: string): Boolean;
    ///<summary>
    ///  Extracts signature's image.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>If image was successfully found than returns stream object; otherwise, null.</returns>
    function ExtractImage(signName: string): DDN.mscorlib.DNStream;
    ///<summary>
    ///  Extracts signature's single X.509 certificate as a stream.
    ///</summary>
    ///  <param name="signName">The name of signature.</param>
    ///<returns>If certificate was found returns X.509 single certificate; otherwise, null.</returns>
    function ExtractCertificate(signName: string): DDN.mscorlib.DNStream;
    ///<summary>
    ///  Save signed pdf file. Output filename must be provided before with the help of coresponding PdfFileSignature constructor.
    ///</summary>
    procedure Save; overload;
    ///<summary>
    ///  Set certificate file and password for signing routine.
    ///</summary>
    ///  <param name="pfx">
    ///  PKCS #12 certificate file.
    ///</param>
    ///  <param name="pass">
    ///  Password to get access for the certificate private key.
    ///</param>
    procedure SetCertificate(pfx: string; pass: string);
    ///<summary>
    ///  Closes the facade.
    ///</summary>
    procedure Close;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets or gets a graphic appearance for the signature. Property value represents image file name.
    ///</summary>
    property SignatureAppearance: string read get_SignatureAppearance write set_SignatureAppearance;
    ///<summary>
    ///  Gets the LTV enabled flag.
    ///</summary>
    property IsLtvEnabled: Boolean read get_IsLtvEnabled;
    ///<summary>
    ///  Gets the flag determining whether a document is certified or not.
    ///</summary>
    property IsCertified: Boolean read get_IsCertified;
    ///<summary>
    ///  Sets or gets a graphic appearance for the signature. Property value represents image stream.
    ///</summary>
    property SignatureAppearanceStream: DDN.mscorlib.DNStream read get_SignatureAppearanceStream write set_SignatureAppearanceStream;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileSignature = class(TDNGenericImport<DNPdfFileSignatureClass, DNPdfFileSignature>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileStampClass = interface(DNSaveableFacadeClass)
  ['{830C517E-1299-5F16-83CA-45D578945188}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    ///<summary>
    ///  Constructor for PdfFileStamp.
    ///</summary>
    ///  <param name="inputFile">Input file name and path.</param>
    ///  <param name="outputFile">Output file name and path.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///</code></example>
    {class} function init(inputFile: string; outputFile: string): DNPdfFileStamp; overload;
    ///<summary>
    ///  Constructor for PdfFileStamp.
    ///</summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="outputStream">Output stream.</param>
    ///<example><code lang="C#">
    ///  Stream input = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream output = new FileStream("output.pdf", FileMode.Creat, FileAccess.Write);
    ///  PdfFileStamp stamp = new PdfFileStamp(input, output);
    ///</code></example>
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): DNPdfFileStamp; overload;
    ///<summary>
    ///  Constructor for PdfFileStamp.
    ///</summary>
    ///  <param name="inputFile">Input file name and path.</param>
    ///  <param name="outputFile">Output file name and path.</param>
    ///  <param name="keepSecurity">Keep security if true.</param>
    {class} function init(inputFile: string; outputFile: string; keepSecurity: Boolean): DNPdfFileStamp; overload;
    ///<summary>
    ///  Constructor of PdfFileStamp.
    ///</summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="outputStream">Output stream.</param>
    ///  <param name="keepSecurity">Keep security if true.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; keepSecurity: Boolean): DNPdfFileStamp; overload;
    ///<summary>
    ///  Constructor of the PdfFileStamp.
    ///  Input file and output file may be specified via corresponding properties.
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp();
    ///  fileStamp.InputFile = "input.pdf";
    ///  fileStamp.OutputFile = "output.pdf";
    ///</code></example></summary>
    {class} function init: DNPdfFileStamp; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfFileStamp; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputFile">
    ///  Output file name and path.
    ///</param>
    {class} function init(document: DNDocument; outputFile: string): DNPdfFileStamp; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfFileStamp" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    ///  <param name="outputStream">
    ///  Output stream.
    ///</param>
    {class} function init(document: DNDocument; outputStream: DDN.mscorlib.DNStream): DNPdfFileStamp; overload;
    ///<summary>
    ///  Creates PdfFileStamp which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Stream with input document.</param>
    ///  <param name="response">HttpResponse object where result will be saved.</param>
    {class} function init(inputStream: DDN.mscorlib.DNStream; response: DDN.Aspose.Common.DNHttpResponse): DNPdfFileStamp; overload;
    ///<summary>
    ///  Creates PdfFileStamp which will save result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Source file name.</param>
    ///  <param name="response">HttpResponse object where result will be saved.</param>
    {class} function init(inputFile: string; response: DDN.Aspose.Common.DNHttpResponse): DNPdfFileStamp; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_PosBottomMiddle: Int32;
   function __fakeFieldGet_PosBottomRight: Int32;
   function __fakeFieldGet_PosUpperRight: Int32;
   function __fakeFieldGet_PosSidesRight: Int32;
   function __fakeFieldGet_PosUpperMiddle: Int32;
   function __fakeFieldGet_PosBottomLeft: Int32;
   function __fakeFieldGet_PosSidesLeft: Int32;
   function __fakeFieldGet_PosUpperLeft: Int32;

  { static fields } 

    ///<summary>
    ///  Bottom middle position.
    ///</summary>
    {class} property PosBottomMiddle: Int32 read __fakeFieldGet_PosBottomMiddle;
    ///<summary>
    ///  Bottom right position.
    ///</summary>
    {class} property PosBottomRight: Int32 read __fakeFieldGet_PosBottomRight;
    ///<summary>
    ///  Right upper position.
    ///</summary>
    {class} property PosUpperRight: Int32 read __fakeFieldGet_PosUpperRight;
    ///<summary>
    ///  Right position.
    ///</summary>
    {class} property PosSidesRight: Int32 read __fakeFieldGet_PosSidesRight;
    ///<summary>
    ///  Upper middle position.
    ///</summary>
    {class} property PosUpperMiddle: Int32 read __fakeFieldGet_PosUpperMiddle;
    ///<summary>
    ///  Bottom left position.
    ///</summary>
    {class} property PosBottomLeft: Int32 read __fakeFieldGet_PosBottomLeft;
    ///<summary>
    ///  Left position.
    ///</summary>
    {class} property PosSidesLeft: Int32 read __fakeFieldGet_PosSidesLeft;
    ///<summary>
    ///  Upper let position.
    ///</summary>
    {class} property PosUpperLeft: Int32 read __fakeFieldGet_PosUpperLeft;

  { static propertys } 

    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  ///<summary>
  ///  Class for adding stamps (watermark or background) to PDF files.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileStamp')]
  DNPdfFileStamp = interface(DNSaveableFacade)
  ['{B4B5053A-CF08-3FD3-AE1F-93221A040863}']
  { getters & setters } 

    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_KeepSecurity: Boolean;
    procedure set_KeepSecurity(value: Boolean);
    function get_InputFile: string;
    procedure set_InputFile(value: string);
    function get_InputStream: DDN.mscorlib.DNStream;
    procedure set_InputStream(value: DDN.mscorlib.DNStream);
    function get_OutputFile: string;
    procedure set_OutputFile(value: string);
    function get_OutputStream: DDN.mscorlib.DNStream;
    procedure set_OutputStream(value: DDN.mscorlib.DNStream);
    function get_PageNumberRotation: Single;
    procedure set_PageNumberRotation(value: Single);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_PageHeight: Single;
    function get_PageWidth: Single;
    function get_StartingNumber: Int32;
    procedure set_StartingNumber(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_StampId: Int32;
    procedure set_StampId(value: Int32);
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_Response: DDN.Aspose.Common.DNHttpResponse;
    procedure set_Response(value: DDN.Aspose.Common.DNHttpResponse);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Closes opened files and saves changes.
    ///  Warning. If input or output streams are specified they are not closed by Close() method.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  //do some work...
    ///  stamp.Close();
    ///</code></example>
    procedure Close;
    ///<summary>
    ///  Saves result into specified file.
    ///</summary>
    ///  <param name="destFile">Path to file where document will be saved.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves document into specified stream.
    ///</summary>
    ///  <param name="destStream">Stream where document will be saved.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Adds stamp to the file.
    ///</summary>
    ///<example><code code="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Aspose.Pdf.Facades.Stamp();
    ///  stamp.SetOrigin(140, 400);
    ///  stamp.SetImageSize(50, 50);
    ///  stamp.Opacity = 0.8f;
    ///  stamp.IsBackground = true;
    ///  stamp.BindImage("image.jpg");
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example><param name="stamp">Stamp object which.</param>
    procedure AddStamp(stamp: DNFacades_Stamp);
    ///<summary>
    ///  Add page number to file. Page number text may contain # sign which will be replaced with number of the page.
    ///  Page number is placed in the bottom of the page centered horizontally.
    ///</summary>
    ///  <param name="formatString">Text of page number</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber("Page #");
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formatString: string); overload;
    ///<summary>
    ///  Adds page number to the page. Page number may contain # sign which will be replaced with page number.
    ///  Page number is placed in the bottom of the page centered horizontally.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber(new FormattedText("Page #"));
    ///  fileStamp.Close();
    ///</code></example><param name="formattedText">Format string for page number representes as FormattedText.</param>
    procedure AddPageNumber(formattedText: DNFormattedText); overload;
    ///<summary>
    ///  Adds page number to the pages of document.
    ///</summary>
    ///  <param name="formatString">Format string for page number.</param>
    ///  <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right,
    ///  3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
    ///  You can use the following constants:
    ///  PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3,
    ///  PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
    ///</param>
    ///  <param name="leftMargin">Margin on the left edge of the page. </param>
    ///  <param name="rightMargin">Margin on the right edge of the page.</param>
    ///  <param name="topMargin">Margin on the top edge of the page.</param>
    ///  <param name="bottomMargin">Margin on the bottom edge of the page.</param>
    ///<example><code code="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber("Page #", PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formatString: string; position: Int32; leftMargin: Single; rightMargin: Single; topMargin: Single; bottomMargin: Single); overload;
    ///<summary>
    ///  Adds page number at the specified position on the page.
    ///</summary>
    ///  <param name="formatString">Format string. Format string can contain # sign which will be replaced with page number.</param>
    ///  <param name="x">X coordinate of page number.</param>
    ///  <param name="y">Y coordinate of page number.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formatString: string; x: Single; y: Single); overload;
    ///<summary>
    ///  Adds page number to the pages of document.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which represents page number format and properties iof the text.</param>
    ///  <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right,
    ///  3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
    ///  You can use the following constants:
    ///  PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3,
    ///  PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
    ///</param>
    ///  <param name="leftMargin">Margin on the left edge of the page. </param>
    ///  <param name="rightMargin">Margin on the right edge of the page.</param>
    ///  <param name="topMargin">Margin on the top edge of the page.</param>
    ///  <param name="bottomMargin">Margin on the bottom edge of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber(new FormattedText("Page #"), PdfFileStamp.PosBottomLeft, 100, 100, 200, 200);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formattedText: DNFormattedText; position: Int32; leftMargin: Single; rightMargin: Single; topMargin: Single; bottomMargin: Single); overload;
    ///<summary>
    ///  Adds page number at the specified position on the page.
    ///</summary>
    ///  <param name="formattedText">Formatted text which represents page number format and properties of the text.
    ///  Format string can contain # sign which will be replaced with page number.</param>
    ///  <param name="x">X coordinate of page number.</param>
    ///  <param name="y">Y coordinate of page number.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber(new FormattedText("Page  #"), 123, 357);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formattedText: DNFormattedText; x: Single; y: Single); overload;
    ///<summary>
    ///  Adds header to the page.
    ///</summary>
    ///  <param name="formattedText">Text for header and properties of the text.</param>
    ///  <param name="topMargin">Margin on the top of page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddHeader(new FormattedText("Head of the page"), 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddHeader(formattedText: DNFormattedText; topMargin: Single); overload;
    ///<summary>
    ///  Adds header to the pages of file.
    ///</summary>
    ///  <param name="formattedText">Formatted text object which contains page text and its properties.</param>
    ///  <param name="topMargin">Margin on the top of the page.</param>
    ///  <param name="leftMargin">Margin on the left of the page.</param>
    ///  <param name="rightMargin">Margin on the right of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  stamp.AddHeader(new FormattedText("Head of the page"), 10, 50, 50);
    ///</code></example>
    procedure AddHeader(formattedText: DNFormattedText; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds image as header to the pages of the file.
    ///</summary>
    ///  <param name="imageFile">Path to the image file.</param>
    ///  <param name="topMargin">Margin at top of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddHeader("image.jpg", 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddHeader(imageFile: string; topMargin: Single); overload;
    ///<summary>
    ///  Adds image as header on the pages.
    ///</summary>
    ///  <param name="imageFile">Path to the image file.</param>
    ///  <param name="topMargin">Margin at top of the page.</param>
    ///  <param name="leftMargin">Margin at left side of the page.</param>
    ///  <param name="rightMargin">Margin at right side of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddHeader("image.jpg", 50, 100, 100);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddHeader(imageFile: string; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds image as header on the pages.
    ///</summary>
    ///  <param name="imageStream">Stream of the image.</param>
    ///  <param name="topMargin">Margin at top of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddHeader(imageStream: DDN.mscorlib.DNStream; topMargin: Single); overload;
    ///<summary>
    ///  Adds image at the top of the page.
    ///</summary>
    ///  <param name="inputStream">Stream which contains image data.</param>
    ///  <param name="topMargin">Margin at top of the page.</param>
    ///  <param name="leftMargin">Margin at left side of the page.</param>
    ///  <param name="rightMargin">Margin at right side of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddHeader(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 100, 100);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddHeader(inputStream: DDN.mscorlib.DNStream; topMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds footer to the pages of the document.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains text of the footer and text properties.</param>
    ///  <param name="bottomMargin">Margin at the top of page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  stamp.AddFooter(new FormattedText("Foot of the page"), 10);
    ///</code></example>
    procedure AddFooter(formattedText: DNFormattedText; bottomMargin: Single); overload;
    ///<summary>
    ///  Adds footer to the pages of the document.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains footer text and text properties.</param>
    ///  <param name="bottomMargin">Margin at the bottom of the page.</param>
    ///  <param name="leftMargin">Margin at the left side of the page.</param>
    ///  <param name="rightMargin">Margin at the right side of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp stamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  stamp.AddFooter(new FormattedText("Foot of the page"), 10, 50, 50);
    ///</code></example>
    procedure AddFooter(formattedText: DNFormattedText; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds image as footer to the pages of the document.
    ///</summary>
    ///  <param name="imageFile">Image file name and path.</param>
    ///  <param name="bottomMargin">Margin at the bottom of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddFooter("image.jpg", 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddFooter(imageFile: string; bottomMargin: Single); overload;
    ///<summary>
    ///  Adds image as footer of the pages.
    ///</summary>
    ///  <param name="imageFile">Iamge file name and path.</param>
    ///  <param name="bottomMargin">Margin at the bottom of the page.</param>
    ///  <param name="leftMargin">Margin at the left side of the page.</param>
    ///  <param name="rightMargin">Margin at the right side of the page.</param>
    ///  /// <example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddFooter("image.jpg", 50, 100, 100);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddFooter(imageFile: string; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds image as footer of the page.
    ///</summary>
    ///  <param name="imageStream">Stream contains image data.</param>
    ///  <param name="bottomMargin">Margin at the bottom of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddFooter(imageStream: DDN.mscorlib.DNStream; bottomMargin: Single); overload;
    ///<summary>
    ///  Adds image as footer of the page.
    ///</summary>
    ///  <param name="imageStream">Stream contains image data.</param>
    ///  <param name="bottomMargin">Margin at the bottom of the page.</param>
    ///  <param name="leftMargin">Margin at the left side of the page.</param>
    ///  <param name="rightMargin">Margin at the right side of the page.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", output.pdf");
    ///  Stream input = new FileStream(TestSettings.GetInputFile("test.jpg"), FileMode.Open, FileAccess.Read);
    ///  fileStamp.AddFooter(new FileStream("image.jpg", FileMode.Open, FileAccess.Read), 50, 50, 50);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddFooter(imageStream: DDN.mscorlib.DNStream; bottomMargin: Single; leftMargin: Single; rightMargin: Single); overload;
    ///<summary>
    ///  Adds page number to the pages.
    ///</summary>
    ///  <param name="formatString">Format of the page number. This text may contain # which will be replaced with page number.</param>
    ///  <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right,
    ///  3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
    ///  You can use the following constants:
    ///  PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3,
    ///  PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
    ///</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formatString: string; position: Int32); overload;
    ///<summary>
    ///  Adds page number to the pages.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains format of the page number and text properties.
    ///  This text may contain # which will be replaced with page number.</param>
    ///  <param name="position">Position where page number will be placed on the page.  0-bottom middle, 1-bottom right, 2-upper right,
    ///  3 - sides right, 4 - upper middle,5 - bottom left,6 - sides left,7 - upper left.
    ///  You can use the following constants:
    ///  PosBottomMiddle = 0, PosBottomRight = 1, PosUpperRight = 2, PosSidesRight = 3,
    ///  PosUpperMiddle, PosBottomLeft = 5, PosSidesLeft, PosUpperLeft
    ///</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.AddPageNumber("Page #", PdfFileStamp.PosUpperRight);
    ///  fileStamp.Close();
    ///</code></example>
    procedure AddPageNumber(formattedText: DNFormattedText; position: Int32); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set.
    ///  This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
    ///  Default value: false.
    ///</summary>
    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    ///<summary>
    ///  Keeps security if true. (This feature will be implemented in next versions).
    ///</summary>
    property KeepSecurity: Boolean read get_KeepSecurity write set_KeepSecurity;
    ///<summary>
    ///  Gets or sets name and path of input file.
    ///</summary>
    property InputFile: string read get_InputFile write set_InputFile;
    ///<summary>
    ///  Gets or sets input stream.
    ///</summary>
    property InputStream: DDN.mscorlib.DNStream read get_InputStream write set_InputStream;
    ///<summary>
    ///  Gets or sets name and path of output file.
    ///</summary>
    property OutputFile: string read get_OutputFile write set_OutputFile;
    ///<summary>
    ///  Gets or sets output stream.
    ///</summary>
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream write set_OutputStream;
    ///<summary>
    ///  Gets or sets rotation of page number. Rotation  is in degrees. Default is 0.
    ///</summary>
    property PageNumberRotation: Single read get_PageNumberRotation write set_PageNumberRotation;
    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    ///<summary>
    ///  Gets height of first page in souorce file.
    ///</summary>
    ///<example><code code="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Console.WriteLine("Height = " + fileStamp.PageHeight);
    ///  fileStamp.Close();
    ///</code></example>
    property PageHeight: Single read get_PageHeight;
    ///<summary>
    ///  Gets width of first page in input file.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Console.WriteLine("Width = " + fileStamp.PageWidth);
    ///  fileStamp.Close();
    ///</code></example>
    property PageWidth: Single read get_PageWidth;
    ///<summary>
    ///  Gets or sets starting number for first page in input file. Next pages will be numbered starting from this value.
    ///  For example if  StartingNumber is set to 100, document pages will have numbers 100, 101, 102...
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  fileStamp.StartingNumber = 100;
    ///  fileStamp.AddPageNumber("Page #");
    ///  fileStamp.Close();
    ///</code></example>
    property StartingNumber: Int32 read get_StartingNumber write set_StartingNumber;
    ///<summary>
    ///  Gets or sets pabge numbering style. Possible values: NumeralsArabic, NumeralsRomanUppercase, NumeralsRomanLowercase, LettersAppercase, LettersLowercase
    ///</summary>
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    ///<summary>
    ///  Stamp ID of next added stamp (incluiding page headers/hooters/page numbers).
    ///</summary>
    property StampId: Int32 read get_StampId write set_StampId;
    ///<summary>
    ///  Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment.
    ///  Default: inline.
    ///</summary>
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    ///<summary>
    ///  Gets or sets Response object where result of operation will be stored.
    ///</summary>
    property Response: DDN.Aspose.Common.DNHttpResponse read get_Response write set_Response;
    ///<summary>
    ///  Gets or sets save options when result is stored as HttpResponse.
    ///  Default value: PdfSaveOptions.
    ///</summary>
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    ///<summary>
    ///  Gets or sets name of attachment when result of operation is stored into HttpResponse objects as attachment.
    ///</summary>
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfFileStamp = class(TDNGenericImport<DNPdfFileStampClass, DNPdfFileStamp>)
  public const
    ///<summary>
    ///  Bottom middle position.
    ///</summary>
   PosBottomMiddle = 0;
    ///<summary>
    ///  Bottom right position.
    ///</summary>
   PosBottomRight = 1;
    ///<summary>
    ///  Right upper position.
    ///</summary>
   PosUpperRight = 2;
    ///<summary>
    ///  Right position.
    ///</summary>
   PosSidesRight = 3;
    ///<summary>
    ///  Upper middle position.
    ///</summary>
   PosUpperMiddle = 4;
    ///<summary>
    ///  Bottom left position.
    ///</summary>
   PosBottomLeft = 5;
    ///<summary>
    ///  Left position.
    ///</summary>
   PosSidesLeft = 6;
    ///<summary>
    ///  Upper let position.
    ///</summary>
   PosUpperLeft = 7;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfPageEditorClass = interface(DNSaveableFacadeClass)
  ['{CF0A3774-31A0-525C-8638-ABB3DA0750E1}']
  { constructors } 

    ///<summary>
    ///  Constructor for PdfPageEditor class.
    ///</summary>
    {class} function init: DNPdfPageEditor; overload;
    ///<summary>
    ///  Constructor for PdfPageEditor class.
    ///</summary>
    ///  <param name="document">Document object which should be processed.</param>
    {class} function init(document: DNDocument): DNPdfPageEditor; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_SPLITVOUT: Int32;
   function __fakeFieldGet_SPLITHOUT: Int32;
   function __fakeFieldGet_SPLITVIN: Int32;
   function __fakeFieldGet_SPLITHIN: Int32;
   function __fakeFieldGet_BLINDV: Int32;
   function __fakeFieldGet_BLINDH: Int32;
   function __fakeFieldGet_INBOX: Int32;
   function __fakeFieldGet_OUTBOX: Int32;
   function __fakeFieldGet_LRWIPE: Int32;
   function __fakeFieldGet_RLWIPE: Int32;
   function __fakeFieldGet_BTWIPE: Int32;
   function __fakeFieldGet_TBWIPE: Int32;
   function __fakeFieldGet_DISSOLVE: Int32;
   function __fakeFieldGet_LRGLITTER: Int32;
   function __fakeFieldGet_TBGLITTER: Int32;
   function __fakeFieldGet_DGLITTER: Int32;

  { static fields } 

    ///<summary>  Out Vertical Split</summary>
    {class} property SPLITVOUT: Int32 read __fakeFieldGet_SPLITVOUT;
    ///<summary>  Out Horizontal Split</summary>
    {class} property SPLITHOUT: Int32 read __fakeFieldGet_SPLITHOUT;
    ///<summary>  In Vertical Split</summary>
    {class} property SPLITVIN: Int32 read __fakeFieldGet_SPLITVIN;
    ///<summary>  IN Horizontal Split</summary>
    {class} property SPLITHIN: Int32 read __fakeFieldGet_SPLITHIN;
    ///<summary>  Vertical Blinds</summary>
    {class} property BLINDV: Int32 read __fakeFieldGet_BLINDV;
    ///<summary>  Vertical Blinds</summary>
    {class} property BLINDH: Int32 read __fakeFieldGet_BLINDH;
    ///<summary>  Inward Box</summary>
    {class} property INBOX: Int32 read __fakeFieldGet_INBOX;
    ///<summary>  Outward Box</summary>
    {class} property OUTBOX: Int32 read __fakeFieldGet_OUTBOX;
    ///<summary>  Left-Right Wipe</summary>
    {class} property LRWIPE: Int32 read __fakeFieldGet_LRWIPE;
    ///<summary>  Right-Left Wipe</summary>
    {class} property RLWIPE: Int32 read __fakeFieldGet_RLWIPE;
    ///<summary>  Bottom-Top Wipe</summary>
    {class} property BTWIPE: Int32 read __fakeFieldGet_BTWIPE;
    ///<summary>  Top-Bottom Wipe</summary>
    {class} property TBWIPE: Int32 read __fakeFieldGet_TBWIPE;
    ///<summary>The old page dissolves </summary>
    {class} property DISSOLVE: Int32 read __fakeFieldGet_DISSOLVE;
    ///<summary>  Left-Right Glitter</summary>
    {class} property LRGLITTER: Int32 read __fakeFieldGet_LRGLITTER;
    ///<summary>  Top-Bottom Glitter</summary>
    {class} property TBGLITTER: Int32 read __fakeFieldGet_TBGLITTER;
    ///<summary>  Diagonal Glitter</summary>
    {class} property DGLITTER: Int32 read __fakeFieldGet_DGLITTER;

  end;

  ///<summary>
  ///  Represents a class to edit the PDF file's page, including rotating page, zooming page, moving position and changing page size.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfPageEditor')]
  DNPdfPageEditor = interface(DNSaveableFacade)
  ['{DC7C9C0F-F067-3C17-A062-310A5336A491}']
  { getters & setters } 

    function get_TransitionDuration: Int32;
    procedure set_TransitionDuration(value: Int32);
    function get_TransitionType: Int32;
    procedure set_TransitionType(value: Int32);
    function get_DisplayDuration: Int32;
    procedure set_DisplayDuration(value: Int32);
    function get_ProcessPages: TArray<Int32>;
    procedure set_ProcessPages(value: TArray<Int32>);
    function get_Rotation: Int32;
    procedure set_Rotation(value: Int32);
    function get_Zoom: Single;
    procedure set_Zoom(value: Single);
    function get_PageSize: DNPageSize;
    procedure set_PageSize(value: DNPageSize);
    function get_Alignment: DNAlignmentType;
    procedure set_Alignment(value: DNAlignmentType);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignmentType;
    procedure set_VerticalAlignment(value: DNVerticalAlignmentType);
    function get_VerticalAlignmentType: DNVerticalAlignment;
    procedure set_VerticalAlignmentType(value: DNVerticalAlignment);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Moves the origin from (0, 0) to the point that appointted.
    ///  The origin is left-bottom and the unit is point(1 inch = 72 points).
    ///</summary>
    ///  <param name="moveX">X-coordinate.</param>
    ///  <param name="moveY">Y-coordinate.</param>
    ///<example><code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("input.pdf");
    ///  editor.MovePosition(-100, 60);
    ///  editor.Save("moved.pdf");
    ///</code></example>
    procedure MovePosition(moveX: Single; moveY: Single);
    ///<summary>
    ///  Returns total number of pages.
    ///</summary>
    ///<returns>Number of pages.</returns>
    ///<example>
    ///  The following example demonstrates using of GetPages() method:
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  Console.WriteLine("Document has: " + editor.GetPages());
    ///</code></example>
    function GetPages: Int32;
    ///<summary>
    ///  Returns the page size of the specified page.
    ///</summary>
    ///  <param name="page">Page index. Document pages are numbered from 1.</param>
    ///<returns>Result is instance of PageSize. Use Width and Height properties of the returned object to get page width and height.</returns>
    ///<example>
    ///  The following example demonstrates using of GetPageSize method:
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  PageSize size = editor.GetPageSize(1);
    ///  Console.WriteLine("Size of 1st page : " + size.Width + " x " + size.Height);
    ///</code></example>
    function GetPageSize(page: Int32): DNPageSize;
    ///<summary>
    ///  Returns the rotation of specified page.
    ///</summary>
    ///  <param name="page">Page index. Document pages are numbered from 1.</param>
    ///<returns>Page rotation in degrees.</returns>
    ///<example>
    ///  The following example demonstrates how to get page rotation:
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  int rotation = editor.GetPageSize(1);
    ///  Console.WriteLine("Rotation of 1st page : " + rotation + " degrees");
    ///</code></example>
    function GetPageRotation(page: Int32): Int32;
    ///<summary>
    ///  Returns size of specified box in document.
    ///</summary>
    ///  <param name="page">Page index. Document pages are numbered from 1.</param>
    ///  <param name="pageBoxName">Box type name. Valid values are: "art", "bleed", "crop", "media", "trim".</param>
    ///<returns>Rectangle which contains requested box.</returns>
    ///<example>
    ///  The following example demonstrates how to get media box of the 1st page:
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  System.Drawing.Rectangle rect = editor.GetBoxSize(1, "media");
    ///</code></example>
    function GetPageBoxSize(page: Int32; pageBoxName: string): DDN.Aspose.Common.DNRectangle;
    ///<summary>
    ///  Saves changed document into file.
    ///</summary>
    ///  <param name="outputFile">Path to file where document will be saved.</param>
    ///<example>
    ///  The following sample demonstrates how to save changed PDF document
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  editor.Zoom = 0.5f;
    ///  editor.Save("newdocument.pdf");
    ///</code></example>
    procedure Save(outputFile: string); overload;
    ///<summary>
    ///  Saves changed document into stream.
    ///</summary>
    ///  <param name="outputStream">Stream where changed PDF document will be saved.</param>
    ///<example>
    ///  The following sample demonstrates how to save changed PDF document into stream.
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  editor.Zoom = 0.5f;
    ///  editor.Save("newdocument.pdf");
    ///</code></example>
    procedure Save(outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Apply changes made to the document pages.
    ///</summary>
    procedure ApplyChanges;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets duration of the transition effect.
    ///</summary>
    property TransitionDuration: Int32 read get_TransitionDuration write set_TransitionDuration;
    ///<summary>
    ///  Gets or sets transition style to use when moving to this page from another during a presentation.
    ///</summary>
    property TransitionType: Int32 read get_TransitionType write set_TransitionType;
    ///<summary>
    ///  Gets or sets display duration for pages.
    ///</summary>
    property DisplayDuration: Int32 read get_DisplayDuration write set_DisplayDuration;
    ///<summary>
    ///  Gets or sets the page numbers to be edited. By default, each page would be edited.
    ///</summary>
    property ProcessPages: TArray<Int32> read get_ProcessPages write set_ProcessPages;
    ///<summary>
    ///  Gets or sets the rotation of the pages, the rotation must be 0, 90, 180 or 270.
    ///  Default value is 0.
    ///</summary>
    property Rotation: Int32 read get_Rotation write set_Rotation;
    ///<summary>
    ///  Get or sets zoom coefficient. Value 1.0 corresponds to 100%.
    ///  Default value is 1.0.
    ///<example>
    ///  The following example demonstrates how to change zoom of the document pages.
    ///<code lang="C#">
    ///  PdfPageEditor editor = new PdfPageEditor();
    ///  editor.BindPdf("sample.pdf");
    ///  editor.Zoom = 0.5f;
    ///</code></example></summary>
    property Zoom: Single read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets or sets the output file's page size.
    ///</summary>
    property PageSize: DNPageSize read get_PageSize write set_PageSize;
    ///<summary>
    ///  Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
    ///</summary>
    property Alignment: DNAlignmentType read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the horizontal alignment of the original PDF content on the result page, default is AlignmentType.Left.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignmentType read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or Sets the vertical alignment of the original PDF content on the result page, default is VerticalAlignmentType.Bottom.
    ///</summary>
    property VerticalAlignmentType: DNVerticalAlignment read get_VerticalAlignmentType write set_VerticalAlignmentType;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfPageEditor = class(TDNGenericImport<DNPdfPageEditorClass, DNPdfPageEditor>)
  public const
    ///<summary>  Out Vertical Split</summary>
   SPLITVOUT = 1;
    ///<summary>  Out Horizontal Split</summary>
   SPLITHOUT = 2;
    ///<summary>  In Vertical Split</summary>
   SPLITVIN = 3;
    ///<summary>  IN Horizontal Split</summary>
   SPLITHIN = 4;
    ///<summary>  Vertical Blinds</summary>
   BLINDV = 5;
    ///<summary>  Vertical Blinds</summary>
   BLINDH = 6;
    ///<summary>  Inward Box</summary>
   INBOX = 7;
    ///<summary>  Outward Box</summary>
   OUTBOX = 8;
    ///<summary>  Left-Right Wipe</summary>
   LRWIPE = 9;
    ///<summary>  Right-Left Wipe</summary>
   RLWIPE = 10;
    ///<summary>  Bottom-Top Wipe</summary>
   BTWIPE = 11;
    ///<summary>  Top-Bottom Wipe</summary>
   TBWIPE = 12;
    ///<summary>The old page dissolves </summary>
   DISSOLVE = 13;
    ///<summary>  Left-Right Glitter</summary>
   LRGLITTER = 14;
    ///<summary>  Top-Bottom Glitter</summary>
   TBGLITTER = 15;
    ///<summary>  Diagonal Glitter</summary>
   DGLITTER = 16;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfXmpMetadataClass = interface(DNSaveableFacadeClass)
  ['{A5E3A368-8E8A-5B1B-9794-0336395F6131}']
  { constructors } 

    ///<summary>
    ///  Constructor for PdfXmpMetadata.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfXmlMetadata xmp = new PdfXmpMetadata();
    ///  xmp.BindPdf("input.pdf");
    ///</code></example>
    {class} function init: DNPdfXmpMetadata; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfXmpMetadata" />
    ///  object on base of the <paramref name="document" />
    ///  .
    ///</summary>
    ///  <param name="document">
    ///  Pdf document.
    ///</param>
    {class} function init(document: DNDocument): DNPdfXmpMetadata; overload;

  end;

  ///<summary>
  ///  Class for manipulation with XMP metadata.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfXmpMetadata')]
  DNPdfXmpMetadata = interface(DNSaveableFacade)
  ['{A36887BB-9BD8-30AE-A0FF-C78EC9F98B27}']
  { getters & setters } 

    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema>;
    function get_Values: DDN.mscorlib.DNICollection<DNXmpValue>;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(key: DNDefaultMetadataProperties): DNXmpValue;
    procedure set_Item(key: DNDefaultMetadataProperties; value: DNXmpValue);
    function get_Document: DNDocument;

  { methods } 

    ///<summary>
    ///  Registers the namespace URI.
    ///</summary>
    ///  <param name="prefix">The prefix.</param>
    ///  <param name="namespaceURI">The namespace URI.</param>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
    ///  xmp.RegisterNamespaceURI("xmp", "http://ns.adobe.com/xap/1.0/");
    ///</code></example>
    procedure RegisterNamespaceURI(prefix: string; namespaceURI: string);
    ///<summary>
    ///  Gets namespace URI by prefix.
    ///</summary>
    ///  <param name="prefix">The prefix.</param>
    ///<returns>Namespace URI.</returns>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
    ///  Console.WriteLine(xmp.GetNamespaceURIByPrefix("xmp"));
    ///</code></example>
    function GetNamespaceURIByPrefix(prefix: string): string;
    ///<summary>
    ///  Gets the prefix by namespace URI.
    ///</summary>
    ///  <param name="namespaceURI">Namespace URI.</param>
    ///<returns>The prefix value.</returns>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata("input.pdf");
    ///  Console.WriteLine(xmp.GetPrefixByNamespaceURI("http://ns.adobe.com/xap/1.0/"));
    ///</code></example>
    function GetPrefixByNamespaceURI(namespaceURI: string): string;
    ///<summary>
    ///  Adds value to XMP metadata.
    ///</summary>
    ///  <param name="key">The key name.</param>
    ///  <param name="value">Value which will be added.</param>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata();
    ///  xmp.BindPdf("input.pdf");
    ///  xmp.Add(DefaultMetadataProperties.Nickname, "name1");
    ///  xmp.Save(TestSettings.GetOutputFile("XMP_AddedValue.pdf"));
    ///</code></example>
    procedure Add(key: DNDefaultMetadataProperties; value: DNXmpValue); overload;
    ///<summary>
    ///  Adds extension field into metadata.
    ///</summary>
    ///  <param name="xmpPdfAExtensionObject">The pdf extension object to add.</param>
    ///  <param name="namespacePrefix">The prefix of schema.</param>
    ///  <param name="namespaceUri">The namespace uri of schema.</param>
    ///  <param name="schemaDescription">The optional description of schema.</param>
    procedure Add(xmpPdfAExtensionObject: DNXmpPdfAExtensionObject; namespacePrefix: string; namespaceUri: string; schemaDescription: string); overload;
    ///<summary>
    ///  Removes element with specified key.
    ///</summary>
    ///  <param name="key">Key of the element which will be deleted.</param>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata();
    ///  xmp.BindPdf("input.pdf");
    ///  xmp.Remove(DefaultMetadataProperties.Nickname);
    ///</code></example>
    procedure Remove(key: DNDefaultMetadataProperties);
    ///<summary>
    ///  Adds new element to the dictionary object.
    ///</summary>
    ///  <param name="key">Key of new element.</param>
    ///  <param name="value">Value of the element.</param>
    procedure Add(key: string; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Checks if dictionary contains the specified key.
    ///</summary>
    ///  <param name="key">Key which will be checked.</param>
    ///<returns>True - if the dictionary contains the specified key; otherwise, false.</returns>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata xmp = new PdfXmpMetadata();
    ///  xmp.BindPdf("input.pdf");
    ///  xmp.Add("xmp:Nickname", "Nickname1");
    ///  if (!xmp.Contains("xmp:Nickname"))
    ///  Console.WriteLine("Key does not exists");
    ///</code></example>
    function &Contains(key: string): Boolean; overload;
    ///<summary>
    ///  Checks if dictionary contains the specified property.
    ///</summary>
    ///  <param name="property">Property which will be checked.</param>
    ///<returns>True - if the dictionary contains the specified property; otherwise, false.</returns>
    function &Contains(&property: DNDefaultMetadataProperties): Boolean; overload;
    ///<summary>
    ///  Get the XmpMetadata of the input pdf in a xml format.
    ///</summary>
    ///<returns>The bytes of the XmpMetadata.</returns>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata pxm = new PdfXmpMetadata();
    ///  pxm.BindPdf("PdfFile.pdf");
    ///  byte[] data = pxm.GetXmpMetadata();
    ///</code></example>
    function GetXmpMetadata: TArray<Byte>; overload;
    ///<summary>
    ///  Get a part of the XmpMetadata of the input pdf according to a meta name.
    ///</summary>
    ///  <param name="name">Metadata name.</param>
    ///<returns>Bytes of metadata.</returns>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata pxm = new PdfXmpMetadata();
    ///  pxm.BindPdf("PdfFile.pdf");
    ///  byte[] data = pxm.GetXmpMetadata("dc:creator");
    ///</code></example>
    function GetXmpMetadata(name: string): TArray<Byte>; overload;
    ///<summary>
    ///  Determines does this dictionary contasins specified key.
    ///</summary>
    ///  <param name="key">Key to search in the dictionary.</param>
    ///<returns>true if key is found.</returns>
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXmpValue): Boolean;
    ///<summary>
    ///  Saves the PDF document to the specified file.
    ///</summary>
    ///  <param name="destFile">The destination file.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the PDF document to the specified stream.
    ///</summary>
    ///  <param name="destStream">The destination stream.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcFile: string); overload;
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    procedure BindPdf(srcDoc: DNDocument); overload;
    procedure Close;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets keys from the dictionary.
    ///</summary>
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    ///<summary>
    ///  Gets the dictionary of extension fields.
    ///</summary>
    property ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema> read get_ExtensionFields;
    ///<summary>
    ///  Gets the collection of values in dictionary.
    ///</summary>
    property Values: DDN.mscorlib.DNICollection<DNXmpValue> read get_Values;
    ///<summary>
    ///  Returns true is collection has fixed size.
    ///</summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  Returns true if collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Gets count if items in the collection.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfXmpMetadata pxm = new PdfXmpMetadata();
    ///  pxm.BindPdf("PdfFile.pdf");
    ///  Console.WriteLine("Count = " + pxm.Count);
    ///</code></example>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true if collection is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets synchroniztion object of the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[key: DNDefaultMetadataProperties]: DNXmpValue read get_Item write set_Item; default;
    property Document: DNDocument read get_Document;
  end;

  TDNPdfXmpMetadata = class(TDNGenericImport<DNPdfXmpMetadataClass, DNPdfXmpMetadata>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFontColorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FDBFE84B-4934-590E-A6C8-2276CFF5A680}']
  { constructors } 

    ///<summary>
    ///  Initializes color with specified color components.
    ///</summary>
    ///  <param name="r">Red component.</param>
    ///  <param name="g">Green component.</param>
    ///  <param name="b">Blue component.</param>
    {class} function init(r: Int32; g: Int32; b: Int32): DNFontColor; overload;
    ///<summary>
    ///  Initializes color.
    ///</summary>
    {class} function init: DNFontColor; overload;

  end;

  ///<summary>
  ///  Class representing color of the text.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FontColor')]
  DNFontColor = interface(DDN.mscorlib.DNObject)
  ['{1DEF4FDB-F667-3205-A17B-9223DD34555A}']
  { getters & setters } 

    function get_Green: Int32;
    procedure set_Green(value: Int32);
    function get_Red: Int32;
    procedure set_Red(value: Int32);
    function get_Blue: Int32;
    procedure set_Blue(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Green component of color.
    ///</summary>
    property Green: Int32 read get_Green write set_Green;
    ///<summary>
    ///  Red component of color.
    ///</summary>
    property Red: Int32 read get_Red write set_Red;
    ///<summary>
    ///  Blue component of color.
    ///</summary>
    property Blue: Int32 read get_Blue write set_Blue;
  end;

  TDNFontColor = class(TDNGenericImport<DNFontColorClass, DNFontColor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNForm_FormImportResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D7DF577-4F2C-5DB6-B80E-D0E6FA8E7DEA}']
  end;

  ///<summary>
  ///  Class which describes result if field import.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Form+FormImportResult')]
  DNForm_FormImportResult = interface(DDN.mscorlib.DNObject)
  ['{4320D2E7-E8EA-3061-A7C3-91FAF3B997EC}']
  { getters & setters } 

    function get_Status: DNForm_ImportStatus;
    function get_FieldName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Status of field import.
    ///</summary>
    property Status: DNForm_ImportStatus read get_Status;
    ///<summary>
    ///  Full name of the field.
    ///</summary>
    property FieldName: string read get_FieldName;
  end;

  TDNForm_FormImportResult = class(TDNGenericImport<DNForm_FormImportResultClass, DNForm_FormImportResult>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormattedTextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2E2D6EFD-0E1D-5C3E-BD7E-955E832BA9F4}']
  { constructors } 

    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    {class} function init: DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text which contained in FormattedText.</param>
    {class} function init(text: string): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content of the string.</param>
    ///  <param name="fontColor">Color of the text.</param>
    ///  <param name="fontStyle">Style of the text.</param>
    ///  <param name="encodingType">Encoding type (value of EncodingType enumeration). </param>
    ///  <param name="embedded">True if the font will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    {class} function init(text: string; fontColor: DNFontColor; fontStyle: DNFontStyle; encodingType: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initialize FormattedText.
    ///</summary>
    ///  <param name="text">Text content of the string.</param>
    ///  <param name="fontColor">Color of the text.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">True if text will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    ///  <param name="lineSpacing">Additional spacing.</param>
    {class} function init(text: string; fontColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content of the string.</param>
    ///  <param name="color">Color of the text.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">True if text will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    {class} function init(text: string; color: DDN.Aspose.Common.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text contents of the string.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    ///  <param name="lineSpacing">Additional spacing.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content of the string.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of background.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    {class} function init(text: string; textColor: DNFontColor; backColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of background.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    ///  <param name="lineSpacing">Additional spacing.</param>
    {class} function init(text: string; textColor: DNFontColor; backColor: DNFontColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content of the string.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of background.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="encoding">Encoding of the text.</param>
    ///  <param name="embedded">True if font will be embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; backColor: DDN.Aspose.Common.DNColor; textFont: DNFontStyle; encoding: DNEncodingType; embedded: Boolean; textSize: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text contents of the string.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of the background.</param>
    ///  <param name="textFont">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font is embedded.</param>
    ///  <param name="textSize">Size of the text.</param>
    ///  <param name="lineSpacing">Additional spacing.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; backColor: DDN.Aspose.Common.DNColor; textFont: DNFontStyle; textEncoding: DNEncodingType; embedded: Boolean; textSize: Single; lineSpacing: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of background.</param>
    ///  <param name="fontName">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font will be embedded.</param>
    ///  <param name="fontSize">Size of the text.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; backColor: DDN.Aspose.Common.DNColor; fontName: string; textEncoding: DNEncodingType; embedded: Boolean; fontSize: Single): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="backColor">Color of background.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; backColor: DDN.Aspose.Common.DNColor): DNFormattedText; overload;
    ///<summary>
    ///  Initializes FormattedText.
    ///</summary>
    ///  <param name="text">Text content.</param>
    ///  <param name="textColor">Color of the text.</param>
    ///  <param name="fontName">Font of the text.</param>
    ///  <param name="textEncoding">Encoding of the text.</param>
    ///  <param name="embedded">If true font will be embedded.</param>
    ///  <param name="fontSize">Size of the text.</param>
    {class} function init(text: string; textColor: DDN.Aspose.Common.DNColor; fontName: string; textEncoding: DNEncodingType; embedded: Boolean; fontSize: Single): DNFormattedText; overload;

  end;

  ///<summary>
  ///  Class which represents formatted text. Contains information about text and its color, size, style.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FormattedText')]
  DNFormattedText = interface(DDN.mscorlib.DNObject)
  ['{27AC49C4-A8D3-3F42-B92B-777333C911DA}']
  { getters & setters } 

    function get_TextHeight: Single;
    function get_TextWidth: Single;

  { methods } 

    ///<summary>
    ///  Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
    ///</summary>
    ///  <param name="newLineText">Text of new added line.</param>
    procedure AddNewLineText(newLineText: string); overload;
    ///<summary>
    ///  Adds a new line to the FormattedText object and sets the newLineText to the next line's text.
    ///</summary>
    ///  <param name="newLineText">Text of new added line.</param>
    ///  <param name="lineSpacing">Spacing of the line.</param>
    procedure AddNewLineText(newLineText: string; lineSpacing: Single); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets height of text.
    ///</summary>
    property TextHeight: Single read get_TextHeight;
    ///<summary>
    ///  Gets width of text.
    ///</summary>
    property TextWidth: Single read get_TextWidth;
  end;

  TDNFormattedText = class(TDNGenericImport<DNFormattedTextClass, DNFormattedText>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormDataConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A49078EA-5CE4-569C-91B2-4BC38607923A}']
  { constructors } 

    {class} function init: DNFormDataConverter;

  { static methods } 

    ///<summary>
    ///  Convert XML  import/export form data file into FDF format.
    ///</summary>
    ///  <param name="sourceXml">Source stream which contains XML file.</param>
    ///  <param name="destFdf">Destination source where resultant FDF file will be stored.</param>
    {class} procedure ConvertXmlToFdf(sourceXml: DDN.mscorlib.DNStream; destFdf: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Convert FDF file into XML.
    ///</summary>
    ///  <param name="sourceFdf">Stream which contains FDF to convert.</param>
    ///  <param name="destXml">Source where reuslt XML will be placed.</param>
    ///<example><code lang="C#">
    ///  src = new FileStream("test.fdf", FileMode.Open);
    ///  dest = new FileStream("converted_fdf.xml", FileMode.Create);
    ///  FormDataConverter.ConvertFdfToXml(src, dest);
    ///  src.Close();
    ///  dest.Close();
    ///</code></example>
    {class} procedure ConvertFdfToXml(sourceFdf: DDN.mscorlib.DNStream; destXml: DDN.mscorlib.DNStream);

  end;

  ///<summary>
  ///  Represents a class to convert data from one format to another format.
  ///  It can convert the data in fdf/xml/pdf/xfdf to the OLEDB/OdbcDB.
  ///  It also can convert the data in the OLEDB/OdbcDB to the data in fdf/xml/xfdf.
  ///  It can convert the fdf to the xml with "hard-named" tag.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FormDataConverter')]
  DNFormDataConverter = interface(DDN.mscorlib.DNObject)
  ['{423DE73D-DA9B-3F69-A12A-DDD64C04C518}']
  { getters & setters } 

    function get_Table: DDN.Aspose.Common.DNDataTable;
    procedure set_Table(value: DDN.Aspose.Common.DNDataTable);
    function get_CreateMissingField: Boolean;
    procedure set_CreateMissingField(value: Boolean);
    function get_ReplaceExistingTable: Boolean;
    procedure set_ReplaceExistingTable(value: Boolean);
    function get_ClearTableBeforeExport: Boolean;
    procedure set_ClearTableBeforeExport(value: Boolean);
    function get_CreateMissingTable: Boolean;
    procedure set_CreateMissingTable(value: Boolean);

  { methods } 

    ///<summary>
    ///  Convert files of strems into table.
    ///</summary>
    ///  <param name="sourceStreams">Array of source streams in specified format.</param>
    ///  <param name="sourceType">Format of data in streams. Valid values are: PDF, FDF, XFDF, XML.</param>
    ///<example><code lang="C#">
    ///  DataTable table = new DataTable();
    ///  table.Columns.Add("radiobuttonField");
    ///  table.Columns.Add("textField");
    ///  table.Columns.Add("checkboxField");
    ///  table.Columns.Add("listboxField");
    ///  table.Columns.Add("comboboxField");
    ///  FormDataConverter fc = new FormDataConverter();
    ///  Stream stream = new FileStream("PdfWithAcroForm.pdf", FileMode.Open);
    ///  fc.Table = table;
    ///  fc.ConvertToDataTable(new Stream[] { stream }, DataType.PDF);
    ///  stream.Close();
    ///</code></example>
    procedure ConvertToDataTable(sourceStreams: TArray<DDN.mscorlib.DNStream>; sourceType: DNDataType);
    ///<summary>
    ///  Imports data from table into database.
    ///</summary>
    ///  <param name="connectString">Connection string of database.</param>
    ///  <param name="dbType">Type of database connection: OLEDB or ODBC.</param>
    ///<example><code lang="C#">
    ///  FormDataConverter fc = new FormDataConverter();
    ///  DataTable table = new DataTable();
    ///  table.TableName = "test";
    ///  table.Columns.Add("TEXT_VALUE");
    ///  table.Columns.Add("INT_VALUE");
    ///  fc.Table = table;
    ///  DataRow row = table.NewRow();
    ///  row["TEXT_VALUE"] = "AAA";
    ///  row["INT_VALUE"] = "123";
    ///  table.Rows.Add(row);
    ///  string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
    ///  fc.ImportIntoDataBase(connection, DataType.OLEDB);
    ///</code></example>
    procedure ImportIntoDataBase(connectString: string; dbType: DNDataType);
    ///<summary>
    ///  Exports data from database into table.
    ///</summary>
    ///  <param name="connectString">Connection string for database.</param>
    ///  <param name="dbType">Connection type: OLEDB or ODBC.</param>
    ///<example><code lang="C#">
    ///  FormDataConverter fc = new FormDataConverter();
    ///  string connection = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=ConverterDatabase.mdb";
    ///  DataTable table = new DataTable();
    ///  table.TableName = "TestSource";
    ///  table.Columns.Add("TEXT_VALUE");
    ///  table.Columns.Add("INT_VALUE");
    ///  fc.Table = table;
    ///  fc.ExportFromDataBase(connection, DataType.OLEDB);
    ///</code></example>
    procedure ExportFromDataBase(connectString: string; dbType: DNDataType);
    ///<summary>
    ///  Convert data in table into streams.
    ///</summary>
    ///  <param name="destStream">Streams where data will be stored.</param>
    ///  <param name="destType">Type of stored data. Valid values are: XML, FDF, XFDF.</param>
    ///<example><code lang="C#">
    ///  DataTable table = new DataTable();
    ///  table.Columns.Add("radiobuttonField");
    ///  table.Columns.Add("textField");
    ///  table.Columns.Add("checkboxField");
    ///  table.Columns.Add("listboxField");
    ///  table.Columns.Add("comboboxField");
    ///  DataRow newrow = table.NewRow();
    ///  newrow["textField"] = "NEW DATA";
    ///  newrow["listboxField"] = "Item1";
    ///  newrow["comboboxField"] = "Item1";
    ///  newrow["checkboxField"] = "true";
    ///  newrow["radiobuttonField"] = "true";
    ///  table.Rows.Add(newrow);
    ///  fc.Table = table;
    ///  fc.ConvertToStreams(new Stream[] { stream }, DataType.XML);
    ///</code></example>
    procedure ConvertToStreams(destStream: TArray<DDN.mscorlib.DNStream>; destType: DNDataType);
    ///<summary>
    ///  This method is obsolete. Please use ConvertToStreams() instead.
    ///</summary>
    ///  <param name="destStream">Destination stream object.</param>
    ///  <param name="destType">Destination type value.</param>
    procedure ConverToStreams(destStream: TArray<DDN.mscorlib.DNStream>; destType: DNDataType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the middle data container, one DataTable.
    ///  It must be defined before converting data from one format to another format.
    ///  The Columns and TableName of the DataTable should be defined.
    ///  The TableName is the name of the Table in the database.
    ///  Every column's ColumnName is the qualified field name of the pdf. Every column's Caption
    ///  is the column name of table in the database. If the field name is the same as the table column
    ///  name, the Caption need not specified.
    ///</summary>
    property Table: DDN.Aspose.Common.DNDataTable read get_Table write set_Table;
    ///<summary>
    ///  ConvertToDataTable will create required field if it does not exists in Table.
    ///</summary>
    property CreateMissingField: Boolean read get_CreateMissingField write set_CreateMissingField;
    ///<summary>
    ///  ImportIntoDatabase will drop existing table and create new table if this property set to true.
    ///</summary>
    property ReplaceExistingTable: Boolean read get_ReplaceExistingTable write set_ReplaceExistingTable;
    ///<summary>
    ///  ExportFromData will clear table before data export.
    ///</summary>
    property ClearTableBeforeExport: Boolean read get_ClearTableBeforeExport write set_ClearTableBeforeExport;
    ///<summary>
    ///  ImportIntoDatabase will create table if it does not exists.
    ///</summary>
    property CreateMissingTable: Boolean read get_CreateMissingTable write set_CreateMissingTable;
  end;

  TDNFormDataConverter = class(TDNGenericImport<DNFormDataConverterClass, DNFormDataConverter>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFormFieldFacadeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0952CB34-C684-5B4E-8A54-1AF3CD27F81B}']
  { constructors } 

    {class} function init: DNFormFieldFacade;

  { static fields getter & setter } 

   function __fakeFieldGet_BorderWidthUndified: Single;
   function __fakeFieldGet_BorderWidthUndefined: Single;
   function __fakeFieldGet_BorderWidthThin: Single;
   function __fakeFieldGet_BorderWidthMedium: Single;
   function __fakeFieldGet_BorderWidthThick: Single;
   function __fakeFieldGet_BorderStyleSolid: Int32;
   function __fakeFieldGet_BorderStyleDashed: Int32;
   function __fakeFieldGet_BorderStyleBeveled: Int32;
   function __fakeFieldGet_BorderStyleInset: Int32;
   function __fakeFieldGet_BorderStyleUnderline: Int32;
   function __fakeFieldGet_BorderStyleUndefined: Int32;
   function __fakeFieldGet_AlignLeft: Int32;
   function __fakeFieldGet_AlignCenter: Int32;
   function __fakeFieldGet_AlignRight: Int32;
   function __fakeFieldGet_AlignUndefined: Int32;
   function __fakeFieldGet_AlignJustified: Int32;
   function __fakeFieldGet_AlignTop: Int32;
   function __fakeFieldGet_AlignMiddle: Int32;
   function __fakeFieldGet_AlignBottom: Int32;
   function __fakeFieldGet_CheckBoxStyleCircle: Int32;
   function __fakeFieldGet_CheckBoxStyleCheck: Int32;
   function __fakeFieldGet_CheckBoxStyleCross: Int32;
   function __fakeFieldGet_CheckBoxStyleDiamond: Int32;
   function __fakeFieldGet_CheckBoxStyleStar: Int32;
   function __fakeFieldGet_CheckBoxStyleSquare: Int32;
   function __fakeFieldGet_CheckBoxStyleUndefined: Int32;

  { static fields } 

    ///<summary>
    ///  Undefined border width.
    ///</summary>
    {class} property BorderWidthUndified: Single read __fakeFieldGet_BorderWidthUndified;
    ///<summary>
    ///  Undefined border width.
    ///</summary>
    {class} property BorderWidthUndefined: Single read __fakeFieldGet_BorderWidthUndefined;
    ///<summary>
    ///  Defines a thin border width.
    ///</summary>
    {class} property BorderWidthThin: Single read __fakeFieldGet_BorderWidthThin;
    ///<summary>
    ///  Defines a medium border width.
    ///</summary>
    {class} property BorderWidthMedium: Single read __fakeFieldGet_BorderWidthMedium;
    ///<summary>
    ///  Defines a thick border width.
    ///</summary>
    {class} property BorderWidthThick: Single read __fakeFieldGet_BorderWidthThick;
    ///<summary>
    ///  Defines a solid border style.
    ///</summary>
    {class} property BorderStyleSolid: Int32 read __fakeFieldGet_BorderStyleSolid;
    ///<summary>
    ///  Defines a dashed border style.
    ///</summary>
    {class} property BorderStyleDashed: Int32 read __fakeFieldGet_BorderStyleDashed;
    ///<summary>
    ///  Defines a beveled border style.
    ///</summary>
    {class} property BorderStyleBeveled: Int32 read __fakeFieldGet_BorderStyleBeveled;
    ///<summary>
    ///  Defines an inseted border style.
    ///</summary>
    {class} property BorderStyleInset: Int32 read __fakeFieldGet_BorderStyleInset;
    ///<summary>
    ///  Defines an underlined border style.
    ///</summary>
    {class} property BorderStyleUnderline: Int32 read __fakeFieldGet_BorderStyleUnderline;
    ///<summary>
    ///  Undefined border style.
    ///</summary>
    {class} property BorderStyleUndefined: Int32 read __fakeFieldGet_BorderStyleUndefined;
    ///<summary>
    ///  Defines aglignment to left style.
    ///</summary>
    {class} property AlignLeft: Int32 read __fakeFieldGet_AlignLeft;
    ///<summary>
    ///  Defines aglignment to center style.
    ///</summary>
    {class} property AlignCenter: Int32 read __fakeFieldGet_AlignCenter;
    ///<summary>
    ///  Defines aglignment to right style.
    ///</summary>
    {class} property AlignRight: Int32 read __fakeFieldGet_AlignRight;
    ///<summary>
    ///  Undefined aglignment style.
    ///</summary>
    {class} property AlignUndefined: Int32 read __fakeFieldGet_AlignUndefined;
    ///<summary>
    ///  Defines text justification alignment style.
    ///</summary>
    {class} property AlignJustified: Int32 read __fakeFieldGet_AlignJustified;
    ///<summary>
    ///  Defines vertical aglignment as top style.
    ///</summary>
    {class} property AlignTop: Int32 read __fakeFieldGet_AlignTop;
    ///<summary>
    ///  Defines vertical aglignment as middle style.
    ///</summary>
    {class} property AlignMiddle: Int32 read __fakeFieldGet_AlignMiddle;
    ///<summary>
    ///  Defines vertical aglignment as bottom style.
    ///</summary>
    {class} property AlignBottom: Int32 read __fakeFieldGet_AlignBottom;
    ///<summary>
    ///  Defines a circle check box style.
    ///</summary>
    {class} property CheckBoxStyleCircle: Int32 read __fakeFieldGet_CheckBoxStyleCircle;
    ///<summary>
    ///  Defines the shape of a check box field when it checked.
    ///</summary>
    {class} property CheckBoxStyleCheck: Int32 read __fakeFieldGet_CheckBoxStyleCheck;
    ///<summary>
    ///  Defines a cross check box style.
    ///</summary>
    {class} property CheckBoxStyleCross: Int32 read __fakeFieldGet_CheckBoxStyleCross;
    ///<summary>
    ///  Defines a diamond check box style.
    ///</summary>
    {class} property CheckBoxStyleDiamond: Int32 read __fakeFieldGet_CheckBoxStyleDiamond;
    ///<summary>
    ///  Defines a star check box style.
    ///</summary>
    {class} property CheckBoxStyleStar: Int32 read __fakeFieldGet_CheckBoxStyleStar;
    ///<summary>
    ///  Defines a square check box style.
    ///</summary>
    {class} property CheckBoxStyleSquare: Int32 read __fakeFieldGet_CheckBoxStyleSquare;
    ///<summary>
    ///  Defines an undefined check box style.
    ///</summary>
    {class} property CheckBoxStyleUndefined: Int32 read __fakeFieldGet_CheckBoxStyleUndefined;

  end;

  ///<summary>
  ///  Class for representing field properties.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.FormFieldFacade')]
  DNFormFieldFacade = interface(DDN.mscorlib.DNObject)
  ['{F5A93D5F-DB4F-3335-A9B3-5F0D268FC1F5}']
  { getters & setters } 

    function get_BorderColor: DDN.Aspose.Common.DNColor;
    procedure set_BorderColor(value: DDN.Aspose.Common.DNColor);
    function get_BorderStyle: Int32;
    procedure set_BorderStyle(value: Int32);
    function get_BorderWidth: Single;
    procedure set_BorderWidth(value: Single);
    function get_Font: DNFontStyle;
    procedure set_Font(value: DNFontStyle);
    function get_CustomFont: string;
    procedure set_CustomFont(value: string);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_TextColor: DDN.Aspose.Common.DNColor;
    procedure set_TextColor(value: DDN.Aspose.Common.DNColor);
    function get_TextEncoding: DNEncodingType;
    procedure set_TextEncoding(value: DNEncodingType);
    function get_Alignment: Int32;
    procedure set_Alignment(value: Int32);
    function get_Rotation: Int32;
    procedure set_Rotation(value: Int32);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_ButtonStyle: Int32;
    procedure set_ButtonStyle(value: Int32);
    function get_Box: DDN.Aspose.Common.DNRectangle;
    procedure set_Box(value: DDN.Aspose.Common.DNRectangle);
    function get_Position: TArray<Single>;
    procedure set_Position(value: TArray<Single>);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Items: TArray<string>;
    procedure set_Items(value: TArray<string>);
    function get_ExportItems: TArray<TArray<string>>;
    procedure set_ExportItems(value: TArray<TArray<string>>);
    function get_BackgroundColor: DDN.Aspose.Common.DNColor;
    procedure set_BackgroundColor(value: DDN.Aspose.Common.DNColor);
    function get_BackgroudColor: DDN.Aspose.Common.DNColor;
    procedure set_BackgroudColor(value: DDN.Aspose.Common.DNColor);

  { methods } 

    ///<summary>
    ///  Reset all visual attribtues to empty value.
    ///</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The color of a field border.
    ///</summary>
    property BorderColor: DDN.Aspose.Common.DNColor read get_BorderColor write set_BorderColor;
    ///<summary>
    ///  The style of a field border.
    ///</summary>
    property BorderStyle: Int32 read get_BorderStyle write set_BorderStyle;
    ///<summary>
    ///  The width of a field border.
    ///</summary>
    property BorderWidth: Single read get_BorderWidth write set_BorderWidth;
    ///<summary>
    ///  The font type of a field text.
    ///</summary>
    property Font: DNFontStyle read get_Font write set_Font;
    ///<summary>
    ///  Gets or sets name of the font when this is non-standart (other then 14 standard fonts).
    ///</summary>
    property CustomFont: string read get_CustomFont write set_CustomFont;
    ///<summary>
    ///  The size of a field text.
    ///</summary>
    property FontSize: Single read get_FontSize write set_FontSize;
    ///<summary>
    ///  The color of the field text.
    ///</summary>
    property TextColor: DDN.Aspose.Common.DNColor read get_TextColor write set_TextColor;
    ///<summary>
    ///  The text encoding type of the field text.
    ///</summary>
    property TextEncoding: DNEncodingType read get_TextEncoding write set_TextEncoding;
    ///<summary>
    ///  The alignment of a field text, default is left alignment.
    ///</summary>
    property Alignment: Int32 read get_Alignment write set_Alignment;
    ///<summary>
    ///  The rotation of a field text.
    ///</summary>
    property Rotation: Int32 read get_Rotation write set_Rotation;
    ///<summary>
    ///  The normal caption of form field.
    ///</summary>
    property Caption: string read get_Caption write set_Caption;
    ///<summary>
    ///  The style of check box or radio box field, defined by FormFieldFacade.CheckBoxStyle*.
    ///</summary>
    property ButtonStyle: Int32 read get_ButtonStyle write set_ButtonStyle;
    ///<summary>
    ///  A rectangle object holding field's location.
    ///</summary>
    property Box: DDN.Aspose.Common.DNRectangle read get_Box write set_Box;
    ///<summary>
    ///  A rectangle object holding field's location.
    ///</summary>
    property Position: TArray<Single> read get_Position write set_Position;
    ///<summary>
    ///  An integer value holding the number of page on which field locates.
    ///</summary>
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    ///<summary>
    ///  An array of string, each representing an option of a combo box/list/radio box field.
    ///</summary>
    property Items: TArray<string> read get_Items write set_Items;
    ///<summary> The options for adding a list/combo/radio box</summary>
    property ExportItems: TArray<TArray<string>> read get_ExportItems write set_ExportItems;
    ///<summary>
    ///  The color of a field background, default is white.
    ///</summary>
    property BackgroundColor: DDN.Aspose.Common.DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Obsolete property. Use BackgroundColor.
    ///</summary>
    property BackgroudColor: DDN.Aspose.Common.DNColor read get_BackgroudColor write set_BackgroudColor;
  end;

  TDNFormFieldFacade = class(TDNGenericImport<DNFormFieldFacadeClass, DNFormFieldFacade>)
  public const
    ///<summary>
    ///  Undefined border width.
    ///</summary>
   BorderWidthUndified = -1;
    ///<summary>
    ///  Undefined border width.
    ///</summary>
   BorderWidthUndefined = -1;
    ///<summary>
    ///  Defines a thin border width.
    ///</summary>
   BorderWidthThin = 1;
    ///<summary>
    ///  Defines a medium border width.
    ///</summary>
   BorderWidthMedium = 2;
    ///<summary>
    ///  Defines a thick border width.
    ///</summary>
   BorderWidthThick = 3;
    ///<summary>
    ///  Defines a solid border style.
    ///</summary>
   BorderStyleSolid = 0;
    ///<summary>
    ///  Defines a dashed border style.
    ///</summary>
   BorderStyleDashed = 1;
    ///<summary>
    ///  Defines a beveled border style.
    ///</summary>
   BorderStyleBeveled = 2;
    ///<summary>
    ///  Defines an inseted border style.
    ///</summary>
   BorderStyleInset = 3;
    ///<summary>
    ///  Defines an underlined border style.
    ///</summary>
   BorderStyleUnderline = 4;
    ///<summary>
    ///  Undefined border style.
    ///</summary>
   BorderStyleUndefined = 5;
    ///<summary>
    ///  Defines aglignment to left style.
    ///</summary>
   AlignLeft = 0;
    ///<summary>
    ///  Defines aglignment to center style.
    ///</summary>
   AlignCenter = 1;
    ///<summary>
    ///  Defines aglignment to right style.
    ///</summary>
   AlignRight = 2;
    ///<summary>
    ///  Undefined aglignment style.
    ///</summary>
   AlignUndefined = 3;
    ///<summary>
    ///  Defines text justification alignment style.
    ///</summary>
   AlignJustified = 4;
    ///<summary>
    ///  Defines vertical aglignment as top style.
    ///</summary>
   AlignTop = 0;
    ///<summary>
    ///  Defines vertical aglignment as middle style.
    ///</summary>
   AlignMiddle = 1;
    ///<summary>
    ///  Defines vertical aglignment as bottom style.
    ///</summary>
   AlignBottom = 2;
    ///<summary>
    ///  Defines a circle check box style.
    ///</summary>
   CheckBoxStyleCircle = 108;
    ///<summary>
    ///  Defines the shape of a check box field when it checked.
    ///</summary>
   CheckBoxStyleCheck = 52;
    ///<summary>
    ///  Defines a cross check box style.
    ///</summary>
   CheckBoxStyleCross = 56;
    ///<summary>
    ///  Defines a diamond check box style.
    ///</summary>
   CheckBoxStyleDiamond = 117;
    ///<summary>
    ///  Defines a star check box style.
    ///</summary>
   CheckBoxStyleStar = 72;
    ///<summary>
    ///  Defines a square check box style.
    ///</summary>
   CheckBoxStyleSquare = 110;
    ///<summary>
    ///  Defines an undefined check box style.
    ///</summary>
   CheckBoxStyleUndefined = 32;
  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNLineInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C1A5620B-931C-5665-8130-E8D4538E7204}']
  { constructors } 

    {class} function init: DNLineInfo;

  end;

  ///<summary>
  ///  Represents the information of line.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.LineInfo')]
  DNLineInfo = interface(DDN.mscorlib.DNObject)
  ['{36635532-6EDA-3C2C-A5EA-FC03CF15FB72}']
  { getters & setters } 

    function get_VerticeCoordinate: TArray<Single>;
    procedure set_VerticeCoordinate(value: TArray<Single>);
    function get_LineColor: DDN.Aspose.Common.DNColor;
    procedure set_LineColor(value: DDN.Aspose.Common.DNColor);
    function get_LineWidth: Int32;
    procedure set_LineWidth(value: Int32);
    function get_Visibility: Boolean;
    procedure set_Visibility(value: Boolean);
    function get_LineDashPattern: TArray<Int32>;
    procedure set_LineDashPattern(value: TArray<Int32>);
    function get_BorderStyle: Int32;
    procedure set_BorderStyle(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets an array of numbers representing the alternating horizontal and vertical,coordinates, respectively, of each vertex.
    ///</summary>
    property VerticeCoordinate: TArray<Single> read get_VerticeCoordinate write set_VerticeCoordinate;
    ///<summary>
    ///  Gets or sets the color of a line.
    ///</summary>
    property LineColor: DDN.Aspose.Common.DNColor read get_LineColor write set_LineColor;
    ///<summary>
    ///  Gets or sets the width of a line.
    ///</summary>
    property LineWidth: Int32 read get_LineWidth write set_LineWidth;
    ///<summary>
    ///  Gets or sets the visibility of a line.
    ///</summary>
    property Visibility: Boolean read get_Visibility write set_Visibility;
    ///<summary>
    ///  Gets or sets the dash pattern of a line.
    ///</summary>
    property LineDashPattern: TArray<Int32> read get_LineDashPattern write set_LineDashPattern;
    ///<summary>
    ///  Gets or sets the border style of a line, 0 represents solid, 1 represents dashed, 2 represents beleved, 3 represents insert, 4 represents underline.
    ///</summary>
    property BorderStyle: Int32 read get_BorderStyle write set_BorderStyle;
  end;

  TDNLineInfo = class(TDNGenericImport<DNLineInfoClass, DNLineInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9957C633-3E42-51B2-AD26-529C3E84A106}']
  { static getter & setter } 

    procedure set_ConvertTo(value: DNPdfFormat);

  { constructors } 

    {class} function init: DNPdfFileEditor;

  { static propertys } 

    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    {class} property ConvertTo: DNPdfFormat write set_ConvertTo;
  end;

  ///<summary>
  ///  Implements operations with PDF file: concatenation, splitting, extracting pages, making booklet, etc.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor')]
  DNPdfFileEditor = interface(DDN.mscorlib.DNObject)
  ['{45BEB9CB-EE6E-302B-9151-CA60A56756EA}']
  { getters & setters } 

    function get_ConversionLog: string;
    function get_MergeDuplicateLayers: Boolean;
    procedure set_MergeDuplicateLayers(value: Boolean);
    function get_CopyOutlines: Boolean;
    procedure set_CopyOutlines(value: Boolean);
    function get_CopyLogicalStructure: Boolean;
    procedure set_CopyLogicalStructure(value: Boolean);
    function get_MergeDuplicateOutlines: Boolean;
    procedure set_MergeDuplicateOutlines(value: Boolean);
    function get_PreserveUserRights: Boolean;
    procedure set_PreserveUserRights(value: Boolean);
    function get_IncrementalUpdates: Boolean;
    procedure set_IncrementalUpdates(value: Boolean);
    function get_OptimizeSize: Boolean;
    procedure set_OptimizeSize(value: Boolean);
    function get_CorruptedItems: TArray<DNPdfFileEditor_CorruptedItem>;
    function get_CorruptedFileAction: DNPdfFileEditor_ConcatenateCorruptedFileAction;
    procedure set_CorruptedFileAction(value: DNPdfFileEditor_ConcatenateCorruptedFileAction);
    function get_OwnerPassword: string;
    procedure set_OwnerPassword(value: string);
    function get_AllowConcatenateExceptions: Boolean;
    procedure set_AllowConcatenateExceptions(value: Boolean);
    procedure set_ConvertTo(value: DNPdfFormat);
    function get_CloseConcatenatedStreams: Boolean;
    procedure set_CloseConcatenatedStreams(value: Boolean);
    function get_UniqueSuffix: string;
    procedure set_UniqueSuffix(value: string);
    function get_KeepActions: Boolean;
    procedure set_KeepActions(value: Boolean);
    function get_KeepFieldsUnique: Boolean;
    procedure set_KeepFieldsUnique(value: Boolean);
    function get_UseDiskBuffer: Boolean;
    procedure set_UseDiskBuffer(value: Boolean);
    function get_ConcatenationPacketSize: Int32;
    procedure set_ConcatenationPacketSize(value: Int32);
    function get_LastException: DDN.mscorlib.DNException;
    function get_ContentDisposition: DNContentDisposition;
    procedure set_ContentDisposition(value: DNContentDisposition);
    function get_SaveOptions: DNSaveOptions;
    procedure set_SaveOptions(value: DNSaveOptions);
    function get_AttachmentName: string;
    procedure set_AttachmentName(value: string);

  { methods } 

    ///<summary>
    ///  Concatenates files and saves reslt into HttpResposnse object.
    ///</summary>
    ///  <param name="inputFiles">Array of files to concatenate.</param>
    ///  <param name="response">Response object.</param>
    ///<returns>true if concatenation was successful.</returns>
    function Concatenate(inputFiles: TArray<string>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Concatenates files and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Streams array which contain files to concatenate.</param>
    ///  <param name="response">Response object/</param>
    ///<returns>true if operation was succeeded.</returns>
    function Concatenate(inputStream: TArray<DDN.mscorlib.DNStream>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Appends documents to source document and saves result into response object.
    ///</summary>
    ///  <param name="inputStream">Stream which contains source document.</param>
    ///  <param name="portStreams">Array of streams with documents to be appended.</param>
    ///  <param name="startPage">Start page of appended page.</param>
    ///  <param name="endPage">End page of appended pages.</param>
    ///  <param name="response">Response object where document will be saved.</param>
    ///<returns>true if operation was successful.</returns>
    function Append(inputStream: DDN.mscorlib.DNStream; portStreams: TArray<DDN.mscorlib.DNStream>; startPage: Int32; endPage: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Appends documents to source document and saves result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Name of file containing source document.</param>
    ///  <param name="portFiles">Array of file names containing appended documents</param>
    ///  <param name="startPage">Start page of appended pages.</param>
    ///  <param name="endPage">End page of appended pages.</param>
    ///  <param name="response">Response object where document will be saved.</param>
    ///<returns>true if operation was succeeded.</returns>
    function Append(inputFile: string; portFiles: TArray<string>; startPage: Int32; endPage: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Inserts contents of file into source file and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Source file name.</param>
    ///  <param name="insertLocation">Page number where second file will be inserted.</param>
    ///  <param name="portFile">Path to file which will be inserted.</param>
    ///  <param name="pageNumber">Array of page numbers in source file wihich will be inserted.</param>
    ///  <param name="response">Response object where result will be stored.</param>
    ///<returns>true of inserting was successful.</returns>
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Inserts document into other document and stores result into response object.
    ///</summary>
    ///  <param name="inputStream">Stream with source document</param>
    ///  <param name="insertLocation">Location where other document will be inserted.</param>
    ///  <param name="portStream">Document to be inserted.</param>
    ///  <param name="pageNumber">Array of page numbers in second document  which will be inserted.</param>
    ///  <param name="response">Response object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Deletes specified pages from document and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Path of source file.</param>
    ///  <param name="pageNumber">Array of page numbers which must be deleted.</param>
    ///  <param name="response">Response object where result document will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function Delete(inputFile: string; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Deletes specified pages from document and saves result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Source document stream.</param>
    ///  <param name="pageNumber">Array of page numbers which will be deleted. </param>
    ///  <param name="response">HttpResponse object</param>
    ///<returns>True if operation succeded.</returns>
    function Delete(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Extracts specified pages form source file and stores result into  HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Stream of source document.</param>
    ///  <param name="pageNumber">Array of page numbers which will be extracted.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function Extract(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Extracts specified pages from source file and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Source file path.</param>
    ///  <param name="pageNumber">Array of page numbers which will be extracted.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>true if pages were extracted successfully.</returns>
    function Extract(inputFile: string; pageNumber: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Splits document from first page to location and saves result into HttpResponse objects.
    ///</summary>
    ///  <param name="inputFile">Source file name.</param>
    ///  <param name="location">Split point.</param>
    ///  <param name="response">HttpResponse objects.</param>
    ///<returns>True if operation was succeeded.</returns>
    function SplitFromFirst(inputFile: string; location: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Splits document from start to specified location and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Stream of source document.</param>
    ///  <param name="location">The splitting point.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function SplitFromFirst(inputStream: DDN.mscorlib.DNStream; location: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Splits from specified location, and saves the rear part into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Source document stream.</param>
    ///  <param name="location">Split point.</param>
    ///  <param name="response">HttpResponse object.</param>
    ///<returns>true if splitting was successful.</returns>
    function SplitToEnd(inputStream: DDN.mscorlib.DNStream; location: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Splits from specified location, and saves the rear part into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">source file name.</param>
    ///  <param name="location">Split point.</param>
    ///  <param name="response">HttpResponse objects.</param>
    ///<returns>True if operation was succeeded.</returns>
    function SplitToEnd(inputFile: string; location: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes booklet from source file and stores result into HttpResponse objects.
    ///</summary>
    ///  <param name="inputFile">Source file path.</param>
    ///  <param name="pageSize">Desired page size.</param>
    ///  <param name="leftPages">Aray of page numbers to be placed in left.</param>
    ///  <param name="rightPages">Array of page numbers to be placed in right.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeBooklet(inputFile: string; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Make booklet from PDF file and stores it into HttpResponse.
    ///</summary>
    ///  <param name="inputStream">Input document stream.</param>
    ///  <param name="pageSize">Desired page size.</param>
    ///  <param name="leftPages">Array of page numbers which will be placed in left.</param>
    ///  <param name="rightPages">Array of page numbers which will b eplaced in right.</param>
    ///  <param name="response">HttpResponse object.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes booklet from source file and stores result into HttpResponse objects.
    ///</summary>
    ///  <param name="inputFile">Source file path.</param>
    ///  <param name="pageSize">Desired page size in output file.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation is succeeded.</returns>
    function MakeBooklet(inputFile: string; pageSize: DNPageSize; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes booklet from source file and stores result into HttpResponse.
    ///</summary>
    ///  <param name="inputStream">Input document stream.</param>
    ///  <param name="pageSize">Desired page size in output file.</param>
    ///  <param name="response">Respose object where resut will be saved.</param>
    ///<returns>true if booklet was built successfully.</returns>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes N-up document and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputStream">Stream of source document.</param>
    ///  <param name="x">Number of columns.</param>
    ///  <param name="y">Number of rows.</param>
    ///  <param name="pageSize">Page size in result file.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; pageSize: DNPageSize; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes N-up document and stores result into HttpResponse object.
    ///</summary>
    ///  <param name="inputFile">Path to source file.</param>
    ///  <param name="x">Number of columns.</param>
    ///  <param name="y">Number of rows.</param>
    ///  <param name="pageSize">Page size in result file.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeNUp(inputFile: string; x: Int32; y: Int32; pageSize: DNPageSize; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes N-up document and stores result into HttpResponse.
    ///</summary>
    ///  <param name="inputFile">Source file name.</param>
    ///  <param name="x">Number of columns.</param>
    ///  <param name="y">Number of rows.</param>
    ///  <param name="response">HttpResponse object where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeNUp(inputFile: string; x: Int32; y: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Makes N-up document and stores result into HttpResponse.
    ///</summary>
    ///  <param name="inputStream">Stream of input document.</param>
    ///  <param name="x">Number of columns.</param>
    ///  <param name="y">Number of rows.</param>
    ///  <param name="response">HttpResponse where result will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpResponse object.
    ///</summary>
    ///  <param name="source">Path to source file.</param>
    ///  <param name="pages">Array of pages to be resized.</param>
    ///  <param name="parameters">Resize parameters.</param>
    ///  <param name="response">HttpResponse object where result is saved.</param>
    ///<returns>True if operation was succeeded.</returns>
    function ResizeContents(source: string; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Resizes contents of pages in document. If page is shrinked blank margins are added around the page.Result is stored into HttpResponse object.
    ///</summary>
    ///  <param name="source">Stream of source file.</param>
    ///  <param name="pages">Array of pages to be resized.</param>
    ///  <param name="parameters">Resize parameters.</param>
    ///  <param name="response">HttpResponse object where result is saved.</param>
    ///<returns>True if operation was succeeded.</returns>
    function ResizeContents(source: DDN.mscorlib.DNStream; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters; response: DDN.Aspose.Common.DNHttpResponse): Boolean; overload;
    ///<summary>
    ///  Adds page breaks into document pages.
    ///</summary>
    ///  <param name="src">Source document.</param>
    ///  <param name="dest">Destination document.</param>
    ///  <param name="pageBreaks">Array of PageBreak objects which describe places of page breaks.</param>
    procedure AddPageBreak(src: DNDocument; dest: DNDocument; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    ///<summary>
    ///  Adds page breaks into document pages.
    ///</summary>
    ///  <param name="src">Path to source document.</param>
    ///  <param name="dest">Path to destination document.</param>
    ///  <param name="pageBreaks">Array of PageBreak object describing pages and places where page break will be added.</param>
    procedure AddPageBreak(src: string; dest: string; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    ///<summary>
    ///  Adds page breaks into document pages.
    ///</summary>
    ///  <param name="src">Source which contains source document.</param>
    ///  <param name="dest">Source where destination document will be saved.</param>
    ///  <param name="pageBreaks">Array of PageBreak object describing pages and places where page break will be added.</param>
    procedure AddPageBreak(src: DDN.mscorlib.DNStream; dest: DDN.mscorlib.DNStream; pageBreaks: TArray<DNPdfFileEditor_PageBreak>); overload;
    ///<summary> Makes N-Up document from the two input PDF streams to outputStream.
    ///</summary>
    ///  <param name="firstInputStream">first input stream.
    ///</param>
    ///  <param name="secondInputStream">second input stream.
    ///</param>
    ///  <param name="outputStream">Output pdf stream.
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream input1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream input2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream output = new FileStream("output.pdf");
    ///  pfe.MakeNUp(input1, input2, output);
    ///</code></example>
    function MakeNUp(firstInputStream: DDN.mscorlib.DNStream; secondInputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary> Makes N-Up document from the multi input PDF files to outputFile.
    ///  Each page of outputFile will contain multi pages, which are combination with pages
    ///  in the input files of the same page number. The multi pages piled up horizontally
    ///  if isSidewise is true and piled up vertically if isSidewise is false.
    ///</summary>
    ///  <param name="inputFiles">Input Pdf files.</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///  <param name="isSidewise">Piled up way, true for horizontally and flase for vertically.</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeNUp(new string[] { "input1.pdf", "input2.pdf", "input3.pdf" }, "output.pdf", false);
    ///</code></example>
    function MakeNUp(inputFiles: TArray<string>; outputFile: string; isSidewise: Boolean): Boolean; overload;
    ///<summary> Makes N-Up document from the multi input PDF streams to outputStream.
    ///  Each page of outputStream will contain multi pages, which are combination with pages
    ///  in the input streams of the same page number. The multi-pages piled up horizontally
    ///  if isSidewise is true and piled up vertically if isSidewise is false.
    ///</summary>
    ///  <param name="inputStreams">Input Pdf streams.</param>
    ///  <param name="outputStream">Output pdf stream.
    ///  <param name="isSidewise">Piled up way, true for horizontally and flase for vertically</param>
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream stream1 = new FileStream("input1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream2 = new FileStream("input2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream3 = new FileStream("input3.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream output = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeNUp(new Stream[] { stream1, stream2, stream3 }, output, false);
    ///</code></example>
    function MakeNUp(inputStreams: TArray<DDN.mscorlib.DNStream>; outputStream: DDN.mscorlib.DNStream; isSidewise: Boolean): Boolean; overload;
    ///<summary> Makes N-Up document from the input file to outputFile.
    ///</summary>
    ///  <param name="inputFile">Input pdf file path and name.
    ///</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///  <param name="x">Number of columns.
    ///</param>
    ///  <param name="y">Number of rows.
    ///</param>
    ///  <param name="pageSize">The page size of the output pdf file.
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeNUp("input.pdf", "output.pdf", 3, 3, PageSize.A4);
    ///</code></example>
    function MakeNUp(inputFile: string; outputFile: string; x: Int32; y: Int32; pageSize: DNPageSize): Boolean; overload;
    ///<summary>
    ///  Splits the PDF file into single-page documents.
    ///</summary>
    ///  <param name="inputFile">Input PDF file name.</param>
    ///<returns>Output PDF streams, each stream buffers a single-page PDF document.</returns>
    function SplitToPages(inputFile: string): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    ///<summary>
    ///  Splits the Pdf file into single-page documents.
    ///</summary>
    ///  <param name="inputStream">Input Pdf stream.</param>
    ///<returns>Array of memory streams which contain pages of the document.</returns>
    function SplitToPages(inputStream: DDN.mscorlib.DNStream): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    ///<summary>
    ///  Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
    ///</summary>
    ///  <param name="inputFile">Input file name.</param>
    ///  <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    procedure SplitToPages(inputFile: string; fileNameTemplate: string); overload;
    ///<summary>
    ///  Split the Pdf file into single-page documents and saves it into specified path. Path is specifield by field name temaplate.
    ///</summary>
    ///  <param name="inputStream">Stream of the soruce document.</param>
    ///  <param name="fileNameTemplate">Template of resultant file name. Must contain %NUM% which is replaced with page number. For example, if c:/dir/page%NUM%.pdf is specified, resultant files will have the following names: c:/dir/page1.pdf, c:/dir/page2.pdf etc.</param>
    procedure SplitToPages(inputStream: DDN.mscorlib.DNStream; fileNameTemplate: string); overload;
    ///<summary>
    ///  Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
    ///</summary>
    ///  <param name="inputFile">Input PDF file.</param>
    ///  <param name="numberOfPage">Array which contains array of double elements, which is start and end pages of document.</param>
    ///<returns>Output PDF streams, each stream buffers a PDF document.</returns>
    function SplitToBulks(inputFile: string; numberOfPage: TArray<TArray<Int32>>): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    ///<summary>
    ///  Splits the Pdf file into several documents.The documents can be single-page or multi-pages.
    ///</summary>
    ///  <param name="inputStream">Input PDF stream.</param>
    ///  <param name="numberOfPage">The start page and the end page of each document.</param>
    ///<returns>Output PDF streams, each stream buffers a PDF document.</returns>
    function SplitToBulks(inputStream: DDN.mscorlib.DNStream; numberOfPage: TArray<TArray<Int32>>): TArray<DDN.mscorlib.DNMemoryStream>; overload;
    ///<summary>
    ///  Resizes contents of pages of the document.
    ///</summary>
    ///  <param name="source">Stream with source document.</param>
    ///  <param name="destination">Stream with the destination document.</param>
    ///  <param name="pages">Array of page indexes.</param>
    ///  <param name="parameters">Resize parameters.</param>
    ///<returns>Returns true if success.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream src = new Stream("input.pdf", FileMode.Open);
    ///  Stream dest = new Stream("output.pdf", FileMode.Create);
    ///  PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
    ///  //left margin = 10% of page width
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
    ///  null,
    ///  //right margin is 10% of page
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //top margin = 10% of height
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents height is calculated automatically (similar to width)
    ///  null,
    ///  //bottom margin is 10%
    ///  PdfFileEditor.ContentsResizeValue.Percents(10)
    ///  );
    ///  fileEditor.ResizeContents(src, dest, new int[] { 1, 2,.3}, parameters);
    ///  dest.Close();
    ///</code></example>
    function ResizeContents(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters): Boolean; overload;
    ///<summary>
    ///  Resizes contents of document pages.
    ///  Shrinks contents of page and adds margins.
    ///  New size of contents is specified in default space units.
    ///</summary>
    ///  <param name="source">Stream which contains source document.</param>
    ///  <param name="destination">Stream where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="newWidth">New width of page contents in default space units.</param>
    ///  <param name="newHeight">New height of page contents in default space units.</param>
    ///<returns>True if resize was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream src = new Stream("input.pdf", FileMode.Open);
    ///  Stream dest = new Stream("output.pdf", FileMode.Create);
    ///  fileEditor.ResizeContents(src, dest,
    ///  //resize all pages of document
    ///  null,
    ///  //new contents width = 200
    ///  200,
    ///  //new contents height = 300
    ///  300);
    ///  // rest area of page will be empty
    ///</code></example>
    function ResizeContents(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    ///<summary>
    ///  Resizes contents of document pages.
    ///  Shrinks contents of page and adds margins.
    ///  New contents size is specified in percents.
    ///</summary>
    ///  <param name="source">Stream which contains source document.</param>
    ///  <param name="destination">Stream where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="newWidth">New width of page contents in percents.</param>
    ///  <param name="newHeight">New height of page contents in percetns.</param>
    ///<returns>true if resized sucessfully.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream src = new Stream("input.pdf", FileMode.Open);
    ///  Stream dest = new Stream("output.pdf", FileMode.Create);
    ///  fileEditor.ResizePct(src, dest,
    ///  //resize all pages of document
    ///  null,
    ///  //new contents width = 60% of initial size
    ///  60,
    ///  //new contents height = 60% of initial size
    ///  60);
    ///  // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
    ///  // The same for top and bottom margins.
    ///</code></example>
    function ResizeContentsPct(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    ///<summary>
    ///  Resizes page contents and add specifed margins.
    ///  Margins are specified in default space units.
    ///</summary>
    ///  <param name="source">Stream which contains source document.</param>
    ///  <param name="destination">Stream where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="leftMargin">Left margin.</param>
    ///  <param name="rightMargin">Right margin.</param>
    ///  <param name="topMargin">Top margin.</param>
    ///  <param name="bottomMargin">Bottom margin.</param>
    ///<returns>true if operation was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream src = new Stream("input.pdf", FileMode.Open);
    ///  Stream dest = new Stream("output.pdf", FileMode.Create);
    ///  fileEditor.AddMargins(src, dest,
    ///  //process pages 1, 2, 3
    ///  new int[] { 1, 2, 3},
    ///  //left margin is 10 units
    ///  10,
    ///  //right margin is 5 units
    ///  5,
    ///  //top margin is 5 units
    ///  5,
    ///  //bottom margin is 5 units
    ///  5);
    ///  dest.Close();
    ///</code></example>
    function AddMargins(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    ///<summary>
    ///  Resizes page contents and add specified margins.
    ///  Margins are specified in percents of intitial page size.
    ///</summary>
    ///  <param name="source">Stream which contains source document.</param>
    ///  <param name="destination">Stream where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="leftMargin">Left margin in percents of initial page size.</param>
    ///  <param name="rightMargin">Right margin in percents of initial page size.</param>
    ///  <param name="topMargin">Top margin in percents of initial page size.</param>
    ///  <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
    ///<returns>true if action was performed successfully.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream src = new Stream("input.pdf", FileMode.Open);
    ///  Stream dest = new Stream("output.pdf", FileMode.Create);
    ///  fileEditor.AddMarginsPct(src, dest,
    ///  //process pages 1, 2, 3
    ///  new int[] { 1, 2, 3},
    ///  //left margin is 15% of page width
    ///  15,
    ///  //right margin is 10% of page width
    ///  10,
    ///  //top margin is 20% of page width
    ///  20,
    ///  //bottom margin is 5% of page width
    ///  5);
    ///  dest.Close();
    ///</code></example>
    function AddMarginsPct(source: DDN.mscorlib.DNStream; destination: DDN.mscorlib.DNStream; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    ///<summary>
    ///  Resizes contents of document pages.
    ///  Shrinks contents of page and adds margins.
    ///  New size of contents is specified in default space units.
    ///</summary>
    ///  <param name="source">Path to source document.</param>
    ///  <param name="destination">Path where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="newWidth">New width of page contents in default space units.</param>
    ///  <param name="newHeight">New height of page contents in default space units.</param>
    ///<returns>true if resize was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.ResizeContents("input.pdf", "output.pdf",
    ///  //resize all pages of document
    ///  null,
    ///  //new contents width = 200
    ///  200,
    ///  //new contents height = 300
    ///  300);
    ///  // rest area of page will be empty
    ///</code></example>
    function ResizeContents(source: string; destination: string; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    ///<summary>
    ///  Resizes contents of document pages.
    ///  Shrinks contents of page and adds margins.
    ///  New contents size is specified in percents.
    ///</summary>
    ///  <param name="source">Path to source document.</param>
    ///  <param name="destination">Path where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="newWidth">New width of page contents in percents.</param>
    ///  <param name="newHeight">New height of page contents in percetns.</param>
    ///<returns>true if resize was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.ResizePct("input.pdf", "output.pdf",
    ///  //resize all pages of document
    ///  null,
    ///  //new contents width = 60% of initial size
    ///  60,
    ///  //new contents height = 60% of initial size
    ///  60);
    ///  // Rest area of page will be empty (page margins).  Size of left and right margins is (100% - 60%) / 2 = 20%
    ///  // The same for top and bottom margins.
    ///</code></example>
    function ResizeContentsPct(source: string; destination: string; pages: TArray<Int32>; newWidth: Double; newHeight: Double): Boolean; overload;
    ///<summary>
    ///  Resizes page contents and add specifed margins.
    ///  Margins are specified in default space units.
    ///</summary>
    ///  <param name="source">Path to source document.</param>
    ///  <param name="destination">Path where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="leftMargin">Left margin.</param>
    ///  <param name="rightMargin">Right margin.</param>
    ///  <param name="topMargin">Top margin.</param>
    ///  <param name="bottomMargin">Bottom margin.</param>
    ///<returns>true if resize was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.AddMargins("input.pdf", "output.pdf",
    ///  //process pages 1, 2, 3
    ///  new int[] { 1, 2, 3},
    ///  //left margin is 10 units
    ///  10,
    ///  //right margin is 5 units
    ///  5,
    ///  //top margin is 5 units
    ///  5,
    ///  //bottom margin is 5 units
    ///  5);
    ///</code></example>
    function AddMargins(source: string; destination: string; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    ///<summary>
    ///  Resizes page contents and add specified margins.
    ///  Margins are specified in percents of intitial page size.
    ///</summary>
    ///  <param name="source">Path to source document.</param>
    ///  <param name="destination">Path where resultant document will be saved.</param>
    ///  <param name="pages">Array of page indexes. If null then all document pages will be processed.</param>
    ///  <param name="leftMargin">Left margin in percents of initial page size.</param>
    ///  <param name="rightMargin">Right margin in percents of initial page size.</param>
    ///  <param name="topMargin">Top margin in percents of initial page size.</param>
    ///  <param name="bottomMargin">Bottom margin in percents of initial page size. </param>
    ///<returns>true if resize was successful</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.AddMarginsPct("input.pdf", "output.pdf",
    ///  //process pages 1, 2, 3
    ///  new int[] { 1, 2, 3},
    ///  //left margin is 15% of page width
    ///  15,
    ///  //right margin is 10% of page width
    ///  10,
    ///  //top margin is 20% of page width
    ///  20,
    ///  //bottom margin is 5% of page width
    ///  5);
    ///</code></example>
    function AddMarginsPct(source: string; destination: string; pages: TArray<Int32>; leftMargin: Double; rightMargin: Double; topMargin: Double; bottomMargin: Double): Boolean; overload;
    ///<summary>
    ///  Resizes contents of pages in document. If page is shrinked blank margins are added around the page.
    ///</summary>
    ///  <param name="source">Source document path.</param>
    ///  <param name="destination">Destination document path.</param>
    ///  <param name="pages">Array of page indexes (page index starts from 1).</param>
    ///  <param name="parameters">Parameters of page resize.</param>
    ///<returns>trure if resize was successful.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
    ///  //left margin = 10% of page width
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
    ///  null,
    ///  //right margin is 10% of page
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //top margin = 10% of height
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents height is calculated automatically (similar to width)
    ///  null,
    ///  //bottom margin is 10%
    ///  PdfFileEditor.ContentsResizeValue.Percents(10)
    ///  );
    ///  fileEditor.ResizeContents("input.pdf", "output.pdf", new int[] { 1, 2,.3}, parameters);
    ///</code></example>
    function ResizeContents(source: string; destination: string; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters): Boolean; overload;
    ///<summary>
    ///  Resizes pages of document. Blank margins are added around of shrinked page.
    ///</summary>
    ///  <param name="source">Source document.</param>
    ///  <param name="pages">List of page indexes.</param>
    ///  <param name="parameters">Resize parameters.</param>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Document doc = new Document("input.pdf");
    ///  PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
    ///  //left margin = 10% of page width
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
    ///  null,
    ///  //right margin is 10% of page
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //top margin = 10% of height
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents height is calculated automatically (similar to width)
    ///  null,
    ///  //bottom margin is 10%
    ///  PdfFileEditor.ContentsResizeValue.Percents(10)
    ///  );
    ///  fileEditor.ResizeContents(doc, new int[] { 1, 2,.3}, parameters);
    ///  doc.Save("output.pdf");
    ///</code></example>
    procedure ResizeContents(source: DNDocument; pages: TArray<Int32>; parameters: DNPdfFileEditor_ContentsResizeParameters); overload;
    ///<summary>
    ///  Resizes pages of document. Blank margins are added around of shrinked page.
    ///</summary>
    ///  <param name="source">Source document.</param>
    ///  <param name="parameters">Resize parameters.</param>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Document doc = new Document("input.pdf");
    ///  PdfFileEditor.ContentsResizeParameters parameters = new PdfFileEditor.ContentsResizeParameters(
    ///  //left margin = 10% of page width
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents width calculated automatically as width - left margin - right margin (100% - 10% - 10% = 80%)
    ///  null,
    ///  //right margin is 10% of page
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //top margin = 10% of height
    ///  PdfFileEditor.ContentsResizeValue.Percents(10),
    ///  //new contents height is calculated automatically (similar to width)
    ///  null,
    ///  //bottom margin is 10%
    ///  PdfFileEditor.ContentsResizeValue.Percents(10)
    ///  );
    ///  fileEditor.ResizeContents(doc, parameters);
    ///  doc.Save("output.pdf");
    ///</code></example>
    procedure ResizeContents(source: DNDocument; parameters: DNPdfFileEditor_ContentsResizeParameters); overload;
    ///<summary>
    ///  Concatentates two files.
    ///</summary>
    ///  <param name="firstInputFile">First file to concatenate.</param>
    ///  <param name="secInputFile">Second file to concatenate.</param>
    ///  <param name="outputFile">Output file.</param>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.Concatenate("file1.pdf", "file2.pdf", "outfile.pdf");
    ///</code></example><returns>True if operation was succeeded.</returns>
    function Concatenate(firstInputFile: string; secInputFile: string; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Concatenates two files.
    ///</summary>
    ///  <param name="firstInputStream">Stream of first file.</param>
    ///  <param name="secInputStream">Stream of second file.</param>
    ///  <param name="outputStream">Stream where result file will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
    ///  fileEditor.Concatenate(stream1, stream2, outstream);
    ///</code></example><returns>True if operation was succeeded.</returns>
    function Concatenate(firstInputStream: DDN.mscorlib.DNStream; secInputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Concatenates documents.
    ///</summary>
    ///  <param name="src">Array of source documents.</param>
    ///  <param name="dest">Destination document.</param>
    ///<returns>True if concatenation is successful. </returns>
    function Concatenate(src: TArray<DNDocument>; dest: DNDocument): Boolean; overload;
    ///<summary>
    ///  Concatenates files into one file.
    ///</summary>
    ///  <param name="inputFiles">Array of files to concatenate.</param>
    ///  <param name="outputFile">Name of output file.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Concatenate(new string[]  { "src1.pdf", "src2.pdf" }, "dest.pdf");
    ///</code></example>
    function Concatenate(inputFiles: TArray<string>; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Concatenates files
    ///</summary>
    ///  <param name="inputStream">Array of streams to be concatenated.</param>
    ///  <param name="outputStream">Stream where result file will be stored.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
    ///  fileEditor.Concatenate(new Stream[] { stream1, stream2 } , outstream);
    ///</code></example>
    function Concatenate(inputStream: TArray<DDN.mscorlib.DNStream>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
    ///  e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
    ///  Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
    ///</summary>
    ///  <param name="firstInputFile">First file.</param>
    ///  <param name="secInputFile">Second file.</param>
    ///  <param name="blankPageFile">PDF file with blank page.</param>
    ///  <param name="outputFile">Result file.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Concatenate("src1.pdf", "src2.pdf", "blank.pdf", "dest.pdf");
    ///</code></example>
    function Concatenate(firstInputFile: string; secInputFile: string; blankPageFile: string; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Merges two Pdf documents into a new Pdf document with pages in alternate ways and fill the blank places with blank pages.
    ///  e.g.: document1 has 5 pages: p1, p2, p3, p4, p5. document2 has 3 pages: p1', p2', p3'.
    ///  Merging the two Pdf document will produce the result document with pages:p1, p1', p2, p2', p3, p3', p4, blankpage, p5, blankpage.
    ///</summary>
    ///  <param name="firstInputStream">The first Pdf Stream.</param>
    ///  <param name="secInputStream">The second Pdf Stream.</param>
    ///  <param name="blankPageStream">The Pdf Stream with blank page</param>
    ///  <param name="outputStream">Output Pdf Stream.</param>
    ///<returns> True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream blank = new FileStream("blank.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
    ///  fileEditor.Concatenate(new Stream[] { stream1, stream2, blank } , outstream);
    ///</code></example>
    function Concatenate(firstInputStream: DDN.mscorlib.DNStream; secInputStream: DDN.mscorlib.DNStream; blankPageStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Appends pages, which are chosen from array of documents in portStreams.
    ///  The result document includes firstInputFile and all portStreams documents pages in the range startPage to endPage.
    ///</summary>
    ///  <param name="inputStream">Input Pdf stream.</param>
    ///  <param name="portStreams">Documents to copy pages from.</param>
    ///  <param name="startPage">Page starts in portStreams documents.</param>
    ///  <param name="endPage">Page ends in portStreams documents .</param>
    ///  <param name="outputStream">Output Pdf stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream2 = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
    ///  fileEditor.Append(instream, new Stream[] { stream1, stream2}, 3, 5, outstream);
    ///</code></example>
    function Append(inputStream: DDN.mscorlib.DNStream; portStreams: TArray<DDN.mscorlib.DNStream>; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Appends pages, which are chosen from portFiles documents.
    ///  The result document includes firstInputFile and all portFiles documents pages in the range startPage to endPage.
    ///</summary>
    ///  <param name="inputFile">Input Pdf file.</param>
    ///  <param name="portFiles">Documents to copy pages from.</param>
    ///  <param name="startPage">Page starts in portFiles documents.</param>
    ///  <param name="endPage">Page ends in portFiles documents .</param>
    ///  <param name="outputFile">Output Pdf document.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.Append("input.pdf", new string[] { "file1.pdf", "file2.pdf"}, 3, 5, "outfile.pdf");
    ///</code></example>
    function Append(inputFile: string; portFiles: TArray<string>; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Appends pages, which are chosen from portFile within the range from startPage to endPage, in portFile at the end of firstInputFile.
    ///</summary>
    ///  <param name="inputFile">Input Pdf file.</param>
    ///  <param name="portFile">Pages from Pdf file.</param>
    ///  <param name="startPage">Page starts in portFile.</param>
    ///  <param name="endPage">Page ends in portFile.</param>
    ///  <param name="outputFile">Output Pdf document.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  fileEditor.Append("input.pdf", "file1.pdf",  3, 5, "outfile.pdf");
    ///</code></example>
    function Append(inputFile: string; portFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Appends pages,which are chosen from portStream within the range from startPage to endPage, in portStream at the end of firstInputStream.
    ///</summary>
    ///  <param name="inputStream">Input file Stream.</param>
    ///  <param name="portStream">Pages from Pdf file Stream.</param>
    ///  <param name="startPage">Page starts in portFile Stream.</param>
    ///  <param name="endPage">Page ends in portFile Stream.</param>
    ///  <param name="outputStream">Output Pdf file Stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor fileEditor = new PdfFileEditor();
    ///  Stream instream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream stream1 = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outstream = new FileStream("outfile.pdf", FileMode.Create, FileAccess.Write);
    ///  fileEditor.Append(instream, stream1,  3, 5, "outfile.pdf");
    ///</code></example>
    function Append(inputStream: DDN.mscorlib.DNStream; portStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Inserts pages from an other file into the Pdf file at a position.
    ///</summary>
    ///  <param name="inputFile">Input Pdf file.</param>
    ///  <param name="insertLocation">Position in input file.</param>
    ///  <param name="portFile">The porting Pdf file.</param>
    ///  <param name="startPage">Start position in portFile.</param>
    ///  <param name="endPage">End position in portFile.</param>
    ///  <param name="outputFile">Output Pdf file.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Insert("file1.pdf", 1, "file2.pdf", 2, 6, "out.pdf");
    ///</code></example>
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Inserts pages from an other file into the input Pdf file.
    ///</summary>
    ///  <param name="inputStream">Input Stream of  Pdf file. </param>
    ///  <param name="insertLocation">Insert position in input file.</param>
    ///  <param name="portStream">Stream of Pdf file for pages.</param>
    ///  <param name="startPage">From which page to start.</param>
    ///  <param name="endPage">To which page to end.</param>
    ///  <param name="outputStream">Output Stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
    ///</code></example>
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Inserts pages from an other file into the input Pdf file.
    ///</summary>
    ///  <param name="inputFile">Input Pdf file.</param>
    ///  <param name="insertLocation">Insert position in input file.</param>
    ///  <param name="portFile">Pages from the Pdf file.</param>
    ///  <param name="pageNumber">The page number of the ported in portFile.</param>
    ///  <param name="outputFile">Output Pdf file.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Insert(sourceStream, 1, insertedStream, 2, 6, outStream);
    ///</code></example>
    function Insert(inputFile: string; insertLocation: Int32; portFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Inserts pages from an other file into the input Pdf file.
    ///</summary>
    ///  <param name="inputStream">Input Stream of  Pdf file. </param>
    ///  <param name="insertLocation">Insert position in input file.</param>
    ///  <param name="portStream">Stream of Pdf file for pages.</param>
    ///  <param name="pageNumber">The page number of the ported in portFile.</param>
    ///  <param name="outputStream">Output Stream.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream insertedStream = new FileStream("file2.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Insert(sourceStream, 1, insertedStream, new int[] { 3, 4, 5}, outStream);
    ///</code></example>
    function Insert(inputStream: DDN.mscorlib.DNStream; insertLocation: Int32; portStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Deletes pages specified by number array from input file, saves as a new Pdf file.
    ///</summary>
    ///  <param name="inputFile">Input file path.</param>
    ///  <param name="pageNumber">Index of page out of the input file.</param>
    ///  <param name="outputFile">Output file path.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Delete("input.pdf", new int[] { 2, 3 }, "out.pdf");
    ///</code></example>
    function Delete(inputFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Deletes pages specified by number array from input file, saves as a new Pdf file.
    ///</summary>
    ///  <param name="inputStream">Input file Stream.</param>
    ///  <param name="pageNumber">Index of page out of the input file.</param>
    ///  <param name="outputStream">Output file stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream intputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Delete(inputStream, new int[] { 2, 3 }, outputStream);
    ///</code></example>
    function Delete(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Extracts pages from input file,saves as a new Pdf file.
    ///</summary>
    ///  <param name="inputFile">Input Pdf file path.</param>
    ///  <param name="startPage">Start page number.</param>
    ///  <param name="endPage">End page number.</param>
    ///  <param name="outputFile">Output Pdf file path.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Extract("input.pdf", 3, 7, "output.pdf");
    ///</code></example>
    function Extract(inputFile: string; startPage: Int32; endPage: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Extracts pages specified by number array, saves as a new PDF file.
    ///</summary>
    ///  <param name="inputFile">Input file path.</param>
    ///  <param name="pageNumber">Index of page out of the input file.</param>
    ///  <param name="outputFile">Output file path.</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.Extract("input.pdf", new int[] { 3, 5, 7 }, "output.pdf");
    ///</code></example>
    function Extract(inputFile: string; pageNumber: TArray<Int32>; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Extracts pages from input file,saves as a new Pdf file.
    ///</summary>
    ///  <param name="inputStream">Input file Stream.</param>
    ///  <param name="startPage">Start page number.</param>
    ///  <param name="endPage">End page number.</param>
    ///  <param name="outputStream">Output Pdf file Stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Extract(sourceStream, 1, 3, 6, outStream);
    ///</code></example>
    function Extract(inputStream: DDN.mscorlib.DNStream; startPage: Int32; endPage: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Extracts pages specified by number array, saves as a new Pdf file.
    ///</summary>
    ///  <param name="inputStream">Input file Stream.</param>
    ///  <param name="pageNumber">Index of page out of the input file.</param>
    ///  <param name="outputStream">Output file stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.Extract(sourceStream, new int[] { 3, 5, 8 }, outStream);
    ///</code></example>
    function Extract(inputStream: DDN.mscorlib.DNStream; pageNumber: TArray<Int32>; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Splits Pdf file from first page to specified location,and saves the front part as a new file.
    ///</summary>
    ///  <param name="inputFile">Source Pdf file.</param>
    ///  <param name="location">The splitting point.</param>
    ///  <param name="outputFile">Output Pdf file.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.SplitFromFirst("input.pdf", 5, "out.pdf");
    ///</code></example>
    function SplitFromFirst(inputFile: string; location: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Splits from start to specified location,and saves the front part in output Stream.
    ///</summary>
    ///  <param name="inputStream">Source Pdf file Stream.</param>
    ///  <param name="location">The splitting point.</param>
    ///  <param name="outputStream">Output file Stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<remarks>The streams are NOT closed after this operation.</remarks>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.SplitFromFirst(sourceStream, 5, outStream);
    ///</code></example>
    function SplitFromFirst(inputStream: DDN.mscorlib.DNStream; location: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary>
    ///  Splits from location, and saves the rear part as a new file.
    ///</summary>
    ///  <param name="inputFile">Source Pdf file.</param>
    ///  <param name="location">The splitting position.</param>
    ///  <param name="outputFile">Output Pdf file path.</param>
    ///<returns>True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.SplitToEnd("input.pdf", 5, "out.pdf");
    ///</code></example>
    function SplitToEnd(inputFile: string; location: Int32; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Splits from specified location, and saves the rear part as a new file Stream.
    ///</summary>
    ///  <param name="inputStream">Source Pdf file Stream.</param>
    ///  <param name="location">The splitting position.</param>
    ///  <param name="outputStream">Output Pdf file Stream.</param>
    ///<returns>True for success, or false.</returns>
    ///<remarks>The streams are NOT closed after this operation unless CloseConcatedStreams is specified.</remarks>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream sourceStream = new FileStream("file1.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outStream = new FileStream("out.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.SplitToEnd(sourceStream, 5, outStream);
    ///</code></example>
    function SplitToEnd(inputStream: DDN.mscorlib.DNStream; location: Int32; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary> Makes booklet from the input file to output file.
    ///</summary>
    ///  <param name="inputFile">Input pdf file path and name.
    ///</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeBooklet("input.pdf", "output.pdf");
    ///</code></example>
    function MakeBooklet(inputFile: string; outputFile: string): Boolean; overload;
    ///<summary> Makes booklet from the InputStream to outputStream.
    ///</summary>
    ///  <param name="inputStream">Input pdf stream.
    ///</param>
    ///  <param name="outputStream">output pdf stream.
    ///</param>
    ///<returns> True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeBooklet(inputStream, outputStream);
    ///</code></example>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream): Boolean; overload;
    ///<summary> Makes booklet from the inputFile to outputFile.
    ///</summary>
    ///  <param name="inputFile">Input pdf file path and name.
    ///</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///  <param name="pageSize">The page size of the output pdf file.
    ///</param>
    ///<returns>True if operation is succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4);
    ///</code></example>
    function MakeBooklet(inputFile: string; outputFile: string; pageSize: DNPageSize): Boolean; overload;
    ///<summary> Makes booklet from the input stream and save result into output stream.
    ///</summary>
    ///  <param name="inputStream">Input PDF stream.
    ///</param>
    ///  <param name="outputStream">output pdf stream.
    ///</param>
    ///  <param name="pageSize">The page size of the output pdf file.
    ///</param>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeBooklet(inputStream, outputStream, PageSize.A4);
    ///</code></example><returns>True if operation was succeeded.</returns>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize): Boolean; overload;
    ///<summary>
    ///  Makes customized booklet from the firstInputFile to outputFile.
    ///</summary>
    ///  <param name="inputFile">The input file.</param>
    ///  <param name="outputFile">Output pdf file path and name.</param>
    ///  <param name="leftPages">The left pages of the booklet.</param>
    ///  <param name="rightPages">The right pages of the booklet.</param>
    ///<returns>boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeBooklet("input.pdf", "output.pdf", new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
    ///</code></example>
    function MakeBooklet(inputFile: string; outputFile: string; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    ///<summary>
    ///  Makes customized booklet from the firstInputStream to outputStream.
    ///</summary>
    ///  <param name="inputStream">The input stream.</param>
    ///  <param name="outputStream">output pdf stream.</param>
    ///  <param name="leftPages">The left pages.</param>
    ///  <param name="rightPages">The right pages.</param>
    ///<returns>boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeBooklet(inputStream, outputStream, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
    ///</code></example>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    ///<summary>
    ///  Makes customized booklet from the firstInputFile to outputFile.
    ///</summary>
    ///  <param name="inputFile">The input file.</param>
    ///  <param name="outputFile">Output pdf file path and name.</param>
    ///  <param name="pageSize">The page size of the output pdf file.</param>
    ///  <param name="leftPages">The left pages.</param>
    ///  <param name="rightPages">The right pages.</param>
    ///<returns>boolean - True for success, or false. </returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeBooklet("input.pdf", "output.pdf", PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
    ///</code></example>
    function MakeBooklet(inputFile: string; outputFile: string; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    ///<summary>
    ///  Makes booklet from the firstInputStream to outputStream.
    ///</summary>
    ///  <param name="inputStream">The input stream.</param>
    ///  <param name="outputStream">output pdf stream.</param>
    ///  <param name="pageSize">The page size of the output pdf file.</param>
    ///  <param name="leftPages">The left pages.</param>
    ///  <param name="rightPages">The right pages.</param>
    ///<returns>boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeBooklet(inputStream, outputStream, PageSize.A4, new int[] { 2, 4, 6 }, new int[] 1, 3, 5, 7 });
    ///</code></example>
    function MakeBooklet(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; pageSize: DNPageSize; leftPages: TArray<Int32>; rightPages: TArray<Int32>): Boolean; overload;
    ///<summary> Makes N-Up document from the firstInputFile to outputFile.
    ///</summary>
    ///  <param name="inputFile">Input pdf file path and name.
    ///</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///  <param name="x">Number of columns.
    ///</param>
    ///  <param name="y">Number of rows.
    ///</param>
    ///<returns> boolean - True for success, or false. </returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeNUp("input.pdf", "output.pdf", 3, 3);
    ///</code></example>
    function MakeNUp(inputFile: string; outputFile: string; x: Int32; y: Int32): Boolean; overload;
    ///<summary> Makes N-Up document from the input stream and saves result into output stream.
    ///</summary>
    ///  <param name="inputStream">Input pdf stream.
    ///</param>
    ///  <param name="outputStream">Output pdf stream.
    ///</param>
    ///  <param name="x">Number of columns.
    ///</param>
    ///  <param name="y">Number of rows.
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeNUp(inputStream, outputStream, 3, 3);
    ///</code></example>
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32): Boolean; overload;
    ///<summary> Makes N-Up document from the first input stream to output stream.
    ///</summary>
    ///  <param name="inputStream">Input pdf stream.
    ///</param>
    ///  <param name="outputStream">Output pdf stream.
    ///</param>
    ///  <param name="x">Number of columns.
    ///</param>
    ///  <param name="y">Number of rows.
    ///</param>
    ///  <param name="pageSize">The page size of the output pdf file.
    ///</param>
    ///<returns>True if operation was succeeded.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  Stream inputStream = new FileStream("input.pdf", FileMode.Open, FileAccess.Read);
    ///  Stream outputStream = new FileStream("output.pdf", FileMode.Create, FileAccess.Write);
    ///  pfe.MakeNUp(inputStream, outputStream, 3, 3, PageSize.A4);
    ///</code></example>
    function MakeNUp(inputStream: DDN.mscorlib.DNStream; outputStream: DDN.mscorlib.DNStream; x: Int32; y: Int32; pageSize: DNPageSize): Boolean; overload;
    ///<summary> Makes N-Up document from the two input PDF files to outputFile.
    ///  Each page of outputFile will contain two pages, one page is from the first input file
    ///  and another is from the second input file. The two pages are piled up horizontally.
    ///</summary>
    ///  <param name="firstInputFile">first input file.
    ///</param>
    ///  <param name="secondInputFile">second input file.
    ///</param>
    ///  <param name="outputFile">Output pdf file path and name.
    ///</param>
    ///<returns> boolean - True for success, or false.</returns>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.MakeNUp("input1.pdf", "input2.pdf", "output.pdf");
    ///</code></example>
    function MakeNUp(firstInputFile: string; secondInputFile: string; outputFile: string): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets log of conversion process.
    ///</summary>
    property ConversionLog: string read get_ConversionLog;
    ///<summary>
    ///  Optional contents of concatentated documents with equal names will be merged into one layer in resulstant document if this property is true.
    ///  Else, layers with equal names will be save as different layers in resultant document.
    ///</summary>
    property MergeDuplicateLayers: Boolean read get_MergeDuplicateLayers write set_MergeDuplicateLayers;
    ///<summary>
    ///  If true then outlines will be copied.
    ///</summary>
    property CopyOutlines: Boolean read get_CopyOutlines write set_CopyOutlines;
    ///<summary>
    ///  If true then logical structure of the file is copied when concatenation is performed.
    ///</summary>
    property CopyLogicalStructure: Boolean read get_CopyLogicalStructure write set_CopyLogicalStructure;
    ///<summary>
    ///  If true, duplicate outlines are merged.
    ///</summary>
    property MergeDuplicateOutlines: Boolean read get_MergeDuplicateOutlines write set_MergeDuplicateOutlines;
    ///<summary>
    ///  If true, user rights of first document are applied to concatenated document. User rights of all other documents are ignored.
    ///</summary>
    property PreserveUserRights: Boolean read get_PreserveUserRights write set_PreserveUserRights;
    ///<summary>
    ///  If true, incremental updates are made during concatenation.
    ///</summary>
    property IncrementalUpdates: Boolean read get_IncrementalUpdates write set_IncrementalUpdates;
    ///<summary>
    ///  Gets or sets optimization flag. Equal resource streams in resultant file are merged into one PDF object if this flag set.
    ///  This allows to decrease resultant file size but may cause slower execution and larger memory requirements.
    ///  Default value: false.
    ///</summary>
    property OptimizeSize: Boolean read get_OptimizeSize write set_OptimizeSize;
    ///<summary>
    ///  Array of encountered problems when concatenation was performed. For every corrupted document from passed to Concatenate()
    ///  function new CorruptedItem entry is created.
    ///  This property may be used only when CorruptedFileAction is ConcatenateIgnoringCorrupted.
    ///<example><code lang="C#">
    ///  //concatenate documents and show information about corrupted documents
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.CorruptedFileAction = PdfFileEditor.ConcatenateCorruptedFileActions.ConcatenateIgnoringCorrupted;
    ///  if (pfe.CorruptedItems.Length &gt;0)
    ///  {
    ///  foreach(PdfFileEditor.CorruptedItem item in pfe.CorruptedItems)
    ///  {
    ///  Console.WriteLine(item.Index + " reason: " + item.Exception);
    ///  }
    ///  }
    ///</code></example></summary>
    property CorruptedItems: TArray<DNPdfFileEditor_CorruptedItem> read get_CorruptedItems;
    ///<summary>
    ///  This property defines behavior when concatenating process met corrupted file.
    ///  Possible values are: StopWithError and ConcatenateIgnoringCorrupted.
    ///</summary>
    property CorruptedFileAction: DNPdfFileEditor_ConcatenateCorruptedFileAction read get_CorruptedFileAction write set_CorruptedFileAction;
    ///<summary>
    ///  Sets owner's password if the source input Pdf file is encrypted.
    ///  This property is not implemented yet.
    ///</summary>
    property OwnerPassword: string read get_OwnerPassword write set_OwnerPassword;
    ///<summary>
    ///  If set to true, exceptions are thrown if error occured. Else excetion are not thrown and methods return false if failed.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.AllowConcatenatedException = true;
    ///</code></example>
    property AllowConcatenateExceptions: Boolean read get_AllowConcatenateExceptions write set_AllowConcatenateExceptions;
    ///<summary>
    ///  Sets PDF file format. Result file will be saved in specified file format.
    ///  If this property is not specified then file will be save in default PDF format without conversion.
    ///</summary>
    property ConvertTo: DNPdfFormat write set_ConvertTo;
    ///<summary>
    ///  If set to true, streams are closed after operation.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.CloseConcatenatedStreams = true;
    ///</code></example>
    property CloseConcatenatedStreams: Boolean read get_CloseConcatenatedStreams write set_CloseConcatenatedStreams;
    ///<summary>
    ///  Format of the suffix which is added to field name to make it unique when forms are concatenated.
    ///  This string must contain %NUM% substring which will be replaced with numbers.
    ///  For example if UniqueSuffix = "ABC%NUM%" then for field "fieldName" names will be:
    ///  fieldNameABC1, fieldNameABC2, fieldNameABC3 etc.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileEditor ed = new PdfFileEditor();
    ///  ed.UniqueSuffix = "_%NUM%";
    ///</code></example>
    property UniqueSuffix: string read get_UniqueSuffix write set_UniqueSuffix;
    ///<summary>
    ///  If true actions will be copied from source documents. Defaulkt value : true.
    ///</summary>
    property KeepActions: Boolean read get_KeepActions write set_KeepActions;
    ///<summary>
    ///  If true then field names will be made unique when forms are concatenated.
    ///  Suffixes will be added to field names, suffix template may be specified in UniqueSuffix property.
    ///</summary>
    property KeepFieldsUnique: Boolean read get_KeepFieldsUnique write set_KeepFieldsUnique;
    ///<summary>
    ///  If this option used then destination document will be saved on disk periodically and further concatenation will appllied to it as incremental updates.
    ///</summary>
    property UseDiskBuffer: Boolean read get_UseDiskBuffer write set_UseDiskBuffer;
    ///<summary>
    ///  Number of documents concatenated before new incremental update was made during concatenation when UseDiskBuffer is set to true.
    ///</summary>
    property ConcatenationPacketSize: Int32 read get_ConcatenationPacketSize write set_ConcatenationPacketSize;
    ///<summary>
    ///  Gets last occured exception. May be used to check the reason of failure when AllowconcatenateExceptions = false.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileEditor pfe = new PdfFileEditor();
    ///  pfe.AllowConcatenateExceptions = false;
    ///  if (!pfe.Concatenate("file1.pdf", "file2.pdf", "file3.pdf"))
    ///  {
    ///  Console.WriteLine("Error occured:");
    ///  if (pfe.LastException != null)
    ///  {
    ///  Console.WriteLine(pfe.LastException.Message);
    ///  if (pfe.LastException.InnerException != null)
    ///  Console.WriteLine(pfe.LastException.InnerException.Message);
    ///  }
    ///  }
    ///</code></example>
    property LastException: DDN.mscorlib.DNException read get_LastException;
    ///<summary>
    ///  Gets or sets how content will be stored when result of operation is stored into HttpResponse object. Possible value: inline / attachment.
    ///  Default: inline.
    ///</summary>
    property ContentDisposition: DNContentDisposition read get_ContentDisposition write set_ContentDisposition;
    ///<summary>
    ///  Gets or sets save options when result is stored as HttpResponse.
    ///  Default value: PdfSaveOptions.
    ///</summary>
    property SaveOptions: DNSaveOptions read get_SaveOptions write set_SaveOptions;
    ///<summary>
    ///  Gets or sets name of attachment when result of operation is stored into HttpResponse objects as attachment.
    ///</summary>
    property AttachmentName: string read get_AttachmentName write set_AttachmentName;
  end;

  TDNPdfFileEditor = class(TDNGenericImport<DNPdfFileEditorClass, DNPdfFileEditor>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_ContentsResizeParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65BD5328-5F21-5DFC-A927-15FD7EEACB0A}']
  { constructors } 

    ///<summary>
    ///  Creates resize parameters where al values are set to "auto". Later margins and contents size may be specified if required.
    ///</summary>
    {class} function init: DNPdfFileEditor_ContentsResizeParameters; overload;
    ///<summary>
    ///  Creates resize parameters with specified margin values and contents size.
    ///</summary>
    ///  <param name="leftMargin">Left margin value.</param>
    ///  <param name="contentsWidth">Contents width.</param>
    ///  <param name="rightMargin">Right margin.</param>
    ///  <param name="topMargin">Top margin.</param>
    ///  <param name="contentsHeight">Contents height.</param>
    ///  <param name="bottomMargin">Bottom margin.</param>
    ///  Empty values means that corresponding value calculated automatically
    {class} function init(leftMargin: DNPdfFileEditor_ContentsResizeValue; contentsWidth: DNPdfFileEditor_ContentsResizeValue; rightMargin: DNPdfFileEditor_ContentsResizeValue; topMargin: DNPdfFileEditor_ContentsResizeValue; contentsHeight: DNPdfFileEditor_ContentsResizeValue; bottomMargin: DNPdfFileEditor_ContentsResizeValue): DNPdfFileEditor_ContentsResizeParameters; overload;

  { static methods } 

    ///<summary>
    ///  Creates resize parameters with specifed margins value. Contents size is automatically calculated.
    ///</summary>
    ///  <param name="left">Left margin.</param>
    ///  <param name="right">Right margin.</param>
    ///  <param name="top">Top margin.</param>
    ///  <param name="bottom">Bottom margin.</param>
    ///<returns>Created resize parameters.</returns>
    {class} function Margins(left: Double; right: Double; top: Double; bottom: Double): DNPdfFileEditor_ContentsResizeParameters;
    ///<summary>
    ///  Creates resize parameters. Margins are specified in percents of initial page size.
    ///</summary>
    ///  <param name="left">Left margin (in percents of page width).</param>
    ///  <param name="right">Right margin (in percents of page height).</param>
    ///  <param name="top">Top margin (in percents of page height).</param>
    ///  <param name="bottom">Bottom margin (in percents of page height).</param>
    ///<returns>Returns new resize parameters.</returns>
    {class} function MarginsPercent(left: Double; right: Double; top: Double; bottom: Double): DNPdfFileEditor_ContentsResizeParameters;
    ///<summary>
    ///  Creates resize parameters with specified contents size.
    ///</summary>
    ///  <param name="width">New width of contents.</param>
    ///  <param name="height">New height of contetns.</param>
    ///<returns>Returns new resize parameters.</returns>
    {class} function ContentSize(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    ///<summary>
    ///  Creates resize parameters with specified contents size in percents of initial page size.
    ///  Margins are caculated automatically.
    ///</summary>
    ///  <param name="width">New content width in percents.</param>
    ///  <param name="height">New contents height in percents.</param>
    ///<returns>New resize parameters.</returns>
    {class} function ContentSizePercent(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    ///<summary>
    ///  Creates resize paramters for page resize.
    ///</summary>
    ///  <param name="width">New page width in units.</param>
    ///  <param name="height">New page height in units. </param>
    ///<returns>New resize paramteres.</returns>
    {class} function PageResize(width: Double; height: Double): DNPdfFileEditor_ContentsResizeParameters;
    ///<summary>
    ///  Creates resize paramters for page resize. New sizes are specified in percent.
    ///</summary>
    ///  <param name="widthPct">New page width in percents.</param>
    ///  <param name="heightPct">New page height in percents. </param>
    ///<returns>New resize paramteres.</returns>
    {class} function PageResizePct(widthPct: Double; heightPct: Double): DNPdfFileEditor_ContentsResizeParameters;

  end;

  ///<summary>
  ///  Class for specifing page resize parameters.
  ///  Allow to set the following parameters:
  ///  Size of result page (width, height) in default space units or in percents of initial pages size;
  ///  Left, Top, Bottom and Right margins in default space units or in percents of initial page size;
  ///  Some values may be left null for automatic calculation. These values will be calculated
  ///  from rest of page size after calculation explicitly specified values.
  ///  For example: if page width = 100 and new page width specified 60 units then
  ///  left and right margins are automatically calculated:
  ///  (100 - 60) / 2 = 15.
  ///  This class is used in ResizeContents method.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeParameters')]
  DNPdfFileEditor_ContentsResizeParameters = interface(DDN.mscorlib.DNObject)
  ['{B0DDE561-29DE-3BC4-8768-6E4DA8A743AA}']
  { getters & setters } 

    function get_LeftMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_LeftMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_RightMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_RightMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_TopMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_TopMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_BottomMargin: DNPdfFileEditor_ContentsResizeValue;
    procedure set_BottomMargin(value: DNPdfFileEditor_ContentsResizeValue);
    function get_ContentsWidth: DNPdfFileEditor_ContentsResizeValue;
    procedure set_ContentsWidth(value: DNPdfFileEditor_ContentsResizeValue);
    function get_ContentsHeight: DNPdfFileEditor_ContentsResizeValue;
    procedure set_ContentsHeight(value: DNPdfFileEditor_ContentsResizeValue);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets left margin on the resultant page.
    ///</summary>
    property LeftMargin: DNPdfFileEditor_ContentsResizeValue read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Gets or sets right margin on the resultant page.
    ///</summary>
    property RightMargin: DNPdfFileEditor_ContentsResizeValue read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Gets or sets top margin on the resultant page.
    ///</summary>
    property TopMargin: DNPdfFileEditor_ContentsResizeValue read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Gets or sets bottom margin on the resultant page.
    ///</summary>
    property BottomMargin: DNPdfFileEditor_ContentsResizeValue read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Gets or sets width of the content of the source page on the resultant page.
    ///</summary>
    property ContentsWidth: DNPdfFileEditor_ContentsResizeValue read get_ContentsWidth write set_ContentsWidth;
    ///<summary>
    ///  Gets or sets height of the content of the source page on the resultant page.
    ///</summary>
    property ContentsHeight: DNPdfFileEditor_ContentsResizeValue read get_ContentsHeight write set_ContentsHeight;
  end;

  TDNPdfFileEditor_ContentsResizeParameters = class(TDNGenericImport<DNPdfFileEditor_ContentsResizeParametersClass, DNPdfFileEditor_ContentsResizeParameters>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_ContentsResizeValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6FEFC78E-9E75-5E63-B480-00D7B043BFB2}']
  { static getter & setter } 

    procedure set_PercentValue(value: Double);
    procedure set_UnitValue(value: Double);

  { static methods } 

    ///<summary>
    ///  Initializes value in percents.
    ///</summary>
    ///  <param name="value">Value in percents.</param>
    ///<returns>New value instance.</returns>
    {class} function Percents(value: Double): DNPdfFileEditor_ContentsResizeValue;
    ///<summary>
    ///  Initializes value in default space units.
    ///</summary>
    ///  <param name="value">Value in units.</param>
    ///<returns>New value instance.</returns>
    {class} function Units(value: Double): DNPdfFileEditor_ContentsResizeValue;
    ///<summary>
    ///  Initializes automatically calculated value.
    ///</summary>
    ///<returns>New value instance.</returns>
    {class} function Auto: DNPdfFileEditor_ContentsResizeValue;

  { static propertys } 

    ///<summary>
    ///  Sets value in percents of page size.
    ///</summary>
    {class} property PercentValue: Double write set_PercentValue;
    ///<summary>
    ///  Sets value in default space units.
    ///</summary>
    {class} property UnitValue: Double write set_UnitValue;
  end;

  ///<summary>
  ///  Value of margin or content size specified in percents of default space units.
  ///  This class is used in ContentsResizeParameters.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+ContentsResizeValue')]
  DNPdfFileEditor_ContentsResizeValue = interface(DDN.mscorlib.DNObject)
  ['{98AF03F6-9B41-3313-A23D-1580815925FC}']
  { getters & setters } 

    procedure set_PercentValue(value: Double);
    procedure set_UnitValue(value: Double);
    function get_Value: Double;
    function get_IsPercent: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets value in percents of page size.
    ///</summary>
    property PercentValue: Double write set_PercentValue;
    ///<summary>
    ///  Sets value in default space units.
    ///</summary>
    property UnitValue: Double write set_UnitValue;
    ///<summary>
    ///  Gets specified value. Use Unit property to get value units.
    ///</summary>
    property Value: Double read get_Value;
    ///<summary>
    ///  Gets true if value is expressed in percents;
    ///  False if value is expressed in default units.
    ///</summary>
    property IsPercent: Boolean read get_IsPercent;
  end;

  TDNPdfFileEditor_ContentsResizeValue = class(TDNGenericImport<DNPdfFileEditor_ContentsResizeValueClass, DNPdfFileEditor_ContentsResizeValue>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_CorruptedItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C353746-3E9E-5D3E-B2F5-2234AD2BABAF}']
  end;

  ///<summary>
  ///  Class which provides information about corrupted files in time of concatenation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+CorruptedItem')]
  DNPdfFileEditor_CorruptedItem = interface(DDN.mscorlib.DNObject)
  ['{B6FE0E8D-A0EF-36DC-AD26-490FF5FBC71F}']
  { getters & setters } 

    function get_Index: Int32;
    function get_Exception: DDN.mscorlib.DNException;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Index of corrupted file.
    ///</summary>
    property Index: Int32 read get_Index;
    ///<summary>
    ///  Exception thrown for this file which indicates problem with the file.
    ///</summary>
    property Exception: DDN.mscorlib.DNException read get_Exception;
  end;

  TDNPdfFileEditor_CorruptedItem = class(TDNGenericImport<DNPdfFileEditor_CorruptedItemClass, DNPdfFileEditor_CorruptedItem>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfFileEditor_PageBreakClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58B6EAC8-6A47-5D42-983A-77746E1B1AD3}']
  { constructors } 

    ///<summary>
    ///  Constructor to create PageBreak object.
    ///</summary>
    ///  <param name="pageNumber">Number of page where page break is placed.</param>
    ///  <param name="position">Vertical position of page break.</param>
    {class} function init(pageNumber: Int32; position: Double): DNPdfFileEditor_PageBreak;

  end;

  ///<summary>
  ///  Data of page break position.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfFileEditor+PageBreak')]
  DNPdfFileEditor_PageBreak = interface(DDN.mscorlib.DNObject)
  ['{F5806E9F-D33D-37D1-A88D-C840ADA35F98}']
  { getters & setters } 

    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Position: Double;
    procedure set_Position(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Number of page (starting from 1) where page break must be added.
    ///</summary>
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    ///<summary>
    ///  Vertical position of page break.
    ///</summary>
    property Position: Double read get_Position write set_Position;
  end;

  TDNPdfFileEditor_PageBreak = class(TDNGenericImport<DNPdfFileEditor_PageBreakClass, DNPdfFileEditor_PageBreak>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfJavaScriptStripperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EEE9C744-8873-5DB4-95F3-D0518F62593D}']
  { constructors } 

    {class} function init: DNPdfJavaScriptStripper;

  end;

  ///<summary>
  ///  Class for removing all Java Script code.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfJavaScriptStripper')]
  DNPdfJavaScriptStripper = interface(DDN.mscorlib.DNObject)
  ['{46908293-D7E9-34B4-A139-A5DA8FA776C1}']
  { methods } 

    ///<summary>
    ///  Remove Java Script from document.
    ///</summary>
    ///  <param name="inputFile">File containig the document.</param>
    ///  <param name="outputFile">File where document will be stored.</param>
    ///<returns>true if JavaScript was stripped successfully.</returns>
    function Strip(inputFile: string; outputFile: string): Boolean; overload;
    ///<summary>
    ///  Remove Java Script from the document.
    ///</summary>
    ///  <param name="inStream">Stream containing document.</param>
    ///  <param name="outStream">Stream where the document will be stored.</param>
    ///<returns>true if JavaScript was stripped successfully.</returns>
    function Strip(inStream: DDN.mscorlib.DNStream; outStream: DDN.mscorlib.DNStream): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfJavaScriptStripper = class(TDNGenericImport<DNPdfJavaScriptStripperClass, DNPdfJavaScriptStripper>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfPrintPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AEE3D6F6-139D-5843-BD45-D3D5109EE46A}']
  end;

  ///<summary>
  ///  Represents an object that contains current printing page info.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfPrintPageInfo')]
  DNPdfPrintPageInfo = interface(DDN.mscorlib.DNObject)
  ['{22D271A6-C711-3C0E-B658-481D997C1E24}']
  { getters & setters } 

    function get_PageNumber: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets currently printed page number;
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
  end;

  TDNPdfPrintPageInfo = class(TDNGenericImport<DNPdfPrintPageInfoClass, DNPdfPrintPageInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfProducerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{660AF50B-7944-5480-9DEB-E2F6FE00B32C}']
  { static methods } 

    ///<summary>
    ///  Produce the PDF stream using specified import format.
    ///<example>This sample shows how to produce Pdf stream from CGM stream.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  using (FileStream inputStream = File.OpenRead(inputFile))
    ///  using (FileStream outputStream = File.Create(outputFile))
    ///  {
    ///  PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="format">Import format.</param>
    ///  <param name="outputStream">Output PDF stream.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Input or output stream is null</exception>
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; format: DNImportFormat; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Produce the PDF stream using specified import format.
    ///<example>This sample shows how to produce Pdf stream from CGM file.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  using (FileStream outputStream = File.Create(outputFile))
    ///  {
    ///  PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputStream);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputFileName">Input file name.</param>
    ///  <param name="format">Import format.</param>
    ///  <param name="outputStream">Output PDF stream.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Output stream is null</exception><exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    {class} procedure Produce(inputFileName: string; format: DNImportFormat; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Produce the PDF file using specified import format.
    ///<example>This sample shows how to produce Pdf file from CGM stream.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  using (FileStream inputStream = File.OpenRead(inputFile))
    ///  using (FileStream outputStream = File.Create(outputFile))
    ///  {
    ///  PdfProducer.Produce(inputStream, ImportFormat.Cgm, outputStream);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="format">Import format.</param>
    ///  <param name="outputFileName">Output PDF file</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Input stream is null</exception><exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; format: DNImportFormat; outputFileName: string); overload;
    ///<summary>
    ///  Produce the PDF file using specified import format.
    ///<example>This sample shows how to produce Pdf file from CGM file.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
    ///</code></example></summary>
    ///  <param name="inputFileName">Input file name.</param>
    ///  <param name="format">Import format.</param>
    ///  <param name="outputFileName">Output PDF file</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    {class} procedure Produce(inputFileName: string; format: DNImportFormat; outputFileName: string); overload;
    ///<summary>
    ///  Produce the PDF stream using specified import option.
    ///<example>This sample shows how to produce Pdf stream from CGM file.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  ImportOptions importOptions = new CgmImportOptions();
    ///  using (FileStream outputStream = File.Create(outputFile))
    ///  {
    ///  PdfProducer.Produce(inputFile, importOptions, outputStream);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputFileName">Input file name.</param>
    ///  <param name="options">Import option.</param>
    ///  <param name="outputStream">Output PDF stream.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Output stream is null</exception><exception cref="T:System.ArgumentException">Input file name is an empty string</exception>
    {class} procedure Produce(inputFileName: string; options: DNImportOptions; outputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Produce the PDF file using specified import option.
    ///<example>This sample shows how to produce Pdf file from CGM stream.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  ImportOptions importOptions = new CgmImportOptions();
    ///  using (FileStream inputStream = File.OpenRead(inputFile))
    ///  {
    ///  PdfProducer.Produce(inputStream, importOptions, outputFile);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="options">Import option.</param>
    ///  <param name="outputFileName">Output PDF file.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Input stream is null</exception><exception cref="T:System.ArgumentException">Output file name is an empty string</exception>
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; options: DNImportOptions; outputFileName: string); overload;
    ///<summary>
    ///  Produce the PDF file using specified import option.
    ///<example>This sample shows how to produce Pdf file from CGM file.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  ImportOptions importOptions = new CgmImportOptions();
    ///  PdfProducer.Produce(inputStream, importOptions, outputStream);
    ///</code></example></summary>
    ///  <param name="inputFileName">Input file name.</param>
    ///  <param name="options">Import option.</param>
    ///  <param name="outputFileName">Output PDF stream.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentException">Input or output file name is an empty string</exception>
    {class} procedure Produce(inputFileName: string; options: DNImportOptions; outputFileName: string); overload;
    ///<summary>
    ///  Produce the PDF file using specified import option.
    ///<example>This sample shows how to produce Pdf stream from CGM stream.
    ///<code>
    ///  string inputFile = "myImage.cgm";
    ///  string outputFile = "myPdf.pdf";
    ///  ImportOptions importOptions = new CgmImportOptions();
    ///  using (FileStream inputStream = File.OpenRead(inputFile))
    ///  using (FileStream outputStream = File.Create(outputFile))
    ///  {
    ///  PdfProducer.Produce(inputStream, importOptions, outputStream);
    ///  }
    ///</code></example></summary>
    ///  <param name="inputStream">Input stream.</param>
    ///  <param name="options">Import option.</param>
    ///  <param name="outputStream">Output PDF stream.</param>
    ///<exception cref="T:Aspose.Pdf.InvalidFileFormatException">The exception is thrown when a file is invalid.</exception><exception cref="T:System.ArgumentNullException">Input or output stream is null.</exception>
    {class} procedure Produce(inputStream: DDN.mscorlib.DNStream; options: DNImportOptions; outputStream: DDN.mscorlib.DNStream); overload;

  end;

  ///<summary>
  ///  Represents a class to produce PDF from other formats.
  ///<example>This sample shows how to produce Pdf file from CGM file.
  ///<code>
  ///  string inputFile = "myImage.cgm";
  ///  string outputFile = "myPdf.pdf";
  ///  try
  ///  {
  ///  PdfProducer.Produce(inputFile, ImportFormat.Cgm, outputFile);
  ///  // Success produced pdf file.
  ///  }
  ///  catch (InvalidCgmFileFormatException e)
  ///  {
  ///  //  Do something...
  ///  }
  ///</code></example></summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfProducer')]
  DNPdfProducer = interface(DDN.mscorlib.DNObject)
  ['{C3D24BD5-C282-3E64-9EFB-9F02AF447918}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfProducer = class(TDNGenericImport<DNPdfProducerClass, DNPdfProducer>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNPdfViewerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{872AD085-F9CA-5835-8AB1-73C7739FA002}']
  { constructors } 

    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfViewer" />
    ///  object.
    ///</summary>
    {class} function init: DNPdfViewer; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.Facades.PdfViewer" />
    ///  object.
    ///</summary>
    ///  <param name="document">Document object.</param>
    {class} function init(document: DNDocument): DNPdfViewer; overload;

  end;

  ///<summary>
  ///  Represents a class to view or print a pdf.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.PdfViewer')]
  DNPdfViewer = interface(DDN.mscorlib.DNObject)
  ['{9CA23748-F550-322D-A3BE-E1CD34EB3236}']
  { getters & setters } 

    function get_ShowHiddenAreas: Boolean;
    procedure set_ShowHiddenAreas(value: Boolean);
    function get_PrintStatus: DDN.mscorlib.DNObject;
    function get_UseIntermidiateImage: Boolean;
    procedure set_UseIntermidiateImage(value: Boolean);
    function get_CoordinateType: DNPageCoordinateType;
    procedure set_CoordinateType(value: DNPageCoordinateType);
    function get_PrintAsImage: Boolean;
    procedure set_PrintAsImage(value: Boolean);
    function get_PageCount: Int32;
    function get_Password: string;
    procedure set_Password(value: string);
    function get_PrintPageDialog: Boolean;
    procedure set_PrintPageDialog(value: Boolean);
    function get_PrintAsGrayscale: Boolean;
    procedure set_PrintAsGrayscale(value: Boolean);
    function get_PrinterJobName: string;
    procedure set_PrinterJobName(value: string);
    function get_FormPresentationMode: DNFormPresentationMode;
    procedure set_FormPresentationMode(value: DNFormPresentationMode);
    function get_RenderingOptions: DNRenderingOptions;
    procedure set_RenderingOptions(value: DNRenderingOptions);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_AutoResize: Boolean;
    procedure set_AutoResize(value: Boolean);
    function get_AutoRotate: Boolean;
    procedure set_AutoRotate(value: Boolean);
    function get_AutoRotateMode: DNAutoRotateMode;
    procedure set_AutoRotateMode(value: DNAutoRotateMode);
    function get_Resolution: Int32;
    procedure set_Resolution(value: Int32);
    function get_ScaleFactor: Single;
    procedure set_ScaleFactor(value: Single);

  { events } 

    procedure add_PdfQueryPageSettings(value: DNPdfQueryPageSettingsEventHandler);
    procedure remove_PdfQueryPageSettings(value: DNPdfQueryPageSettingsEventHandler);
    procedure add_EndPrint(value: DDN.Aspose.Common.DNPrintEventHandler);
    procedure remove_EndPrint(value: DDN.Aspose.Common.DNPrintEventHandler);

  { methods } 

    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcFile">The PDF file.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcStream">The stream of PDF file.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Initializes the facade.
    ///</summary>
    ///  <param name="srcDoc">The Aspose.Pdf.Document object.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Saves the result PDF document to file.
    ///</summary>
    ///  <param name="destFile">The path of output PDF document.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the result PDF document to stream.
    ///</summary>
    ///  <param name="destStream">The stream of output PDF document.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Closes the facade.
    ///</summary>
    procedure Close;
    ///<summary>
    ///  Disposes the facade resources.
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Opens and prints a large Pdf file. If your Pdf file has hundreds of pages or more or its size is
    ///  more than 3 MB, this method is recommended to get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="filePath">The path of Pdf file.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;     //print the file with adjusted size
    ///  viewer.AutoRotate = true;     //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintLargePdf(@"d:\test.pdf");
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true      'print the file with adjusted size
    ///  viewer.AutoRotate = true      'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintLargePdf(@"d:\test.pdf")
    ///  viewer.ClosePdfFile();
    ///</code></example>
    procedure PrintLargePdf(filePath: string); overload;
    ///<summary>
    ///  Opens and prints a large Pdf stream. If your Pdf file has hundreds of pages or more or its size is
    ///  more than 3 MB, this method is recommended to get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="inputStream">The pdf stream to be opened  and printed..</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;        //print the file with adjusted size
    ///  viewer.AutoRotate = true;        //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true         'print the file with adjusted size
    ///  viewer.AutoRotate = true         'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Opens and prints a large Pdf file with specified printer settings. If your Pdf file has hundreds
    ///  of pages or more or its size is more than 3 MB, this method is recommended to get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="filePath">The path of Pdf file.</param>
    ///  <param name="printerSettings">The printer settings.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;       //print the file with adjusted size
    ///  viewer.AutoRotate = true;       //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  viewer.PrintLargePdf(@"d:\test.pdf",ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true        'print the file with adjusted size
    ///  viewer.AutoRotate = true        'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  viewer.PrintLargePdf(@"d:\test.pdf",ps)
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintLargePdf(filePath: string; printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Opens and prints a large Pdf stream with specified printer settings. If your Pdf file has hundreds
    ///  of pages or more or its size is more than 3 MB, this method is recommended to get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="inputStream">The pdf stream to be opened  and printed..</param>
    ///  <param name="printerSettings">The printer settings.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;       //print the file with adjusted size
    ///  viewer.AutoRotate = true;       //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true        'print the file with adjusted size
    ///  viewer.AutoRotate = true        'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),ps)
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream; printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Opens and prints a large Pdf file with specified page settings and printer settings. If your Pdf
    ///  file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to
    ///  get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="filePath">The path of Pdf file.</param>
    ///  <param name="pageSettings">The page settings.</param>
    ///  <param name="printerSettings">The printer settings.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;       //print the file with adjusted size
    ///  viewer.AutoRotate = true;       //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  PageSettings pgs = new PageSettings();
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
    ///  pgs.Margins = new Margins(0, 0, 0, 0);
    ///  viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true       'print the file with adjusted size
    ///  viewer.AutoRotate = true       'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  Dim pgs As PageSettings=new PageSettings()
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
    ///  pgs.Margins = new Margins(0, 0, 0, 0)
    ///  viewer.PrintLargePdf(@"d:\test.pdf",pgs,ps)
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintLargePdf(filePath: string; pageSettings: DDN.Aspose.Common.DNPageSettings; printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Opens and prints a large Pdf stream with specified page settings and printer settings. If your Pdf
    ///  file has hundreds of pages or more or its size is more than 3 MB, this method is recommended to
    ///  get better performance.
    ///</summary>
    ///<remarks>This method has integrated the opening and the printing of the file and you need not
    ///  calling the OpenPdfFile() explicitly. </remarks>
    ///  <param name="inputStream">The pdf stream to be opened and printed.</param>
    ///  <param name="pageSettings">The page settings.</param>
    ///  <param name="printerSettings">The printer settings.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.AutoResize = true;       //print the file with adjusted size
    ///  viewer.AutoRotate = true;       //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  PageSettings pgs = new PageSettings();
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
    ///  pgs.Margins = new Margins(0, 0, 0, 0);
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer();
    ///  viewer.AutoResize = true       'print the file with adjusted size
    ///  viewer.AutoRotate = true       'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  Dim pgs As PageSettings=new PageSettings()
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
    ///  pgs.Margins = new Margins(0, 0, 0, 0)
    ///  viewer.PrintLargePdf(new MemoryStream(File.ReadAllBytes(@"d:\middleware.pdf")),pgs,ps)
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintLargePdf(inputStream: DDN.mscorlib.DNStream; pageSettings: DDN.Aspose.Common.DNPageSettings; printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Get pages of current pdf file.
    ///</summary>
    ///<returns>return the array of Pdf page images.</returns>
    function DecodeAllPages: TArray<DDN.Aspose.Common.DNBitmap>;
    ///<summary>
    ///  Decodes a page of one Pdf file.
    ///</summary>
    ///  <param name="pageNumber">The page number of one Pdf file which must be between 1 and PageCount.</param>
    ///<returns>return the Pdf page image.</returns>
    function DecodePage(pageNumber: Int32): DDN.Aspose.Common.DNBitmap;
    ///<summary>
    ///  Prints the Pdf document with a setup dialog. Choose a printer using the dialog.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(@"d:\test.pdf");
    ///  viewer.AutoResize = true;         //print the file with adjusted size
    ///  viewer.AutoRotate = true;         //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintDocumentWithSetup();
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(@"d:\test.pdf")
    ///  viewer.AutoResize = true          'print the file with adjusted size
    ///  viewer.AutoRotate = true          'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintDocumentWithSetup()
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintDocumentWithSetup;
    ///<summary>
    ///  Prints the Pdf document with settings. If the document size is not complatible to page size, pdf.kit will extend it to fit page size.
    ///</summary>
    ///  <param name="pageSettings">The page setting of the printing document.</param>
    ///  <param name="printerSettings">The printer setting of the printing document.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(@"d:\test.pdf");
    ///  viewer.AutoResize = true;         //print the file with adjusted size
    ///  viewer.AutoRotate = true;         //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  PageSettings pgs = new PageSettings();
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169);
    ///  pgs.Margins = new Margins(0, 0, 0, 0);
    ///  viewer.PrintDocumentWithSettings(pgs, ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(@"d:\test.pdf")
    ///  viewer.AutoResize = true;           'print the file with adjusted size
    ///  viewer.AutoRotate = true;           'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  Dim pgs As PageSettings=new PageSettings()
    ///  pgs.PaperSize = new System.Drawing.Printing.PaperSize("A4", 827, 1169)
    ///  pgs.Margins = new Margins(0, 0, 0, 0)
    ///  viewer.PrintDocumentWithSettings(pgs, ps)
    ///  viewer.ClosePdfFile()
    ///</code><remarks>
    ///  printerSettings object is used to print the document.
    ///  pageSettings.PrinterSettings object is ignored.
    ///</remarks>
    ///</example>
    procedure PrintDocumentWithSettings(pageSettings: DDN.Aspose.Common.DNPageSettings; printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Prints the Pdf document with printer settings. The output page size will fit the the document first page size.
    ///</summary>
    ///  <param name="printerSettings">The printer setting of the printing document.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(@"d:\test.pdf");
    ///  viewer.AutoResize = true;         //print the file with adjusted size
    ///  viewer.AutoRotate = true;         //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  System.Drawing.Printing.PrinterSettings ps = new System.Drawing.Printing.PrinterSettings();
    ///  PrintDocument prtdoc = new PrintDocument();
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName;
    ///  viewer.PrintDocumentWithSettings(ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(@"d:\test.pdf")
    ///  viewer.AutoResize = true;        'print the file with adjusted size
    ///  viewer.AutoRotate = true;        'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  Dim ps As System.Drawing.Printing.PrinterSettings = new System.Drawing.Printing.PrinterSettings()
    ///  Dim prtdoc As PrintDocument = new PrintDocument()
    ///  ps.PrinterName = prtdoc.PrinterSettings.PrinterName
    ///  viewer.PrintDocumentWithSettings(ps);
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintDocumentWithSettings(printerSettings: DDN.Aspose.Common.DNPrinterSettings); overload;
    ///<summary>
    ///  Prints the Pdf document using default printer.
    ///</summary>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(@"d:\test.pdf");
    ///  viewer.AutoResize = true;         //print the file with adjusted size
    ///  viewer.AutoRotate = true;         //print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintDocument(ps);
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(@"d:\test.pdf")
    ///  viewer.AutoResize = true;         'print the file with adjusted size
    ///  viewer.AutoRotate = true;         'print the file with adjusted rotation
    ///  viewer.PrintPageDialog=false;//do not produce the page number dialog when printing
    ///  viewer.PrintDocument(ps);
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure PrintDocument;
    ///<summary>
    ///  Gets the default page settings.
    ///</summary>
    ///<returns>Page settings object.</returns>
    function GetDefaultPageSettings: DDN.Aspose.Common.DNPageSettings;
    ///<summary>
    ///  Gets the default printer settings.
    ///</summary>
    ///<returns>Printer settings object.</returns>
    function GetDefaultPrinterSettings: DDN.Aspose.Common.DNPrinterSettings;
    ///<summary>
    ///  Opens a Pdf file, but does not actually decode the pages of the Pdf file.
    ///</summary>
    ///  <param name="filePath">The path of Pdf file.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(@"d:\test.pdf");
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(@"d:\test.pdf")
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure OpenPdfFile(filePath: string); overload;
    ///<summary>
    ///  Opens a Pdf file stream. But does not actually decode the pages of the Pdf file.
    ///</summary>
    ///  <param name="inputStream">The pdf stream to be opened.</param>
    ///<example><code>
    ///  [C#]
    ///  PdfViewer viewer = new PdfViewer();
    ///  viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")));
    ///  viewer.ClosePdfFile();
    ///  [VisualBasic]
    ///  Dim viewer As PdfViewer = new PdfViewer()
    ///  viewer.OpenPdfFile(new MemoryStream(File.ReadAllBytes(@"d:\test.pdf")))
    ///  viewer.ClosePdfFile()
    ///</code></example>
    procedure OpenPdfFile(inputStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Closes the current Pdf file.
    ///</summary>
    procedure ClosePdfFile;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets flag that controls visibility of hidden areas on the page.
    ///</summary>
    property ShowHiddenAreas: Boolean read get_ShowHiddenAreas write set_ShowHiddenAreas;
    ///<summary>
    ///  Gets the result of printing job. If success than null; otherwise, exception object.
    ///</summary>
    property PrintStatus: DDN.mscorlib.DNObject read get_PrintStatus;
    ///<summary>
    ///  Gets/sets the using of conversion of pdf page into intermidiate png file during printing in file mode. Use it when the size of output file is important.
    ///</summary>
    property UseIntermidiateImage: Boolean read get_UseIntermidiateImage write set_UseIntermidiateImage;
    ///<summary>
    ///  Gets or sets the page coordinate type (Media/Crop boxes). CropBox value is used by default.
    ///</summary>
    property CoordinateType: DNPageCoordinateType read get_CoordinateType write set_CoordinateType;
    ///<summary>
    ///  Sets or gets a mode for PdfViewer to print as image.
    ///</summary>
    ///<remarks>
    ///  If true prints always as image (generates image that is printed)
    ///  If false prints directly to device if all features are supported. In case document contains non-supported features the system may automatically decide to print as image.
    ///  Default falue is false.
    ///</remarks>
    property PrintAsImage: Boolean read get_PrintAsImage write set_PrintAsImage;
    ///<summary>
    ///  Gets page count of the current Pdf file.
    ///</summary>
    ///<returns>return page count.</returns>
    property PageCount: Int32 read get_PageCount;
    ///<summary>
    ///  Gets or sets input document password.
    ///</summary>
    property Password: string read get_Password write set_Password;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether produce the page number dialog when printing.
    ///</summary>
    property PrintPageDialog: Boolean read get_PrintPageDialog write set_PrintPageDialog;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the page is being printed as grayscale. By default is false.
    ///</summary>
    ///<remarks>
    ///  Default falue is false.
    ///</remarks>
    property PrintAsGrayscale: Boolean read get_PrintAsGrayscale write set_PrintAsGrayscale;
    ///<summary>
    ///  Gets or sets name of document in printer queue when document is printed. Default value is file name.
    ///</summary>
    property PrinterJobName: string read get_PrinterJobName write set_PrinterJobName;
    ///<summary>
    ///  Gets or sets form presentation mode.
    ///</summary>
    property FormPresentationMode: DNFormPresentationMode read get_FormPresentationMode write set_FormPresentationMode;
    ///<summary>
    ///  Gets or sets rendering options.
    ///</summary>
    property RenderingOptions: DNRenderingOptions read get_RenderingOptions write set_RenderingOptions;
    ///<summary>
    ///  Gets or sets a value that indicates vertical alignment
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets a value that indicates horizontal alignment
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the file be printed with optimized size.
    ///<value>
    ///  If false print page without page scaling.
    ///  If true print page with scaling to fit to printable area.
    ///</value></summary>
    property AutoResize: Boolean read get_AutoResize write set_AutoResize;
    ///<summary>
    ///  Gets or sets a bool value that indicates whether the file be printed with auto rotation
    ///</summary>
    property AutoRotate: Boolean read get_AutoRotate write set_AutoRotate;
    ///<summary>
    ///  Gets or sets a AutoRotateMode value that indicates direction of rotation
    ///</summary>
    property AutoRotateMode: DNAutoRotateMode read get_AutoRotateMode write set_AutoRotateMode;
    ///<summary>
    ///  Gets or sets resolution during viewing and printing. The higher resolution, the slower speed. The default value is 150.
    ///</summary>
    property Resolution: Int32 read get_Resolution write set_Resolution;
    ///<summary>
    ///  Gets or sets a floating point value that indicates scale factor. The default value is 1.0.
    ///</summary>
    property ScaleFactor: Single read get_ScaleFactor write set_ScaleFactor;
  end;

  TDNPdfViewer = class(TDNGenericImport<DNPdfViewerClass, DNPdfViewer>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNReplaceTextStrategyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F390895-2B33-5276-84F0-B4D68CC1A6EB}']
  { constructors } 

    {class} function init: DNReplaceTextStrategy;

  end;

  ///<summary>
  ///  This class contains parameters which define PdfContentEditor behavior when ReplaceText operation is performed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ReplaceTextStrategy')]
  DNReplaceTextStrategy = interface(DDN.mscorlib.DNObject)
  ['{03DCB8BF-251C-3EBD-91ED-D7F0FDC89DCE}']
  { getters & setters } 

    function get_IsRegularExpressionUsed: Boolean;
    procedure set_IsRegularExpressionUsed(value: Boolean);
    function get_NoCharacterBehavior: DNFacades_ReplaceTextStrategy_NoCharacterAction;
    procedure set_NoCharacterBehavior(value: DNFacades_ReplaceTextStrategy_NoCharacterAction);
    function get_ReplaceScope: DNFacades_ReplaceTextStrategy_Scope;
    procedure set_ReplaceScope(value: DNFacades_ReplaceTextStrategy_Scope);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If false, string to find is a simple text. If true, string to find is regular expression.
    ///</summary>
    property IsRegularExpressionUsed: Boolean read get_IsRegularExpressionUsed write set_IsRegularExpressionUsed;
    ///<summary>
    ///  Action which is performed when no approppriate font found for changed text
    ///  (Throw exception / Substitute other font / Replace anyway).
    ///</summary>
    property NoCharacterBehavior: DNFacades_ReplaceTextStrategy_NoCharacterAction read get_NoCharacterBehavior write set_NoCharacterBehavior;
    ///<summary>
    ///  Scope of the replacement operation (replace first occurence or replace all occurences).
    ///</summary>
    property ReplaceScope: DNFacades_ReplaceTextStrategy_Scope read get_ReplaceScope write set_ReplaceScope;
  end;

  TDNReplaceTextStrategy = class(TDNGenericImport<DNReplaceTextStrategyClass, DNReplaceTextStrategy>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNFacades_StampClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B36CFC7B-A00D-528B-9D59-D21916F79B84}']
  { constructors } 

    {class} function init: DNFacades_Stamp;

  end;

  ///<summary>
  ///  Class represeting stamp.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Stamp')]
  DNFacades_Stamp = interface(DDN.mscorlib.DNObject)
  ['{556EE03D-DC59-3A6C-B0E9-4AACED5A89AB}']
  { getters & setters } 

    function get_StampId: Int32;
    procedure set_StampId(value: Int32);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_Opacity: Single;
    procedure set_Opacity(value: Single);
    function get_PageNumber: Int32;
    procedure set_PageNumber(value: Int32);
    function get_Pages: TArray<Int32>;
    procedure set_Pages(value: TArray<Int32>);
    function get_Rotation: Single;
    procedure set_Rotation(value: Single);
    function get_IsBackground: Boolean;
    procedure set_IsBackground(value: Boolean);
    function get_BlendingSpace: DNBlendingColorSpace;
    procedure set_BlendingSpace(value: DNBlendingColorSpace);

  { methods } 

    ///<summary>
    ///  Sets PDF file and number of page which will be used as stamp.
    ///</summary>
    ///  <param name="pdfFile">Path to PDF file.</param>
    ///  <param name="pageNumber">Number of page in PDF file</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Stamp();
    ///  //First page will be used as stamp.
    ///  stamp.BindPdf("stamp.pdf", 1);
    ///  stamp.IsBackground = true;
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    procedure BindPdf(pdfFile: string; pageNumber: Int32); overload;
    ///<summary>
    ///  Sets PDF file and number of page which will be used as stamp.
    ///</summary>
    ///  <param name="pdfStream">Stream which contains PDF document.</param>
    ///  <param name="pageNumber">Page index of the document whihc will be used as stamp.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Stamp();
    ///  //First page will be used as stamp.
    ///  Stream stream = new FileStream("stamp.pdf", FileMode.Open, FileAccess.Read);
    ///  stamp.BindPdf(stream, 1);
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    procedure BindPdf(pdfStream: DDN.mscorlib.DNStream; pageNumber: Int32); overload;
    ///<summary>
    ///  Sets image as a stamp.
    ///</summary>
    ///  <param name="imageFile">Image file name and path.</param>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Stamp();
    ///  stamp.BindImage("image.jpg");
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    procedure BindImage(imageFile: string); overload;
    ///<summary>
    ///  Sets text as stamp.
    ///</summary>
    ///  <param name="formattedText">FormattedText object which specifies text and text properties.</param>
    procedure BindLogo(formattedText: DNFormattedText);
    ///<summary>
    ///  Sets text state of stamp text.
    ///</summary>
    ///  <param name="textState">TextState object which specifies text properties.</param>
    procedure BindTextState(textState: DNTextState);
    ///<summary>
    ///  Sets position on page where stamp will be placed.
    ///</summary>
    ///  <param name="originX">X coordinate of the stamp.</param>
    ///  <param name="originY">Y coordinate of the stamp.</param>
    procedure SetOrigin(originX: Single; originY: Single);
    ///<summary>
    ///  Sets size of image stamp. Image will be scaled according to the specified values.
    ///</summary>
    ///  <param name="width">Image width.</param>
    ///  <param name="height">Image height.</param>
    procedure SetImageSize(width: Single; height: Single);
    ///<summary>
    ///  Sets image which will be used as stamp.
    ///</summary>
    ///  <param name="image">Stream which contains image data.</param>
    procedure BindImage(image: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets identifier of stamp.
    ///</summary>
    property StampId: Int32 read get_StampId write set_StampId;
    ///<summary>
    ///  Gets or sets quality of image stamp in percent. Valiued values 0..100%.
    ///</summary>
    property Quality: Int32 read get_Quality write set_Quality;
    ///<summary>
    ///  Gets or sets opacity of the stamp.
    ///</summary>
    property Opacity: Single read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets page number.
    ///</summary>
    property PageNumber: Int32 read get_PageNumber write set_PageNumber;
    ///<summary>
    ///  Gets or sets array with numbers of pages which will be affected by stamp.
    ///  If Pages = null all pages of the document are affected.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Aspose.Pdf.Facades.Stamp();
    ///  stamp.BindLogo(new FormattedText(text));
    ///  //put stamp only on 1st, 4th and 6th page.
    ///  stamp.Pages = new int[] { 1, 4, 6 };
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    property Pages: TArray<Int32> read get_Pages write set_Pages;
    ///<summary>
    ///  Gets or sets rotation of the stamp in degrees.
    ///</summary>
    ///<example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Stamp();
    ///  stamp.BindLogo(new FormattedText("STAMP"));
    ///  stamp.Rotation = 90;
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    property Rotation: Single read get_Rotation write set_Rotation;
    ///<summary>
    ///  Gets or sets background status. If true stamp will be placed as background of the spamped page.
    ///  By default is set to false.
    ///</summary>
    ///  /// <example><code lang="C#">
    ///  PdfFileStamp fileStamp = new PdfFileStamp("input.pdf", "output.pdf");
    ///  Stamp stamp = new Stamp();
    ///  stamp.BindLogo(new FormattedText("STAMP"));
    ///  stamp.IsBackground = true;
    ///  fileStamp.AddStamp(stamp);
    ///  fileStamp.Close();
    ///</code></example>
    property IsBackground: Boolean read get_IsBackground write set_IsBackground;
    ///<summary>
    ///  Gets or sets a BlendingColorSpace value that defines a color space
    ///  that is used to perform transparency and blending operations on the page.
    ///</summary>
    property BlendingSpace: DNBlendingColorSpace read get_BlendingSpace write set_BlendingSpace;
  end;

  TDNFacades_Stamp = class(TDNGenericImport<DNFacades_StampClass, DNFacades_Stamp>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNStampInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1DD904CA-ACD0-5D83-A1E8-A4B96A23D7A3}']
  end;

  ///<summary>
  ///  Class representing stamp information.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.StampInfo')]
  DNStampInfo = interface(DDN.mscorlib.DNObject)
  ['{E07B8DBA-2E4C-3095-A6FD-C6444D3CAD48}']
  { getters & setters } 

    function get_StampId: Int32;
    function get_IndexOnPage: Int32;
    function get_StampType: DNStampType;
    function get_Rectangle: DNRectangle;
    function get_Image: DDN.Aspose.Common.DNImage;
    function get_Form: DNXForm;
    function get_Text: string;
    function get_Visible: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets identifier of the stamp.
    ///</summary>
    property StampId: Int32 read get_StampId;
    ///<summary>
    ///  Gets stamp index on the page.
    ///</summary>
    property IndexOnPage: Int32 read get_IndexOnPage;
    ///<summary>
    ///  Gets stamp type (image / form).
    ///</summary>
    property StampType: DNStampType read get_StampType;
    ///<summary>
    ///  Gets rectangle where stamp is placed.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets image of stamp. May be null if stamp does not contain images (for example for text stamp).
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image;
    ///<summary>
    ///  Gets XForm of the stamp.
    ///</summary>
    property Form: DNXForm read get_Form;
    ///<summary>
    ///  Gets text in the stamp.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets visibility of stamp. If false then stamp is hidden (with HideStampById). Hidden stamp may be restored by ShowStampById.
    ///</summary>
    property Visible: Boolean read get_Visible;
  end;

  TDNStampInfo = class(TDNGenericImport<DNStampInfoClass, DNStampInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNTextPropertiesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{14CEF176-F67C-544B-AF50-09173D59BC8A}']
  { constructors } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.Facades.TextProperties" />
    ///  object for the specified text size
    ///</summary>
    ///  <param name="textSize">Text size value.</param>
    {class} function init(textSize: Double): DNTextProperties;

  end;

  ///<summary>
  ///  Represents text properties such as: text size, color, style etc.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.TextProperties')]
  DNTextProperties = interface(DDN.mscorlib.DNObject)
  ['{974DD8FE-9BCE-323A-AEB7-30479FE03853}']
  { getters & setters } 

    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_IsColorSpecified: Boolean;
    function get_TextSize: Double;
    procedure set_TextSize(value: Double);
    function get_IsTextSizeSpecified: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text color.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.Color" />
    ///  property is specified.
    ///</summary>
    property IsColorSpecified: Boolean read get_IsColorSpecified;
    ///<summary>
    ///  Gets or sets text size.
    ///</summary>
    property TextSize: Double read get_TextSize write set_TextSize;
    ///<summary>
    ///  Gets or sets a value that indicates whether the <see cref="P:Aspose.Pdf.Facades.TextProperties.TextSize" />
    ///  property is specified.
    ///</summary>
    property IsTextSizeSpecified: Boolean read get_IsTextSizeSpecified;
  end;

  TDNTextProperties = class(TDNGenericImport<DNTextPropertiesClass, DNTextProperties>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNVerticalAlignmentTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E35FDBB-5070-57A5-A43A-11C6E1CAF928}']
  { constructors } 

    ///<summary>
    ///  Initializes vertical alignment by its name.
    ///</summary>
    ///  <param name="name">Vertical alignment type name.</param>
    {class} function init(name: string): DNVerticalAlignmentType;

  { static fields getter & setter } 

   function __fakeFieldGet_Top: DNVerticalAlignmentType;
   function __fakeFieldGet_Center: DNVerticalAlignmentType;
   function __fakeFieldGet_Bottom: DNVerticalAlignmentType;

  { static fields } 

    ///<summary>
    ///  Top alignment.
    ///</summary>
    {class} property Top: DNVerticalAlignmentType read __fakeFieldGet_Top;
    ///<summary>
    ///  Center alignment type.
    ///</summary>
    {class} property Center: DNVerticalAlignmentType read __fakeFieldGet_Center;
    ///<summary>
    ///  Bottom alignment type.
    ///</summary>
    {class} property Bottom: DNVerticalAlignmentType read __fakeFieldGet_Bottom;

  end;

  ///<summary>
  ///  Class representing possible vertical alignment values.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.VerticalAlignmentType')]
  DNVerticalAlignmentType = interface(DDN.mscorlib.DNObject)
  ['{42D220C2-E0E4-35F5-8C06-069039B91D1E}']
  { methods } 

    ///<summary>
    ///  Returns string representation.
    ///</summary>
    ///<returns>Name value.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNVerticalAlignmentType = class(TDNGenericImport<DNVerticalAlignmentTypeClass, DNVerticalAlignmentType>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNViewerPreferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{567B43D0-B2F0-51E9-AFAF-CE4810D8FF5E}']
  { constructors } 

    {class} function init: DNViewerPreference;

  { static fields getter & setter } 

   function __fakeFieldGet_PageModeUseOC: Int32;
   function __fakeFieldGet_DisplayDocTitle: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseOC: Int32;
   function __fakeFieldGet_PageLayoutSinglePage: Int32;
   function __fakeFieldGet_PageLayoutOneColumn: Int32;
   function __fakeFieldGet_PageLayoutTwoColumnLeft: Int32;
   function __fakeFieldGet_PageLayoutTwoColumnRight: Int32;
   function __fakeFieldGet_PageModeUseNone: Int32;
   function __fakeFieldGet_PageModeUseOutlines: Int32;
   function __fakeFieldGet_PageModeUseThumbs: Int32;
   function __fakeFieldGet_PageModeFullScreen: Int32;
   function __fakeFieldGet_PageModeUseAttachment: Int32;
   function __fakeFieldGet_HideToolbar: Int32;
   function __fakeFieldGet_HideMenubar: Int32;
   function __fakeFieldGet_HideWindowUI: Int32;
   function __fakeFieldGet_FitWindow: Int32;
   function __fakeFieldGet_CenterWindow: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseNone: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseOutlines: Int32;
   function __fakeFieldGet_NonFullScreenPageModeUseThumbs: Int32;
   function __fakeFieldGet_DirectionL2R: Int32;
   function __fakeFieldGet_DirectionR2L: Int32;
   function __fakeFieldGet_Simplex: Int32;
   function __fakeFieldGet_DuplexFlipShortEdge: Int32;
   function __fakeFieldGet_DuplexFlipLongEdge: Int32;

  { static fields } 

    ///<summary>
    ///  Optional content group panel visible.
    ///</summary>
    {class} property PageModeUseOC: Int32 read __fakeFieldGet_PageModeUseOC;
    ///<summary>
    ///  A flag specifying whether the window�s title bar should display the document title
    ///</summary>
    {class} property DisplayDocTitle: Int32 read __fakeFieldGet_DisplayDocTitle;
    ///<summary>
    ///  Optional content group panel visible.
    ///</summary>
    {class} property NonFullScreenPageModeUseOC: Int32 read __fakeFieldGet_NonFullScreenPageModeUseOC;
    ///<summary>
    ///  Display one page at a time.
    ///</summary>
    {class} property PageLayoutSinglePage: Int32 read __fakeFieldGet_PageLayoutSinglePage;
    ///<summary>
    ///  Display the pages in one column.
    ///</summary>
    {class} property PageLayoutOneColumn: Int32 read __fakeFieldGet_PageLayoutOneColumn;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the right
    ///</summary>
    {class} property PageLayoutTwoColumnLeft: Int32 read __fakeFieldGet_PageLayoutTwoColumnLeft;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the right.
    ///</summary>
    {class} property PageLayoutTwoColumnRight: Int32 read __fakeFieldGet_PageLayoutTwoColumnRight;
    ///<summary>
    ///  Neither document outline nor thumbnail images visible
    ///</summary>
    {class} property PageModeUseNone: Int32 read __fakeFieldGet_PageModeUseNone;
    ///<summary>
    ///  Document outline visible.
    ///</summary>
    {class} property PageModeUseOutlines: Int32 read __fakeFieldGet_PageModeUseOutlines;
    ///<summary>
    ///  Thumbnail images visible.
    ///</summary>
    {class} property PageModeUseThumbs: Int32 read __fakeFieldGet_PageModeUseThumbs;
    ///<summary>
    ///  Full-screen mode, with no menu bar, window controls, or any other window visible.
    ///</summary>
    {class} property PageModeFullScreen: Int32 read __fakeFieldGet_PageModeFullScreen;
    ///<summary>
    ///  Page mode with attacments.
    ///</summary>
    {class} property PageModeUseAttachment: Int32 read __fakeFieldGet_PageModeUseAttachment;
    ///<summary>
    ///  A flag specifying whether to hide the conforming reader�s tool bars when the document is active.
    ///</summary>
    {class} property HideToolbar: Int32 read __fakeFieldGet_HideToolbar;
    ///<summary>
    ///  A flag specifying whether to hide the conforming reader�s menu bar when the document is active.
    ///</summary>
    {class} property HideMenubar: Int32 read __fakeFieldGet_HideMenubar;
    ///<summary>
    ///  A flag specifying whether to hide user interface elements in the document�s window (such as scroll bars and navigation controls), leaving only the document�s contents displayed.
    ///</summary>
    {class} property HideWindowUI: Int32 read __fakeFieldGet_HideWindowUI;
    ///<summary>
    ///  A flag specifying whether to resize the document�s window to fit the size of the first displayed page.
    ///</summary>
    {class} property FitWindow: Int32 read __fakeFieldGet_FitWindow;
    ///<summary>
    ///  A flag specifying whether to position the document�s window in the center of the screen.
    ///</summary>
    {class} property CenterWindow: Int32 read __fakeFieldGet_CenterWindow;
    ///<summary>
    ///  Neither document outline nor thumbnail images visible.
    ///</summary>
    {class} property NonFullScreenPageModeUseNone: Int32 read __fakeFieldGet_NonFullScreenPageModeUseNone;
    ///<summary>
    ///  Document outline visible.
    ///</summary>
    {class} property NonFullScreenPageModeUseOutlines: Int32 read __fakeFieldGet_NonFullScreenPageModeUseOutlines;
    ///<summary>
    ///  Thumbnail images visible
    ///</summary>
    {class} property NonFullScreenPageModeUseThumbs: Int32 read __fakeFieldGet_NonFullScreenPageModeUseThumbs;
    ///<summary>
    ///  Text reading order left to right.
    ///</summary>
    {class} property DirectionL2R: Int32 read __fakeFieldGet_DirectionL2R;
    ///<summary>
    ///  Text reading order right to left.
    ///</summary>
    {class} property DirectionR2L: Int32 read __fakeFieldGet_DirectionR2L;
    ///<summary>
    ///  Print single-sided.
    ///</summary>
    {class} property Simplex: Int32 read __fakeFieldGet_Simplex;
    ///<summary>
    ///  Duplex and flip on the short edge of the sheet.
    ///</summary>
    {class} property DuplexFlipShortEdge: Int32 read __fakeFieldGet_DuplexFlipShortEdge;
    ///<summary>
    ///  Duplex and flip on the short edge of the sheet.
    ///</summary>
    {class} property DuplexFlipLongEdge: Int32 read __fakeFieldGet_DuplexFlipLongEdge;

  end;

  ///<summary>
  ///  Describes viewer prefereces (page mode, non full screen page mode, page layout).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ViewerPreference')]
  DNViewerPreference = interface(DDN.mscorlib.DNObject)
  ['{56FF072F-BFDF-32C6-A414-19C2FA4CD64F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNViewerPreference = class(TDNGenericImport<DNViewerPreferenceClass, DNViewerPreference>)
  public const
    ///<summary>
    ///  Optional content group panel visible.
    ///</summary>
   PageModeUseOC = 1048576;
    ///<summary>
    ///  A flag specifying whether the window�s title bar should display the document title
    ///</summary>
   DisplayDocTitle = 262144;
    ///<summary>
    ///  Optional content group panel visible.
    ///</summary>
   NonFullScreenPageModeUseOC = 524288;
    ///<summary>
    ///  Display one page at a time.
    ///</summary>
   PageLayoutSinglePage = 1;
    ///<summary>
    ///  Display the pages in one column.
    ///</summary>
   PageLayoutOneColumn = 2;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the right
    ///</summary>
   PageLayoutTwoColumnLeft = 4;
    ///<summary>
    ///  Display the pages in two columns, with odd-numbered pages on the right.
    ///</summary>
   PageLayoutTwoColumnRight = 8;
    ///<summary>
    ///  Neither document outline nor thumbnail images visible
    ///</summary>
   PageModeUseNone = 16;
    ///<summary>
    ///  Document outline visible.
    ///</summary>
   PageModeUseOutlines = 32;
    ///<summary>
    ///  Thumbnail images visible.
    ///</summary>
   PageModeUseThumbs = 64;
    ///<summary>
    ///  Full-screen mode, with no menu bar, window controls, or any other window visible.
    ///</summary>
   PageModeFullScreen = 128;
    ///<summary>
    ///  Page mode with attacments.
    ///</summary>
   PageModeUseAttachment = 2097152;
    ///<summary>
    ///  A flag specifying whether to hide the conforming reader�s tool bars when the document is active.
    ///</summary>
   HideToolbar = 256;
    ///<summary>
    ///  A flag specifying whether to hide the conforming reader�s menu bar when the document is active.
    ///</summary>
   HideMenubar = 512;
    ///<summary>
    ///  A flag specifying whether to hide user interface elements in the document�s window (such as scroll bars and navigation controls), leaving only the document�s contents displayed.
    ///</summary>
   HideWindowUI = 1024;
    ///<summary>
    ///  A flag specifying whether to resize the document�s window to fit the size of the first displayed page.
    ///</summary>
   FitWindow = 2048;
    ///<summary>
    ///  A flag specifying whether to position the document�s window in the center of the screen.
    ///</summary>
   CenterWindow = 4096;
    ///<summary>
    ///  Neither document outline nor thumbnail images visible.
    ///</summary>
   NonFullScreenPageModeUseNone = 8192;
    ///<summary>
    ///  Document outline visible.
    ///</summary>
   NonFullScreenPageModeUseOutlines = 16384;
    ///<summary>
    ///  Thumbnail images visible
    ///</summary>
   NonFullScreenPageModeUseThumbs = 32768;
    ///<summary>
    ///  Text reading order left to right.
    ///</summary>
   DirectionL2R = 65536;
    ///<summary>
    ///  Text reading order right to left.
    ///</summary>
   DirectionR2L = 131072;
    ///<summary>
    ///  Print single-sided.
    ///</summary>
   Simplex = 4194304;
    ///<summary>
    ///  Duplex and flip on the short edge of the sheet.
    ///</summary>
   DuplexFlipShortEdge = 8388608;
    ///<summary>
    ///  Duplex and flip on the short edge of the sheet.
    ///</summary>
   DuplexFlipLongEdge = 16777216;
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileParamsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E4A707E-5166-5D58-943A-6094850857A2}']
  { constructors } 

    ///<summary>
    ///  Constructor for FileParams class.
    ///</summary>
    ///  <param name="spec">File specification.</param>
    {class} function init(spec: DNFileSpecification): DNFileParams;

  end;

  ///<summary>
  ///  Defines an embedded file parameter dictionary that shall contain additional file-specific information.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FileParams')]
  DNFileParams = interface(DDN.mscorlib.DNObject)
  ['{3F375712-09D4-373A-85FC-FF56918AE402}']
  { getters & setters } 

    function get_Size: Int32;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    procedure set_CreationDate(value: DDN.mscorlib.DNDateTime);
    function get_ModDate: DDN.mscorlib.DNDateTime;
    procedure set_ModDate(value: DDN.mscorlib.DNDateTime);
    function get_CheckSum: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The size of the uncompressed embedded file, in bytes.
    ///</summary>
    property Size: Int32 read get_Size;
    ///<summary>
    ///  The date and time when the embedded file was created.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate write set_CreationDate;
    ///<summary>
    ///  The date and time when the embedded file was last modified.
    ///</summary>
    property ModDate: DDN.mscorlib.DNDateTime read get_ModDate write set_ModDate;
    ///<summary>
    ///  A 16-byte string that is the checksum of the bytes of the uncompressed embedded file.
    ///  The checksum is calculated by applying the standard MD5 message-digest algorithm
    ///  to the bytes of the embedded file stream.
    ///</summary>
    property CheckSum: string read get_CheckSum;
  end;

  TDNFileParams = class(TDNGenericImport<DNFileParamsClass, DNFileParams>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileSpecificationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4308C8BA-B82A-5D90-9AC3-029648100FEC}']
  { constructors } 

    ///<summary>
    ///  Constructor for FileSpecification
    ///</summary>
    ///  <param name="file">File path.</param>
    {class} function init(&file: string): DNFileSpecification; overload;
    ///<summary>
    ///  Constructor for file specification.
    ///</summary>
    ///  <param name="stream">Stream containing data file.</param>
    ///  <param name="name">File specification.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; name: string): DNFileSpecification; overload;
    ///<summary>
    ///  Constructor for FileSpecification.
    ///</summary>
    ///  <param name="file">File path.</param>
    ///  <param name="description">File description. </param>
    {class} function init(&file: string; description: string): DNFileSpecification; overload;
    ///<summary>
    ///  Constructor for FileSpecification.
    ///</summary>
    ///  <param name="stream">Stream to be used in the document.</param>
    ///  <param name="name">A file specification string.</param>
    ///  <param name="description">File description.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; name: string; description: string): DNFileSpecification; overload;
    ///<summary>
    ///  Constructor for FileSpecification.
    ///</summary>
    ///  <param name="fileName">File path.</param>
    ///  <param name="annot">The annotation.</param>
    {class} function init(fileName: string; annot: DNAnnotation): DNFileSpecification; overload;
    ///<summary>
    ///  Create new empty file specification.
    ///</summary>
    {class} function init: DNFileSpecification; overload;

  end;

  ///<summary>
  ///  Class representing embedded file.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FileSpecification')]
  DNFileSpecification = interface(DDN.mscorlib.DNObject)
  ['{4F0EF4DB-4AAA-30AC-961D-3D28B9493BE0}']
  { getters & setters } 

    function get_Encoding: DNFileEncoding;
    procedure set_Encoding(value: DNFileEncoding);
    function get_IncludeContents: Boolean;
    procedure set_IncludeContents(value: Boolean);
    function get_EncryptedPayload: DNEncryptedPayload;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_AFRelationship: DNAFRelationship;
    procedure set_AFRelationship(value: DNAFRelationship);
    function get_StreamContents: DDN.mscorlib.DNStream;
    function get_Contents: DDN.mscorlib.DNStream;
    procedure set_Contents(value: DDN.mscorlib.DNStream);
    function get_Params: DNFileParams;
    procedure set_Params(value: DNFileParams);
    function get_MIMEType: string;
    procedure set_MIMEType(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_UnicodeName: string;
    procedure set_UnicodeName(value: string);
    function get_FileSystem: string;
    procedure set_FileSystem(value: string);

  { methods } 

    ///<summary>
    ///  Gets application-specific parameter.
    ///</summary>
    ///  <param name="key">Parameter name.</param>
    ///<returns></returns>
    function GetValue(key: string): string;
    ///<summary>
    ///  Sets application-specific parameter.
    ///</summary>
    ///  <param name="key">Parameter name.</param>
    ///  <param name="value">New parameter value.</param>
    procedure SetValue(key: string; value: string);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets encoding format.
    ///  Possible values: Zip - file is compressed with ZIP,
    ///  None - file is not compressed.
    ///</summary>
    property Encoding: DNFileEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  If true, contents of the file will be included in the file specification.
    ///</summary>
    property IncludeContents: Boolean read get_IncludeContents write set_IncludeContents;
    ///<summary>
    ///  Gets encrypted payload.
    ///</summary>
    property EncryptedPayload: DNEncryptedPayload read get_EncryptedPayload;
    ///<summary>
    ///  Gets or sets text associated with the file specification.
    ///</summary>
    property Description: string read get_Description write set_Description;
    ///<summary>
    ///  Associated file Relationship.
    ///</summary>
    property AFRelationship: DNAFRelationship read get_AFRelationship write set_AFRelationship;
    ///<summary>
    ///  Gets contents of file as stream.
    ///  Contents is not loaded into memory which allows to decrease memory usage.
    ///  But this stream does not support positioning and Length property. If you need this features please use Contents property instead.
    ///</summary>
    property StreamContents: DDN.mscorlib.DNStream read get_StreamContents;
    ///<summary>
    ///  Gets or sets contents file.
    ///  This property returns data loaded in memory which may cause Out of memory exception for large data.
    ///  To decrease memory usage please use StreamContents.
    ///</summary>
    property Contents: DDN.mscorlib.DNStream read get_Contents write set_Contents;
    ///<summary>
    ///  Gets file paramteres.
    ///</summary>
    property Params: DNFileParams read get_Params write set_Params;
    ///<summary>
    ///  Gets subtype of the embedded file
    ///</summary>
    property MIMEType: string read get_MIMEType write set_MIMEType;
    ///<summary>
    ///  Gets or sets file specification name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets file specification unicode name.
    ///</summary>
    property UnicodeName: string read get_UnicodeName write set_UnicodeName;
    ///<summary>
    ///  Gets or sets name of the file system.
    ///</summary>
    property FileSystem: string read get_FileSystem write set_FileSystem;
  end;

  TDNFileSpecification = class(TDNGenericImport<DNFileSpecificationClass, DNFileSpecification>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNDocMDPSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A95B73D5-6183-5C5E-8BC0-0978E479B26D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Forms.DocMDPSignature" />
    ///  class.
    ///</summary>
    ///  <param name="signature">The signature object that used during signing.</param>
    ///  <param name="accessPermissions">The access permissions granted for this document.</param>
    {class} function init(signature: DNSignature; accessPermissions: DNDocMDPAccessPermissions): DNDocMDPSignature;

  end;

  ///<summary>
  ///  Represents the class of document MDP (modification detection and prevention) signature type.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.DocMDPSignature')]
  DNDocMDPSignature = interface(DDN.mscorlib.DNObject)
  ['{891D7207-70CF-3D06-94B5-E4F1EDD5B050}']
  { getters & setters } 

    function get_AccessPermissions: DNDocMDPAccessPermissions;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns the access permissions granted for this document.
    ///</summary>
    property AccessPermissions: DNDocMDPAccessPermissions read get_AccessPermissions;
  end;

  TDNDocMDPSignature = class(TDNGenericImport<DNDocMDPSignatureClass, DNDocMDPSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNForms_FormClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F0BECC13-DE68-5D26-94FA-5A37360382E7}']
  { static getter & setter } 

    procedure set_CalculatedFields(value: DDN.mscorlib.DNIEnumerable<DNField>);

  { static propertys } 

    ///<summary>
    ///  Allows to set order of field calculation.
    ///</summary>
    {class} property CalculatedFields: DDN.mscorlib.DNIEnumerable<DNField> write set_CalculatedFields;
  end;

  ///<summary>
  ///  Class representing form object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Form')]
  DNForms_Form = interface(DDN.mscorlib.DNICollection<DNWidgetAnnotation>)
  ['{EDF53F16-AA0D-3736-AC32-AE4F7F2B4917}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_AutoRecalculate: Boolean;
    procedure set_AutoRecalculate(value: Boolean);
    function get_Count: Int32;
    function get_DefaultResources: DNResources;
    function get_DefaultAppearance: DNDefaultAppearance;
    procedure set_DefaultAppearance(value: DNDefaultAppearance);
    function get_XFA: DNXFA;
    function get_IgnoreNeedsRendering: Boolean;
    procedure set_IgnoreNeedsRendering(value: Boolean);
    function get_RemovePermission: Boolean;
    procedure set_RemovePermission(value: Boolean);
    function get_EmulateRequierdGroups: Boolean;
    procedure set_EmulateRequierdGroups(value: Boolean);
    function get_Type: DNFormType;
    procedure set_Type(value: DNFormType);
    function get_Item(name: string): DNWidgetAnnotation; overload;
    function get_Item(index: Int32): DNWidgetAnnotation; overload;
    function get_Fields: TArray<DNField>;
    procedure set_CalculatedFields(value: DDN.mscorlib.DNIEnumerable<DNField>);
    function get_SignaturesExist: Boolean;
    procedure set_SignaturesExist(value: Boolean);
    function get_SignaturesAppendOnly: Boolean;
    procedure set_SignaturesAppendOnly(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_SignDependentElementsRenderingModeWhenConverted: DNForm_SignDependentElementsRenderingModes;
   procedure __fakeFieldSet_SignDependentElementsRenderingModeWhenConverted(value: DNForm_SignDependentElementsRenderingModes);

  { fields } 

    ///<summary>
    ///  Forms can contain signing information, i.e. can be signed or unsigned.
    ///  And form's view sometimes must depend on whether form is signed or not.
    ///  This property tells to form's converter (f.e. during conversion XFA form to Standard form)
    ///  whether result form must be rendered as signed or as unsigned.
    ///</summary>
   property SignDependentElementsRenderingModeWhenConverted: DNForm_SignDependentElementsRenderingModes read __fakeFieldGet_SignDependentElementsRenderingModeWhenConverted write __fakeFieldSet_SignDependentElementsRenderingModeWhenConverted;

  { methods } 

    ///<summary>
    ///  Copies fields placed on the form into array.
    ///</summary>
    ///  <param name="array">Array where fields must be placed.</param>
    ///  <param name="index">Starting index.</param>
    procedure CopyTo(&array: TArray<DNField>; index: Int32);
    ///<summary>
    ///  Gets enumeration of form fields.
    ///</summary>
    ///<returns>Field enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNWidgetAnnotation>;
    ///<summary>
    ///  Adds field on the form.
    ///</summary>
    ///  <param name="field">Field which must be added.</param>
    ///  <param name="pageNumber">Page index where added field will be placed.</param>
    procedure Add(field: DNField; pageNumber: Int32); overload;
    ///<summary>
    ///  Adds field on the form.
    ///</summary>
    ///  <param name="field">Field which must be added.</param>
    procedure Add(field: DNField); overload;
    ///<summary>
    ///  Delete field from the form.
    ///</summary>
    ///  <param name="field">Field which must be deleted.</param>
    procedure Delete(field: DNField); overload;
    ///<summary>
    ///  Deletes field from the form by its name.
    ///</summary>
    ///  <param name="fieldName">Name of the filed which must be deleted.</param>
    procedure Delete(fieldName: string); overload;
    ///<summary>
    ///  Removes all form fields and place their values directly on the page.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Adds new field to the form; If this field is already placed on other or this form, the copy of field is created.
    ///</summary>
    ///  <param name="field">Field name.</param>
    ///  <param name="partialName">Name of field on the form.</param>
    ///  <param name="pageNumber">Page number where field will be added.</param>
    ///<returns>Added field returned. If copy of the field was created it will be returned.</returns>
    function Add(field: DNField; partialName: string; pageNumber: Int32): DNField; overload;
    ///<summary>
    ///  Adds additional appearance of the field to specified page of the document in the specified location.
    ///</summary>
    ///  <param name="field">Field which appearance should be added on form.</param>
    ///  <param name="pageNumber">Number of the page where field must be placed.</param>
    ///  <param name="rect">Rectangle where field will be placed.</param>
    procedure AddFieldAppearance(field: DNField; pageNumber: Int32; rect: DNRectangle);
    ///<summary>
    ///  Sets XFA of the form to specified value.
    ///</summary>
    ///  <param name="xml">Xml document which concains new XFA data.</param>
    procedure AssignXfa(xml: DDN.Aspose.Common.DNXmlDocument);
    ///<summary>
    ///  Returns fields inside of specified rectangle.
    ///</summary>
    ///  <param name="rect">Rectangle where fields should be found.</param>
    ///<returns>Array with found fields.</returns>
    function GetFieldsInRect(rect: DNRectangle): TArray<DNField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns true if object is thread-safe.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  If set, all form fields will be recalculated when any field is changed. Default value is true. Set to false in order to increase performance when filling form with large amount of calculated fields.
    ///</summary>
    property AutoRecalculate: Boolean read get_AutoRecalculate write set_AutoRecalculate;
    ///<summary>
    ///  Gets number of the fields on this form.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets default resources placed on this form.
    ///</summary>
    property DefaultResources: DNResources read get_DefaultResources;
    ///<summary>
    ///  Gets or sets default appearance of the form (object which describes default font, text size and color for fields on the form).
    ///</summary>
    property DefaultAppearance: DNDefaultAppearance read get_DefaultAppearance write set_DefaultAppearance;
    ///<summary>
    ///  Gets XFA data of the form (if presents).
    ///</summary>
    property XFA: DNXFA read get_XFA;
    ///<summary>
    ///  If this property is true the value of NeedsRendering key will be ignored during conversion
    ///  XFA form to Standard form. It is false by default.
    ///</summary>
    property IgnoreNeedsRendering: Boolean read get_IgnoreNeedsRendering write set_IgnoreNeedsRendering;
    ///<summary>
    ///  If this property is true the "Perms" dictionary will be removed from the pdf document after conversion
    ///  dynamic documents to standard. The "Perms" dictionary can contain a rules that disturb displaying selection of
    ///  mandatory fields in Adobe Acrobat reader.
    ///  It is false by default.
    ///</summary>
    property RemovePermission: Boolean read get_RemovePermission write set_RemovePermission;
    ///<summary>
    ///  If this property is true then additional red boundary rectangles will be drawn for required Xfa exclGroup elements containers
    ///  This property was introduced because absences of analogues for the exclGroup during conversion Xfa representation of forms
    ///  to standard.
    ///  It is false by default.
    ///</summary>
    property EmulateRequierdGroups: Boolean read get_EmulateRequierdGroups write set_EmulateRequierdGroups;
    ///<summary>
    ///  Gets type of the form. Possible values are: Standard, Static, Dynamic.
    ///</summary>
    property &Type: DNFormType read get_Type write set_Type;
    property Item[name: string]: DNWidgetAnnotation read get_Item; default;
    property Item[index: Int32]: DNWidgetAnnotation read get_Item; default;
    ///<summary>
    ///  Gets list of all fields in lowest level of hierarhical form.
    ///</summary>
    property Fields: TArray<DNField> read get_Fields;
    ///<summary>
    ///  Allows to set order of field calculation.
    ///</summary>
    property CalculatedFields: DDN.mscorlib.DNIEnumerable<DNField> write set_CalculatedFields;
    ///<summary>
    ///  If set, the document contains at least one signature field.
    ///</summary>
    property SignaturesExist: Boolean read get_SignaturesExist write set_SignaturesExist;
    ///<summary>
    ///  If set, the document contains signatures that may be invalidated if the file is saved (written) in a way that alters its previous contents,
    ///  as opposed to an incremental update.
    ///</summary>
    property SignaturesAppendOnly: Boolean read get_SignaturesAppendOnly write set_SignaturesAppendOnly;
  end;

  TDNForms_Form = class(TDNGenericImport<DNForms_FormClass, DNForms_Form>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNForm_FlattenSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D9A03C33-E58D-53B6-AFE0-A9DB72B4115F}']
  { constructors } 

    {class} function init: DNForm_FlattenSettings;

  end;

  ///<summary>
  ///  Class which describes settings for Form flattening procedure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Form+FlattenSettings')]
  DNForm_FlattenSettings = interface(DDN.mscorlib.DNObject)
  ['{E2821FF2-4C39-35DC-BB43-D3C09024C38F}']
  { getters & setters } 

    function get_UpdateAppearances: Boolean;
    procedure set_UpdateAppearances(value: Boolean);
    function get_CallEvents: Boolean;
    procedure set_CallEvents(value: Boolean);
    function get_HideButtons: Boolean;
    procedure set_HideButtons(value: Boolean);
    function get_ApplyRedactions: Boolean;
    procedure set_ApplyRedactions(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If set, all field appearances will be regenerated before flattening. This option may help if field is incorrectly flattened.
    ///  This option may decrease performance. By default set to false.
    ///</summary>
    property UpdateAppearances: Boolean read get_UpdateAppearances write set_UpdateAppearances;
    ///<summary>
    ///  If set, formatting and other JavaScript events will be called. True by default.
    ///</summary>
    property CallEvents: Boolean read get_CallEvents write set_CallEvents;
    ///<summary>
    ///  If set, buttons will be removed from flattened document. False by default.
    ///</summary>
    property HideButtons: Boolean read get_HideButtons write set_HideButtons;
    ///<summary>
    ///  If true, redaction specified Redaction annotation will be applied
    ///</summary>
    property ApplyRedactions: Boolean read get_ApplyRedactions write set_ApplyRedactions;
  end;

  TDNForm_FlattenSettings = class(TDNGenericImport<DNForm_FlattenSettingsClass, DNForm_FlattenSettings>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNIconFitClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FA66ECD8-C5A9-5ADB-A921-6EC74227DF47}']
  { static methods } 

    ///<summary>
    ///  Converts name of scaling reason into ScalingReason object.
    ///</summary>
    ///  <param name="reason">Name of scaling reason. </param>
    ///<returns>Scaling reason object.</returns>
    {class} function NameToScalingReason(reason: string): DNScalingReason;
    ///<summary>
    ///  Converts scaling reason obejct to name.
    ///</summary>
    ///  <param name="reason">Scaling reason object to be converted.</param>
    ///<returns>Name of scaling reasong.</returns>
    {class} function ScalingReasonToName(reason: DNScalingReason): string;
    ///<summary>
    ///  Converts scaling mode name into ScalingMode object.
    ///</summary>
    ///  <param name="mode">Scaling mode name.</param>
    ///<returns>Scaling mode object.</returns>
    {class} function NameToScalingMode(mode: string): DNScalingMode;
    ///<summary>
    ///  Converts scaling mode object into name.
    ///</summary>
    ///  <param name="mode">Scaling mode object.</param>
    ///<returns>Scaling mode name.</returns>
    {class} function ScalingModeToName(mode: DNScalingMode): string;

  end;

  ///<summary>
  ///  Describes how the widget annotation's icon shall be displayed within its annotation rectangle.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.IconFit')]
  DNIconFit = interface(DDN.mscorlib.DNObject)
  ['{5906D387-60E9-3E91-9BA7-094DF0897FD8}']
  { getters & setters } 

    function get_ScalingReason: DNScalingReason;
    procedure set_ScalingReason(value: DNScalingReason);
    function get_ScalingMode: DNScalingMode;
    procedure set_ScalingMode(value: DNScalingMode);
    function get_LeftoverLeft: Double;
    procedure set_LeftoverLeft(value: Double);
    function get_LeftoverBottom: Double;
    procedure set_LeftoverBottom(value: Double);
    function get_SpreadOnBorder: Boolean;
    procedure set_SpreadOnBorder(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets scaling reason.
    ///</summary>
    property ScalingReason: DNScalingReason read get_ScalingReason write set_ScalingReason;
    ///<summary>
    ///  The type of scaling that shall be used.        /// </summary>
    property ScalingMode: DNScalingMode read get_ScalingMode write set_ScalingMode;
    ///<summary>
    ///  Gets or sets space to allocate at the left of the icon.
    ///</summary>
    property LeftoverLeft: Double read get_LeftoverLeft write set_LeftoverLeft;
    ///<summary>
    ///  Gets or sets space to allocate at the bottom of the icon.
    ///</summary>
    property LeftoverBottom: Double read get_LeftoverBottom write set_LeftoverBottom;
    ///<summary>
    ///  If true, indicates that the button appearance shall be scaled to fit fully within the bounds of the annotation without taking into consideration the line width of the border.
    ///</summary>
    property SpreadOnBorder: Boolean read get_SpreadOnBorder write set_SpreadOnBorder;
  end;

  TDNIconFit = class(TDNGenericImport<DNIconFitClass, DNIconFit>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNOptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8EEEC70F-0B95-5868-85E6-5B7ABE6B0F9E}']
  end;

  ///<summary>
  ///  Class represents option of choice field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Option')]
  DNOption = interface(DDN.mscorlib.DNObject)
  ['{918F9843-5C29-317B-B9B7-99F08FD734B3}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_Index: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets option export value.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets or sets name of option.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets or sets selected status of option. Returns true if option is selected.
    ///</summary>
    property Selected: Boolean read get_Selected write set_Selected;
    ///<summary>
    ///  Gets index of the option.
    ///</summary>
    property Index: Int32 read get_Index;
  end;

  TDNOption = class(TDNGenericImport<DNOptionClass, DNOption>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNOptionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85EA307A-45F5-567F-A13E-10F0F7FC8F55}']
  end;

  ///<summary>
  ///  Class representing collection of options of the choice field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.OptionCollection')]
  DNOptionCollection = interface(DDN.mscorlib.DNICollection<DNOption>)
  ['{38B06178-74EC-38A6-BB11-9665021AE982}']
  { getters & setters } 

    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_Item(index: Int32): DNOption; overload;
    function get_Item(name: string): DNOption; overload;

  { methods } 

    ///<summary>
    ///  Copies options into array.
    ///</summary>
    ///  <param name="array">Array where options wil lbe copied.</param>
    ///  <param name="index">Startign index in array.</param>
    procedure CopyTo(&array: TArray<DNOption>; index: Int32);
    ///<summary>
    ///  Returns enumerator for options in collection.
    ///</summary>
    ///<returns>Options enumerator.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOption>;
    ///<summary>
    ///  Gets option by index.
    ///</summary>
    ///  <param name="index">Option index. Index should be in range [1..n] where n is options count.</param>
    ///<returns>Retreived option.</returns>
    function get(index: Int32): DNOption; overload;
    ///<summary>
    ///  Gets option from colleciton by option name.
    ///</summary>
    ///  <param name="name">Option name.</param>
    ///<returns>Retreived option.</returns>
    function get(name: string): DNOption; overload;
    ///<summary></summary>
    function &Contains(item: DNOption): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns true of object is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating if collection is readonly.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Synchronization object of the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets number of options.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOption read get_Item; default;
    property Item[name: string]: DNOption read get_Item; default;
  end;

  TDNOptionCollection = class(TDNGenericImport<DNOptionCollectionClass, DNOptionCollection>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DE388A9B-4C30-590B-A540-A057060119A0}']
  { constructors } 

    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" />
    ///  class.
    ///</summary>
    {class} function init: DNSignature; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Pfx file which contains certificate for signing.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: string; password: string): DNSignature; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.Signature" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Stream with certificate data organized as pfx.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNSignature; overload;

  end;

  ///<summary>
  ///  An abstract class which represents signature object in the pdf document.
  ///  Signatures are fields with values of signature objects, the last contain data which is used to
  ///  verify the document validity.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.Signature')]
  DNSignature = interface(DDN.mscorlib.DNObject)
  ['{A5BD023F-5A24-3C37-A6D6-1936BBB466CC}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    ///<summary>
    ///  Verify the document regarding this signature and return true if document is valid
    ///  or otherwise false.
    ///</summary>
    ///<returns>true if document is valid.</returns>
    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the custom appearance.
    ///</summary>
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    ///<summary>
    ///  The name of the person or authority signing the document.
    ///</summary>
    property Authority: string read get_Authority write set_Authority;
    ///<summary>
    ///  The time of signing.
    ///</summary>
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    ///<summary>
    ///  The CPU host name or physical location of the signing.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  The reason for the signing, such as (I agreeРІР‚В¦).
    ///</summary>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Information provided by the signer to enable a recipient to contact the signer
    ///  to verify the signature, e.g. a phone number.
    ///</summary>
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    ///<summary>
    ///  An array of pairs of integers (starting byte offset, length in bytes)
    ///  that shall describe the exact byte range for the digest calculation.
    ///</summary>
    property ByteRange: TArray<Int32> read get_ByteRange;
    ///<summary>
    ///  Gets/sets timestamp settings.
    ///</summary>
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    ///<summary>
    ///  Gets/sets ocsp settings.
    ///</summary>
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    ///<summary>
    ///  Gets/sets ltv validation flag.
    ///</summary>
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    ///<summary>
    ///  Force to show/hide signature properties.
    ///  In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
    ///  -------------------------------------------
    ///  Digitally signed by {certificate subject}
    ///  Date: {signature.Date}
    ///  Reason: {signature.Reason}
    ///  Location: {signature.Location}
    ///  -------------------------------------------
    ///  where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
    ///  ShowProperties is true by default.
    ///</summary>
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNSignature = class(TDNGenericImport<DNSignatureClass, DNSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNExternalSignatureClass = interface(DNSignatureClass)
  ['{0C93614F-9A17-53F6-85A0-459F4FEAF4C8}']
  { constructors } 

    ///<summary>
    ///  Creates a detached PKCS#7Detached signature using a X509Certificate2. It supports usb smartcards, tokens without exportable private keys.
    ///</summary>
    ///  <param name="certificate">The certificate with the private key</param>
    {class} function init(certificate: DDN.Aspose.Common.DNX509Certificate2): DNExternalSignature;

  end;

  ///<summary>
  ///  Creates a detached PKCS#7Detached signature using a X509Certificate2. It supports usb smartcards, tokens without exportable private keys.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.ExternalSignature')]
  DNExternalSignature = interface(DNSignature)
  ['{C530770D-EBB6-31EA-A4C4-88C5EA70BCCA}']
  { getters & setters } 

    function get_Certificate: DDN.Aspose.Common.DNX509Certificate2;
    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    ///<summary>
    ///  Verify the document regarding this signature and return true if document is valid
    ///  or otherwise false.
    ///</summary>
    ///<returns>true if document is valid.</returns>
    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The certificate with the private key.
    ///</summary>
    property Certificate: DDN.Aspose.Common.DNX509Certificate2 read get_Certificate;
    ///<summary>
    ///  Gets/sets the custom appearance.
    ///</summary>
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    ///<summary>
    ///  The name of the person or authority signing the document.
    ///</summary>
    property Authority: string read get_Authority write set_Authority;
    ///<summary>
    ///  The time of signing.
    ///</summary>
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    ///<summary>
    ///  The CPU host name or physical location of the signing.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  The reason for the signing, such as (I agreeРІР‚В¦).
    ///</summary>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Information provided by the signer to enable a recipient to contact the signer
    ///  to verify the signature, e.g. a phone number.
    ///</summary>
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    ///<summary>
    ///  An array of pairs of integers (starting byte offset, length in bytes)
    ///  that shall describe the exact byte range for the digest calculation.
    ///</summary>
    property ByteRange: TArray<Int32> read get_ByteRange;
    ///<summary>
    ///  Gets/sets timestamp settings.
    ///</summary>
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    ///<summary>
    ///  Gets/sets ocsp settings.
    ///</summary>
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    ///<summary>
    ///  Gets/sets ltv validation flag.
    ///</summary>
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    ///<summary>
    ///  Force to show/hide signature properties.
    ///  In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
    ///  -------------------------------------------
    ///  Digitally signed by {certificate subject}
    ///  Date: {signature.Date}
    ///  Reason: {signature.Reason}
    ///  Location: {signature.Location}
    ///  -------------------------------------------
    ///  where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
    ///  ShowProperties is true by default.
    ///</summary>
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNExternalSignature = class(TDNGenericImport<DNExternalSignatureClass, DNExternalSignature>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS1Class = interface(DNSignatureClass)
  ['{947EA730-B2EA-5B5C-9657-8ECC2AEB5BBD}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  class.
    ///</summary>
    ///  <param name="image">
    ///  This image will define signature appearance on the page.
    ///</param>
    {class} function init(image: DDN.mscorlib.DNStream): DNPKCS1; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  class.
    ///</summary>
    {class} function init: DNPKCS1; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Pfx file which contains certificate for signing.
    ///</param>
    ///  <param name="password">
    ///  Password for certificate.
    ///</param>
    ///  Password to get access to the private key in the certificate.
    {class} function init(pfx: string; password: string): DNPKCS1; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS1" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Stream with certificate data organized as pfx.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS1; overload;

  end;

  ///<summary>
  ///  Represents signature object regarding PKCS#1 standard.
  ///  RSA encryption algorithm and SHA-1 digest method are used for signing.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.PKCS1')]
  DNPKCS1 = interface(DNSignature)
  ['{01BABA07-967F-360F-9D5F-5E7004451436}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    ///<summary>
    ///  Verify the document regarding this signature and return true if document is valid
    ///  or otherwise false.
    ///</summary>
    ///<returns>true if document is valid.</returns>
    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the custom appearance.
    ///</summary>
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    ///<summary>
    ///  The name of the person or authority signing the document.
    ///</summary>
    property Authority: string read get_Authority write set_Authority;
    ///<summary>
    ///  The time of signing.
    ///</summary>
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    ///<summary>
    ///  The CPU host name or physical location of the signing.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  The reason for the signing, such as (I agreeРІР‚В¦).
    ///</summary>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Information provided by the signer to enable a recipient to contact the signer
    ///  to verify the signature, e.g. a phone number.
    ///</summary>
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    ///<summary>
    ///  An array of pairs of integers (starting byte offset, length in bytes)
    ///  that shall describe the exact byte range for the digest calculation.
    ///</summary>
    property ByteRange: TArray<Int32> read get_ByteRange;
    ///<summary>
    ///  Gets/sets timestamp settings.
    ///</summary>
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    ///<summary>
    ///  Gets/sets ocsp settings.
    ///</summary>
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    ///<summary>
    ///  Gets/sets ltv validation flag.
    ///</summary>
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    ///<summary>
    ///  Force to show/hide signature properties.
    ///  In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
    ///  -------------------------------------------
    ///  Digitally signed by {certificate subject}
    ///  Date: {signature.Date}
    ///  Reason: {signature.Reason}
    ///  Location: {signature.Location}
    ///  -------------------------------------------
    ///  where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
    ///  ShowProperties is true by default.
    ///</summary>
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS1 = class(TDNGenericImport<DNPKCS1Class, DNPKCS1>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS7Class = interface(DNSignatureClass)
  ['{69AB5E37-9B58-539A-9BFA-AB528791FBCC}']
  { constructors } 

    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  class.
    ///</summary>
    {class} function init: DNPKCS7; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Pfx file which contains certificate for signing.
    ///</param>
    ///  <param name="password">
    ///  Password for certificate.
    ///</param>
    ///  Password to get access to the private key in the certificate.
    {class} function init(pfx: string; password: string): DNPKCS7; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Stream with certificate data organized as pfx.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS7; overload;

  end;

  ///<summary>
  ///  Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315,
  ///  PKCS #7: Cryptographic Message Syntax, Version 1.5.
  ///  The SHA1 digest of the document's byte range is encapsulated in the PKCS#7 SignedData field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.PKCS7')]
  DNPKCS7 = interface(DNSignature)
  ['{E350C33A-45F5-388E-96A0-C1185574C26A}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    ///<summary>
    ///  Verify the document regarding this signature and return true if document is valid
    ///  or otherwise false.
    ///</summary>
    ///<returns>true if document is valid.</returns>
    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the custom appearance.
    ///</summary>
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    ///<summary>
    ///  The name of the person or authority signing the document.
    ///</summary>
    property Authority: string read get_Authority write set_Authority;
    ///<summary>
    ///  The time of signing.
    ///</summary>
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    ///<summary>
    ///  The CPU host name or physical location of the signing.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  The reason for the signing, such as (I agreeРІР‚В¦).
    ///</summary>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Information provided by the signer to enable a recipient to contact the signer
    ///  to verify the signature, e.g. a phone number.
    ///</summary>
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    ///<summary>
    ///  An array of pairs of integers (starting byte offset, length in bytes)
    ///  that shall describe the exact byte range for the digest calculation.
    ///</summary>
    property ByteRange: TArray<Int32> read get_ByteRange;
    ///<summary>
    ///  Gets/sets timestamp settings.
    ///</summary>
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    ///<summary>
    ///  Gets/sets ocsp settings.
    ///</summary>
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    ///<summary>
    ///  Gets/sets ltv validation flag.
    ///</summary>
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    ///<summary>
    ///  Force to show/hide signature properties.
    ///  In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
    ///  -------------------------------------------
    ///  Digitally signed by {certificate subject}
    ///  Date: {signature.Date}
    ///  Reason: {signature.Reason}
    ///  Location: {signature.Location}
    ///  -------------------------------------------
    ///  where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
    ///  ShowProperties is true by default.
    ///</summary>
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS7 = class(TDNGenericImport<DNPKCS7Class, DNPKCS7>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNPKCS7DetachedClass = interface(DNSignatureClass)
  ['{4940D1A7-E799-5F35-A09F-387F3005FEC3}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  class.
    ///</summary>
    ///  <param name="image">
    ///  This image will define signature appearance on the page.
    ///</param>
    {class} function init(image: DDN.mscorlib.DNStream): DNPKCS7Detached; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  class.
    ///</summary>
    {class} function init: DNPKCS7Detached; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Pfx file which contains certificate for signing.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: string; password: string): DNPKCS7Detached; overload;
    ///<summary>
    ///  Inititalizes new instance of the <see cref="T:Aspose.Pdf.Forms.PKCS7Detached" />
    ///  class.
    ///</summary>
    ///  <param name="pfx">
    ///  Stream with certificate data organized as pfx.
    ///</param>
    ///  <param name="password">
    ///  Password to get access to the private key in the certificate.
    ///</param>
    {class} function init(pfx: DDN.mscorlib.DNStream; password: string): DNPKCS7Detached; overload;

  end;

  ///<summary>
  ///  Represents the PKCS#7 object that conform to the PKCS#7 specification in Internet RFC 2315,
  ///  PKCS #7: Cryptographic Message Syntax, Version 1.5.
  ///  The original signed message digest over the document's byte range is incorporated as the normal PKCS#7 SignedData field.
  ///  No data shall is encapsulated in the PKCS#7 SignedData field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.PKCS7Detached')]
  DNPKCS7Detached = interface(DNSignature)
  ['{EE0BF3CB-8DB4-324E-B9CD-E623637E22FE}']
  { getters & setters } 

    function get_CustomAppearance: DNSignatureCustomAppearance;
    procedure set_CustomAppearance(value: DNSignatureCustomAppearance);
    function get_Authority: string;
    procedure set_Authority(value: string);
    function get_Date: DDN.mscorlib.DNDateTime;
    procedure set_Date(value: DDN.mscorlib.DNDateTime);
    function get_Location: string;
    procedure set_Location(value: string);
    function get_Reason: string;
    procedure set_Reason(value: string);
    function get_ContactInfo: string;
    procedure set_ContactInfo(value: string);
    function get_ByteRange: TArray<Int32>;
    function get_TimestampSettings: DNTimestampSettings;
    procedure set_TimestampSettings(value: DNTimestampSettings);
    function get_OcspSettings: DNOcspSettings;
    procedure set_OcspSettings(value: DNOcspSettings);
    function get_UseLtv: Boolean;
    procedure set_UseLtv(value: Boolean);
    function get_ShowProperties: Boolean;
    procedure set_ShowProperties(value: Boolean);

  { methods } 

    ///<summary>
    ///  Verify the document regarding this signature and return true if document is valid
    ///  or otherwise false.
    ///</summary>
    ///<returns>true if document is valid.</returns>
    function Verify: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the custom appearance.
    ///</summary>
    property CustomAppearance: DNSignatureCustomAppearance read get_CustomAppearance write set_CustomAppearance;
    ///<summary>
    ///  The name of the person or authority signing the document.
    ///</summary>
    property Authority: string read get_Authority write set_Authority;
    ///<summary>
    ///  The time of signing.
    ///</summary>
    property Date: DDN.mscorlib.DNDateTime read get_Date write set_Date;
    ///<summary>
    ///  The CPU host name or physical location of the signing.
    ///</summary>
    property Location: string read get_Location write set_Location;
    ///<summary>
    ///  The reason for the signing, such as (I agreeРІР‚В¦).
    ///</summary>
    property Reason: string read get_Reason write set_Reason;
    ///<summary>
    ///  Information provided by the signer to enable a recipient to contact the signer
    ///  to verify the signature, e.g. a phone number.
    ///</summary>
    property ContactInfo: string read get_ContactInfo write set_ContactInfo;
    ///<summary>
    ///  An array of pairs of integers (starting byte offset, length in bytes)
    ///  that shall describe the exact byte range for the digest calculation.
    ///</summary>
    property ByteRange: TArray<Int32> read get_ByteRange;
    ///<summary>
    ///  Gets/sets timestamp settings.
    ///</summary>
    property TimestampSettings: DNTimestampSettings read get_TimestampSettings write set_TimestampSettings;
    ///<summary>
    ///  Gets/sets ocsp settings.
    ///</summary>
    property OcspSettings: DNOcspSettings read get_OcspSettings write set_OcspSettings;
    ///<summary>
    ///  Gets/sets ltv validation flag.
    ///</summary>
    property UseLtv: Boolean read get_UseLtv write set_UseLtv;
    ///<summary>
    ///  Force to show/hide signature properties.
    ///  In case ShowProperties is true signature field has predefined format of appearance (strings to represent):
    ///  -------------------------------------------
    ///  Digitally signed by {certificate subject}
    ///  Date: {signature.Date}
    ///  Reason: {signature.Reason}
    ///  Location: {signature.Location}
    ///  -------------------------------------------
    ///  where {X} is placeholder for X value. Also signature can have image, in this case listed strings are placed over image.
    ///  ShowProperties is true by default.
    ///</summary>
    property ShowProperties: Boolean read get_ShowProperties write set_ShowProperties;
  end;

  TDNPKCS7Detached = class(TDNGenericImport<DNPKCS7DetachedClass, DNPKCS7Detached>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNSignatureCustomAppearanceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E6CD01CC-CB0E-5CBC-8FFF-8F5ACB4F19E5}']
  { constructors } 

    {class} function init: DNSignatureCustomAppearance;

  end;

  ///<summary>
  ///  An abstract class which represents signature custon appearance object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.SignatureCustomAppearance')]
  DNSignatureCustomAppearance = interface(DDN.mscorlib.DNObject)
  ['{37C7EE2D-5B8C-32DF-B135-485A0CE1F704}']
  { getters & setters } 

    function get_FontFamilyName: string;
    procedure set_FontFamilyName(value: string);
    function get_FontSize: Double;
    procedure set_FontSize(value: Double);
    function get_ShowContactInfo: Boolean;
    procedure set_ShowContactInfo(value: Boolean);
    function get_ShowReason: Boolean;
    procedure set_ShowReason(value: Boolean);
    function get_ShowLocation: Boolean;
    procedure set_ShowLocation(value: Boolean);
    function get_ContactInfoLabel: string;
    procedure set_ContactInfoLabel(value: string);
    function get_ReasonLabel: string;
    procedure set_ReasonLabel(value: string);
    function get_LocationLabel: string;
    procedure set_LocationLabel(value: string);
    function get_DigitalSignedLabel: string;
    procedure set_DigitalSignedLabel(value: string);
    function get_DateSignedAtLabel: string;
    procedure set_DateSignedAtLabel(value: string);
    function get_DateTimeLocalFormat: string;
    procedure set_DateTimeLocalFormat(value: string);
    function get_DateTimeFormat: string;
    procedure set_DateTimeFormat(value: string);
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    procedure set_Culture(value: DDN.mscorlib.DNCultureInfo);
    function get_Rotation: DNRotation;
    procedure set_Rotation(value: DNRotation);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets font family name. It should be existed in the document. Default value: Arial.
    ///</summary>
    property FontFamilyName: string read get_FontFamilyName write set_FontFamilyName;
    ///<summary>
    ///  Gets/sets font size. Default value: 10.
    ///</summary>
    property FontSize: Double read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets/sets contact info visibility. Default value: true.
    ///</summary>
    property ShowContactInfo: Boolean read get_ShowContactInfo write set_ShowContactInfo;
    ///<summary>
    ///  Gets/sets reason visibility. Default value: true.
    ///</summary>
    property ShowReason: Boolean read get_ShowReason write set_ShowReason;
    ///<summary>
    ///  Gets/sets location visibility. Default value: true.
    ///</summary>
    property ShowLocation: Boolean read get_ShowLocation write set_ShowLocation;
    ///<summary>
    ///  Gets/sets contact info label. Default value: "Contact".
    ///</summary>
    property ContactInfoLabel: string read get_ContactInfoLabel write set_ContactInfoLabel;
    ///<summary>
    ///  Gets/sets reason label. Default value: "Reason".
    ///</summary>
    property ReasonLabel: string read get_ReasonLabel write set_ReasonLabel;
    ///<summary>
    ///  Gets/sets location label. Default value: "Location".
    ///</summary>
    property LocationLabel: string read get_LocationLabel write set_LocationLabel;
    ///<summary>
    ///  Gets/sets digital signed label. Default value: "Digitally signed by".
    ///</summary>
    property DigitalSignedLabel: string read get_DigitalSignedLabel write set_DigitalSignedLabel;
    ///<summary>
    ///  Gets/sets date signed label. Default value: "Date".
    ///</summary>
    property DateSignedAtLabel: string read get_DateSignedAtLabel write set_DateSignedAtLabel;
    ///<summary>
    ///  Gets/sets datetime local format. Default value: "yyyy.MM.dd HH:mm:ss zzz".
    ///</summary>
    property DateTimeLocalFormat: string read get_DateTimeLocalFormat write set_DateTimeLocalFormat;
    ///<summary>
    ///  Gets/sets datetime format. Default value: "yyyy.MM.dd HH:mm:ss".
    ///</summary>
    property DateTimeFormat: string read get_DateTimeFormat write set_DateTimeFormat;
    ///<summary>
    ///  Gets/sets culture info value. Default value: InvariantCulture.
    ///</summary>
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture write set_Culture;
    ///<summary>
    ///  Gets or sets signature rotation.
    ///</summary>
    property Rotation: DNRotation read get_Rotation write set_Rotation;
  end;

  TDNSignatureCustomAppearance = class(TDNGenericImport<DNSignatureCustomAppearanceClass, DNSignatureCustomAppearance>) end;

  //-------------namespace: Aspose.Pdf.Forms----------------
  DNXFAClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AFC3B32F-19A3-5368-803A-7FB1130DD8FD}']
  end;

  ///<summary>
  ///  Represents XML form regarding XML Forms Architecture (XFA).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Forms.XFA')]
  DNXFA = interface(DDN.mscorlib.DNObject)
  ['{B970AD9C-173F-3296-B1EF-1D69DD4C1B76}']
  { getters & setters } 

    function get_Template: DDN.Aspose.Common.DNXmlNode;
    function get_Form: DDN.Aspose.Common.DNXmlNode;
    function get_Datasets: DDN.Aspose.Common.DNXmlNode;
    function get_Config: DDN.Aspose.Common.DNXmlNode;
    function get_XDP: DDN.Aspose.Common.DNXmlDocument;
    function get_Item(path: string): string;
    procedure set_Item(path: string; value: string);
    function get_FieldNames: TArray<string>;
    function get_NamespaceManager: DDN.Aspose.Common.DNXmlNamespaceManager;

  { methods } 

    ///<summary>
    ///  Returns XML node of XFA field tempalte.
    ///</summary>
    ///  <param name="fieldName">Path of the field which template must be found.</param>
    ///<returns>XL node with field template.</returns>
    function GetFieldTemplate(fieldName: string): DDN.Aspose.Common.DNXmlNode;
    ///<summary>
    ///  Returns list of all field templates on XFA form.
    ///</summary>
    ///<returns>List of field templates.</returns>
    function GetFieldTemplates: DDN.Aspose.Common.DNXmlNodeList;
    ///<summary>
    ///  Sets image for XFA field.
    ///</summary>
    ///  <param name="fieldName">Name of the field.</param>
    ///  <param name="image">Stream which contains image.</param>
    procedure SetFieldImage(fieldName: string; image: DDN.mscorlib.DNStream);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  XFA Template component of an XFA form.
    ///</summary>
    property Template: DDN.Aspose.Common.DNXmlNode read get_Template;
    ///<summary>
    ///  XFA Form Component of an XFA form.
    ///</summary>
    property Form: DDN.Aspose.Common.DNXmlNode read get_Form;
    ///<summary>
    ///  XFA Datasets component of an XFA form.
    ///</summary>
    property Datasets: DDN.Aspose.Common.DNXmlNode read get_Datasets;
    ///<summary>
    ///  XFA Config component of an XFA form.
    ///</summary>
    property Config: DDN.Aspose.Common.DNXmlNode read get_Config;
    ///<summary>
    ///  XML Data Package (all XFA form components within a surrounding XML container).
    ///</summary>
    property XDP: DDN.Aspose.Common.DNXmlDocument read get_XDP;
    property Item[path: string]: string read get_Item write set_Item; default;
    ///<summary>
    ///  List of field names in the form template.
    ///</summary>
    property FieldNames: TArray<string> read get_FieldNames;
    ///<summary>
    ///  Gets the namespace for the XFA form. The following namepsaces are defined: "data" for form data and "tpl" for form template.
    ///</summary>
    property NamespaceManager: DDN.Aspose.Common.DNXmlNamespaceManager read get_NamespaceManager;
  end;

  TDNXFA = class(TDNGenericImport<DNXFAClass, DNXFA>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNGraphInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5521ADE5-8E02-5DE2-A472-0563BF9300CC}']
  { constructors } 

    {class} function init: DNGraphInfo;

  end;

  ///<summary>
  ///  Represents graphics info.
  ///</summary>
  [DNTypeName('Aspose.Pdf.GraphInfo')]
  DNGraphInfo = interface(DDN.mscorlib.DNObject)
  ['{18EE8A02-CBEA-370A-9FA9-F2AE4A826032}']
  { getters & setters } 

    function get_LineWidth: Single;
    procedure set_LineWidth(value: Single);
    function get_Color: DNColor;
    procedure set_Color(value: DNColor);
    function get_DashArray: TArray<Int32>;
    procedure set_DashArray(value: TArray<Int32>);
    function get_DashPhase: Int32;
    procedure set_DashPhase(value: Int32);
    function get_FillColor: DNColor;
    procedure set_FillColor(value: DNColor);
    function get_IsDoubled: Boolean;
    procedure set_IsDoubled(value: Boolean);
    function get_SkewAngleX: Double;
    procedure set_SkewAngleX(value: Double);
    function get_SkewAngleY: Double;
    procedure set_SkewAngleY(value: Double);
    function get_ScalingRateX: Double;
    procedure set_ScalingRateX(value: Double);
    function get_ScalingRateY: Double;
    procedure set_ScalingRateY(value: Double);
    function get_RotationAngle: Double;
    procedure set_RotationAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Clone the graphics info.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the line width of the graph.
    ///</summary>
    property LineWidth: Single read get_LineWidth write set_LineWidth;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" />
    ///  object that indicates the color of the graph.
    ///</summary>
    property Color: DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets a dash array.
    ///</summary>
    property DashArray: TArray<Int32> read get_DashArray write set_DashArray;
    ///<summary>
    ///  Gets or sets a dash phase.
    ///</summary>
    property DashPhase: Int32 read get_DashPhase write set_DashPhase;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.GraphInfo.Color" />
    ///  object that indicates the fill color of the graph.
    ///</summary>
    property FillColor: DNColor read get_FillColor write set_FillColor;
    ///<summary>
    ///  Gets or sets is border doubled.
    ///</summary>
    property IsDoubled: Boolean read get_IsDoubled write set_IsDoubled;
    ///<summary>
    ///  Gets or sets a float value that indicates the skew angle of the x-coordinate when transforming a coordinate system.
    ///</summary>
    property SkewAngleX: Double read get_SkewAngleX write set_SkewAngleX;
    ///<summary>
    ///  Gets or sets a float value that indicates the skew angle of the y-coordinate when transforming a coordinate system.
    ///</summary>
    property SkewAngleY: Double read get_SkewAngleY write set_SkewAngleY;
    ///<summary>
    ///  Gets or sets a float value that indicates the scaling rate of the x-coordinate when transforming a coordinate system.
    ///</summary>
    property ScalingRateX: Double read get_ScalingRateX write set_ScalingRateX;
    ///<summary>
    ///  Gets or sets a float value that indicates the scaling rate of the y-coordinate when transforming a coordinate system.
    ///</summary>
    property ScalingRateY: Double read get_ScalingRateY write set_ScalingRateY;
    ///<summary>
    ///  Gets or sets a float value that indicates the rotation angle of the coordinate system
    ///  when transforming a coordinate system.
    ///</summary>
    property RotationAngle: Double read get_RotationAngle write set_RotationAngle;
  end;

  TDNGraphInfo = class(TDNGenericImport<DNGraphInfoClass, DNGraphInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03C67147-74FE-5097-844E-0A7590D9ADF2}']
  { constructors } 

    ///<summary>
    ///  The constructor.
    ///</summary>
    ///  <param name="page">Pdf page object.</param>
    {class} function init(page: DNPage): DNGroup;

  end;

  ///<summary>
  ///  A group attributes class specifying the attributes of the page’s page group for use in the transparent imaging model.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Group')]
  DNGroup = interface(DDN.mscorlib.DNObject)
  ['{6948A1E2-7995-3C9A-B90A-19EE916C0CF2}']
  { getters & setters } 

    function get_ColorSpace: DNColorSpace;
    procedure set_ColorSpace(value: DNColorSpace);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The group color space.
    ///</summary>
    property ColorSpace: DNColorSpace read get_ColorSpace write set_ColorSpace;
  end;

  TDNGroup = class(TDNGenericImport<DNGroupClass, DNGroup>) end;

  //-------------namespace: Aspose.Pdf.GroupProcessor.Creators----------------
  DNPdfTypeObjectCreatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B1F66B73-08EC-5CFA-BC80-E2A4BB317064}']
  { constructors } 

    {class} function init: DNPdfTypeObjectCreator;

  end;

  ///<summary>
  ///  Represents an creator of IPdfTypeExtractor object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.GroupProcessor.Creators.PdfTypeObjectCreator')]
  DNPdfTypeObjectCreator = interface(DDN.mscorlib.DNObject)
  ['{91935953-8B68-3D49-84F5-A66E68FA7499}']
  { methods } 

    ///<summary>
    ///  Creates IPdfTypeExtractor object.
    ///</summary>
    ///  <param name="pdfDocumentPath">Path to a pdf document.</param>
    ///  <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
    ///  <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
    ///<returns>object of IPdfTypeExtractor</returns>
    function CreateExtractor(pdfDocumentPath: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    ///<summary>
    ///  Creates IPdfTypeExtractor object.
    ///</summary>
    ///  <param name="pdfDocumentStream">Stream containing pdf document.</param>
    ///  <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
    ///  <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
    ///<returns>object of IPdfTypeExtractor</returns>
    function CreateExtractor(pdfDocumentStream: DDN.mscorlib.DNStream; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    ///<summary>
    ///  Creates IPdfTypeExtractor object.
    ///</summary>
    ///  <param name="pdfDocumentPath">Path to a pdf document.</param>
    ///  <param name="password">Document password.</param>
    ///  <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
    ///  <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
    ///<returns>object of IPdfTypeExtractor</returns>
    function CreateExtractor(pdfDocumentPath: string; password: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    ///<summary>
    ///  Creates IPdfTypeExtractor object.
    ///</summary>
    ///  <param name="pdfDocumentStream">Stream containing pdf document.</param>
    ///  <param name="password">Document password.</param>
    ///  <param name="bufferSize">Maximum size of content in bytes that can be kept in memory.</param>
    ///  <param name="allowAsyncInitialization">Allows async initialization of resources.</param>
    ///<returns>object of IPdfTypeExtractor</returns>
    function CreateExtractor(pdfDocumentStream: DDN.mscorlib.DNStream; password: string; bufferSize: Int32; allowAsyncInitialization: Boolean): DNIPdfTypeExtractor; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPdfTypeObjectCreator = class(TDNGenericImport<DNPdfTypeObjectCreatorClass, DNPdfTypeObjectCreator>) end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  DNExtractorFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3345DA14-D0C8-5F6E-B959-06544216479B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Pdf: DNPdfTypeObjectCreator;

  { static fields } 

    ///<summary>
    ///  Conains creator of IPdfTypeExtractor object.
    ///</summary>
    {class} property Pdf: DNPdfTypeObjectCreator read __fakeFieldGet_Pdf;

  end;

  ///<summary>
  ///  Represents factory for creating IPdfTypeExtractor objects.
  ///</summary>
  [DNTypeName('Aspose.Pdf.GroupProcessor.ExtractorFactory')]
  DNExtractorFactory = interface(DDN.mscorlib.DNObject)
  ['{3C88B792-A17B-3983-8028-52BB0C1BAEBC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNExtractorFactory = class(TDNGenericImport<DNExtractorFactoryClass, DNExtractorFactory>) end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  [DNTypeName('Aspose.Pdf.GroupProcessor.IDocumentPageTextExtractor')]
  DNIDocumentPageTextExtractor = interface(DDN.mscorlib.DNObject)
  ['{556CA483-2857-3EFC-869B-CD8FD671AAE4}']
  { getters & setters } 

    function get_PageCount: Int32;

  { methods } 

    function ExtractPageText(pageNumber: Int32): string;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
  end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  [DNTypeName('Aspose.Pdf.GroupProcessor.IDocumentTextExtractor')]
  DNIDocumentTextExtractor = interface(DDN.mscorlib.DNObject)
  ['{B3CBA481-8821-3208-A5B2-7BD3C456389F}']
  { methods } 

    function ExtractAllText: TArray<string>;

  end;

  //-------------namespace: Aspose.Pdf.GroupProcessor----------------
  ///<summary>
  ///  Represents interface to interacting with extractor.
  ///</summary>
  [DNTypeName('Aspose.Pdf.GroupProcessor.IPdfTypeExtractor')]
  DNIPdfTypeExtractor = interface(DNIDocumentTextExtractor)
  ['{1980B518-B706-36EE-8626-EF1D2522C93C}']
  { getters & setters } 

    function get_PageCount: Int32;
    function get_Version: string;
    function get_IsFastExtractionUsed: Boolean;

  { methods } 

    function ExtractAllText: TArray<string>;
    function ExtractPageText(pageNumber: Int32): string;
    procedure Dispose;

  { propertys } 

    property PageCount: Int32 read get_PageCount;
    property Version: string read get_Version;
    property IsFastExtractionUsed: Boolean read get_IsFastExtractionUsed;
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNHeaderFooterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3921EA80-FDA0-531A-ADEC-0DFB1A10AFE4}']
  { constructors } 

    {class} function init: DNHeaderFooter;

  end;

  ///<summary>
  ///  Class represents header or footer pdf page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HeaderFooter')]
  DNHeaderFooter = interface(DDN.mscorlib.DNObject)
  ['{ABEFA196-6483-326D-9288-4906CA76886A}']
  { getters & setters } 

    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);

  { methods } 

    ///<summary>
    ///  Clones a new object.
    ///</summary>
    ///<returns>The new object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the end note paragraphs.
    ///</summary>
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets the margin info.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
  end;

  TDNHeaderFooter = class(TDNGenericImport<DNHeaderFooterClass, DNHeaderFooter>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_CssSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{72DC24B1-B523-5E14-B672-B19EE4BB20CB}']
  end;

  ///<summary>
  ///  This class represents set of data
  ///  that related to custom saving of CSS  during conversion
  ///  of PDF to HTML format
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssSavingInfo')]
  DNHtmlSaveOptions_CssSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{5E4F6452-8317-34F8-89E0-6F1D8F7F5993}']
  { fields getter & setter } 

   function __fakeFieldGet_CssNumber: Int32;
   procedure __fakeFieldSet_CssNumber(value: Int32);
   function __fakeFieldGet_SupposedURL: string;
   procedure __fakeFieldSet_SupposedURL(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);

  { fields } 

    ///<summary>
    ///  Set by converter.
    ///  During conversion several CSS-files are created . This properties shows ordinal
    ///  of saved CSS-file during conversion.
    ///  It can be used in logic of custom code to decide how to process or where to save CSS content
    ///</summary>
   property CssNumber: Int32 read __fakeFieldGet_CssNumber write __fakeFieldSet_CssNumber;
    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be used in custom code to decide how to process or where to save content
    ///</summary>
   property SupposedURL: string read __fakeFieldGet_SupposedURL write __fakeFieldSet_SupposedURL;
    ///<summary>
    ///  Set by converter.
    ///  Represents binary content of saved CSS
    ///</summary>
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_CssSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_CssSavingInfoClass, DNHtmlSaveOptions_CssSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_CssUrlRequestInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5118CDF4-3A3D-57B0-9DEF-0BD583FCC075}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions_CssUrlRequestInfo;

  end;

  ///<summary>
  ///  Represents set of data
  ///  that related to request from converter to
  ///  custom code aimed to get desirable URL (or URL template)of subject CSS
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+CssUrlRequestInfo')]
  DNHtmlSaveOptions_CssUrlRequestInfo = interface(DDN.mscorlib.DNObject)
  ['{214C94A4-346A-38E1-B9E5-5EFDCE5D19DB}']
  { fields getter & setter } 

   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  Should be set by custom code if it cannot or should not define URL that
    ///  will be used in generated HTML for referencing of that CSS.
    ///  If it's 'true', then CSS file will be saved in standard way in standard place.
    ///</summary>
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_CssUrlRequestInfo = class(TDNGenericImport<DNHtmlSaveOptions_CssUrlRequestInfoClass, DNHtmlSaveOptions_CssUrlRequestInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5C770B00-7317-5090-B881-2A640FC74B7E}']
  end;

  ///<summary>
  ///  If SplitToPages property of HtmlSaveOptions, then several HTML-files (one HTML file per converted page)
  ///  are created during conversion of PDF to HTML.
  ///  This class represents set of data  that related to custom saving of one HTML-page's markup
  ///  during conversion of PDF to HTML
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlPageMarkupSavingInfo')]
  DNHtmlSaveOptions_HtmlPageMarkupSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{8C596EA6-637E-34D9-8B2B-C951B269D6EE}']
  { fields getter & setter } 

   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_PdfHostPageNumber: Int32;
   procedure __fakeFieldSet_PdfHostPageNumber(value: Int32);
   function __fakeFieldGet_HtmlHostPageNumber: Int32;
   procedure __fakeFieldSet_HtmlHostPageNumber(value: Int32);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be used in custom code to decide how to process or where to save content
    ///</summary>
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
    ///<summary>
    ///  Set by converter.
    ///  Represents saved HTML as stream
    ///</summary>
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
    ///<summary>
    ///  Set by converter.
    ///  If SplitToPages property set, then several HTML-files(one HTML file per converted page)
    ///  are created during conversion  created .
    ///  This property tells to custom code from what page of original PDF was created saved HTML-markup.
    ///  If original page number for some reason is inknown or SplitOnPages=false,then this property allways contains '0'
    ///  that signals that converter cannot supply exact original PDF's page number for supplied HTML-markup file.
    ///</summary>
   property PdfHostPageNumber: Int32 read __fakeFieldGet_PdfHostPageNumber write __fakeFieldSet_PdfHostPageNumber;
    ///<summary>
    ///  Set by converter.
    ///  If set SplitToPages property, then several HTML-files(one HTML file per converted page)
    ///  are created during conversion  created . This property contains ordinal of saved HTML page's file.
    ///  The property can be used in logic of custom code
    ///  to decide how to process or where to save HTML page and
    ///  If splitting on pages turned off this value always contains '1'
    ///  since in such case  only one big HTML page is generated
    ///  for whole source document.
    ///</summary>
   property HtmlHostPageNumber: Int32 read __fakeFieldGet_HtmlHostPageNumber write __fakeFieldSet_HtmlHostPageNumber;
    ///<summary>
    ///  Should be set in custom code when necessary.
    ///  This flag must be set to "true" in custom code if for some reasons
    ///  supplied html-markup should be processed not with custom code but
    ///  with converter's code itself in standard for converter way.
    ///  So, setting if this flag in custom code  means that
    ///  custom code did not process referenced file and
    ///  converter must handle it itself
    ///</summary>
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHtmlSaveOptions_HtmlPageMarkupSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_HtmlPageMarkupSavingInfoClass, DNHtmlSaveOptions_HtmlPageMarkupSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHyperlinkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB54F11F-9E3D-5DD0-AEC4-9D7E011969CC}']
  end;

  ///<summary>
  ///  Represents abstract hyperlink.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Hyperlink')]
  DNHyperlink = interface(DDN.mscorlib.DNObject)
  ['{3489BCAB-E9E4-30D6-9EF0-7D812B4845F7}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHyperlink = class(TDNGenericImport<DNHyperlinkClass, DNHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFileHyperlinkClass = interface(DNHyperlinkClass)
  ['{AFC78057-AD3D-563A-983D-EF7AA7015846}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FileHyperlink" />
    ///  class.
    ///</summary>
    {class} function init: DNFileHyperlink; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FileHyperlink" />
    ///  class.
    ///</summary>
    ///  <param name="path">Path to file.</param>
    {class} function init(path: string): DNFileHyperlink; overload;

  end;

  ///<summary>
  ///  Represents file hyperlink object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FileHyperlink')]
  DNFileHyperlink = interface(DNHyperlink)
  ['{F84192DC-8811-33A1-9469-574E06FF26EE}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the path to file.
    ///</summary>
    property Path: string read get_Path write set_Path;
  end;

  TDNFileHyperlink = class(TDNGenericImport<DNFileHyperlinkClass, DNFileHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLocalHyperlinkClass = interface(DNHyperlinkClass)
  ['{C9C05C14-7334-5D01-A545-0A981E0F7490}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.LocalHyperlink" />
    ///  class.
    ///</summary>
    {class} function init: DNLocalHyperlink; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.LocalHyperlink" />
    ///  class.
    ///</summary>
    ///  <param name="target">Target paragraph.</param>
    {class} function init(target: DNBaseParagraph): DNLocalHyperlink; overload;

  end;

  ///<summary>
  ///  Represents local hyperlink object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LocalHyperlink')]
  DNLocalHyperlink = interface(DNHyperlink)
  ['{C1B5BADB-05B5-38C1-A7F8-8CB00ED47C70}']
  { getters & setters } 

    function get_Target: DNBaseParagraph;
    procedure set_Target(value: DNBaseParagraph);
    function get_TargetPageNumber: Int32;
    procedure set_TargetPageNumber(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the target paragraph.
    ///</summary>
    property Target: DNBaseParagraph read get_Target write set_Target;
    ///<summary>
    ///  Gets or sets the target page number.
    ///</summary>
    property TargetPageNumber: Int32 read get_TargetPageNumber write set_TargetPageNumber;
  end;

  TDNLocalHyperlink = class(TDNGenericImport<DNLocalHyperlinkClass, DNLocalHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWebHyperlinkClass = interface(DNHyperlinkClass)
  ['{F70680F0-56AA-5B04-8EFB-595159A74FEC}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.WebHyperlink" />
    ///  class.
    ///</summary>
    {class} function init: DNWebHyperlink; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.WebHyperlink" />
    ///  class.
    ///</summary>
    ///  <param name="url">Web url for hyperlink.</param>
    {class} function init(url: string): DNWebHyperlink; overload;

  end;

  ///<summary>
  ///  Represents web hyperlink object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.WebHyperlink')]
  DNWebHyperlink = interface(DNHyperlink)
  ['{A807DE09-3818-3B7B-A409-B2DF1AA8E93C}']
  { getters & setters } 

    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the web url.
    ///</summary>
    property Url: string read get_Url write set_Url;
  end;

  TDNWebHyperlink = class(TDNGenericImport<DNWebHyperlinkClass, DNWebHyperlink>) end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Interface for color space conversion strategies.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IColorSpaceConversionStrategy')]
  DNIColorSpaceConversionStrategy = interface(DDN.mscorlib.DNObject)
  ['{29DCF425-B108-3A96-9B1D-66E5EF8542D8}']
  { methods } 

    ///<summary>
    ///  Converts the page of document.
    ///</summary>
    ///  <param name="page">The page of document.</param>
    procedure Convert(page: DNPage);

  end;

  //-------------namespace: Aspose.Pdf----------------
  DNIdClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C7F0B337-F146-59BE-95E9-33A08058118B}']
  end;

  ///<summary>
  ///  Represents file identifier structure.
  ///</summary>
  ///<example><code lang="C#">
  ///  Document doc = new Document("example.pdf");
  ///  string original = doc.Id.Original;
  ///  string modified = doc.Id.Modified;
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Id')]
  DNId = interface(DDN.mscorlib.DNObject)
  ['{E3E1F23B-9E80-37D2-A984-17F68DDF507F}']
  { getters & setters } 

    function get_Original: string;
    function get_Modified: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Permanent identifier based on the contents of the document at the time it was originally created.
    ///</summary>
    property Original: string read get_Original;
    ///<summary>
    ///  Changing identifier based on the document's contents at the time it was last updated.
    ///</summary>
    property Modified: string read get_Modified;
  end;

  TDNId = class(TDNGenericImport<DNIdClass, DNId>) end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  This interface declared for customization algorithms of quantization.
  ///  Users can implement their own realization of this algorithms (for example algorithms based on unmanaged code).
  ///</summary>
  [DNTypeName('Aspose.Pdf.IIndexBitmapConverter')]
  DNIIndexBitmapConverter = interface(DDN.mscorlib.DNObject)
  ['{D38C3BEE-DACA-37A9-B276-D2E356990339}']
  { methods } 

    ///<summary>
    ///  Returns 1Bpp bitmap representation
    ///</summary>
    ///  <param name="src">Source bitmap.</param>
    ///<returns>Bitmap in 1 bpp image format.</returns>
    function Get1BppImage(src: DDN.Aspose.Common.DNBitmap): DDN.Aspose.Common.DNBitmap;
    ///<summary>
    ///  Returns 4Bpp bitmap representation
    ///</summary>
    ///  <param name="src">Source bitmap.</param>
    ///<returns>Bitmap in 4 bpp image format.</returns>
    function Get4BppImage(src: DDN.Aspose.Common.DNBitmap): DDN.Aspose.Common.DNBitmap;
    ///<summary>
    ///  Returns 8Bpp bitmap representation
    ///</summary>
    ///  <param name="src">Source bitmap.</param>
    ///<returns>Bitmap in 8 bpp image format.</returns>
    function Get8BppImage(src: DDN.Aspose.Common.DNBitmap): DDN.Aspose.Common.DNBitmap;

  end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDCC213F-B58B-57CA-855C-16F137E39968}']
  end;

  ///<summary>
  ///  Represents characteristics of an image placed to Pdf document page.
  ///</summary>
  ///<remarks>
  ///  When an image is placed to a page it may have dimensions other than physical dimensions defined in <see cref="T:Aspose.Pdf.Resources" />
  ///  .
  ///  The object <see cref="T:Aspose.Pdf.ImagePlacement" />
  ///  is intended to provide such information like dimensions, resolution and so on.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to find images on the first PDF document page and get images as bitmaps with visible dimensions.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create ImagePlacementAbsorber object to perform image placement search
  ///  ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(abs);
  ///  // Retrieve images with visible dimensions
  ///  foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
  ///  {
  ///  Bitmap scaledImage;
  ///  using (MemoryStream imageStream = new MemoryStream())
  ///  {
  ///  // Retrieve image from resources
  ///  imagePlacement.Image.Save(imageStream, ImageFormat.Png);
  ///  Bitmap resourceImage = (Bitmap) Bitmap.FromStream(imageStream);
  ///  // Create new bitmap with actual dimensions
  ///  scaledImage = new Bitmap(resourceImage, (int)imagePlacement.Rectangle.Width, (int)imagePlacement.Rectangle.Height);
  ///  }
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Pdf.ImagePlacement')]
  DNImagePlacement = interface(DDN.mscorlib.DNObject)
  ['{3722B15A-CA58-3351-A5DE-E30B5FC29063}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    function get_Rectangle: DNRectangle;
    function get_Operator: DNOperator;
    function get_Rotation: Single;
    function get_Resolution: DNResolution;
    function get_Image: DNXImage;
    function get_Page: DNPage;
    function get_CompositingParameters: DNCompositingParameters;

  { methods } 

    procedure Hide;
    ///<summary>
    ///  Replace image in collection with another image.
    ///</summary>
    ///  <param name="image">Stream containing image data.</param>
    procedure Replace(image: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Saves image with corresponding transformations: scaling, rotation and resolution.
    ///</summary>
    ///  <param name="stream">Stream where image will be saved</param>
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves image with corresponding transformations: scaling, rotation and resolution.
    ///</summary>
    ///  <param name="stream">Stream where image will be saved</param>
    ///  <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///</param>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Current transformation matrix for this image.
    ///</summary>
    property Matrix: DNMatrix read get_Matrix;
    ///<summary>
    ///  Gets rectangle of the Image.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    property Operator: DNOperator read get_Operator;
    ///<summary>
    ///  Gets rotation angle of the Image.
    ///</summary>
    property Rotation: Single read get_Rotation;
    ///<summary>
    ///  Gets resolution of the Image.
    ///</summary>
    property Resolution: DNResolution read get_Resolution;
    ///<summary>
    ///  Gets related XImage resource object.
    ///</summary>
    property Image: DNXImage read get_Image;
    ///<summary>
    ///  Gets the page containing the image.
    ///</summary>
    property Page: DNPage read get_Page;
    ///<summary>
    ///  Gets compositing parameters of graphics state active for the image placed to the page.
    ///</summary>
    property CompositingParameters: DNCompositingParameters read get_CompositingParameters;
  end;

  TDNImagePlacement = class(TDNGenericImport<DNImagePlacementClass, DNImagePlacement>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4E64AD0E-F4F7-5F6E-802F-24D49E276CB3}']
  { constructors } 

    {class} function init: DNImagePlacementAbsorber;

  end;

  ///<summary>
  ///  Represents an absorber object of image placement objects.
  ///  Performs search of image usages and provides access to search results via <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" />
  ///  collection.
  ///</summary>
  ///<remarks>
  ///  The <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" />
  ///  object is basically used in images search scenario.
  ///  When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.ImagePlacement" />
  ///  objects that the <see cref="P:Aspose.Pdf.ImagePlacementAbsorber.ImagePlacements" />
  ///  collection contains.
  ///  The <see cref="T:Aspose.Pdf.ImagePlacement" />
  ///  object provides access to the image placement properties: dimensions, resolution etc.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to find images on the first PDF document page and get the image placement properties.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create ImagePlacementAbsorber object to perform image placement search
  ///  ImagePlacementAbsorber abs = new ImagePlacementAbsorber();
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(abs);
  ///  // Display image placement properties for all placements
  ///  foreach (ImagePlacement imagePlacement in abs.ImagePlacements)
  ///  {
  ///  Console.Out.WriteLine("image width:" + imagePlacement.Rectangle.Width);
  ///  Console.Out.WriteLine("image height:" + imagePlacement.Rectangle.Height);
  ///  Console.Out.WriteLine("image LLX:" + imagePlacement.Rectangle.LLX);
  ///  Console.Out.WriteLine("image LLY:" + imagePlacement.Rectangle.LLY);
  ///  Console.Out.WriteLine("image horizontal resolution:" + imagePlacement.Resolution.X);
  ///  Console.Out.WriteLine("image vertical resolution:" + imagePlacement.Resolution.Y);
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Pdf.ImagePlacementAbsorber')]
  DNImagePlacementAbsorber = interface(DDN.mscorlib.DNObject)
  ['{1B9F9D54-F094-3377-A9FB-606EF7520C1E}']
  { getters & setters } 

    function get_IsReadOnlyMode: Boolean;
    procedure set_IsReadOnlyMode(value: Boolean);
    function get_ImagePlacements: DNImagePlacementCollection;

  { methods } 

    ///<summary>
    ///  Performs search on the specified page.
    ///</summary>
    ///  <param name="page">Pdf pocument page object.</param>
    procedure Visit(page: DNPage); overload;
    ///<summary>
    ///  Performs search on the specified document.
    ///</summary>
    ///  <param name="pdf">Pdf pocument object.</param>
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets read only mode for parsing operations collection. It may help against out of memory
    ///  exceptions.
    ///</summary>
    property IsReadOnlyMode: Boolean read get_IsReadOnlyMode write set_IsReadOnlyMode;
    ///<summary>
    ///  Gets collection of image placement occurrences that are presented with <see cref="T:Aspose.Pdf.ImagePlacement" />
    ///  objects.
    ///</summary>
    property ImagePlacements: DNImagePlacementCollection read get_ImagePlacements;
  end;

  TDNImagePlacementAbsorber = class(TDNGenericImport<DNImagePlacementAbsorberClass, DNImagePlacementAbsorber>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImagePlacementCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A42C69A-A938-5A3D-9123-B6AC8B8B127B}']
  end;

  ///<summary>
  ///  Represents an image placements collection
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImagePlacementCollection')]
  DNImagePlacementCollection = interface(DDN.mscorlib.DNICollection<DNImagePlacement>)
  ['{BAD61262-98EB-3957-ABAC-86171A3B8B83}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNImagePlacement;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNImagePlacement>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNImagePlacement>; index: Int32);
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNImagePlacement): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.ImagePlacement" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNImagePlacement read get_Item; default;
  end;

  TDNImagePlacementCollection = class(TDNGenericImport<DNImagePlacementCollectionClass, DNImagePlacementCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImportOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CDCF122F-90BF-5EF2-86BF-D126FB4257B9}']
  end;

  ///<summary>
  ///  ImportOptions type hold level of abstraction on individual import options.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImportOptions')]
  DNImportOptions = interface(DDN.mscorlib.DNObject)
  ['{DDBDB031-AA31-30CE-ABE9-DACD79FC48FD}']
  { getters & setters } 

    function get_ImportFormat: DNImportFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Import format.
    ///</summary>
    property ImportFormat: DNImportFormat read get_ImportFormat;
  end;

  TDNImportOptions = class(TDNGenericImport<DNImportOptionsClass, DNImportOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCgmImportOptionsClass = interface(DNImportOptionsClass)
  ['{9B4ED48B-D671-588B-B63E-C43D3BE7B032}']
  { constructors } 

    {class} function init: DNCgmImportOptions;

  end;

  ///<summary>
  ///  Import option for import from Computer Graphics Metafile(CGM) format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.CgmImportOptions')]
  DNCgmImportOptions = interface(DNImportOptions)
  ['{1BF5023C-F574-3987-93E1-40136AF711A9}']
  { getters & setters } 

    function get_PageSize: DDN.Aspose.Common.DNSizeF;
    procedure set_PageSize(value: DDN.Aspose.Common.DNSizeF);
    function get_ImportFormat: DNImportFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets output page size for import.
    ///  Default page size - A4 300dpi 2480 X 3508.
    ///</summary>
    property PageSize: DDN.Aspose.Common.DNSizeF read get_PageSize write set_PageSize;
    ///<summary>
    ///  Import format.
    ///</summary>
    property ImportFormat: DNImportFormat read get_ImportFormat;
  end;

  TDNCgmImportOptions = class(TDNGenericImport<DNCgmImportOptionsClass, DNCgmImportOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Collection of Named Destinations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.INamedDestinationCollection')]
  DNINamedDestinationCollection = interface(DDN.mscorlib.DNObject)
  ['{FC4347DF-8EEF-383A-8259-26E3FB8BCABC}']
  { getters & setters } 

    function get_Item(name: string): DNIAppointment;
    procedure set_Item(name: string; value: DNIAppointment);
    function get_Count: Int32;
    function get_Names: TArray<string>;

  { methods } 

    ///<summary>
    ///  Removes destination by its name.
    ///</summary>
    ///  <param name="name"></param>
    procedure Remove(name: string);
    ///<summary>
    ///  Adds new named destination.
    ///</summary>
    ///  <param name="name"></param>
    ///  <param name="appointment"></param>
    procedure Add(name: string; appointment: DNIAppointment);

  { propertys } 

    property Item[name: string]: DNIAppointment read get_Item write set_Item; default;
    ///<summary>
    ///  Returns count of the destinations.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets array of names of the destiantions.
    ///</summary>
    property Names: TArray<string> read get_Names;
  end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Defines Visitor for visiting different pdf operators.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IOperatorSelector')]
  DNIOperatorSelector = interface(DDN.mscorlib.DNObject)
  ['{53222EBF-0D3E-3609-AB15-676640C489C8}']
  { methods } 

    ///<summary>
    ///  Visit/select f operator.
    ///</summary>
    ///  <param name="f">
    ///  Fill path operator (nonzero winding number rule).
    ///</param>
    procedure Visit(f: DNFill); overload;
    ///<summary>
    ///  Visit/select F operator.
    ///</summary>
    ///  <param name="F">
    ///  Fill path operator (nonzero winding number rule).
    ///</param>
    procedure Visit(F: DNObsoleteFill); overload;
    ///<summary>
    ///  Visit/select operator f*.
    ///</summary>
    ///  <param name="f_">
    ///  Fill path operator (even-odd rule).
    ///</param>
    procedure Visit(f_: DNEOFill); overload;
    ///<summary>
    ///  Visit/select G operator.
    ///</summary>
    ///  <param name="G">
    ///  Set gray level operator (for stroking operations).
    ///</param>
    procedure Visit(G: DNSetGrayStroke); overload;
    ///<summary>
    ///  Visit/select g operator.
    ///</summary>
    ///  <param name="g">
    ///  Set gray level operator (for nonstroking operations).
    ///</param>
    procedure Visit(g: DNSetGray); overload;
    ///<summary>
    ///  Visit/select gs operator.
    ///</summary>
    ///  <param name="gs">
    ///  Set graphics state operator.
    ///</param>
    procedure Visit(gs: DNGS); overload;
    ///<summary>
    ///  Visit/select h operator.
    ///</summary>
    ///  <param name="h">
    ///  Close subpath operator.
    ///</param>
    procedure Visit(h: DNClosePath); overload;
    ///<summary>
    ///  Visit/select i operator.
    ///</summary>
    ///  <param name="i">
    ///  Set flatness tolerance operator.
    ///</param>
    procedure Visit(i: DNSetFlat); overload;
    ///<summary>
    ///  Visit/select ID operator.
    ///</summary>
    ///  <param name="ID">
    ///  Begin inline image data operator.
    ///</param>
    procedure Visit(ID: DNOperators_ID); overload;
    ///<summary>
    ///  Visit/select ri operator.
    ///</summary>
    ///  <param name="ri">
    ///  Set color rendering intent operator.
    ///</param>
    procedure Visit(ri: DNSetColorRenderingIntent); overload;
    ///<summary>
    ///  Visit/select J operator.
    ///</summary>
    ///  <param name="J">
    ///  Set line cap style operator.
    ///</param>
    procedure Visit(J: DNSetLineCap); overload;
    ///<summary>
    ///  Visit/select M operator.
    ///</summary>
    ///  <param name="M">
    ///  Set miter limit operator.
    ///</param>
    procedure Visit(M: DNSetMiterLimit); overload;
    ///<summary>
    ///  Visit/select MP operator.
    ///</summary>
    ///  <param name="MP">
    ///  Define marked-content point operator.
    ///</param>
    procedure Visit(MP: DNMP); overload;
    ///<summary>
    ///  Visit/select n operator.
    ///</summary>
    ///  <param name="n">
    ///  End path operator (without filling or stroking).
    ///</param>
    procedure Visit(n: DNEndPath); overload;
    ///<summary>
    ///  Visit/select q operator.
    ///</summary>
    ///  <param name="q">
    ///  Save graphics state operator.
    ///</param>
    procedure Visit(q: DNGSave); overload;
    ///<summary>
    ///  Visit/select Q operator.
    ///</summary>
    ///  <param name="Q">
    ///  Restore graphics state operator.
    ///</param>
    procedure Visit(Q: DNGRestore); overload;
    ///<summary>
    ///  Visit/select re operator.
    ///</summary>
    ///  <param name="re">
    ///  Append rectangle to path operator.
    ///</param>
    procedure Visit(re: DNRe); overload;
    ///<summary>
    ///  Visit/select RG operator.
    ///</summary>
    ///  <param name="RG">
    ///  Set RGB color operator (for stroking operations).
    ///</param>
    procedure Visit(RG: DNSetRGBColorStroke); overload;
    ///<summary>
    ///  Visit/select rg operator.
    ///</summary>
    ///  <param name="rg">
    ///  Set RGB color operator (for nonstroking operations).
    ///</param>
    procedure Visit(rg: DNSetRGBColor); overload;
    ///<summary>
    ///  Visit/select K operator.
    ///</summary>
    ///  <param name="K">
    ///  Set CMYK color operator (for stroking operations).
    ///</param>
    procedure Visit(K: DNSetCMYKColorStroke); overload;
    ///<summary>
    ///  Visit/select k operator.
    ///</summary>
    ///  <param name="k">
    ///  Set CMYK color operator (for nonstroking operations).
    ///</param>
    procedure Visit(k: DNSetCMYKColor); overload;
    ///<summary>
    ///  Visit/select l operator.
    ///</summary>
    ///  <param name="l">
    ///  Append straight line segment to path operator.
    ///</param>
    procedure Visit(l: DNLineTo); overload;
    ///<summary>
    ///  Visit/select m operator.
    ///</summary>
    ///  <param name="m">
    ///  Begin new subpath operator.
    ///</param>
    procedure Visit(m: DNMoveTo); overload;
    ///<summary>
    ///  Visit/select Tw operator.
    ///</summary>
    ///  <param name="Tw">
    ///  Set word spacing operator.
    ///</param>
    procedure Visit(Tw: DNSetWordSpacing); overload;
    ///<summary>
    ///  Visit/select s operator.
    ///</summary>
    ///  <param name="s">
    ///  Close and stroke path operator.
    ///</param>
    procedure Visit(s: DNClosePathStroke); overload;
    ///<summary>
    ///  Visit/select TD operator.
    ///</summary>
    ///  <param name="TD">
    ///  Move text position and set leading operator.
    ///</param>
    procedure Visit(TD: DNMoveTextPositionSetLeading); overload;
    ///<summary>
    ///  Visit/select Tf operator.
    ///</summary>
    ///  <param name="Tf">
    ///  Set text font and size operator.
    ///</param>
    procedure Visit(Tf: DNSelectFont); overload;
    ///<summary>
    ///  Visit/select Tj operator.
    ///</summary>
    ///  <param name="Tj">
    ///  Show text operator.
    ///</param>
    procedure Visit(Tj: DNShowText); overload;
    ///<summary>
    ///  Visit/select TJ operator.
    ///</summary>
    ///  <param name="TJ">
    ///  Show text operator (allowing individual glyph positioning).
    ///</param>
    procedure Visit(TJ: DNSetGlyphsPositionShowText); overload;
    ///<summary>
    ///  Visit/select TL operator.
    ///</summary>
    ///  <param name="TL">
    ///  Set text leading operator.
    ///</param>
    procedure Visit(TL: DNSetTextLeading); overload;
    ///<summary>
    ///  Visit/select Tm operator.
    ///</summary>
    ///  <param name="Tm">
    ///  Set text matrix and text line matrix operator.
    ///</param>
    procedure Visit(Tm: DNSetTextMatrix); overload;
    ///<summary>
    ///  Visit/select Tr operator.
    ///</summary>
    ///  <param name="Tr">
    ///  Set text rendering mode operator.
    ///</param>
    procedure Visit(Tr: DNSetTextRenderingMode); overload;
    ///<summary>
    ///  Visit/select Ts operator.
    ///</summary>
    ///  <param name="Ts">
    ///  Set text rise operator.
    ///</param>
    procedure Visit(Ts: DNSetTextRise); overload;
    ///<summary>
    ///  Visit/select S operator.
    ///</summary>
    ///  <param name="S">
    ///  Stroke path operator.
    ///</param>
    procedure Visit(S: DNStroke); overload;
    ///<summary>
    ///  Visit/select SC operator.
    ///</summary>
    ///  <param name="SC">
    ///  Set color operator (for stroking operations).
    ///</param>
    procedure Visit(SC: DNSetColorStroke); overload;
    ///<summary>
    ///  Visit/select sc operator.
    ///</summary>
    ///  <param name="sc">
    ///  Set color operator (for nonstroking operations).
    ///</param>
    procedure Visit(sc: DNSetColor); overload;
    ///<summary>
    ///  Visit/select SCN operator.
    ///</summary>
    ///  <param name="SCN">
    ///  Set color operator (for stroking operations, ICCBasedand special colour spaces).
    ///</param>
    procedure Visit(SCN: DNSetAdvancedColorStroke); overload;
    ///<summary>
    ///  Visit/select scn operator.
    ///</summary>
    ///  <param name="scn">
    ///  Set color operator (for nonstroking operations, ICCBased and special colour spaces).
    ///</param>
    procedure Visit(scn: DNSetAdvancedColor); overload;
    ///<summary>
    ///  Visit/select sh operator.
    ///</summary>
    ///  <param name="sh">
    ///  Paint area defined by shading pattern operator.
    ///</param>
    procedure Visit(sh: DNShFill); overload;
    ///<summary>
    ///  Visit/select T* operator.
    ///</summary>
    ///  <param name="T_">
    ///  Move to start of next text line operator.
    ///</param>
    procedure Visit(T_: DNMoveToNextLine); overload;
    ///<summary>
    ///  Visit/select Tc operator.
    ///</summary>
    ///  <param name="Tc">
    ///  Set character spacing operator.
    ///</param>
    procedure Visit(Tc: DNSetCharacterSpacing); overload;
    ///<summary>
    ///  Visit/select Td operator.
    ///</summary>
    ///  <param name="Td">
    ///  Move text position operator.
    ///</param>
    procedure Visit(Td: DNMoveTextPosition); overload;
    ///<summary>
    ///  Visit/select y operator.
    ///</summary>
    ///  <param name="y">
    ///  Append curved segment to path operator (final point replicated).
    ///</param>
    procedure Visit(y: DNCurveTo2); overload;
    ///<summary>
    ///  Visit/select W* operator.
    ///</summary>
    ///  <param name="W_">
    ///  Set clipping path operator (even-odd rule).
    ///</param>
    procedure Visit(W_: DNEOClip); overload;
    ///<summary>
    ///  Visit/select Tz operator.
    ///</summary>
    ///  <param name="Tz">
    ///  Set horizontal text scaling operator.
    ///</param>
    procedure Visit(Tz: DNSetHorizontalTextScaling); overload;
    ///<summary>
    ///  Visit/select v operator.
    ///</summary>
    ///  <param name="v">
    ///  Append curved segment to path operator (initial point replicated).
    ///</param>
    procedure Visit(v: DNCurveTo1); overload;
    ///<summary>
    ///  Visit/select W operator.
    ///</summary>
    ///  <param name="W">
    ///  Set clipping path operator (nonzero winding number rule).
    ///</param>
    procedure Visit(W: DNClip); overload;
    ///<summary>
    ///  Visit/select w operator.
    ///</summary>
    ///  <param name="w">
    ///  Set line width operator.
    ///</param>
    procedure Visit(w: DNSetLineWidth); overload;
    ///<summary>
    ///  Visit/select j operator.
    ///</summary>
    ///  <param name="j">
    ///  Set line join style operator.
    ///</param>
    procedure Visit(j: DNSetLineJoin); overload;
    ///<summary>
    ///  Visit/select EX operator.
    ///</summary>
    ///  <param name="EX">
    ///  End compatibility section operator.
    ///</param>
    procedure Visit(EX: DNEX); overload;
    ///<summary>
    ///  Visit/select ET operator.
    ///</summary>
    ///  <param name="ET">
    ///  End text object operator.
    ///</param>
    procedure Visit(ET: DNET); overload;
    ///<summary>
    ///  Visit/select EMC operator.
    ///</summary>
    ///  <param name="EMC">
    ///  End marked-content sequence operator.
    ///</param>
    procedure Visit(EMC: DNEMC); overload;
    ///<summary>
    ///  Visit/select EI operator.
    ///</summary>
    ///  <param name="EI">
    ///  End inline image object operator.
    ///</param>
    procedure Visit(EI: DNEI); overload;
    ///<summary>
    ///  Visit/select DP operator.
    ///</summary>
    ///  <param name="DP">
    ///  Define marked-content point operator (with property list).
    ///</param>
    procedure Visit(DP: DNDP); overload;
    ///<summary>
    ///  Visit/select Do operator.
    ///</summary>
    ///  <param name="Do">
    ///  Invoke named XObject operator.
    ///</param>
    procedure Visit(&Do: DNDo); overload;
    ///<summary>
    ///  Visit/select d operator.
    ///</summary>
    ///  <param name="d">
    ///  Set line dash pattern operator.
    ///</param>
    procedure Visit(d: DNSetDash); overload;
    ///<summary>
    ///  Visit/select d0 operator.
    ///</summary>
    ///  <param name="d0">
    ///  Set glyph width in Type 3 font operator.
    ///</param>
    procedure Visit(d0: DNSetCharWidth); overload;
    ///<summary>
    ///  Visit/select d1 operator.
    ///</summary>
    ///  <param name="d1">
    ///  Set glyph width and bounding box in Type 3 font operator.
    ///</param>
    procedure Visit(d1: DNSetCharWidthBoundingBox); overload;
    ///<summary>
    ///  Visit/select CS operator.
    ///</summary>
    ///  <param name="CS">
    ///  Set color space operator (for stroking operations).
    ///</param>
    procedure Visit(CS: DNSetColorSpaceStroke); overload;
    ///<summary>
    ///  Visit/select cs operator.
    ///</summary>
    ///  <param name="cs">
    ///  Set color space operator (for nonstroking operations).
    ///</param>
    procedure Visit(cs: DNSetColorSpace); overload;
    ///<summary>
    ///  Visit/select cm operator.
    ///</summary>
    ///  <param name="cm">
    ///  Concatenate matrix to current transformation matrix operator.
    ///</param>
    procedure Visit(cm: DNConcatenateMatrix); overload;
    ///<summary>
    ///  Visit/select c operator.
    ///</summary>
    ///  <param name="c">
    ///  Append curved segment to path operator (three control points).
    ///</param>
    procedure Visit(c: DNCurveTo); overload;
    ///<summary>
    ///  Visit/select BX operator.
    ///</summary>
    ///  <param name="BX">
    ///  Begin compatibility section operator.
    ///</param>
    procedure Visit(BX: DNBX); overload;
    ///<summary>
    ///  Visit/select BT operator.
    ///</summary>
    ///  <param name="BT">
    ///  Begin text object operator.
    ///</param>
    procedure Visit(BT: DNBT); overload;
    ///<summary>
    ///  Visit/select BMC operator.
    ///</summary>
    ///  <param name="BMC">
    ///  Begin marked-content sequence operator.
    ///</param>
    procedure Visit(BMC: DNBMC); overload;
    ///<summary>
    ///  Visit/select BI operator.
    ///</summary>
    ///  <param name="BI">
    ///  Begin inline image object operator.
    ///</param>
    procedure Visit(BI: DNBI); overload;
    ///<summary>
    ///  Visit/select BDC operator.
    ///</summary>
    ///  <param name="BDC">
    ///  Begin marked-content sequence operator (with property list).
    ///</param>
    procedure Visit(BDC: DNBDC); overload;
    ///<summary>
    ///  Visit/select B operator.
    ///</summary>
    ///  <param name="B">
    ///  Fill and stroke path operator (nonzero winding number rule).
    ///</param>
    procedure Visit(B: DNFillStroke); overload;
    ///<summary>
    ///  Visit/select b operator.
    ///</summary>
    ///  <param name="b">
    ///  Close, fill, and stroke path operator (nonzero winding number rule).
    ///</param>
    procedure Visit(b: DNClosePathFillStroke); overload;
    ///<summary>
    ///  Visit/select B* operator.
    ///</summary>
    ///  <param name="B_">
    ///  Fill and stroke path operator (even-odd rule).
    ///</param>
    procedure Visit(B_: DNEOFillStroke); overload;
    ///<summary>
    ///  Visit/select b* operator.
    ///</summary>
    ///  <param name="b_">
    ///  Close, fill, and stroke path operator (even-odd rule).
    ///</param>
    procedure Visit(b_: DNClosePathEOFillStroke); overload;
    ///<summary>
    ///  Visit/select ' operator.
    ///</summary>
    ///  <param name="_">
    ///  Move to next line and show text operator.
    ///</param>
    procedure Visit(_: DNMoveToNextLineShowText); overload;
    ///<summary>
    ///  Visit/select '' operator.
    ///</summary>
    ///  <param name="__">
    ///  Set word and character spacing, move to next line, and show text operator.
    ///</param>
    procedure Visit(__: DNSetSpacingMoveToNextLineShowText); overload;
    ///<summary>
    ///  Visit/select any text operator operator.
    ///</summary>
    ///  <param name="textOperator">
    ///  General text operator which is used to select the set of corresponding pdf operators.
    ///</param>
    procedure Visit(textOperator: DNTextOperator); overload;

  end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Defines conversion options related to a set of pages to convert.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IPageSetOptions')]
  DNIPageSetOptions = interface(DDN.mscorlib.DNObject)
  ['{12D7FFEC-5638-32A5-A8F7-4E47210D47F7}']
  { getters & setters } 

    function get_ExplicitListOfSavedPages: TArray<Int32>;
    procedure set_ExplicitListOfSavedPages(value: TArray<Int32>);

  { propertys } 

    ///<summary>
    ///  Specifies the array of numbers of pages to convert.
    ///</summary>
    property ExplicitListOfSavedPages: TArray<Int32> read get_ExplicitListOfSavedPages write set_ExplicitListOfSavedPages;
  end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Defines conversion options related to pipeline configuration.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IPipelineOptions')]
  DNIPipelineOptions = interface(DDN.mscorlib.DNObject)
  ['{F491BECB-C63F-3B3B-B17B-C82069D0294C}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);

  { propertys } 

    ///<summary>
    ///  Specifies the size of a portion of pages to pass from node to node.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
  end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Resource loading callback.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IResourceLoadingCallback')]
  DNIResourceLoadingCallback = interface(DDN.mscorlib.DNObject)
  ['{539BB742-5A4A-3CA6-8ECC-8494E425137C}']
  { methods } 

    ///<summary>
    ///  Resource loading
    ///</summary>
    ///  <param name="sender"></param>
    ///  <param name="e"></param>
    ///<returns></returns>
    function ResourceLoading(sender: DDN.mscorlib.DNObject; e: DNResourceLoadingEventArgs): DNResourceLoadingResult;

  end;

  //-------------namespace: Aspose.Pdf----------------
  ///<summary>
  ///  Interface for user's callback mechanism support.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IWarningCallback')]
  DNIWarningCallback = interface(DDN.mscorlib.DNObject)
  ['{C893114E-B519-3477-A372-3112A391C27D}']
  { methods } 

    ///<summary>
    ///  The callback method for some program notifications.
    ///</summary>
    ///  <param name="warning">
    ///  the warning information for some happened warning
    ///</param>
    ///<returns>
    ///  the result of further program workflow
    ///</returns>
    function Warning(warning: DNWarningInfo): DNReturnAction;

  end;

  //-------------namespace: Aspose.Pdf----------------
  DNJavaScriptCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{67E26453-BB0F-5F1A-BDF8-DF4A26552FC3}']
  end;

  ///<summary>
  ///  This class represnets collection of JavaScript
  ///</summary>
  [DNTypeName('Aspose.Pdf.JavaScriptCollection')]
  DNJavaScriptCollection = interface(DDN.mscorlib.DNObject)
  ['{01FB5D50-E71F-3877-8F6D-2C4255E66234}']
  { getters & setters } 

    function get_Keys: DDN.mscorlib.DNIList<string>;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);

  { methods } 

    ///<summary>
    ///  Removes JavaScript by its name.
    ///</summary>
    ///  <param name="key"></param>
    ///<returns></returns>
    function Remove(key: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  List of keys in JavaScript collection.
    ///</summary>
    property Keys: DDN.mscorlib.DNIList<string> read get_Keys;
    property Item[key: string]: string read get_Item write set_Item; default;
  end;

  TDNJavaScriptCollection = class(TDNGenericImport<DNJavaScriptCollectionClass, DNJavaScriptCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLayerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B376310D-C04B-5C04-BF61-96F6773A5CD0}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Layer" />
    ///  class.
    ///</summary>
    ///  <param name="id">The layer id</param>
    ///  <param name="name">The layer name</param>
    {class} function init(id: string; name: string): DNLayer;

  end;

  ///<summary>
  ///  Represents page layer.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Layer')]
  DNLayer = interface(DDN.mscorlib.DNObject)
  ['{D0BA5031-552E-3D73-949B-39A54690C9A1}']
  { getters & setters } 

    function get_Name: string;
    function get_Id: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the layer name.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the layer id.
    ///</summary>
    property Id: string read get_Id;
  end;

  TDNLayer = class(TDNGenericImport<DNLayerClass, DNLayer>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLevelFormatClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27AACD25-8898-5661-843C-1AB43DE9AB56}']
  { constructors } 

    {class} function init: DNLevelFormat;

  end;

  ///<summary>
  ///  Represents format of the table of contents.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LevelFormat')]
  DNLevelFormat = interface(DDN.mscorlib.DNObject)
  ['{01FB895F-F382-3180-9943-64583AB3E335}']
  { getters & setters } 

    function get_LineDash: DNTabLeaderType;
    procedure set_LineDash(value: DNTabLeaderType);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets TOC line dash.
    ///</summary>
    property LineDash: DNTabLeaderType read get_LineDash write set_LineDash;
    ///<summary>
    ///  Gets or sets a list level margin
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets a subsequent lines indent
    ///</summary>
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    ///<summary>
    ///  Gets or sets a list level text state
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
  end;

  TDNLevelFormat = class(TDNGenericImport<DNLevelFormatClass, DNLevelFormat>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLicenseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71F0AFC9-2067-5981-8039-2F7055DC37AE}']
  { constructors } 

    {class} function init: DNLicense;

  end;

  ///<summary>
  ///  Provides methods to license the component.
  ///</summary>
  [DNTypeName('Aspose.Pdf.License')]
  DNLicense = interface(DDN.mscorlib.DNObject)
  ['{F06307FC-3DFF-3D9B-864E-DFA83169187E}']
  { getters & setters } 

    function get_Embedded: Boolean;
    procedure set_Embedded(value: Boolean);

  { methods } 

    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///<remarks><p>Tries to find the license in the following locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. The folder that contains the Aspose component assembly.</p>
    ///  <p>3. The folder that contains the client's calling assembly.</p>
    ///  <p>4. The folder that contains the entry (startup) assembly.</p>
    ///  <p>5. An embedded resource in the client's calling assembly.</p>
    ///  <p><b>Note:</b>
    ///  On the .NET Compact Framework, tries to find the license only in these locations:</p>
    ///  <p>1. Explicit path.</p>
    ///  <p>2. An embedded resource in the client's calling assembly.</p>
    ///</remarks>
    ///  <param name="licenseName">Can be a full or short file name or name of an embedded resource.
    ///  Use an empty string to switch to evaluation mode.</param>
    procedure SetLicense(licenseName: string); overload;
    ///<summary>
    ///  Licenses the component.
    ///</summary>
    ///  <param name="stream">A stream that contains the license.</param>
    ///<remarks><p>Use this method to load a license from a stream.</p>
    ///</remarks>
    procedure SetLicense(stream: DDN.mscorlib.DNStream); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  License number was added as embedded resource.
    ///</summary>
    property Embedded: Boolean read get_Embedded write set_Embedded;
  end;

  TDNLicense = class(TDNGenericImport<DNLicenseClass, DNLicense>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLoadOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A58114AF-CEED-5F4A-B1DA-8882A4BB2B14}']
  end;

  ///<summary>
  ///  LoadOptions type holds level of abstraction on individual load options
  ///</summary>
  [DNTypeName('Aspose.Pdf.LoadOptions')]
  DNLoadOptions = interface(DDN.mscorlib.DNObject)
  ['{2D8E3243-F106-31B2-9A87-352B97A99BF3}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNLoadOptions = class(TDNGenericImport<DNLoadOptionsClass, DNLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNApsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{C62515F1-41B7-5898-95D2-213B7C340656}']
  { constructors } 

    {class} function init: DNApsLoadOptions;

  end;

  ///<summary>
  ///  LoadOptions type holds level of abstraction on individual load options
  ///</summary>
  [DNTypeName('Aspose.Pdf.ApsLoadOptions')]
  DNApsLoadOptions = interface(DNLoadOptions)
  ['{8C6E5D8E-9CB3-347C-ADB5-DB2AA1E98C5F}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNApsLoadOptions = class(TDNGenericImport<DNApsLoadOptionsClass, DNApsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNCgmLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{5EF86121-9187-5F28-B968-63D0811F971F}']
  { constructors } 

    ///<summary>
    ///  Creates default load options for converting CGM file into pdf document.
    ///  Default pdf page size - A4 300dpi 2480 X 3508.
    ///</summary>
    {class} function init: DNCgmLoadOptions; overload;
    ///<summary>
    ///  Creates load options with defined <see cref="!:pageSize" />
    ///  .
    ///</summary>
    ///  <param name="pageSize">
    ///  Defines pdf page width and height.
    ///</param>
    {class} function init(pageSize: DDN.Aspose.Common.DNSizeF): DNCgmLoadOptions; overload;

  end;

  ///<summary>
  ///  Contains options for loading/importing CGM file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.CgmLoadOptions')]
  DNCgmLoadOptions = interface(DNLoadOptions)
  ['{290B5E9B-D30E-3C40-A733-1663E5245E90}']
  { getters & setters } 

    function get_PageSize: DDN.Aspose.Common.DNSizeF;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets output page size for import.
    ///</summary>
    property PageSize: DDN.Aspose.Common.DNSizeF read get_PageSize;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNCgmLoadOptions = class(TDNGenericImport<DNCgmLoadOptionsClass, DNCgmLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEpubLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8878B506-8AA2-53F6-9EFE-340766A92CD1}']
  { constructors } 

    ///<summary>
    ///  Creates default load options for converting EPUB file into pdf document.
    ///  Default pdf page size - A4 300dpi 2480 X 3508.
    ///</summary>
    {class} function init: DNEpubLoadOptions; overload;
    ///<summary>
    ///  Creates load options with specified page size.
    ///</summary>
    ///  <param name="pageSize">
    ///  Defines pdf page width and height.
    ///</param>
    {class} function init(pageSize: DDN.Aspose.Common.DNSizeF): DNEpubLoadOptions; overload;

  end;

  ///<summary>
  ///  Contains options for loading/importing EPUB file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.EpubLoadOptions')]
  DNEpubLoadOptions = interface(DNLoadOptions)
  ['{1FBDBF5A-CBC9-36A5-A8C1-49EF4317192E}']
  { getters & setters } 

    function get_PageSize: DDN.Aspose.Common.DNSizeF;
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_MarginsAreaUsageMode: DNLoadOptions_MarginsAreaUsageModes;
   procedure __fakeFieldSet_MarginsAreaUsageMode(value: DNLoadOptions_MarginsAreaUsageModes);
   function __fakeFieldGet_PageSizeAdjustmentMode: DNLoadOptions_PageSizeAdjustmentModes;
   procedure __fakeFieldSet_PageSizeAdjustmentMode(value: DNLoadOptions_PageSizeAdjustmentModes);

  { fields } 

    ///<summary>
    ///  Represents mode of usage of margins area - defines treatement
    ///  of instructions (if any) of CSS of imported document
    ///  related to usage of margins.
    ///</summary>
   property MarginsAreaUsageMode: DNLoadOptions_MarginsAreaUsageModes read __fakeFieldGet_MarginsAreaUsageMode write __fakeFieldSet_MarginsAreaUsageMode;
    ///<summary>
    ///  ATTENTION! The feature implemented but did not put yet to public API since blocker issue in
    ///  OSHARED layer revealed for sample document.
    ///  Represents mode of usage of page size during conversion.
    ///  Formats (like HTML, EPUB etc), usually have float design, so, it allows to fit required
    ///  pagesize. But sometimes content has specified horizontal positions or size that
    ///  does not allow put content into required page size.
    ///  In such case we can define what should be done in this case (i.e when size of content does not fit
    ///  required initial page size of result PDF document).
    ///</summary>
   property PageSizeAdjustmentMode: DNLoadOptions_PageSizeAdjustmentModes read __fakeFieldGet_PageSizeAdjustmentMode write __fakeFieldSet_PageSizeAdjustmentMode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets output page size for import.
    ///</summary>
    property PageSize: DDN.Aspose.Common.DNSizeF read get_PageSize;
    ///<summary>
    ///  Gets reference on object that represent marging info.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNEpubLoadOptions = class(TDNGenericImport<DNEpubLoadOptionsClass, DNEpubLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{AF9BCB17-B902-5693-8A36-563159F17471}']
  { constructors } 

    ///<summary>
    ///  Creates load options for converting html into pdf document with empty base path.
    ///</summary>
    {class} function init: DNHtmlLoadOptions; overload;
    ///<summary>
    ///  Creates load options for converting html into pdf document with defined base path.
    ///</summary>
    ///  <param name="basePath">
    ///  The base path/url for the html file.
    ///</param>
    {class} function init(basePath: string): DNHtmlLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents options for loading/importing html file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlLoadOptions')]
  DNHtmlLoadOptions = interface(DNLoadOptions)
  ['{E41B39B8-C880-3A0B-8169-F3D49E9ECDE3}']
  { getters & setters } 

    function get_IsRenderToSinglePage: Boolean;
    procedure set_IsRenderToSinglePage(value: Boolean);
    function get_IsEmbedFonts: Boolean;
    procedure set_IsEmbedFonts(value: Boolean);
    function get_HtmlMediaType: DNHtmlMediaType;
    procedure set_HtmlMediaType(value: DNHtmlMediaType);
    function get_InputEncoding: string;
    procedure set_InputEncoding(value: string);
    function get_BasePath: string;
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ExternalResourcesCredentials: DDN.Aspose.Common.DNICredentials;
   procedure __fakeFieldSet_ExternalResourcesCredentials(value: DDN.Aspose.Common.DNICredentials);
   function __fakeFieldGet_CustomLoaderOfExternalResources: DNLoadOptions_ResourceLoadingStrategy;
   procedure __fakeFieldSet_CustomLoaderOfExternalResources(value: DNLoadOptions_ResourceLoadingStrategy);

  { fields } 

    ///<summary>
    ///  If loading of external data referenced in HTML
    ///  requirs credentials, You can put them into this parameter - they will be used
    ///  during loading of external resources
    ///</summary>
   property ExternalResourcesCredentials: DDN.Aspose.Common.DNICredentials read __fakeFieldGet_ExternalResourcesCredentials write __fakeFieldSet_ExternalResourcesCredentials;
    ///<summary>
    ///  Sometimes it's necessary to avoid usage of internal loader of external resources(like images or CSSes)
    ///  and supply custom method that will get requested resources from somewhere. For example, during usage
    ///  of Aspose.PDF in cloude direct access to referenced files impossible: in such case some custome code put
    ///  into special method should be used, and delegate that refers that method should be assygned to this attribute.
    ///</summary>
   property CustomLoaderOfExternalResources: DNLoadOptions_ResourceLoadingStrategy read __fakeFieldGet_CustomLoaderOfExternalResources write __fakeFieldSet_CustomLoaderOfExternalResources;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets rendering all document to single page
    ///</summary>
    property IsRenderToSinglePage: Boolean read get_IsRenderToSinglePage write set_IsRenderToSinglePage;
    ///<summary>
    ///  Gets or sets fonts embedding to result document
    ///</summary>
    property IsEmbedFonts: Boolean read get_IsEmbedFonts write set_IsEmbedFonts;
    ///<summary>
    ///  Gets or sets possible media types used during rendering.
    ///</summary>
    property HtmlMediaType: DNHtmlMediaType read get_HtmlMediaType write set_HtmlMediaType;
    ///<summary>
    ///  Gets or sets the attribute specifying the encoding used for this document at the time of the parsing. If this attribute is null the encoding will determine from document character set atribute.
    ///</summary>
    property InputEncoding: string read get_InputEncoding write set_InputEncoding;
    ///<summary>
    ///  The base path/url for the html file.
    ///</summary>
    property BasePath: string read get_BasePath;
    ///<summary>
    ///  Gets or sets document page info
    ///</summary>
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNHtmlLoadOptions = class(TDNGenericImport<DNHtmlLoadOptionsClass, DNHtmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMdLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{2B80C303-5B80-5E23-B05A-78EFF710C08E}']
  { constructors } 

    {class} function init: DNMdLoadOptions;

  end;

  ///<summary>
  ///  Load options for Markdown format conversion.
  ///</summary>
  [DNTypeName('Aspose.Pdf.MdLoadOptions')]
  DNMdLoadOptions = interface(DNLoadOptions)
  ['{4E7142EE-49BB-350C-BF04-138F3490A26B}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNMdLoadOptions = class(TDNGenericImport<DNMdLoadOptionsClass, DNMdLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMhtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1E5B292D-DF29-5BC9-9BC9-F9F1329D6AA6}']
  { constructors } 

    {class} function init: DNMhtLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing of .mht-file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.MhtLoadOptions')]
  DNMhtLoadOptions = interface(DNLoadOptions)
  ['{D6C11438-321E-3E5E-A4B7-5D6B08D36705}']
  { getters & setters } 

    function get_PageInfo: DNPageInfo;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets document page info
    ///</summary>
    property PageInfo: DNPageInfo read get_PageInfo;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNMhtLoadOptions = class(TDNGenericImport<DNMhtLoadOptionsClass, DNMhtLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPclLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{360D5812-BC00-5344-8244-D1A898CE5801}']
  { constructors } 

    {class} function init: DNPclLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading(import) PCL file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PclLoadOptions')]
  DNPclLoadOptions = interface(DNLoadOptions)
  ['{1C17EA84-4C9D-3C22-BC44-00EA6123B3C4}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNPclLoadOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNPclLoadOptions_ConversionEngines);
   function __fakeFieldGet_SupressErrors: Boolean;
   procedure __fakeFieldSet_SupressErrors(value: Boolean);
   function __fakeFieldGet_Exceptions: DDN.mscorlib.DNIList<DDN.mscorlib.DNException>;
   procedure __fakeFieldSet_Exceptions(value: DDN.mscorlib.DNIList<DDN.mscorlib.DNException>);

  { fields } 

    ///<summary>
    ///  Defines conversion engine that will be used for conversion
    ///</summary>
   property ConversionEngine: DNPclLoadOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;
    ///<summary>
    ///  Gets or sets boolean value which indicates will PCL conversion errors should be supressed.
    ///</summary>
   property SupressErrors: Boolean read __fakeFieldGet_SupressErrors write __fakeFieldSet_SupressErrors;
    ///<summary>
    ///  List of conversion errors.
    ///</summary>
   property Exceptions: DDN.mscorlib.DNIList<DDN.mscorlib.DNException> read __fakeFieldGet_Exceptions write __fakeFieldSet_Exceptions;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines batch size if batched conversion is applicable
    ///  to source and destination formats pair.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPclLoadOptions = class(TDNGenericImport<DNPclLoadOptionsClass, DNPclLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfXmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{90C8FBE3-9E05-5D30-B933-CE52CF69090C}']
  { constructors } 

    {class} function init: DNPdfXmlLoadOptions;

  end;

  ///<summary>
  ///  Load options for PdfXml format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfXmlLoadOptions')]
  DNPdfXmlLoadOptions = interface(DNLoadOptions)
  ['{4455C715-A3C3-3640-9ACB-330CC0A4F245}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPdfXmlLoadOptions = class(TDNGenericImport<DNPdfXmlLoadOptionsClass, DNPdfXmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1EB8D6E9-14F4-50C3-814F-C081C5E138F5}']
  { constructors } 

    {class} function init: DNPsLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing of .mht-file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PsLoadOptions')]
  DNPsLoadOptions = interface(DNLoadOptions)
  ['{6BB61908-C8C8-3F68-AFFA-EBACEDF30AC8}']
  { getters & setters } 

    function get_FontsFolders: TArray<string>;
    procedure set_FontsFolders(value: TArray<string>);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FontsFolders: TArray<string> read get_FontsFolders write set_FontsFolders;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNPsLoadOptions = class(TDNGenericImport<DNPsLoadOptionsClass, DNPsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8E8266E1-BC84-5A06-A067-84EDCEAA50A7}']
  { constructors } 

    {class} function init: DNSvgLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing SVG file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgLoadOptions')]
  DNSvgLoadOptions = interface(DNLoadOptions)
  ['{FB7FBB46-016F-31A6-9400-36A088486D7C}']
  { getters & setters } 

    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_AdjustPageSize: Boolean;
    procedure set_AdjustPageSize(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNSvgLoadOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNSvgLoadOptions_ConversionEngines);

  { fields } 

    ///<summary>
    ///  Allows select conversion engine that will be in use during conversion.
    ///  Currently new engine is in B-testing stage, so this value by default set to
    ///  ConversionEngines.LegacyEngine
    ///</summary>
   property ConversionEngine: DNSvgLoadOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets page info that should be applied during loading of document.
    ///  NOTE that this parameter only works when ConversionEngine == ConversionEngines.NewEngine
    ///</summary>
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    ///<summary>
    ///  Adust pdf page size to svg size
    ///</summary>
    property AdjustPageSize: Boolean read get_AdjustPageSize write set_AdjustPageSize;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNSvgLoadOptions = class(TDNGenericImport<DNSvgLoadOptionsClass, DNSvgLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{8017A97C-607F-5115-A9A4-83496EED73DA}']
  { constructors } 

    {class} function init: DNTeXLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing TeX file into PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TeXLoadOptions')]
  DNTeXLoadOptions = interface(DNLoadOptions)
  ['{93B981BB-6914-3EF7-80F6-4744F084C8C2}']
  { getters & setters } 

    function get_TextFontName: string;
    procedure set_TextFontName(value: string);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MathFontName: string;
    procedure set_MathFontName(value: string);
    function get_SpecSymbolsFontName: string;
    procedure set_SpecSymbolsFontName(value: string);
    function get_UseTempFile: Boolean;
    procedure set_UseTempFile(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets/Gets name of the font used for rendering math formulas.
    ///</summary>
    property TextFontName: string read get_TextFontName write set_TextFontName;
    ///<summary>
    ///  Resource loading callback.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Sets/Gets callback object for info/errors notification.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Sets/Gets name of the font used for rendering math formulas.
    ///</summary>
    property MathFontName: string read get_MathFontName write set_MathFontName;
    ///<summary>
    ///  Sets/Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.
    ///</summary>
    property SpecSymbolsFontName: string read get_SpecSymbolsFontName write set_SpecSymbolsFontName;
    ///<summary>
    ///  Sets/Gets the value indicating whether the LaTeX parser should save normalized content into a temp file or into memory.
    ///</summary>
    property UseTempFile: Boolean read get_UseTempFile write set_UseTempFile;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNTeXLoadOptions = class(TDNGenericImport<DNTeXLoadOptionsClass, DNTeXLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLatexLoadOptionsClass = interface(DNTeXLoadOptionsClass)
  ['{182D45B5-9FCD-5446-9013-FA4AAF3AA3BB}']
  { constructors } 

    {class} function init: DNLatexLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing TeX file into PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LatexLoadOptions')]
  DNLatexLoadOptions = interface(DNTeXLoadOptions)
  ['{66B43D44-F7FE-3D14-BE69-DF6D35D0925C}']
  { getters & setters } 

    function get_TextFontName: string;
    procedure set_TextFontName(value: string);
    function get_ResourceLoadingCallback: DNIResourceLoadingCallback;
    procedure set_ResourceLoadingCallback(value: DNIResourceLoadingCallback);
    function get_WarningCallback: DNIWarningCallback;
    procedure set_WarningCallback(value: DNIWarningCallback);
    function get_MathFontName: string;
    procedure set_MathFontName(value: string);
    function get_SpecSymbolsFontName: string;
    procedure set_SpecSymbolsFontName(value: string);
    function get_UseTempFile: Boolean;
    procedure set_UseTempFile(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets/Gets name of the font used for rendering math formulas.
    ///</summary>
    property TextFontName: string read get_TextFontName write set_TextFontName;
    ///<summary>
    ///  Resource loading callback.
    ///</summary>
    property ResourceLoadingCallback: DNIResourceLoadingCallback read get_ResourceLoadingCallback write set_ResourceLoadingCallback;
    ///<summary>
    ///  Sets/Gets callback object for info/errors notification.
    ///</summary>
    property WarningCallback: DNIWarningCallback read get_WarningCallback write set_WarningCallback;
    ///<summary>
    ///  Sets/Gets name of the font used for rendering math formulas.
    ///</summary>
    property MathFontName: string read get_MathFontName write set_MathFontName;
    ///<summary>
    ///  Sets/Gets name of the font used for rendering special symbols, e.g. \sigma, \textbraceright, \vdots, etc.
    ///</summary>
    property SpecSymbolsFontName: string read get_SpecSymbolsFontName write set_SpecSymbolsFontName;
    ///<summary>
    ///  Sets/Gets the value indicating whether the LaTeX parser should save normalized content into a temp file or into memory.
    ///</summary>
    property UseTempFile: Boolean read get_UseTempFile write set_UseTempFile;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNLatexLoadOptions = class(TDNGenericImport<DNLatexLoadOptionsClass, DNLatexLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTxtLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{950DAFA4-3D27-5A0E-87B4-EB9FFB8906CC}']
  { constructors } 

    {class} function init: DNTxtLoadOptions;

  end;

  ///<summary>
  ///  Load options for TXT to PDF conversion.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TxtLoadOptions')]
  DNTxtLoadOptions = interface(DNLoadOptions)
  ['{191558D2-2FDD-30ED-8E4D-ACE2A7E4A293}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNTxtLoadOptions = class(TDNGenericImport<DNTxtLoadOptionsClass, DNTxtLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmlLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{614C0970-C105-51B2-B2E9-B541924DBA09}']
  { constructors } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" />
    ///  object without xsl data.
    ///</summary>
    {class} function init: DNXmlLoadOptions; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" />
    ///  object with xsl data.
    ///</summary>
    ///  <param name="xslFile">
    ///  Xsl file to convert xml document into pdf document.
    ///</param>
    {class} function init(xslFile: string): DNXmlLoadOptions; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XmlLoadOptions" />
    ///  object with xsl data.
    ///</summary>
    ///  <param name="xslStream">
    ///  Xsl stream to convert xml document into pdf document.
    ///</param>
    {class} function init(xslStream: DDN.mscorlib.DNStream): DNXmlLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents options for loading/importing XML file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmlLoadOptions')]
  DNXmlLoadOptions = interface(DNLoadOptions)
  ['{97E3986A-BFF4-3833-8ADA-A72AFC18A14C}']
  { getters & setters } 

    function get_XslStream: DDN.mscorlib.DNStream;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets xsl data for converting xml into pdf document.
    ///</summary>
    property XslStream: DDN.mscorlib.DNStream read get_XslStream;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXmlLoadOptions = class(TDNGenericImport<DNXmlLoadOptionsClass, DNXmlLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXslFoLoadOptionsClass = interface(DNXmlLoadOptionsClass)
  ['{6C842E81-296A-532E-B3B4-53D19DC4185E}']
  { constructors } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" />
    ///  object without xsl data.
    ///</summary>
    {class} function init: DNXslFoLoadOptions; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" />
    ///  object with xsl data.
    ///</summary>
    ///  <param name="xslFile">
    ///  Xsl file to convert XSL-FO document into pdf document.
    ///</param>
    {class} function init(xslFile: string): DNXslFoLoadOptions; overload;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.XslFoLoadOptions" />
    ///  object with xsl data.
    ///</summary>
    ///  <param name="xslStream">
    ///  Xsl stream to convert XSL-FO document into pdf document.
    ///</param>
    {class} function init(xslStream: DDN.mscorlib.DNStream): DNXslFoLoadOptions; overload;

  end;

  ///<summary>
  ///  Represents options for loading/importing XSL-FO file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XslFoLoadOptions')]
  DNXslFoLoadOptions = interface(DNXmlLoadOptions)
  ['{E1AA36C7-FC25-3691-A95F-0ED4CFF7EB47}']
  { getters & setters } 

    function get_BasePath: string;
    procedure set_BasePath(value: string);
    function get_XslStream: DDN.mscorlib.DNStream;
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { fields getter & setter } 

   function __fakeFieldGet_ParsingErrorsHandlingType: DNXslFoLoadOptions_ParsingErrorsHandlingTypes;
   procedure __fakeFieldSet_ParsingErrorsHandlingType(value: DNXslFoLoadOptions_ParsingErrorsHandlingTypes);

  { fields } 

    ///<summary>
    ///  Source XSLFO document can contain formatting errors. This enum enumerates possible strategies of handking of that errors
    ///</summary>
   property ParsingErrorsHandlingType: DNXslFoLoadOptions_ParsingErrorsHandlingTypes read __fakeFieldGet_ParsingErrorsHandlingType write __fakeFieldSet_ParsingErrorsHandlingType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The base path/url from which are searched relative pathes to external resources (if any) referenced in loaded SVG file.
    ///</summary>
    property BasePath: string read get_BasePath write set_BasePath;
    ///<summary>
    ///  Gets xsl data for converting xml into pdf document.
    ///</summary>
    property XslStream: DDN.mscorlib.DNStream read get_XslStream;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXslFoLoadOptions = class(TDNGenericImport<DNXslFoLoadOptionsClass, DNXslFoLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXpsLoadOptionsClass = interface(DNLoadOptionsClass)
  ['{1246D3C0-4305-50F7-8437-5FF491CEE5B6}']
  { constructors } 

    {class} function init: DNXpsLoadOptions;

  end;

  ///<summary>
  ///  Represents options for loading/importing xps file into pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XpsLoadOptions')]
  DNXpsLoadOptions = interface(DNLoadOptions)
  ['{98888D41-A779-3241-9466-E17057B99D63}']
  { getters & setters } 

    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_LoadFormat: DNLoadFormat;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Defines batch size if batched conversion is applicable
    ///  to source and destination formats pair.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Load operation continues, however the user may also return Abort in which case the Load operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Represents file format which <see cref="T:Aspose.Pdf.LoadOptions" />
    ///  describes.
    ///</summary>
    property LoadFormat: DNLoadFormat read get_LoadFormat;
  end;

  TDNXpsLoadOptions = class(TDNGenericImport<DNXpsLoadOptionsClass, DNXpsLoadOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLoadOptions_ResourceLoadingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5FB4E4F9-0097-5A36-B000-96F2E8F4FFB9}']
  { constructors } 

    ///<summary>
    ///  Creates instance of loading result
    ///</summary>
    ///  <param name="data"> reult of custom loading must be allways provided, it can be zero-length array if it's impossible to get any result </param>
    {class} function init(data: TArray<Byte>): DNLoadOptions_ResourceLoadingResult;

  end;

  ///<summary>
  ///  Result of custom loading of resource
  ///</summary>
  [DNTypeName('Aspose.Pdf.LoadOptions+ResourceLoadingResult')]
  DNLoadOptions_ResourceLoadingResult = interface(DDN.mscorlib.DNObject)
  ['{7F768365-7DE9-3004-8F9B-AB34F885F193}']
  { getters & setters } 

    function get_Data: TArray<Byte>;

  { fields getter & setter } 

   function __fakeFieldGet_EncodingIfKnown: DDN.mscorlib.DNEncoding;
   procedure __fakeFieldSet_EncodingIfKnown(value: DDN.mscorlib.DNEncoding);
   function __fakeFieldGet_ExceptionOfLoadingIfAny: DDN.mscorlib.DNException;
   procedure __fakeFieldSet_ExceptionOfLoadingIfAny(value: DDN.mscorlib.DNException);
   function __fakeFieldGet_MIMETypeIfKnown: string;
   procedure __fakeFieldSet_MIMETypeIfKnown(value: string);
   function __fakeFieldGet_LoadingCancelled: Boolean;
   procedure __fakeFieldSet_LoadingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes encoding of resource is known after or during loading.
    ///  In such case  custom code can provide converter with that knowledge via
    ///  this parameter. You can leave null in this parameter if encoding is unknown or does not matter.
    ///</summary>
   property EncodingIfKnown: DDN.mscorlib.DNEncoding read __fakeFieldGet_EncodingIfKnown write __fakeFieldSet_EncodingIfKnown;
    ///<summary>
    ///  Sometimes it's impossible to load requested resource for some reason.
    ///  Unavailability of resource often does not lead to crash of conversiov and
    ///  result document can be created anyway(but maybe in a bit worse quality, without images etc.).
    ///  If exception occured during loading, just catch it and put in this parameter -
    ///  sometimes that information is usefull for converter for rendering of result.
    ///</summary>
   property ExceptionOfLoadingIfAny: DDN.mscorlib.DNException read __fakeFieldGet_ExceptionOfLoadingIfAny write __fakeFieldSet_ExceptionOfLoadingIfAny;
    ///<summary>
    ///  Sometimes knowledge about MIME type of loaded resource is usefull for converter
    ///  You can provide MIME type(if it'd known after loading) in this parameter. Please
    ///  leave parameter equal to null when MIME type unknown or it's not necessary to supply it.
    ///</summary>
   property MIMETypeIfKnown: string read __fakeFieldGet_MIMETypeIfKnown write __fakeFieldSet_MIMETypeIfKnown;
    ///<summary>
    ///  Sometimes for some reasons loading should not occure custom code. In such case
    ///  please set this flag as True. In such case converter will try use internal default
    ///  resource loader to get that result(as it behave in situation when custom strategy not supplied).
    ///</summary>
   property LoadingCancelled: Boolean read __fakeFieldGet_LoadingCancelled write __fakeFieldSet_LoadingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Bynary data that loaded with custom loader - it must be set after loading
    ///</summary>
    property Data: TArray<Byte> read get_Data;
  end;

  TDNLoadOptions_ResourceLoadingResult = class(TDNGenericImport<DNLoadOptions_ResourceLoadingResultClass, DNLoadOptions_ResourceLoadingResult>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B3510AC-2B45-5481-9D83-B315E727E2AD}']
  { static fields getter & setter } 

   function __fakeFieldGet_Placement: DNAttributeKey;
   function __fakeFieldGet_WritingMode: DNAttributeKey;
   function __fakeFieldGet_BackgroundColor: DNAttributeKey;
   function __fakeFieldGet_BorderColor: DNAttributeKey;
   function __fakeFieldGet_BorderStyle: DNAttributeKey;
   function __fakeFieldGet_BorderThickness: DNAttributeKey;
   function __fakeFieldGet_Padding: DNAttributeKey;
   function __fakeFieldGet_Color: DNAttributeKey;
   function __fakeFieldGet_SpaceBefore: DNAttributeKey;
   function __fakeFieldGet_SpaceAfter: DNAttributeKey;
   function __fakeFieldGet_StartIndent: DNAttributeKey;
   function __fakeFieldGet_EndIndent: DNAttributeKey;
   function __fakeFieldGet_TextIndent: DNAttributeKey;
   function __fakeFieldGet_TextAlign: DNAttributeKey;
   function __fakeFieldGet_BBox: DNAttributeKey;
   function __fakeFieldGet_Width: DNAttributeKey;
   function __fakeFieldGet_Height: DNAttributeKey;
   function __fakeFieldGet_BlockAlign: DNAttributeKey;
   function __fakeFieldGet_InlineAlign: DNAttributeKey;
   function __fakeFieldGet_TBorderStyle: DNAttributeKey;
   function __fakeFieldGet_TPadding: DNAttributeKey;
   function __fakeFieldGet_BaselineShift: DNAttributeKey;
   function __fakeFieldGet_LineHeight: DNAttributeKey;
   function __fakeFieldGet_TextDecorationColor: DNAttributeKey;
   function __fakeFieldGet_TextDecorationThickness: DNAttributeKey;
   function __fakeFieldGet_TextDecorationType: DNAttributeKey;
   function __fakeFieldGet_RubyAlign: DNAttributeKey;
   function __fakeFieldGet_RubyPosition: DNAttributeKey;
   function __fakeFieldGet_GlyphOrientationVertical: DNAttributeKey;
   function __fakeFieldGet_ColumnCount: DNAttributeKey;
   function __fakeFieldGet_ColumnGap: DNAttributeKey;
   function __fakeFieldGet_ColumnWidths: DNAttributeKey;
   function __fakeFieldGet_ListNumbering: DNAttributeKey;
   function __fakeFieldGet_Role: DNAttributeKey;
   function __fakeFieldGet_Checked: DNAttributeKey;
   function __fakeFieldGet_Desc: DNAttributeKey;
   function __fakeFieldGet_RowSpan: DNAttributeKey;
   function __fakeFieldGet_ColSpan: DNAttributeKey;
   function __fakeFieldGet_Headers: DNAttributeKey;
   function __fakeFieldGet_Scope: DNAttributeKey;
   function __fakeFieldGet_Summary: DNAttributeKey;

  { static fields } 

    ///<summary>
    ///  Placement attribute (Layout attribute owner).
    ///</summary>
    {class} property Placement: DNAttributeKey read __fakeFieldGet_Placement;
    ///<summary>
    ///  WritingMode attribute (Layout attribute owner).
    ///</summary>
    {class} property WritingMode: DNAttributeKey read __fakeFieldGet_WritingMode;
    ///<summary>
    ///  BackgroundColor attribute (Layout attribute owner).
    ///</summary>
    {class} property BackgroundColor: DNAttributeKey read __fakeFieldGet_BackgroundColor;
    ///<summary>
    ///  BorderColor attribute (Layout attribute owner).
    ///</summary>
    {class} property BorderColor: DNAttributeKey read __fakeFieldGet_BorderColor;
    ///<summary>
    ///  BorderStyle attribute (Layout attribute owner).
    ///</summary>
    {class} property BorderStyle: DNAttributeKey read __fakeFieldGet_BorderStyle;
    ///<summary>
    ///  BorderThickness attribute (Layout attribute owner).
    ///</summary>
    {class} property BorderThickness: DNAttributeKey read __fakeFieldGet_BorderThickness;
    ///<summary>
    ///  Padding attribute (Layout attribute owner).
    ///</summary>
    {class} property Padding: DNAttributeKey read __fakeFieldGet_Padding;
    ///<summary>
    ///  Color attribute (Layout attribute owner).
    ///</summary>
    {class} property Color: DNAttributeKey read __fakeFieldGet_Color;
    ///<summary>
    ///  SpaceBefore attribute (Layout attribute owner).
    ///</summary>
    {class} property SpaceBefore: DNAttributeKey read __fakeFieldGet_SpaceBefore;
    ///<summary>
    ///  SpaceAfter attribute (Layout attribute owner).
    ///</summary>
    {class} property SpaceAfter: DNAttributeKey read __fakeFieldGet_SpaceAfter;
    ///<summary>
    ///  StartIndent attribute (Layout attribute owner).
    ///</summary>
    {class} property StartIndent: DNAttributeKey read __fakeFieldGet_StartIndent;
    ///<summary>
    ///  EndIndent attribute (Layout attribute owner).
    ///</summary>
    {class} property EndIndent: DNAttributeKey read __fakeFieldGet_EndIndent;
    ///<summary>
    ///  TextIndent attribute (Layout attribute owner).
    ///</summary>
    {class} property TextIndent: DNAttributeKey read __fakeFieldGet_TextIndent;
    ///<summary>
    ///  TextAlign attribute (Layout attribute owner).
    ///</summary>
    {class} property TextAlign: DNAttributeKey read __fakeFieldGet_TextAlign;
    ///<summary>
    ///  BBox attribute (Layout attribute owner).
    ///</summary>
    {class} property BBox: DNAttributeKey read __fakeFieldGet_BBox;
    ///<summary>
    ///  Width attribute (Layout attribute owner).
    ///</summary>
    {class} property Width: DNAttributeKey read __fakeFieldGet_Width;
    ///<summary>
    ///  Height attribute (Layout attribute owner).
    ///</summary>
    {class} property Height: DNAttributeKey read __fakeFieldGet_Height;
    ///<summary>
    ///  BlockAlign attribute (Layout attribute owner).
    ///</summary>
    {class} property BlockAlign: DNAttributeKey read __fakeFieldGet_BlockAlign;
    ///<summary>
    ///  InlineAlign attribute (Layout attribute owner).
    ///</summary>
    {class} property InlineAlign: DNAttributeKey read __fakeFieldGet_InlineAlign;
    ///<summary>
    ///  TBorderStyle attribute (Layout attribute owner).
    ///</summary>
    {class} property TBorderStyle: DNAttributeKey read __fakeFieldGet_TBorderStyle;
    ///<summary>
    ///  TPadding attribute (Layout attribute owner).
    ///</summary>
    {class} property TPadding: DNAttributeKey read __fakeFieldGet_TPadding;
    ///<summary>
    ///  BaselineShift attribute (Layout attribute owner).
    ///</summary>
    {class} property BaselineShift: DNAttributeKey read __fakeFieldGet_BaselineShift;
    ///<summary>
    ///  LineHeight attribute (Layout attribute owner).
    ///</summary>
    {class} property LineHeight: DNAttributeKey read __fakeFieldGet_LineHeight;
    ///<summary>
    ///  TextDecorationColor attribute (Layout attribute owner).
    ///</summary>
    {class} property TextDecorationColor: DNAttributeKey read __fakeFieldGet_TextDecorationColor;
    ///<summary>
    ///  TextDecorationThickness attribute (Layout attribute owner).
    ///</summary>
    {class} property TextDecorationThickness: DNAttributeKey read __fakeFieldGet_TextDecorationThickness;
    ///<summary>
    ///  TextDecorationType attribute (Layout attribute owner).
    ///</summary>
    {class} property TextDecorationType: DNAttributeKey read __fakeFieldGet_TextDecorationType;
    ///<summary>
    ///  RubyAlign attribute (Layout attribute owner).
    ///</summary>
    {class} property RubyAlign: DNAttributeKey read __fakeFieldGet_RubyAlign;
    ///<summary>
    ///  RubyPosition attribute (Layout attribute owner).
    ///</summary>
    {class} property RubyPosition: DNAttributeKey read __fakeFieldGet_RubyPosition;
    ///<summary>
    ///  GlyphOrientationVertical attribute (Layout attribute owner).
    ///</summary>
    {class} property GlyphOrientationVertical: DNAttributeKey read __fakeFieldGet_GlyphOrientationVertical;
    ///<summary>
    ///  ColumnCount attribute (Layout attribute owner).
    ///</summary>
    {class} property ColumnCount: DNAttributeKey read __fakeFieldGet_ColumnCount;
    ///<summary>
    ///  ColumnGap attribute (Layout attribute owner).
    ///</summary>
    {class} property ColumnGap: DNAttributeKey read __fakeFieldGet_ColumnGap;
    ///<summary>
    ///  ColumnWidths attribute (Layout attribute owner).
    ///</summary>
    {class} property ColumnWidths: DNAttributeKey read __fakeFieldGet_ColumnWidths;
    ///<summary>
    ///  ListNumbering attribute (List attribute owner).
    ///</summary>
    {class} property ListNumbering: DNAttributeKey read __fakeFieldGet_ListNumbering;
    ///<summary>
    ///  Role attribute (PrintField attribute owner).
    ///</summary>
    {class} property Role: DNAttributeKey read __fakeFieldGet_Role;
    ///<summary>
    ///  Checked attribute (PrintField attribute owner).
    ///</summary>
    {class} property Checked: DNAttributeKey read __fakeFieldGet_Checked;
    ///<summary>
    ///  Desc attribute (PrintField attribute owner).
    ///</summary>
    {class} property Desc: DNAttributeKey read __fakeFieldGet_Desc;
    ///<summary>
    ///  RowSpan attribute (Table attribute owner).
    ///</summary>
    {class} property RowSpan: DNAttributeKey read __fakeFieldGet_RowSpan;
    ///<summary>
    ///  ColSpan attribute (Table attribute owner).
    ///</summary>
    {class} property ColSpan: DNAttributeKey read __fakeFieldGet_ColSpan;
    ///<summary>
    ///  Headers attribute (Table attribute owner).
    ///</summary>
    {class} property Headers: DNAttributeKey read __fakeFieldGet_Headers;
    ///<summary>
    ///  Scope attribute (Table attribute owner).
    ///</summary>
    {class} property Scope: DNAttributeKey read __fakeFieldGet_Scope;
    ///<summary>
    ///  Summary attribute (Table attribute owner).
    ///</summary>
    {class} property Summary: DNAttributeKey read __fakeFieldGet_Summary;

  end;

  ///<summary>
  ///  Represents Standard Attribute Keys.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeKey')]
  DNAttributeKey = interface(DDN.mscorlib.DNObject)
  ['{EA85FD7B-94BC-34E3-8858-D0C968D5A8A7}']
  { getters & setters } 

    function get_Key: string;
    function get_Owner: DNAttributeOwnerStandard;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Get Attribute Key.
    ///</summary>
    ///<value>Attribute Key.</value>
    property Key: string read get_Key;
    ///<summary>
    ///  Get Attribute Owner.
    ///</summary>
    ///<value>Attribute Owner.</value>
    property Owner: DNAttributeOwnerStandard read get_Owner;
  end;

  TDNAttributeKey = class(TDNGenericImport<DNAttributeKeyClass, DNAttributeKey>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71AE72FC-2B25-5278-955B-E42BF618380B}']
  { static fields getter & setter } 

   function __fakeFieldGet_Placement_Block: DNAttributeName;
   function __fakeFieldGet_Placement_Inline: DNAttributeName;
   function __fakeFieldGet_Placement_Before: DNAttributeName;
   function __fakeFieldGet_Placement_Start: DNAttributeName;
   function __fakeFieldGet_Placement_End: DNAttributeName;
   function __fakeFieldGet_WritingMode_LrTb: DNAttributeName;
   function __fakeFieldGet_WritingMode_RlTb: DNAttributeName;
   function __fakeFieldGet_WritingMode_TbRl: DNAttributeName;
   function __fakeFieldGet_BorderStyle_None: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Hidden: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Dotted: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Dashed: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Solid: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Double: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Groove: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Ridge: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Inset: DNAttributeName;
   function __fakeFieldGet_BorderStyle_Outset: DNAttributeName;
   function __fakeFieldGet_TextAlign_Start: DNAttributeName;
   function __fakeFieldGet_TextAlign_Center: DNAttributeName;
   function __fakeFieldGet_TextAlign_End: DNAttributeName;
   function __fakeFieldGet_TextAlign_Justify: DNAttributeName;
   function __fakeFieldGet_Width_Auto: DNAttributeName;
   function __fakeFieldGet_Height_Auto: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Before: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Middle: DNAttributeName;
   function __fakeFieldGet_BlockAlign_After: DNAttributeName;
   function __fakeFieldGet_BlockAlign_Justify: DNAttributeName;
   function __fakeFieldGet_InlineAlign_Start: DNAttributeName;
   function __fakeFieldGet_InlineAlign_Center: DNAttributeName;
   function __fakeFieldGet_InlineAlign_End: DNAttributeName;
   function __fakeFieldGet_LineHeight_Normal: DNAttributeName;
   function __fakeFieldGet_LineHeight_Auto: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_None: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_Underline: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_Overline: DNAttributeName;
   function __fakeFieldGet_TextDecorationType_LineThrough: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Start: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Center: DNAttributeName;
   function __fakeFieldGet_RubyAlign_End: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Justify: DNAttributeName;
   function __fakeFieldGet_RubyAlign_Distribute: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Before: DNAttributeName;
   function __fakeFieldGet_RubyPosition_After: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Warichu: DNAttributeName;
   function __fakeFieldGet_RubyPosition_Inline: DNAttributeName;
   function __fakeFieldGet_GlyphOrientationVertical_Auto: DNAttributeName;
   function __fakeFieldGet_ListNumbering_None: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Disc: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Circle: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Square: DNAttributeName;
   function __fakeFieldGet_ListNumbering_Decimal: DNAttributeName;
   function __fakeFieldGet_ListNumbering_UpperRoman: DNAttributeName;
   function __fakeFieldGet_ListNumbering_LowerRoman: DNAttributeName;
   function __fakeFieldGet_ListNumbering_UpperAlpha: DNAttributeName;
   function __fakeFieldGet_ListNumbering_LowerAlpha: DNAttributeName;
   function __fakeFieldGet_Role_rb: DNAttributeName;
   function __fakeFieldGet_Role_cb: DNAttributeName;
   function __fakeFieldGet_Role_pb: DNAttributeName;
   function __fakeFieldGet_Role_tv: DNAttributeName;
   function __fakeFieldGet_Checked_on: DNAttributeName;
   function __fakeFieldGet_Checked_off: DNAttributeName;
   function __fakeFieldGet_Checked_neutral: DNAttributeName;
   function __fakeFieldGet_Scope_Row: DNAttributeName;
   function __fakeFieldGet_Scope_Column: DNAttributeName;
   function __fakeFieldGet_Scope_Both: DNAttributeName;

  { static fields } 

    ///<summary>
    ///  Attribute Placement: Block - Stacked in the block-progression direction within an enclosing reference area or parent BLSE.
    ///</summary>
    {class} property Placement_Block: DNAttributeName read __fakeFieldGet_Placement_Block;
    ///<summary>
    ///  Attribute Placement: Inline - Packed in the inline-progression direction within an enclosing BLSE.
    ///</summary>
    {class} property Placement_Inline: DNAttributeName read __fakeFieldGet_Placement_Inline;
    ///<summary>
    ///  Attribute Placement: Before - Placed so that the before edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.
    ///</summary>
    {class} property Placement_Before: DNAttributeName read __fakeFieldGet_Placement_Before;
    ///<summary>
    ///  Attribute Placement: Start - Placed so that the start edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.
    ///</summary>
    {class} property Placement_Start: DNAttributeName read __fakeFieldGet_Placement_Start;
    ///<summary>
    ///  Attribute Placement: End - Placed so that the end edge of the element's allocation rectangle coincides with that of the nearest enclosing reference area.
    ///</summary>
    {class} property Placement_End: DNAttributeName read __fakeFieldGet_Placement_End;
    ///<summary>
    ///  Attribute WritingMode: LrTb - Inline progression from left to right; block progression from top to bottom. This is the typical writing mode for Western writing systems.
    ///</summary>
    {class} property WritingMode_LrTb: DNAttributeName read __fakeFieldGet_WritingMode_LrTb;
    ///<summary>
    ///  Attribute WritingMode: RlTb - Inline progression from right to left; block progression from top to bottom. This is the typical writing mode for Arabic and Hebrew writing systems.
    ///</summary>
    {class} property WritingMode_RlTb: DNAttributeName read __fakeFieldGet_WritingMode_RlTb;
    ///<summary>
    ///  Attribute WritingMode: TbRl - Inline progression from top to bottom; block progression from right to left. This is the typical writing mode for Chinese and Japanese writing systems.
    ///</summary>
    {class} property WritingMode_TbRl: DNAttributeName read __fakeFieldGet_WritingMode_TbRl;
    ///<summary>
    ///  Attribute BorderStyle: None - No border. Forces the computed value of BorderThicknessto be 0.
    ///</summary>
    {class} property BorderStyle_None: DNAttributeName read __fakeFieldGet_BorderStyle_None;
    ///<summary>
    ///  Attribute BorderStyle: Hidden - Same as None, except in terms of border conflict resolution for table elements.
    ///</summary>
    {class} property BorderStyle_Hidden: DNAttributeName read __fakeFieldGet_BorderStyle_Hidden;
    ///<summary>
    ///  Attribute BorderStyle: Dotted - The border is a series of dots.
    ///</summary>
    {class} property BorderStyle_Dotted: DNAttributeName read __fakeFieldGet_BorderStyle_Dotted;
    ///<summary>
    ///  Attribute BorderStyle: Dashed - The border is a series of short line segments.
    ///</summary>
    {class} property BorderStyle_Dashed: DNAttributeName read __fakeFieldGet_BorderStyle_Dashed;
    ///<summary>
    ///  Attribute BorderStyle: Solid - The border is a single line segment.
    ///</summary>
    {class} property BorderStyle_Solid: DNAttributeName read __fakeFieldGet_BorderStyle_Solid;
    ///<summary>
    ///  Attribute BorderStyle: Double - The border is two solid lines. The sum of the two lines and the space between them equals the value of BorderThickness.
    ///</summary>
    {class} property BorderStyle_Double: DNAttributeName read __fakeFieldGet_BorderStyle_Double;
    ///<summary>
    ///  Attribute BorderStyle: Groove - The border looks as though it were carved into the canvas.
    ///</summary>
    {class} property BorderStyle_Groove: DNAttributeName read __fakeFieldGet_BorderStyle_Groove;
    ///<summary>
    ///  Attribute BorderStyle: Ridge - The border looks as though it were coming out of the canvas (the opposite of Groove).
    ///</summary>
    {class} property BorderStyle_Ridge: DNAttributeName read __fakeFieldGet_BorderStyle_Ridge;
    ///<summary>
    ///  Attribute BorderStyle: Inset - The border makes the entire box look as though it were embedded in the canvas.
    ///</summary>
    {class} property BorderStyle_Inset: DNAttributeName read __fakeFieldGet_BorderStyle_Inset;
    ///<summary>
    ///  Attribute BorderStyle: Outset - The border makes the entire box look as though it were coming out of the canvas (the opposite of Inset).
    ///</summary>
    {class} property BorderStyle_Outset: DNAttributeName read __fakeFieldGet_BorderStyle_Outset;
    ///<summary>
    ///  Attribute TextAlign: Start - Aligned with the start edge.
    ///</summary>
    {class} property TextAlign_Start: DNAttributeName read __fakeFieldGet_TextAlign_Start;
    ///<summary>
    ///  Attribute TextAlign: Center - Centered between the start and end edges.
    ///</summary>
    {class} property TextAlign_Center: DNAttributeName read __fakeFieldGet_TextAlign_Center;
    ///<summary>
    ///  Attribute TextAlign: End - Aligned with the end edge.
    ///</summary>
    {class} property TextAlign_End: DNAttributeName read __fakeFieldGet_TextAlign_End;
    ///<summary>
    ///  Attribute TextAlign: Justify - Aligned with both the start and end edges, with internal spacing within each line expanded, if necessary, to achieve such alignment. The last (or only) line shall be aligned with the start edge only.
    ///</summary>
    {class} property TextAlign_Justify: DNAttributeName read __fakeFieldGet_TextAlign_Justify;
    ///<summary>
    ///  Attribute Width: Auto - the element's width shall be determined by the intrinsic width of its content.
    ///</summary>
    {class} property Width_Auto: DNAttributeName read __fakeFieldGet_Width_Auto;
    ///<summary>
    ///  Attribute Height: Auto - The element's height shall be determined by the intrinsic height of its content.
    ///</summary>
    {class} property Height_Auto: DNAttributeName read __fakeFieldGet_Height_Auto;
    ///<summary>
    ///  Attribute BlockAlign: Before - Before edge of the first child's allocation rectangle aligned with that of the table cell's content rectangle.
    ///</summary>
    {class} property BlockAlign_Before: DNAttributeName read __fakeFieldGet_BlockAlign_Before;
    ///<summary>
    ///  Attribute BlockAlign: Middle- Children centered within the table cell. The distance between the before edge of the first child's allocation rectangle and that of the table cell's content rectangle shall be the same as the distance between the after edge of the last child's allocation rectangle and that of the table cell's content rectangle.
    ///</summary>
    {class} property BlockAlign_Middle: DNAttributeName read __fakeFieldGet_BlockAlign_Middle;
    ///<summary>
    ///  Attribute BlockAlign: After - After edge of the last child's allocation rectangle aligned with that of the table cell's content rectangle.
    ///</summary>
    {class} property BlockAlign_After: DNAttributeName read __fakeFieldGet_BlockAlign_After;
    ///<summary>
    ///  Attribute BlockAlign: Justify - Children aligned with both the before and after edges of the table cell's content rectangle. The first child shall be placed as described for Before and the last child as described for After, with equal spacing between the children. If there is only one child, it shall be aligned with the before edge only, as for Before.
    ///</summary>
    {class} property BlockAlign_Justify: DNAttributeName read __fakeFieldGet_BlockAlign_Justify;
    ///<summary>
    ///  Attribute InlineAlign: Start - Start edge of each child's allocation rectangle aligned with that of the table cell's content rectangle.
    ///</summary>
    {class} property InlineAlign_Start: DNAttributeName read __fakeFieldGet_InlineAlign_Start;
    ///<summary>
    ///  Attribute InlineAlign: Center - Each child centered within the table cell. The distance between the start edges of the child's allocation rectangle and the table cell's content rectangle shall be the same as the distance between their end edges.
    ///</summary>
    {class} property InlineAlign_Center: DNAttributeName read __fakeFieldGet_InlineAlign_Center;
    ///<summary>
    ///  Attribute InlineAlign: End - End edge of each child's allocation rectangle aligned with that of the table cell's content rectangle.
    ///</summary>
    {class} property InlineAlign_End: DNAttributeName read __fakeFieldGet_InlineAlign_End;
    ///<summary>
    ///  Attribute LineHeight: Normal - Adjust the line height to include any nonzero value specified for BaselineShift.
    ///</summary>
    {class} property LineHeight_Normal: DNAttributeName read __fakeFieldGet_LineHeight_Normal;
    ///<summary>
    ///  Attribute LineHeight: Auto - Adjustment for the value of BaselineShift shall not be made.
    ///</summary>
    {class} property LineHeight_Auto: DNAttributeName read __fakeFieldGet_LineHeight_Auto;
    ///<summary>
    ///  Attribute TextDecorationType: None - No text decoration.
    ///</summary>
    {class} property TextDecorationType_None: DNAttributeName read __fakeFieldGet_TextDecorationType_None;
    ///<summary>
    ///  Attribute TextDecorationType: Underline - A line below the text.
    ///</summary>
    {class} property TextDecorationType_Underline: DNAttributeName read __fakeFieldGet_TextDecorationType_Underline;
    ///<summary>
    ///  Attribute TextDecorationType: Overline - A line above the text.
    ///</summary>
    {class} property TextDecorationType_Overline: DNAttributeName read __fakeFieldGet_TextDecorationType_Overline;
    ///<summary>
    ///  Attribute TextDecorationType: LineThrough - A line through the middle of the text.
    ///</summary>
    {class} property TextDecorationType_LineThrough: DNAttributeName read __fakeFieldGet_TextDecorationType_LineThrough;
    ///<summary>
    ///  Attribute RubyAlign: Start - The content shall be aligned on the start edge in the inline-progression direction.
    ///</summary>
    {class} property RubyAlign_Start: DNAttributeName read __fakeFieldGet_RubyAlign_Start;
    ///<summary>
    ///  Attribute RubyAlign: Center - The content shall be centered in the inline-progression direction.
    ///</summary>
    {class} property RubyAlign_Center: DNAttributeName read __fakeFieldGet_RubyAlign_Center;
    ///<summary>
    ///  Attribute RubyAlign: End - The content shall be aligned on the end edge in the inline-progression direction.
    ///</summary>
    {class} property RubyAlign_End: DNAttributeName read __fakeFieldGet_RubyAlign_End;
    ///<summary>
    ///  Attribute RubyAlign: Justify - The content shall be expanded to fill the available width in the inline-progression direction.
    ///</summary>
    {class} property RubyAlign_Justify: DNAttributeName read __fakeFieldGet_RubyAlign_Justify;
    ///<summary>
    ///  Attribute RubyAlign: Distribute - The content shall be expanded to fill the available width in the inline-progression direction. However, space shall also be inserted at the start edge and end edge of the text. The spacing shall be distributed using a 1:2:1 (start:infix:end) ratio. It shall be changed to a 0:1:1 ratio if the ruby appears at the start of a text line or to a 1:1:0 ratio if the ruby appears at the end of the text line.
    ///</summary>
    {class} property RubyAlign_Distribute: DNAttributeName read __fakeFieldGet_RubyAlign_Distribute;
    ///<summary>
    ///  Attribute RubyPosition: Before - The RT content shall be aligned along the before edge of the element.
    ///</summary>
    {class} property RubyPosition_Before: DNAttributeName read __fakeFieldGet_RubyPosition_Before;
    ///<summary>
    ///  Attribute RubyPosition: After - The RT content shall be aligned along the after edge of the element.
    ///</summary>
    {class} property RubyPosition_After: DNAttributeName read __fakeFieldGet_RubyPosition_After;
    ///<summary>
    ///  Attribute RubyPosition: Warichu - The RT and associated RP elements shall be formatted as a warichu, following the RB element.
    ///</summary>
    {class} property RubyPosition_Warichu: DNAttributeName read __fakeFieldGet_RubyPosition_Warichu;
    ///<summary>
    ///  Attribute RubyPosition: Inline - The RT and associated RP elements shall be formatted as a parenthesis comment, following the RB element.
    ///</summary>
    {class} property RubyPosition_Inline: DNAttributeName read __fakeFieldGet_RubyPosition_Inline;
    ///<summary>
    ///  Attribute GlyphOrientationVertical: Auto - Specifies a default orientation for text, depending on whether it is fullwidth (as wide as it is high).
    ///</summary>
    {class} property GlyphOrientationVertical_Auto: DNAttributeName read __fakeFieldGet_GlyphOrientationVertical_Auto;
    ///<summary>
    ///  Attribute ListNumbering: None - No autonumbering; Lbl elements (if present) contain arbitrary text not subject to any numbering scheme.
    ///</summary>
    {class} property ListNumbering_None: DNAttributeName read __fakeFieldGet_ListNumbering_None;
    ///<summary>
    ///  Attribute ListNumbering: Disc - Solid circular bullet.
    ///</summary>
    {class} property ListNumbering_Disc: DNAttributeName read __fakeFieldGet_ListNumbering_Disc;
    ///<summary>
    ///  Attribute ListNumbering: Circle - Open circular bullet.
    ///</summary>
    {class} property ListNumbering_Circle: DNAttributeName read __fakeFieldGet_ListNumbering_Circle;
    ///<summary>
    ///  Attribute ListNumbering: Square - Solid square bullet.
    ///</summary>
    {class} property ListNumbering_Square: DNAttributeName read __fakeFieldGet_ListNumbering_Square;
    ///<summary>
    ///  Attribute ListNumbering: Decimal - Decimal arabic numerals (1-9, 10-99, ...).
    ///</summary>
    {class} property ListNumbering_Decimal: DNAttributeName read __fakeFieldGet_ListNumbering_Decimal;
    ///<summary>
    ///  Attribute ListNumbering: UpperRoman - Uppercase roman numerals (I, II, III, IV, ...).
    ///</summary>
    {class} property ListNumbering_UpperRoman: DNAttributeName read __fakeFieldGet_ListNumbering_UpperRoman;
    ///<summary>
    ///  Attribute ListNumbering: LowerRoman - Lowercase roman numerals (i, ii, iii, iv, ...).
    ///</summary>
    {class} property ListNumbering_LowerRoman: DNAttributeName read __fakeFieldGet_ListNumbering_LowerRoman;
    ///<summary>
    ///  Attribute ListNumbering: UpperAlpha - Uppercase letters (A, B, C, ...).
    ///</summary>
    {class} property ListNumbering_UpperAlpha: DNAttributeName read __fakeFieldGet_ListNumbering_UpperAlpha;
    ///<summary>
    ///  Attribute ListNumbering: LowerAlpha - Lowercase letters (a, b, c, ...).
    ///</summary>
    {class} property ListNumbering_LowerAlpha: DNAttributeName read __fakeFieldGet_ListNumbering_LowerAlpha;
    ///<summary>
    ///  Attribute Role: rb - Radio button.
    ///</summary>
    {class} property Role_rb: DNAttributeName read __fakeFieldGet_Role_rb;
    ///<summary>
    ///  Attribute Role: cb - Check box.
    ///</summary>
    {class} property Role_cb: DNAttributeName read __fakeFieldGet_Role_cb;
    ///<summary>
    ///  Attribute Role: pb - Push button.
    ///</summary>
    {class} property Role_pb: DNAttributeName read __fakeFieldGet_Role_pb;
    ///<summary>
    ///  Attribute Role: tv - Text-value field.
    ///</summary>
    {class} property Role_tv: DNAttributeName read __fakeFieldGet_Role_tv;
    ///<summary>
    ///  Attribute checked: On - The state of a radio button or check box field.
    ///</summary>
    {class} property Checked_on: DNAttributeName read __fakeFieldGet_Checked_on;
    ///<summary>
    ///  Attribute checked: Off - The state of a radio button or check box field.
    ///</summary>
    {class} property Checked_off: DNAttributeName read __fakeFieldGet_Checked_off;
    ///<summary>
    ///  Attribute checked: Neutral - The state of a radio button or check box field.
    ///</summary>
    {class} property Checked_neutral: DNAttributeName read __fakeFieldGet_Checked_neutral;
    ///<summary>
    ///  Attribute Scope: Row.
    ///</summary>
    {class} property Scope_Row: DNAttributeName read __fakeFieldGet_Scope_Row;
    ///<summary>
    ///  Attribute Scope: Column.
    ///</summary>
    {class} property Scope_Column: DNAttributeName read __fakeFieldGet_Scope_Column;
    ///<summary>
    ///  Attribute Scope: Both.
    ///</summary>
    {class} property Scope_Both: DNAttributeName read __fakeFieldGet_Scope_Both;

  { static methods } 

    ///<summary>
    ///  Gets attribute name for attribute key.
    ///</summary>
    ///  <param name="name">Attribute name</param>
    ///  <param name="attributeKey">Attribute key</param>
    ///<returns>Attribute name</returns>
    {class} function FromNameAttributeKey(name: string; attributeKey: DNAttributeKey): DNAttributeName;

  end;

  ///<summary>
  ///  Represents class for Attribute Name Values.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeName')]
  DNAttributeName = interface(DDN.mscorlib.DNObject)
  ['{ADB3F565-B365-3862-9D46-7785DA2D0138}']
  { getters & setters } 

    function get_Name: string;
    function get_AttributeKey: DNAttributeKey;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets name value of attribute.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets attribute key.
    ///</summary>
    property AttributeKey: DNAttributeKey read get_AttributeKey;
  end;

  TDNAttributeName = class(TDNGenericImport<DNAttributeNameClass, DNAttributeName>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAttributeOwnerStandardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0FF83AEC-C82C-57FE-B16A-AB93EE0EE1CA}']
  { static fields getter & setter } 

   function __fakeFieldGet_Layout: DNAttributeOwnerStandard;
   function __fakeFieldGet_List: DNAttributeOwnerStandard;
   function __fakeFieldGet_PrintField: DNAttributeOwnerStandard;
   function __fakeFieldGet_Table: DNAttributeOwnerStandard;
   function __fakeFieldGet_Xml_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Html_320: DNAttributeOwnerStandard;
   function __fakeFieldGet_Html_401: DNAttributeOwnerStandard;
   function __fakeFieldGet_Oeb_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Rtf_105: DNAttributeOwnerStandard;
   function __fakeFieldGet_Css_100: DNAttributeOwnerStandard;
   function __fakeFieldGet_Css_200: DNAttributeOwnerStandard;

  { static fields } 

    ///<summary>
    ///  Layout attribute owner.
    ///</summary>
    {class} property Layout: DNAttributeOwnerStandard read __fakeFieldGet_Layout;
    ///<summary>
    ///  List attribute owner.
    ///</summary>
    {class} property List: DNAttributeOwnerStandard read __fakeFieldGet_List;
    ///<summary>
    ///  PrintField attribute owner.
    ///</summary>
    {class} property PrintField: DNAttributeOwnerStandard read __fakeFieldGet_PrintField;
    ///<summary>
    ///  Table attribute owner.
    ///</summary>
    {class} property Table: DNAttributeOwnerStandard read __fakeFieldGet_Table;
    ///<summary>
    ///  XML-1.0.0 attribute owner.
    ///</summary>
    {class} property Xml_100: DNAttributeOwnerStandard read __fakeFieldGet_Xml_100;
    ///<summary>
    ///  HTML-3.20 attribute owner.
    ///</summary>
    {class} property Html_320: DNAttributeOwnerStandard read __fakeFieldGet_Html_320;
    ///<summary>
    ///  HTML-4.01 attribute owner.
    ///</summary>
    {class} property Html_401: DNAttributeOwnerStandard read __fakeFieldGet_Html_401;
    ///<summary>
    ///  OEB-1.00 attribute owner.
    ///</summary>
    {class} property Oeb_100: DNAttributeOwnerStandard read __fakeFieldGet_Oeb_100;
    ///<summary>
    ///  RTF-1.05 attribute owner.
    ///</summary>
    {class} property Rtf_105: DNAttributeOwnerStandard read __fakeFieldGet_Rtf_105;
    ///<summary>
    ///  CSS-1.00 attribute owner.
    ///</summary>
    {class} property Css_100: DNAttributeOwnerStandard read __fakeFieldGet_Css_100;
    ///<summary>
    ///  CSS-2.00 attribute owner.
    ///</summary>
    {class} property Css_200: DNAttributeOwnerStandard read __fakeFieldGet_Css_200;

  end;

  ///<summary>
  ///  Represents Standard Attribute Owners.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.AttributeOwnerStandard')]
  DNAttributeOwnerStandard = interface(DDN.mscorlib.DNObject)
  ['{0693332B-0987-36A0-A03D-44AC5F457FD6}']
  { getters & setters } 

    function get_Owner: string;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Get Attribute Owner.
    ///</summary>
    ///<value>Attribute Owner.</value>
    property Owner: string read get_Owner;
  end;

  TDNAttributeOwnerStandard = class(TDNGenericImport<DNAttributeOwnerStandardClass, DNAttributeOwnerStandard>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLogicalStructure_ElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27EF8C3D-8B4E-55B4-AE30-2E45C194AF2D}']
  end;

  ///<summary>
  ///  Represents a base class for element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.Element')]
  DNLogicalStructure_Element = interface(DDN.mscorlib.DNObject)
  ['{99590165-E87F-3BFA-BD6E-35F6430D01C5}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Append <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  to collection of children.
    ///</summary>
    ///  <param name="element"><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  object to add.</param>
    ///<returns><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  which has been added.</returns>
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Get parent element.
    ///</summary>
    ///<value>Parent element.</value>
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    ///<summary>
    ///  Gets children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</summary>
    ///<value>
    ///  Children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</value>
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLogicalStructure_Element = class(TDNGenericImport<DNLogicalStructure_ElementClass, DNLogicalStructure_Element>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNMCRElementClass = interface(DNLogicalStructure_ElementClass)
  ['{AC9F8762-EC87-58E8-9564-23762726AAF4}']
  end;

  ///<summary>
  ///  Represents marked-content reference object in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.MCRElement')]
  DNMCRElement = interface(DNLogicalStructure_Element)
  ['{FBACD332-6F83-3FA1-A4DA-7BB5B0BC354D}']
  { getters & setters } 

    function get_ImageSrc: string;
    function get_Content: string;
    function get_MCID: Int32;
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    ///<summary>
    ///  Append <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  to collection of children.
    ///</summary>
    ///  <param name="element"><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  object to add.</param>
    ///<returns><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  which has been added.</returns>
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary><para>Gets image source for marked-content reference element.</para><para>For just created <see cref="T:Aspose.Pdf.LogicalStructure.IllustrationElement" />
    ///  . Is null in other cases.</para></summary>
    ///<value>Image source for marked-content reference element.</value>
    property ImageSrc: string read get_ImageSrc;
    ///<summary><para>Gets text content for marked-content reference element.</para><para>For just created object wich implement <see cref="T:Aspose.Pdf.LogicalStructure.ITextElement" />
    ///  . Is null in other cases.</para></summary>
    ///<value>Text content for marked-content reference element.</value>
    property Content: string read get_Content;
    ///<summary>
    ///  Gets MCID of marked-content reference object.
    ///</summary>
    ///<value>MCID of marked-content reference object.</value>
    property MCID: Int32 read get_MCID;
    ///<summary>
    ///  Get parent element.
    ///</summary>
    ///<value>Parent element.</value>
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    ///<summary>
    ///  Gets children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</summary>
    ///<value>
    ///  Children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</value>
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNMCRElement = class(TDNGenericImport<DNMCRElementClass, DNMCRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNOBJRElementClass = interface(DNLogicalStructure_ElementClass)
  ['{E436FC7C-904D-5603-B71D-535E1FA542D9}']
  end;

  ///<summary>
  ///  Represents object reference entity in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.OBJRElement')]
  DNOBJRElement = interface(DNLogicalStructure_Element)
  ['{F48A8E3A-914C-347F-9EB7-86EA654A792E}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    ///<summary>
    ///  Append <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  to collection of children.
    ///</summary>
    ///  <param name="element"><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  object to add.</param>
    ///<returns><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  which has been added.</returns>
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Get parent element.
    ///</summary>
    ///<value>Parent element.</value>
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    ///<summary>
    ///  Gets children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</summary>
    ///<value>
    ///  Children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</value>
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNOBJRElement = class(TDNGenericImport<DNOBJRElementClass, DNOBJRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructTreeRootElementClass = interface(DNLogicalStructure_ElementClass)
  ['{8CDAFDCC-FBE0-55FC-A3B8-93B17F297167}']
  end;

  ///<summary>
  ///  Represents StructTreeRoot object in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructTreeRootElement')]
  DNStructTreeRootElement = interface(DNLogicalStructure_Element)
  ['{291E1B56-49DA-34B8-A907-C183E9CB1829}']
  { getters & setters } 

    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Append <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  to collection of children.
    ///</summary>
    ///  <param name="element"><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  object to add.</param>
    ///<returns><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  which has been added.</returns>
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Get parent element.
    ///</summary>
    ///<value>Parent element.</value>
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    ///<summary>
    ///  Gets children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</summary>
    ///<value>
    ///  Children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</value>
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNStructTreeRootElement = class(TDNGenericImport<DNStructTreeRootElementClass, DNStructTreeRootElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureElementClass = interface(DNLogicalStructure_ElementClass)
  ['{8F89FAC1-8BB3-5E58-A44C-2E501C51D4E5}']
  end;

  ///<summary>
  ///  Represents a base class for structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureElement')]
  DNStructureElement = interface(DNLogicalStructure_Element)
  ['{86DA5084-3594-3806-B49E-1ADB30F96A68}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    ///<summary>
    ///  Append <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  to collection of children.
    ///</summary>
    ///  <param name="element"><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  object to add.</param>
    ///<returns><see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  which has been added.</returns>
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  Get parent element.
    ///</summary>
    ///<value>Parent element.</value>
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    ///<summary>
    ///  Gets children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</summary>
    ///<value>
    ///  Children collection of <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  objects.
    ///</value>
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNStructureElement = class(TDNGenericImport<DNStructureElementClass, DNStructureElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBLSElementClass = interface(DNStructureElementClass)
  ['{495C0793-9756-5472-9D40-810E7447C5F6}']
  end;

  ///<summary>
  ///  Represents a base class for block-level structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.BLSElement')]
  DNBLSElement = interface(DNStructureElement)
  ['{5BB2FB91-2A03-3AD5-9ADE-ECBD07E55D3E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBLSElement = class(TDNGenericImport<DNBLSElementClass, DNBLSElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBLSTextElementClass = interface(DNBLSElementClass)
  ['{37B1ABB5-ADE1-5592-B480-E87617E543DE}']
  end;

  ///<summary>
  ///  Represents a base class for block-level text structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.BLSTextElement')]
  DNBLSTextElement = interface(DNBLSElement)
  ['{7E07C6C8-20D8-3C7C-9DA9-B15345463BC6}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBLSTextElement = class(TDNGenericImport<DNBLSTextElementClass, DNBLSTextElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNHeaderElementClass = interface(DNBLSTextElementClass)
  ['{619F8C69-1E43-5461-BE36-EFD6699C94B1}']
  end;

  ///<summary>
  ///  Represents Header structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.HeaderElement')]
  DNHeaderElement = interface(DNBLSTextElement)
  ['{9DAAA378-CA84-3977-BB71-ED3081A09048}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNHeaderElement = class(TDNGenericImport<DNHeaderElementClass, DNHeaderElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNParagraphElementClass = interface(DNBLSTextElementClass)
  ['{AFF2BE26-6E20-5A3D-99C5-092FE3855CB0}']
  end;

  ///<summary>
  ///  Represents Paragraph structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ParagraphElement')]
  DNParagraphElement = interface(DNBLSTextElement)
  ['{5CEF318F-29DC-3CCC-9C89-DC9AF56176FF}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNParagraphElement = class(TDNGenericImport<DNParagraphElementClass, DNParagraphElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListElementClass = interface(DNBLSElementClass)
  ['{E3213F8D-5650-5185-9FD3-0CF526C1918B}']
  end;

  ///<summary>
  ///  Represents List structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ListElement')]
  DNListElement = interface(DNBLSElement)
  ['{350FADC8-49A2-313E-9DB8-D8A9BB069C62}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListElement = class(TDNGenericImport<DNListElementClass, DNListElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableElementClass = interface(DNBLSElementClass)
  ['{A27C5318-60BD-5191-B1B0-3A4375803672}']
  end;

  ///<summary>
  ///  Represents Table structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableElement')]
  DNTableElement = interface(DNBLSElement)
  ['{2B51B919-4C91-3390-8999-3060175F8C2C}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_CornerStyle: DNBorderCornerStyle;
    procedure set_CornerStyle(value: DNBorderCornerStyle);
    function get_Broken: DNTableBroken;
    procedure set_Broken(value: DNTableBroken);
    function get_ColumnAdjustment: DNColumnAdjustment;
    procedure set_ColumnAdjustment(value: DNColumnAdjustment);
    function get_ColumnWidths: string;
    procedure set_ColumnWidths(value: string);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultColumnWidth: string;
    procedure set_DefaultColumnWidth(value: string);
    function get_IsBroken: Boolean;
    procedure set_IsBroken(value: Boolean);
    function get_IsBordersIncluded: Boolean;
    procedure set_IsBordersIncluded(value: Boolean);
    function get_Left: Single;
    procedure set_Left(value: Single);
    function get_Top: Single;
    procedure set_Top(value: Single);
    function get_RepeatingColumnsCount: Int32;
    procedure set_RepeatingColumnsCount(value: Int32);
    function get_RepeatingRowsCount: Int32;
    procedure set_RepeatingRowsCount(value: Int32);
    function get_RepeatingRowsStyle: DNTextState;
    procedure set_RepeatingRowsStyle(value: DNTextState);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHeadElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTHead: DNTableTHeadElement;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHeadElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTBody: DNTableTBodyElement;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTFootElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTFoot: DNTableTFootElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the table background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the table border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the table alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the styles of the border corners
    ///</summary>
    property CornerStyle: DNBorderCornerStyle read get_CornerStyle write set_CornerStyle;
    ///<summary>
    ///  Gets or sets table vertial broken;
    ///</summary>
    property Broken: DNTableBroken read get_Broken write set_Broken;
    ///<summary>
    ///  Gets or sets the table column adjustment.
    ///</summary>
    property ColumnAdjustment: DNColumnAdjustment read get_ColumnAdjustment write set_ColumnAdjustment;
    ///<summary>
    ///  Gets the column widths of the table.
    ///</summary>
    property ColumnWidths: string read get_ColumnWidths write set_ColumnWidths;
    ///<summary>
    ///  Gets default cell border.
    ///</summary>
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    ///<summary>
    ///  Gets or sets the default cell padding.
    ///</summary>
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets default column width.
    ///</summary>
    property DefaultColumnWidth: string read get_DefaultColumnWidth write set_DefaultColumnWidth;
    ///<summary>
    ///  Gets or sets the table is broken - will be truncated for next page.
    ///</summary>
    property IsBroken: Boolean read get_IsBroken write set_IsBroken;
    ///<summary>
    ///  Gets or sets border included in column widhts.
    ///</summary>
    property IsBordersIncluded: Boolean read get_IsBordersIncluded write set_IsBordersIncluded;
    ///<summary>
    ///  Gets or sets the table left coordinate.
    ///</summary>
    property Left: Single read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets the table top coordinate.
    ///</summary>
    property Top: Single read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets the maximum columns count for table.
    ///</summary>
    property RepeatingColumnsCount: Int32 read get_RepeatingColumnsCount write set_RepeatingColumnsCount;
    ///<summary>
    ///  Gets the first rows count repeated for several pages.
    ///</summary>
    property RepeatingRowsCount: Int32 read get_RepeatingRowsCount write set_RepeatingRowsCount;
    ///<summary>
    ///  Gets the style for repeating rows.
    ///</summary>
    property RepeatingRowsStyle: DNTextState read get_RepeatingRowsStyle write set_RepeatingRowsStyle;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableElement = class(TDNGenericImport<DNTableElementClass, DNTableElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNGroupingElementClass = interface(DNStructureElementClass)
  ['{C469EC41-8CAF-50FC-989F-A03BF117AA2F}']
  end;

  ///<summary>
  ///  Represents a base class for grouping structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.GroupingElement')]
  DNGroupingElement = interface(DNStructureElement)
  ['{C7721B2A-D294-38DC-B14D-DAAF637B656E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNGroupingElement = class(TDNGenericImport<DNGroupingElementClass, DNGroupingElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNArtElementClass = interface(DNGroupingElementClass)
  ['{79007DC0-D1C7-51DD-840A-3E2F8CE44C91}']
  end;

  ///<summary>
  ///  Represents Art structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ArtElement')]
  DNArtElement = interface(DNGroupingElement)
  ['{E4AF1CC3-4E09-3F27-8E33-961BB297DAEB}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNArtElement = class(TDNGenericImport<DNArtElementClass, DNArtElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBlockQuoteElementClass = interface(DNGroupingElementClass)
  ['{573A15C8-ABC1-5FA7-B79A-0A9162D62623}']
  end;

  ///<summary>
  ///  Represents BlockQuote structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.BlockQuoteElement')]
  DNBlockQuoteElement = interface(DNGroupingElement)
  ['{841DE821-F769-3294-BC13-72F2C518FE77}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBlockQuoteElement = class(TDNGenericImport<DNBlockQuoteElementClass, DNBlockQuoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNCaptionElementClass = interface(DNGroupingElementClass)
  ['{37105479-91FA-5039-842D-4B70FD29BD99}']
  end;

  ///<summary>
  ///  Represents Caption structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.CaptionElement')]
  DNCaptionElement = interface(DNGroupingElement)
  ['{9A94534E-AB2E-3C0E-B486-52D83450AF84}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNCaptionElement = class(TDNGenericImport<DNCaptionElementClass, DNCaptionElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNDivElementClass = interface(DNGroupingElementClass)
  ['{90BD43DE-5E81-52C4-9AF0-808AF0076ACD}']
  end;

  ///<summary>
  ///  Represents Div structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.DivElement')]
  DNDivElement = interface(DNGroupingElement)
  ['{CAAA30F7-B7F0-394D-976F-5B706F14A04A}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNDivElement = class(TDNGenericImport<DNDivElementClass, DNDivElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNDocumentElementClass = interface(DNGroupingElementClass)
  ['{9349B2D7-10BC-5EA0-A65B-93925AEC447F}']
  end;

  ///<summary>
  ///  Represents Document structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.DocumentElement')]
  DNDocumentElement = interface(DNGroupingElement)
  ['{39B8A77B-40B5-3622-93FB-FC8B53571123}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNDocumentElement = class(TDNGenericImport<DNDocumentElementClass, DNDocumentElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNIndexElementClass = interface(DNGroupingElementClass)
  ['{CB7FA626-D54B-5D90-8BD2-06B4D11603EF}']
  end;

  ///<summary>
  ///  Represents Index structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.IndexElement')]
  DNIndexElement = interface(DNGroupingElement)
  ['{C7538CE4-2AA1-35DE-97B0-96651BBD424B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNIndexElement = class(TDNGenericImport<DNIndexElementClass, DNIndexElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNNonStructElementClass = interface(DNGroupingElementClass)
  ['{2749AEDC-5DA5-5D0D-ABA5-16F892E3B135}']
  end;

  ///<summary>
  ///  Represents NonStruct structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.NonStructElement')]
  DNNonStructElement = interface(DNGroupingElement)
  ['{13E89876-8A4B-32C3-A7F3-623BDC028526}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNNonStructElement = class(TDNGenericImport<DNNonStructElementClass, DNNonStructElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNPartElementClass = interface(DNGroupingElementClass)
  ['{33BF5066-0B78-5E7B-96EF-3BD195812CBC}']
  end;

  ///<summary>
  ///  Represents Part structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.PartElement')]
  DNPartElement = interface(DNGroupingElement)
  ['{44972E25-C88D-32E6-A580-5E5592DD1B35}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNPartElement = class(TDNGenericImport<DNPartElementClass, DNPartElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNPrivateElementClass = interface(DNGroupingElementClass)
  ['{BBB1C08D-0A48-50C6-B79C-5C4169F75E8D}']
  end;

  ///<summary>
  ///  Represents Private structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.PrivateElement')]
  DNPrivateElement = interface(DNGroupingElement)
  ['{89A5CD11-8DC7-3689-A55F-31A7563E6560}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNPrivateElement = class(TDNGenericImport<DNPrivateElementClass, DNPrivateElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNSectElementClass = interface(DNGroupingElementClass)
  ['{DDE16308-7346-5DD6-BF56-87EC5B55E16A}']
  end;

  ///<summary>
  ///  Represents Sect structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.SectElement')]
  DNSectElement = interface(DNGroupingElement)
  ['{86F96621-629C-3A08-B7E4-C2574EAC01FA}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNSectElement = class(TDNGenericImport<DNSectElementClass, DNSectElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTOCElementClass = interface(DNGroupingElementClass)
  ['{73E838D8-39EA-5D4E-87B0-FE4B3680E436}']
  end;

  ///<summary>
  ///  Represents TOC structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TOCElement')]
  DNTOCElement = interface(DNGroupingElement)
  ['{8CE14200-A335-3BFC-BE0D-C33F0418C659}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTOCElement = class(TDNGenericImport<DNTOCElementClass, DNTOCElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTOCIElementClass = interface(DNGroupingElementClass)
  ['{15E0F9E7-BB89-5C7C-871D-7A9818AFBC9A}']
  end;

  ///<summary>
  ///  Represents TOCI structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TOCIElement')]
  DNTOCIElement = interface(DNGroupingElement)
  ['{629A5EDA-8B82-3194-A9BA-2A8F68659A73}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTOCIElement = class(TDNGenericImport<DNTOCIElementClass, DNTOCIElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNIllustrationElementClass = interface(DNStructureElementClass)
  ['{522CD933-ABE6-50FF-A6AD-F6CC20D54F8F}']
  end;

  ///<summary>
  ///  Represents a base class for illustration structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.IllustrationElement')]
  DNIllustrationElement = interface(DNStructureElement)
  ['{2805F646-8AAB-3142-8ADE-6B57C60477B2}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageResolution">(Optional) Image Resolution. Default: 300 DPI.</param>
    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageWidth">Image width.</param>
    ///  <param name="imageHeight">Image height.</param>
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNIllustrationElement = class(TDNGenericImport<DNIllustrationElementClass, DNIllustrationElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLogicalStructure_FigureElementClass = interface(DNIllustrationElementClass)
  ['{0819003A-5DE4-5675-92F1-FBC793CCFA47}']
  end;

  ///<summary>
  ///  Represents Figure structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.FigureElement')]
  DNLogicalStructure_FigureElement = interface(DNIllustrationElement)
  ['{47374206-2790-33B6-B7C6-B9D4AED8BB09}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageResolution">(Optional) Image Resolution. Default: 300 DPI.</param>
    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageWidth">Image width.</param>
    ///  <param name="imageHeight">Image height.</param>
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLogicalStructure_FigureElement = class(TDNGenericImport<DNLogicalStructure_FigureElementClass, DNLogicalStructure_FigureElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNFormElementClass = interface(DNIllustrationElementClass)
  ['{D933D999-AF6F-5CCA-9B4D-A3FFFC79E687}']
  end;

  ///<summary>
  ///  Represents Form structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.FormElement')]
  DNFormElement = interface(DNIllustrationElement)
  ['{0AD16680-A7F8-3007-8D08-46CB75D2F13B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageResolution">(Optional) Image Resolution. Default: 300 DPI.</param>
    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageWidth">Image width.</param>
    ///  <param name="imageHeight">Image height.</param>
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNFormElement = class(TDNGenericImport<DNFormElementClass, DNFormElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNFormulaElementClass = interface(DNIllustrationElementClass)
  ['{637C8B61-AF83-5FE8-B8B6-39E3CF7AA478}']
  end;

  ///<summary>
  ///  Represents Formula structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.FormulaElement')]
  DNFormulaElement = interface(DNIllustrationElement)
  ['{92D910AE-F17A-3D79-BFCF-C560440ECD6B}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageResolution">(Optional) Image Resolution. Default: 300 DPI.</param>
    procedure SetImage(imageSrc: string; imageResolution: Double); overload;
    ///<summary>
    ///  Appends image to current illustration element.
    ///</summary>
    ///  <param name="imageSrc">Image source.</param>
    ///  <param name="imageWidth">Image width.</param>
    ///  <param name="imageHeight">Image height.</param>
    procedure SetImage(imageSrc: string; imageWidth: Double; imageHeight: Double); overload;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNFormulaElement = class(TDNGenericImport<DNFormulaElementClass, DNFormulaElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNILSElementClass = interface(DNStructureElementClass)
  ['{C7B09BE1-33A5-5554-9286-8636BCBCBA66}']
  end;

  ///<summary>
  ///  Represents a base class for inline-level structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ILSElement')]
  DNILSElement = interface(DNStructureElement)
  ['{BE0429C2-2EBB-330F-9CBB-D5DBF057E639}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNILSElement = class(TDNGenericImport<DNILSElementClass, DNILSElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAnnotationElementClass = interface(DNILSElementClass)
  ['{0E037239-45A4-5597-99EB-BBC5D92959EE}']
  end;

  ///<summary>
  ///  Represents a base class for annotation structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.AnnotationElement')]
  DNAnnotationElement = interface(DNILSElement)
  ['{A7CA795F-653E-3EF4-A014-EB427CD614E4}']
  { getters & setters } 

    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or Sets the Alternate Descriptions for annotation.
    ///  Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation's contents in human-readable form.
    ///</summary>
    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNAnnotationElement = class(TDNGenericImport<DNAnnotationElementClass, DNAnnotationElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNAnnotElementClass = interface(DNAnnotationElementClass)
  ['{AAA54FC4-4D1D-55E0-ACB1-FD3CFDEE5A3C}']
  end;

  ///<summary>
  ///  Represents Annot structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.AnnotElement')]
  DNAnnotElement = interface(DNAnnotationElement)
  ['{40804EBF-624D-331F-83C9-7EF6A2857C85}']
  { getters & setters } 

    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or Sets the Alternate Descriptions for annotation.
    ///  Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation's contents in human-readable form.
    ///</summary>
    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNAnnotElement = class(TDNGenericImport<DNAnnotElementClass, DNAnnotElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNLinkElementClass = interface(DNAnnotationElementClass)
  ['{B0126769-0104-5852-BCAE-C5520BBE7663}']
  end;

  ///<summary>
  ///  Represents Link structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.LinkElement')]
  DNLinkElement = interface(DNAnnotationElement)
  ['{9E82ADCE-AD66-39D1-B31D-D15F6389037F}']
  { getters & setters } 

    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);
    function get_StructureTextState: DNStructureTextState;
    function get_AlternateDescriptions: string;
    procedure set_AlternateDescriptions(value: string);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or Sets Hyperlink for Link Element.
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    ///<summary>
    ///  Gets or Sets the Alternate Descriptions for annotation.
    ///  Text that shall be displayed for the annotation or, if this type of annotation does not display text, an alternate description of the annotation's contents in human-readable form.
    ///</summary>
    property AlternateDescriptions: string read get_AlternateDescriptions write set_AlternateDescriptions;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNLinkElement = class(TDNGenericImport<DNLinkElementClass, DNLinkElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNBibEntryElementClass = interface(DNILSElementClass)
  ['{2CA9CC43-A7B9-5E16-92D2-F7DFE9BC8E55}']
  end;

  ///<summary>
  ///  Represents BibEntry structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.BibEntryElement')]
  DNBibEntryElement = interface(DNILSElement)
  ['{208083AE-4494-3EC8-AB69-1836A2238322}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNBibEntryElement = class(TDNGenericImport<DNBibEntryElementClass, DNBibEntryElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNILSTextElementClass = interface(DNILSElementClass)
  ['{8495292D-E17F-52FB-B1F4-733D5360909F}']
  end;

  ///<summary>
  ///  Represents a base class for inline-level text structure elements in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ILSTextElement')]
  DNILSTextElement = interface(DNILSElement)
  ['{B34BB10A-F30E-3ACB-B3AE-6E2A6ACCA571}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNILSTextElement = class(TDNGenericImport<DNILSTextElementClass, DNILSTextElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNCodeElementClass = interface(DNILSTextElementClass)
  ['{D9ECB303-8F5A-5100-81E9-6434A10E8F06}']
  end;

  ///<summary>
  ///  Represents Code structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.CodeElement')]
  DNCodeElement = interface(DNILSTextElement)
  ['{4B046FAA-2B1E-3EDD-A5ED-659CA72A4793}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNCodeElement = class(TDNGenericImport<DNCodeElementClass, DNCodeElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNNoteElementClass = interface(DNILSTextElementClass)
  ['{59DC39FE-2E58-5B92-B663-7B744135FB90}']
  end;

  ///<summary>
  ///  Represents Note structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.NoteElement')]
  DNNoteElement = interface(DNILSTextElement)
  ['{69E39160-09C1-373A-B760-283323835612}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNNoteElement = class(TDNGenericImport<DNNoteElementClass, DNNoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNQuoteElementClass = interface(DNILSTextElementClass)
  ['{B6AB40A0-E05F-5D3D-B9C2-16B05360E945}']
  end;

  ///<summary>
  ///  Represents Quote structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.QuoteElement')]
  DNQuoteElement = interface(DNILSTextElement)
  ['{3BA026A6-143C-3911-AF21-E231CAEC5873}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNQuoteElement = class(TDNGenericImport<DNQuoteElementClass, DNQuoteElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNSpanElementClass = interface(DNILSTextElementClass)
  ['{932D62F7-6365-5B13-B21B-1C9FAD5AE455}']
  end;

  ///<summary>
  ///  Represents Span structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.SpanElement')]
  DNSpanElement = interface(DNILSTextElement)
  ['{6BA0A497-DB22-3C25-B6CB-2E120D40081D}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content.</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNSpanElement = class(TDNGenericImport<DNSpanElementClass, DNSpanElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNReferenceElementClass = interface(DNILSElementClass)
  ['{5A69980D-B6B4-5366-AA7F-00E1EBEAD6C4}']
  end;

  ///<summary>
  ///  Represents Reference structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ReferenceElement')]
  DNReferenceElement = interface(DNILSElement)
  ['{94842B5C-1FB0-3770-91F4-FC9C8E1166F8}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNReferenceElement = class(TDNGenericImport<DNReferenceElementClass, DNReferenceElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyElementClass = interface(DNILSElementClass)
  ['{2F9B898C-F367-56A7-9D9D-04086259BD2F}']
  end;

  ///<summary>
  ///  Represents Ruby structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyElement')]
  DNRubyElement = interface(DNILSElement)
  ['{CCA35861-C3B6-3085-A541-F065017012D2}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyElement = class(TDNGenericImport<DNRubyElementClass, DNRubyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuElementClass = interface(DNILSElementClass)
  ['{5A0CDF46-AB8B-568D-8DE9-994DA1F69779}']
  end;

  ///<summary>
  ///  Represents Warichu structure element in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuElement')]
  DNWarichuElement = interface(DNILSElement)
  ['{196A48F7-CB36-3870-B072-AD1ECF6697DA}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuElement = class(TDNGenericImport<DNWarichuElementClass, DNWarichuElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListChildElementClass = interface(DNStructureElementClass)
  ['{BB66A8AB-AF2B-57B8-B6DA-F37DAC81504D}']
  end;

  ///<summary>
  ///  Represents a base class for children elements of the List in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ListChildElement')]
  DNListChildElement = interface(DNStructureElement)
  ['{B6D4388E-A694-3C67-B883-6F02CB39256E}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListChildElement = class(TDNGenericImport<DNListChildElementClass, DNListChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLblElementClass = interface(DNListChildElementClass)
  ['{D141DEBA-F66C-579F-A1A6-9CA29F2BE103}']
  end;

  ///<summary>
  ///  Represents Lbl structure element in logical structure of the list.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLblElement')]
  DNListLblElement = interface(DNListChildElement)
  ['{B7F2632C-3BE7-399B-83BB-B7BE1B0A4236}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLblElement = class(TDNGenericImport<DNListLblElementClass, DNListLblElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLBodyElementClass = interface(DNListChildElementClass)
  ['{5DE32CD2-2594-55F8-BC1B-93A7E9E71C01}']
  end;

  ///<summary>
  ///  Represents LBody structure element in logical structure of the list.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLBodyElement')]
  DNListLBodyElement = interface(DNListChildElement)
  ['{9C0B7FD4-4B68-3D6A-AFAF-29D39646A303}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLBodyElement = class(TDNGenericImport<DNListLBodyElementClass, DNListLBodyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNListLIElementClass = interface(DNListChildElementClass)
  ['{CB7A950F-CB1F-5F59-8A2C-2D054758144B}']
  end;

  ///<summary>
  ///  Represents LI structure element in logical structure of the list.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ListLIElement')]
  DNListLIElement = interface(DNListChildElement)
  ['{C4E78C5C-D283-39F5-81F6-8EFF35803A27}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNListLIElement = class(TDNGenericImport<DNListLIElementClass, DNListLIElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyChildElementClass = interface(DNStructureElementClass)
  ['{2A615454-DD30-5FEF-B97A-3D9C7331CC69}']
  end;

  ///<summary>
  ///  Represents a base class for children elements of the Ruby in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyChildElement')]
  DNRubyChildElement = interface(DNStructureElement)
  ['{F74E6875-07FA-34B8-9DCF-DCEC7061C704}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyChildElement = class(TDNGenericImport<DNRubyChildElementClass, DNRubyChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRBElementClass = interface(DNRubyChildElementClass)
  ['{0B37C0E1-1F75-5150-B506-268C0B6AF94F}']
  end;

  ///<summary>
  ///  Represents RB structure element in logical structure of the Ruby.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRBElement')]
  DNRubyRBElement = interface(DNRubyChildElement)
  ['{BD984455-372E-33CD-BC17-15E69865A4B1}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRBElement = class(TDNGenericImport<DNRubyRBElementClass, DNRubyRBElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRPElementClass = interface(DNRubyChildElementClass)
  ['{A6FE9FA8-BD30-5716-AAB0-25938D8AEE4E}']
  end;

  ///<summary>
  ///  Represents RP structure element in logical structure of the Ruby.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRPElement')]
  DNRubyRPElement = interface(DNRubyChildElement)
  ['{C64EC370-B4C3-3C67-8997-721B4C588D95}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRPElement = class(TDNGenericImport<DNRubyRPElementClass, DNRubyRPElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNRubyRTElementClass = interface(DNRubyChildElementClass)
  ['{D660FFBB-1F6E-5B39-A27B-F77828BF90A9}']
  end;

  ///<summary>
  ///  Represents RT structure element in logical structure of the Ruby.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.RubyRTElement')]
  DNRubyRTElement = interface(DNRubyChildElement)
  ['{F7772D2D-C6FA-3BE9-9C18-166886AFFEAE}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNRubyRTElement = class(TDNGenericImport<DNRubyRTElementClass, DNRubyRTElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableChildElementClass = interface(DNStructureElementClass)
  ['{3C077B51-9B74-55D1-9C35-1A36E0F5E525}']
  end;

  ///<summary>
  ///  Represents a base class for children elements of the Table in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableChildElement')]
  DNTableChildElement = interface(DNStructureElement)
  ['{CEC78EDF-EC98-355E-BBAF-9C71209BCC78}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableChildElement = class(TDNGenericImport<DNTableChildElementClass, DNTableChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableCellElementClass = interface(DNTableChildElementClass)
  ['{73625AA5-61B1-5DB3-9C8C-6249EEAC0921}']
  end;

  ///<summary>
  ///  Represents a base class for table cell elements (TH and TD) in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableCellElement')]
  DNTableCellElement = interface(DNTableChildElement)
  ['{0E3A3644-1C76-3515-A1DC-199FAD2D68F3}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the cell background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the cell border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the cell have border.
    ///</summary>
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    ///<summary>
    ///  Gets or sets the padding.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets the cell alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets the cell's text word wrapped.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets the column span.
    ///</summary>
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    ///<summary>
    ///  Gets or sets the row span.
    ///</summary>
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableCellElement = class(TDNGenericImport<DNTableCellElementClass, DNTableCellElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTDElementClass = interface(DNTableCellElementClass)
  ['{3E204500-F08D-59BC-BD2B-61A73FE56ED5}']
  end;

  ///<summary>
  ///  Represents TD structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTDElement')]
  DNTableTDElement = interface(DNTableCellElement)
  ['{3FD997F3-F083-3B3E-A5A1-FC3AE86C70DF}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the cell background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the cell border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the cell have border.
    ///</summary>
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    ///<summary>
    ///  Gets or sets the padding.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets the cell alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets the cell's text word wrapped.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets the column span.
    ///</summary>
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    ///<summary>
    ///  Gets or sets the row span.
    ///</summary>
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTDElement = class(TDNGenericImport<DNTableTDElementClass, DNTableTDElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTHElementClass = interface(DNTableCellElementClass)
  ['{C0ED83C7-30F2-54E7-89A1-BED24E799B5F}']
  end;

  ///<summary>
  ///  Represents TH structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTHElement')]
  DNTableTHElement = interface(DNTableCellElement)
  ['{27404CD2-EFC1-39D9-94B5-09C1E5DB8810}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_IsNoBorder: Boolean;
    procedure set_IsNoBorder(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Alignment: DNHorizontalAlignment;
    procedure set_Alignment(value: DNHorizontalAlignment);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_IsWordWrapped: Boolean;
    procedure set_IsWordWrapped(value: Boolean);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_StructureTextState: DNStructureTextState;
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the cell background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the cell border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets or sets the cell have border.
    ///</summary>
    property IsNoBorder: Boolean read get_IsNoBorder write set_IsNoBorder;
    ///<summary>
    ///  Gets or sets the padding.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets the cell alignment.
    ///</summary>
    property Alignment: DNHorizontalAlignment read get_Alignment write set_Alignment;
    ///<summary>
    ///  Gets or sets the default cell text state.
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets the cell's text word wrapped.
    ///</summary>
    property IsWordWrapped: Boolean read get_IsWordWrapped write set_IsWordWrapped;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets the column span.
    ///</summary>
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    ///<summary>
    ///  Gets or sets the row span.
    ///</summary>
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for current element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTHElement = class(TDNGenericImport<DNTableTHElementClass, DNTableTHElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableRowCollectionElementClass = interface(DNTableChildElementClass)
  ['{D96C7642-4682-511B-ADB5-9777E192266D}']
  end;

  ///<summary>
  ///  Represents a base class for children elements of the Table Head, Body and Foot in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableRowCollectionElement')]
  DNTableRowCollectionElement = interface(DNTableChildElement)
  ['{E0D5B47C-23CF-3C03-8C8F-141CF2C2A461}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTRElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableRowCollectionElement = class(TDNGenericImport<DNTableRowCollectionElementClass, DNTableRowCollectionElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTBodyElementClass = interface(DNTableRowCollectionElementClass)
  ['{CF917C44-04AB-589D-9B06-8D6B46F06448}']
  end;

  ///<summary>
  ///  Represents TBody structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTBodyElement')]
  DNTableTBodyElement = interface(DNTableRowCollectionElement)
  ['{96F142C5-8D3F-34FD-B154-705406F8EC28}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTRElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTBodyElement = class(TDNGenericImport<DNTableTBodyElementClass, DNTableTBodyElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTFootElementClass = interface(DNTableRowCollectionElementClass)
  ['{A22C8F56-3EA2-59E2-AE0B-FA550ABAAFC5}']
  end;

  ///<summary>
  ///  Represents TFoot structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTFootElement')]
  DNTableTFootElement = interface(DNTableRowCollectionElement)
  ['{4B12946C-0C5B-3BBB-9802-D918A1EF6744}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTRElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTFootElement = class(TDNGenericImport<DNTableTFootElementClass, DNTableTFootElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTHeadElementClass = interface(DNTableRowCollectionElementClass)
  ['{2A94808D-7DC6-553B-8D26-7A00F1627FE9}']
  end;

  ///<summary>
  ///  Represents THead structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTHeadElement')]
  DNTableTHeadElement = interface(DNTableRowCollectionElement)
  ['{CEDD93F6-9B06-3C6C-944F-5CCDE4433B00}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTRElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTR: DNTableTRElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTHeadElement = class(TDNGenericImport<DNTableTHeadElementClass, DNTableTHeadElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNTableTRElementClass = interface(DNTableChildElementClass)
  ['{E5E7907F-9E2A-5629-B86D-397EF84F29D4}']
  end;

  ///<summary>
  ///  Represents TR structure element in logical structure of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.TableTRElement')]
  DNTableTRElement = interface(DNTableChildElement)
  ['{233DD425-D593-38DB-8D78-DD925489B47B}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_MinRowHeight: Double;
    procedure set_MinRowHeight(value: Double);
    function get_FixedRowHeight: Double;
    procedure set_FixedRowHeight(value: Double);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsRowBroken: Boolean;
    procedure set_IsRowBroken(value: Boolean);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTH: DNTableTHElement;
    ///<summary>
    ///  Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHElement" />
    ///  and added it to current table.
    ///</summary>
    ///<returns>Created structure element.</returns>
    function CreateTD: DNTableTDElement;
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the row background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the row border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets default cell border.
    ///</summary>
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    ///<summary>
    ///  Gets height for row.
    ///</summary>
    property MinRowHeight: Double read get_MinRowHeight write set_MinRowHeight;
    ///<summary>
    ///  Gets fixed row height - row may have fixed height.
    ///</summary>
    property FixedRowHeight: Double read get_FixedRowHeight write set_FixedRowHeight;
    ///<summary>
    ///  Gets fixed row is in new page - page with this property should be printed to next page Default false.
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets is row can be broken between two pages.
    ///</summary>
    property IsRowBroken: Boolean read get_IsRowBroken write set_IsRowBroken;
    ///<summary>
    ///  Gets or sets default text state for row cells
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets default margin for row cells.
    ///</summary>
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNTableTRElement = class(TDNGenericImport<DNTableTRElementClass, DNTableTRElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuChildElementClass = interface(DNStructureElementClass)
  ['{3AEB8FD9-ABF6-54B1-A6BF-37E0A6294C16}']
  end;

  ///<summary>
  ///  Represents a base class for children elements of the Warichu in logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuChildElement')]
  DNWarichuChildElement = interface(DNStructureElement)
  ['{43FBA080-6E59-394E-8A6D-95C97D2E0FF9}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    ///<summary>
    ///  Change parent element for current structure element
    ///</summary>
    ///  <param name="newParentElement">New parent structure element</param>
    procedure ChangeParentElement(newParentElement: DNStructureElement);
    ///<summary>
    ///  Generate ID for structure element.
    ///</summary>
    procedure GenerateId;
    ///<summary>
    ///  Sets ID for structure element.
    ///</summary>
    ///  <param name="id">ID value for structure element</param>
    procedure SetId(id: string);
    ///<summary>
    ///  Clear ID for structure element.
    ///</summary>
    procedure ClearId;
    ///<summary>
    ///  Sets custom tag for structure element.
    ///</summary>
    ///  <param name="newTag">Tag name</param>
    procedure SetTag(newTag: string);
    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.AttributeOwnerStandard" />
    ///  object.</value>
    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureAttributeCollection" />
    ///  object.</value>
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    ///<summary>
    ///  Gets type of structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTypeStandard" />
    ///  object of structure element.</value>
    property StructureType: DNStructureTypeStandard read get_StructureType;
    ///<summary>
    ///  Gets the ID for structure element.
    ///</summary>
    ///<value>ID of the structure element.</value>
    property ID: string read get_ID;
    ///<summary>
    ///  Gets or sets the title for structure element.
    ///</summary>
    ///<value>Title of the structure element.</value>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the language for structure element.
    ///</summary>
    ///<value>Language of the structure element.</value>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  Gets or sets the alternative text for structure element.
    ///</summary>
    ///<value>Alternative text of the structure element.</value>
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    ///<summary>
    ///  Gets or sets the expansion text for structure element.
    ///</summary>
    ///<value>Expansion text of the structure element.</value>
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    ///<summary>
    ///  Gets or sets the actual text for structure element.
    ///</summary>
    ///<value>Actual text of the structure element.</value>
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuChildElement = class(TDNGenericImport<DNWarichuChildElementClass, DNWarichuChildElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuWPElementClass = interface(DNWarichuChildElementClass)
  ['{6FE2D54D-0CA5-5297-B964-DF382007636D}']
  end;

  ///<summary>
  ///  Represents WP structure element in logical structure of the Warichu.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuWPElement')]
  DNWarichuWPElement = interface(DNWarichuChildElement)
  ['{11B1B879-E438-38D6-B965-E55E0FF42A27}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuWPElement = class(TDNGenericImport<DNWarichuWPElementClass, DNWarichuWPElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNWarichuWTElementClass = interface(DNWarichuChildElementClass)
  ['{91947A80-7200-5569-BD6A-9A9CB935236E}']
  end;

  ///<summary>
  ///  Represents WT structure element in logical structure of the Warichu.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.WarichuWTElement')]
  DNWarichuWTElement = interface(DNWarichuChildElement)
  ['{F5250DF3-98C2-3731-BC64-0A83EBF7E9E0}']
  { getters & setters } 

    function get_DefaultAttributeOwner: DNAttributeOwnerStandard;
    function get_Attributes: DNStructureAttributeCollection;
    function get_StructureType: DNStructureTypeStandard;
    function get_ID: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_AlternativeText: string;
    procedure set_AlternativeText(value: string);
    function get_ExpansionText: string;
    procedure set_ExpansionText(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_ParentElement: DNLogicalStructure_Element;
    function get_ChildElements: DNElementList;

  { methods } 

    procedure ChangeParentElement(newParentElement: DNStructureElement);
    procedure GenerateId;
    procedure SetId(id: string);
    procedure ClearId;
    procedure SetTag(newTag: string);
    function ToString: string;
    function AppendChild(element: DNLogicalStructure_Element): DNLogicalStructure_Element;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DefaultAttributeOwner: DNAttributeOwnerStandard read get_DefaultAttributeOwner;
    property Attributes: DNStructureAttributeCollection read get_Attributes;
    property StructureType: DNStructureTypeStandard read get_StructureType;
    property ID: string read get_ID;
    property Title: string read get_Title write set_Title;
    property Language: string read get_Language write set_Language;
    property AlternativeText: string read get_AlternativeText write set_AlternativeText;
    property ExpansionText: string read get_ExpansionText write set_ExpansionText;
    property ActualText: string read get_ActualText write set_ActualText;
    property ParentElement: DNLogicalStructure_Element read get_ParentElement;
    property ChildElements: DNElementList read get_ChildElements;
  end;

  TDNWarichuWTElement = class(TDNGenericImport<DNWarichuWTElementClass, DNWarichuWTElement>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNElementListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{578F0DAA-7496-5B75-B53E-F083242C1AEE}']
  end;

  ///<summary>
  ///  Represents an ordered collection of elements.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ElementList')]
  DNElementList = interface(DDN.mscorlib.DNObject)
  ['{262A7C40-E4D5-39C2-9109-648B6A83AF74}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ElementOf(index: Int32): DNLogicalStructure_Element;

  { methods } 

    ///<summary>
    ///  Retrieves a element at the given index.
    ///</summary>
    ///  <param name="index">The index into the list of elements.</param>
    ///<returns>The <see cref="T:/Aspose.Pdf.LogicalStructure.Element" />
    ///  with the specified index in the collection. If <paramref name="index" />
    ///  is greater than or equal to the number of elements in the list, this returns null.</returns>
    function Item(index: Int32): DNLogicalStructure_Element;
    ///<summary>
    ///  Gets an enumerator that iterates through the collection of elements.
    ///</summary>
    ///<returns>An enumerator used to iterate through the collection of elements.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNLogicalStructure_Element>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of elements in the ElementList.
    ///</summary>
    property Count: Int32 read get_Count;
    property ElementOf[index: Int32]: DNLogicalStructure_Element read get_ElementOf; default;
  end;

  TDNElementList = class(TDNGenericImport<DNElementListClass, DNElementList>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  ///<summary>
  ///  Interface for presenting text structure elements.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.ITextElement')]
  DNITextElement = interface(DDN.mscorlib.DNObject)
  ['{A30E0947-1393-3425-BBB1-933E19BA0CEB}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;

  { methods } 

    ///<summary>
    ///  Appends text content to current text element.
    ///</summary>
    ///  <param name="text">Text content</param>
    procedure SetText(text: string);

  { propertys } 

    ///<summary>
    ///  Gets <see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for text structure element.
    ///</summary>
    ///<value><see cref="T:/Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  object for text structure element.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
  end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CC902FF3-26C6-5311-AF92-9D989AC872DD}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the StructureAttribute.
    ///</summary>
    ///  <param name="attributeKey">Attribute Key</param>
    {class} function init(attributeKey: DNAttributeKey): DNStructureAttribute;

  end;

  ///<summary>
  ///  Represents attribute of structure element.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttribute')]
  DNStructureAttribute = interface(DDN.mscorlib.DNObject)
  ['{B9F8ACDE-481F-375B-9E76-5553019377B4}']
  { getters & setters } 

    function get_Key: DNAttributeKey;
    function get_IsInitializedValue: Boolean;

  { methods } 

    ///<summary>
    ///  Gets Value Name.
    ///</summary>
    ///<returns>Value Name.</returns>
    function GetNameValue: DNAttributeName;
    ///<summary>
    ///  Gets Value String.
    ///</summary>
    ///<returns>Value String.</returns>
    function GetStringValue: string;
    ///<summary>
    ///  Gets Value Name Array.
    ///</summary>
    ///<returns>Value Name Array.</returns>
    function GetArrayValue: TArray<DNAttributeName>;
    ///<summary>
    ///  Sets Value Name.
    ///</summary>
    ///  <param name="name">Allowable Value Name.</param>
    procedure SetNameValue(name: DNAttributeName);
    ///<summary>
    ///  Sets Value String.
    ///</summary>
    ///  <param name="value">Value String.</param>
    procedure SetStringValue(value: string);
    ///<summary>
    ///  Sets Value Number.
    ///</summary>
    ///  <param name="number">Value Number.</param>
    procedure SetNumberValue(number: Double);
    ///<summary>
    ///  Sets Value Name Array.
    ///</summary>
    ///  <param name="array">Array of allowable Value Names.</param>
    procedure SetArrayValue(&array: TArray<DNAttributeName>);
    ///<summary>
    ///  Sets Value Color.
    ///</summary>
    ///  <param name="color">Color.</param>
    procedure SetColorValue(color: DNColor);
    ///<summary>
    ///  Sets Value Rectangle.
    ///</summary>
    ///  <param name="rectangle">Rectangle.</param>
    procedure SetRectangleValue(rectangle: DNRectangle);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets attribute key.
    ///</summary>
    ///<value>Attribute Key.</value>
    property Key: DNAttributeKey read get_Key;
    ///<summary>
    ///  Gets status of structure attribute value. True if value is set.
    ///</summary>
    property IsInitializedValue: Boolean read get_IsInitializedValue;
  end;

  TDNStructureAttribute = class(TDNGenericImport<DNStructureAttributeClass, DNStructureAttribute>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C9EEAF1-F4BF-570F-BA88-5CD170B70F0C}']
  end;

  ///<summary>
  ///  Represents collection of attributes of structure elements.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttributeCollection')]
  DNStructureAttributeCollection = interface(DDN.mscorlib.DNObject)
  ['{97DFE618-CE78-39F2-BCA6-21465A99031E}']
  { methods } 

    ///<summary>
    ///  Return <see cref="T:Aspose.Pdf.LogicalStructure.StructureAttributes" />
    ///  of structure element by standard attribute owner.
    ///</summary>
    ///  <param name="ownerStandard">Standard attribute owner.</param>
    ///<returns><see cref="T:Aspose.Pdf.LogicalStructure.StructureAttributes" />
    ///  of structure element. Return null if not found.</returns>
    function GetAttributes(ownerStandard: DNAttributeOwnerStandard): DNStructureAttributes;
    ///<summary>
    ///  Create and return <see cref="T:Aspose.Pdf.LogicalStructure.StructureAttributes" />
    ///  of structure element by standard attribute owner.
    ///</summary>
    ///  <param name="ownerStandard">Standard attribute owner.</param>
    ///<returns><see cref="T:Aspose.Pdf.LogicalStructure.StructureAttributes" />
    ///  of structure element. Structure Attributes will be created if it needed.</returns>
    function CreateAttributes(ownerStandard: DNAttributeOwnerStandard): DNStructureAttributes;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStructureAttributeCollection = class(TDNGenericImport<DNStructureAttributeCollectionClass, DNStructureAttributeCollection>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3261869-EE59-5269-9F88-7CE8BE763A13}']
  end;

  ///<summary>
  ///  Represents attributes of structure element for standard attribute owners.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureAttributes')]
  DNStructureAttributes = interface(DDN.mscorlib.DNObject)
  ['{427150C6-8E6C-394B-98B1-5D604696629A}']
  { getters & setters } 

    function get_Owner: DNAttributeOwnerStandard;

  { methods } 

    ///<summary>
    ///  Gets StructureAttribute by AttributeKey.
    ///</summary>
    ///  <param name="key">AttributeKey.</param>
    ///<returns>StructureAttribute</returns>
    function GetAttribute(key: DNAttributeKey): DNStructureAttribute;
    ///<summary>
    ///  Sets StructureAttribute into StructureAttributes.
    ///</summary>
    ///  <param name="attribute">StructureAttribute.</param>
    procedure SetAttribute(attribute: DNStructureAttribute);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets standard attribute owner.
    ///</summary>
    ///<value>Standard attribute owner.</value>
    property Owner: DNAttributeOwnerStandard read get_Owner;
  end;

  TDNStructureAttributes = class(TDNGenericImport<DNStructureAttributesClass, DNStructureAttributes>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTextStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3B784D0E-432F-5025-BCCB-9EBC07366806}']
  end;

  ///<summary>
  ///  Represents text state settings for Text Structure Elements and TaggedContent (ITextElement, ITaggedContent)
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTextState')]
  DNStructureTextState = interface(DDN.mscorlib.DNObject)
  ['{C6D95725-B97B-3E0A-B30B-0762F7E52485}']
  { getters & setters } 

    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_MarginInfo: DNMarginInfo;
    procedure set_MarginInfo(value: DNMarginInfo);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the font of text.
    ///</summary>
    ///<remarks>
    ///  Can be null. Use null to inherit <c>Font</c> property from parent structure element.
    ///</remarks>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Gets or sets foreground color of the text.
    ///</summary>
    ///<remarks>
    ///  Can be null. Use null to inherit <c>ForegroundColor</c> property from parent structure element.
    ///</remarks>
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets background color of the text.
    ///</summary>
    ///<remarks>
    ///  Can be null. Use null to inherit <c>BackgroundColor</c> property from parent structure element.
    ///</remarks>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets margin for block structure element.
    ///</summary>
    property MarginInfo: DNMarginInfo read get_MarginInfo write set_MarginInfo;
  end;

  TDNStructureTextState = class(TDNGenericImport<DNStructureTextStateClass, DNStructureTextState>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTypeCategoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F90394F2-1DBA-56D4-A18A-426BE61F2889}']
  { static fields getter & setter } 

   function __fakeFieldGet_GroupingElements: DNStructureTypeCategory;
   function __fakeFieldGet_BLSEs: DNStructureTypeCategory;
   function __fakeFieldGet_ILSEs: DNStructureTypeCategory;
   function __fakeFieldGet_IllustrationElements: DNStructureTypeCategory;

  { static fields } 

    ///<summary>
    ///  Grouping elements group other elements into sequences or hierarchies but hold no content directly and have no direct effect on layout.
    ///</summary>
    {class} property GroupingElements: DNStructureTypeCategory read __fakeFieldGet_GroupingElements;
    ///<summary>
    ///  Block-level structure elements (BLSEs) describe the overall layout of content on the page, proceeding in the block-progression direction.
    ///</summary>
    {class} property BLSEs: DNStructureTypeCategory read __fakeFieldGet_BLSEs;
    ///<summary>
    ///  Inline-level structure elements (ILSEs) describe the layout of content within a BLSE, proceeding in the inline-progression direction.
    ///</summary>
    {class} property ILSEs: DNStructureTypeCategory read __fakeFieldGet_ILSEs;
    ///<summary>
    ///  Illustration elements are compact sequences of content, in page content order, that are considered to be unitary objects with respect to page layout. An illustration can be treated as either a BLSE or an ILSE.
    ///</summary>
    {class} property IllustrationElements: DNStructureTypeCategory read __fakeFieldGet_IllustrationElements;

  end;

  ///<summary>
  ///  Represents Categories of Standard Structure Types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTypeCategory')]
  DNStructureTypeCategory = interface(DDN.mscorlib.DNObject)
  ['{657D5C51-4066-3F88-BE8D-993023CF82C6}']
  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNStructureTypeCategory = class(TDNGenericImport<DNStructureTypeCategoryClass, DNStructureTypeCategory>) end;

  //-------------namespace: Aspose.Pdf.LogicalStructure----------------
  DNStructureTypeStandardClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E9C57CAE-4BAE-5289-9C75-730FB174DED4}']
  { static fields getter & setter } 

   function __fakeFieldGet_Document: DNStructureTypeStandard;
   function __fakeFieldGet_Part: DNStructureTypeStandard;
   function __fakeFieldGet_Art: DNStructureTypeStandard;
   function __fakeFieldGet_Sect: DNStructureTypeStandard;
   function __fakeFieldGet_Div: DNStructureTypeStandard;
   function __fakeFieldGet_BlockQuote: DNStructureTypeStandard;
   function __fakeFieldGet_Caption: DNStructureTypeStandard;
   function __fakeFieldGet_TOC: DNStructureTypeStandard;
   function __fakeFieldGet_TOCI: DNStructureTypeStandard;
   function __fakeFieldGet_Index: DNStructureTypeStandard;
   function __fakeFieldGet_NonStruct: DNStructureTypeStandard;
   function __fakeFieldGet_Private: DNStructureTypeStandard;
   function __fakeFieldGet_P: DNStructureTypeStandard;
   function __fakeFieldGet_H: DNStructureTypeStandard;
   function __fakeFieldGet_H1: DNStructureTypeStandard;
   function __fakeFieldGet_H2: DNStructureTypeStandard;
   function __fakeFieldGet_H3: DNStructureTypeStandard;
   function __fakeFieldGet_H4: DNStructureTypeStandard;
   function __fakeFieldGet_H5: DNStructureTypeStandard;
   function __fakeFieldGet_H6: DNStructureTypeStandard;
   function __fakeFieldGet_L: DNStructureTypeStandard;
   function __fakeFieldGet_LI: DNStructureTypeStandard;
   function __fakeFieldGet_Lbl: DNStructureTypeStandard;
   function __fakeFieldGet_LBody: DNStructureTypeStandard;
   function __fakeFieldGet_Table: DNStructureTypeStandard;
   function __fakeFieldGet_THead: DNStructureTypeStandard;
   function __fakeFieldGet_TBody: DNStructureTypeStandard;
   function __fakeFieldGet_TFoot: DNStructureTypeStandard;
   function __fakeFieldGet_TR: DNStructureTypeStandard;
   function __fakeFieldGet_TH: DNStructureTypeStandard;
   function __fakeFieldGet_TD: DNStructureTypeStandard;
   function __fakeFieldGet_Span: DNStructureTypeStandard;
   function __fakeFieldGet_Quote: DNStructureTypeStandard;
   function __fakeFieldGet_Note: DNStructureTypeStandard;
   function __fakeFieldGet_Reference: DNStructureTypeStandard;
   function __fakeFieldGet_BibEntry: DNStructureTypeStandard;
   function __fakeFieldGet_Code: DNStructureTypeStandard;
   function __fakeFieldGet_Link: DNStructureTypeStandard;
   function __fakeFieldGet_Annot: DNStructureTypeStandard;
   function __fakeFieldGet_Ruby: DNStructureTypeStandard;
   function __fakeFieldGet_RB: DNStructureTypeStandard;
   function __fakeFieldGet_RT: DNStructureTypeStandard;
   function __fakeFieldGet_RP: DNStructureTypeStandard;
   function __fakeFieldGet_Warichu: DNStructureTypeStandard;
   function __fakeFieldGet_WT: DNStructureTypeStandard;
   function __fakeFieldGet_WP: DNStructureTypeStandard;
   function __fakeFieldGet_Figure: DNStructureTypeStandard;
   function __fakeFieldGet_Formula: DNStructureTypeStandard;
   function __fakeFieldGet_Form: DNStructureTypeStandard;

  { static fields } 

    ///<summary>
    ///  (Document) A complete document. This is the root element of any structure tree containing multiple parts or multiple articles.
    ///</summary>
    {class} property Document: DNStructureTypeStandard read __fakeFieldGet_Document;
    ///<summary>
    ///  (Part) A large-scale division of a document. This type of element is appropriate for grouping articles or sections.
    ///</summary>
    {class} property Part: DNStructureTypeStandard read __fakeFieldGet_Part;
    ///<summary>
    ///  (Article) A relatively self-contained body of text constituting a single narrative or exposition. Articles should be disjoint; that is, they should not contain other articles as constituent elements.
    ///</summary>
    {class} property Art: DNStructureTypeStandard read __fakeFieldGet_Art;
    ///<summary>
    ///  (Section) A container for grouping related content elements.
    ///</summary>
    {class} property Sect: DNStructureTypeStandard read __fakeFieldGet_Sect;
    ///<summary>
    ///  (Division) A generic block-level element or group of elements.
    ///</summary>
    {class} property &Div: DNStructureTypeStandard read __fakeFieldGet_Div;
    ///<summary>
    ///  (Block quotation) A portion of text consisting of one or more paragraphs attributed to someone other than the author of the surrounding text.
    ///</summary>
    {class} property BlockQuote: DNStructureTypeStandard read __fakeFieldGet_BlockQuote;
    ///<summary>
    ///  (Caption) A brief portion of text describing a table or figure.
    ///</summary>
    {class} property Caption: DNStructureTypeStandard read __fakeFieldGet_Caption;
    ///<summary><para>(Table of contents) A list made up of table of contents item entries (structure type TOCI) and/or other nested table of contents entries (TOC).</para><para>A TOC entry that includes only TOCI entries represents a flat hierarchy. A TOC entry that includes other nested TOC entries (and possibly TOCI entries) represents a more complex hierarchy.Ideally, the hierarchy of a top level TOC entry reflects the structure of the main body of the document.</para></summary>
    {class} property TOC: DNStructureTypeStandard read __fakeFieldGet_TOC;
    ///<summary><para>(Table of contents item) An individual member of a table of contents. This entry’s children may be any of the following structure types:</para><para></para><list type="table"><item><term>Lbl</term><description>A label</description>
    ///</item>
    ///<item><term>Reference</term><description>A reference to the title and the page number</description>
    ///</item>
    ///<item><term>NonStruct</term><description>Non-structure elements for wrapping a leader artifact</description>
    ///</item>
    ///<item><term>P</term><description>Descriptive text</description>
    ///</item>
    ///<item><term>TOC</term><description>Table of content elements for hierarchical tables of content, as described for the TOC entry</description>
    ///</item>
    ///</list>
    ///</summary>
    {class} property TOCI: DNStructureTypeStandard read __fakeFieldGet_TOCI;
    ///<summary>
    ///  (Index) A sequence of entries containing identifying text accompanied by reference elements that point out occurrences of the specified text in the main body of a document.
    ///</summary>
    {class} property Index: DNStructureTypeStandard read __fakeFieldGet_Index;
    ///<summary>
    ///  (Nonstructural element) A grouping element having no inherent structural significance; it serves solely for grouping purposes. This type of element differs from a division (structure type Div) in that it shall not be interpreted or exported to other document formats; however, its descendants shall be processed normally.
    ///</summary>
    {class} property NonStruct: DNStructureTypeStandard read __fakeFieldGet_NonStruct;
    ///<summary>
    ///  (Private element) A grouping element containing private content belonging to the application producing it. The structural significance of this type of element is unspecified and shall be determined entirely by the conforming writer. Neither the Private element nor any of its descendants shall be interpreted or exported to other document formats.
    ///</summary>
    {class} property &Private: DNStructureTypeStandard read __fakeFieldGet_Private;
    ///<summary>
    ///  (Paragraph) A low-level division of text.
    ///</summary>
    {class} property P: DNStructureTypeStandard read __fakeFieldGet_P;
    ///<summary>
    ///  (Heading) A label for a subdivision of a document's content. It should be the first child of the division that it heads.
    ///</summary>
    {class} property H: DNStructureTypeStandard read __fakeFieldGet_H;
    ///<summary>
    ///  Level 1 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H1: DNStructureTypeStandard read __fakeFieldGet_H1;
    ///<summary>
    ///  Level 2 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H2: DNStructureTypeStandard read __fakeFieldGet_H2;
    ///<summary>
    ///  Level 3 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H3: DNStructureTypeStandard read __fakeFieldGet_H3;
    ///<summary>
    ///  Level 4 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H4: DNStructureTypeStandard read __fakeFieldGet_H4;
    ///<summary>
    ///  Level 5 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H5: DNStructureTypeStandard read __fakeFieldGet_H5;
    ///<summary>
    ///  Level 6 Heading, for use in conforming writers that cannot hierarchically nest their sections and thus cannot determine the level of a heading from its level of nesting.
    ///</summary>
    {class} property H6: DNStructureTypeStandard read __fakeFieldGet_H6;
    ///<summary>
    ///  (List) A sequence of items of like meaning and importance. Its immediate children should be an optional caption (structure type Caption) followed by one or more list items (structure type LI).
    ///</summary>
    {class} property L: DNStructureTypeStandard read __fakeFieldGet_L;
    ///<summary>
    ///  (List item) An individual member of a list. Its children may be one or more labels, list bodies, or both (structure types Lbl or LBody).
    ///</summary>
    {class} property LI: DNStructureTypeStandard read __fakeFieldGet_LI;
    ///<summary>
    ///  (Label) A name or number that distinguishes a given item from others in the same list or other group of like items.
    ///</summary>
    {class} property Lbl: DNStructureTypeStandard read __fakeFieldGet_Lbl;
    ///<summary>
    ///  (List body) The descriptive content of a list item. In a dictionary list, for example, it contains the definition of the term. It may either contain the content directly or have other BLSEs, perhaps including nested lists, as children.
    ///</summary>
    {class} property LBody: DNStructureTypeStandard read __fakeFieldGet_LBody;
    ///<summary>
    ///  (Table) A two-dimensional layout of rectangular data cells, possibly having a complex substructure. It contains either one or more table rows (structure type TR) as children; or an optional table head (structure type THead) followed by one or more table body elements (structure type TBody) and an optional table footer (structure type TFoot). In addition, a table may have a caption (structure type Caption) as its first or last child.
    ///</summary>
    {class} property Table: DNStructureTypeStandard read __fakeFieldGet_Table;
    ///<summary>
    ///  (Table header row group; PDF 1.5) A group of rows that constitute the header of a table. If the table is split across multiple pages, these rows may be redrawn at the top of each table fragment (although there is only one THead element).
    ///</summary>
    {class} property THead: DNStructureTypeStandard read __fakeFieldGet_THead;
    ///<summary>
    ///  (Table body row group; PDF 1.5) A group of rows that constitute the main body portion of a table. If the table is split across multiple pages, the body area may be broken apart on a row boundary. A table may have multiple TBody elements to allow for the drawing of a border or background for a set of rows.
    ///</summary>
    {class} property TBody: DNStructureTypeStandard read __fakeFieldGet_TBody;
    ///<summary>
    ///  (Table footer row group; PDF 1.5) A group of rows that constitute the footer of a table. If the table is split across multiple pages, these rows may be redrawn at the bottom of each table fragment (although there is only one TFoot element.)
    ///</summary>
    {class} property TFoot: DNStructureTypeStandard read __fakeFieldGet_TFoot;
    ///<summary>
    ///  (Table row) A row of headings or data in a table. It may contain table header cells and table data cells (structure types TH and TD).
    ///</summary>
    {class} property TR: DNStructureTypeStandard read __fakeFieldGet_TR;
    ///<summary>
    ///  (Table header cell) A table cell containing header text describing one or more rows or columns of the table.
    ///</summary>
    {class} property TH: DNStructureTypeStandard read __fakeFieldGet_TH;
    ///<summary>
    ///  (Table data cell) A table cell containing data that is part of the table's content.
    ///</summary>
    {class} property TD: DNStructureTypeStandard read __fakeFieldGet_TD;
    ///<summary>
    ///  (Span) A generic inline portion of text having no particular inherent characteristics. It can be used, for example, to delimit a range of text with a given set of styling attributes.
    ///</summary>
    {class} property Span: DNStructureTypeStandard read __fakeFieldGet_Span;
    ///<summary><para>(Quotation) An inline portion of text attributed to someone other than the author of the surrounding text.</para><para>The quoted text should be contained inline within a single paragraph. This differs from the block-level element BlockQuote, which consists of one or more complete paragraphs (or other elements presented as if they were complete paragraphs).</para></summary>
    {class} property Quote: DNStructureTypeStandard read __fakeFieldGet_Quote;
    ///<summary><para>(Note) An item of explanatory text, such as a footnote or an endnote, that is referred to from within the body of the document. It may have a label (structure type Lbl) as a child. The note may be included as a child of the structure element in the body text that refers to it, or it may be included elsewhere (such as in an endnotes section) and accessed by means of a reference (structure type Reference).</para><para>Tagged PDF does not prescribe the placement of footnotes in the page content order. They may be either inline or at the end of the page, at the discretion of theconforming writer.</para></summary>
    {class} property Note: DNStructureTypeStandard read __fakeFieldGet_Note;
    ///<summary>
    ///  (Reference) A citation to content elsewhere in the document.
    ///</summary>
    {class} property Reference: DNStructureTypeStandard read __fakeFieldGet_Reference;
    ///<summary><para>(Bibliography entry) A reference identifying the external source of some cited content. It may contain a label (structure type Lbl) as a child.</para><para>Although a bibliography entry is likely to include component parts identifying the cited content's author, work, publisher, and so forth, no standard structure types are defined at this level of detail.</para></summary>
    {class} property BibEntry: DNStructureTypeStandard read __fakeFieldGet_BibEntry;
    ///<summary>
    ///  (Code) A fragment of computer program text.
    ///</summary>
    {class} property Code: DNStructureTypeStandard read __fakeFieldGet_Code;
    ///<summary>
    ///  (Link) An association between a portion of the ILSE's content and a corresponding link annotation or annotations. Its children should be one or more content items or child ILSEs and one or more object references identifying the associated link annotations.
    ///</summary>
    {class} property Link: DNStructureTypeStandard read __fakeFieldGet_Link;
    ///<summary>
    ///  (Annotation; PDF 1.5) An association between a portion of the ILSE's content and a corresponding PDF annotation. Annot shall be used for all PDF annotations except link annotations and widget annotations.
    ///</summary>
    {class} property Annot: DNStructureTypeStandard read __fakeFieldGet_Annot;
    ///<summary><para>(Ruby; PDF 1.5) A side-note (annotation) written in a smaller text size and placed adjacent to the base text to which it refers. A Ruby element may also contain the RB, RT, and RP elements.</para><para>(Ruby) The wrapper around the entire ruby assembly. It shall contain one RB element followed by either an RT element or a three-element group consisting of RP, RT, and RP. Ruby elements and their content elements shall not break across multiple lines.</para></summary>
    {class} property Ruby: DNStructureTypeStandard read __fakeFieldGet_Ruby;
    ///<summary>
    ///  (Ruby base text) The full-size text to which the ruby annotation is applied. RB may contain text, other inline elements, or a mixture of both. It may have the RubyAlignattribute.
    ///</summary>
    {class} property RB: DNStructureTypeStandard read __fakeFieldGet_RB;
    ///<summary>
    ///  (Ruby annotation text) The smaller-size text that shall be placed adjacent to the ruby base text. It may contain text, other inline elements, or a mixture of both. It may have the RubyAlign and RubyPosition attributes.
    ///</summary>
    {class} property RT: DNStructureTypeStandard read __fakeFieldGet_RT;
    ///<summary>
    ///  (Ruby punctuation) Punctuation surrounding the ruby annotation text. It is used only when a ruby annotation cannot be properly formatted in a ruby style and instead is formatted as a normal comment, or when it is formatted as a warichu. It contains text (usually a single LEFT or RIGHT PARENTHESIS or similar bracketing character).
    ///</summary>
    {class} property RP: DNStructureTypeStandard read __fakeFieldGet_RP;
    ///<summary><para>(Warichu; PDF 1.5) A comment or annotation in a smaller text size and formatted onto two smaller lines within the height of the containing text line and placed following (inline) the base text to which it refers. A Warichu element may also contain the WT and WP elements.</para><para>(Warichu) The wrapper around the entire warichu assembly. It may contain a three-element group consisting of WP, WT, and WP. Warichu elements (and their content elements) may wrap across multiple lines, according to the warichu breaking rules described in the Japanese Industrial Standard (JIS) X 4051-1995.</para></summary>
    {class} property Warichu: DNStructureTypeStandard read __fakeFieldGet_Warichu;
    ///<summary>
    ///  (Warichu text) The smaller-size text of a warichu comment that is formatted into two lines and placed between surrounding WP elements.
    ///</summary>
    {class} property WT: DNStructureTypeStandard read __fakeFieldGet_WT;
    ///<summary>
    ///  (Warichu punctuation) The punctuation that surrounds the WT text. It contains text (usually a single LEFT or RIGHT PARENTHESIS or similar bracketing character). According to JIS X 4051-1995, the parentheses surrounding a warichu may be converted to a SPACE (nominally 1/4 EM in width) at the discretion of the formatter.
    ///</summary>
    {class} property WP: DNStructureTypeStandard read __fakeFieldGet_WP;
    ///<summary>
    ///  (Figure) An item of graphical content. Its placement may be specified with the Placement layout attribute.
    ///</summary>
    {class} property Figure: DNStructureTypeStandard read __fakeFieldGet_Figure;
    ///<summary><para>(Formula) A mathematical formula.</para><para>This structure type is useful only for identifying an entire content element as a formula. No standard structure types are defined for identifying individual components within the formula. From a formatting standpoint, the formula shall be treated similarly to a figure (structure type Figure).</para></summary>
    {class} property Formula: DNStructureTypeStandard read __fakeFieldGet_Formula;
    ///<summary>
    ///  (Form) A widget annotation representing an interactive form field.
    ///</summary>
    {class} property Form: DNStructureTypeStandard read __fakeFieldGet_Form;

  end;

  ///<summary>
  ///  Represents Standard Structure Types.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LogicalStructure.StructureTypeStandard')]
  DNStructureTypeStandard = interface(DDN.mscorlib.DNObject)
  ['{C8B0CA4B-51BB-3C3F-8829-B6B946DE854A}']
  { getters & setters } 

    function get_Tag: string;
    function get_Category: DNStructureTypeCategory;

  { methods } 

    ///<summary>
    ///  Returns a string that represents the current object.
    ///</summary>
    ///<returns>String that represents the current object.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets tag name of <see cref="T:Aspose.Pdf.LogicalStructure.StructureElement" />
    ///  .
    ///</summary>
    ///<value>Tag name of <see cref="T:Aspose.Pdf.LogicalStructure.StructureElement" />
    ///  .</value>
    property Tag: string read get_Tag;
    ///<summary>
    ///  Gets category of Standard Structure Type.
    ///</summary>
    ///<value>Category of Standard Structure Type.</value>
    property Category: DNStructureTypeCategory read get_Category;
  end;

  TDNStructureTypeStandard = class(TDNGenericImport<DNStructureTypeStandardClass, DNStructureTypeStandard>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMarginInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C1DBED4-212F-50D2-8EDD-23C8894BBB97}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.MarginInfo" />
    ///  class.
    ///</summary>
    {class} function init: DNMarginInfo; overload;
    ///<summary>
    ///  Constructor of Rectangle.
    ///</summary>
    ///  <param name="left">Left margin.</param>
    ///  <param name="bottom">Bottom margin</param>
    ///  <param name="right">Right margin.</param>
    ///  <param name="top">Top margin.</param>
    {class} function init(left: Double; bottom: Double; right: Double; top: Double): DNMarginInfo; overload;

  end;

  ///<summary>
  ///  This class represents a margin for different objects.
  ///</summary>
  [DNTypeName('Aspose.Pdf.MarginInfo')]
  DNMarginInfo = interface(DDN.mscorlib.DNObject)
  ['{84A149AE-941B-378B-9396-861AF1CA723C}']
  { getters & setters } 

    function get_Left: Double;
    procedure set_Left(value: Double);
    function get_Right: Double;
    procedure set_Right(value: Double);
    function get_Top: Double;
    procedure set_Top(value: Double);
    function get_Bottom: Double;
    procedure set_Bottom(value: Double);

  { methods } 

    ///<summary>
    ///  Clones a new <see cref="T:Aspose.Pdf.MarginInfo" />
    ///  object.
    ///</summary>
    ///<returns>The new object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the left margin.
    ///</summary>
    property Left: Double read get_Left write set_Left;
    ///<summary>
    ///  Gets or sets a float value that indicates the right margin.
    ///</summary>
    property Right: Double read get_Right write set_Right;
    ///<summary>
    ///  Gets or sets a float value that indicates the top margin.
    ///</summary>
    property Top: Double read get_Top write set_Top;
    ///<summary>
    ///  Gets or sets a float value that indicates the bottom margin.
    ///</summary>
    property Bottom: Double read get_Bottom write set_Bottom;
  end;

  TDNMarginInfo = class(TDNGenericImport<DNMarginInfoClass, DNMarginInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMatrixClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CE879C33-1750-5E6A-9922-14D60D428F96}']
  { constructors } 

    ///<summary>
    ///  Constructor
    ///  creates stanrard 1 to 1 matrix:
    ///  [ A B C D E F ] = [ 1, 0, 0, 1, 0, 0]
    ///</summary>
    ///<example><code lang="C#">
    ///  Matrix m = new Matrix();
    ///</code></example>
    {class} function init: DNMatrix; overload;
    ///<summary>
    ///  Constructor
    ///  accepts a matrix with following array representation:
    ///  [ A B C D E F ]
    ///</summary>
    ///  <param name="matrixArray">Matrix data array.</param>
    ///<example><code lang="C#">
    ///  double[] c = new double[] { 1, 0, 0, 1, 10, 20 };
    ///  Matrix m = new Matrix(c);
    ///</code></example>
    {class} function init(matrixArray: TArray<Double>): DNMatrix; overload;
    ///<summary>
    ///  Constructor
    ///  accepts a matrix with following array representation:
    ///  [ A B C D E F ]
    ///</summary>
    ///  <param name="matrixArray">Matrix data array.</param>
    {class} function init(matrixArray: TArray<Single>): DNMatrix; overload;
    ///<summary>
    ///  Constructor
    ///  accepts a matrix to create a copy
    ///</summary>
    ///  <param name="matrix">Matrix object.</param>
    {class} function init(matrix: DNMatrix): DNMatrix; overload;
    ///<summary>
    ///  Initializes transformation matrix with specified coefficients.
    ///</summary>
    ///  <param name="a">A matrix value.</param>
    ///  <param name="b">B matrix value.</param>
    ///  <param name="c">C matrix value.</param>
    ///  <param name="d">D matrix value.</param>
    ///  <param name="e">E matrix value.</param>
    ///  <param name="f">F matrix value.</param>
    ///<example><code lang="C#">
    ///  Matrix m = new Matrix(1, 0, 0, 1, 3, 3);
    ///</code></example>
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNMatrix; overload;

  { static methods } 

    ///<summary>
    ///  Creates matrix for given rotation angle.
    ///</summary>
    ///  <param name="alpha">Rotation angle in radians.</param>
    ///<returns>Transformation matrix.</returns>
    ///<example><code lang="C#">
    ///  Matrix m = Matrix.Rotation(Math.PI / 2);
    ///</code></example>
    {class} function Rotation(alpha: Double): DNMatrix; overload;
    ///<summary>
    ///  Creates matrix for given rotation.
    ///</summary>
    ///  <param name="rotation">Rotation. Valid values are: None, on90, on180, on270</param>
    ///<returns></returns>
    {class} function Rotation(rotation: DNRotation): DNMatrix; overload;
    ///<summary>
    ///  Creates matrix for given rotation angle.
    ///</summary>
    ///  <param name="alpha">Skew x angle in radians.</param>
    ///  <param name="beta">Skew y angle in radians.</param>
    ///<returns>Transformation matrix.</returns>
    ///<example><code lang="C#">
    ///  Matrix m = Matrix.Skew(Math.PI / 2, Math.PI / 2);
    ///</code></example>
    {class} function Skew(alpha: Double; beta: Double): DNMatrix;
    ///<summary>
    ///  Transaltes rotation into angle (degrees)
    ///</summary>
    ///  <param name="rotation">Rotation value.</param>
    ///<example><code lang="C#">
    ///  double angle = Matrix.GetAngle(Rotation.on90);
    ///  Matrix m = Matrix.Rotation(angle);
    ///</code></example><returns>Angle value.</returns>
    {class} function GetAngle(rotation: DNRotation): Double;

  end;

  ///<summary>
  ///  Class represents transformation matrix.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Matrix')]
  DNMatrix = interface(DDN.mscorlib.DNObject)
  ['{CE657A3B-4580-32DE-A525-664C4781DE6E}']
  { getters & setters } 

    function get_Data: TArray<Double>;
    function get_A: Double;
    procedure set_A(value: Double);
    function get_B: Double;
    procedure set_B(value: Double);
    function get_C: Double;
    procedure set_C(value: Double);
    function get_D: Double;
    procedure set_D(value: Double);
    function get_E: Double;
    procedure set_E(value: Double);
    function get_F: Double;
    procedure set_F(value: Double);
    function get_Elements: TArray<Single>;

  { methods } 

    ///<summary>
    ///  Returns text reporesentation of the matrix.
    ///</summary>
    ///<returns>String representation for the matrix</returns>
    function ToString: string;
    ///<summary>
    ///  Compares matrix agains other object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>Returns true is other object is Matrix and all matrix member are equal to correspondim members of the matrix</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Multiplies the matrix by other matrix.
    ///</summary>
    ///  <param name="other">Multiplier matrix.</param>
    ///<returns>Result of multiplication.</returns>
    ///<example><code lang="C#">
    ///  Matrix a = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 });
    ///  Matrix b = new Matrix(new double[] { 0, -1, 1, 0, 0, 0 } );
    ///  Matrix c= a.Multiply(b);
    ///</code></example>
    function Multiply(other: DNMatrix): DNMatrix;
    ///<summary>
    ///  Adds matrix to other matrix.
    ///</summary>
    ///  <param name="other">Matrix to be added.</param>
    ///<returns>Result of matrix add.</returns>
    function Add(other: DNMatrix): DNMatrix;
    ///<summary>
    ///  Transforms point using this matrix.
    ///</summary>
    ///  <param name="p">Point which will be transformed.</param>
    ///<returns>Transformation result.</returns>
    ///<example><code lang="C#">
    ///  Aspose.Pdf.DOM.Matrix m = new Aspose.Pdf.DOM.Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
    ///  Aspose.Pdf.Rectangle r = new Aspose.Pdf.Rectangle(0, 0, 100, 100);
    ///  Aspose.Pdf.Rectangle r1 = m.Transform(r);
    ///</code></example>
    function Transform(p: DNPoint): DNPoint; overload;
    ///<summary>
    ///  Transformes rectangle.
    ///  If angle is not 90 * N degrees then bounding rectangle is returned.
    ///</summary>
    ///  <param name="rect">Rectangle to be transformed.</param>
    ///<returns>Transformed rectangle.</returns>
    ///<example><code lang="C#">
    ///  Matrix m = new Matrix(new double[] { 1, 0, 0, 1, 10, 20 } );
    ///  Rectangle r = new Rectangle(0, 0, 100, 100);
    ///  Rectangle r1 = m.Transform(r1);
    ///</code></example>
    function Transform(rect: DNRectangle): DNRectangle; overload;
    ///<summary>
    ///  Calculates reverse matrix.
    ///</summary>
    ///<returns>Reverse matrix.</returns>
    ///<example><code lang="C#">
    ///  Matrix m = Matrix.Rotation(Math.PI / 2);
    ///  Matrix m1 = m.Reverse();
    ///</code></example>
    function Reverse: DNMatrix;
    ///<summary>
    ///  Hash-code for object.
    ///</summary>
    ///<returns>Hash-code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets data of Matrix as array.
    ///</summary>
    property Data: TArray<Double> read get_Data;
    ///<summary>
    ///  A member of the transformation matrix.
    ///</summary>
    property A: Double read get_A write set_A;
    ///<summary>
    ///  B member of the transformation matrix.
    ///</summary>
    property B: Double read get_B write set_B;
    ///<summary>
    ///  C member of the transformation matrix.
    ///</summary>
    property C: Double read get_C write set_C;
    ///<summary>
    ///  D member of the transformation matrix.
    ///</summary>
    property D: Double read get_D write set_D;
    ///<summary>
    ///  E member of the transformation matrix.
    ///</summary>
    property E: Double read get_E write set_E;
    ///<summary>
    ///  F member of the transformation matrix.
    ///</summary>
    property F: Double read get_F write set_F;
    ///<summary>
    ///  Elements of the matrix.
    ///</summary>
    property Elements: TArray<Single> read get_Elements;
  end;

  TDNMatrix = class(TDNGenericImport<DNMatrixClass, DNMatrix>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMatrix3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2DF940DB-21A1-52A6-AB6B-0A159141F00E}']
  { constructors } 

    ///<summary>
    ///  Constructor
    ///  creates stanrard 1 to 1 matrix:
    ///  [ A B C D E F G H I Tx Ty Tz] = [ 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0 , 0]
    ///</summary>
    ///<example><code lang="C#">
    ///  Matrix3D m = new Matrix3D();
    ///</code></example>
    {class} function init: DNMatrix3D; overload;
    ///<summary>
    ///  Constructor
    ///  accepts a matrix with following array representation:
    ///  [ A B C D E F G H I Tx Ty Tz]
    ///</summary>
    ///  <param name="matrix3DArray">Matrix data array.</param>
    ///<example><code lang="C#">
    ///  double[] c = new double[] { 1, 0, 0, 1, 10, 20, 1, 0, 0, 17, 40, 13 };
    ///  Matrix3D m = new Matrix3D(c);
    ///</code></example>
    {class} function init(matrix3DArray: TArray<Double>): DNMatrix3D; overload;
    ///<summary>
    ///  Constructor
    ///  accepts a matrix to create a copy
    ///</summary>
    ///  <param name="matrix">Matrix3D object.</param>
    {class} function init(matrix: DNMatrix3D): DNMatrix3D; overload;
    ///<summary>
    ///  Initializes transformation matrix with specified coefficients.
    ///</summary>
    ///  <param name="a">A matrix value.</param>
    ///  <param name="b">B matrix value.</param>
    ///  <param name="c">C matrix value.</param>
    ///  <param name="d">D matrix value.</param>
    ///  <param name="e">E matrix value.</param>
    ///  <param name="f">F matrix value.</param>
    ///<example><code lang="C#">
    ///  Matrix m = new Matrix(1, 0, 0, 1, 3, 3);
    ///</code></example>
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double; g: Double; h: Double; i: Double; tx: Double; ty: Double; tz: Double): DNMatrix3D; overload;

  { static methods } 

    ///<summary>
    ///  Transaltes rotation into angle (degrees)
    ///</summary>
    ///  <param name="rotation">Rotation value.</param>
    ///<example><code lang="C#">
    ///  double angle = Matrix.GetAngle(Rotation.on90);
    ///  Matrix m = Matrix.Rotation(angle);
    ///</code></example><returns>Angle value.</returns>
    {class} function GetAngle(rotation: DNRotation): Double;

  end;

  ///<summary>
  ///  Class represents transformation matrix.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Matrix3D')]
  DNMatrix3D = interface(DDN.mscorlib.DNObject)
  ['{E3982926-BA15-3D6E-927F-0163B62B5DF2}']
  { getters & setters } 

    function get_A: Double;
    procedure set_A(value: Double);
    function get_B: Double;
    procedure set_B(value: Double);
    function get_C: Double;
    procedure set_C(value: Double);
    function get_D: Double;
    procedure set_D(value: Double);
    function get_E: Double;
    procedure set_E(value: Double);
    function get_F: Double;
    procedure set_F(value: Double);
    function get_G: Double;
    procedure set_G(value: Double);
    function get_H: Double;
    procedure set_H(value: Double);
    function get_I: Double;
    procedure set_I(value: Double);
    function get_Tx: Double;
    procedure set_Tx(value: Double);
    function get_Ty: Double;
    procedure set_Ty(value: Double);
    function get_Tz: Double;
    procedure set_Tz(value: Double);

  { methods } 

    ///<summary>
    ///  Returns text reporesentation of the matrix.
    ///</summary>
    ///<returns>String representation for the matrix</returns>
    function ToString: string;
    ///<summary>
    ///  Compares matrix agains other object.
    ///</summary>
    ///  <param name="obj">Object to compare.</param>
    ///<returns>Returns true is other object is Matrix3D and all matrix members are equal to corresponding members of the matrix</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Adds matrix to other matrix.
    ///</summary>
    ///  <param name="other">Matrix to be added.</param>
    ///<returns>Result of matrix add.</returns>
    function Add(other: DNMatrix3D): DNMatrix3D;
    ///<summary>
    ///  Hash-code for object.
    ///</summary>
    ///<returns>Hash-code.</returns>
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  A member of the transformation matrix.
    ///</summary>
    property A: Double read get_A write set_A;
    ///<summary>
    ///  B member of the transformation matrix.
    ///</summary>
    property B: Double read get_B write set_B;
    ///<summary>
    ///  C member of the transformation matrix.
    ///</summary>
    property C: Double read get_C write set_C;
    ///<summary>
    ///  D member of the transformation matrix.
    ///</summary>
    property D: Double read get_D write set_D;
    ///<summary>
    ///  E member of the transformation matrix.
    ///</summary>
    property E: Double read get_E write set_E;
    ///<summary>
    ///  F member of the transformation matrix.
    ///</summary>
    property F: Double read get_F write set_F;
    ///<summary>
    ///  G member of the transformation matrix.
    ///</summary>
    property G: Double read get_G write set_G;
    ///<summary>
    ///  H member of the transformation matrix.
    ///</summary>
    property H: Double read get_H write set_H;
    ///<summary>
    ///  I member of the transformation matrix.
    ///</summary>
    property I: Double read get_I write set_I;
    ///<summary>
    ///  Tx member of the transformation matrix.
    ///</summary>
    property Tx: Double read get_Tx write set_Tx;
    ///<summary>
    ///  Ty member of the transformation matrix.
    ///</summary>
    property Ty: Double read get_Ty write set_Ty;
    ///<summary>
    ///  Tz member of the transformation matrix.
    ///</summary>
    property Tz: Double read get_Tz write set_Tz;
  end;

  TDNMatrix3D = class(TDNGenericImport<DNMatrix3DClass, DNMatrix3D>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F6006E1-09BC-588B-B465-C564E209F198}']
  end;

  ///<summary>
  ///  Provides access to XMP metadata stream.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Metadata')]
  DNMetadata = interface(DDN.mscorlib.DNObject)
  ['{D5F49FF3-A174-3ACD-8CD0-16BB81438228}']
  { getters & setters } 

    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DNXmpValue>;
    function get_ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema>;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    ///<summary>
    ///  Registers namespace URI.
    ///</summary>
    ///  <param name="prefix">The value of prefix.</param>
    ///  <param name="namespaceUri">The value of namespace URI.</param>
    procedure RegisterNamespaceUri(prefix: string; namespaceUri: string); overload;
    ///<summary>
    ///  Registers namespace URI.
    ///</summary>
    ///  <param name="prefix">The value of prefix.</param>
    ///  <param name="namespaceUri">The value of namespace URI.</param>
    ///  <param name="schemaDescription">The value of schema description.</param>
    procedure RegisterNamespaceUri(prefix: string; namespaceUri: string; schemaDescription: string); overload;
    ///<summary>
    ///  Returns  namespace URI by prefix.
    ///</summary>
    ///  <param name="prefix">The value of prefix.</param>
    ///<returns>The value of namespace URI.</returns>
    function GetNamespaceUriByPrefix(prefix: string): string;
    ///<summary>
    ///  Returns prefix by namespace URI.
    ///</summary>
    ///  <param name="namespaceUri">Namespace URI.</param>
    ///<returns>The value of prefix.</returns>
    function GetPrefixByNamespaceUri(namespaceUri: string): string;
    ///<summary>
    ///  Adds value to metadata.
    ///</summary>
    ///  <param name="key">The key to add.</param>
    ///  <param name="value">Value which will be added.</param>
    procedure Add(key: string; value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  Adds pdf extension to metadata.
    ///</summary>
    ///  <param name="prefix">The prefix of extension.</param>
    ///  <param name="value">Value which will be added.</param>
    procedure Add(prefix: string; value: DNXmpPdfAExtensionObject); overload;
    ///<summary>
    ///  Checks does key is contained in metadata.
    ///</summary>
    ///  <param name="key">The key of entry to find.</param>
    ///<returns>True if key is contained in the metadata.</returns>
    function &Contains(key: string): Boolean;
    ///<summary>
    ///  Determines does this dictionary contasins specified key.
    ///</summary>
    ///  <param name="key">Key to search in the dictionary.</param>
    ///<returns>true if key is found.</returns>
    function ContainsKey(key: string): Boolean;
    function TryGetValue(key: string; out value: DNXmpValue): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Checks if colleciton has fixed size.
    ///</summary>
    property IsFixedSize: Boolean read get_IsFixedSize;
    ///<summary>
    ///  Checks if collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Gets collection of metadata keys.
    ///</summary>
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    ///<summary>
    ///  Gets values in the metadata.
    ///</summary>
    property Values: DDN.mscorlib.DNICollection<DNXmpValue> read get_Values;
    ///<summary>
    ///  Gets the dictionary of extension fields.
    ///</summary>
    property ExtensionFields: DDN.mscorlib.DNIDictionary<string, DNXmpPdfAExtensionSchema> read get_ExtensionFields;
    ///<summary>
    ///  Gets count of elements in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Checks if collection is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets collection synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNMetadata = class(TDNGenericImport<DNMetadataClass, DNMetadata>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMeteredClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D129928-6F02-5EA5-952E-716C3C1F36D2}']
  { constructors } 

    {class} function init: DNMetered;

  { static methods } 

    ///<summary>
    ///  Gets consumption file size
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionQuantity: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  Gets consumption credit
    ///</summary>
    ///<returns>consumption quantity</returns>
    {class} function GetConsumptionCredit: DDN.mscorlib.DNDecimal;

  end;

  ///<summary>
  ///  Provides methods to set metered key.
  ///</summary>
  ///<example>
  ///  In this example, an attempt will be made to set metered public and private key
  ///<code>
  ///  [C#]
  ///  Metered matered = new Metered();
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey");
  ///  [Visual Basic]
  ///  Dim matered As Metered = New Metered
  ///  matered.SetMeteredKey("PublicKey", "PrivateKey")
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Metered')]
  DNMetered = interface(DDN.mscorlib.DNObject)
  ['{0B41C7A9-485F-3BCF-89A5-34903EB6CF54}']
  { methods } 

    ///<summary>
    ///  Sets metered public and private key
    ///</summary>
    ///  <param name="publicKey">public key</param>
    ///  <param name="privateKey">private key</param>
    procedure SetMeteredKey(publicKey: string; privateKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMetered = class(TDNGenericImport<DNMeteredClass, DNMetered>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNNamedDestinationCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{56604223-E71D-55E8-AD90-FA539120499D}']
  end;

  ///<summary>
  ///  Class represents the collection of all destinations (a name tree mapping name strings to destinations (see 12.3.2.3, "Named Destinations") and (see 7.7.4, "Name Dictionary")) in the pdf document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.NamedDestinationCollection')]
  DNNamedDestinationCollection = interface(DDN.mscorlib.DNObject)
  ['{84150FD1-E693-338C-9A37-05E3D29BCACE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Names: TArray<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Count of named destinations.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  List of names of the destinations.
    ///</summary>
    property Names: TArray<string> read get_Names;
  end;

  TDNNamedDestinationCollection = class(TDNGenericImport<DNNamedDestinationCollectionClass, DNNamedDestinationCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNNoteClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A2555217-7475-5DF9-B019-12145E15C791}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Note" />
    ///  class.
    ///</summary>
    {class} function init: DNNote; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Note" />
    ///  class.
    ///</summary>
    ///  <param name="content">The note content.</param>
    {class} function init(content: string): DNNote; overload;

  end;

  ///<summary>
  ///  This class represents generator paragraph note.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Note')]
  DNNote = interface(DDN.mscorlib.DNObject)
  ['{50E0ED66-E825-3EC2-BB19-B1FBC50239BE}']
  { getters & setters } 

    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a collection that indicates all paragraphs in the FootNote.
    ///</summary>
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets a note text.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets a note text state.
    ///</summary>
    property TextState: DNTextState read get_TextState write set_TextState;
  end;

  TDNNote = class(TDNGenericImport<DNNoteClass, DNNote>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOcspSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3D321126-B469-5764-A453-95B6B4258120}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.OcspSettings" />
    ///  class.
    ///</summary>
    ///  <param name="serverUrl">The ocsp server url.</param>
    {class} function init(serverUrl: string): DNOcspSettings;

  end;

  ///<summary>
  ///  Represents the ocsp settings using during signing process.
  ///</summary>
  [DNTypeName('Aspose.Pdf.OcspSettings')]
  DNOcspSettings = interface(DDN.mscorlib.DNObject)
  ['{67E013D5-EA33-30F6-BA8C-6AACFAA1D3CB}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the ocsp server url.
    ///</summary>
    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
  end;

  TDNOcspSettings = class(TDNGenericImport<DNOcspSettingsClass, DNOcspSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7BE9D8D7-DDA0-5486-BA8A-F7BA7B125A03}']
  { static methods } 

    ///<summary>
    ///  Determines if the operator is operator which responsible for text output (Tj, TJ, etc)
    ///</summary>
    ///  <param name="op">Operator object</param>
    ///<returns>True if this is text output operator</returns>
    {class} function IsTextShowOperator(op: DNOperator): Boolean;

  end;

  ///<summary>
  ///  Abstract class representing operator.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operator')]
  DNOperator = interface(DDN.mscorlib.DNObject)
  ['{107D2BE9-4543-3160-8F1E-6B2747920DCA}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor IOperatorSelector which provides operators processing.
    ///</summary>
    ///  <param name="visitor">Visitor object</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNOperator = class(TDNGenericImport<DNOperatorClass, DNOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBDCClass = interface(DNOperatorClass)
  ['{AC008873-F58C-5A97-A390-D032A0B2FF06}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init(tag: string): DNBDC;

  end;

  ///<summary>
  ///  class representing BDC operator (Begin marked-content sequence)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BDC')]
  DNBDC = interface(DNOperator)
  ['{8FD90A8A-624A-3B7E-A09A-745666F4391C}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets marked content tag
    ///</summary>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBDC = class(TDNGenericImport<DNBDCClass, DNBDC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBIClass = interface(DNOperatorClass)
  ['{EBAFA8A1-A7D9-5E59-8824-5A099124596A}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNBI;

  end;

  ///<summary>
  ///  Class representing BI operator (Begin inline image obect).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BI')]
  DNBI = interface(DNOperator)
  ['{CD8034DA-B8A7-35F3-A545-951F4ED1EAAD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBI = class(TDNGenericImport<DNBIClass, DNBI>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBMCClass = interface(DNOperatorClass)
  ['{D5D6CA3D-1770-5927-8831-5FAF55261785}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="tag">Marked content tag.</param>
    {class} function init(tag: string): DNBMC;

  end;

  ///<summary>
  ///  Class representing BMC operator (Begin marked-content sequence).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BMC')]
  DNBMC = interface(DNOperator)
  ['{AD490576-B3CF-390A-81F2-CA02859BC887}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets marked content tag
    ///</summary>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBMC = class(TDNGenericImport<DNBMCClass, DNBMC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBXClass = interface(DNOperatorClass)
  ['{A6E38F20-8AE5-5AD0-982D-D95D5BAF7409}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNBX;

  end;

  ///<summary>
  ///  Class representing BX operator (begin compatibility section).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BX')]
  DNBX = interface(DNOperator)
  ['{B7B9E1A4-E158-3430-912B-898C105B0162}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBX = class(TDNGenericImport<DNBXClass, DNBX>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClipClass = interface(DNOperatorClass)
  ['{04112210-E96C-55E0-B2C4-7EB6E8F2586B}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNClip;

  end;

  ///<summary>
  ///  Class representing W operator (set clipping path using non-zero winding rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.Clip')]
  DNClip = interface(DNOperator)
  ['{E867D702-957D-3580-8CBE-16998B34737D}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operators.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClip = class(TDNGenericImport<DNClipClass, DNClip>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathClass = interface(DNOperatorClass)
  ['{6D529708-96C7-5709-A398-ED44780C5791}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNClosePath;

  end;

  ///<summary>
  ///  Class representing h operator (close path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ClosePath')]
  DNClosePath = interface(DNOperator)
  ['{14E4E54D-501A-3426-B88A-0670EB471D90}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePath = class(TDNGenericImport<DNClosePathClass, DNClosePath>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathEOFillStrokeClass = interface(DNOperatorClass)
  ['{ABA32130-FE56-52E6-BE5B-CDDBCBFE1FCC}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNClosePathEOFillStroke;

  end;

  ///<summary>
  ///  Class representing b* operator (close, fill and stroke path using even-odd rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ClosePathEOFillStroke')]
  DNClosePathEOFillStroke = interface(DNOperator)
  ['{DEB58BB7-90CC-3CDC-B8F3-9660879E5B53}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathEOFillStroke = class(TDNGenericImport<DNClosePathEOFillStrokeClass, DNClosePathEOFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathFillStrokeClass = interface(DNOperatorClass)
  ['{E452A2B9-E24E-53FF-8B99-AFD69E06E110}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNClosePathFillStroke;

  end;

  ///<summary>
  ///  Class representing b operator (close, fill and stroke path with nonzer winding rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ClosePathFillStroke')]
  DNClosePathFillStroke = interface(DNOperator)
  ['{F5861C97-5115-3BEE-A99E-CA0C2922E6CD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns string representation of operator.
    ///</summary>
    ///<returns>String representation</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathFillStroke = class(TDNGenericImport<DNClosePathFillStrokeClass, DNClosePathFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNClosePathStrokeClass = interface(DNOperatorClass)
  ['{FEAC071E-1591-5D4E-A6D0-83AD928A5F79}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNClosePathStroke;

  end;

  ///<summary>
  ///  Class representing s operator (Close and stroke path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ClosePathStroke')]
  DNClosePathStroke = interface(DNOperator)
  ['{9D7C05F3-8C78-35BA-968C-1B31E32C605B}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNClosePathStroke = class(TDNGenericImport<DNClosePathStrokeClass, DNClosePathStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNConcatenateMatrixClass = interface(DNOperatorClass)
  ['{769ADD95-E823-57DD-9852-198923A17AAB}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="a">A coefficient</param>
    ///  <param name="b">B coefficient</param>
    ///  <param name="c">C coefficient</param>
    ///  <param name="d">D coefficient</param>
    ///  <param name="e">E coefficient</param>
    ///  <param name="f">F coefficient</param>
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNConcatenateMatrix; overload;
    ///<summary>
    ///  Initializes operator by matrix.
    ///</summary>
    ///  <param name="m">Transfomation matrix.</param>
    {class} function init(m: DNMatrix): DNConcatenateMatrix; overload;

  end;

  ///<summary>
  ///  Class representing cm operator (concatenate matrix to current transformation matrix).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ConcatenateMatrix')]
  DNConcatenateMatrix = interface(DNOperator)
  ['{E67365DB-B095-363C-B2BF-73FA66A499A8}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of representation</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Matrix argument of the operator.
    ///</summary>
    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNConcatenateMatrix = class(TDNGenericImport<DNConcatenateMatrixClass, DNConcatenateMatrix>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveToClass = interface(DNOperatorClass)
  ['{6AE08D5D-C1CD-5E3E-B140-F195DDFCC7D5}']
  { constructors } 

    ///<summary>
    ///  Initializes curve operator.
    ///</summary>
    ///  <param name="x1">Abscissa of first point.</param>
    ///  <param name="y1">Ordinate of first point.</param>
    ///  <param name="x2">Abscissa of second point.</param>
    ///  <param name="y2">Ordinate of second point.</param>
    ///  <param name="x3">Abscissa of third point.</param>
    ///  <param name="y3">Ordinate of third point.</param>
    {class} function init(x1: Double; y1: Double; x2: Double; y2: Double; x3: Double; y3: Double): DNCurveTo;

  end;

  ///<summary>
  ///  Class representing c operator (append curve to path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.CurveTo')]
  DNCurveTo = interface(DNOperator)
  ['{B7E971A9-7E27-3492-8745-402C8C9586D0}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Points of the curve.
    ///</summary>
    property Points: TArray<DNPoint> read get_Points;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo = class(TDNGenericImport<DNCurveToClass, DNCurveTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveTo1Class = interface(DNOperatorClass)
  ['{789750E7-88FD-5669-88E7-0E4C19232F52}']
  { constructors } 

    ///<summary>
    ///  Initializes curve operator.
    ///</summary>
    ///  <param name="x2">Abscissa of second point.</param>
    ///  <param name="y2">Ordinate of second point.</param>
    ///  <param name="x3">Abscissa of third point.</param>
    ///  <param name="y3">Ordinate of third point.</param>
    {class} function init(x2: Double; y2: Double; x3: Double; y3: Double): DNCurveTo1;

  end;

  ///<summary>
  ///  Class representing v operator (append curve to path, initial point replicated).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.CurveTo1')]
  DNCurveTo1 = interface(DNOperator)
  ['{120C5845-A140-3066-BB8D-B5376E577659}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts operator selector.
    ///</summary>
    ///  <param name="visitor">Visitor object</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Points of the curve.
    ///</summary>
    property Points: TArray<DNPoint> read get_Points;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo1 = class(TDNGenericImport<DNCurveTo1Class, DNCurveTo1>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNCurveTo2Class = interface(DNOperatorClass)
  ['{E43D927B-D1A1-50FA-BE88-950795BFFBC7}']
  { constructors } 

    ///<summary>
    ///  Initializes curve operator.
    ///</summary>
    ///  <param name="x1">Abscissa of second point.</param>
    ///  <param name="y1">Ordinate of second point.</param>
    ///  <param name="x3">Abscissa of third point.</param>
    ///  <param name="y3">Ordinate of third point.</param>
    {class} function init(x1: Double; y1: Double; x3: Double; y3: Double): DNCurveTo2;

  end;

  ///<summary>
  ///  Class representing y operator (append curve to path, final point replicated).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.CurveTo2')]
  DNCurveTo2 = interface(DNOperator)
  ['{89B74E36-523E-356C-A9A8-420F9957643F}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Points of the curve.
    ///</summary>
    property Points: TArray<DNPoint> read get_Points;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNCurveTo2 = class(TDNGenericImport<DNCurveTo2Class, DNCurveTo2>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNDoClass = interface(DNOperatorClass)
  ['{C2DF9A1E-E39A-5E3A-AABB-440C7C283FD2}']
  { constructors } 

    ///<summary>
    ///  Constructs new Do operator.
    ///</summary>
    ///  <param name="name">Name of invoked XObject.</param>
    {class} function init(name: string): DNDo; overload;
    ///<summary>
    ///  Constructs new Do operator.
    ///  Used for retrieving all Do operators, i.e. without checking their argument names.
    ///</summary>
    {class} function init: DNDo; overload;

  end;

  ///<summary>
  ///  Class representing Do operator (Invoke XObject).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.Do')]
  DNDo = interface(DNOperator)
  ['{1F83B487-B3B7-3557-8AA9-F89C35359D85}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Name of XObject argument of the operator.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNDo = class(TDNGenericImport<DNDoClass, DNDo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNDPClass = interface(DNOperatorClass)
  ['{2BD6C550-EB3E-5EAD-A4DB-193A52C56447}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init(tag: string): DNDP;

  end;

  ///<summary>
  ///  Class represeting DP operator (designamte marked content point).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.DP')]
  DNDP = interface(DNOperator)
  ['{8B5CBCEA-AA15-3A32-9C14-0F55232E0D3C}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets marked content tag
    ///</summary>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNDP = class(TDNGenericImport<DNDPClass, DNDP>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEIClass = interface(DNOperatorClass)
  ['{5DAB9EFC-35AB-5D90-96CC-8F815AD30209}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNEI;

  end;

  ///<summary>
  ///  Class representing EI operator (End inline image object).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EI')]
  DNEI = interface(DNOperator)
  ['{36CF7CAC-646D-3D6A-B202-5C44BD25C077}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEI = class(TDNGenericImport<DNEIClass, DNEI>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEMCClass = interface(DNOperatorClass)
  ['{FAEAB735-5CF1-58FC-A4C4-CB6C5151AA15}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNEMC;

  end;

  ///<summary>
  ///  Clsss representing EMC oeprator (End of marked-content sequence).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EMC')]
  DNEMC = interface(DNOperator)
  ['{95FAA3D7-BA91-3880-885E-C9C7A94E75DE}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEMC = class(TDNGenericImport<DNEMCClass, DNEMC>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEndPathClass = interface(DNOperatorClass)
  ['{6DEBF336-06B5-55AF-AC05-480D5C08FEB7}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNEndPath;

  end;

  ///<summary>
  ///  Class representing n operator (end path without filling or stroking).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EndPath')]
  DNEndPath = interface(DNOperator)
  ['{AC9B54A6-D578-3577-8AB1-468DC076C706}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEndPath = class(TDNGenericImport<DNEndPathClass, DNEndPath>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOClipClass = interface(DNOperatorClass)
  ['{E56D17AD-A47D-53D4-A2B3-CB067451C85C}']
  end;

  ///<summary>
  ///  Class representing W* operator (set clipping path using even-odd rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EOClip')]
  DNEOClip = interface(DNOperator)
  ['{CF0ABD69-0363-3D8A-AD56-167E6ACA73B8}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOClip = class(TDNGenericImport<DNEOClipClass, DNEOClip>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOFillClass = interface(DNOperatorClass)
  ['{884E3615-3812-5541-BE87-1854AEA7DD20}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNEOFill;

  end;

  ///<summary>
  ///  Class representing f* operator (fill path using even-odd rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EOFill')]
  DNEOFill = interface(DNOperator)
  ['{0760EC2B-DD82-31B9-A046-FEF0A4A1B894}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOFill = class(TDNGenericImport<DNEOFillClass, DNEOFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEOFillStrokeClass = interface(DNOperatorClass)
  ['{128FE716-261D-5208-8F43-2681B5CE6860}']
  end;

  ///<summary>
  ///  Class representing B* operator (fill and stroke path usign even-odd rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EOFillStroke')]
  DNEOFillStroke = interface(DNOperator)
  ['{1413B4D8-6E02-3461-A35B-648000A1E8CD}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEOFillStroke = class(TDNGenericImport<DNEOFillStrokeClass, DNEOFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNEXClass = interface(DNOperatorClass)
  ['{C6ED8123-88B7-5743-AAED-C26BE8DFCC37}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNEX;

  end;

  ///<summary>
  ///  Class representing EX operator (End of compatibility section).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.EX')]
  DNEX = interface(DNOperator)
  ['{58561D97-BAD6-323D-B34E-8CC59FB8B80E}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNEX = class(TDNGenericImport<DNEXClass, DNEX>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNFillClass = interface(DNOperatorClass)
  ['{3173BD0C-FFF4-5D28-96F7-414675E9D79E}']
  { constructors } 

    ///<summary>
    ///  Initilizes new f operator.
    ///</summary>
    {class} function init: DNFill;

  end;

  ///<summary>
  ///  Class representing f operator (fill path with nonzero winding number rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.Fill')]
  DNFill = interface(DNOperator)
  ['{8CE35D4A-CD1A-34E8-9E5E-93AA2A97D53A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNFill = class(TDNGenericImport<DNFillClass, DNFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNFillStrokeClass = interface(DNOperatorClass)
  ['{1EB44330-60A3-535C-B3EC-C03AE6A5FE25}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNFillStroke;

  end;

  ///<summary>
  ///  Class representing B operator (fill and stroke path using nonzero winding rule)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.FillStroke')]
  DNFillStroke = interface(DNOperator)
  ['{84059945-8A78-31FC-A08E-01487F69F1A2}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNFillStroke = class(TDNGenericImport<DNFillStrokeClass, DNFillStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGRestoreClass = interface(DNOperatorClass)
  ['{02B4D358-7AEC-5D44-94C7-23E2D509733C}']
  { constructors } 

    ///<summary>
    ///  Initializes Q operator.
    ///</summary>
    {class} function init: DNGRestore;

  end;

  ///<summary>
  ///  Class representing Q operator (restore graphics state).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.GRestore')]
  DNGRestore = interface(DNOperator)
  ['{6B94F9B9-D78F-3AB5-94F0-FBE98A49BCB6}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGRestore = class(TDNGenericImport<DNGRestoreClass, DNGRestore>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGSClass = interface(DNOperatorClass)
  ['{B7804DF5-F9C8-57B8-BE9F-7E0D75967370}']
  { constructors } 

    ///<summary>
    ///  Initializes gs operator.
    ///</summary>
    ///  <param name="name">Name of graphic state.</param>
    {class} function init(name: string): DNGS;

  end;

  ///<summary>
  ///  Class representing gs operator (set parameters from graphic state parameter dictionary).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.GS')]
  DNGS = interface(DNOperator)
  ['{CCF7055D-EAA1-322F-A2D0-B9C3D3E6810B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns string represnetation of operator.
    ///</summary>
    ///<returns>String representation of operator.</returns>
    function ToString: string;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets name of graphic state resource.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGS = class(TDNGenericImport<DNGSClass, DNGS>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGSaveClass = interface(DNOperatorClass)
  ['{670D3B89-365B-5577-8CFA-20878DBAA5BE}']
  { constructors } 

    ///<summary>
    ///  Initializes q operator.
    ///</summary>
    {class} function init: DNGSave;

  end;

  ///<summary>
  ///  Class representing q operator (save graphics state).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.GSave')]
  DNGSave = interface(DNOperator)
  ['{E6DAEF9F-F7A5-36A2-9391-16261D1F2A12}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns text of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNGSave = class(TDNGenericImport<DNGSaveClass, DNGSave>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNOperators_IDClass = interface(DNOperatorClass)
  ['{B1875468-35A7-59CD-9AE9-F2250239B272}']
  end;

  ///<summary>
  ///  Class representing ID operator (Begin inline image data).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ID')]
  DNOperators_ID = interface(DNOperator)
  ['{9CCFC46F-BD34-30BA-AEB5-B346B37B5DCC}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNOperators_ID = class(TDNGenericImport<DNOperators_IDClass, DNOperators_ID>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNLineToClass = interface(DNOperatorClass)
  ['{9D57D9E0-00C9-53BD-A005-CA1D4154719E}']
  { constructors } 

    ///<summary>
    ///  Initializes line operator.
    ///</summary>
    ///  <param name="x">X coordinate.</param>
    ///  <param name="y">Y coordinate.</param>
    {class} function init(x: Double; y: Double): DNLineTo;

  end;

  ///<summary>
  ///  Class representing l operator (add line to the path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.LineTo')]
  DNLineTo = interface(DNOperator)
  ['{7CE22EB5-8BB9-3F91-B684-31418238AE17}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  X coordinate of line point.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate of line point.
    ///</summary>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNLineTo = class(TDNGenericImport<DNLineToClass, DNLineTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToClass = interface(DNOperatorClass)
  ['{BA867791-FD8A-537B-9F22-7623106B6A47}']
  { constructors } 

    ///<summary>
    ///  Inintalizes new <see cref="!:Operators.m" />
    ///  (move to) operator.
    ///</summary>
    ///  <param name="x">The x-coordinate.</param>
    ///  <param name="y">The y-coordinate.</param>
    {class} function init(x: Double; y: Double): DNMoveTo;

  end;

  ///<summary>
  ///  Class representing m operator (move to and begin new subpath).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MoveTo')]
  DNMoveTo = interface(DNOperator)
  ['{DF90B3CF-DC68-3470-A03C-C665A435F410}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  X coordinate
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate
    ///</summary>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTo = class(TDNGenericImport<DNMoveToClass, DNMoveTo>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMPClass = interface(DNOperatorClass)
  ['{FC13B661-7CD8-5D5C-8AA1-213504A3218B}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="tag">Marked content tag.</param>
    {class} function init(tag: string): DNMP;

  end;

  ///<summary>
  ///  Class representing MP operator (define marked-content point).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MP')]
  DNMP = interface(DNOperator)
  ['{E75AEDE3-24E2-3719-90D2-4305B788C557}']
  { getters & setters } 

    function get_Tag: string;
    procedure set_Tag(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets marked content tag
    ///</summary>
    property Tag: string read get_Tag write set_Tag;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMP = class(TDNGenericImport<DNMPClass, DNMP>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNObsoleteFillClass = interface(DNOperatorClass)
  ['{19A2279A-947F-50C7-B89C-5BC194E2400D}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNObsoleteFill;

  end;

  ///<summary>
  ///  Class representing F oeprator (fill path using nonzero winding rule).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ObsoleteFill')]
  DNObsoleteFill = interface(DNOperator)
  ['{B88C4B8D-90CF-30AD-B918-A8F1D2B09E3A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNObsoleteFill = class(TDNGenericImport<DNObsoleteFillClass, DNObsoleteFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNReClass = interface(DNOperatorClass)
  ['{ABB84FD5-A0DA-599C-82B0-BF941731F395}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNRe; overload;
    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="x">The x-coordinate of the bottom-left corner of the rectangle.</param>
    ///  <param name="y">The y-coordinate of the bottom-left corner of the rectangle.</param>
    ///  <param name="width">The width of the rectangle.</param>
    ///  <param name="height">The height of the rectangle.</param>
    {class} function init(x: Double; y: Double; width: Double; height: Double): DNRe; overload;

  end;

  ///<summary>
  ///  Class representing re operator (add rectangle to the path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.Re')]
  DNRe = interface(DNOperator)
  ['{71820200-CF36-3529-9A67-C2B1471039BB}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  X coordinate of most left side of rectangle.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y corrdinate of bottom side of rectangle.
    ///</summary>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  Width of the rectangle.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Height of the rectangle.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNRe = class(TDNGenericImport<DNReClass, DNRe>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharWidthClass = interface(DNOperatorClass)
  ['{02E3EF4E-1913-5491-B4B9-28477E9428AB}']
  end;

  ///<summary>
  ///  Class representing d0 operator (set glyph width).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetCharWidth')]
  DNSetCharWidth = interface(DNOperator)
  ['{AE92207E-4DD1-3507-8C9C-B5F14040A01A}']
  { getters & setters } 

    function get_Wx: Double;
    function get_Wy: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of representation</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Horizontal displacement of glyph coordinate.
    ///</summary>
    property Wx: Double read get_Wx;
    ///<summary>
    ///  Vertical displacement of glyph coordinate.
    ///</summary>
    property Wy: Double read get_Wy;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharWidth = class(TDNGenericImport<DNSetCharWidthClass, DNSetCharWidth>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharWidthBoundingBoxClass = interface(DNOperatorClass)
  ['{546E6E4F-F4E3-5265-8745-6A77DCA3F288}']
  end;

  ///<summary>
  ///  Class representing d1 operator (set glyph and bounding box).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetCharWidthBoundingBox')]
  DNSetCharWidthBoundingBox = interface(DNOperator)
  ['{8A13279F-C032-3534-91E0-A6923D0A4C12}']
  { getters & setters } 

    function get_Wx: Double;
    function get_Wy: Double;
    function get_Llx: Double;
    function get_Lly: Double;
    function get_Urx: Double;
    function get_Ury: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of representation</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Horizontal displacement of glyph.
    ///</summary>
    property Wx: Double read get_Wx;
    ///<summary>
    ///  Vertical displacement of glyph.
    ///</summary>
    property Wy: Double read get_Wy;
    ///<summary>
    ///  Lower-left horizontal coordinate of bounding rectangle.
    ///</summary>
    property Llx: Double read get_Llx;
    ///<summary>
    ///  Lower-left vertical coordinate of bounding rectangle.
    ///</summary>
    property Lly: Double read get_Lly;
    ///<summary>
    ///  Upper-right horizontal coordinate of bounding rectangle.
    ///</summary>
    property Urx: Double read get_Urx;
    ///<summary>
    ///  Upper-right vertical coordinate of bounding rectangle.
    ///</summary>
    property Ury: Double read get_Ury;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharWidthBoundingBox = class(TDNGenericImport<DNSetCharWidthBoundingBoxClass, DNSetCharWidthBoundingBox>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorOperatorClass = interface(DNOperatorClass)
  ['{45DAC615-27A0-5C3C-A64D-66CDB6408D30}']
  end;

  ///<summary>
  ///  Class representing set color operation.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColorOperator')]
  DNSetColorOperator = interface(DNOperator)
  ['{DB8744F2-2A58-38C0-B957-4BFEE5AAA647}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Retirns color specified by the operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor IOperatorSelector which provides operators processing.
    ///</summary>
    ///  <param name="visitor">Visitor object</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorOperator = class(TDNGenericImport<DNSetColorOperatorClass, DNSetColorOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBasicSetColorOperatorClass = interface(DNSetColorOperatorClass)
  ['{EBE62ABB-0CD3-5ED7-ACC8-A8F8E95C9B9B}']
  end;

  ///<summary>
  ///  Base class for set color operators.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BasicSetColorOperator')]
  DNBasicSetColorOperator = interface(DNSetColorOperator)
  ['{F7BB0D73-6937-3861-8905-ADA136171FC6}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Retirns color specified by the operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property R: Double read get_R;
    ///<summary>
    ///  Gets green component of color
    ///</summary>
    property G: Double read get_G;
    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property B: Double read get_B;
    ///<summary>
    ///  Gets cyan compoent of CMYK color.
    ///</summary>
    property C: Double read get_C;
    ///<summary>
    ///  Gets magenta compoent of CMYK color.
    ///</summary>
    property M: Double read get_M;
    ///<summary>
    ///  Gets yellow compoent of CMYK color.
    ///</summary>
    property Y: Double read get_Y;
    ///<summary>
    ///  Gets black compoent of CMYK color.
    ///</summary>
    property K: Double read get_K;
    ///<summary>
    ///  Gets black compoent of gray color.
    ///</summary>
    property Grey: Double read get_Grey;
    ///<summary>
    ///  Gets array of color components.
    ///</summary>
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBasicSetColorOperator = class(TDNGenericImport<DNBasicSetColorOperatorClass, DNBasicSetColorOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBasicSetColorAndPatternOperatorClass = interface(DNBasicSetColorOperatorClass)
  ['{07F1B464-EA32-50DE-8747-440B187A3F10}']
  end;

  ///<summary>
  ///  Base operator for all Set Color operators.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BasicSetColorAndPatternOperator')]
  DNBasicSetColorAndPatternOperator = interface(DNBasicSetColorOperator)
  ['{B4F08C6E-3C4C-3364-905B-5F5833718C6B}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    function getColor: DDN.Aspose.Common.DNColor;
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets Pattern Name.
    ///</summary>
    property PatternName: string read get_PatternName;
    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property R: Double read get_R;
    ///<summary>
    ///  Gets green component of color
    ///</summary>
    property G: Double read get_G;
    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property B: Double read get_B;
    ///<summary>
    ///  Gets cyan compoent of CMYK color.
    ///</summary>
    property C: Double read get_C;
    ///<summary>
    ///  Gets magenta compoent of CMYK color.
    ///</summary>
    property M: Double read get_M;
    ///<summary>
    ///  Gets yellow compoent of CMYK color.
    ///</summary>
    property Y: Double read get_Y;
    ///<summary>
    ///  Gets black compoent of CMYK color.
    ///</summary>
    property K: Double read get_K;
    ///<summary>
    ///  Gets black compoent of gray color.
    ///</summary>
    property Grey: Double read get_Grey;
    ///<summary>
    ///  Gets array of color components.
    ///</summary>
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBasicSetColorAndPatternOperator = class(TDNGenericImport<DNBasicSetColorAndPatternOperatorClass, DNBasicSetColorAndPatternOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetAdvancedColorClass = interface(DNBasicSetColorAndPatternOperatorClass)
  ['{1512AA51-D156-5ACA-AF65-DF2215D4447E}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNSetAdvancedColor; overload;
    ///<summary>
    ///  Constructor for scn operartor.
    ///</summary>
    ///  <param name="g">Color value.</param>
    ///  <param name="patternName">Pattern name.</param>
    {class} function init(g: Double; patternName: string): DNSetAdvancedColor; overload;
    ///<summary>
    ///  Constructor for scn operartor
    ///</summary>
    ///  <param name="g">Color value.</param>
    {class} function init(g: Double): DNSetAdvancedColor; overload;
    ///<summary>
    ///  Constructor for scn operator.
    ///</summary>
    ///  <param name="r">Red component of the color.</param>
    ///  <param name="g">Green component of the color.</param>
    ///  <param name="b">Blue component of the color.</param>
    ///  <param name="patterName"></param>
    {class} function init(r: Double; g: Double; b: Double; patterName: string): DNSetAdvancedColor; overload;
    ///<summary>
    ///  Constructor for scn operator.
    ///</summary>
    ///  <param name="c">Cyan component of the color.</param>
    ///  <param name="m">Magenta component of the color.</param>
    ///  <param name="y">Yellow component of the color.</param>
    ///  <param name="k">Black component of the color.</param>
    ///  <param name="patternName"></param>
    {class} function init(c: Double; m: Double; y: Double; k: Double; patternName: string): DNSetAdvancedColor; overload;

  end;

  ///<summary>
  ///  Class representing scn operator (set color for non-stroking operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetAdvancedColor')]
  DNSetAdvancedColor = interface(DNBasicSetColorAndPatternOperator)
  ['{01421C20-C222-38B3-9E6A-A2E4F28BBD2C}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Retuns color specified by operator.
    ///</summary>
    ///<returns>Color set by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets Pattern Name.
    ///</summary>
    property PatternName: string read get_PatternName;
    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetAdvancedColor = class(TDNGenericImport<DNSetAdvancedColorClass, DNSetAdvancedColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetAdvancedColorStrokeClass = interface(DNBasicSetColorAndPatternOperatorClass)
  ['{220A7D15-4432-5055-9B73-9E567A4483EF}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNSetAdvancedColorStroke; overload;
    ///<summary>
    ///  Constructor for scn operator
    ///</summary>
    ///  <param name="g"></param>
    {class} function init(g: Double): DNSetAdvancedColorStroke; overload;
    ///<summary>
    ///  Constructor for scn operator.
    ///</summary>
    ///  <param name="g">Gray color value.</param>
    ///  <param name="patternName"></param>
    {class} function init(g: Double; patternName: string): DNSetAdvancedColorStroke; overload;
    ///<summary>
    ///  Constructor for scn operator.
    ///</summary>
    ///  <param name="r">Red component of the color/</param>
    ///  <param name="g">Green component of the color.</param>
    ///  <param name="b">Blue component of the color.</param>
    ///  <param name="patternName"></param>
    {class} function init(r: Double; g: Double; b: Double; patternName: string): DNSetAdvancedColorStroke; overload;
    ///<summary>
    ///  Constructor for scn operator.
    ///</summary>
    ///  <param name="c">Cyan component of the color.</param>
    ///  <param name="m">Magenta component of the color.</param>
    ///  <param name="y">Yellow component of the color. </param>
    ///  <param name="k">Black component of the color</param>
    ///  <param name="patternName">Name of the pattern.</param>
    {class} function init(c: Double; m: Double; y: Double; k: Double; patternName: string): DNSetAdvancedColorStroke; overload;

  end;

  ///<summary>
  ///  Class representing SCN operator (set color for stroking operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetAdvancedColorStroke')]
  DNSetAdvancedColorStroke = interface(DNBasicSetColorAndPatternOperator)
  ['{7D897B68-0748-34BD-BD77-3872D61B387B}']
  { getters & setters } 

    function get_PatternName: string;
    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specifid by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets Pattern Name.
    ///</summary>
    property PatternName: string read get_PatternName;
    property R: Double read get_R;
    property G: Double read get_G;
    property B: Double read get_B;
    property C: Double read get_C;
    property M: Double read get_M;
    property Y: Double read get_Y;
    property K: Double read get_K;
    property Grey: Double read get_Grey;
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetAdvancedColorStroke = class(TDNGenericImport<DNSetAdvancedColorStrokeClass, DNSetAdvancedColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorClass = interface(DNBasicSetColorOperatorClass)
  ['{8FE4C9E1-7941-5061-B3AF-C6E2181A98E4}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNSetColor; overload;
    ///<summary>
    ///  Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces.
    ///</summary>
    ///  <param name="g">Color value.</param>
    {class} function init(g: Double): DNSetColor; overload;
    ///<summary>
    ///  Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces
    ///</summary>
    ///  <param name="r">Red component.</param>
    ///  <param name="g">Green component.</param>
    ///  <param name="b">Blue component.</param>
    {class} function init(r: Double; g: Double; b: Double): DNSetColor; overload;
    ///<summary>
    ///  Set color for non-stroking operator for CMYK colro space
    ///</summary>
    ///  <param name="c">Cyan component.</param>
    ///  <param name="m">Magenta component.</param>
    ///  <param name="y">Yellow component.</param>
    ///  <param name="k">Black component.</param>
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetColor; overload;
    ///<summary>
    ///  Constructor which allows to specify color components.
    ///</summary>
    ///  <param name="color">Array of color components.</param>
    {class} function init(color: TArray<Double>): DNSetColor; overload;

  end;

  ///<summary>
  ///  Represents class for sc operator (set color for non-stroknig operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColor')]
  DNSetColor = interface(DNBasicSetColorOperator)
  ['{1D3F5ED7-2EB7-3C8F-A9E2-8E559FE4418B}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by the operator.
    ///</summary>
    ///<returns>Operator color.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  String represenation.
    ///</summary>
    ///<returns></returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property R: Double read get_R;
    ///<summary>
    ///  Gets green component of color
    ///</summary>
    property G: Double read get_G;
    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property B: Double read get_B;
    ///<summary>
    ///  Gets cyan compoent of CMYK color.
    ///</summary>
    property C: Double read get_C;
    ///<summary>
    ///  Gets magenta compoent of CMYK color.
    ///</summary>
    property M: Double read get_M;
    ///<summary>
    ///  Gets yellow compoent of CMYK color.
    ///</summary>
    property Y: Double read get_Y;
    ///<summary>
    ///  Gets black compoent of CMYK color.
    ///</summary>
    property K: Double read get_K;
    ///<summary>
    ///  Gets black compoent of gray color.
    ///</summary>
    property Grey: Double read get_Grey;
    ///<summary>
    ///  Gets array of color components.
    ///</summary>
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColor = class(TDNGenericImport<DNSetColorClass, DNSetColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorStrokeClass = interface(DNBasicSetColorOperatorClass)
  ['{FC3AFFF5-0BF2-51ED-8F65-9ECF60966F67}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNSetColorStroke; overload;
    ///<summary>
    ///  Set color for stroking operators for DeviceGrey, CalGrey and Indexed color spaces.
    ///</summary>
    ///  <param name="g">Colro value.</param>
    {class} function init(g: Double): DNSetColorStroke; overload;
    ///<summary>
    ///  Set color for stroking operator for DeviceRGB, CalRGB, and Lab color spaces
    ///</summary>
    ///  <param name="r">Red component.</param>
    ///  <param name="g">Green component.</param>
    ///  <param name="b">Blue component.</param>
    {class} function init(r: Double; g: Double; b: Double): DNSetColorStroke; overload;
    ///<summary>
    ///  Constructor which allows to set color components.
    ///</summary>
    ///  <param name="color">Array of color components.</param>
    {class} function init(color: TArray<Double>): DNSetColorStroke; overload;
    ///<summary>
    ///  Set color for strokinbg operator for CMYK colro space
    ///</summary>
    ///  <param name="c">cyan component.</param>
    ///  <param name="m">Magenta component.</param>
    ///  <param name="y">Yellow component.</param>
    ///  <param name="k">Black component.</param>
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetColorStroke; overload;

  end;

  ///<summary>
  ///  Class representing SC operator set color for stroking color operators.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColorStroke')]
  DNSetColorStroke = interface(DNBasicSetColorOperator)
  ['{81B5F507-AAF1-3B77-8CED-B1FA7675B215}']
  { getters & setters } 

    function get_R: Double;
    function get_G: Double;
    function get_B: Double;
    function get_C: Double;
    function get_M: Double;
    function get_Y: Double;
    function get_K: Double;
    function get_Grey: Double;
    function get_Color: TArray<Double>;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property R: Double read get_R;
    ///<summary>
    ///  Gets green component of color
    ///</summary>
    property G: Double read get_G;
    ///<summary>
    ///  Gets red component of color
    ///</summary>
    property B: Double read get_B;
    ///<summary>
    ///  Gets cyan compoent of CMYK color.
    ///</summary>
    property C: Double read get_C;
    ///<summary>
    ///  Gets magenta compoent of CMYK color.
    ///</summary>
    property M: Double read get_M;
    ///<summary>
    ///  Gets yellow compoent of CMYK color.
    ///</summary>
    property Y: Double read get_Y;
    ///<summary>
    ///  Gets black compoent of CMYK color.
    ///</summary>
    property K: Double read get_K;
    ///<summary>
    ///  Gets black compoent of gray color.
    ///</summary>
    property Grey: Double read get_Grey;
    ///<summary>
    ///  Gets array of color components.
    ///</summary>
    property Color: TArray<Double> read get_Color;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorStroke = class(TDNGenericImport<DNSetColorStrokeClass, DNSetColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCMYKColorClass = interface(DNSetColorOperatorClass)
  ['{197DE1A4-16A5-5BA1-A3BD-4962CAB05133}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="c">The level of cyan from 0.0 to 1.0</param>
    ///  <param name="m">The level of magenta from 0.0 to 1.0</param>
    ///  <param name="y">The level of yellow from 0.0 to 1.0</param>
    ///  <param name="k">The level of black from 0.0 to 1.0</param>
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetCMYKColor;

  end;

  ///<summary>
  ///  Class representing k operator (set CMYK color for non-stroknig operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetCMYKColor')]
  DNSetCMYKColor = interface(DNSetColorOperator)
  ['{28912756-F0EE-3304-B2CD-AA22AB93559A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCMYKColor = class(TDNGenericImport<DNSetCMYKColorClass, DNSetCMYKColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCMYKColorStrokeClass = interface(DNSetColorOperatorClass)
  ['{9BF925F0-D8E6-582B-886D-F76F28CD231F}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="c">The level of cyan from 0.0 to 1.0</param>
    ///  <param name="m">The level of magenta from 0.0 to 1.0</param>
    ///  <param name="y">The level of yellow from 0.0 to 1.0</param>
    ///  <param name="k">The level of black from 0.0 to 1.0</param>
    {class} function init(c: Double; m: Double; y: Double; k: Double): DNSetCMYKColorStroke;

  end;

  ///<summary>
  ///  Class representing K operator (set CMYK color for stroking operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetCMYKColorStroke')]
  DNSetCMYKColorStroke = interface(DNSetColorOperator)
  ['{909E64ED-6514-3B06-8693-6F8D241E9A43}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns the RGB color
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCMYKColorStroke = class(TDNGenericImport<DNSetCMYKColorStrokeClass, DNSetCMYKColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGrayClass = interface(DNSetColorOperatorClass)
  ['{AD543502-B03C-5626-96DF-9C3A2D5744C8}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="gray">The level of gray value.</param>
    {class} function init(gray: Double): DNSetGray;

  end;

  ///<summary>
  ///  Set gray level for non-stroking operations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetGray')]
  DNSetGray = interface(DNSetColorOperator)
  ['{F634F223-CE52-30F7-BDD8-628829C817F3}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns string represnetation of operator.
    ///</summary>
    ///<returns>String representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGray = class(TDNGenericImport<DNSetGrayClass, DNSetGray>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGrayStrokeClass = interface(DNSetColorOperatorClass)
  ['{4BD07CA8-E554-594C-A37E-8E53CA42493C}']
  { constructors } 

    ///<summary>
    ///  Initializes operator with the specified color.
    ///</summary>
    ///  <param name="gray">The level of gray value.</param>
    {class} function init(gray: Double): DNSetGrayStroke;

  end;

  ///<summary>
  ///  Class representing gray level for stroking operations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetGrayStroke')]
  DNSetGrayStroke = interface(DNSetColorOperator)
  ['{B10C37A5-6897-3A27-AB29-A74812EE68A6}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGrayStroke = class(TDNGenericImport<DNSetGrayStrokeClass, DNSetGrayStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetRGBColorClass = interface(DNSetColorOperatorClass)
  ['{DDC399DD-845C-545F-88A9-CA6CB159E4D1}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="r">The level of red from 0.0 to 1.0</param>
    ///  <param name="g">The level of green from 0.0 to 1.0</param>
    ///  <param name="b">The level of blue from 0.0 to 1.0</param>
    {class} function init(r: Double; g: Double; b: Double): DNSetRGBColor; overload;
    ///<summary>
    ///  Initializes operator with color.
    ///</summary>
    ///  <param name="color">Specfied color.</param>
    {class} function init(color: DDN.Aspose.Common.DNColor): DNSetRGBColor; overload;

  end;

  ///<summary>
  ///  Class representing rg operator (set RGB color for non-stroknig operators).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetRGBColor')]
  DNSetRGBColor = interface(DNSetColorOperator)
  ['{F6A350A0-9EA3-3C36-A86D-61CB39D0ABDF}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetRGBColor = class(TDNGenericImport<DNSetRGBColorClass, DNSetRGBColor>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetRGBColorStrokeClass = interface(DNSetColorOperatorClass)
  ['{4443B5F5-229B-5DEA-9B88-29D5A360D5B2}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="r">The level of red from 0.0 to 1.0</param>
    ///  <param name="g">The level of green from 0.0 to 1.0</param>
    ///  <param name="b">The level of blue from 0.0 to 1.0</param>
    {class} function init(r: Double; g: Double; b: Double): DNSetRGBColorStroke; overload;
    ///<summary>
    ///  Initializes operator with color.
    ///</summary>
    ///  <param name="color">Operator color.</param>
    {class} function init(color: DDN.Aspose.Common.DNColor): DNSetRGBColorStroke; overload;

  end;

  ///<summary>
  ///  Class representing RG operator (set RGB color for stroking operators).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetRGBColorStroke')]
  DNSetRGBColorStroke = interface(DNSetColorOperator)
  ['{781251F8-0686-3600-883A-4B3461E4745A}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Returns color specified by operator.
    ///</summary>
    ///<returns>Color specified by operator.</returns>
    function getColor: DDN.Aspose.Common.DNColor;
    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetRGBColorStroke = class(TDNGenericImport<DNSetRGBColorStrokeClass, DNSetRGBColorStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorRenderingIntentClass = interface(DNOperatorClass)
  ['{0782A8B6-D9EF-546B-9132-E9CC365A198F}']
  { constructors } 

    ///<summary>
    ///  Set Color Rendering Intent operator constructor.
    ///</summary>
    ///  <param name="intentName">Color Rendering Intent.</param>
    {class} function init(intentName: string): DNSetColorRenderingIntent;

  end;

  ///<summary>
  ///  Class representing ri operator (set color rendering intent).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColorRenderingIntent')]
  DNSetColorRenderingIntent = interface(DNOperator)
  ['{5B5429EF-19E0-3415-BBBD-C6A8198BD486}']
  { getters & setters } 

    function get_IntentName: string;
    procedure set_IntentName(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets color rendering intent name.
    ///</summary>
    property IntentName: string read get_IntentName write set_IntentName;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorRenderingIntent = class(TDNGenericImport<DNSetColorRenderingIntentClass, DNSetColorRenderingIntent>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorSpaceClass = interface(DNOperatorClass)
  ['{E31AEE9D-0218-547F-BD43-1FB733CF86EB}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="name">Color space name.</param>
    {class} function init(name: string): DNSetColorSpace;

  end;

  ///<summary>
  ///  Class representing cs operator (set colorspace for non-stroking operations)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColorSpace')]
  DNSetColorSpace = interface(DNOperator)
  ['{E6168F5A-2A7E-34C0-8EE7-A3DA5C78C8E5}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets color space name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorSpace = class(TDNGenericImport<DNSetColorSpaceClass, DNSetColorSpace>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetColorSpaceStrokeClass = interface(DNOperatorClass)
  ['{783AD5FD-311B-50AB-A8BA-12FD157170CB}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="name">Color space name.</param>
    {class} function init(name: string): DNSetColorSpaceStroke;

  end;

  ///<summary>
  ///  Class representing CS operator (set color for stroking operations).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetColorSpaceStroke')]
  DNSetColorSpaceStroke = interface(DNOperator)
  ['{D9BDB7C8-1A77-378A-B1D3-100989C3C905}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets color space name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetColorSpaceStroke = class(TDNGenericImport<DNSetColorSpaceStrokeClass, DNSetColorSpaceStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetDashClass = interface(DNOperatorClass)
  ['{D47C2ADA-8A57-5E74-9FC8-9FE70A802B9E}']
  { constructors } 

    ///<summary>
    ///  Creates set dash pattern operator.
    ///</summary>
    ///  <param name="pattern">Array which defines dash pattern.</param>
    ///  <param name="phase">Dash phase.</param>
    {class} function init(pattern: TArray<Int32>; phase: Int32): DNSetDash;

  end;

  ///<summary>
  ///  Class representing d operator (set line dash pattern).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetDash')]
  DNSetDash = interface(DNOperator)
  ['{E2DF8815-33A0-350E-87AB-0E72FEB834B6}']
  { getters & setters } 

    function get_Pattern: TArray<Int32>;
    procedure set_Pattern(value: TArray<Int32>);
    function get_Phase: Int32;
    procedure set_Phase(value: Int32);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Gets operator string representation.
    ///</summary>
    ///<returns>
    ///  [x1 x2] y d, where x1 - dash length, x2 - gap length, y - phase.
    ///</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Dash pattern. Array�s elements shall be numbers that specify the lengths of alternating dashes and gaps.
    ///  In case of one element array dash and gap lengths are equal.
    ///</summary>
    property Pattern: TArray<Int32> read get_Pattern write set_Pattern;
    ///<summary>
    ///  Dash phase. Before beginning to stroke a path, the dash array shall be cycled through, adding up the lengths of dashes and gaps.
    ///  When the accumulated length equals the value specified by the dash phase, stroking of the path shall begin,
    ///  and the dash array shall be used cyclically from that point onward.
    ///</summary>
    property Phase: Int32 read get_Phase write set_Phase;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetDash = class(TDNGenericImport<DNSetDashClass, DNSetDash>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetFlatClass = interface(DNOperatorClass)
  ['{764EB9AB-1C48-5F3A-BE87-7D23CA04FD57}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="flatness">The value of flatness.</param>
    {class} function init(flatness: Double): DNSetFlat;

  end;

  ///<summary>
  ///  Class representing i operator (set flatness tolerance).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetFlat')]
  DNSetFlat = interface(DNOperator)
  ['{BA494B02-AEF3-3616-8D91-45204376DB9A}']
  { getters & setters } 

    function get_Flatness: Double;
    procedure set_Flatness(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the flatness.
    ///</summary>
    property Flatness: Double read get_Flatness write set_Flatness;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetFlat = class(TDNGenericImport<DNSetFlatClass, DNSetFlat>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineCapClass = interface(DNOperatorClass)
  ['{259114CB-C081-54B7-A18B-E5A8A367CC51}']
  end;

  ///<summary>
  ///  Class representing J operator (set line cap style).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetLineCap')]
  DNSetLineCap = interface(DNOperator)
  ['{6EC324DB-950A-32FE-8E4D-32A90099C7E4}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineCap = class(TDNGenericImport<DNSetLineCapClass, DNSetLineCap>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineJoinClass = interface(DNOperatorClass)
  ['{85A0F849-F331-5C14-A2D6-076B5C88405A}']
  end;

  ///<summary>
  ///  Class representing j operator (set line join style).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetLineJoin')]
  DNSetLineJoin = interface(DNOperator)
  ['{587511CA-768B-33DF-8CC6-4506F63B98CB}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineJoin = class(TDNGenericImport<DNSetLineJoinClass, DNSetLineJoin>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetLineWidthClass = interface(DNOperatorClass)
  ['{EAC10B5F-B2AC-57FF-8CA5-51E45B4EC8BF}']
  { constructors } 

    ///<summary>
    ///  Initializes operator with width value.
    ///</summary>
    ///  <param name="width">Line width.</param>
    {class} function init(width: Double): DNSetLineWidth;

  end;

  ///<summary>
  ///  Class representing w operator (set line width).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetLineWidth')]
  DNSetLineWidth = interface(DNOperator)
  ['{A8CF12E3-4E1A-3CAD-BB4C-D3DB75BD890A}']
  { getters & setters } 

    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets width of the line.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetLineWidth = class(TDNGenericImport<DNSetLineWidthClass, DNSetLineWidth>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetMiterLimitClass = interface(DNOperatorClass)
  ['{6241EF3C-485E-5EC1-8A04-553EED1C2C63}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="miterLimit">Mitel limit.</param>
    {class} function init(miterLimit: Double): DNSetMiterLimit;

  end;

  ///<summary>
  ///  Class representing M operator (set miter limit).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetMiterLimit')]
  DNSetMiterLimit = interface(DNOperator)
  ['{94FE32BE-27B3-3CCB-8C03-4319FB89EBDE}']
  { getters & setters } 

    function get_MiterLimit: Double;
    procedure set_MiterLimit(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the miter limit.
    ///</summary>
    property MiterLimit: Double read get_MiterLimit write set_MiterLimit;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetMiterLimit = class(TDNGenericImport<DNSetMiterLimitClass, DNSetMiterLimit>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNShFillClass = interface(DNOperatorClass)
  ['{AAAFE5A0-E351-5DD8-A544-3888494FF277}']
  { constructors } 

    ///<summary></summary>
    ///  <param name="shadingName"></param>
    {class} function init(shadingName: string): DNShFill;

  end;

  ///<summary>
  ///  Class representing sh operator (paint area with shadeing pattern).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ShFill')]
  DNShFill = interface(DNOperator)
  ['{B7A6D13D-9650-36CF-BD5E-B0455CA185CB}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the shading name.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNShFill = class(TDNGenericImport<DNShFillClass, DNShFill>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNStrokeClass = interface(DNOperatorClass)
  ['{D43FC8EE-0D1A-5A3B-8564-4C10CC790EF1}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNStroke;

  end;

  ///<summary>
  ///  Class representing S operator (stroke path).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.Stroke')]
  DNStroke = interface(DNOperator)
  ['{A1191D97-7D99-3462-BA51-0BDA6692281F}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of the operator.
    ///</summary>
    ///<returns>Text representation of the operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNStroke = class(TDNGenericImport<DNStrokeClass, DNStroke>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextOperatorClass = interface(DNOperatorClass)
  ['{BF4027B4-E543-559A-AD43-A0F63C459F40}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNTextOperator; overload;
    ///<summary>
    ///  Text operator which accepts text properties.
    ///</summary>
    ///  <param name="textProperties">Text properties.</param>
    {class} function init(textProperties: DNTextProperties): DNTextOperator; overload;

  end;

  ///<summary>
  ///  Abstract base class for text-related operators (TJ, Tj, Tm, BT, ET, etc).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.TextOperator')]
  DNTextOperator = interface(DNOperator)
  ['{8B56811C-47C1-3603-8694-46D3EB7D0284}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of operator and its parameters.
    ///</summary>
    ///<returns>Operator text</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Operator index in page operators list.
    ///</summary>
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextOperator = class(TDNGenericImport<DNTextOperatorClass, DNTextOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBlockTextOperatorClass = interface(DNTextOperatorClass)
  ['{0A7663FA-6D2A-5C7C-B0B1-2931643D33EB}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNBlockTextOperator; overload;
    ///<summary>
    ///  Initializes BlockTextOperator which accepts TextProperties.
    ///</summary>
    ///  <param name="textProperties">Text properties.</param>
    {class} function init(textProperties: DNTextProperties): DNBlockTextOperator; overload;

  end;

  ///<summary>
  ///  Abstract base class for text block operators i.e.  Begin and End text operators (BT/ET)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BlockTextOperator')]
  DNBlockTextOperator = interface(DNTextOperator)
  ['{ACDC1DB5-037C-3D30-AD78-C471718DC9E2}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBlockTextOperator = class(TDNGenericImport<DNBlockTextOperatorClass, DNBlockTextOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNBTClass = interface(DNBlockTextOperatorClass)
  ['{7B81A893-F409-500A-9D52-E06C3601BF41}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNBT;

  end;

  ///<summary>
  ///  Class representing BT operator (Begin of text block).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.BT')]
  DNBT = interface(DNBlockTextOperator)
  ['{8E71B5CD-E073-3297-8870-2ED4C571FEED}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Produces text code of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNBT = class(TDNGenericImport<DNBTClass, DNBT>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNETClass = interface(DNBlockTextOperatorClass)
  ['{E28D7442-1C42-5BB1-ACE0-2BF8292EC818}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNET;

  end;

  ///<summary>
  ///  Class representing operator ET (End of text block).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ET')]
  DNET = interface(DNBlockTextOperator)
  ['{8F66FFA5-E6DD-38E9-B8DB-1FA7A5F610A3}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Produces text code of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNET = class(TDNGenericImport<DNETClass, DNET>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextPlaceOperatorClass = interface(DNTextOperatorClass)
  ['{5E949D87-26FD-596F-9A45-2D71C56E9C59}']
  { constructors } 

    ///<summary>
    ///  Initializes TextPlaceOperator.
    ///</summary>
    {class} function init: DNTextPlaceOperator; overload;
    ///<summary>
    ///  Initializes TextPlaceOperator which accepts TextProperties.
    ///</summary>
    ///  <param name="textProperties">Text properties.</param>
    {class} function init(textProperties: DNTextProperties): DNTextPlaceOperator; overload;

  end;

  ///<summary>
  ///  Abstract base class for operators which changes text position (Tm, Td, etc).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.TextPlaceOperator')]
  DNTextPlaceOperator = interface(DNTextOperator)
  ['{2E9A5B2F-FC72-3857-AE63-8C47453D2403}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextPlaceOperator = class(TDNGenericImport<DNTextPlaceOperatorClass, DNTextPlaceOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveTextPositionClass = interface(DNTextPlaceOperatorClass)
  ['{64B9652B-0583-59FA-884F-0FD7B1B48694}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="x">X coordinate of text position.</param>
    ///  <param name="y">Y coordinate of text position.</param>
    {class} function init(x: Double; y: Double): DNMoveTextPosition;

  end;

  ///<summary>
  ///  Class representing Td operator (move text position).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MoveTextPosition')]
  DNMoveTextPosition = interface(DNTextPlaceOperator)
  ['{1D267BF5-D614-34CA-B829-FD771E7A1B00}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  X coordinate of text position.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate of text position.
    ///</summary>
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTextPosition = class(TDNGenericImport<DNMoveTextPositionClass, DNMoveTextPosition>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveTextPositionSetLeadingClass = interface(DNTextPlaceOperatorClass)
  ['{55DB57D2-F56B-5B89-A7C5-32892B074242}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="x">X coordinate of text position.</param>
    ///  <param name="y">Y coordinate of text position.</param>
    {class} function init(x: Double; y: Double): DNMoveTextPositionSetLeading;

  end;

  ///<summary>
  ///  Class representing TD operator (move position and set leading).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MoveTextPositionSetLeading')]
  DNMoveTextPositionSetLeading = interface(DNTextPlaceOperator)
  ['{4FF69E03-182A-3D11-807C-6084C299C510}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  X coordinate of text position.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate of text position.
    ///</summary>
    property Y: Double read get_Y write set_Y;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveTextPositionSetLeading = class(TDNGenericImport<DNMoveTextPositionSetLeadingClass, DNMoveTextPositionSetLeading>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToNextLineClass = interface(DNTextPlaceOperatorClass)
  ['{B437CD11-739C-540E-931B-4A6B494C515D}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    {class} function init: DNMoveToNextLine;

  end;

  ///<summary>
  ///  Class  representing T* operator (Move to start of the next line).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MoveToNextLine')]
  DNMoveToNextLine = interface(DNTextPlaceOperator)
  ['{86F8016D-638F-384B-82E7-55682880BCF7}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text of the operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveToNextLine = class(TDNGenericImport<DNMoveToNextLineClass, DNMoveToNextLine>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextMatrixClass = interface(DNTextPlaceOperatorClass)
  ['{EC8D8D32-ADDB-5D7C-9264-8E643105458A}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="a">A coefficient</param>
    ///  <param name="b">B coefficient</param>
    ///  <param name="c">C coefficient</param>
    ///  <param name="d">D coefficient</param>
    ///  <param name="e">E coefficient</param>
    ///  <param name="f">F coefficient</param>
    {class} function init(a: Double; b: Double; c: Double; d: Double; e: Double; f: Double): DNSetTextMatrix; overload;
    ///<summary>
    ///  Initializes operator by matrix.
    ///</summary>
    ///  <param name="m">Transfomation matrix.</param>
    {class} function init(m: DNMatrix): DNSetTextMatrix; overload;

  end;

  ///<summary>
  ///  Class representig Tm operator (set text matrix).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetTextMatrix')]
  DNSetTextMatrix = interface(DNTextPlaceOperator)
  ['{BBD8C509-D184-3E16-B782-621CAD701D89}']
  { getters & setters } 

    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Matrix argument of the operator.
    ///</summary>
    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextMatrix = class(TDNGenericImport<DNSetTextMatrixClass, DNSetTextMatrix>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextShowOperatorClass = interface(DNTextOperatorClass)
  ['{3F664B78-17A5-591B-A03F-4F594FD634E7}']
  { constructors } 

    ///<summary>
    ///  Initializes TextShowOperator.
    ///</summary>
    {class} function init: DNTextShowOperator; overload;
    ///<summary>
    ///  Initializes TextShowOperator which allows to pass TextProperties.
    ///</summary>
    ///  <param name="textProperties">Text properties.</param>
    {class} function init(textProperties: DNTextProperties): DNTextShowOperator; overload;

  end;

  ///<summary>
  ///  Abvstract base class for all operators which used to out text (Tj, TJ, etc).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.TextShowOperator')]
  DNTextShowOperator = interface(DNTextOperator)
  ['{0458FA6C-7945-3417-83E6-A8372E6C9C0E}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets text which operator out on the page.
    ///</summary>
    property Text: string read get_Text write set_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextShowOperator = class(TDNGenericImport<DNTextShowOperatorClass, DNTextShowOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNMoveToNextLineShowTextClass = interface(DNTextShowOperatorClass)
  ['{237B8E71-1123-5981-A075-E90ADC37934B}']
  { constructors } 

    ///<summary>
    ///  Initializesoperator.
    ///</summary>
    {class} function init: DNMoveToNextLineShowText;

  end;

  ///<summary>
  ///  Class representing ' operator (move to next line and show text).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.MoveToNextLineShowText')]
  DNMoveToNextLineShowText = interface(DNTextShowOperator)
  ['{23BB7E49-E25C-357E-9F8E-F20D28007D43}']
  { getters & setters } 

    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets operator text.
    ///</summary>
    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNMoveToNextLineShowText = class(TDNGenericImport<DNMoveToNextLineShowTextClass, DNMoveToNextLineShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetGlyphsPositionShowTextClass = interface(DNTextShowOperatorClass)
  ['{603C1DC4-CCAD-540C-B5E4-AF1486FE819A}']
  { constructors } 

    {class} function init(glyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition>): DNSetGlyphsPositionShowText;

  end;

  ///<summary>
  ///  Class representing TJ operator (show text with glyph positioning).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetGlyphsPositionShowText')]
  DNSetGlyphsPositionShowText = interface(DNTextShowOperator)
  ['{A50B68AB-B753-3FD7-BA15-A98ED88B9735}']
  { getters & setters } 

    function get_GlyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition>;
    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns  positions of glyphs.
    ///</summary>
    property GlyphPositions: DDN.mscorlib.DNIEnumerable<DNGlyphPosition> read get_GlyphPositions;
    ///<summary>
    ///  Gets text from operator argument (glyph positioning is ignored).
    ///</summary>
    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetGlyphsPositionShowText = class(TDNGenericImport<DNSetGlyphsPositionShowTextClass, DNSetGlyphsPositionShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetSpacingMoveToNextLineShowTextClass = interface(DNTextShowOperatorClass)
  ['{7F9B36D3-EEAF-57FA-A312-B4EA8B2CC6E1}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="aw"></param>
    ///  <param name="ac"></param>
    ///  <param name="text"></param>
    {class} function init(aw: Double; ac: Double; text: string): DNSetSpacingMoveToNextLineShowText;

  end;

  ///<summary>
  ///  Class representing " operator (set word and character spacing, move to the next line and show text).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetSpacingMoveToNextLineShowText')]
  DNSetSpacingMoveToNextLineShowText = interface(DNTextShowOperator)
  ['{91FB6240-B220-3D37-A9B2-DB74A003F73C}']
  { getters & setters } 

    function get_Aw: Double;
    function get_Ac: Double;
    function get_Text: string;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets word spacing.
    ///</summary>
    property Aw: Double read get_Aw;
    ///<summary>
    ///  Get character spacing.
    ///</summary>
    property Ac: Double read get_Ac;
    ///<summary>
    ///  Gets text of operator.
    ///</summary>
    property Text: string read get_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetSpacingMoveToNextLineShowText = class(TDNGenericImport<DNSetSpacingMoveToNextLineShowTextClass, DNSetSpacingMoveToNextLineShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNShowTextClass = interface(DNTextShowOperatorClass)
  ['{FC8B1FCC-2005-5618-AFC5-4E5BE1041235}']
  { constructors } 

    ///<summary>
    ///  Initializes Tj opearor.
    ///</summary>
    ///  <param name="index">Index of operator in operators list.</param>
    ///  <param name="text">argument of the operator.</param>
    {class} function init(index: Int32; text: string): DNShowText; overload;
    ///<summary>
    ///  Initializes Tj operator.
    ///</summary>
    ///  <param name="text">argument of the operator.</param>
    {class} function init(text: string): DNShowText; overload;
    ///<summary>
    ///  Initializes Tj opearor.
    ///</summary>
    ///  <param name="text">text to add.</param>
    ///  <param name="font">font that is used to draw the text.</param>
    {class} function init(text: string; font: DNFont): DNShowText; overload;
    ///<summary>
    ///  Initializes Tj operator.
    ///</summary>
    {class} function init: DNShowText; overload;

  end;

  ///<summary>
  ///  Class representing Tj operator (show text).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.ShowText')]
  DNShowText = interface(DNTextShowOperator)
  ['{F904A218-F87B-3E94-9540-A532C8CF7E58}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Produces text code of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Text of operator.
    ///</summary>
    property Text: string read get_Text write set_Text;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNShowText = class(TDNGenericImport<DNShowTextClass, DNShowText>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNTextStateOperatorClass = interface(DNTextOperatorClass)
  ['{1F944C21-FDAA-5CF8-B62C-9F78194CFC9B}']
  { constructors } 

    ///<summary>
    ///  Initializes TextStateOperator.
    ///</summary>
    {class} function init: DNTextStateOperator; overload;
    ///<summary>
    ///  Initializes TextStateoperator which allows to pass TextProperties.
    ///</summary>
    ///  <param name="textProperties">Text properties.</param>
    {class} function init(textProperties: DNTextProperties): DNTextStateOperator; overload;

  end;

  ///<summary>
  ///  Abstract base class for operators which changes current text state (Tc, Tf, TL, etc).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.TextStateOperator')]
  DNTextStateOperator = interface(DNTextOperator)
  ['{D9D54605-E68E-383F-8485-B9D264348F3C}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNTextStateOperator = class(TDNGenericImport<DNTextStateOperatorClass, DNTextStateOperator>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSelectFontClass = interface(DNTextStateOperatorClass)
  ['{F1B95E33-7A4A-5C32-A570-5DCE05A6BA55}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="resName">The name of font resource, e.g. F1, F2 etc.</param>
    ///  <param name="size">Size of the font.</param>
    {class} function init(resName: string; size: Double): DNSelectFont;

  end;

  ///<summary>
  ///  Class representing Tf operator (set text font and size).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SelectFont')]
  DNSelectFont = interface(DNTextStateOperator)
  ['{372CEB09-A449-34E4-8C11-C25CA3BACA13}']
  { getters & setters } 

    function get_Name: string;
    function get_Size: Double;
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Returns text representation of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Name of font.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Size of text.
    ///</summary>
    property Size: Double read get_Size;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSelectFont = class(TDNGenericImport<DNSelectFontClass, DNSelectFont>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetCharacterSpacingClass = interface(DNTextStateOperatorClass)
  ['{433EF992-BBB1-5AFC-AF3C-3A03BB6DFD25}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="charSpacing">Character spacing.</param>
    {class} function init(charSpacing: Double): DNSetCharacterSpacing;

  end;

  ///<summary>
  ///  Class representing Tc operator (set character spacing).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetCharacterSpacing')]
  DNSetCharacterSpacing = interface(DNTextStateOperator)
  ['{2C5F6719-82E0-3502-81A1-ECED1470AB01}']
  { getters & setters } 

    function get_CharSpacing: Double;
    procedure set_CharSpacing(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the character spacing.
    ///</summary>
    property CharSpacing: Double read get_CharSpacing write set_CharSpacing;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetCharacterSpacing = class(TDNGenericImport<DNSetCharacterSpacingClass, DNSetCharacterSpacing>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetHorizontalTextScalingClass = interface(DNTextStateOperatorClass)
  ['{86A90924-D418-503C-B0A9-1844FE6BD0A6}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="horizintalScaling">Horizontal scaling.</param>
    {class} function init(horizintalScaling: Double): DNSetHorizontalTextScaling;

  end;

  ///<summary>
  ///  Class representing Tz operator (set horizontal text scaling).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetHorizontalTextScaling')]
  DNSetHorizontalTextScaling = interface(DNTextStateOperator)
  ['{3CA93A7B-5612-361F-B703-0B931A7E3BDB}']
  { getters & setters } 

    function get_HorizontalScaling: Double;
    procedure set_HorizontalScaling(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the horizontal scaling.
    ///</summary>
    property HorizontalScaling: Double read get_HorizontalScaling write set_HorizontalScaling;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetHorizontalTextScaling = class(TDNGenericImport<DNSetHorizontalTextScalingClass, DNSetHorizontalTextScaling>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextLeadingClass = interface(DNTextStateOperatorClass)
  ['{6E615E03-E3FB-5942-854D-EB02F5176724}']
  { constructors } 

    ///<summary>
    ///  Initializes text leading operator.
    ///</summary>
    ///  <param name="leading">Text leading.</param>
    {class} function init(leading: Double): DNSetTextLeading;

  end;

  ///<summary>
  ///  Class represenging TL operator (set text leading).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetTextLeading')]
  DNSetTextLeading = interface(DNTextStateOperator)
  ['{D34460C0-0CF1-3C15-8D89-FFF6C2401457}']
  { getters & setters } 

    function get_Leading: Double;
    procedure set_Leading(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    ///<summary>
    ///  Produces text code of operator.
    ///</summary>
    ///<returns>Text representation of operator.</returns>
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text leading.
    ///</summary>
    property Leading: Double read get_Leading write set_Leading;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextLeading = class(TDNGenericImport<DNSetTextLeadingClass, DNSetTextLeading>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextRenderingModeClass = interface(DNTextStateOperatorClass)
  ['{BDE06DF1-C4F1-5704-B5EF-73C7FB1266D9}']
  end;

  ///<summary>
  ///  Class representing Tr operator (set text rendering mode).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetTextRenderingMode')]
  DNSetTextRenderingMode = interface(DNTextStateOperator)
  ['{756D4069-C2FE-3D39-B7CD-4813F7315AA8}']
  { getters & setters } 

    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextRenderingMode = class(TDNGenericImport<DNSetTextRenderingModeClass, DNSetTextRenderingMode>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetTextRiseClass = interface(DNTextStateOperatorClass)
  ['{405D82F3-1AB9-5A25-A74B-B0BA11B75446}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="textRise">Text rise.</param>
    {class} function init(textRise: Double): DNSetTextRise;

  end;

  ///<summary>
  ///  Class representing Ts operator (set text rise).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetTextRise')]
  DNSetTextRise = interface(DNTextStateOperator)
  ['{87CE51E0-02B6-392E-8305-C0384572947E}']
  { getters & setters } 

    function get_TextRise: Double;
    procedure set_TextRise(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the text rise.
    ///</summary>
    property TextRise: Double read get_TextRise write set_TextRise;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetTextRise = class(TDNGenericImport<DNSetTextRiseClass, DNSetTextRise>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNSetWordSpacingClass = interface(DNTextStateOperatorClass)
  ['{2B35EF97-2A6F-5492-8F67-C910299A9414}']
  { constructors } 

    ///<summary>
    ///  Initializes operator.
    ///</summary>
    ///  <param name="wordSpacing">Word spacing.</param>
    {class} function init(wordSpacing: Double): DNSetWordSpacing;

  end;

  ///<summary>
  ///  Class representing Tw operator (set word spacing).
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.SetWordSpacing')]
  DNSetWordSpacing = interface(DNTextStateOperator)
  ['{C4E85D07-337E-3338-AB24-3FB482C8700C}']
  { getters & setters } 

    function get_WordSpacing: Double;
    procedure set_WordSpacing(value: Double);
    function get_Index: Int32;
    procedure set_Index(value: Int32);

  { methods } 

    ///<summary>
    ///  Accepts visitor object to process operator.
    ///</summary>
    ///  <param name="visitor">Visitor object.</param>
    procedure Accept(visitor: DNIOperatorSelector);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets or sets the word spacing.
    ///</summary>
    property WordSpacing: Double read get_WordSpacing write set_WordSpacing;
    property Index: Int32 read get_Index write set_Index;
  end;

  TDNSetWordSpacing = class(TDNGenericImport<DNSetWordSpacingClass, DNSetWordSpacing>) end;

  //-------------namespace: Aspose.Pdf.Operators----------------
  DNGlyphPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{853CCC6E-4967-537D-8E2F-93852035182F}']
  { constructors } 

    ///<summary>
    ///  Constructs glyph position.
    ///</summary>
    ///  <param name="text"></param>
    ///  <param name="position"></param>
    {class} function init(text: string; position: Double): DNGlyphPosition; overload;
    ///<summary>
    ///  Constructor for Glyph Position.
    ///</summary>
    ///  <param name="text"></param>
    {class} function init(text: string): DNGlyphPosition; overload;

  end;

  ///<summary>
  ///  Class describes text and position to use with operator TJ (set glyph with position)
  ///</summary>
  [DNTypeName('Aspose.Pdf.Operators.GlyphPosition')]
  DNGlyphPosition = interface(DDN.mscorlib.DNObject)
  ['{94F54B0E-FB48-3CD7-A965-7EF8725C3C12}']
  { getters & setters } 

    function get_Text: string;
    function get_Position: Double;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Text of operator.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Position off the text in the operator.
    ///</summary>
    property Position: Double read get_Position;
  end;

  TDNGlyphPosition = class(TDNGenericImport<DNGlyphPositionClass, DNGlyphPosition>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOperatorSelectorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{08E92F15-D5E3-5EE4-B790-405283F92A34}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="!:Selector" />
    ///  class.
    ///</summary>
    {class} function init: DNOperatorSelector; overload;
    ///<summary>
    ///  Initializes new <see cref="T:Aspose.Pdf.OperatorSelector" />
    ///  .
    ///</summary>
    ///  <param name="op">
    ///  The operator to visit/select.
    ///</param>
    {class} function init(op: DNOperator): DNOperatorSelector; overload;

  end;

  ///<summary>
  ///  This class is used for selecting operators using Visitor template idea.
  ///</summary>
  [DNTypeName('Aspose.Pdf.OperatorSelector')]
  DNOperatorSelector = interface(DDN.mscorlib.DNObject)
  ['{9B45C498-8A5E-38EB-8AEC-4CD07BF66D99}']
  { getters & setters } 

    function get_Selected: DDN.mscorlib.DNIList<DNOperator>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The list of selected objects.
    ///</summary>
    property Selected: DDN.mscorlib.DNIList<DNOperator> read get_Selected;
  end;

  TDNOperatorSelector = class(TDNGenericImport<DNOperatorSelectorClass, DNOperatorSelector>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOpiClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6FAC50AF-39E1-5A78-A933-2DD3D4515E5F}']
  { constructors } 

    ///<summary>
    ///  The constructor.
    ///</summary>
    ///  <param name="xform">Xform object.</param>
    {class} function init(xform: DNXForm): DNOpi;

  end;

  ///<summary>
  ///  Represents The Open Prepress Interface (OPI) is a mechanism for creating low-resolution placeholders, or proxies,
  ///  for such high-resolution images.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Opi')]
  DNOpi = interface(DDN.mscorlib.DNObject)
  ['{B65B9D4C-1B7D-3C14-AB2E-F8720A8721E8}']
  { getters & setters } 

    function get_Version: string;
    function get_FileSpecification: string;
    function get_Position: TArray<Double>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the version of OPI to which this dictionary refers.
    ///</summary>
    property Version: string read get_Version;
    ///<summary>
    ///  Gets the external file containing the low- resolution proxy image.
    ///</summary>
    property FileSpecification: string read get_FileSpecification;
    ///<summary>
    ///  Gets an array of eight numbers of the form specifying the location on the page of the cropped image.
    ///</summary>
    property Position: TArray<Double> read get_Position;
  end;

  TDNOpi = class(TDNGenericImport<DNOpiClass, DNOpi>) end;

  //-------------namespace: Aspose.Pdf.Optimization----------------
  DNImageCompressionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A1F1A9C-92EE-56E9-BD02-D2B544E33277}']
  { constructors } 

    {class} function init: DNImageCompressionOptions;

  end;

  ///<summary>
  ///  Class contains set  options for image compression.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Optimization.ImageCompressionOptions')]
  DNImageCompressionOptions = interface(DDN.mscorlib.DNObject)
  ['{3D54F7B6-9DF7-375C-B25A-15598B8444DB}']
  { getters & setters } 

    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResolution: Int32;
    procedure set_MaxResolution(value: Int32);
    function get_Version: DNImageCompressionVersion;
    procedure set_Version(value: DNImageCompressionVersion);
    function get_Encoding: DNImageEncoding;
    procedure set_Encoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.
    ///</summary>
    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    ///<summary>
    ///  If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.
    ///</summary>
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    ///<summary>
    ///  Specifies level of image compression when CompressIamges flag is used.
    ///</summary>
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    ///<summary>
    ///  Specifies maximum resolution of images. If image has higher resolition it will be scaled
    ///</summary>
    property MaxResolution: Int32 read get_MaxResolution write set_MaxResolution;
    ///<summary>
    ///  Version of compression algorithm. Possible values are: 1. standard compression, 2. fast (improved compression which is faster then standard but may be applicable not for all images), 3. mixed (standard compression is applied to images which can not be compressed by  faster algorithm, this may give best compression but more slow then "fast" algorithm. Version "Fast" is not applicable for resizing images (standard method will be used). Default is "Standard".
    ///</summary>
    property Version: DNImageCompressionVersion read get_Version write set_Version;
    ///<summary>
    ///  Gets or sets encoding used to store images.
    ///</summary>
    property Encoding: DNImageEncoding read get_Encoding write set_Encoding;
  end;

  TDNImageCompressionOptions = class(TDNGenericImport<DNImageCompressionOptionsClass, DNImageCompressionOptions>) end;

  //-------------namespace: Aspose.Pdf.Optimization----------------
  DNOptimization_OptimizationOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D271EA9-5702-5FEA-B1DE-5E7A1AAE9FA3}']
  { constructors } 

    {class} function init: DNOptimization_OptimizationOptions;

  { static methods } 

    ///<summary>
    ///  Creates optimization strategy will all options activated.
    ///  Please note that activated only options which does not change any functionality of the document.
    ///  I.e. image compressing and fonts unembedding will not enabled (and can be embedded manually).
    ///</summary>
    ///<returns>OptimizationOptions object.</returns>
    {class} function All: DNOptimization_OptimizationOptions;

  end;

  ///<summary>
  ///  Class which describes document optimization algorithm.
  ///  Instance of this class may be used as parameter of OptimizeResources() method.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Optimization.OptimizationOptions')]
  DNOptimization_OptimizationOptions = interface(DDN.mscorlib.DNObject)
  ['{BED8548E-6253-3C03-878A-6610DD85FBC0}']
  { getters & setters } 

    function get_LinkDuplcateStreams: Boolean;
    procedure set_LinkDuplcateStreams(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_RemoveUnusedStreams: Boolean;
    procedure set_RemoveUnusedStreams(value: Boolean);
    function get_RemoveUnusedObjects: Boolean;
    procedure set_RemoveUnusedObjects(value: Boolean);
    function get_ImageCompressionOptions: DNImageCompressionOptions;
    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResoultion: Int32;
    procedure set_MaxResoultion(value: Int32);
    function get_UnembedFonts: Boolean;
    procedure set_UnembedFonts(value: Boolean);
    function get_SubsetFonts: Boolean;
    procedure set_SubsetFonts(value: Boolean);
    function get_RemovePrivateInfo: Boolean;
    procedure set_RemovePrivateInfo(value: Boolean);
    function get_ImageEncoding: DNImageEncoding;
    procedure set_ImageEncoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then thes streams will be stored as one object.
    ///  This allows to decrease document size in some cases (for example, when same document was concatenedted multiple times).
    ///</summary>
    property LinkDuplcateStreams: Boolean read get_LinkDuplcateStreams write set_LinkDuplcateStreams;
    ///<summary>
    ///  If true page contents will be reused when document is optimized for equal pages.
    ///</summary>
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    ///<summary>
    ///  If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed.
    ///  This may decrease document size for example when pages were extracted from document.
    ///</summary>
    property RemoveUnusedStreams: Boolean read get_RemoveUnusedStreams write set_RemoveUnusedStreams;
    ///<summary>
    ///  If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document.
    ///</summary>
    property RemoveUnusedObjects: Boolean read get_RemoveUnusedObjects write set_RemoveUnusedObjects;
    ///<summary>
    ///  Set of options which describe will images in the document be compressed and parameters of the compression.
    ///</summary>
    property ImageCompressionOptions: DNImageCompressionOptions read get_ImageCompressionOptions;
    ///<summary>
    ///  If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.
    ///</summary>
    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    ///<summary>
    ///  If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.
    ///</summary>
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    ///<summary>
    ///  Specifies level of image compression when CompressIamges flag is used.
    ///</summary>
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    ///<summary>
    ///  Specifies maximum resolution of images. If image has higher resolition it will be scaled
    ///</summary>
    ///  [Obsolete("Please use ImageCompressionOptions.MaxResolution instead.")]
    property MaxResoultion: Int32 read get_MaxResoultion write set_MaxResoultion;
    ///<summary>
    ///  Make fonts not embedded if set to true.
    ///</summary>
    property UnembedFonts: Boolean read get_UnembedFonts write set_UnembedFonts;
    ///<summary>
    ///  Fonts will be converted into subsets if set to true.
    ///</summary>
    property SubsetFonts: Boolean read get_SubsetFonts write set_SubsetFonts;
    ///<summary>
    ///  Remove private information (page piece info).
    ///</summary>
    property RemovePrivateInfo: Boolean read get_RemovePrivateInfo write set_RemovePrivateInfo;
    ///<summary>
    ///  Image encodre which will be used.
    ///</summary>
    property ImageEncoding: DNImageEncoding read get_ImageEncoding write set_ImageEncoding;
  end;

  TDNOptimization_OptimizationOptions = class(TDNGenericImport<DNOptimization_OptimizationOptionsClass, DNOptimization_OptimizationOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocument_OptimizationOptionsClass = interface(DNOptimization_OptimizationOptionsClass)
  ['{BB1CB811-3AAB-538E-9088-620CCEE430A8}']
  { constructors } 

    {class} function init: DNDocument_OptimizationOptions;

  { static methods } 

    ///<summary>
    ///  Creates optimization strategy will all options activated.
    ///</summary>
    ///<returns>OptimizationOptions object.</returns>
    {class} function All: DNDocument_OptimizationOptions;

  end;

  ///<summary>
  ///  Class which describes document optimization algorithm.
  ///  Instance of this class may be used as parameter of OptimizeResources() method.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Document+OptimizationOptions')]
  DNDocument_OptimizationOptions = interface(DNOptimization_OptimizationOptions)
  ['{2F8D6DE6-7E96-39E7-9C87-D22680046961}']
  { getters & setters } 

    function get_LinkDuplcateStreams: Boolean;
    procedure set_LinkDuplcateStreams(value: Boolean);
    function get_AllowReusePageContent: Boolean;
    procedure set_AllowReusePageContent(value: Boolean);
    function get_RemoveUnusedStreams: Boolean;
    procedure set_RemoveUnusedStreams(value: Boolean);
    function get_RemoveUnusedObjects: Boolean;
    procedure set_RemoveUnusedObjects(value: Boolean);
    function get_ImageCompressionOptions: DNImageCompressionOptions;
    function get_CompressImages: Boolean;
    procedure set_CompressImages(value: Boolean);
    function get_ResizeImages: Boolean;
    procedure set_ResizeImages(value: Boolean);
    function get_ImageQuality: Int32;
    procedure set_ImageQuality(value: Int32);
    function get_MaxResoultion: Int32;
    procedure set_MaxResoultion(value: Int32);
    function get_UnembedFonts: Boolean;
    procedure set_UnembedFonts(value: Boolean);
    function get_SubsetFonts: Boolean;
    procedure set_SubsetFonts(value: Boolean);
    function get_RemovePrivateInfo: Boolean;
    procedure set_RemovePrivateInfo(value: Boolean);
    function get_ImageEncoding: DNImageEncoding;
    procedure set_ImageEncoding(value: DNImageEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If this flag is set to true, Resource streams will be analyzed. If duplicate streams are found (i.e. if stream contents is equal), then thes streams will be stored as one object.
    ///  This allows to decrease document size in some cases (for example, when same document was concatenedted multiple times).
    ///</summary>
    property LinkDuplcateStreams: Boolean read get_LinkDuplcateStreams write set_LinkDuplcateStreams;
    ///<summary>
    ///  If true page contents will be reused when document is optimized for equal pages.
    ///</summary>
    property AllowReusePageContent: Boolean read get_AllowReusePageContent write set_AllowReusePageContent;
    ///<summary>
    ///  If this flag set to true, every resource is checked on it's usage. If resource is never used, then resources is removed.
    ///  This may decrease document size for example when pages were extracted from document.
    ///</summary>
    property RemoveUnusedStreams: Boolean read get_RemoveUnusedStreams write set_RemoveUnusedStreams;
    ///<summary>
    ///  If this flag is set to true, all document objects will be checked and unused objects (i.e. objects which does not have any reference) are removed from document.
    ///</summary>
    property RemoveUnusedObjects: Boolean read get_RemoveUnusedObjects write set_RemoveUnusedObjects;
    ///<summary>
    ///  Set of options which describe will images in the document be compressed and parameters of the compression.
    ///</summary>
    property ImageCompressionOptions: DNImageCompressionOptions read get_ImageCompressionOptions;
    ///<summary>
    ///  If this flag is set to true images will be compressed in the document. compression level is specfied with ImageQuality property.
    ///</summary>
    property CompressImages: Boolean read get_CompressImages write set_CompressImages;
    ///<summary>
    ///  If this flag set to true and CompressImages is true images will be resized if image resoultion is greater then specified MaxResolution parameter.
    ///</summary>
    property ResizeImages: Boolean read get_ResizeImages write set_ResizeImages;
    ///<summary>
    ///  Specifies level of image compression when CompressIamges flag is used.
    ///</summary>
    property ImageQuality: Int32 read get_ImageQuality write set_ImageQuality;
    ///<summary>
    ///  Specifies maximum resolution of images. If image has higher resolition it will be scaled
    ///</summary>
    ///  [Obsolete("Please use ImageCompressionOptions.MaxResolution instead.")]
    property MaxResoultion: Int32 read get_MaxResoultion write set_MaxResoultion;
    ///<summary>
    ///  Make fonts not embedded if set to true.
    ///</summary>
    property UnembedFonts: Boolean read get_UnembedFonts write set_UnembedFonts;
    ///<summary>
    ///  Fonts will be converted into subsets if set to true.
    ///</summary>
    property SubsetFonts: Boolean read get_SubsetFonts write set_SubsetFonts;
    ///<summary>
    ///  Remove private information (page piece info).
    ///</summary>
    property RemovePrivateInfo: Boolean read get_RemovePrivateInfo write set_RemovePrivateInfo;
    ///<summary>
    ///  Image encodre which will be used.
    ///</summary>
    property ImageEncoding: DNImageEncoding read get_ImageEncoding write set_ImageEncoding;
  end;

  TDNDocument_OptimizationOptions = class(TDNGenericImport<DNDocument_OptimizationOptionsClass, DNDocument_OptimizationOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlinesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{879034D1-35B6-5B81-9562-23FC093B96C1}']
  end;

  ///<summary>
  ///  Class describes collection of outlines.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Outlines')]
  DNOutlines = interface(DDN.mscorlib.DNICollection<DNOutlineItemCollection>)
  ['{81A5CD9E-B686-3231-8741-CEA57B4F076D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_VisibleCount: Int32;

  { methods } 

    ///<summary>
    ///  Adds outline item to collection.
    ///</summary>
    ///  <param name="outline">The outline item to be added.</param>
    procedure Add(item: DNOutlineItemCollection);
    ///<summary>
    ///  Clears all items from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Always throws NotImplementedException
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    function &Contains(item: DNOutlineItemCollection): Boolean;
    ///<summary>
    ///  Copies the outline entries to an System.Array, starting at a particular System.Array index.
    ///</summary>
    ///  <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in array at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; arrayIndex: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    ///<summary>
    ///  Remove outline collection item.
    ///</summary>
    ///  <param name="item">Item to delete.</param>
    function Remove(item: DNOutlineItemCollection): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Gets the total number of outline items at all levels in the document outline hierarchy.
    ///</summary>
    property VisibleCount: Int32 read get_VisibleCount;
  end;

  TDNOutlines = class(TDNGenericImport<DNOutlinesClass, DNOutlines>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlineCollectionClass = interface(DNOutlinesClass)
  ['{6C3CCFAB-1EA2-5268-9757-31C6DAE6EFB1}']
  end;

  ///<summary>
  ///  Represents document outline hierarchy.
  ///</summary>
  [DNTypeName('Aspose.Pdf.OutlineCollection')]
  DNOutlineCollection = interface(DNOutlines)
  ['{E8C9D0C2-E81D-30C6-821F-5226AAFE2E79}']
  { getters & setters } 

    function get_VisibleCount: Int32;
    function get_Count: Int32;
    function get_First: DNOutlineItemCollection;
    function get_Last: DNOutlineItemCollection;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNOutlineItemCollection;

  { methods } 

    ///<summary>
    ///  Adds outline item to collection.
    ///</summary>
    ///  <param name="outline">The outline item to be added.</param>
    procedure Add(outline: DNOutlineItemCollection);
    ///<summary>
    ///  Deletes all outline items from the document outline.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Deletes the outline item with specified title from the document outline.
    ///</summary>
    ///  <param name="name">The title of outline item to be deleted</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Copies the outline items to an System.Array, starting at a particular System.Array index.
    ///</summary>
    ///  <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in array at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    ///<summary>
    ///  Clears all items from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Checks does collection contains given item.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    function &Contains(item: DNOutlineItemCollection): Boolean;
    ///<summary>
    ///  Always throws NotImplementedException
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    function Remove(item: DNOutlineItemCollection): Boolean; overload;
    ///<summary>
    ///  Remove item by index.
    ///</summary>
    ///  <param name="index">Index of the item to be removed.</param>
    procedure Remove(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Count is the sum of the number of visible descendent outline items at all levels. Note: please don't confuse with Count which is number if items in collection.
    ///</summary>
    property VisibleCount: Int32 read get_VisibleCount;
    ///<summary>
    ///  Count of collection items. Please dont confuse with VisibleCount: VisibleCount gets number of visible outline item on all levels.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an outline item representing the first top-level item in the outline.
    ///</summary>
    property First: DNOutlineItemCollection read get_First;
    ///<summary>
    ///  Gets an outline item representing the last top-level item in the outline.
    ///</summary>
    property Last: DNOutlineItemCollection read get_Last;
    ///<summary>
    ///  Gets a value indicating whether access to this collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to this collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNOutlineItemCollection read get_Item; default;
  end;

  TDNOutlineCollection = class(TDNGenericImport<DNOutlineCollectionClass, DNOutlineCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNOutlineItemCollectionClass = interface(DNOutlinesClass)
  ['{67E650CA-D4E9-5371-BEEB-107122375656}']
  { constructors } 

    ///<summary>
    ///  Initializes outline item instance using root hierarchy object.
    ///</summary>
    ///  <param name="outlines">Outlune collection.</param>
    {class} function init(outlines: DNOutlineCollection): DNOutlineItemCollection;

  end;

  ///<summary>
  ///  Represents outline entry in outline hierarchy of PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.OutlineItemCollection')]
  DNOutlineItemCollection = interface(DNOutlines)
  ['{A5993C5D-5881-394E-8C5B-53AAF929C18F}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Destination: DNIAppointment;
    procedure set_Destination(value: DNIAppointment);
    function get_Action: DNPdfAction;
    procedure set_Action(value: DNPdfAction);
    function get_Color: DDN.Aspose.Common.DNColor;
    procedure set_Color(value: DDN.Aspose.Common.DNColor);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_First: DNOutlineItemCollection;
    function get_Last: DNOutlineItemCollection;
    function get_Prev: DNOutlineItemCollection;
    function get_Next: DNOutlineItemCollection;
    function get_HasNext: Boolean;
    function get_Parent: DNOutlines;
    function get_VisibleCount: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Open: Boolean;
    procedure set_Open(value: Boolean);
    function get_Count: Int32;
    function get_Item(index: Int32): DNOutlineItemCollection;
    function get_Level: Int32;

  { methods } 

    ///<summary>
    ///  Deletes this outline item from the document outline hierarchy.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Deletes outline entry with specified name from the document outline hierarchy.
    ///</summary>
    ///  <param name="name">Title of outline entry will be deleted.</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Copies the outline entries to an System.Array, starting at a particular System.Array index.
    ///</summary>
    ///  <param name="array">The one-dimensional System.Array that is the destination. Must have zero-based indexing.</param>
    ///  <param name="index">The zero-based index in array at which copying begins.</param>
    procedure CopyTo(&array: TArray<DNOutlineItemCollection>; index: Int32);
    ///<summary>
    ///  Returns an enumerator that iterates through the collection.
    ///</summary>
    ///<returns>An System.Collections.IEnumerator object that can be used to iterate through the collection.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNOutlineItemCollection>;
    ///<summary>
    ///  Adds outline item to collection.
    ///</summary>
    ///  <param name="outline">The outline item to be added.</param>
    procedure Add(outline: DNOutlineItemCollection);
    ///<summary>
    ///  Inserts the outline item into collection at the specified place.
    ///</summary>
    ///  <param name="index">The index specifying place for inserting.</param>
    ///  <param name="outline">The outline item should be inserted.</param>
    procedure Insert(index: Int32; outline: DNOutlineItemCollection);
    ///<summary>
    ///  Clears all items from the collection.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Checks if collection contains given item.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    function &Contains(item: DNOutlineItemCollection): Boolean;
    ///<summary>
    ///  Remove outline collection item.
    ///</summary>
    ///  <param name="item">Item to delete.</param>
    function Remove(item: DNOutlineItemCollection): Boolean; overload;
    ///<summary>
    ///  Remove item by index.
    ///</summary>
    ///  <param name="index">Index of item to be deleted.</param>
    procedure Remove(index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the title for this outline item.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets the destination for this outline item.
    ///</summary>
    property Destination: DNIAppointment read get_Destination write set_Destination;
    ///<summary>
    ///  Gets or sets the action for this outline item.
    ///</summary>
    property Action: DNPdfAction read get_Action write set_Action;
    ///<summary>
    ///  Gets or sets the color for the title text of this outline item.
    ///</summary>
    property Color: DDN.Aspose.Common.DNColor read get_Color write set_Color;
    ///<summary>
    ///  Gets or sets italic flag for the title text of this outline item
    ///</summary>
    property Italic: Boolean read get_Italic write set_Italic;
    ///<summary>
    ///  Gets or sets bold flag for the title text of this outline item
    ///</summary>
    property Bold: Boolean read get_Bold write set_Bold;
    ///<summary>
    ///  Gets the outline item representing the first top-level item in the outline hierarchy.
    ///</summary>
    property First: DNOutlineItemCollection read get_First;
    ///<summary>
    ///  Gets the outline item representing the last top-level item in the outline hierarchy.
    ///</summary>
    property Last: DNOutlineItemCollection read get_Last;
    ///<summary>
    ///  Gets the outline item representing previous item relatively this item in the outline hierarchy.
    ///</summary>
    property Prev: DNOutlineItemCollection read get_Prev;
    ///<summary>
    ///  Gets the outline item representing next item relatively this item in the outline hierarchy.
    ///</summary>
    property Next: DNOutlineItemCollection read get_Next;
    ///<summary>
    ///  Check if outline item representing next item relatively this item in the outline hierarchy.
    ///</summary>
    property HasNext: Boolean read get_HasNext;
    ///<summary>
    ///  Gets the parent object of this outline item in the outline hierarchy.
    ///</summary>
    property Parent: DNOutlines read get_Parent;
    ///<summary>
    ///  Gets the total number of outline items at all levels in the document outline hierarchy.
    ///</summary>
    property VisibleCount: Int32 read get_VisibleCount;
    ///<summary>
    ///  Gets the value indicating whether access to this collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets the object that can be used to synchronize access to this collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Get or sets open status (true/false) for outline item.
    ///</summary>
    property Open: Boolean read get_Open write set_Open;
    ///<summary>
    ///  Count of collection items. Please dont confuse with VisibleCount: VisibleCount gets number of visible outline item on all levels.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNOutlineItemCollection read get_Item; default;
    ///<summary>
    ///  Gets hierarchy level of outline item.
    ///</summary>
    property Level: Int32 read get_Level;
  end;

  TDNOutlineItemCollection = class(TDNGenericImport<DNOutlineItemCollectionClass, DNOutlineItemCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{638AD88D-53F7-58D2-9F03-B13AC1F0F9A0}']
  { static methods } 

    ///<summary>
    ///  Translates rotation enumeration member into integer value.
    ///</summary>
    ///  <param name="rotation">Rotation enumeratioom member.</param>
    ///<returns>Corresponding integer value</returns>
    {class} function RotationToInt(rotation: DNRotation): Int32;
    ///<summary>
    ///  Translates integer value into corresponding rotation enumeration member.
    ///</summary>
    ///  <param name="rotation">Integer value to convert</param>
    ///<returns>Rotation enumeration member</returns>
    {class} function IntToRotation(rotation: Int32): DNRotation;

  end;

  ///<summary>
  ///  Class representing page of PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Page')]
  DNPage = interface(DDN.mscorlib.DNObject)
  ['{D6480862-ADD7-3CFB-91E5-82F330A3B8DE}']
  { getters & setters } 

    function get_BackgroundImage: DNImage;
    procedure set_BackgroundImage(value: DNImage);
    function get_TocInfo: DNTocInfo;
    procedure set_TocInfo(value: DNTocInfo);
    function get_Header: DNHeaderFooter;
    procedure set_Header(value: DNHeaderFooter);
    function get_Footer: DNHeaderFooter;
    procedure set_Footer(value: DNHeaderFooter);
    function get_Paragraphs: DNParagraphs;
    procedure set_Paragraphs(value: DNParagraphs);
    function get_PageInfo: DNPageInfo;
    procedure set_PageInfo(value: DNPageInfo);
    function get_Rect: DNRectangle;
    procedure set_Rect(value: DNRectangle);
    function get_ColorType: DNColorType;
    function get_NoteLineStyle: DNGraphInfo;
    procedure set_NoteLineStyle(value: DNGraphInfo);
    function get_TabOrder: DNTabOrder;
    procedure set_TabOrder(value: DNTabOrder);
    function get_Duration: Double;
    procedure set_Duration(value: Double);
    function get_Contents: DNOperatorCollection;
    function get_Group: DNGroup;
    procedure set_Group(value: DNGroup);
    function get_Annotations: DNAnnotationCollection;
    function get_Resources: DNResources;
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_TrimBox: DNRectangle;
    procedure set_TrimBox(value: DNRectangle);
    function get_ArtBox: DNRectangle;
    procedure set_ArtBox(value: DNRectangle);
    function get_BleedBox: DNRectangle;
    procedure set_BleedBox(value: DNRectangle);
    function get_CropBox: DNRectangle;
    procedure set_CropBox(value: DNRectangle);
    function get_MediaBox: DNRectangle;
    procedure set_MediaBox(value: DNRectangle);
    function get_Number: Int32;
    function get_RotationMatrix: DNMatrix;
    function get_Background: DNColor;
    procedure set_Background(value: DNColor);
    function get_Watermark: DNWatermark;
    procedure set_Watermark(value: DNWatermark);
    function get_Artifacts: DNArtifactCollection;
    function get_Actions: DNPageActionCollection;
    function get_FieldsInTabOrder: DDN.mscorlib.DNIList<DNField>;

  { events } 

    procedure add_OnBeforePageGenerate(value: DNPage_BeforePageGenerate);
    procedure remove_OnBeforePageGenerate(value: DNPage_BeforePageGenerate);

  { methods } 

    ///<summary>
    ///  Sends page to process with given page device.
    ///</summary>
    ///  <param name="device">
    ///  The device to process page.
    ///</param>
    ///  <param name="output">
    ///  Result stream which is used with device to save its output.
    ///</param>
    procedure SendTo(device: DNPageDevice; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" />
    ///  visitor object that provides functionality to work with annotations.
    ///</summary>
    ///  <param name="visitor">Annotation selector sobject.</param>
    procedure Accept(visitor: DNAnnotationSelector); overload;
    ///<summary>
    ///  Put stamp into page. Stamp can be page number, image or simple text, e.g. some logo.
    ///</summary>
    ///  <param name="stamp">
    ///  Stamp to add on the page.
    ///  Each stamp has its coordinates and corresponding properties regarding to the kind of stamp,
    ///  i.e. image or text value.
    ///</param>
    procedure AddStamp(stamp: DNStamp);
    ///<summary>
    ///  Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
    ///</summary>
    ///  <param name="imageStream">The stream of the image.</param>
    ///  <param name="imageRect">The position of the image.</param>
    procedure AddImage(imageStream: DDN.mscorlib.DNStream; imageRect: DNRectangle); overload;
    ///<summary>
    ///  Adds searchable image onto the page and locates it in the middle of specified rectangle saving image's proportion.
    ///</summary>
    ///  <param name="hocr">The hocr of the image.</param>
    ///  <param name="imageStream">The stream of the image.</param>
    ///  <param name="imageRect">The position of the image.</param>
    procedure AddImage(hocr: string; imageStream: DDN.mscorlib.DNStream; imageRect: DNRectangle); overload;
    ///<summary>
    ///  Adds image on page and places it depend on image rectangle position.
    ///</summary>
    ///  <param name="imageStream">The stream of the image.</param>
    ///  <param name="imageRect">The default position of the image on page.</param>
    ///  <param name="imageWidth">The width of the image.</param>
    ///  <param name="imageHeight">The height of the image.</param>
    ///  <param name="saveImageProportions">If the flag set to true than image placed in rectangle position; otherwise, the size of rectange is becoming equal to image size.</param>
    procedure AddImage(imageStream: DDN.mscorlib.DNStream; imageRect: DNRectangle; imageWidth: Int32; imageHeight: Int32; saveImageProportions: Boolean); overload;
    ///<summary>
    ///  Adds image onto the page and locates it in the middle of specified rectangle saving image's proportion.
    ///</summary>
    ///  <param name="imagePath">The path to image.</param>
    ///  <param name="rectangle">The position of the image.</param>
    procedure AddImage(imagePath: string; rectangle: DNRectangle); overload;
    ///<summary>
    ///  Sends page to process with given page device.
    ///</summary>
    ///  <param name="device">
    ///  The device to process page.
    ///</param>
    ///  <param name="outputFileName">
    ///  File which is used with device to save its output.
    ///</param>
    procedure SendTo(device: DNPageDevice; outputFileName: string); overload;
    ///<summary>
    ///  Removes all fields located on the page and place their values instead.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  visitor object that provides functionality to work with text objects.
    ///</summary>
    ///  <param name="visitor">Text absorber object.</param>
    procedure Accept(visitor: DNTextFragmentAbsorber); overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" />
    ///  visitor object that provides functionality to work with image placement objects.
    ///</summary>
    ///  <param name="visitor">Image placement absorber object.</param>
    procedure Accept(visitor: DNImagePlacementAbsorber); overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  visitor object that provides functionality to work with text objects.
    ///</summary>
    ///  <param name="visitor">Text absorber object.</param>
    procedure Accept(visitor: DNTextAbsorber); overload;
    ///<summary>
    ///  Sets page size for page.
    ///</summary>
    ///  <param name="width">Page width.</param>
    ///  <param name="height">Page size.</param>
    procedure SetPageSize(width: Double; height: Double);
    ///<summary>
    ///  Frees up memory
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  Converts images on page as grayscaled.
    ///</summary>
    procedure MakeGrayscale;
    ///<summary>
    ///  Clears cached data
    ///</summary>
    procedure FreeMemory;
    ///<summary>
    ///  Returns notifications about inside operations with page content. (Only notifications about paragraph events in text adding scenarios are supported now.)
    ///</summary>
    ///<returns>String representing notifications about inside operations with page content.</returns>
    function GetNotifications: string;
    ///<summary>
    ///  Converts current page as bitmap and than returns array of bytes.
    ///</summary>
    ///  <param name="resolution">The resolution.</param>
    ///<returns>Converted array of image bytes.</returns>
    function AsByteArray(resolution: DNResolution): TArray<Byte>;
    ///<summary>
    ///  Converts current page as xml in utf8 encoding.
    ///</summary>
    ///<returns>Converted xml string.</returns>
    function AsXml: string;
    function ConvertToPNGMemoryStream: DDN.mscorlib.DNMemoryStream;
    ///<summary>
    ///  Gets the flag whether page is blank or not.
    ///</summary>
    ///<value>The fill threshold value that manages the sensitivity of detection. Should be equal or greater than 0.01.</value>
    function IsBlank(fillThresholdFactor: Double): Boolean;
    ///<summary>
    ///  Returns rectangle of the page.
    ///</summary>
    ///  <param name="considerRotation">If true then rotation of the page will be considered in rect calculation.</param>
    ///<returns>Rectangle of the page.</returns>
    function GetPageRect(considerRotation: Boolean): DNRectangle;
    ///<summary>
    ///  Calculates bbox value - rectangle containing contents without visible margins.
    ///</summary>
    ///<returns>Bbox value - rectangle containing contents without visible margins</returns>
    function CalculateContentBBox: DNRectangle;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets background image for page (for generator only).
    ///</summary>
    property BackgroundImage: DNImage read get_BackgroundImage write set_BackgroundImage;
    ///<summary>
    ///  Gets or sets table of contents info.
    ///</summary>
    ///<value>The table of contents info - default null. If it set this page will contain table of contents.</value>
    property TocInfo: DNTocInfo read get_TocInfo write set_TocInfo;
    ///<summary>
    ///  Gets or sets page header.
    ///</summary>
    ///<value>The page header.</value>
    property Header: DNHeaderFooter read get_Header write set_Header;
    ///<summary>
    ///  Gets or sets page footer.
    ///</summary>
    ///<value>The page footer.</value>
    property Footer: DNHeaderFooter read get_Footer write set_Footer;
    ///<summary>
    ///  Gets the paragraphs.
    ///</summary>
    ///<value>The paragraphs.</value>
    property Paragraphs: DNParagraphs read get_Paragraphs write set_Paragraphs;
    ///<summary>
    ///  Gets or sets the page info.(for generator only)
    ///</summary>
    ///<value>The page info.</value>
    property PageInfo: DNPageInfo read get_PageInfo write set_PageInfo;
    ///<summary>
    ///  Gets or sets rectangle of the page. Page crop box is returned if specified, otherwise page media box is returned.
    ///  Please note that this property don't consider page rotation. To get page rectangle considering rotation please use ActualRect.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get page rectangle:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Page page = document.Pages[1];
    ///  Rectangle pageRect = page.Rect;
    ///</code></example>
    property Rect: DNRectangle read get_Rect write set_Rect;
    ///<summary>
    ///  Sets color type of the pages based on information getting from operators SetColor,
    ///  images and forms.
    ///</summary>
    property ColorType: DNColorType read get_ColorType;
    ///<summary>
    ///  Gets or sets the line style for notes.(for generator only)
    ///</summary>
    ///<value>The note style.</value>
    property NoteLineStyle: DNGraphInfo read get_NoteLineStyle write set_NoteLineStyle;
    ///<summary>
    ///  Gets or sets tab order of the page.
    ///  Possible values: Row, Column. Default, Manual
    ///</summary>
    property TabOrder: DNTabOrder read get_TabOrder write set_TabOrder;
    ///<summary>
    ///  Gets of set page display duration. This is time in seconds that page shall be displayed during presentation.
    ///  Returs -1 if duration is not defined.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get page duration
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Page page = document.Pages[1];
    ///  int pageRect = page.Duration;
    ///</code></example>
    property Duration: Double read get_Duration write set_Duration;
    ///<summary>
    ///  Gets collection of operators in the content stream of the page.
    ///<see cref="T:Aspose.Pdf.OperatorCollection" />
    ///</summary>
    ///<example>
    ///  Example is demonstrates how to scan operators stream of page.
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Operators contents = document.Pages[1].Contents;
    ///  foreach(Operator op in contents)
    ///  {
    ///  Console.WriteLine(op);
    ///  }
    ///</code></example>
    property Contents: DNOperatorCollection read get_Contents;
    ///<summary>
    ///  Gets or sets a group attributes class specifying the attributes of the page�s page group for use in the transparent imaging model.
    ///</summary>
    property Group: DNGroup read get_Group write set_Group;
    ///<summary>
    ///  Gets collection of page annotations.
    ///<see cref="P:Aspose.Pdf.Page.Annotations" />
    ///</summary>
    property Annotations: DNAnnotationCollection read get_Annotations;
    ///<summary>
    ///  Gets page resources. Resources object contains collections of images, forms and fonts.
    ///<see cref="P:Aspose.Pdf.Page.Resources" />
    ///</summary>
    ///<example>
    ///  Example demonstrates scan through page images:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  DocumentActions actions = document.Actions;
    ///  Resources resources = document.Pages[1].Resources;
    ///  foreach(XImage image in resources.Images)
    ///  {
    ///  Console.WriteLine(image.Width + ":" + image.Height);
    ///  }
    ///</code></example>
    property Resources: DNResources read get_Resources;
    ///<summary>
    ///  Gets or sets rotation of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to determine page rotation.
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Console.WriteLine(document.Pages[1].Rotate);
    ///</code></example>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Gets or sets trim box of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get trim box of the page:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Rectangle trimBox = document.Pages[1].TrimBox;
    ///</code></example>
    property TrimBox: DNRectangle read get_TrimBox write set_TrimBox;
    ///<summary>
    ///  Gets or sets art box of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get art box of the page:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Rectangle artBox = document.Pages[1].ArtBox;
    ///</code></example>
    property ArtBox: DNRectangle read get_ArtBox write set_ArtBox;
    ///<summary>
    ///  Gets or sets bleed box of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get bleed box of the page:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Rectangle bleedBox = document.Pages[1].BleedBox;
    ///</code></example>
    property BleedBox: DNRectangle read get_BleedBox write set_BleedBox;
    ///<summary>
    ///  Gets or sets crop box of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get crop box of the page:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Rectangle cropBox = document.Pages[1].CropBox;
    ///</code></example>
    property CropBox: DNRectangle read get_CropBox write set_CropBox;
    ///<summary>
    ///  Gets or sets media box of the page.
    ///</summary>
    ///<example>
    ///  Example demonstrates how to get media box of the page:
    ///<code lang="C#">
    ///  Document document = new Document("sample.pdf");
    ///  Rectangle mediaBox = document.Pages[1].MediaBox;
    ///</code></example>
    property MediaBox: DNRectangle read get_MediaBox write set_MediaBox;
    ///<summary>
    ///  Get number of the page.
    ///</summary>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  Gets transofmation matrix for the page.
    ///</summary>
    property RotationMatrix: DNMatrix read get_RotationMatrix;
    ///<summary>
    ///  Gets or sets the background color of the page.
    ///</summary>
    property Background: DNColor read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets the watermark of the page.
    ///</summary>
    property Watermark: DNWatermark read get_Watermark write set_Watermark;
    ///<summary>
    ///  Gets collection of artifacts on the page.
    ///</summary>
    property Artifacts: DNArtifactCollection read get_Artifacts;
    ///<summary>
    ///  Gets collection of page properties.
    ///</summary>
    property Actions: DNPageActionCollection read get_Actions;
    ///<summary>
    ///  Gets list of Field object in Tab order on this page.
    ///</summary>
    property FieldsInTabOrder: DDN.mscorlib.DNIList<DNField> read get_FieldsInTabOrder;
  end;

  TDNPage = class(TDNGenericImport<DNPageClass, DNPage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7D744C21-C80B-5295-91FB-678D648A0655}']
  end;

  ///<summary>
  ///  Collection of PDF document pages.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageCollection')]
  DNPageCollection = interface(DDN.mscorlib.DNICollection<DNPage>)
  ['{68CF7B1E-2910-3215-BEF0-FBF39636FED0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNPage;

  { methods } 

    ///<summary>
    ///  Adds page to collection.
    ///</summary>
    ///  <param name="entity">Page which should be added.</param>
    ///<returns>Added page.</returns>
    function Add(entity: DNPage): DNPage; overload;
    ///<summary>
    ///  Delete specified page.
    ///</summary>
    ///  <param name="index">Number of page that will be deleted. Pages numbers start from 1.</param>
    procedure Delete(index: Int32); overload;
    ///<summary>
    ///  Deletes all pages from collection.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Returns index of the specified page.
    ///</summary>
    ///<remarks>
    ///  Pages numbers start from 1.
    ///  Returns 0 in case collection doesn't contain the page.
    ///</remarks>
    ///  <param name="entity">Page object. Pages numbers start from 1.</param>
    ///<returns>Index of the page in collection.</returns>
    function IndexOf(entity: DNPage): Int32;
    ///<summary>
    ///  Copyies pages into document.
    ///</summary>
    ///  <param name="array">Array containing Pages object to insert into document. It must be Object[] or Page[].</param>
    ///  <param name="index">Starting index where pages will be inserted</param>
    procedure CopyTo(&array: TArray<DNPage>; index: Int32);
    ///<summary>
    ///  Returns enumerator of pages.
    ///</summary>
    ///<returns>Enumerator of pages</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNPage>;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Annotations.AnnotationSelector" />
    ///  visitor object that provides functionality to work with annotations.
    ///</summary>
    ///  <param name="visitor">AnnotationSelector Visitor</param>
    procedure Accept(visitor: DNAnnotationSelector); overload;
    ///<summary>
    ///  Delete pages specified which numbers are specified in array.
    ///</summary>
    ///  <param name="pages">Array of pages to be deleted.</param>
    procedure Delete(pages: TArray<Int32>); overload;
    ///<summary>
    ///  Insert empty apge into collection at the specified position.
    ///</summary>
    ///  <param name="pageNumber">Position of the new page.</param>
    ///<returns>Inserted page.</returns>
    function Insert(pageNumber: Int32): DNPage; overload;
    ///<summary>
    ///  Adds empty page
    ///</summary>
    ///<returns>Added page.</returns>
    function Add: DNPage; overload;
    procedure Add(pages: DDN.mscorlib.DNICollection<DNPage>); overload;
    ///<summary>
    ///  Inserts page into page collection at specified place.
    ///</summary>
    ///  <param name="pageNumber">Required page index in collection.</param>
    ///  <param name="entity">Page to be inserted.</param>
    ///<returns>Inserted page.</returns>
    function Insert(pageNumber: Int32; entity: DNPage): DNPage; overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.ImagePlacementAbsorber" />
    ///  visitor object that provides functionality to work with image placement objects.
    ///</summary>
    ///  <param name="visitor">Image placement object.</param>
    procedure Accept(visitor: DNImagePlacementAbsorber); overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  visitor object that provides functionality to work with text objects.
    ///</summary>
    ///  <param name="visitor">Text fragment absorber object.</param>
    procedure Accept(visitor: DNTextFragmentAbsorber); overload;
    ///<summary>
    ///  Accepts <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  visitor object that provides functionality to work with text objects.
    ///</summary>
    ///  <param name="visitor">Text absorber object.</param>
    procedure Accept(visitor: DNTextAbsorber); overload;
    ///<summary>
    ///  Adds to collection all pages from array.
    ///</summary>
    ///  <param name="pages">Array of pages which will be added.</param>
    procedure Add(pages: TArray<DNPage>); overload;
    procedure Insert(pageNumber: Int32; pages: DDN.mscorlib.DNICollection<DNPage>); overload;
    ///<summary>
    ///  Inserts pages of the array into document.
    ///</summary>
    ///  <param name="pageNumber">Starting number of the new pages. </param>
    ///  <param name="pages">Array of pages which will be inserted.</param>
    procedure Insert(pageNumber: Int32; pages: TArray<DNPage>); overload;
    ///<summary>
    ///  Removes all fields located on the pages and place their values instead.
    ///</summary>
    procedure Flatten;
    ///<summary>
    ///  Clears cached data
    ///</summary>
    procedure FreeMemory;
    ///<summary>
    ///  Determines whether this instance contains the object.
    ///</summary>
    ///  <param name="item">The item.</param>
    ///<returns><c>true</c> if [contains] [the specified item]; otherwise, <c>false</c>.
    ///</returns>
    ///<exception cref="T:System.NotSupportedException"></exception>
    function &Contains(item: DNPage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets count of pages in the document.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true of object is synchorinzed.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets synchronization object of the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets value indicating of collection is readonly. Always returns false.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNPage read get_Item; default;
  end;

  TDNPageCollection = class(TDNGenericImport<DNPageCollectionClass, DNPageCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6A7152F1-F317-5E62-97CE-6662F484D0D1}']
  { constructors } 

    {class} function init: DNPageInfo;

  end;

  ///<summary>
  ///  Represents the page information.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageInfo')]
  DNPageInfo = interface(DDN.mscorlib.DNObject)
  ['{AD5CC27F-865C-364B-9DB2-B2CD7B4B9849}']
  { getters & setters } 

    function get_AnyMargin: DNMarginInfo;
    procedure set_AnyMargin(value: DNMarginInfo);
    function get_DefaultTextState: DNTextState;
    procedure set_DefaultTextState(value: DNTextState);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_PureHeight: Double;
    function get_IsLandscape: Boolean;
    procedure set_IsLandscape(value: Boolean);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Width: Double;
    procedure set_Width(value: Double);

  { methods } 

    ///<summary>
    ///  Clone page info.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets page margin for any page except first.
    ///</summary>
    property AnyMargin: DNMarginInfo read get_AnyMargin write set_AnyMargin;
    ///<summary>
    ///  Gets or sets default font.
    ///</summary>
    property DefaultTextState: DNTextState read get_DefaultTextState write set_DefaultTextState;
    ///<summary>
    ///  Gets or sets page height.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets page pure height without margins.
    ///</summary>
    property PureHeight: Double read get_PureHeight;
    ///<summary>
    ///  Gets or sets is page landscaped.
    ///</summary>
    property IsLandscape: Boolean read get_IsLandscape write set_IsLandscape;
    ///<summary>
    ///  Gets or sets page margin.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets page width.
    ///</summary>
    property Width: Double read get_Width write set_Width;
  end;

  TDNPageInfo = class(TDNGenericImport<DNPageInfoClass, DNPageInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageLabelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{05B35F13-E28E-5736-9A74-2CD6BB970803}']
  { constructors } 

    ///<summary>
    ///  Constructor for page label.
    ///</summary>
    {class} function init: DNPageLabel;

  end;

  ///<summary>
  ///  Class representing Page Label range.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageLabel')]
  DNPageLabel = interface(DDN.mscorlib.DNObject)
  ['{A7BF32B9-2CFC-3B82-926A-C0BD3E1C6F41}']
  { getters & setters } 

    function get_StartingValue: Int32;
    procedure set_StartingValue(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_Prefix: string;
    procedure set_Prefix(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets starting value of the page numbering range.
    ///</summary>
    property StartingValue: Int32 read get_StartingValue write set_StartingValue;
    ///<summary>
    ///  Gets or sets numbering style.
    ///</summary>
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    ///<summary>
    ///  Gets or sets page number prefix.
    ///</summary>
    property Prefix: string read get_Prefix write set_Prefix;
  end;

  TDNPageLabel = class(TDNGenericImport<DNPageLabelClass, DNPageLabel>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageLabelCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C96EB941-3A2A-5F33-A4CB-9FFAACC02462}']
  end;

  ///<summary>
  ///  Class represeingting page label collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageLabelCollection')]
  DNPageLabelCollection = interface(DDN.mscorlib.DNObject)
  ['{46E8BEA2-5D04-3A3F-8837-0C9852EE52EC}']
  { methods } 

    ///<summary>
    ///  Gets page label by page index (page index is started from 0).
    ///</summary>
    ///  <param name="pageIndex">Index of the page.</param>
    ///<returns>Page label for specified page index or null if page label does not exist.</returns>
    function GetLabel(pageIndex: Int32): DNPageLabel;
    ///<summary>
    ///  Update label for given page index (page index is started from 0).
    ///</summary>
    ///  <param name="pageIndex">Index of page to change lable of the page.</param>
    ///  <param name="pageLabel">New label of the page.</param>
    procedure UpdateLabel(pageIndex: Int32; pageLabel: DNPageLabel);
    ///<summary>
    ///  Remove label by page index (page index is started from 0).
    ///</summary>
    ///  <param name="pageIndex">Index of page where label must be deleted.</param>
    ///<returns>true if operation was executed successfully.</returns>
    function RemoveLabel(pageIndex: Int32): Boolean;
    ///<summary>
    ///  Gets page indexes in collection.
    ///</summary>
    ///<returns>Array of integers which contains indexes of the pages.</returns>
    function GetPages: TArray<Int32>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageLabelCollection = class(TDNGenericImport<DNPageLabelCollectionClass, DNPageLabelCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageSizeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E005BE94-C6B1-5760-87DD-91AA121724D5}']
  { static getter & setter } 

    {class} function get_A0: DNPageSize;
    {class} function get_A1: DNPageSize;
    {class} function get_A2: DNPageSize;
    {class} function get_A3: DNPageSize;
    {class} function get_A4: DNPageSize;
    {class} function get_A5: DNPageSize;
    {class} function get_A6: DNPageSize;
    {class} function get_B5: DNPageSize;
    {class} function get_PageLetter: DNPageSize;
    {class} function get_PageLegal: DNPageSize;
    {class} function get_PageLedger: DNPageSize;
    {class} function get_P11x17: DNPageSize;

  { constructors } 

    ///<summary>
    ///  Constructor for PageSize.
    ///</summary>
    ///  <param name="x">Width of the page.</param>
    ///  <param name="y">Height of the page.</param>
    {class} function init(x: Single; y: Single): DNPageSize;

  { static propertys } 

    ///<summary>
    ///  A0 size (1189x840 mm).
    ///</summary>
    {class} property A0: DNPageSize read get_A0;
    ///<summary>
    ///  A1 size (840x594 mm).
    ///</summary>
    {class} property A1: DNPageSize read get_A1;
    ///<summary>
    ///  A2 size (594x420 mm).
    ///</summary>
    {class} property A2: DNPageSize read get_A2;
    ///<summary>
    ///  A3 size (420x297 mm).
    ///</summary>
    {class} property A3: DNPageSize read get_A3;
    ///<summary>
    ///  A4 size (297x210 mm).
    ///</summary>
    {class} property A4: DNPageSize read get_A4;
    ///<summary>
    ///  A5 size (210x148 mm).
    ///</summary>
    {class} property A5: DNPageSize read get_A5;
    ///<summary>
    ///  A6 size (148x105 mm).
    ///</summary>
    {class} property A6: DNPageSize read get_A6;
    ///<summary>
    ///  B5 size (250x176 mm).
    ///</summary>
    {class} property B5: DNPageSize read get_B5;
    ///<summary>
    ///  Letter size (279x216 mm).
    ///</summary>
    {class} property PageLetter: DNPageSize read get_PageLetter;
    ///<summary>
    ///  Legal size (356x216 mm).
    ///</summary>
    {class} property PageLegal: DNPageSize read get_PageLegal;
    ///<summary>
    ///  Ledger size (432x279 mm).
    ///</summary>
    {class} property PageLedger: DNPageSize read get_PageLedger;
    ///<summary>
    ///  11x17 inches format.
    ///</summary>
    {class} property P11x17: DNPageSize read get_P11x17;
  end;

  ///<summary>
  ///  Class representing size of page in PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageSize')]
  DNPageSize = interface(DDN.mscorlib.DNObject)
  ['{4FCCDFCF-49A0-3323-9140-6A8EF9427CA1}']
  { getters & setters } 

    function get_Width: Single;
    procedure set_Width(value: Single);
    function get_Height: Single;
    procedure set_Height(value: Single);
    function get_IsLandscape: Boolean;
    procedure set_IsLandscape(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets page width.
    ///</summary>
    property Width: Single read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets page height.
    ///</summary>
    property Height: Single read get_Height write set_Height;
    ///<summary>
    ///  Gets page orientation. Returns true of this is landscape orientation and false if this is portrait.
    ///</summary>
    property IsLandscape: Boolean read get_IsLandscape write set_IsLandscape;
  end;

  TDNPageSize = class(TDNGenericImport<DNPageSizeClass, DNPageSize>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNParagraphsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F706D6C6-5264-5705-A00A-076A66CA667B}']
  { constructors } 

    {class} function init: DNParagraphs;

  end;

  ///<summary>
  ///  This class represents paragraph collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Paragraphs')]
  DNParagraphs = interface(DDN.mscorlib.DNObject)
  ['{C5B75988-47F6-3315-8929-4AFEDB83B999}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNBaseParagraph;
    procedure set_Item(index: Int32; value: DNBaseParagraph);

  { methods } 

    ///<summary>
    ///  Add paragraph to collection.
    ///</summary>
    ///  <param name="paragraph">The paragraph.</param>
    procedure Add(paragraph: DNBaseParagraph);
    ///<summary>
    ///  Remove paragraphs range.
    ///</summary>
    ///  <param name="index">The first paragraph index.</param>
    ///  <param name="count">The paragraphs count.</param>
    ///<returns>The paragraphs collection</returns>
    function GetRange(index: Int32; count: Int32): DNParagraphs;
    ///<summary>
    ///  Remove paragraphs range.
    ///</summary>
    ///  <param name="index">The first paragraph index.</param>
    ///  <param name="count">The paragraphs count.</param>
    procedure RemoveRange(index: Int32; count: Int32);
    ///<summary>
    ///  Remove paragraph from collection.
    ///</summary>
    ///  <param name="paragraph">The paragraph.</param>
    procedure Remove(paragraph: DNBaseParagraph);
    ///<summary>
    ///  Insert paragraph to collection.
    ///</summary>
    ///  <param name="index">The index for paragraph.</param>
    ///  <param name="paragraph">The paragraph.</param>
    procedure Insert(index: Int32; paragraph: DNBaseParagraph);
    ///<summary>
    ///  Clear paragraphs.
    ///</summary>
    procedure Clear;
    procedure InsertRange(index: Int32; collection: DDN.mscorlib.DNIEnumerable<DNBaseParagraph>);
    ///<summary>
    ///  Gets the enumerator.
    ///</summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNBaseParagraph>;
    ///<summary>
    ///  Clones a new <see cref="M:Aspose.Pdf.Paragraphs.Clone" />
    ///  object.
    ///</summary>
    ///<returns>The new <see cref="M:Aspose.Pdf.Paragraphs.Clone" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Get paragraphs count.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNBaseParagraph read get_Item write set_Item; default;
  end;

  TDNParagraphs = class(TDNGenericImport<DNParagraphsClass, DNParagraphs>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfANonSpecificationFlagsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5AC89A42-EC31-5E8A-8DAE-B7772E93C05E}']
  { constructors } 

    {class} function init: DNPdfANonSpecificationFlags;

  end;

  ///<summary>
  ///  This class holds flags to control PDF/A conversion for cases when source PDF document doesn't
  ///  correspond to PDF specification. If flags of this clas are used it decreases performance
  ///  but it's necessary when source PDF document can't be convert into PDF/A format by usual way.
  ///  By default all flags are set to false.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfANonSpecificationFlags')]
  DNPdfANonSpecificationFlags = interface(DDN.mscorlib.DNObject)
  ['{3BBEAECD-A046-3FD2-8CFF-D0E2A678C92D}']
  { getters & setters } 

    function get_CheckDifferentNamesInFontDictionaries: Boolean;
    procedure set_CheckDifferentNamesInFontDictionaries(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Some PDF documents contain fonts which have different names in internal data.
    ///  Use of this flag enforces special processing logic for cases when fields
    ///  BaseFont and FontDescriptor.FontName are different.
    ///</summary>
    property CheckDifferentNamesInFontDictionaries: Boolean read get_CheckDifferentNamesInFontDictionaries write set_CheckDifferentNamesInFontDictionaries;
  end;

  TDNPdfANonSpecificationFlags = class(TDNGenericImport<DNPdfANonSpecificationFlagsClass, DNPdfANonSpecificationFlags>) end;

  //-------------namespace: Aspose.Pdf.PdfAOptionClasses----------------
  DNFontEmbeddingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C99BC1D-851D-59BC-906C-7A484B55EA8C}']
  { constructors } 

    {class} function init: DNFontEmbeddingOptions;

  end;

  ///<summary>
  ///  PDF/A standard requires, that all fonts must be embedded into document.
  ///  This class includes flags for cases when it's not possible to embed some font cause this font is absent
  ///  on destination PC.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfAOptionClasses.FontEmbeddingOptions')]
  DNFontEmbeddingOptions = interface(DDN.mscorlib.DNObject)
  ['{6F2D3437-E531-3F50-B847-BFBCE508E6CB}']
  { getters & setters } 

    function get_UseDefaultSubstitution: Boolean;
    procedure set_UseDefaultSubstitution(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Declares to substitute non-embedded font using default font substitution strategy. By default false;
    ///</summary>
    property UseDefaultSubstitution: Boolean read get_UseDefaultSubstitution write set_UseDefaultSubstitution;
  end;

  TDNFontEmbeddingOptions = class(TDNGenericImport<DNFontEmbeddingOptionsClass, DNFontEmbeddingOptions>) end;

  //-------------namespace: Aspose.Pdf.PdfAOptionClasses----------------
  DNToUnicodeProcessingRulesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CD08EE3-EB3D-511B-866A-8CF35DB185AB}']
  { constructors } 

    ///<summary>
    ///  Constructor
    ///</summary>
    {class} function init: DNToUnicodeProcessingRules; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="removeSpaces">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.RemoveSpacesFromCMapNames" />
    ///  flag</param>
    {class} function init(removeSpaces: Boolean): DNToUnicodeProcessingRules; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="removeSpaces">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.RemoveSpacesFromCMapNames" />
    ///  flag</param>
    ///  <param name="mapNonLinkedUnicodesOnSpace">sets <see cref="P:Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules.MapNonLinkedSymbolsOnSpace" />
    ///  flag</param>
    {class} function init(removeSpaces: Boolean; mapNonLinkedUnicodesOnSpace: Boolean): DNToUnicodeProcessingRules; overload;

  end;

  ///<summary>
  ///  This class describes rules which can be used to solve Adobe Preflight error
  ///  "Text cannot be mapped to Unicode".
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfAOptionClasses.ToUnicodeProcessingRules')]
  DNToUnicodeProcessingRules = interface(DDN.mscorlib.DNObject)
  ['{48CAD510-7538-3BC4-A029-DA7C5BA8A8E1}']
  { getters & setters } 

    function get_RemoveSpacesFromCMapNames: Boolean;
    procedure set_RemoveSpacesFromCMapNames(value: Boolean);
    function get_MapNonLinkedSymbolsOnSpace: Boolean;
    procedure set_MapNonLinkedSymbolsOnSpace(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Some fonts have ToUnicode character code maps with spaces in names. These spaces could call errors
    ///  with unicode text mapping. This flag commands to remove spaces from names of ToUnicode character code maps.
    ///  By default false.
    ///</summary>
    property RemoveSpacesFromCMapNames: Boolean read get_RemoveSpacesFromCMapNames write set_RemoveSpacesFromCMapNames;
    ///<summary>
    ///  Some fonts doesn't provide information about unicodes for some text symbols.
    ///  This lack of information calls an error "Text cannot be mapped to Unicode".
    ///  Use this flag to map non-linked symbols on unicode "space"(code 32).
    ///</summary>
    property MapNonLinkedSymbolsOnSpace: Boolean read get_MapNonLinkedSymbolsOnSpace write set_MapNonLinkedSymbolsOnSpace;
  end;

  TDNToUnicodeProcessingRules = class(TDNGenericImport<DNToUnicodeProcessingRulesClass, DNToUnicodeProcessingRules>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfASymbolicFontEncodingStrategyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6C25B6EF-AAEB-54FA-8C82-0AA3AEF2C998}']
  { constructors } 

    ///<summary>
    ///  Constructor. Sets default subtable (mac 1,0)
    ///</summary>
    {class} function init: DNPdfASymbolicFontEncodingStrategy; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="preferredEncodingTable">encoding subtable which will be used in precedence to mac subtable(1,0)</param>
    {class} function init(preferredEncodingTable: DNQueueItem_CMapEncodingTableType): DNPdfASymbolicFontEncodingStrategy; overload;

  end;

  ///<summary>
  ///  This class describes rules which can be used to tune process of copy encoding data for cases
  ///  when TrueType symbolic font has more than one encoding.
  ///  Some PDF documents after conversion into PDF/A format could have error
  ///  "More than one encoding in symbolic TrueType font's cmap".
  ///  What is a reason of this error? All TrueType symbolic fonts have special table "cmap"
  ///  in it's internal data. This table maps character codes to glyph indices.
  ///  And this table could contain different encoding subtables which
  ///  describe encodings used. See advanced info about cmap tables at
  ///  https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6cmap.html.
  ///  Usually cmap table contains several encoding subtables, but PDF/A standard requires
  ///  that only one encoding subtable (3,0) must be leaved for this font in PDF/A document.
  ///  And key question here - what data must be taken from another subtables to copy into
  ///  destination encoding table (3,0)? Majority of fonts have 'well-formed' cmap tables where
  ///  every encoding subtable is fully consistent with another subtable. But some fonts
  ///  have cmap tables with collisions - where for example one subtable has glyph index
  ///  100 for unicode 100, but another subtable has glyph index 200 for the same unicode 100.
  ///  To solve this problems special strategy needed.
  ///  By default following strategy used:
  ///  mac subtable(1,0) is looked for. If this table is found, only this data used to fill destination
  ///  table (3,0). If mac subtable is not found then all subtables except (3,0) are iterated
  ///  and used to copy data into destination (3,0) subtable. Also mapping for every unicode(unicode, glyph index)
  ///  is copied into destination table only if destination table has no this unicode at current moment.
  ///  So, for example if first subtabe has glyph index 100 for unicode 100, and next subtable has glyph
  ///  index 200 for the same unicode 100, only data from first subtable (unicode=100, glyph index = 100) will be copied.
  ///  So each previous subtable takes precedence over the next.
  ///  Properties of this class <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy" />
  ///  help tune default behaviour.
  ///  If property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.PreferredCmapEncodingTable" />
  ///  of type <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
  ///  is set, then relevant subtable will be used in precedence to mac subtable(1,0). Value 'MacTable' from
  ///  enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
  ///  has no sense in this case, cause it
  ///  points on the same mac subtable (1,0) which will be used by default.
  ///  Property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.CmapEncodingTablesPriorityQueue" />
  ///  discards all priorities for any subtable.
  ///  If this property is set, then only subtables from declared queue will be used in specified order.
  ///  If subtables specified are not found then default iteration of all subtables and copy strategy described above
  ///  will be used.
  ///  Object <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem" />
  ///  specifies encoding subtable used. This subtable can be set
  ///  via combination of members(PlatformID, PlatformSpecificId) or via <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
  ///  enumeration.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy')]
  DNPdfASymbolicFontEncodingStrategy = interface(DDN.mscorlib.DNObject)
  ['{D1A327FE-6AEC-3BC0-9D49-F0BF55EE02A4}']
  { getters & setters } 

    function get_PreferredCmapEncodingTable: DNQueueItem_CMapEncodingTableType;
    procedure set_PreferredCmapEncodingTable(value: DNQueueItem_CMapEncodingTableType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies subtable which will be used in precedence to mac subtable(1,0). Value 'MacTable' from
    ///  enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
    ///  has no sense in this case.
    ///</summary>
    property PreferredCmapEncodingTable: DNQueueItem_CMapEncodingTableType read get_PreferredCmapEncodingTable write set_PreferredCmapEncodingTable;
  end;

  TDNPdfASymbolicFontEncodingStrategy = class(TDNGenericImport<DNPdfASymbolicFontEncodingStrategyClass, DNPdfASymbolicFontEncodingStrategy>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfASymbolicFontEncodingStrategy_QueueItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{72DB0F83-4513-5E0A-BAA5-C6357C0607B6}']
  { constructors } 

    ///<summary>
    ///  Constructor, specifies mac subtable(1,0) by default
    ///</summary>
    {class} function init: DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="platformID">Platform identifier for encoding subtable</param>
    ///  <param name="platformSpecificID">Platform-specific encoding identifier for encoding subtable</param>
    {class} function init(platformID: UInt16; platformSpecificID: UInt16): DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="cmapTable">encoding subtable</param>
    {class} function init(cmapTable: DNQueueItem_CMapEncodingTableType): DNPdfASymbolicFontEncodingStrategy_QueueItem; overload;

  end;

  ///<summary>
  ///  Specifies encoding subtable. Each encoding subtable has unique combination
  ///  of parameters (PlatformID, PlatformSpecificId). Enumeration <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
  ///  and property <see cref="P:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTable" />
  ///  were implemented to make easier
  ///  set of encoding subtable needed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfASymbolicFontEncodingStrategy+QueueItem')]
  DNPdfASymbolicFontEncodingStrategy_QueueItem = interface(DDN.mscorlib.DNObject)
  ['{5CA09214-EEC2-3C9C-B94B-C6CAC6875D5B}']
  { getters & setters } 

    function get_CMapEncodingTable: DNQueueItem_CMapEncodingTableType;
    procedure set_CMapEncodingTable(value: DNQueueItem_CMapEncodingTableType);
    function get_PlatformId: UInt16;
    procedure set_PlatformId(value: UInt16);
    function get_PlatformSpecificId: UInt16;
    procedure set_PlatformSpecificId(value: UInt16);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Specifies encoding subtable via <see cref="T:Aspose.Pdf.PdfASymbolicFontEncodingStrategy.QueueItem.CMapEncodingTableType" />
    ///  enumeration
    ///</summary>
    property CMapEncodingTable: DNQueueItem_CMapEncodingTableType read get_CMapEncodingTable write set_CMapEncodingTable;
    ///<summary>
    ///  Platform identifier for encoding subtable
    ///</summary>
    property PlatformId: UInt16 read get_PlatformId write set_PlatformId;
    ///<summary>
    ///  Platform-specific encoding identifier for encoding subtable
    ///</summary>
    property PlatformSpecificId: UInt16 read get_PlatformSpecificId write set_PlatformSpecificId;
  end;

  TDNPdfASymbolicFontEncodingStrategy_QueueItem = class(TDNGenericImport<DNPdfASymbolicFontEncodingStrategy_QueueItemClass, DNPdfASymbolicFontEncodingStrategy_QueueItem>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfFormatConversionOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B3006E1-0F66-59BE-B55E-4B4E123B9EDF}']
  { static getter & setter } 

    {class} function get_Default: DNPdfFormatConversionOptions;

  { constructors } 

    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    {class} function init(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    {class} function init(outputLogFileName: string; format: DNPdfFormat): DNPdfFormatConversionOptions; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="format">The pdf format.</param>
    {class} function init(format: DNPdfFormat): DNPdfFormatConversionOptions; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    {class} function init(format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="outputLogFileName">Path to file where comments will be stored.</param>
    ///  <param name="format">The pdf format.</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    ///  <param name="transparencyAction">Action for image masked objects</param>
    {class} function init(outputLogFileName: string; format: DNPdfFormat; action: DNConvertErrorAction; transparencyAction: DNConvertTransparencyAction): DNPdfFormatConversionOptions; overload;
    ///<summary>
    ///  Constructor
    ///</summary>
    ///  <param name="outputLogStream">Stream where comments will be stored</param>
    ///  <param name="format">The pdf format</param>
    ///  <param name="action">Action for objects that can not be converted</param>
    {class} function init(outputLogStream: DDN.mscorlib.DNStream; format: DNPdfFormat; action: DNConvertErrorAction): DNPdfFormatConversionOptions; overload;

  { static propertys } 

    ///<summary>
    ///  Gets PdfFormatConversionOptions object with default parameters
    ///</summary>
    {class} property &Default: DNPdfFormatConversionOptions read get_Default;
  end;

  ///<summary>
  ///  represents set of options for convert PDF document
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfFormatConversionOptions')]
  DNPdfFormatConversionOptions = interface(DDN.mscorlib.DNObject)
  ['{253435DC-1FF0-3C07-979C-3454EBD47E16}']
  { getters & setters } 

    function get_IsAsyncImageStreamsConversionMode: Boolean;
    procedure set_IsAsyncImageStreamsConversionMode(value: Boolean);
    function get_IsLowMemoryMode: Boolean;
    procedure set_IsLowMemoryMode(value: Boolean);
    function get_Format: DNPdfFormat;
    procedure set_Format(value: DNPdfFormat);
    function get_LogFileName: string;
    procedure set_LogFileName(value: string);
    function get_LogStream: DDN.mscorlib.DNStream;
    procedure set_LogStream(value: DDN.mscorlib.DNStream);
    function get_ErrorAction: DNConvertErrorAction;
    procedure set_ErrorAction(value: DNConvertErrorAction);
    function get_TransparencyAction: DNConvertTransparencyAction;
    procedure set_TransparencyAction(value: DNConvertTransparencyAction);
    function get_ConvertSoftMaskAction: DNConvertSoftMaskAction;
    procedure set_ConvertSoftMaskAction(value: DNConvertSoftMaskAction);
    function get_NonSpecificationCases: DNPdfANonSpecificationFlags;
    function get_SymbolicFontEncodingStrategy: DNPdfASymbolicFontEncodingStrategy;
    procedure set_SymbolicFontEncodingStrategy(value: DNPdfASymbolicFontEncodingStrategy);
    function get_AlignText: Boolean;
    procedure set_AlignText(value: Boolean);
    function get_PuaTextProcessingStrategy: DNPdfFormatConversionOptions_PuaProcessingStrategy;
    procedure set_PuaTextProcessingStrategy(value: DNPdfFormatConversionOptions_PuaProcessingStrategy);
    function get_OptimizeFileSize: Boolean;
    procedure set_OptimizeFileSize(value: Boolean);
    function get_ExcludeFontsStrategy: DNPdfFormatConversionOptions_RemoveFontsStrategy;
    procedure set_ExcludeFontsStrategy(value: DNPdfFormatConversionOptions_RemoveFontsStrategy);
    function get_FontEmbeddingOptions: DNFontEmbeddingOptions;
    function get_UnicodeProcessingRules: DNToUnicodeProcessingRules;
    procedure set_UnicodeProcessingRules(value: DNToUnicodeProcessingRules);
    function get_IccProfileFileName: string;
    procedure set_IccProfileFileName(value: string);
    function get_NotAccessibleFonts: TArray<string>;

  { fields getter & setter } 

   function __fakeFieldGet_AlignStrategy: DNPdfFormatConversionOptions_SegmentAlignStrategy;
   procedure __fakeFieldSet_AlignStrategy(value: DNPdfFormatConversionOptions_SegmentAlignStrategy);

  { fields } 

    ///<summary>
    ///  Strategy to align text. This parameter has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.AlignText" />
    ///  is set to true.
    ///</summary>
   property AlignStrategy: DNPdfFormatConversionOptions_SegmentAlignStrategy read __fakeFieldGet_AlignStrategy write __fakeFieldSet_AlignStrategy;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets run of image streams in async mode.
    ///</summary>
    property IsAsyncImageStreamsConversionMode: Boolean read get_IsAsyncImageStreamsConversionMode write set_IsAsyncImageStreamsConversionMode;
    ///<summary>
    ///  Is low memory conversion mode enabled
    ///</summary>
    property IsLowMemoryMode: Boolean read get_IsLowMemoryMode write set_IsLowMemoryMode;
    ///<summary>
    ///  PDF format.
    ///</summary>
    property Format: DNPdfFormat read get_Format write set_Format;
    ///<summary>
    ///  Path to file where comments will be stored.
    ///</summary>
    property LogFileName: string read get_LogFileName write set_LogFileName;
    ///<summary>
    ///  Stream where comments will be stored.
    ///</summary>
    property LogStream: DDN.mscorlib.DNStream read get_LogStream write set_LogStream;
    ///<summary>
    ///  Action for objects that can not be converted
    ///</summary>
    property ErrorAction: DNConvertErrorAction read get_ErrorAction write set_ErrorAction;
    ///<summary>
    ///  Action for image masked objects
    ///</summary>
    property TransparencyAction: DNConvertTransparencyAction read get_TransparencyAction write set_TransparencyAction;
    ///<summary>
    ///  Action for images with soft mask.
    ///</summary>
    property ConvertSoftMaskAction: DNConvertSoftMaskAction read get_ConvertSoftMaskAction write set_ConvertSoftMaskAction;
    ///<summary>
    ///  Holds flags to control PDF/A conversion process for cases when source document
    ///  doesn't correspond to PDF/A specification.
    ///</summary>
    property NonSpecificationCases: DNPdfANonSpecificationFlags read get_NonSpecificationCases;
    ///<summary>
    ///  Strategy to copy encoding data for symbolic fonts if symbolic TrueType font
    ///  has more than one encoding subtable.
    ///</summary>
    property SymbolicFontEncodingStrategy: DNPdfASymbolicFontEncodingStrategy read get_SymbolicFontEncodingStrategy write set_SymbolicFontEncodingStrategy;
    ///<summary>
    ///  This flag controls text alignment in converted document. By default document conversion
    ///  doesn't affect text alignment and leave text as is. But in some cases font substitution
    ///  causes text overlapping or extra spaces in converted document. When  this flag is set
    ///  special alignment operations will be performed. This flag should be set only for documents
    ///  which have problems with overlapped text or extra text spaces cause using of this flag decrease
    ///  performance and in some cases could corrupt text content.
    ///</summary>
    property AlignText: Boolean read get_AlignText write set_AlignText;
    ///<summary>
    ///  Strategy to process symbols from unicode Private Use Area (PUA).
    ///</summary>
    property PuaTextProcessingStrategy: DNPdfFormatConversionOptions_PuaProcessingStrategy read get_PuaTextProcessingStrategy write set_PuaTextProcessingStrategy;
    ///<summary>
    ///  Gets or sets a flag which enables/disables special conversion mode to get PDF/A document with reduced file size.
    ///  Now this flag impacts on optimization of fonts used in PDF document, possibly, in future, this flag
    ///  also will be used to switch on optimization for another data structures, such as graphic.
    ///  Set of this flag and mode could significantly reduce file size but at the same time it could
    ///  significantly decrease performance of conversion.
    ///</summary>
    property OptimizeFileSize: Boolean read get_OptimizeFileSize write set_OptimizeFileSize;
    ///<summary>
    ///  Strategy(ies) to exclude superfluous fonts and reduce document file size.
    ///  This parameter has sense only when flag <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.OptimizeFileSize" />
    ///  is set to true.
    ///  By default combination of strategies <see cref="P:Aspose.Pdf.PdfFormatConversionOptions.SubsetFonts" />
    ///  and
    ///<see cref="P:Aspose.Pdf.PdfFormatConversionOptions.RemoveDuplicatedFonts" />
    ///  is used.
    ///</summary>
    property ExcludeFontsStrategy: DNPdfFormatConversionOptions_RemoveFontsStrategy read get_ExcludeFontsStrategy write set_ExcludeFontsStrategy;
    ///<summary>
    ///  Options for cases when it's not possible to embed some fonts into PDF document.
    ///</summary>
    property FontEmbeddingOptions: DNFontEmbeddingOptions read get_FontEmbeddingOptions;
    ///<summary>
    ///  Rules to solve problems with unicode mapping. Can be null.
    ///</summary>
    property UnicodeProcessingRules: DNToUnicodeProcessingRules read get_UnicodeProcessingRules write set_UnicodeProcessingRules;
    ///<summary>
    ///  Gets or sets the filename of icc profile name. In case of null the default icc profile used.
    ///</summary>
    property IccProfileFileName: string read get_IccProfileFileName write set_IccProfileFileName;
    ///<summary>
    ///  This property is out-property. It holds all the fonts(font names) which were not found on computer
    ///  at last PDF/A conversion.
    ///</summary>
    property NotAccessibleFonts: TArray<string> read get_NotAccessibleFonts;
  end;

  TDNPdfFormatConversionOptions = class(TDNGenericImport<DNPdfFormatConversionOptionsClass, DNPdfFormatConversionOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7A74C188-A8E0-54DE-B5C9-676FED73E26B}']
  { static getter & setter } 

    {class} function get_Trivial: DNPoint;

  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Point" />
    ///  .
    ///</summary>
    ///  <param name="x">
    ///  x coordinate value.
    ///</param>
    ///  <param name="y">
    ///  y coordinate value.
    ///</param>
    {class} function init(x: Double; y: Double): DNPoint;

  { static propertys } 

    ///<summary>
    ///  Gets point with zero coordinates.
    ///</summary>
    {class} property Trivial: DNPoint read get_Trivial;
  end;

  ///<summary>
  ///  Represent point with fractional coordinates.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Point')]
  DNPoint = interface(DDN.mscorlib.DNObject)
  ['{191D7218-81E8-3B2A-82D5-C91E4282BC71}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);

  { methods } 

    ///<summary>
    ///  Converts point into System.Drawing.PointF object.
    ///</summary>
    ///<returns>PointF structure.</returns>
    function ToPoint: DDN.Aspose.Common.DNPointF;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  X coordinate value.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate value.
    ///</summary>
    property Y: Double read get_Y write set_Y;
  end;

  TDNPoint = class(TDNGenericImport<DNPointClass, DNPoint>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPoint3DClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1BF7C994-7448-528F-9C0A-E6964AB6644E}']
  { static getter & setter } 

    {class} function get_Trivial: DNPoint3D;

  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Point3D" />
    ///  .
    ///</summary>
    ///  <param name="x">
    ///  x coordinate value.
    ///</param>
    ///  <param name="y">
    ///  y coordinate value.
    ///</param>
    ///  <param name="z">
    ///  z coordinate value.
    ///</param>
    {class} function init(x: Double; y: Double; z: Double): DNPoint3D;

  { static propertys } 

    ///<summary>
    ///  Gets point with zero coordinates.
    ///</summary>
    {class} property Trivial: DNPoint3D read get_Trivial;
  end;

  ///<summary>
  ///  Represent point with fractional coordinates.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Point3D')]
  DNPoint3D = interface(DDN.mscorlib.DNObject)
  ['{5031AEC6-348E-343A-A754-5B16259CBB17}']
  { getters & setters } 

    function get_X: Double;
    procedure set_X(value: Double);
    function get_Y: Double;
    procedure set_Y(value: Double);
    function get_Z: Double;
    procedure set_Z(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  X coordinate value.
    ///</summary>
    property X: Double read get_X write set_X;
    ///<summary>
    ///  Y coordinate value.
    ///</summary>
    property Y: Double read get_Y write set_Y;
    ///<summary>
    ///  Z coordinate value.
    ///</summary>
    property Z: Double read get_Z write set_Z;
  end;

  TDNPoint3D = class(TDNGenericImport<DNPoint3DClass, DNPoint3D>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRectangleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7826945C-C019-5D0F-94AD-320CA8E34324}']
  { static getter & setter } 

    {class} function get_Trivial: DNRectangle;

  { constructors } 

    ///<summary>
    ///  Constructor of Rectangle.
    ///</summary>
    ///  <param name="llx">X of lower left corner.</param>
    ///  <param name="lly">Y of lower left corner.</param>
    ///  <param name="urx">X of upper right corner.</param>
    ///  <param name="ury">Y of upper right corner.</param>
    {class} function init(llx: Double; lly: Double; urx: Double; ury: Double): DNRectangle;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNRectangle;

  { static fields } 

    ///<summary>
    ///  Empty rectangle
    ///</summary>
    {class} property Empty: DNRectangle read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  Initializes new rectangle from given instance of System.Drawing.Rectangle.
    ///</summary>
    ///  <param name="src">Source rectangle which position and size will be set to new rectangle.</param>
    ///<returns>New rectangle.</returns>
    {class} function FromRect(src: DDN.Aspose.Common.DNRectangle): DNRectangle;
    ///<summary>
    ///  Try to parse string and extract from it rectangle components llx, lly, urx, ury.
    ///</summary>
    ///  <param name="value">
    ///  String to parse.
    ///</param>
    ///<returns>
    ///  Rectangle object.
    ///</returns>
    {class} function Parse(value: string): DNRectangle;

  { static propertys } 

    ///<summary>
    ///  Initializes trivial rectangle i.e. rectangle with zero position and size.
    ///</summary>
    {class} property Trivial: DNRectangle read get_Trivial;
  end;

  ///<summary>
  ///  Class represents rectangle.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Rectangle')]
  DNRectangle = interface(DDN.mscorlib.DNObject)
  ['{64BD6E47-7053-3088-B952-387AA3788B2D}']
  { getters & setters } 

    function get_Width: Double;
    function get_Height: Double;
    function get_LLX: Double;
    procedure set_LLX(value: Double);
    function get_LLY: Double;
    procedure set_LLY(value: Double);
    function get_URX: Double;
    procedure set_URX(value: Double);
    function get_URY: Double;
    procedure set_URY(value: Double);
    function get_IsTrivial: Boolean;
    function get_IsEmpty: Boolean;
    function get_IsPoint: Boolean;

  { methods } 

    ///<summary>
    ///  Converts rectangle to instance of System.Drawing.Rectangle. Floating-point positions and size are truncated.
    ///</summary>
    ///<returns>Result of conversion.</returns>
    function ToRect: DDN.Aspose.Common.DNRectangle;
    ///<summary>
    ///  Gets rectangle string representation.
    ///</summary>
    ///<returns>
    ///  String has format llx,lly,urx,ury.
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  Check if rectangles are equal i.e. have same position and sizes.
    ///</summary>
    ///  <param name="other">Rectangle which will be compared.</param>
    ///<returns>True if rectangles are eqals, false otherwise.</returns>
    function Equals(other: DNRectangle): Boolean; overload;
    ///<summary>
    ///  Check if rectangles are near equal i.e. have near same (up to delta) position and sizes.
    ///</summary>
    ///  <param name="other">Rectangle which will be compared.</param>
    ///  <param name="delta">Value of comparation tollerance.</param>
    ///<returns>True if rectangles are eqals, false otherwise.</returns>
    function NearEquals(other: DNRectangle; delta: Double): Boolean;
    ///<summary>
    ///  Intersects to rectangles.
    ///</summary>
    ///  <param name="otherRect">Rectangle to which this recatangle be intersected.</param>
    ///<returns>Intersection of rectangles; null if rectangles are not intersected.</returns>
    function Intersect(otherRect: DNRectangle): DNRectangle;
    ///<summary>
    ///  Joins rectangles.
    ///</summary>
    ///  <param name="otherRect">Rectangle to which this recatangle be joined.</param>
    ///<returns>Described rectangle.</returns>
    function Join(otherRect: DNRectangle): DNRectangle;
    ///<summary>
    ///  Determines whether this rectangle intersects with other rectangle.
    ///</summary>
    ///  <param name="otherRect">Intersection will be tested with specified rectangle.</param>
    ///<returns>True if this rectangle intersects with specified rectangle. Otherwise false.</returns>
    function IsIntersect(otherRect: DNRectangle): Boolean;
    ///<summary>
    ///  Determinces whether given point is inside of the rectangle.
    ///</summary>
    ///  <param name="point">Point to check.</param>
    ///<returns>True if point is inside of the recatngle.</returns>
    function &Contains(point: DNPoint): Boolean;
    ///<summary>
    ///  Returncs coordinates of center of the rectangle.
    ///</summary>
    ///<returns>Point which is center of the rectangle.</returns>
    function Center: DNPoint;
    ///<summary>
    ///  Rotate rectangle by the specified angle.
    ///</summary>
    ///  <param name="angle">Angle of rotation. Member of Rotation enumeration.</param>
    procedure Rotate(angle: DNRotation); overload;
    ///<summary>
    ///  Rotate rectangle by the specified angle.
    ///</summary>
    ///  <param name="angle">Angle of rotation in degrees between 0 and 360.</param>
    procedure Rotate(angle: Int32); overload;
    ///<summary>
    ///  Clones the Rectangle object.
    ///</summary>
    ///<returns>Clone object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Width of rectangle.
    ///</summary>
    property Width: Double read get_Width;
    ///<summary>
    ///  Height of rectangle.
    ///</summary>
    property Height: Double read get_Height;
    ///<summary>
    ///  X-coordinate of lower - left corner.
    ///</summary>
    property LLX: Double read get_LLX write set_LLX;
    ///<summary>
    ///  Y - coordinate of lower-left corner.
    ///</summary>
    property LLY: Double read get_LLY write set_LLY;
    ///<summary>
    ///  X - coordinate of upper-right corner.
    ///</summary>
    property URX: Double read get_URX write set_URX;
    ///<summary>
    ///  Y - coordinate of upper-right corner.
    ///</summary>
    property URY: Double read get_URY write set_URY;
    ///<summary>
    ///  Checks if rectangle is trivial i.e. has zero size and position.
    ///</summary>
    property IsTrivial: Boolean read get_IsTrivial;
    ///<summary>
    ///  Checks if rectangle is empty.
    ///</summary>
    property IsEmpty: Boolean read get_IsEmpty;
    ///<summary>
    ///  Checks if rectangle is point i.e. LLX is equal URX and LLY is equal URY.
    ///</summary>
    property IsPoint: Boolean read get_IsPoint;
  end;

  TDNRectangle = class(TDNGenericImport<DNRectangleClass, DNRectangle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRenderingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{597ABFC1-9D47-5C46-B672-16C57282C6DB}']
  { constructors } 

    {class} function init: DNRenderingOptions;

  end;

  ///<summary>
  ///  Represents rendering options.
  ///</summary>
  [DNTypeName('Aspose.Pdf.RenderingOptions')]
  DNRenderingOptions = interface(DDN.mscorlib.DNObject)
  ['{CC9CA469-2E05-3404-8885-95286F90C7F1}']
  { getters & setters } 

    function get_BarcodeOptimization: Boolean;
    procedure set_BarcodeOptimization(value: Boolean);
    function get_OptimizeDimensions: Boolean;
    procedure set_OptimizeDimensions(value: Boolean);
    function get_SystemFontsNativeRendering: Boolean;
    procedure set_SystemFontsNativeRendering(value: Boolean);
    function get_UseNewImagingEngine: Boolean;
    procedure set_UseNewImagingEngine(value: Boolean);
    function get_WidthExtraUnits: Single;
    procedure set_WidthExtraUnits(value: Single);
    function get_ConvertFontsToUnicodeTTF: Boolean;
    procedure set_ConvertFontsToUnicodeTTF(value: Boolean);
    function get_UseFontHinting: Boolean;
    procedure set_UseFontHinting(value: Boolean);
    function get_ScaleImagesToFitPageWidth: Boolean;
    procedure set_ScaleImagesToFitPageWidth(value: Boolean);
    function get_InterpolationHighQuality: Boolean;
    procedure set_InterpolationHighQuality(value: Boolean);
    function get_MaxFontsCacheSize: Int32;
    procedure set_MaxFontsCacheSize(value: Int32);
    function get_MaxSymbolsCacheSize: Int32;
    procedure set_MaxSymbolsCacheSize(value: Int32);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets barcode optimization mode.
    ///</summary>
    property BarcodeOptimization: Boolean read get_BarcodeOptimization write set_BarcodeOptimization;
    ///<summary>
    ///  Gets or sets optimize dimensions mode.
    ///</summary>
    property OptimizeDimensions: Boolean read get_OptimizeDimensions write set_OptimizeDimensions;
    ///<summary>
    ///  Gets or sets a mode where system fonts are rendered natively.
    ///</summary>
    property SystemFontsNativeRendering: Boolean read get_SystemFontsNativeRendering write set_SystemFontsNativeRendering;
    ///<summary>
    ///  Gets or sets a flag determines whether new imaging engine is used or not.
    ///</summary>
    property UseNewImagingEngine: Boolean read get_UseNewImagingEngine write set_UseNewImagingEngine;
    ///<summary>
    ///  Gets or sets a value used to increase or decrease the width of rectangle for AppendRectangle operator.
    ///</summary>
    property WidthExtraUnits: Single read get_WidthExtraUnits write set_WidthExtraUnits;
    ///<summary>
    ///  Indicates that all fonts will be converted to TTF unicode versions. That is useful for compatibility
    ///  reasons and to optimize font usage, cause every new TTF font will have not all the symbols
    ///  from source font, but only symbols which are used in text.
    ///</summary>
    property ConvertFontsToUnicodeTTF: Boolean read get_ConvertFontsToUnicodeTTF write set_ConvertFontsToUnicodeTTF;
    ///<summary>
    ///  Usage of this flag turn on font hinting mechanism. Font hinting is the use of mathematical instructions to adjust the display
    ///  of an outline font. In some cases turning this flag on may solve problems with text legibility.
    ///  At current moment usage of this flag could give effect only for TTF fonts, if these fonts are used in source document.
    ///</summary>
    property UseFontHinting: Boolean read get_UseFontHinting write set_UseFontHinting;
    ///<summary>
    ///  Gets or sets a values used to scale all images on the page to fit page's width.
    ///</summary>
    property ScaleImagesToFitPageWidth: Boolean read get_ScaleImagesToFitPageWidth write set_ScaleImagesToFitPageWidth;
    ///<summary>
    ///  Gets or sets hiqh quality mode for interpolation.
    ///</summary>
    property InterpolationHighQuality: Boolean read get_InterpolationHighQuality write set_InterpolationHighQuality;
    ///<summary>
    ///  Maximum count of fonts in fonts cache. Default value is 10.
    ///</summary>
    property MaxFontsCacheSize: Int32 read get_MaxFontsCacheSize write set_MaxFontsCacheSize;
    ///<summary>
    ///  Maximum count of symbols in symbol cache. Default value is 100.
    ///</summary>
    property MaxSymbolsCacheSize: Int32 read get_MaxSymbolsCacheSize write set_MaxSymbolsCacheSize;
    ///<summary>
    ///  Gets/sets the default name of font used to substitute of missing fonts.
    ///</summary>
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
  end;

  TDNRenderingOptions = class(TDNGenericImport<DNRenderingOptionsClass, DNRenderingOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourceLoadingResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DF90D466-96BC-5EBC-A3DA-D01DFC855E15}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingResult" />
    ///  class.
    ///</summary>
    ///  <param name="data">The resource data.</param>
    {class} function init(data: TArray<Byte>): DNResourceLoadingResult; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingResult" />
    ///  class.
    ///</summary>
    ///  <param name="data">The resource data.</param>
    ///  <param name="encoding">The encoding.</param>
    {class} function init(data: TArray<Byte>; encoding: DDN.mscorlib.DNEncoding): DNResourceLoadingResult; overload;

  end;

  ///<summary>
  ///  Represents resource loading result object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ResourceLoadingResult')]
  DNResourceLoadingResult = interface(DDN.mscorlib.DNObject)
  ['{03A045DB-42EE-3E86-AE69-F48351632752}']
  { getters & setters } 

    function get_Data: TArray<Byte>;
    function get_Encoding: DDN.mscorlib.DNEncoding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the resource data.
    ///</summary>
    property Data: TArray<Byte> read get_Data;
    ///<summary>
    ///  Gets the encoding.
    ///</summary>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
  end;

  TDNResourceLoadingResult = class(TDNGenericImport<DNResourceLoadingResultClass, DNResourceLoadingResult>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourcesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{65FEBA1B-27E6-5904-AE05-B717D437009C}']
  end;

  ///<summary>
  ///  Class representing page resources.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Resources')]
  DNResources = interface(DDN.mscorlib.DNObject)
  ['{88324D52-5F22-3C44-8852-2FEFE3B962B9}']
  { getters & setters } 

    function get_Forms: DNXFormCollection;
    function get_Images: DNXImageCollection;
    function get_Fonts: DNFontCollection;

  { methods } 

    ///<summary>
    ///  Returns fonts collection. If resources don't contain fonts entry it will be created in depends of CreateIfAbsent flag.
    ///</summary>
    ///  <param name="CreateIfAbsent">If this flag is true then fonts will be created if this entry is absent.</param>
    ///<returns>Fonts collection.</returns>
    function GetFonts(CreateIfAbsent: Boolean): DNFontCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets <see cref="P:Aspose.Pdf.Resources.Forms" />
    ///  forms collection
    ///</summary>
    property Forms: DNXFormCollection read get_Forms;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Pdf.Resources.Images" />
    ///  images collection
    ///</summary>
    property Images: DNXImageCollection read get_Images;
    ///<summary>
    ///  Gets <see cref="P:Aspose.Pdf.Resources.Fonts" />
    ///  resources collection
    ///</summary>
    property Fonts: DNFontCollection read get_Fonts;
  end;

  TDNResources = class(TDNGenericImport<DNResourcesClass, DNResources>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRgbToDeviceGrayConversionStrategyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6B90E9F4-FE4B-5DB0-80C5-B951EEB6FC99}']
  { constructors } 

    {class} function init: DNRgbToDeviceGrayConversionStrategy;

  end;

  ///<summary>
  ///  Represents rgb to device gray color spaces conversion strategy.
  ///</summary>
  [DNTypeName('Aspose.Pdf.RgbToDeviceGrayConversionStrategy')]
  DNRgbToDeviceGrayConversionStrategy = interface(DDN.mscorlib.DNObject)
  ['{E2882F86-3C9E-370D-B100-F360BC7E3BE4}']
  { methods } 

    ///<summary>
    ///  Converts the page of document.
    ///</summary>
    ///  <param name="page">The page of document.</param>
    procedure Convert(page: DNPage);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRgbToDeviceGrayConversionStrategy = class(TDNGenericImport<DNRgbToDeviceGrayConversionStrategyClass, DNRgbToDeviceGrayConversionStrategy>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{017EBB28-5240-5036-A4F7-E34B98557AB1}']
  { constructors } 

    {class} function init: DNRow;

  end;

  ///<summary>
  ///  Represents a row of the table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Row')]
  DNRow = interface(DDN.mscorlib.DNObject)
  ['{FBC67D01-77E9-3160-A50F-1567DF600998}']
  { getters & setters } 

    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Border: DNBorderInfo;
    procedure set_Border(value: DNBorderInfo);
    function get_Cells: DNCells;
    procedure set_Cells(value: DNCells);
    function get_DefaultCellBorder: DNBorderInfo;
    procedure set_DefaultCellBorder(value: DNBorderInfo);
    function get_MinRowHeight: Double;
    procedure set_MinRowHeight(value: Double);
    function get_FixedRowHeight: Double;
    procedure set_FixedRowHeight(value: Double);
    function get_IsInNewPage: Boolean;
    procedure set_IsInNewPage(value: Boolean);
    function get_IsRowBroken: Boolean;
    procedure set_IsRowBroken(value: Boolean);
    function get_DefaultCellTextState: DNTextState;
    procedure set_DefaultCellTextState(value: DNTextState);
    function get_DefaultCellPadding: DNMarginInfo;
    procedure set_DefaultCellPadding(value: DNMarginInfo);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);

  { methods } 

    ///<summary>
    ///  Clone the row.
    ///</summary>
    ///<returns>The cloned object</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the background color.
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets the border.
    ///</summary>
    property Border: DNBorderInfo read get_Border write set_Border;
    ///<summary>
    ///  Gets the cells of the row.
    ///</summary>
    property Cells: DNCells read get_Cells write set_Cells;
    ///<summary>
    ///  Gets default cell border;
    ///</summary>
    property DefaultCellBorder: DNBorderInfo read get_DefaultCellBorder write set_DefaultCellBorder;
    ///<summary>
    ///  Gets height for row;
    ///</summary>
    property MinRowHeight: Double read get_MinRowHeight write set_MinRowHeight;
    ///<summary>
    ///  Gets fixed row height - row may have fixed height;
    ///</summary>
    property FixedRowHeight: Double read get_FixedRowHeight write set_FixedRowHeight;
    ///<summary>
    ///  Gets fixed row is in new page - page with this property should be printed to next page Default false;
    ///</summary>
    property IsInNewPage: Boolean read get_IsInNewPage write set_IsInNewPage;
    ///<summary>
    ///  Gets is row can be broken between two pages
    ///</summary>
    property IsRowBroken: Boolean read get_IsRowBroken write set_IsRowBroken;
    ///<summary>
    ///  Gets or sets default text state for row cells
    ///</summary>
    property DefaultCellTextState: DNTextState read get_DefaultCellTextState write set_DefaultCellTextState;
    ///<summary>
    ///  Gets or sets default margin for row cells
    ///</summary>
    property DefaultCellPadding: DNMarginInfo read get_DefaultCellPadding write set_DefaultCellPadding;
    ///<summary>
    ///  Gets or sets the vertical alignment.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
  end;

  TDNRow = class(TDNGenericImport<DNRowClass, DNRow>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNRowsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0431CB95-DFB8-5EE6-B8DC-73F01F3596A7}']
  { constructors } 

    {class} function init: DNRows;

  end;

  ///<summary>
  ///  Represents a rows collection of table.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Rows')]
  DNRows = interface(DDN.mscorlib.DNObject)
  ['{35CBA590-86E2-3A34-98B2-01C2B7025158}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNRow;
    procedure set_Item(index: Int32; value: DNRow);

  { methods } 

    ///<summary>
    ///  Add row to collection.
    ///</summary>
    ///<returns>The new row</returns>
    function Add: DNRow; overload;
    ///<summary>
    ///  Add row to cellection.
    ///</summary>
    ///  <param name="row">The new row.</param>
    ///<returns></returns>
    procedure Add(row: DNRow); overload;
    ///<summary>
    ///  Returns index of row in collection.
    ///</summary>
    ///  <param name="row">The existing row.</param>
    ///<returns>The row index</returns>
    function IndexOf(row: DNRow): Int32;
    ///<summary>
    ///  Remove row from collection.
    ///</summary>
    ///  <param name="row">The existing row.</param>
    procedure Remove(row: DNRow);
    ///<summary>
    ///  Remove row at position from collection.
    ///</summary>
    ///  <param name="index">The collection index.</param>
    procedure RemoveAt(index: Int32);
    ///<summary>
    ///  Remove row set from collection.
    ///</summary>
    ///  <param name="index">The collection index.</param>
    ///  <param name="count">The rows count.</param>
    procedure RemoveRange(index: Int32; count: Int32);
    ///<summary>
    ///  Gets collection's enumerator
    ///</summary>
    ///<returns></returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRow>;
    ///<summary>
    ///  Dispose method
    ///</summary>
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  The items count.
    ///</summary>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNRow read get_Item write set_Item; default;
  end;

  TDNRows = class(TDNGenericImport<DNRowsClass, DNRows>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7EF90BC5-8CAD-53A0-AC76-241507941738}']
  end;

  ///<summary>
  ///  SaveOptions type hold level of abstraction on individual save options
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions')]
  DNSaveOptions = interface(DDN.mscorlib.DNObject)
  ['{30E7AA95-357A-3F58-9D05-9B6A890988DA}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Format of data save.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Gets or sets boolean value which indicates will Response object be closed after document saved into response.
    ///</summary>
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNSaveOptions = class(TDNGenericImport<DNSaveOptionsClass, DNSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{3752905E-CF9E-5DF1-B1EA-861D76B6F783}']
  { constructors } 

    {class} function init: DNPdfSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Pdf format
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfSaveOptions')]
  DNPdfSaveOptions = interface(DNSaveOptions)
  ['{C7E3960E-1A9E-3396-A929-1D93594AD77A}']
  { getters & setters } 

    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Font name used by default for fonts which are absent on computer.
    ///  When the PDF document that is saved into PDF contains fonts, that are not available
    ///  in the document itself and on the device, API replaces this fonts with the
    ///  default font(if font with <see cref="P:Aspose.Pdf.PdfSaveOptions.DefaultFontName" />
    ///  is found on device)
    ///</summary>
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Format of data save.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Gets or sets boolean value which indicates will Response object be closed after document saved into response.
    ///</summary>
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPdfSaveOptions = class(TDNGenericImport<DNPdfSaveOptionsClass, DNPdfSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnifiedSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{CEA6FA14-56F9-5364-9AC3-BFAA63227BFB}']
  { constructors } 

    {class} function init: DNUnifiedSaveOptions;

  end;

  ///<summary>
  ///  This class represents saving options for saving that
  ///  uses unified conversion way (with unified internal document model)
  ///</summary>
  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions')]
  DNUnifiedSaveOptions = interface(DNSaveOptions)
  ['{3B143D8D-67A2-3AF8-9367-266A8E18849D}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Format of data save.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Gets or sets boolean value which indicates will Response object be closed after document saved into response.
    ///</summary>
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNUnifiedSaveOptions = class(TDNGenericImport<DNUnifiedSaveOptionsClass, DNUnifiedSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNApsSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{49F311EB-8D71-5833-82B8-33BD500F3679}']
  { constructors } 

    {class} function init: DNApsSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to APS XML format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ApsSaveOptions')]
  DNApsSaveOptions = interface(DNUnifiedSaveOptions)
  ['{AF261FAE-9AB1-3DAE-85BD-7C0E26EBA388}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNApsSaveOptions = class(TDNGenericImport<DNApsSaveOptionsClass, DNApsSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{11C47853-33D7-553B-B9BB-EB0C727229ED}']
  { constructors } 

    {class} function init: DNDocSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Doc format
  ///</summary>
  [DNTypeName('Aspose.Pdf.DocSaveOptions')]
  DNDocSaveOptions = interface(DNUnifiedSaveOptions)
  ['{5ECED693-9985-3EF9-8C75-FF94894B45DE}']
  { getters & setters } 

    function get_Mode: DNDocSaveOptions_RecognitionMode;
    procedure set_Mode(value: DNDocSaveOptions_RecognitionMode);
    function get_RelativeHorizontalProximity: Single;
    procedure set_RelativeHorizontalProximity(value: Single);
    function get_MaxDistanceBetweenTextLines: Single;
    procedure set_MaxDistanceBetweenTextLines(value: Single);
    function get_RecognizeBullets: Boolean;
    procedure set_RecognizeBullets(value: Boolean);
    function get_AddReturnToLineEnd: Boolean;
    procedure set_AddReturnToLineEnd(value: Boolean);
    function get_ImageResolutionX: Int32;
    procedure set_ImageResolutionX(value: Int32);
    function get_ImageResolutionY: Int32;
    procedure set_ImageResolutionY(value: Int32);
    function get_Format: DNDocSaveOptions_DocFormat;
    procedure set_Format(value: DNDocSaveOptions_DocFormat);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_MemorySaveModePath: string;
    procedure set_MemorySaveModePath(value: string);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
   procedure __fakeFieldSet_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  This handler can be used to handle conversion progress events
    ///  f.e. it can be used to show progress bar or messages about current amount
    ///  of processed  pages, example of handler's code that shows progress on console is :
    ///</summary>
    ///<example><code>
    ///  public static void ConvertWithShowingProgress()
    ///  {
    ///  (new Aspose.Pdf.License()).SetLicense(@"F:\_Sources\Aspose_5\trunk\testdata\License\Aspose.Total.lic");
    ///  Document doc = new Document(@"F:\ExternalTestsData\Booklet.pdf");
    ///  HtmlSaveOptions saveOptions = new HtmlSaveOptions();
    ///  saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole);
    ///  doc.Save(@"F:\ExternalTestsData\Booklet.doc", saveOptions);
    ///  Console.ReadLine();
    ///  }
    ///  public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo)
    ///  {
    ///  switch (eventInfo.EventType)
    ///  {
    ///  case HtmlSaveOptions.ProgressEventType.TotalProgress:
    ///  Console.WriteLine(string.Format("{0}  - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.SourcePageAnalized:
    ///  Console.WriteLine(string.Format("{0}  - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageCreated:
    ///  Console.WriteLine(string.Format("{0}  - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageSaved:
    ///  Console.WriteLine(string.Format("{0}  - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  default:
    ///  break;
    ///  }
    ///  }
    ///</code></example>
   property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read __fakeFieldGet_CustomProgressHandler write __fakeFieldSet_CustomProgressHandler;
    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Recognition mode.
    ///</summary>
    property Mode: DNDocSaveOptions_RecognitionMode read get_Mode write set_Mode;
    ///<summary>
    ///  In Pdf words may be innerly represented with operators that prints words
    ///  by independently printing their letters or syllables. So, to detect words sometimes we need detect groups
    ///  of independent chars that are in fact words.
    ///  This setting defines width of space between text elements(letters, syllables)
    ///  that must be treated as distance between words during recognition of words in source PDF.
    ///  (presence of empty space at least with this width between letters means that
    ///  textual elements pertain to different words).
    ///  It's normed to font size -  1.0 means 100% of supposed word's font size.
    ///  ATTENTION!It's used only in cases when source PDF contains specific rarely used fonts
    ///  for which optimal value cannot be calculated from font.
    ///  So, in vast majority of cases this parameter changes nothing in result document.
    ///</summary>
    property RelativeHorizontalProximity: Single read get_RelativeHorizontalProximity write set_RelativeHorizontalProximity;
    property MaxDistanceBetweenTextLines: Single read get_MaxDistanceBetweenTextLines write set_MaxDistanceBetweenTextLines;
    ///<summary>
    ///  Switch on the recognition of bullets
    ///</summary>
    property RecognizeBullets: Boolean read get_RecognizeBullets write set_RecognizeBullets;
    ///<summary>
    ///  Use paragraph or line breaks
    ///</summary>
    property AddReturnToLineEnd: Boolean read get_AddReturnToLineEnd write set_AddReturnToLineEnd;
    ///<summary>
    ///  Converted images X resolution.
    ///</summary>
    property ImageResolutionX: Int32 read get_ImageResolutionX write set_ImageResolutionX;
    ///<summary>
    ///  Converted images Y resolution.
    ///</summary>
    property ImageResolutionY: Int32 read get_ImageResolutionY write set_ImageResolutionY;
    ///<summary>
    ///  Output format
    ///</summary>
    property Format: DNDocSaveOptions_DocFormat read get_Format write set_Format;
    ///<summary>
    ///  Defines batch size if batched conversion is applicable
    ///  to source and destination formats pair.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  Defines the path (file name or directory name) to hold
    ///  temporary data when converting in memory save mode.
    ///</summary>
    property MemorySaveModePath: string read get_MemorySaveModePath write set_MemorySaveModePath;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNDocSaveOptions = class(TDNGenericImport<DNDocSaveOptionsClass, DNDocSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEpubSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{3D63128D-6F79-5656-A254-78B2521D7DCA}']
  { constructors } 

    {class} function init: DNEpubSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to EPUB format
  ///</summary>
  [DNTypeName('Aspose.Pdf.EpubSaveOptions')]
  DNEpubSaveOptions = interface(DNUnifiedSaveOptions)
  ['{3DFE0F97-1120-3080-A369-A6C02F87A826}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_ContentRecognitionMode: DNEpubSaveOptions_RecognitionMode;
   procedure __fakeFieldSet_ContentRecognitionMode(value: DNEpubSaveOptions_RecognitionMode);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  When PDF file (that usually has fixed layout) is being converted,
    ///  the conversion engine tries to perform grouping and multi-level analysis to restore
    ///  the original document author's intent and produce result in flow layout.
    ///  This property tunes that conversion for this or that
    ///  desirable method of recognition of content.
    ///</summary>
   property ContentRecognitionMode: DNEpubSaveOptions_RecognitionMode read __fakeFieldGet_ContentRecognitionMode write __fakeFieldSet_ContentRecognitionMode;
    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNEpubSaveOptions = class(TDNGenericImport<DNEpubSaveOptionsClass, DNEpubSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNExcelSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{6B09995B-EF6B-50B1-B1E2-88F17B841AAB}']
  { constructors } 

    {class} function init: DNExcelSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Excel format
  ///</summary>
  [DNTypeName('Aspose.Pdf.ExcelSaveOptions')]
  DNExcelSaveOptions = interface(DNUnifiedSaveOptions)
  ['{52B69E3C-6AA9-3191-A907-A1684EE56A9B}']
  { getters & setters } 

    function get_MinimizeTheNumberOfWorksheets: Boolean;
    procedure set_MinimizeTheNumberOfWorksheets(value: Boolean);
    function get_InsertBlankColumnAtFirst: Boolean;
    procedure set_InsertBlankColumnAtFirst(value: Boolean);
    function get_UniformWorksheets: Boolean;
    procedure set_UniformWorksheets(value: Boolean);
    function get_ScaleFactor: Double;
    procedure set_ScaleFactor(value: Double);
    function get_Format: DNExcelSaveOptions_ExcelFormat;
    procedure set_Format(value: DNExcelSaveOptions_ExcelFormat);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_ConversionEngine: DNExcelSaveOptions_ConversionEngines;
   procedure __fakeFieldSet_ConversionEngine(value: DNExcelSaveOptions_ConversionEngines);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Defines conversion engine that will be used for conversion
    ///</summary>
   property ConversionEngine: DNExcelSaveOptions_ConversionEngines read __fakeFieldGet_ConversionEngine write __fakeFieldSet_ConversionEngine;
    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Set true if you need to minimize the number of worksheets in resultant workbook.
    ///  Default value is false; it means save of each PDF page as separated worksheet.
    ///</summary>
    property MinimizeTheNumberOfWorksheets: Boolean read get_MinimizeTheNumberOfWorksheets write set_MinimizeTheNumberOfWorksheets;
    ///<summary>
    ///  Set true if you need inserting of blank column as the first column of worksheet.
    ///  Default value is false; it means that blank column will not be inserted.
    ///</summary>
    property InsertBlankColumnAtFirst: Boolean read get_InsertBlankColumnAtFirst write set_InsertBlankColumnAtFirst;
    ///<summary>
    ///  Set true for using uniform columns division through the document.
    ///  Default value is false; it means that columns division will independent for each page.
    ///</summary>
    property UniformWorksheets: Boolean read get_UniformWorksheets write set_UniformWorksheets;
    ///<summary>
    ///  Gets or sets factor that will be applied to (virtual) scaling font size during conversion to Excel table in legacy engine.
    ///  Setting of less value facilitates the search for columns and prevents merging of them for some documents.
    ///  Default value is 0.9;
    ///  Setting value to zero allows algorithm choose scaling automatically.
    ///</summary>
    property ScaleFactor: Double read get_ScaleFactor write set_ScaleFactor;
    ///<summary>
    ///  Output format
    ///</summary>
    property Format: DNExcelSaveOptions_ExcelFormat read get_Format write set_Format;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNExcelSaveOptions = class(TDNGenericImport<DNExcelSaveOptionsClass, DNExcelSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{EA6CA771-E7DC-5981-9885-931B95E3589B}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  class.
    ///</summary>
    {class} function init: DNHtmlSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  class.
    ///</summary>
    ///  <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />
    ///  .</param>
    {class} function init(documentType: DNHtmlDocumentType): DNHtmlSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  class.
    ///</summary>
    ///  <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    {class} function init(fixedLayout: Boolean): DNHtmlSaveOptions; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.HtmlSaveOptions" />
    ///  class.
    ///</summary>
    ///  <param name="documentType">The <see cref="T:Aspose.Pdf.HtmlDocumentType" />
    ///  .</param>
    ///  <param name="fixedLayout">if set to <c>true</c> HTML is created as fixed layout.</param>
    {class} function init(documentType: DNHtmlDocumentType; fixedLayout: Boolean): DNHtmlSaveOptions; overload;

  end;

  ///<summary>
  ///  Save options for export to Html format
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions')]
  DNHtmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{81ADAB87-1EA6-3DC8-9BA8-7A7FDC50FE46}']
  { getters & setters } 

    function get_DocumentType: DNHtmlDocumentType;
    procedure set_DocumentType(value: DNHtmlDocumentType);
    function get_CompressSvgGraphicsIfAny: Boolean;
    procedure set_CompressSvgGraphicsIfAny(value: Boolean);
    function get_SplitCssIntoPages: Boolean;
    procedure set_SplitCssIntoPages(value: Boolean);
    function get_SplitIntoPages: Boolean;
    procedure set_SplitIntoPages(value: Boolean);
    function get_ExplicitListOfSavedPages: TArray<Int32>;
    procedure set_ExplicitListOfSavedPages(value: TArray<Int32>);
    function get_FixedLayout: Boolean;
    procedure set_FixedLayout(value: Boolean);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_DefaultFontName: string;
    procedure set_DefaultFontName(value: string);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_FontSources: DNFontSourceCollection;
    function get_AdditionalMarginWidthInPoints: Int32;
    procedure set_AdditionalMarginWidthInPoints(value: Int32);
    function get_UseZOrder: Boolean;
    procedure set_UseZOrder(value: Boolean);
    function get_ConvertMarkedContentToLayers: Boolean;
    procedure set_ConvertMarkedContentToLayers(value: Boolean);
    function get_MinimalLineWidth: Single;
    procedure set_MinimalLineWidth(value: Single);
    function get_PreventGlyphsGrouping: Boolean;
    procedure set_PreventGlyphsGrouping(value: Boolean);
    function get_SimpleTextboxModeGrouping: Boolean;
    procedure set_SimpleTextboxModeGrouping(value: Boolean);
    function get_FlowLayoutParagraphFullWidth: Boolean;
    procedure set_FlowLayoutParagraphFullWidth(value: Boolean);
    function get_RenderTextAsImage: Boolean;
    procedure set_RenderTextAsImage(value: Boolean);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
   procedure __fakeFieldSet_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
   function __fakeFieldGet_SaveFullFont: Boolean;
   procedure __fakeFieldSet_SaveFullFont(value: Boolean);
   function __fakeFieldGet_AntialiasingProcessing: DNHtmlSaveOptions_AntialiasingProcessingType;
   procedure __fakeFieldSet_AntialiasingProcessing(value: DNHtmlSaveOptions_AntialiasingProcessingType);
   function __fakeFieldGet_SaveTransparentTexts: Boolean;
   procedure __fakeFieldSet_SaveTransparentTexts(value: Boolean);
   function __fakeFieldGet_SaveShadowedTextsAsTransparentTexts: Boolean;
   procedure __fakeFieldSet_SaveShadowedTextsAsTransparentTexts(value: Boolean);
   function __fakeFieldGet_FontSavingMode: DNHtmlSaveOptions_FontSavingModes;
   procedure __fakeFieldSet_FontSavingMode(value: DNHtmlSaveOptions_FontSavingModes);
   function __fakeFieldGet_PageBorderIfAny: DNSaveOptions_BorderInfo;
   procedure __fakeFieldSet_PageBorderIfAny(value: DNSaveOptions_BorderInfo);
   function __fakeFieldGet_PageMarginIfAny: DNSaveOptions_MarginInfo;
   procedure __fakeFieldSet_PageMarginIfAny(value: DNSaveOptions_MarginInfo);
   function __fakeFieldGet_LettersPositioningMethod: DNHtmlSaveOptions_LettersPositioningMethods;
   procedure __fakeFieldSet_LettersPositioningMethod(value: DNHtmlSaveOptions_LettersPositioningMethods);
   function __fakeFieldGet_ExcludeFontNameList: TArray<string>;
   procedure __fakeFieldSet_ExcludeFontNameList(value: TArray<string>);
   function __fakeFieldGet_CustomResourceSavingStrategy: DNHtmlSaveOptions_ResourceSavingStrategy;
   procedure __fakeFieldSet_CustomResourceSavingStrategy(value: DNHtmlSaveOptions_ResourceSavingStrategy);
   function __fakeFieldGet_CustomCssSavingStrategy: DNHtmlSaveOptions_CssSavingStrategy;
   procedure __fakeFieldSet_CustomCssSavingStrategy(value: DNHtmlSaveOptions_CssSavingStrategy);
   function __fakeFieldGet_CustomHtmlSavingStrategy: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy;
   procedure __fakeFieldSet_CustomHtmlSavingStrategy(value: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy);
   function __fakeFieldGet_CustomStrategyOfCssUrlCreation: DNHtmlSaveOptions_CssUrlMakingStrategy;
   procedure __fakeFieldSet_CustomStrategyOfCssUrlCreation(value: DNHtmlSaveOptions_CssUrlMakingStrategy);
   function __fakeFieldGet_SpecialFolderForSvgImages: string;
   procedure __fakeFieldSet_SpecialFolderForSvgImages(value: string);
   function __fakeFieldGet_SpecialFolderForAllImages: string;
   procedure __fakeFieldSet_SpecialFolderForAllImages(value: string);
   function __fakeFieldGet_CssClassNamesPrefix: string;
   procedure __fakeFieldSet_CssClassNamesPrefix(value: string);
   function __fakeFieldGet_PartsEmbeddingMode: DNHtmlSaveOptions_PartsEmbeddingModes;
   procedure __fakeFieldSet_PartsEmbeddingMode(value: DNHtmlSaveOptions_PartsEmbeddingModes);
   function __fakeFieldGet_HtmlMarkupGenerationMode: DNHtmlSaveOptions_HtmlMarkupGenerationModes;
   procedure __fakeFieldSet_HtmlMarkupGenerationMode(value: DNHtmlSaveOptions_HtmlMarkupGenerationModes);
   function __fakeFieldGet_RasterImagesSavingMode: DNHtmlSaveOptions_RasterImagesSavingModes;
   procedure __fakeFieldSet_RasterImagesSavingMode(value: DNHtmlSaveOptions_RasterImagesSavingModes);
   function __fakeFieldGet_RemoveEmptyAreasOnTopAndBottom: Boolean;
   procedure __fakeFieldSet_RemoveEmptyAreasOnTopAndBottom(value: Boolean);
   function __fakeFieldGet_FontEncodingStrategy: DNHtmlSaveOptions_FontEncodingRules;
   procedure __fakeFieldSet_FontEncodingStrategy(value: DNHtmlSaveOptions_FontEncodingRules);
   function __fakeFieldGet_PagesFlowTypeDependsOnViewersScreenSize: Boolean;
   procedure __fakeFieldSet_PagesFlowTypeDependsOnViewersScreenSize(value: Boolean);
   function __fakeFieldGet_TrySaveTextUnderliningAndStrikeoutingInCss: Boolean;
   procedure __fakeFieldSet_TrySaveTextUnderliningAndStrikeoutingInCss(value: Boolean);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  This handler can be used to handle conversion progress events
    ///  f.e. it can be used to show progress bar or messages about current amount
    ///  of processed  pages, example of handler's code that shows progress on console is :
    ///</summary>
    ///<example><code>
    ///  public static void ConvertWithShowingProgress()
    ///  {
    ///  (new Aspose.Pdf.License()).SetLicense(@"F:\_Sources\Aspose_5\trunk\testdata\License\Aspose.Total.lic");
    ///  Document doc = new Document(@"F:\ExternalTestsData\Booklet.pdf");
    ///  HtmlSaveOptions saveOptions = new HtmlSaveOptions();
    ///  saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole);
    ///  doc.Save(@"F:\ExternalTestsData\Booklet.doc", saveOptions);
    ///  Console.ReadLine();
    ///  }
    ///  public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo)
    ///  {
    ///  switch (eventInfo.EventType)
    ///  {
    ///  case HtmlSaveOptions.ProgressEventType.TotalProgress:
    ///  Console.WriteLine(string.Format("{0}  - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.SourcePageAnalized:
    ///  Console.WriteLine(string.Format("{0}  - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageCreated:
    ///  Console.WriteLine(string.Format("{0}  - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageSaved:
    ///  Console.WriteLine(string.Format("{0}  - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  default:
    ///  break;
    ///  }
    ///  }
    ///</code></example>
   property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read __fakeFieldGet_CustomProgressHandler write __fakeFieldSet_CustomProgressHandler;
    ///<summary>
    ///  Indicates that full font will be saved, supports only True Type Fonts.
    ///  By default SaveFullFont = false and the converter saves the subset of the initial font
    ///  needed to display the text of the document.
    ///</summary>
   property SaveFullFont: Boolean read __fakeFieldGet_SaveFullFont write __fakeFieldSet_SaveFullFont;
    ///<summary>
    ///  This parameter defines required antialiasing measures during conversion of compound background images from PDF to HTML
    ///</summary>
   property AntialiasingProcessing: DNHtmlSaveOptions_AntialiasingProcessingType read __fakeFieldGet_AntialiasingProcessing write __fakeFieldSet_AntialiasingProcessing;
    ///<summary>
    ///  Pdf can contain transparent texts that can be selected to clipboard (usually it happen when document contains images and OCRed texts extracted from it).
    ///  This settings tells to converter whether we need save such texts as transparent
    ///  selectable texts in result HTML
    ///</summary>
   property SaveTransparentTexts: Boolean read __fakeFieldGet_SaveTransparentTexts write __fakeFieldSet_SaveTransparentTexts;
    ///<summary>
    ///  Pdf can contain texts that are shadowed by another elements (f.e. by images) but
    ///  can be selected to clipboard in Acrobat Reader (usually it happen when document contains images and OCRed texts extracted from it).
    ///  This settings tells to converter whether we need save such texts as transparent
    ///  selectable texts in result HTML to mimic behaviour of Acrobat Reader (othervise such texts are usually saved as hidden, not available for copying to clipboard)
    ///</summary>
   property SaveShadowedTextsAsTransparentTexts: Boolean read __fakeFieldGet_SaveShadowedTextsAsTransparentTexts write __fakeFieldSet_SaveShadowedTextsAsTransparentTexts;
    ///<summary>
    ///  Defines font saving mode that will be used during saving of PDF to desirable format
    ///</summary>
   property FontSavingMode: DNHtmlSaveOptions_FontSavingModes read __fakeFieldGet_FontSavingMode write __fakeFieldSet_FontSavingMode;
    ///<summary>
    ///  This attribute represents set of settings used for drawing border (if any)
    ///  in result HTML document around area that represent source PDF page.
    ///  In essence it concerns of showing of page's paper edges,
    ///  not page border referenced in PDF page itself.
    ///</summary>
   property PageBorderIfAny: DNSaveOptions_BorderInfo read __fakeFieldGet_PageBorderIfAny write __fakeFieldSet_PageBorderIfAny;
    ///<summary>
    ///  This attribute represents set of extra page margin (if any)
    ///  in result HTML document around area that represent source PDF page.
    ///</summary>
   property PageMarginIfAny: DNSaveOptions_MarginInfo read __fakeFieldGet_PageMarginIfAny write __fakeFieldSet_PageMarginIfAny;
    ///<summary>
    ///  Sets mode of positioning of letters in words in result HTML
    ///</summary>
   property LettersPositioningMethod: DNHtmlSaveOptions_LettersPositioningMethods read __fakeFieldGet_LettersPositioningMethod write __fakeFieldSet_LettersPositioningMethod;
    ///<summary>
    ///  List of PDF embedded font names that not be embedded in HTML.
    ///</summary>
   property ExcludeFontNameList: TArray<string> read __fakeFieldGet_ExcludeFontNameList write __fakeFieldSet_ExcludeFontNameList;
    ///<summary>
    ///  This field can contain saving strategy
    ///  that must be used (if present) during conversion
    ///  for customized handling of created referenced resource
    ///  files (like images and fonts) related  to nodes of saved HTML.
    ///  That strategy must process resources
    ///  and return string that represents desirable URL of saved resource
    ///  in generated HTML.
    ///</summary>
   property CustomResourceSavingStrategy: DNHtmlSaveOptions_ResourceSavingStrategy read __fakeFieldGet_CustomResourceSavingStrategy write __fakeFieldSet_CustomResourceSavingStrategy;
    ///<summary>
    ///  This field can contain saving strategy
    ///  that must be used (if present) during conversion
    ///  of Pdf to Html for handling of saving of CSSes related
    ///  to created HTML document as whole or to it's pages(if several HTMLpages are generated)
    ///  If You want handle CSS file in some specific way, that just please create relevant method and
    ///  assign delegate created from it to this property.
    ///</summary>
   property CustomCssSavingStrategy: DNHtmlSaveOptions_CssSavingStrategy read __fakeFieldGet_CustomCssSavingStrategy write __fakeFieldSet_CustomCssSavingStrategy;
    ///<summary>
    ///  Result of conversion can contain one or several  HTML-pages
    ///  You can  assign to this property delegate created from custom method that implements processing
    ///  of one HTML-page(to be accurately - markup-HTML, without exteranl linked files if any)
    ///  that was created during conversion.
    ///  In such case  processing (like saving of paage's HTML in stream or disk) can be done in that custom code .
    ///  In such case all the necessary actions for saving of HTML page must be undertaken
    ///  in code of supplied method, because saving of result in code of converter will be not in use  .
    ///  If processing for this or that case for some reason must be done by converter's code itself,
    ///  not in custom code, please set in custom code flag 'CustomProcessingCancelled'
    ///  of 'htmlSavingInfo' parameter's variable : it will signal to converter that all the necessary
    ///  steps for processing of that resource  must be done in converter itself in same way
    ///  as if there was no any external custom code for procesing .
    ///</summary>
   property CustomHtmlSavingStrategy: DNHtmlSaveOptions_HtmlPageMarkupSavingStrategy read __fakeFieldGet_CustomHtmlSavingStrategy write __fakeFieldSet_CustomHtmlSavingStrategy;
    ///<summary>
    ///  This field can contain custom method that returns
    ///  URL (Or URL template if multipage generation is on - see details below) of subject
    ///  CSS as it should be put in generated result HTML.
    ///  F.e. if You  want converter put some specific URL instead of standard
    ///  CSS file name into generated CSS, then You should just create and put into this property method
    ///  that generates desirable URL.
    ///  If flag  'SplitCssIntoPages' set, then this custom strategy (if any)
    ///  must return not exact URL of CSS but rather template string that
    ///  (after substitution of placeholder with page number with string.Format()
    ///  function inside converter) can be resolved into URL for this or that page's CSS' URL.
    ///  Examples of expected return string in such case are:
    ///  'SomeTargetLocation-page_{0}.css','../PartHandlers/GetCss.aspx?DocumentId=45654&amp;CssPage={0}')
    ///</summary>
   property CustomStrategyOfCssUrlCreation: DNHtmlSaveOptions_CssUrlMakingStrategy read __fakeFieldGet_CustomStrategyOfCssUrlCreation write __fakeFieldSet_CustomStrategyOfCssUrlCreation;
    ///<summary>
    ///  Gets or sets path to directory to which must be saved only SVG-images if they
    ///  are encountered during saving of document as HTML. If parameter is empty or null
    ///  then SVG files(if any) wil be saved together with other image-files (near to output file)
    ///  or in special folder for images (if it specified in SpecialImagesFolderIfAny option).
    ///  It does not affect anything if CustomImageSavingStrategy
    ///  property was successfully used to process relevant image file.
    ///</summary>
   property SpecialFolderForSvgImages: string read __fakeFieldGet_SpecialFolderForSvgImages write __fakeFieldSet_SpecialFolderForSvgImages;
    ///<summary>
    ///  Gets or sets path to directory to which must be saved any images if they
    ///  are encountered during saving of document as HTML. If parameter is empty or null
    ///  then image files(if any) wil be saved together with other files linked to HTML
    ///  It does not affect anything if CustomImageSavingStrategy
    ///  property was successfully used to process relevant image file.
    ///</summary>
   property SpecialFolderForAllImages: string read __fakeFieldGet_SpecialFolderForAllImages write __fakeFieldSet_SpecialFolderForAllImages;
    ///<summary>
    ///  When PDFtoHTML converter generates result CSSs, CSS class names
    ///  (something like ".stl_01 {}" ... ".stl_NN {}) are generated
    ///  and used in result CSS. This property allows forcibly set class name prefix
    ///  For example, if You want that all class names start with 'my_prefix_'
    ///  (i.e. were something like 'my_prefix_1' ... 'my_prefix_NNN' ) ,
    ///  then just assign 'my_prefix_' to this property before conversion.
    ///  If this property will stay untouched(i.e. null will be leaved as value ), then
    ///  converter will generate class names itself
    ///  (it wil be something like ".stl_01 {}" ... ".stl_NN {}")
    ///</summary>
   property CssClassNamesPrefix: string read __fakeFieldGet_CssClassNamesPrefix write __fakeFieldSet_CssClassNamesPrefix;
    ///<summary>
    ///  It defines whether referenced files (HTML, Fonts,Images, CSSes)
    ///  will be embedded into main HTML file or will be generated as apart binary entities
    ///</summary>
   property PartsEmbeddingMode: DNHtmlSaveOptions_PartsEmbeddingModes read __fakeFieldGet_PartsEmbeddingMode write __fakeFieldSet_PartsEmbeddingMode;
    ///<summary>
    ///  Sometimes specific reqirments to generation of HTML markup are present.
    ///  This parameter defines HTML preparing modes that can be used
    ///  during conversion of PDF to HTML to match such specific requirments.
    ///</summary>
   property HtmlMarkupGenerationMode: DNHtmlSaveOptions_HtmlMarkupGenerationModes read __fakeFieldGet_HtmlMarkupGenerationMode write __fakeFieldSet_HtmlMarkupGenerationMode;
    ///<summary>
    ///  Converted PDF can contain raster images
    ///  This parameter defines how they should be handled
    ///  during conversion of PDF to HTML
    ///</summary>
   property RasterImagesSavingMode: DNHtmlSaveOptions_RasterImagesSavingModes read __fakeFieldGet_RasterImagesSavingMode write __fakeFieldSet_RasterImagesSavingMode;
    ///<summary>
    ///  Defines whether in created HTML will be removed top and bottom empty area without any content (if any).
    ///</summary>
   property RemoveEmptyAreasOnTopAndBottom: Boolean read __fakeFieldGet_RemoveEmptyAreasOnTopAndBottom write __fakeFieldSet_RemoveEmptyAreasOnTopAndBottom;
    ///<summary>
    ///  Defines encoding special rule to tune PDF decoding for current document
    ///</summary>
   property FontEncodingStrategy: DNHtmlSaveOptions_FontEncodingRules read __fakeFieldGet_FontEncodingStrategy write __fakeFieldSet_FontEncodingStrategy;
    ///<summary>
    ///  If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages will be
    ///  put into one big result HTML file.
    ///  This flag defines whether result HTML will be generated in such way
    ///  that flow of areas that represent PDF pages in result HTML will depend
    ///  on screen resolution of viewer.
    ///  Suppose width of screen on viewer side is big enough to put 2 or more pages one near
    ///  other in horizontal direction. If this flag set to true, then this opportunity
    ///  will be used (as many pages will be shown  in horizontal direction one near another
    ///  as it possible, then next horizontal group of pages will be shown under first one ).
    ///  Otherwise pages will flow in such way: next page goes always under previous one.
    ///</summary>
   property PagesFlowTypeDependsOnViewersScreenSize: Boolean read __fakeFieldGet_PagesFlowTypeDependsOnViewersScreenSize write __fakeFieldSet_PagesFlowTypeDependsOnViewersScreenSize;
    ///<summary>
    ///  PDF itself does not contain underlining markers for texts. It emulated with line situated under text.
    ///  This option allows converter try guess that this or that line is a text's underlining
    ///  and put this info into CSS instead of drawing of underlining graphically
    ///</summary>
   property TrySaveTextUnderliningAndStrikeoutingInCss: Boolean read __fakeFieldGet_TrySaveTextUnderliningAndStrikeoutingInCss write __fakeFieldSet_TrySaveTextUnderliningAndStrikeoutingInCss;
    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the <see cref="T:Aspose.Pdf.HtmlDocumentType" />
    ///  .
    ///</summary>
    ///<value>
    ///  The <see cref="T:Aspose.Pdf.HtmlDocumentType" />
    ///  .
    ///</value>
    property DocumentType: DNHtmlDocumentType read get_DocumentType write set_DocumentType;
    ///<summary>
    ///  Gets or sets the flag that indicates whether
    ///  found SVG graphics(if any) will be compressed(zipped)
    ///  into SVGZ format during saving
    ///</summary>
    ///<value>
    ///  The <see cref="T:Aspose.Pdf.HtmlDocumentType" />
    ///  .
    ///</value>
    property CompressSvgGraphicsIfAny: Boolean read get_CompressSvgGraphicsIfAny write set_CompressSvgGraphicsIfAny;
    ///<summary>
    ///  When multipage-mode selected(i.e 'SplitIntoPages' is 'true'),
    ///  then this attribute defines whether should be created separate CSS-file
    ///  for each result HTML page.
    ///  By default this attribute is false, so, will be created
    ///  one  big common CSS for all created pages. Summary size of all
    ///  CSSes generated in this mode(one CSS per page) usually
    ///  much more than size of one big CSS file, because in former case
    ///  CSS classes are duplicates in such case in several CSS files for each page.
    ///  So, this setting is worse to be used only when You are interested
    ///  in future processing of each HTML page independently, and therefore size
    ///  of CSS of each one page taken apart is the most critical issue.
    ///</summary>
    property SplitCssIntoPages: Boolean read get_SplitCssIntoPages write set_SplitCssIntoPages;
    ///<summary>
    ///  Gets or sets the flag that indicates whether each page of source
    ///  document will be converted into it's own target HTML document,
    ///  i.e whether result HTML will be splitted into several HTML-pages.
    ///</summary>
    property SplitIntoPages: Boolean read get_SplitIntoPages write set_SplitIntoPages;
    ///<summary>
    ///  With this property You can explicitely define
    ///  what pages of document should be converted.
    ///  Pages in this list must have 1-based numbers. I.e.
    ///  valid numbers of pages must be taken from range (1...[NumberOfPagesInConvertedDocument])
    ///  Order of appearing of pages in this list does not affect their
    ///  order in result HTML page(s) - in result pages allways will go in order in which they are
    ///  present in source PDF.
    ///  If this list is null (as it is by default), all pages will be converted.
    ///  If any page number of this list will go out of range of present pages(1-[amountOfPagesInDocument])
    ///  exception will be thrown.
    ///</summary>
    property ExplicitListOfSavedPages: TArray<Int32> read get_ExplicitListOfSavedPages write set_ExplicitListOfSavedPages;
    ///<summary>
    ///  Gets or sets a value indicating whether that HTML is created as fixed layout.
    ///</summary>
    ///<value><c>true</c> if [fixed layout]; otherwise, <c>false</c>.</value>
    property FixedLayout: Boolean read get_FixedLayout write set_FixedLayout;
    ///<summary>
    ///  Gets or sets resolution for image rendering.
    ///</summary>
    ///<value>Resolution</value>
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    ///<summary>
    ///  Specifies the name of an installed font which is used to substitute
    ///  any document font that is not embedded and not installed in the system.
    ///  If null then default substitution font is used.
    ///</summary>
    ///<value>Font name</value>
    property DefaultFontName: string read get_DefaultFontName write set_DefaultFontName;
    ///<summary>
    ///  Defines batch size if batched conversion is applicable
    ///  to source and destination formats pair.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  Font sources of pre-saved fonts.
    ///</summary>
    ///<remarks>
    ///  Fonts may be saved preliminarily for cache purpose and then passed into Html conversion process.
    ///  For example it may be useful in document splitting scenario and processing document pages in multiple threads with single set of fonts.
    ///</remarks>
    property FontSources: DNFontSourceCollection read get_FontSources;
    ///<summary>
    ///  If attribute 'SplitOnPages=false', than whole HTML representing all input PDF pages wont
    ///  be not split into different HTML pages, but will be put into one big result HTML file.
    ///  But each source PDF page will be represented with it's own
    ///  rectangle  area in HTML (if necessary that areas can be bordered to show page paper edges
    ///  with special attribute 'PageBorderIfAny'.
    ///  This parameter defines width of margin that will be forcibly left around that output HTML-areas
    ///  that represent pages of source PDF document.In essence it defines guaranteed interval between
    ///  HTML-representations of PDF "paper" pages such mode of conversion.
    ///</summary>
    property AdditionalMarginWidthInPoints: Int32 read get_AdditionalMarginWidthInPoints write set_AdditionalMarginWidthInPoints;
    ///<summary>
    ///  If attribute UseZORder set to true, graphics and text are added to resultant HTML document
    ///  accordingly Z-order in original PDF document. If this attribute is false all graphics is put
    ///  as single layer which may cause some unnecessary effects for overlapped objects.
    ///</summary>
    property UseZOrder: Boolean read get_UseZOrder write set_UseZOrder;
    property ConvertMarkedContentToLayers: Boolean read get_ConvertMarkedContentToLayers write set_ConvertMarkedContentToLayers;
    ///<summary>
    ///  This attribute sets minimal width of graphic path line.
    ///  If thickness of line is less than 1px Adobe Acrobat rounds it to this value. So this attribute can
    ///  be used to emulate this behavior for HTML browsers.
    ///</summary>
    property MinimalLineWidth: Single read get_MinimalLineWidth write set_MinimalLineWidth;
    ///<summary>
    ///  This attribute switch on the mode when text glyphs will not be grouped into words and strings
    ///  This mode allows to keep maximum precision during positioning of glyphs on the page and it can be
    ///  used for conversion documents with music notes or glyphs that should be placed separately each other.
    ///  This parameter will be applied to document only when the value of FixedLayout attribute is true.
    ///</summary>
    property PreventGlyphsGrouping: Boolean read get_PreventGlyphsGrouping write set_PreventGlyphsGrouping;
    ///<summary>
    ///  This attribute specifies a sequential grouping of glyphs and words into strings
    ///  For example tags and words has different order in converted HTML and you want them to match.
    ///  This parameter will be applied to document only when the value of FixedLayout attribute is true.
    ///</summary>
    property SimpleTextboxModeGrouping: Boolean read get_SimpleTextboxModeGrouping write set_SimpleTextboxModeGrouping;
    ///<summary>
    ///  This attribute specifies full width paragraph text for Flow mode, FixedLayout = false
    ///</summary>
    property FlowLayoutParagraphFullWidth: Boolean read get_FlowLayoutParagraphFullWidth write set_FlowLayoutParagraphFullWidth;
    ///<summary>
    ///  If attribute RenderTextAsImage set to true, the text from the source becomes an image in HTML.
    ///  May be useful to make text unselectable
    ///  or HTML text is not rendered properly.
    ///</summary>
    property RenderTextAsImage: Boolean read get_RenderTextAsImage write set_RenderTextAsImage;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNHtmlSaveOptions = class(TDNGenericImport<DNHtmlSaveOptionsClass, DNHtmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNMobiXmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{72C8F6EE-383E-5B88-8C71-D30B4AE6CA2C}']
  { constructors } 

    {class} function init: DNMobiXmlSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Xml format
  ///</summary>
  [DNTypeName('Aspose.Pdf.MobiXmlSaveOptions')]
  DNMobiXmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{AFA1185A-47CA-32E2-8413-9EAB3F1AEDAD}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNMobiXmlSaveOptions = class(TDNGenericImport<DNMobiXmlSaveOptionsClass, DNMobiXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfXmlSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{8162CED9-F98D-52A3-BCAC-26AA40EF347E}']
  { constructors } 

    {class} function init: DNPdfXmlSaveOptions;

  end;

  ///<summary>
  ///  Save options for PdfXml format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfXmlSaveOptions')]
  DNPdfXmlSaveOptions = interface(DNUnifiedSaveOptions)
  ['{B7F1C13A-BA28-3114-A788-AD65AC9E839F}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPdfXmlSaveOptions = class(TDNGenericImport<DNPdfXmlSaveOptionsClass, DNPdfXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPptxSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{7B3EAC50-FFD1-553B-92FD-B8AD0FD3E057}']
  { constructors } 

    {class} function init: DNPptxSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to SVG format
  ///</summary>
  [DNTypeName('Aspose.Pdf.PptxSaveOptions')]
  DNPptxSaveOptions = interface(DNUnifiedSaveOptions)
  ['{4E50C777-D254-32CF-84CD-744BDA741CDF}']
  { getters & setters } 

    function get_SlidesAsImages: Boolean;
    procedure set_SlidesAsImages(value: Boolean);
    function get_ImageResolution: Int32;
    procedure set_ImageResolution(value: Int32);
    function get_SeparateImages: Boolean;
    procedure set_SeparateImages(value: Boolean);
    function get_OptimizeTextBoxes: Boolean;
    procedure set_OptimizeTextBoxes(value: Boolean);
    function get_CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler;
    procedure set_CustomProgressHandler(value: DNUnifiedSaveOptions_ConversionProgressEventHandler);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If set to true then all the content is recognized as images (one per page)
    ///</summary>
    property SlidesAsImages: Boolean read get_SlidesAsImages write set_SlidesAsImages;
    ///<summary>
    ///  Gets or sets the image resolution (dpi). Default is 192 dpi.
    ///</summary>
    property ImageResolution: Int32 read get_ImageResolution write set_ImageResolution;
    ///<summary>
    ///  If set to true then images are separated from all other graphics
    ///</summary>
    property SeparateImages: Boolean read get_SeparateImages write set_SeparateImages;
    ///<summary>
    ///  Toggles text columns recognition
    ///</summary>
    property OptimizeTextBoxes: Boolean read get_OptimizeTextBoxes write set_OptimizeTextBoxes;
    ///<summary>
    ///  This handler can be used to handle conversion progress events
    ///  f.e. it can be used to show progress bar or messages about current amount
    ///  of processed  pages, example of handler's code that shows progress on console is :
    ///</summary>
    ///<example><code>
    ///  public static void ConvertWithShowingProgress()
    ///  {
    ///  (new Aspose.Pdf.License()).SetLicense(@"F:\_Sources\Aspose_5\trunk\testdata\License\Aspose.Total.lic");
    ///  Document doc = new Document(@"F:\ExternalTestsData\Booklet.pdf");
    ///  HtmlSaveOptions saveOptions = new HtmlSaveOptions();
    ///  saveOptions.CustomProgressHandler = new HtmlSaveOptions.ConversionProgressEventHandler(ShowProgressOnConsole);
    ///  doc.Save(@"F:\ExternalTestsData\Booklet.doc", saveOptions);
    ///  Console.ReadLine();
    ///  }
    ///  public static void ShowProgressOnConsole(HtmlSaveOptions.ProgressEventHandlerInfo eventInfo)
    ///  {
    ///  switch (eventInfo.EventType)
    ///  {
    ///  case HtmlSaveOptions.ProgressEventType.TotalProgress:
    ///  Console.WriteLine(string.Format("{0}  - Conversion progress : {1}% .", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.SourcePageAnalized:
    ///  Console.WriteLine(string.Format("{0}  - Source page {1} of {2} analyzed.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageCreated:
    ///  Console.WriteLine(string.Format("{0}  - Result page's {1} of {2} layout created.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  case HtmlSaveOptions.ProgressEventType.ResultPageSaved:
    ///  Console.WriteLine(string.Format("{0}  - Result page {1} of {2} exported.", DateTime.Now.ToLongTimeString(), eventInfo.Value.ToString(), eventInfo.MaxValue.ToString()));
    ///  break;
    ///  default:
    ///  break;
    ///  }
    ///  }
    ///</code></example>
    property CustomProgressHandler: DNUnifiedSaveOptions_ConversionProgressEventHandler read get_CustomProgressHandler write set_CustomProgressHandler;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNPptxSaveOptions = class(TDNGenericImport<DNPptxSaveOptionsClass, DNPptxSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{E2F086C0-F4F3-5F4F-8549-0A55EA277854}']
  { constructors } 

    {class} function init: DNSvgSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to SVG format
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgSaveOptions')]
  DNSvgSaveOptions = interface(DNUnifiedSaveOptions)
  ['{25AC15DC-08BB-3CE1-B3E5-417B1BCE37DB}']
  { getters & setters } 

    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_CustomStrategyOfEmbeddedImagesSaving: DNSvgSaveOptions_EmbeddedImagesSavingStrategy;
   procedure __fakeFieldSet_CustomStrategyOfEmbeddedImagesSaving(value: DNSvgSaveOptions_EmbeddedImagesSavingStrategy);
   function __fakeFieldGet_TreatTargetFileNameAsDirectory: Boolean;
   procedure __fakeFieldSet_TreatTargetFileNameAsDirectory(value: Boolean);
   function __fakeFieldGet_CompressOutputToZipArchive: Boolean;
   procedure __fakeFieldSet_CompressOutputToZipArchive(value: Boolean);
   function __fakeFieldGet_ScaleToPixels: Boolean;
   procedure __fakeFieldSet_ScaleToPixels(value: Boolean);
   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  This field can contain saving strategy
    ///  that must be used (if present) during conversion
    ///  for customized handling of created referenced external images
    ///  files (like embedded BMP or JPEG) embedded into saved SVG.
    ///  That strategy must process resources
    ///  and return string that represents desirable URI of saved resource
    ///  in generated SVG.
    ///  If processing for this or that file for some reason must be done by converter's code itself, not in custom code,
    ///  please set in custom code flag 'CustomProcessingCancelled' of 'imageSavingInfo' parameter's variable
    ///  It signals to converter that all the necessary steps for processing of that resource
    ///  must be done in converter itself as if there was no any external custom code .
    ///</summary>
   property CustomStrategyOfEmbeddedImagesSaving: DNSvgSaveOptions_EmbeddedImagesSavingStrategy read __fakeFieldGet_CustomStrategyOfEmbeddedImagesSaving write __fakeFieldSet_CustomStrategyOfEmbeddedImagesSaving;
    ///<summary>
    ///  This options defines whether will be created target directory
    ///  (if absent yet) with same name as requested output file
    ///  instead of requested output file itself.
    ///  It so, that directory will contain all output SVG-images of pages (like described below).
    ///  If no, output files of pages other then first one will be created exactly in requested directory
    ///  as main output file, but will contain in file name suffix _[2...n], that
    ///  is defined by page number, f.e. if You define output file "C:\AsposeTests\output.svg"
    ///  and output will contain several svg-files of pages,
    ///  then files of pages will be created also in directory "C:\AsposeTests\" and have names 'output.svg', 'output_2.svg', 'output_3.svg' etc.
    ///</summary>
   property TreatTargetFileNameAsDirectory: Boolean read __fakeFieldGet_TreatTargetFileNameAsDirectory write __fakeFieldSet_TreatTargetFileNameAsDirectory;
    ///<summary>
    ///  Specifies whether output will be created as one zip-archive.
    ///  Please refer comment to 'TreatTargetFileNameAsDirectory' options to see rules of naming
    ///  of svg-files of pages for multipage source document, that are also applied to zipped set of output files.
    ///</summary>
   property CompressOutputToZipArchive: Boolean read __fakeFieldGet_CompressOutputToZipArchive write __fakeFieldSet_CompressOutputToZipArchive;
    ///<summary>
    ///  Specifies whether to scale the output document from typographic points to pixels.
    ///</summary>
   property ScaleToPixels: Boolean read __fakeFieldGet_ScaleToPixels write __fakeFieldSet_ScaleToPixels;
    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNSvgSaveOptions = class(TDNGenericImport<DNSvgSaveOptionsClass, DNSvgSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTeXSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{EDD66FE7-8C0D-5DFF-9788-B9A487D8D3B2}']
  { constructors } 

    {class} function init: DNTeXSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to TeX format
  ///</summary>
  [DNTypeName('Aspose.Pdf.TeXSaveOptions')]
  DNTeXSaveOptions = interface(DNUnifiedSaveOptions)
  ['{377820C2-A7AB-3418-BCE1-C1669574C133}']
  { getters & setters } 

    function get_OutDirectoryPath: string;
    procedure set_OutDirectoryPath(value: string);
    function get_PagesCount: Int32;
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    ///<summary>
    ///  Adds a font ancoding to the font encoding list
    ///</summary>
    ///  <param name="fontEncs">The font encs.</param>
    procedure AddFontEncs(fontEncs: TArray<string>);
    ///<summary>
    ///  Clears the font encoding list
    ///</summary>
    procedure ClearFontEncs;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Property for <see cref="F:Aspose.Pdf.TeXSaveOptions._outDirectoryPath" />
    ///  parameter.
    ///</summary>
    property OutDirectoryPath: string read get_OutDirectoryPath write set_OutDirectoryPath;
    ///<summary>
    ///  Returns the number of pages after conversion.
    ///</summary>
    property PagesCount: Int32 read get_PagesCount;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNTeXSaveOptions = class(TDNGenericImport<DNTeXSaveOptionsClass, DNTeXSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNLaTeXSaveOptionsClass = interface(DNTeXSaveOptionsClass)
  ['{9814A852-1470-5980-A746-4F1F75C07B88}']
  { constructors } 

    {class} function init: DNLaTeXSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to TeX format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.LaTeXSaveOptions')]
  DNLaTeXSaveOptions = interface(DNTeXSaveOptions)
  ['{4B18C2AB-5410-371E-9C50-0081D19C5795}']
  { getters & setters } 

    function get_OutDirectoryPath: string;
    procedure set_OutDirectoryPath(value: string);
    function get_PagesCount: Int32;
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    ///<summary>
    ///  Adds a font ancoding to the font encoding list
    ///</summary>
    ///  <param name="fontEncs">The font encs.</param>
    procedure AddFontEncs(fontEncs: TArray<string>);
    ///<summary>
    ///  Clears the font encoding list
    ///</summary>
    procedure ClearFontEncs;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Property for <see cref="F:Aspose.Pdf.TeXSaveOptions._outDirectoryPath" />
    ///  parameter.
    ///</summary>
    property OutDirectoryPath: string read get_OutDirectoryPath write set_OutDirectoryPath;
    ///<summary>
    ///  Returns the number of pages after conversion.
    ///</summary>
    property PagesCount: Int32 read get_PagesCount;
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNLaTeXSaveOptions = class(TDNGenericImport<DNLaTeXSaveOptionsClass, DNLaTeXSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXpsSaveOptionsClass = interface(DNUnifiedSaveOptionsClass)
  ['{75D63AEE-3421-5B83-AED7-61E8E052E8B6}']
  { constructors } 

    {class} function init: DNXpsSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Xps format
  ///</summary>
  [DNTypeName('Aspose.Pdf.XpsSaveOptions')]
  DNXpsSaveOptions = interface(DNUnifiedSaveOptions)
  ['{B04AAE83-C46B-3FF3-ABBF-D7EFA493AAAA}']
  { getters & setters } 

    function get_SaveTransparentTexts: Boolean;
    procedure set_SaveTransparentTexts(value: Boolean);
    function get_BatchSize: Int32;
    procedure set_BatchSize(value: Int32);
    function get_ExtractOcrSublayerOnly: Boolean;
    procedure set_ExtractOcrSublayerOnly(value: Boolean);
    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TryMergeAdjacentSameBackgroundImages: Boolean;
   procedure __fakeFieldSet_TryMergeAdjacentSameBackgroundImages(value: Boolean);

  { fields } 

    ///<summary>
    ///  Sometimes PDFs contain background images (of pages or table cells)
    ///  constructed from several same tiling background images put one near other.
    ///  In such case renderers of target formats (f.e MsWord for DOCS format) sometimes generates
    ///  visible boundaries beetween parts of background images,
    ///  cause their techniques of image edge smoothing (anti-aliasing) is different from Acrobat Reader.
    ///  If it looks like exported document contains such visible boundaries between
    ///  parts of same background images, please try use this setting to get rid
    ///  of that unwanted effect.
    ///  ATTENTION! This optimization of quality usually essentially slows down conversion,
    ///  so, please, use this option only when it's really necessary.
    ///</summary>
   property TryMergeAdjacentSameBackgroundImages: Boolean read __fakeFieldGet_TryMergeAdjacentSameBackgroundImages write __fakeFieldSet_TryMergeAdjacentSameBackgroundImages;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Indicates whether to preserve transparent (OCR'ed) text.
    ///</summary>
    property SaveTransparentTexts: Boolean read get_SaveTransparentTexts write set_SaveTransparentTexts;
    ///<summary>
    ///  Defines batch size if batched conversion is applicable
    ///  to source and destination formats pair.
    ///</summary>
    property BatchSize: Int32 read get_BatchSize write set_BatchSize;
    ///<summary>
    ///  This atrribute turned on functionality for extracting image or text
    ///  for PDF documents with OCR sublayer.
    ///</summary>
    ///<value><c>true</c> text will be extracted in result document; otherwise, <c>false</c>.</value>
    property ExtractOcrSublayerOnly: Boolean read get_ExtractOcrSublayerOnly write set_ExtractOcrSublayerOnly;
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNXpsSaveOptions = class(TDNGenericImport<DNXpsSaveOptionsClass, DNXpsSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmlSaveOptionsClass = interface(DNSaveOptionsClass)
  ['{AE919085-E781-56DF-B22D-BB899E714A80}']
  { constructors } 

    {class} function init: DNXmlSaveOptions;

  end;

  ///<summary>
  ///  Save options for export to Xml format
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmlSaveOptions')]
  DNXmlSaveOptions = interface(DNSaveOptions)
  ['{893C14B6-3EB3-3648-93E1-78751C802DA8}']
  { getters & setters } 

    function get_WarningHandler: DNIWarningCallback;
    procedure set_WarningHandler(value: DNIWarningCallback);
    function get_SaveFormat: DNSaveFormat;
    function get_CloseResponse: Boolean;
    procedure set_CloseResponse(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Callback to handle any warnings generated.
    ///  The WarningHandler returns ReturnAction enum item specifying either Continue or Abort.
    ///  Continue is the default action and the Save operation continues, however the user may also return Abort in which case the Save operation should cease.
    ///</summary>
    property WarningHandler: DNIWarningCallback read get_WarningHandler write set_WarningHandler;
    ///<summary>
    ///  Format of data save.
    ///</summary>
    property SaveFormat: DNSaveFormat read get_SaveFormat;
    ///<summary>
    ///  Gets or sets boolean value which indicates will Response object be closed after document saved into response.
    ///</summary>
    property CloseResponse: Boolean read get_CloseResponse write set_CloseResponse;
  end;

  TDNXmlSaveOptions = class(TDNGenericImport<DNXmlSaveOptionsClass, DNXmlSaveOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_BorderInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C49BA776-5E6D-5B2B-96B2-80D9BC6753FE}']
  { constructors } 

    ///<summary>
    ///  Creates instance of BorderInfo class
    ///</summary>
    {class} function init: DNSaveOptions_BorderInfo; overload;
    ///<summary>
    ///  Creates instance of BorderInfo class and initializes
    ///  all elements of border(Top, Left, Right, Bottom)
    ///  with attributes copied from supplied border style
    ///</summary>
    ///  <param name="commonStyle">style of border parts that will be used for all elements of border(left, right, top, bottom)</param>
    {class} function init(commonStyle: DNSaveOptions_BorderPartStyle): DNSaveOptions_BorderInfo; overload;

  end;

  ///<summary>
  ///  Instance of this class represents information about border
  ///  That can be drown on some result document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+BorderInfo')]
  DNSaveOptions_BorderInfo = interface(DDN.mscorlib.DNObject)
  ['{07E96F37-A010-3C5B-BBC4-B194784BCD88}']
  { fields getter & setter } 

   function __fakeFieldGet_TopStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_TopStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_LeftStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_LeftStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_RightStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_RightStyleIfAny(value: DNSaveOptions_BorderPartStyle);
   function __fakeFieldGet_BottomStyleIfAny: DNSaveOptions_BorderPartStyle;
   procedure __fakeFieldSet_BottomStyleIfAny(value: DNSaveOptions_BorderPartStyle);

  { fields } 

    ///<summary>
    ///  Represents top part(if any) of border
    ///</summary>
   property TopStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_TopStyleIfAny write __fakeFieldSet_TopStyleIfAny;
    ///<summary>
    ///  Represents left part(if any) of border
    ///</summary>
   property LeftStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_LeftStyleIfAny write __fakeFieldSet_LeftStyleIfAny;
    ///<summary>
    ///  Represents right part(if any) of border
    ///</summary>
   property RightStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_RightStyleIfAny write __fakeFieldSet_RightStyleIfAny;
    ///<summary>
    ///  Represents bottom part(if any) of border
    ///</summary>
   property BottomStyleIfAny: DNSaveOptions_BorderPartStyle read __fakeFieldGet_BottomStyleIfAny write __fakeFieldSet_BottomStyleIfAny;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptions_BorderInfo = class(TDNGenericImport<DNSaveOptions_BorderInfoClass, DNSaveOptions_BorderInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_BorderPartStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E864A11-290B-5B38-9D68-3605A9D9051A}']
  { constructors } 

    {class} function init: DNSaveOptions_BorderPartStyle;

  end;

  ///<summary>
  ///  Represents information of one part of border(top, botom, left side or right side)
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+BorderPartStyle')]
  DNSaveOptions_BorderPartStyle = interface(DDN.mscorlib.DNObject)
  ['{5A788295-3928-3E8D-BDC1-D0083619F453}']
  { getters & setters } 

    function get_WidthInPoints: Int32;
    procedure set_WidthInPoints(value: Int32);

  { fields getter & setter } 

   function __fakeFieldGet_Color: DDN.Aspose.Common.DNColor;
   procedure __fakeFieldSet_Color(value: DDN.Aspose.Common.DNColor);
   function __fakeFieldGet_LineType: DNSaveOptions_HtmlBorderLineType;
   procedure __fakeFieldSet_LineType(value: DNSaveOptions_HtmlBorderLineType);

  { fields } 

    ///<summary>
    ///  Represents border line's line color
    ///</summary>
   property Color: DDN.Aspose.Common.DNColor read __fakeFieldGet_Color write __fakeFieldSet_Color;
    ///<summary>
    ///  Represents border line's type - f.e. Dashed or Solid
    ///</summary>
   property LineType: DNSaveOptions_HtmlBorderLineType read __fakeFieldGet_LineType write __fakeFieldSet_LineType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Represents border line's width in points. Must be number greater then zero.
    ///</summary>
    property WidthInPoints: Int32 read get_WidthInPoints write set_WidthInPoints;
  end;

  TDNSaveOptions_BorderPartStyle = class(TDNGenericImport<DNSaveOptions_BorderPartStyleClass, DNSaveOptions_BorderPartStyle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_MarginInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73F45437-C586-562C-A568-4215F5397DE8}']
  { constructors } 

    ///<summary>
    ///  Creates instance of MarginInfo
    ///</summary>
    {class} function init: DNSaveOptions_MarginInfo; overload;
    ///<summary>
    ///  Creates instance of MarginInfo class and initializes
    ///  all elements of page margin(Top, Left, Right, Bottom)
    ///  with attributes copied from supplied margin style
    ///</summary>
    ///  <param name="commonMargin">style of margin parts that will be used for all elements of margin(left, right, top, bottom)</param>
    {class} function init(commonMargin: DNSaveOptions_MarginPartStyle): DNSaveOptions_MarginInfo; overload;

  end;

  ///<summary>
  ///  Instance of this class represents information about page margin
  ///  That can be drown on some result document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+MarginInfo')]
  DNSaveOptions_MarginInfo = interface(DDN.mscorlib.DNObject)
  ['{0AA4FDAF-5B17-3E66-8665-57CF90ECFB62}']
  { fields getter & setter } 

   function __fakeFieldGet_TopMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_TopMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_RightMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_RightMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_BottomMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_BottomMarginIfAny(value: DNSaveOptions_MarginPartStyle);
   function __fakeFieldGet_LeftMarginIfAny: DNSaveOptions_MarginPartStyle;
   procedure __fakeFieldSet_LeftMarginIfAny(value: DNSaveOptions_MarginPartStyle);

  { fields } 

    ///<summary>
    ///  Represents top page margin(if any)
    ///</summary>
   property TopMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_TopMarginIfAny write __fakeFieldSet_TopMarginIfAny;
    ///<summary>
    ///  Represents right page margin(if any)
    ///</summary>
   property RightMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_RightMarginIfAny write __fakeFieldSet_RightMarginIfAny;
    ///<summary>
    ///  Represents bottom page margin(if any)
    ///</summary>
   property BottomMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_BottomMarginIfAny write __fakeFieldSet_BottomMarginIfAny;
    ///<summary>
    ///  Represents left page margin(if any)
    ///</summary>
   property LeftMarginIfAny: DNSaveOptions_MarginPartStyle read __fakeFieldGet_LeftMarginIfAny write __fakeFieldSet_LeftMarginIfAny;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSaveOptions_MarginInfo = class(TDNGenericImport<DNSaveOptions_MarginInfoClass, DNSaveOptions_MarginInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_MarginPartStyleClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C535C2EB-4C8B-5D05-BB7F-D61C7D4283BD}']
  { constructors } 

    ///<summary>
    ///  Creates instance of MarginPartStyle class
    ///  and set its value in points
    ///</summary>
    ///  <param name="valueInPoints">Integer value in points</param>
    {class} function init(valueInPoints: Int32): DNSaveOptions_MarginPartStyle; overload;
    ///<summary>
    ///  Creates instance of MarginPartStyle class
    ///  and initializes its value in points
    ///</summary>
    ///  <param name="isAuto">Mark margin auto</param>
    {class} function init(isAuto: Boolean): DNSaveOptions_MarginPartStyle; overload;

  end;

  ///<summary>
  ///  Represents information of one part of margin(top, botom, left side or right side)
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+MarginPartStyle')]
  DNSaveOptions_MarginPartStyle = interface(DDN.mscorlib.DNObject)
  ['{31A563E5-10D6-325F-A223-7E76C6247F83}']
  { getters & setters } 

    function get_IsAuto: Boolean;
    procedure set_IsAuto(value: Boolean);
    function get_ValueInPoints: Int32;
    procedure set_ValueInPoints(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a value indicating whether this instance is auto.
    ///</summary>
    ///<value><c>true</c> if this instance is auto; otherwise, <c>false</c>.</value>
    property IsAuto: Boolean read get_IsAuto write set_IsAuto;
    ///<summary>
    ///  Represents margin in points. Must be number greater then zero.
    ///</summary>
    property ValueInPoints: Int32 read get_ValueInPoints write set_ValueInPoints;
  end;

  TDNSaveOptions_MarginPartStyle = class(TDNGenericImport<DNSaveOptions_MarginPartStyleClass, DNSaveOptions_MarginPartStyle>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSaveOptions_ResourceSavingInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C210582C-5350-559A-BD51-4A475D3570D9}']
  end;

  ///<summary>
  ///  This class represents set of data
  ///  that related to external resource file's saving that
  ///  occures during conversion of PDF to some other format (f.e. HTML)
  ///</summary>
  [DNTypeName('Aspose.Pdf.SaveOptions+ResourceSavingInfo')]
  DNSaveOptions_ResourceSavingInfo = interface(DDN.mscorlib.DNObject)
  ['{273963CB-4858-3D72-A020-46AAF0A10255}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
    ///<summary>
    ///  Set by converter.
    ///  Represents binary content of saved file.
    ///</summary>
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
    ///<summary>
    ///  this flag must set to "true" in custom code if for some reasons
    ///  proposed file should be processed not with custom code but
    ///  with converter's code itself in standard for converter way.
    ///  So, it' setting set to true  means that custom code did not process referenced file and
    ///  converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).
    ///</summary>
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNSaveOptions_ResourceSavingInfo = class(TDNGenericImport<DNSaveOptions_ResourceSavingInfoClass, DNSaveOptions_ResourceSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNHtmlSaveOptions_HtmlImageSavingInfoClass = interface(DNSaveOptions_ResourceSavingInfoClass)
  ['{3007F2C1-342C-578A-9396-7CD59E5C496E}']
  { constructors } 

    {class} function init: DNHtmlSaveOptions_HtmlImageSavingInfo;

  end;

  ///<summary>
  ///  This class represents set of data
  ///  that related to external resource image file's saving
  ///  during PDF to HTML conversion.
  ///</summary>
  [DNTypeName('Aspose.Pdf.HtmlSaveOptions+HtmlImageSavingInfo')]
  DNHtmlSaveOptions_HtmlImageSavingInfo = interface(DNSaveOptions_ResourceSavingInfo)
  ['{6C8C529F-1788-3B3D-A61D-AEED029A0930}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_ImageType: DNHtmlSaveOptions_HtmlImageType;
   procedure __fakeFieldSet_ImageType(value: DNHtmlSaveOptions_HtmlImageType);
   function __fakeFieldGet_ParentType: DNHtmlSaveOptions_ImageParentTypes;
   procedure __fakeFieldSet_ParentType(value: DNHtmlSaveOptions_ImageParentTypes);
   function __fakeFieldGet_PdfHostPageNumber: Int32;
   procedure __fakeFieldSet_PdfHostPageNumber(value: Int32);
   function __fakeFieldGet_HtmlHostPageNumber: Int32;
   procedure __fakeFieldSet_HtmlHostPageNumber(value: Int32);
   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  Represents type of saved image referenced in HTML.
    ///  Set by converter and can be used in custom code
    ///  to decide what should be done
    ///</summary>
   property ImageType: DNHtmlSaveOptions_HtmlImageType read __fakeFieldGet_ImageType write __fakeFieldSet_ImageType;
    ///<summary>
    ///  Saved image can pertain to HTML itself or can be extracted.
    ///  from SVG embedded to HTML.
    ///  This property can tell to custom code what's that type of parent of processed image.
    ///  It set by converter and can be used in custom code
    ///  to decide what should be done with that image
    ///  (f.e. custom code can decide where to save image
    ///  or how it must be referenced in parent's content).
    ///</summary>
   property ParentType: DNHtmlSaveOptions_ImageParentTypes read __fakeFieldGet_ParentType write __fakeFieldSet_ParentType;
    ///<summary>
    ///  Tells to custom code to what page of original PDF document pertains saved image
    ///  Since it's possible that will be saved not all pages of original document,
    ///  this value tells us about host page number in original PDF. If original page number for some reason
    ///  is inknown, it allways return '1'
    ///</summary>
   property PdfHostPageNumber: Int32 read __fakeFieldGet_PdfHostPageNumber write __fakeFieldSet_PdfHostPageNumber;
    ///<summary>
    ///  Tells to custom code to what page of generated set of HTML page-files pertains saved image.
    ///  If splitting on pages turned off this value always contains '1' since in such case
    ///  Only one HTML page is generated.
    ///</summary>
   property HtmlHostPageNumber: Int32 read __fakeFieldGet_HtmlHostPageNumber write __fakeFieldSet_HtmlHostPageNumber;
    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
    ///<summary>
    ///  Set by converter.
    ///  Represents binary content of saved file.
    ///</summary>
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
    ///<summary>
    ///  this flag must set to "true" in custom code if for some reasons
    ///  proposed file should be processed not with custom code but
    ///  with converter's code itself in standard for converter way.
    ///  So, it' setting set to true  means that custom code did not process referenced file and
    ///  converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).
    ///</summary>
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNHtmlSaveOptions_HtmlImageSavingInfo = class(TDNGenericImport<DNHtmlSaveOptions_HtmlImageSavingInfoClass, DNHtmlSaveOptions_HtmlImageSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNSvgSaveOptions_SvgImageSavingInfoClass = interface(DNSaveOptions_ResourceSavingInfoClass)
  ['{5C837BD2-17C5-5E99-A945-7D50C09BC17A}']
  { constructors } 

    {class} function init: DNSvgSaveOptions_SvgImageSavingInfo;

  end;

  ///<summary>
  ///  This class represents set of data
  ///  that related to external resource image file's saving
  ///  during PDF to HTML conversion.
  ///</summary>
  [DNTypeName('Aspose.Pdf.SvgSaveOptions+SvgImageSavingInfo')]
  DNSvgSaveOptions_SvgImageSavingInfo = interface(DNSaveOptions_ResourceSavingInfo)
  ['{B83E961E-BF08-3E4A-A705-3312392B80F2}']
  { getters & setters } 

    function get_ResourceType: DNSaveOptions_NodeLevelResourceType;

  { fields getter & setter } 

   function __fakeFieldGet_ImageType: DNSvgSaveOptions_SvgExternalImageType;
   procedure __fakeFieldSet_ImageType(value: DNSvgSaveOptions_SvgExternalImageType);
   function __fakeFieldGet_SupposedFileName: string;
   procedure __fakeFieldSet_SupposedFileName(value: string);
   function __fakeFieldGet_ContentStream: DDN.mscorlib.DNStream;
   procedure __fakeFieldSet_ContentStream(value: DDN.mscorlib.DNStream);
   function __fakeFieldGet_CustomProcessingCancelled: Boolean;
   procedure __fakeFieldSet_CustomProcessingCancelled(value: Boolean);

  { fields } 

    ///<summary>
    ///  represent type os saved image referenced in HTML.
    ///  Set by converter and can be used in custom code
    ///  to decide what should be done
    ///</summary>
   property ImageType: DNSvgSaveOptions_SvgExternalImageType read __fakeFieldGet_ImageType write __fakeFieldSet_ImageType;
    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
   property SupposedFileName: string read __fakeFieldGet_SupposedFileName write __fakeFieldSet_SupposedFileName;
    ///<summary>
    ///  Set by converter.
    ///  Represents binary content of saved file.
    ///</summary>
   property ContentStream: DDN.mscorlib.DNStream read __fakeFieldGet_ContentStream write __fakeFieldSet_ContentStream;
    ///<summary>
    ///  this flag must set to "true" in custom code if for some reasons
    ///  proposed file should be processed not with custom code but
    ///  with converter's code itself in standard for converter way.
    ///  So, it' setting set to true  means that custom code did not process referenced file and
    ///  converter must handle it itself (in both sences - for saving somewhere and for naming in referencing file).
    ///</summary>
   property CustomProcessingCancelled: Boolean read __fakeFieldGet_CustomProcessingCancelled write __fakeFieldSet_CustomProcessingCancelled;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Set by converter.
    ///  Supposed file name that goes from converter to code of custom method
    ///  Can be use in custom code to decide how to process or where save that file
    ///</summary>
    property ResourceType: DNSaveOptions_NodeLevelResourceType read get_ResourceType;
  end;

  TDNSvgSaveOptions_SvgImageSavingInfo = class(TDNGenericImport<DNSvgSaveOptions_SvgImageSavingInfoClass, DNSvgSaveOptions_SvgImageSavingInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNStampClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C3E2F329-BCD8-5B77-BB91-9624B5E8C450}']
  end;

  ///<summary>
  ///  An abstract class for various kinds of stamps which come as descendants.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Stamp')]
  DNStamp = interface(DDN.mscorlib.DNObject)
  ['{CCDD2242-2AD1-395A-B5C4-187D8DD384AB}']
  { getters & setters } 

    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Adds stamp on the page.
    ///</summary>
    ///  <param name="page">
    ///  The page to add stamp.
    ///</param>
    procedure Put(page: DNPage);
    ///<summary>
    ///  Sets stamp Id.
    ///</summary>
    ///  <param name="value">New value of Stamp ID.</param>
    procedure setStampId(value: Int32);
    ///<summary>
    ///  Returns stamp ID.
    ///</summary>
    ///<returns>Identifier of the stamp.</returns>
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Sets or gets a bool value that indicates the content is stamped as background.
    ///  If the value is true, the stamp content is layed at the bottom.
    ///  By defalt, the value is false, the stamp content is layed at the top.
    ///</summary>
    property Background: Boolean read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    ///<summary>
    ///  Gets or sets a value of the stamp outline width.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    ///<summary>
    ///  Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" />
    ///  values.
    ///  Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
    ///  To set arbitrary angle use RotateAngle property.
    ///  If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Horizontal stamp coordinate, starting from the left.
    ///</summary>
    property XIndent: Double read get_XIndent write set_XIndent;
    ///<summary>
    ///  Vertical stamp coordinate, starting from the bottom.
    ///</summary>
    property YIndent: Double read get_YIndent write set_YIndent;
    ///<summary>
    ///  Gets or sets Horizontal alignment of stamp on the page.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets vertical alignment of stamp on page.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets left margin of stamp.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Gets or sets right margin of stamp.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Gets or sets bottom margin of stamp.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Gets or sets top margin of stamp.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
    ///</summary>
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    ///<summary>
    ///  Desired width of the stamp on the page.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Desired height of the stamp on the page.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Vertical zooming factor of the stamp. Allows to scale stamp vertically.
    ///</summary>
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    ///<summary>
    ///  Zooming factor of the stamp. Allows to scale stamp.
    ///  Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately.
    ///  Setting of this property changes both ZoomX and ZoomY properties.
    ///  If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
    ///</summary>
    property Zoom: Double read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets or sets rotate angle of stamp in degrees.
    ///  This property allows to set arbitrary rotate angle.
    ///</summary>
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNStamp = class(TDNGenericImport<DNStampClass, DNStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNImageStampClass = interface(DNStampClass)
  ['{4926B6B6-654F-5FAA-9036-BED8B4E2F7EB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.ImageStamp" />
    ///  class.
    ///</summary>
    ///  <param name="image">
    ///  Stream which contains image data.
    ///</param>
    {class} function init(image: DDN.mscorlib.DNStream): DNImageStamp; overload;
    ///<summary>
    ///  Creates image stamp by image in the specified file.
    ///</summary>
    ///  <param name="fileName">Name of the file which contains image. </param>
    {class} function init(fileName: string): DNImageStamp; overload;

  end;

  ///<summary>
  ///  Reresents graphic stamp.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ImageStamp')]
  DNImageStamp = interface(DNStamp)
  ['{4E859646-0050-3445-B33F-E536F9F80BA0}']
  { getters & setters } 

    function get_Image: DDN.mscorlib.DNStream;
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_Quality: Int32;
    procedure set_Quality(value: Int32);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Adds graphic stamp on the page.
    ///</summary>
    ///  <param name="page">
    ///  Page for stamping.
    ///</param>
    procedure Put(page: DNPage);
    ///<summary>
    ///  Sets stamp Id.
    ///</summary>
    ///  <param name="value">New value of Stamp ID.</param>
    procedure setStampId(value: Int32);
    ///<summary>
    ///  Returns stamp ID.
    ///</summary>
    ///<returns>Identifier of the stamp.</returns>
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets image stream used for stamping.
    ///</summary>
    property Image: DDN.mscorlib.DNStream read get_Image;
    ///<summary>
    ///  Gets or sets image width. Setting this property allos to scal image horizontally.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Gets or sets image height. Setting this image allows to scale image vertically.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Gets or sets quality of image stamp in percent. Valid values are 0..100%.
    ///</summary>
    property Quality: Int32 read get_Quality write set_Quality;
    ///<summary>
    ///  Sets or gets a bool value that indicates the content is stamped as background.
    ///  If the value is true, the stamp content is layed at the bottom.
    ///  By defalt, the value is false, the stamp content is layed at the top.
    ///</summary>
    property Background: Boolean read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    ///<summary>
    ///  Gets or sets a value of the stamp outline width.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    ///<summary>
    ///  Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" />
    ///  values.
    ///  Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
    ///  To set arbitrary angle use RotateAngle property.
    ///  If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Horizontal stamp coordinate, starting from the left.
    ///</summary>
    property XIndent: Double read get_XIndent write set_XIndent;
    ///<summary>
    ///  Vertical stamp coordinate, starting from the bottom.
    ///</summary>
    property YIndent: Double read get_YIndent write set_YIndent;
    ///<summary>
    ///  Gets or sets Horizontal alignment of stamp on the page.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets vertical alignment of stamp on page.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets left margin of stamp.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Gets or sets right margin of stamp.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Gets or sets bottom margin of stamp.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Gets or sets top margin of stamp.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
    ///</summary>
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    ///<summary>
    ///  Vertical zooming factor of the stamp. Allows to scale stamp vertically.
    ///</summary>
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    ///<summary>
    ///  Zooming factor of the stamp. Allows to scale stamp.
    ///  Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately.
    ///  Setting of this property changes both ZoomX and ZoomY properties.
    ///  If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
    ///</summary>
    property Zoom: Double read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets or sets rotate angle of stamp in degrees.
    ///  This property allows to set arbitrary rotate angle.
    ///</summary>
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNImageStamp = class(TDNGenericImport<DNImageStampClass, DNImageStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfPageStampClass = interface(DNStampClass)
  ['{5DCE56F9-3C84-511A-BC32-C36FFEC3C41A}']
  { constructors } 

    ///<summary>
    ///  Constructor of PdfPageStamp.
    ///</summary>
    ///  <param name="pdfPage">Page which is used for stamping.</param>
    {class} function init(pdfPage: DNPage): DNPdfPageStamp; overload;
    ///<summary>
    ///  Creates Pdf page stamp from specifed page of the document in specified file.
    ///</summary>
    ///  <param name="fileName">Name and page of PDF file.</param>
    ///  <param name="pageIndex">Index of the page.</param>
    {class} function init(fileName: string; pageIndex: Int32): DNPdfPageStamp; overload;
    ///<summary>
    ///  Creates Pdf page stamp from specifed page in the document from the stream.
    ///</summary>
    ///  <param name="stream">Stream which contains PDF </param>
    ///  <param name="pageIndex">Index of the page.</param>
    {class} function init(stream: DDN.mscorlib.DNStream; pageIndex: Int32): DNPdfPageStamp; overload;

  end;

  ///<summary>
  ///  Class represents stamp which uses PDF page as stamp.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfPageStamp')]
  DNPdfPageStamp = interface(DNStamp)
  ['{2DBF50F8-3D91-3A7E-92FE-8ADF68E848F8}']
  { getters & setters } 

    function get_PdfPage: DNPage;
    procedure set_PdfPage(value: DNPage);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Put stamp on the specified page.
    ///</summary>
    ///  <param name="page">Page where stamp will be placed.</param>
    procedure Put(page: DNPage);
    ///<summary>
    ///  Sets stamp Id.
    ///</summary>
    ///  <param name="value">New value of Stamp ID.</param>
    procedure setStampId(value: Int32);
    ///<summary>
    ///  Returns stamp ID.
    ///</summary>
    ///<returns>Identifier of the stamp.</returns>
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets page which will be used as stamp.
    ///</summary>
    property PdfPage: DNPage read get_PdfPage write set_PdfPage;
    ///<summary>
    ///  Sets or gets a bool value that indicates the content is stamped as background.
    ///  If the value is true, the stamp content is layed at the bottom.
    ///  By defalt, the value is false, the stamp content is layed at the top.
    ///</summary>
    property Background: Boolean read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    ///<summary>
    ///  Gets or sets a value of the stamp outline width.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    ///<summary>
    ///  Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" />
    ///  values.
    ///  Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
    ///  To set arbitrary angle use RotateAngle property.
    ///  If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Horizontal stamp coordinate, starting from the left.
    ///</summary>
    property XIndent: Double read get_XIndent write set_XIndent;
    ///<summary>
    ///  Vertical stamp coordinate, starting from the bottom.
    ///</summary>
    property YIndent: Double read get_YIndent write set_YIndent;
    ///<summary>
    ///  Gets or sets Horizontal alignment of stamp on the page.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets vertical alignment of stamp on page.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets left margin of stamp.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Gets or sets right margin of stamp.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Gets or sets bottom margin of stamp.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Gets or sets top margin of stamp.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
    ///</summary>
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    ///<summary>
    ///  Desired width of the stamp on the page.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Desired height of the stamp on the page.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Vertical zooming factor of the stamp. Allows to scale stamp vertically.
    ///</summary>
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    ///<summary>
    ///  Zooming factor of the stamp. Allows to scale stamp.
    ///  Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately.
    ///  Setting of this property changes both ZoomX and ZoomY properties.
    ///  If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
    ///</summary>
    property Zoom: Double read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets or sets rotate angle of stamp in degrees.
    ///  This property allows to set arbitrary rotate angle.
    ///</summary>
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNPdfPageStamp = class(TDNGenericImport<DNPdfPageStampClass, DNPdfPageStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTextStampClass = interface(DNStampClass)
  ['{28AE69B6-0470-5422-8B47-452848400280}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" />
    ///  class.
    ///</summary>
    ///  <param name="value">
    ///  Stamp value.
    ///</param>
    {class} function init(value: string): DNTextStamp; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" />
    ///  class.
    ///</summary>
    ///  <param name="value">Stamp value.</param>
    ///  <param name="textState">Stamp text state.</param>
    {class} function init(value: string; textState: DNTextState): DNTextStamp; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.TextStamp" />
    ///  class with formattedText object
    ///</summary>
    ///  <param name="formattedText">FormattedText object which contains text of the stamp.</param>
    {class} function init(formattedText: DNFormattedText): DNTextStamp; overload;

  end;

  ///<summary>
  ///  Reresents textual stamp.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TextStamp')]
  DNTextStamp = interface(DNStamp)
  ['{E4285B11-439C-37B4-ACD1-BC3DAC94B0B1}']
  { getters & setters } 

    function get_Draw: Boolean;
    procedure set_Draw(value: Boolean);
    function get_TreatYIndentAsBaseLine: Boolean;
    procedure set_TreatYIndentAsBaseLine(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_Scale: Boolean;
    procedure set_Scale(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_TextState: DNTextState;
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MaxRowWidth: Double;
    procedure set_MaxRowWidth(value: Double);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Adds textual stamp on the page.
    ///</summary>
    ///  <param name="page">
    ///  Page for stamping.
    ///</param>
    procedure Put(page: DNPage);
    ///<summary>
    ///  Sets stamp Id.
    ///</summary>
    ///  <param name="value">New value of Stamp ID.</param>
    procedure setStampId(value: Int32);
    ///<summary>
    ///  Returns stamp ID.
    ///</summary>
    ///<returns>Identifier of the stamp.</returns>
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  This property determines how stamp is drawn on page. If Draw = true stamp is drawn as graphic operators and if draw = false then stamp is drawn as text.
    ///</summary>
    property Draw: Boolean read get_Draw write set_Draw;
    ///<summary>
    ///  Defines coordinate origin for placing text.
    ///  If TreatYIndentAsBaseLine = true (default when Draw = true) YIndent value will be treated as text base line.
    ///  If TreatYIndentAsBaseLine = false (default when Draw = false) YIndent value will be treated as bottom (descent line) of text.
    ///</summary>
    property TreatYIndentAsBaseLine: Boolean read get_TreatYIndentAsBaseLine write set_TreatYIndentAsBaseLine;
    ///<summary>
    ///  Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.
    ///</summary>
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    ///<summary>
    ///  Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.
    ///</summary>
    property Justify: Boolean read get_Justify write set_Justify;
    ///<summary>
    ///  Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.
    ///</summary>
    property Scale: Boolean read get_Scale write set_Scale;
    ///<summary>
    ///  Gets or sets string value which is used as stamp on the page.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets text properties of the stamp. See <see cref="P:Aspose.Pdf.TextStamp.TextState" />
    ///  for details.
    ///</summary>
    property TextState: DNTextState read get_TextState;
    ///<summary>
    ///  Alignment of the text inside the stamp.
    ///</summary>
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    ///<summary>
    ///  Desired width of the stamp on the page.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Desired height of the stamp on the page.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Max row height for WordWrap option.
    ///</summary>
    property MaxRowWidth: Double read get_MaxRowWidth write set_MaxRowWidth;
    ///<summary>
    ///  Sets or gets a bool value that indicates the content is stamped as background.
    ///  If the value is true, the stamp content is layed at the bottom.
    ///  By defalt, the value is false, the stamp content is layed at the top.
    ///</summary>
    property Background: Boolean read get_Background write set_Background;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property Opacity: Double read get_Opacity write set_Opacity;
    ///<summary>
    ///  Gets or sets a value to indicate the stamp outline opacity. The value is from 0.0 to 1.0.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    ///<summary>
    ///  Gets or sets a value of the stamp outline width.
    ///  By default the value is 1.0.
    ///</summary>
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    ///<summary>
    ///  Sets or gets the rotation of stamp content according <see cref="T:Aspose.Pdf.Rotation" />
    ///  values.
    ///  Note. This property is for set angles which are multiples of 90 degrees (0, 90, 180, 270 degrees).
    ///  To set arbitrary angle use RotateAngle property.
    ///  If angle set by ArbitraryAngle is not multiple of 90 then Rotate property returns Rotation.None.
    ///</summary>
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    ///<summary>
    ///  Horizontal stamp coordinate, starting from the left.
    ///</summary>
    property XIndent: Double read get_XIndent write set_XIndent;
    ///<summary>
    ///  Vertical stamp coordinate, starting from the bottom.
    ///</summary>
    property YIndent: Double read get_YIndent write set_YIndent;
    ///<summary>
    ///  Gets or sets Horizontal alignment of stamp on the page.
    ///</summary>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets vertical alignment of stamp on page.
    ///</summary>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets left margin of stamp.
    ///</summary>
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    ///<summary>
    ///  Gets or sets right margin of stamp.
    ///</summary>
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    ///<summary>
    ///  Gets or sets bottom margin of stamp.
    ///</summary>
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    ///<summary>
    ///  Gets or sets top margin of stamp.
    ///</summary>
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    ///<summary>
    ///  Horizontal zooming factor of the stamp. Allows to scale stamp horizontally.
    ///</summary>
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    ///<summary>
    ///  Vertical zooming factor of the stamp. Allows to scale stamp vertically.
    ///</summary>
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    ///<summary>
    ///  Zooming factor of the stamp. Allows to scale stamp.
    ///  Please note that pair of properties ZoomX and ZoomY allows to set zoom factor for every axe separately.
    ///  Setting of this property changes both ZoomX and ZoomY properties.
    ///  If ZoomX and ZoomY are different then Zoom property returns ZoomX value.
    ///</summary>
    property Zoom: Double read get_Zoom write set_Zoom;
    ///<summary>
    ///  Gets or sets rotate angle of stamp in degrees.
    ///  This property allows to set arbitrary rotate angle.
    ///</summary>
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNTextStamp = class(TDNGenericImport<DNTextStampClass, DNTextStamp>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPageNumberStampClass = interface(DNTextStampClass)
  ['{FD0EDAC1-BBD1-5CEC-8C45-1825871B1FBB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" />
    ///  class.
    ///</summary>
    ///  <param name="format">
    ///  String value used for stamping. See <see cref="P:Aspose.Pdf.PageNumberStamp.Format" />
    ///  property for details.
    ///</param>
    {class} function init(format: string): DNPageNumberStamp; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PageNumberStamp" />
    ///  class. Format is set to "#".
    ///</summary>
    {class} function init: DNPageNumberStamp; overload;
    ///<summary>
    ///  Creates PageNumberStamp by formatted text.
    ///</summary>
    ///  <param name="formattedText">Formatted text which used to create Page Number Stamp.</param>
    {class} function init(formattedText: DNFormattedText): DNPageNumberStamp; overload;

  end;

  ///<summary>
  ///  Represents page number stamp and used to number pages.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PageNumberStamp')]
  DNPageNumberStamp = interface(DNTextStamp)
  ['{92B7B35A-7DEB-3008-BE1A-E8652124CC9C}']
  { getters & setters } 

    function get_Format: string;
    procedure set_Format(value: string);
    function get_StartingNumber: Int32;
    procedure set_StartingNumber(value: Int32);
    function get_NumberingStyle: DNNumberingStyle;
    procedure set_NumberingStyle(value: DNNumberingStyle);
    function get_Draw: Boolean;
    procedure set_Draw(value: Boolean);
    function get_TreatYIndentAsBaseLine: Boolean;
    procedure set_TreatYIndentAsBaseLine(value: Boolean);
    function get_WordWrap: Boolean;
    procedure set_WordWrap(value: Boolean);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_Scale: Boolean;
    procedure set_Scale(value: Boolean);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_TextState: DNTextState;
    function get_TextAlignment: DNHorizontalAlignment;
    procedure set_TextAlignment(value: DNHorizontalAlignment);
    function get_Width: Double;
    procedure set_Width(value: Double);
    function get_Height: Double;
    procedure set_Height(value: Double);
    function get_MaxRowWidth: Double;
    procedure set_MaxRowWidth(value: Double);
    function get_Background: Boolean;
    procedure set_Background(value: Boolean);
    function get_Opacity: Double;
    procedure set_Opacity(value: Double);
    function get_OutlineOpacity: Double;
    procedure set_OutlineOpacity(value: Double);
    function get_OutlineWidth: Double;
    procedure set_OutlineWidth(value: Double);
    function get_Rotate: DNRotation;
    procedure set_Rotate(value: DNRotation);
    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_LeftMargin: Double;
    procedure set_LeftMargin(value: Double);
    function get_RightMargin: Double;
    procedure set_RightMargin(value: Double);
    function get_BottomMargin: Double;
    procedure set_BottomMargin(value: Double);
    function get_TopMargin: Double;
    procedure set_TopMargin(value: Double);
    function get_ZoomX: Double;
    procedure set_ZoomX(value: Double);
    function get_ZoomY: Double;
    procedure set_ZoomY(value: Double);
    function get_Zoom: Double;
    procedure set_Zoom(value: Double);
    function get_RotateAngle: Double;
    procedure set_RotateAngle(value: Double);

  { methods } 

    ///<summary>
    ///  Adds page number.
    ///</summary>
    ///  <param name="page">
    ///  Page for stamping.
    ///</param>
    procedure Put(page: DNPage);
    procedure setStampId(value: Int32);
    function getStampId: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  String value for stamping page numbers.
    ///  Value must include char '#' which is replaced with the page number in the process of stamping.
    ///</summary>
    property Format: string read get_Format write set_Format;
    ///<summary>
    ///  Gets or sets value of the number of starting page. Other pages will be numbered starting from this value.
    ///</summary>
    property StartingNumber: Int32 read get_StartingNumber write set_StartingNumber;
    ///<summary>
    ///  Numbering style which used by this stamp.
    ///</summary>
    property NumberingStyle: DNNumberingStyle read get_NumberingStyle write set_NumberingStyle;
    ///<summary>
    ///  This property determines how stamp is drawn on page. If Draw = true stamp is drawn as graphic operators and if draw = false then stamp is drawn as text.
    ///</summary>
    property Draw: Boolean read get_Draw write set_Draw;
    ///<summary>
    ///  Defines coordinate origin for placing text.
    ///  If TreatYIndentAsBaseLine = true (default when Draw = true) YIndent value will be treated as text base line.
    ///  If TreatYIndentAsBaseLine = false (default when Draw = false) YIndent value will be treated as bottom (descent line) of text.
    ///</summary>
    property TreatYIndentAsBaseLine: Boolean read get_TreatYIndentAsBaseLine write set_TreatYIndentAsBaseLine;
    ///<summary>
    ///  Defines word wrap. If this property set to true and Width value specified, text will be broken in the several lines to fit into specified width. Default value: false.
    ///</summary>
    property WordWrap: Boolean read get_WordWrap write set_WordWrap;
    ///<summary>
    ///  Defines text justification. If this property is set to true, both left and right edges of the text are aligned. Default value: false.
    ///</summary>
    property Justify: Boolean read get_Justify write set_Justify;
    ///<summary>
    ///  Defines scaling of the text. If this property is set to true and Width value specified, text will be scaled in order to fit to specified width.
    ///</summary>
    property Scale: Boolean read get_Scale write set_Scale;
    ///<summary>
    ///  Gets or sets string value which is used as stamp on the page.
    ///</summary>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  Gets text properties of the stamp. See <see cref="P:Aspose.Pdf.TextStamp.TextState" />
    ///  for details.
    ///</summary>
    property TextState: DNTextState read get_TextState;
    ///<summary>
    ///  Alignment of the text inside the stamp.
    ///</summary>
    property TextAlignment: DNHorizontalAlignment read get_TextAlignment write set_TextAlignment;
    ///<summary>
    ///  Desired width of the stamp on the page.
    ///</summary>
    property Width: Double read get_Width write set_Width;
    ///<summary>
    ///  Desired height of the stamp on the page.
    ///</summary>
    property Height: Double read get_Height write set_Height;
    ///<summary>
    ///  Max row height for WordWrap option.
    ///</summary>
    property MaxRowWidth: Double read get_MaxRowWidth write set_MaxRowWidth;
    property Background: Boolean read get_Background write set_Background;
    property Opacity: Double read get_Opacity write set_Opacity;
    property OutlineOpacity: Double read get_OutlineOpacity write set_OutlineOpacity;
    property OutlineWidth: Double read get_OutlineWidth write set_OutlineWidth;
    property Rotate: DNRotation read get_Rotate write set_Rotate;
    property XIndent: Double read get_XIndent write set_XIndent;
    property YIndent: Double read get_YIndent write set_YIndent;
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    property LeftMargin: Double read get_LeftMargin write set_LeftMargin;
    property RightMargin: Double read get_RightMargin write set_RightMargin;
    property BottomMargin: Double read get_BottomMargin write set_BottomMargin;
    property TopMargin: Double read get_TopMargin write set_TopMargin;
    property ZoomX: Double read get_ZoomX write set_ZoomX;
    property ZoomY: Double read get_ZoomY write set_ZoomY;
    property Zoom: Double read get_Zoom write set_Zoom;
    property RotateAngle: Double read get_RotateAngle write set_RotateAngle;
  end;

  TDNPageNumberStamp = class(TDNGenericImport<DNPageNumberStampClass, DNPageNumberStamp>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructure_ElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61B1CCC2-D1B1-5929-88AA-FF9046B475E6}']
  end;

  ///<summary>
  ///  Class representing base element of logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Structure.Element')]
  DNStructure_Element = interface(DDN.mscorlib.DNObject)
  ['{B5BE5ACE-0972-3925-BEE9-EE2F4C1FC360}']
  { getters & setters } 

    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  (Optional; PDF 1.4) A language specifying the natural language for all text
    ///  in the structure element except where overridden by language specifications for nested structure
    ///  elements or marked content.
    ///</summary>
    property Lang: string read get_Lang write set_Lang;
    ///<summary>
    ///  (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
    ///  This replacement text (which should apply to as small a piece of content as possible)
    ///  is useful when extracting the document’s contents in support of accessibility to users
    ///  with disabilities or for other purposes.
    ///</summary>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  (Optional) An alternate description of the structure element and its children in
    ///  human-readableform, which is useful when extracting the document’s contents in support
    ///  of accessibility to users with disabilities or for other purposes.
    ///</summary>
    property Alt: string read get_Alt write set_Alt;
    ///<summary>
    ///  (Optional; PDF 1.5) The expanded form of an abbreviation.
    ///</summary>
    property E: string read get_E write set_E;
  end;

  TDNStructure_Element = class(TDNGenericImport<DNStructure_ElementClass, DNStructure_Element>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructure_FigureElementClass = interface(DNStructure_ElementClass)
  ['{EE93F5E2-02C8-5F07-AFCB-FD9383E69C02}']
  end;

  ///<summary>
  ///  Class representing logical structure figure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Structure.FigureElement')]
  DNStructure_FigureElement = interface(DNStructure_Element)
  ['{6837ABE7-D516-3431-88EE-CB6DA8CA9134}']
  { getters & setters } 

    function get_Image: DDN.Aspose.Common.DNImage;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the value of figure structure element.
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image;
    ///<summary>
    ///  (Optional; PDF 1.4) A language specifying the natural language for all text
    ///  in the structure element except where overridden by language specifications for nested structure
    ///  elements or marked content.
    ///</summary>
    property Lang: string read get_Lang write set_Lang;
    ///<summary>
    ///  (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
    ///  This replacement text (which should apply to as small a piece of content as possible)
    ///  is useful when extracting the document’s contents in support of accessibility to users
    ///  with disabilities or for other purposes.
    ///</summary>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  (Optional) An alternate description of the structure element and its children in
    ///  human-readableform, which is useful when extracting the document’s contents in support
    ///  of accessibility to users with disabilities or for other purposes.
    ///</summary>
    property Alt: string read get_Alt write set_Alt;
    ///<summary>
    ///  (Optional; PDF 1.5) The expanded form of an abbreviation.
    ///</summary>
    property E: string read get_E write set_E;
  end;

  TDNStructure_FigureElement = class(TDNGenericImport<DNStructure_FigureElementClass, DNStructure_FigureElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNRootElementClass = interface(DNStructure_ElementClass)
  ['{4E72783D-F270-546B-8E4F-865EE70CAF5B}']
  end;

  ///<summary>
  ///  Root structure element.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Structure.RootElement')]
  DNRootElement = interface(DNStructure_Element)
  ['{F7B66FCD-E6E5-3ACB-9422-ACF1F5D1A6F5}']
  { getters & setters } 

    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  (Optional; PDF 1.4) A language specifying the natural language for all text
    ///  in the structure element except where overridden by language specifications for nested structure
    ///  elements or marked content.
    ///</summary>
    property Lang: string read get_Lang write set_Lang;
    ///<summary>
    ///  (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
    ///  This replacement text (which should apply to as small a piece of content as possible)
    ///  is useful when extracting the document’s contents in support of accessibility to users
    ///  with disabilities or for other purposes.
    ///</summary>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  (Optional) An alternate description of the structure element and its children in
    ///  human-readableform, which is useful when extracting the document’s contents in support
    ///  of accessibility to users with disabilities or for other purposes.
    ///</summary>
    property Alt: string read get_Alt write set_Alt;
    ///<summary>
    ///  (Optional; PDF 1.5) The expanded form of an abbreviation.
    ///</summary>
    property E: string read get_E write set_E;
  end;

  TDNRootElement = class(TDNGenericImport<DNRootElementClass, DNRootElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNStructElementClass = interface(DNStructure_ElementClass)
  ['{E8F4F080-3C1A-576F-8CF5-B3727D63C49E}']
  end;

  ///<summary>
  ///  General structure element.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Structure.StructElement')]
  DNStructElement = interface(DNStructure_Element)
  ['{1EE5D457-4B92-3E30-B467-1565FED123AD}']
  { getters & setters } 

    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  (Optional; PDF 1.4) A language specifying the natural language for all text
    ///  in the structure element except where overridden by language specifications for nested structure
    ///  elements or marked content.
    ///</summary>
    property Lang: string read get_Lang write set_Lang;
    ///<summary>
    ///  (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
    ///  This replacement text (which should apply to as small a piece of content as possible)
    ///  is useful when extracting the document’s contents in support of accessibility to users
    ///  with disabilities or for other purposes.
    ///</summary>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  (Optional) An alternate description of the structure element and its children in
    ///  human-readableform, which is useful when extracting the document’s contents in support
    ///  of accessibility to users with disabilities or for other purposes.
    ///</summary>
    property Alt: string read get_Alt write set_Alt;
    ///<summary>
    ///  (Optional; PDF 1.5) The expanded form of an abbreviation.
    ///</summary>
    property E: string read get_E write set_E;
  end;

  TDNStructElement = class(TDNGenericImport<DNStructElementClass, DNStructElement>) end;

  //-------------namespace: Aspose.Pdf.Structure----------------
  DNTextElementClass = interface(DNStructure_ElementClass)
  ['{881FB2D7-B8DA-5E77-BCEF-BC4489B7FC2B}']
  end;

  ///<summary>
  ///  General text element of document logical structure.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Structure.TextElement')]
  DNTextElement = interface(DNStructure_Element)
  ['{87F4E1E5-E949-36FF-8596-CB352478EEAF}']
  { getters & setters } 

    function get_Text: string;
    function get_Lang: string;
    procedure set_Lang(value: string);
    function get_ActualText: string;
    procedure set_ActualText(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_E: string;
    procedure set_E(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the value of text structure element.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  (Optional; PDF 1.4) A language specifying the natural language for all text
    ///  in the structure element except where overridden by language specifications for nested structure
    ///  elements or marked content.
    ///</summary>
    property Lang: string read get_Lang write set_Lang;
    ///<summary>
    ///  (Optional; PDF 1.4) Text that is an exact replacement for the structure element and its children.
    ///  This replacement text (which should apply to as small a piece of content as possible)
    ///  is useful when extracting the document’s contents in support of accessibility to users
    ///  with disabilities or for other purposes.
    ///</summary>
    property ActualText: string read get_ActualText write set_ActualText;
    ///<summary>
    ///  (Optional) An alternate description of the structure element and its children in
    ///  human-readableform, which is useful when extracting the document’s contents in support
    ///  of accessibility to users with disabilities or for other purposes.
    ///</summary>
    property Alt: string read get_Alt write set_Alt;
    ///<summary>
    ///  (Optional; PDF 1.5) The expanded form of an abbreviation.
    ///</summary>
    property E: string read get_E write set_E;
  end;

  TDNTextElement = class(TDNGenericImport<DNTextElementClass, DNTextElement>) end;

  //-------------namespace: Aspose.Pdf.Tagged----------------
  ///<summary>
  ///  Represents interface for work with TaggedPdf content of document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Tagged.ITaggedContent')]
  DNITaggedContent = interface(DDN.mscorlib.DNObject)
  ['{39803D5A-A88B-32F6-9518-64C316D9DB06}']
  { getters & setters } 

    function get_StructureTextState: DNStructureTextState;
    function get_StructTreeRootElement: DNStructTreeRootElement;
    function get_RootElement: DNStructureElement;

  { methods } 

    ///<summary><para>Sets natural language for pdf document.</para><para>A language identifier that shall specify the natural language for all text in the document except where overridden by language specifications for structure elements or marked content.</para></summary>
    ///  <param name="lang">A language identifier shall either be the empty text string, to indicate that the language is unknown, or a Language-Tag as defined in RFC 3066, Tags for the Identification of Languages.</param>
    procedure SetLanguage(lang: string);
    ///<summary><para>Sets title for PDF document.</para></summary>
    ///  <param name="title">The title of PDF document.</param>
    procedure SetTitle(title: string);
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.PartElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreatePartElement: DNPartElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.ArtElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateArtElement: DNArtElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.SectElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateSectElement: DNSectElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.DivElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateDivElement: DNDivElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.BlockQuoteElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateBlockQuoteElement: DNBlockQuoteElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.CaptionElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateCaptionElement: DNCaptionElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TOCElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTOCElement: DNTOCElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TOCIElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTOCIElement: DNTOCIElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.IndexElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateIndexElement: DNIndexElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.NonStructElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateNonStructElement: DNNonStructElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.PrivateElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreatePrivateElement: DNPrivateElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.ParagraphElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateParagraphElement: DNParagraphElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.HeaderElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateHeaderElement: DNHeaderElement; overload;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.HeaderElement" />
    ///  with level.</para></summary>
    ///  <param name="level">The level of Header. Must be 1, 2, 3, 4, 5 or 6.</param>
    ///<returns>Created structure element.</returns>
    function CreateHeaderElement(level: Int32): DNHeaderElement; overload;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.ListElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateListElement: DNListElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableElement: DNTableElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHeadElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTHeadElement: DNTableTHeadElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHeadElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTBodyElement: DNTableTBodyElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTFootElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTFootElement: DNTableTFootElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTRElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTRElement: DNTableTRElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTHElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTHElement: DNTableTHElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.TableTDElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateTableTDElement: DNTableTDElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.SpanElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateSpanElement: DNSpanElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.QuoteElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateQuoteElement: DNQuoteElement;
    function CreateNoteElement: DNNoteElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.ReferenceElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateReferenceElement: DNReferenceElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.BibEntryElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateBibEntryElement: DNBibEntryElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.CodeElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateCodeElement: DNCodeElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.LinkElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateLinkElement: DNLinkElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.AnnotElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateAnnotElement: DNAnnotElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.RubyElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateRubyElement: DNRubyElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.WarichuElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateWarichuElement: DNWarichuElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.FigureElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateFigureElement: DNLogicalStructure_FigureElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.FormulaElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateFormulaElement: DNFormulaElement;
    ///<summary><para>Creates <see cref="T:Aspose.Pdf.LogicalStructure.FormElement" />
    ///  .</para></summary>
    ///<returns>Created structure element.</returns>
    function CreateFormElement: DNFormElement;

  { propertys } 

    ///<summary><para>Get <see cref="T:Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  settings for whole document.</para></summary>
    ///<value><see cref="T:Aspose.Pdf.LogicalStructure.StructureTextState" />
    ///  settings for whole document.</value>
    property StructureTextState: DNStructureTextState read get_StructureTextState;
    ///<summary><para>Gets <see cref="T:Aspose.Pdf.LogicalStructure.StructTreeRootElement" />
    ///  of PDF document.</para></summary>
    ///<value><see cref="T:Aspose.Pdf.LogicalStructure.StructTreeRootElement" />
    ///  of PDF document.</value>
    property StructTreeRootElement: DNStructTreeRootElement read get_StructTreeRootElement;
    ///<summary><para>Gets root <see cref="T:Aspose.Pdf.LogicalStructure.StructureElement" />
    ///  of logical structure of PDF document.</para></summary>
    ///<value>Root <see cref="T:Aspose.Pdf.LogicalStructure.StructureElement" />
    ///  of logical structure of PDF document.</value>
    property RootElement: DNStructureElement read get_RootElement;
  end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedCellClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8472AB7B-1E68-5C37-A939-80B6CE74EFA3}']
  end;

  ///<summary>
  ///  Represents cell of table that exist on the page
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.AbsorbedCell')]
  DNAbsorbedCell = interface(DDN.mscorlib.DNObject)
  ['{0BBCE514-E6E9-36CA-905E-B765B5F25314}']
  { getters & setters } 

    function get_TextFragments: DNTextFragmentCollection;
    function get_Rectangle: DNRectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets collection of <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  objects that describes text containing in the cell
    ///</summary>
    property TextFragments: DNTextFragmentCollection read get_TextFragments;
    ///<summary>
    ///  Gets rectangle that describes position of the cell on page
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  TDNAbsorbedCell = class(TDNGenericImport<DNAbsorbedCellClass, DNAbsorbedCell>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedRowClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7CE8435B-C147-5F56-8CCA-3298D1526082}']
  end;

  ///<summary>
  ///  Represents row of table that exist on the page
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.AbsorbedRow')]
  DNAbsorbedRow = interface(DDN.mscorlib.DNObject)
  ['{4E1963D2-6EDE-3734-9E05-0222E04C45B3}']
  { getters & setters } 

    function get_CellList: DDN.mscorlib.DNIList<DNAbsorbedCell>;
    function get_Rectangle: DNRectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets readonly IList containing cells of the row
    ///</summary>
    property CellList: DDN.mscorlib.DNIList<DNAbsorbedCell> read get_CellList;
    ///<summary>
    ///  Gets rectangle that describes position of the row on page
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  TDNAbsorbedRow = class(TDNGenericImport<DNAbsorbedRowClass, DNAbsorbedRow>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNAbsorbedTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6D69585D-54D6-5C00-A237-6F4493558FD2}']
  end;

  ///<summary>
  ///  Represents table that exist on the page
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.AbsorbedTable')]
  DNAbsorbedTable = interface(DDN.mscorlib.DNObject)
  ['{EF663D82-8170-38D7-9613-4049492B85AC}']
  { getters & setters } 

    function get_RowList: DDN.mscorlib.DNIList<DNAbsorbedRow>;
    function get_Rectangle: DNRectangle;
    function get_PageNum: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets readonly IList containing rows of the table
    ///</summary>
    property RowList: DDN.mscorlib.DNIList<DNAbsorbedRow> read get_RowList;
    ///<summary>
    ///  Gets rectangle that describes position of the table on page
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets number of the page containing this table
    ///</summary>
    property PageNum: Int32 read get_PageNum;
  end;

  TDNAbsorbedTable = class(TDNGenericImport<DNAbsorbedTableClass, DNAbsorbedTable>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCharInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D7FAA772-F0E0-5B4E-9AF7-B6F2F07F0A5D}']
  end;

  ///<summary>
  ///  Represents a character info object.
  ///  Provides character positioning information.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.CharInfo')]
  DNCharInfo = interface(DDN.mscorlib.DNObject)
  ['{9D20AB67-8B0C-38EA-A63B-2F749A457366}']
  { getters & setters } 

    function get_Position: DNPosition;
    function get_Rectangle: DNRectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets position of the character.
    ///</summary>
    property Position: DNPosition read get_Position;
    ///<summary>
    ///  Gets rectangle of the character.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  TDNCharInfo = class(TDNGenericImport<DNCharInfoClass, DNCharInfo>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCharInfoCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE8D7F97-A861-5822-8C17-BFBEC8014D54}']
  end;

  ///<summary>
  ///  Represents CharInfo objects collection.
  ///</summary>
  ///<remarks>
  ///  Provides access to positioning information of text segment characters.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to iterate throught all the characters and retrieve the charact
  ///<code lang="C#">
  ///  //open document
  ///  Document pdfDocument = new Document(inFile);
  ///  //create TextFragmentAbsorber object to collect all the text objects of the page
  ///  TextFragmentAbsorber textFragmentAbsorber = new TextFragmentAbsorber();
  ///  //accept the absorber for all the pages
  ///  pdfDocument.Pages[1].Accept(textFragmentAbsorber);
  ///  //get the extracted text fragments
  ///  TextFragmentCollection textFragmentCollection = textFragmentAbsorber.TextFragments;
  ///  //loop through the fragments
  ///  foreach (TextFragment textFragment in textFragmentCollection)
  ///  {
  ///  //loop through the segments
  ///  foreach (TextSegment textSegment in textFragment.Segments)
  ///  {
  ///  //loop through the characters
  ///  for (int i = 1; i &lt;= textSegment.Text.Length; i++)
  ///  {
  ///  CharInfo charInfo = textSegment.Characters[i];
  ///  // print character position and rectangle info
  ///  Console.WriteLine("XIndent : {0} ", charInfo.Position.XIndent);
  ///  Console.WriteLine("YIndent : {0} ", charInfo.Position.YIndent);
  ///  Console.WriteLine("Width : {0} ", charInfo.Rectangle.Width);
  ///  Console.WriteLine("Height : {0} ", charInfo.Rectangle.Height);
  ///  }
  ///  }
  ///  }
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.CharInfoCollection')]
  DNCharInfoCollection = interface(DDN.mscorlib.DNICollection<DNCharInfo>)
  ['{E1721B7C-5443-360D-A189-A59430AC7F11}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNCharInfo;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNCharInfo>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNCharInfo>; index: Int32);
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNCharInfo): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.CharInfo" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating whether collection is read-only
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNCharInfo read get_Item; default;
  end;

  TDNCharInfoCollection = class(TDNGenericImport<DNCharInfoCollectionClass, DNCharInfoCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCustomFontSubstitutionBase_OriginalFontSpecificationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C11ECA1E-4011-57FE-BD67-110B46E824EB}']
  end;

  ///<summary>
  ///  Represents original font specification.
  ///</summary>
  ///<remarks>
  ///  Provides info related to original font such as <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.OriginalFontName" />
  ///  , <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsEmbedded" />
  ///  flag.
  ///  Also provides <seealso cref="P:Aspose.Pdf.Text.CustomFontSubstitutionBase.OriginalFontSpecification.IsSubstitutionUnavoidable" />
  ///  flag that helps to check is the substitution will anyway happen with the font
  ///  and the user may override the default substitution logic.
  ///</remarks>
  [DNTypeName('Aspose.Pdf.Text.CustomFontSubstitutionBase+OriginalFontSpecification')]
  DNCustomFontSubstitutionBase_OriginalFontSpecification = interface(DDN.mscorlib.DNObject)
  ['{68370092-BD9F-3A2E-A24E-875FA50B618E}']
  { getters & setters } 

    function get_OriginalFontName: string;
    function get_IsEmbedded: Boolean;
    function get_IsSubstitutionUnavoidable: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets original font name.
    ///</summary>
    property OriginalFontName: string read get_OriginalFontName;
    ///<summary>
    ///  Gets a value that indicates whether the font is embedded.
    ///</summary>
    property IsEmbedded: Boolean read get_IsEmbedded;
    ///<summary>
    ///  Gets a value that indicates that the substitution is unavoidable.
    ///</summary>
    ///<remarks>
    ///  Returns true in case substitution was requested because of absence of the original font or in case original font cannot be used in context of some task.
    ///  In case user ignores the flag and doesn't substitute the font - default font substitution procedure is performed.
    ///  But it provides opportunity for the user to alternate standard font substitution procedure and set better font to the system.
    ///  Returns false in case original font is present, valid, but it is allowed for the user to substitute it.
    ///</remarks>
    property IsSubstitutionUnavoidable: Boolean read get_IsSubstitutionUnavoidable;
  end;

  TDNCustomFontSubstitutionBase_OriginalFontSpecification = class(TDNGenericImport<DNCustomFontSubstitutionBase_OriginalFontSpecificationClass, DNCustomFontSubstitutionBase_OriginalFontSpecification>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6CEB7DD4-2AEC-591E-B64A-AC1B61271DD4}']
  end;

  ///<summary>
  ///  Represents font object.
  ///</summary>
  ///<example>
  ///  The example demonstrates how to search text on first page and change font of a first search occurrence.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Create font and mark it to be embedded
  ///  Font font = FontRepository.FindFont("Arial");
  ///  font.IsEmbedded = true;
  ///  // Change font of the first text occurrence
  ///  absorber.TextFragments[1].TextState.Font = font;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
  ///<seealso cref="T:Aspose.Pdf.Text.FontRepository" />
  ///<seealso cref="T:Aspose.Pdf.Document" />
  [DNTypeName('Aspose.Pdf.Text.Font')]
  DNFont = interface(DDN.mscorlib.DNObject)
  ['{030DD184-5EE9-35D9-89AC-7B12FA549A8F}']
  { getters & setters } 

    function get_FontName: string;
    function get_DecodedFontName: string;
    function get_BaseFont: string;
    function get_IsEmbedded: Boolean;
    procedure set_IsEmbedded(value: Boolean);
    function get_IsSubset: Boolean;
    procedure set_IsSubset(value: Boolean);
    function get_IsAccessible: Boolean;
    function get_FontOptions: DNIFontOptions;

  { methods } 

    ///<summary>
    ///  An objective of this method - to return description of error if an attempt
    ///  to embed font was failed. If there are no error cases it returns empty string.
    ///</summary>
    ///<returns>Error description</returns>
    function GetLastFontEmbeddingError: string;
    ///<summary>
    ///  Saves the font into the stream.
    ///  Note that the font is saved to intermediate TTF format intended to be used in a converted copy of the original document only.
    ///  The font file is not intended to be used outside the original document context.
    ///</summary>
    ///  <param name="stream">Stream to save the font.</param>
    procedure Save(stream: DDN.mscorlib.DNStream);
    ///<summary>
    ///  Measures the string.
    ///</summary>
    ///  <param name="str">The string.</param>
    ///  <param name="fontSize">Font size.</param>
    ///<returns>Width of the string represented with this font and the specified size.</returns>
    function MeasureString(str: string; fontSize: Single): Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets font name of the <see cref="T:Aspose.Pdf.Text.Font" />
    ///  object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to search text on first page and view font name of a first text occurrence.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // View font name of first text occurrence
    ///  Console.Out.WriteLine(absorber.TextFragments[1].TextState.Font.FontName);
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property FontName: string read get_FontName;
    ///<summary>
    ///  Sometimes PDF fonts(usually Chinese/Japanese/Korean fonts) could have specificical font name.
    ///  This name is value of PDF font property "BaseFont" and sometimes this property
    ///  could be represented in hexademical form. If read this name directly it could be represented
    ///  in non-readable form. To get readable form it's necessary to decode font's name by
    ///  rules specifical for this font.
    ///  This property returns decoded font name, so use it for cases when you meet
    ///  with a non-readable <see cref="P:Aspose.Pdf.Text.Font.FontName" />
    ///  .
    ///  If property <see cref="P:Aspose.Pdf.Text.Font.FontName" />
    ///  has readable form this property will be the same as
    ///<see cref="P:Aspose.Pdf.Text.Font.FontName" />
    ///  , so you can use this property for any cases when you need to
    ///  get font name in a readable form.
    ///</summary>
    property DecodedFontName: string read get_DecodedFontName;
    ///<summary>
    ///  Gets BaseFont value of PDF font object. Also known as PostScript name of the font.
    ///</summary>
    property BaseFont: string read get_BaseFont;
    ///<summary>
    ///  Gets or sets a value that indicates whether the font is embedded.
    ///</summary>
    ///<example>
    ///  The following example demonstrates how to find a font, mark it as embedded, search text on the document's page and replace the text font.
    ///<code lang="C#">
    ///  // Create font and mark it to be embedded
    ///  Font font = FontRepository.FindFont("Arial");
    ///  font.IsEmbedded = true;
    ///  // open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // change font for the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Text.FontRepository" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property IsEmbedded: Boolean read get_IsEmbedded write set_IsEmbedded;
    ///<summary>
    ///  Gets or sets a value that indicates whether the font is a subset.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to search text on first page and get the value that indicates whether the font is a subset.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // View font's IsSubset value of first text occurrence
    ///  if(absorber.TextFragments[1].TextState.Font.IsSubset)
    ///  Console.Out.WriteLine("the font is a subset");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property IsSubset: Boolean read get_IsSubset write set_IsSubset;
    ///<summary>
    ///  Gets indicating whether the font is present (installed) in the system.
    ///</summary>
    ///<remarks>
    ///  Some operations are not available with fonts that could not be found in the system.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to search text on first page and get the value that indicates whether the font is installed in the system.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // View font's IsSubset value of first text occurrence
    ///  if(absorber.TextFragments[1].TextState.Font.IsAccessible)
    ///  Console.Out.WriteLine("the font is installed in the system");
    ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///<seealso cref="T:Aspose.Pdf.Document" />
    property IsAccessible: Boolean read get_IsAccessible;
    ///<summary>
    ///  Useful properties to tune Font behaviour
    ///</summary>
    property FontOptions: DNIFontOptions read get_FontOptions;
  end;

  TDNFont = class(TDNGenericImport<DNFontClass, DNFont>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{291F11A4-DC9F-5533-AED5-F979895BEE85}']
  { constructors } 

    {class} function init: DNFontAbsorber;

  end;

  ///<summary>
  ///  Represents an absorber object of fonts.
  ///  Performs search for fonts and provides access to search results via <see cref="P:Aspose.Pdf.Text.FontAbsorber.Fonts" />
  ///  collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontAbsorber')]
  DNFontAbsorber = interface(DDN.mscorlib.DNObject)
  ['{458D059C-B912-3D93-B822-991B8BCEB5B9}']
  { getters & setters } 

    function get_Fonts: DNFontCollection;

  { methods } 

    ///<summary>
    ///  Performs  search in the specified range of pages of the document.
    ///</summary>
    ///  <param name="pdf">Pdf pocument object.</param>
    ///  <param name="startPage">Pdf pocument start page.</param>
    ///  <param name="pageCount">Pdf document page count</param>
    procedure Visit(pdf: DNDocument; startPage: Int32; pageCount: Int32); overload;
    ///<summary>
    ///  Performs search on the specified document.
    ///</summary>
    ///  <param name="pdf">Pdf pocument object.</param>
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets collection of search occurrences that are presented with <see cref="T:Aspose.Pdf.Text.Font" />
    ///  objects.
    ///</summary>
    property Fonts: DNFontCollection read get_Fonts;
  end;

  TDNFontAbsorber = class(TDNGenericImport<DNFontAbsorberClass, DNFontAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6CAB9FC-E848-59EE-9D1B-AD95368E19B7}']
  end;

  ///<summary>
  ///  Represents font collection.
  ///</summary>
  ///<remarks>
  ///  Font collections represented by <see cref="T:Aspose.Pdf.Text.FontCollection" />
  ///  class are used in several scenarios.
  ///  For example, in resources with <see cref="P:Aspose.Pdf.Resources.Fonts" />
  ///  property.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to make all font declared on page as embedded.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // ensure all fonts declared on page resources are embedded
  ///  // note that if fonts are declared on form resources they are not accessible from page resources
  ///  foreach(Aspose.Pdf.Txt.Font font in doc.Pages[1].Resources.Fonts)
  ///  {
  ///  if(!font.IsEmbedded)
  ///  font.IsEmbedded = true;
  ///  }
  ///  doc.Save(@"D:\Tests\input.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.FontCollection')]
  DNFontCollection = interface(DDN.mscorlib.DNICollection<DNFont>)
  ['{250B2CBF-6B6B-3648-8B19-5E3CC5A945B8}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNFont; overload;
    function get_Item(name: string): DNFont; overload;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFont>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNFont>; index: Int32);
    procedure Add(newFont: DNFont; out resName: string);
    ///<summary>
    ///  Checks if font exists in font collection.
    ///</summary>
    ///  <param name="name">Font name.</param>
    ///<returns>True in case collection contains the font with specified name.</returns>
    function &Contains(name: string): Boolean; overload;
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNFont): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.Font" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating whether collection is read-only
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNFont read get_Item; default;
    property Item[name: string]: DNFont read get_Item; default;
  end;

  TDNFontCollection = class(TDNGenericImport<DNFontCollectionClass, DNFontCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontRepositoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B6462A9-5FE3-5DD4-A907-7A2361607B93}']
  { static getter & setter } 

    {class} function get_Substitutions: DNFontSubstitutionCollection;
    {class} function get_Sources: DNFontSourceCollection;

  { constructors } 

    {class} function init: DNFontRepository;

  { static methods } 

    ///<summary>
    ///  Searches and returns font with specified font name.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Find font
    ///  Font font = FontRepository.FindFont("Arial");
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontName">Font name.</param>
    ///<returns>Font object.</returns>
    {class} function FindFont(fontName: string): DNFont; overload;
    ///<summary>
    ///  Searches and returns font with specified font name ignoring or honoring case sensitivity.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Find font
    ///  Font font = FontRepository.FindFont("Arial");
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontName">Font name.</param>
    ///  <param name="ignoreCase">case sensitivity</param>
    ///<returns>Font object.</returns>
    {class} function FindFont(fontName: string; ignoreCase: Boolean): DNFont; overload;
    ///<summary>
    ///  Searches and returns font with specified font name and font style.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Find font
    ///  Font font = FontRepository.FindFont("Arial", FontStyle.Italic);
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontFamilyName">Font family name.</param>
    ///  <param name="stl">Font style value.</param>
    ///<returns>Font object corresponding to search request parameters.</returns>
    {class} function FindFont(fontFamilyName: string; stl: DNFontStyles): DNFont; overload;
    ///<summary>
    ///  Searches and returns font with specified font name and font style
    ///  ignoring or honoring case sensitivity.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Find font
    ///  Font font = FontRepository.FindFont("Arial", FontStyle.Italic);
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontFamilyName">Font family name.</param>
    ///  <param name="stl">Font style value.</param>
    ///  <param name="ignoreCase">case sensitivity</param>
    ///<returns>Font object corresponding to search request parameters.</returns>
    {class} function FindFont(fontFamilyName: string; stl: DNFontStyles; ignoreCase: Boolean): DNFont; overload;
    ///<summary>
    ///  Opens font with specified font stream.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to open font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Open font
    ///  using (FileStream fontStream = File.OpenRead(@"C:\WINDOWS\Fonts\arial.ttf"))
    ///  {
    ///  Font font = FontRepository.OpenFont(fontStream, , FontTypes.TTF);
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///  }
    ///</code></example><param name="fontStream">Font stream.</param>
    ///  <param name="fontType">Font type value.</param>
    ///<returns>Font object.</returns>
    {class} function OpenFont(fontStream: DDN.mscorlib.DNStream; fontType: DNFontTypes): DNFont; overload;
    ///<summary>
    ///  Opens font with specified font file path.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to open font and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Open font
    ///  Font font = FontRepository.OpenFont(@"C:\WINDOWS\Fonts\arial.ttf");
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontFilePath">Font file path.</param>
    ///<returns>Font object.</returns>
    {class} function OpenFont(fontFilePath: string): DNFont; overload;
    ///<summary>
    ///  Opens font with specified font file path and metrics file path.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to open Type1 font with metrics and replace the font of text of first page.
    ///<code lang="C#">
    ///  // Open font
    ///  Font font = FontRepository.OpenFont("courier.pfb", "courier.afm");
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change font of the first text occurrence
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="fontFilePath">Font file path.</param>
    ///  <param name="metricsFilePath">Font metrics file patrh.</param>
    ///<returns>Font object.</returns>
    {class} function OpenFont(fontFilePath: string; metricsFilePath: string): DNFont; overload;
    ///<summary>
    ///  Loads system installed fonts and standard Pdf fonts. This method was designed to speed up font loading process.
    ///  By default fonts are loaded on first request for any font. Use of this method loads system and standard Pdf fonts
    ///  immediately before any Pdf document was open.
    ///</summary>
    {class} procedure LoadFonts;
    ///<summary>
    ///  Reloads all fonts specified by property <see cref="P:Aspose.Pdf.Text.FontRepository.Sources" />
    ///</summary>
    {class} procedure ReloadFonts;

  { static propertys } 

    ///<summary>
    ///  Gets font substitution strategies collection.
    ///</summary>
    {class} property Substitutions: DNFontSubstitutionCollection read get_Substitutions;
    ///<summary>
    ///  Gets font sources collection.
    ///</summary>
    {class} property Sources: DNFontSourceCollection read get_Sources;
  end;

  ///<summary>
  ///  Performs font search. Searches in system installed fonts and standard Pdf fonts.
  ///  Also provides functionality to open custom fonts.
  ///</summary>
  ///<example>
  ///  The example demonstrates how to find font and replace the font of text of first page.
  ///<code lang="C#">
  ///  // Find font
  ///  Font font = FontRepository.FindFont("Arial");
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Change font of the first text occurrence
  ///  absorber.TextFragments[1].TextState.Font = font;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
  ///<seealso cref="T:Aspose.Pdf.Document" />
  [DNTypeName('Aspose.Pdf.Text.FontRepository')]
  DNFontRepository = interface(DDN.mscorlib.DNObject)
  ['{45337CF7-F0C8-386C-ACCC-6B78DCCB4BEC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontRepository = class(TDNGenericImport<DNFontRepositoryClass, DNFontRepository>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSourceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAF908C1-E573-54A4-A76A-56925AB8039F}']
  end;

  ///<summary>
  ///  Represents a base class fot font source.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontSource')]
  DNFontSource = interface(DDN.mscorlib.DNObject)
  ['{7D93AFB5-33AD-39A8-90CC-941921AA1F29}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontSource = class(TDNGenericImport<DNFontSourceClass, DNFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFileFontSourceClass = interface(DNFontSourceClass)
  ['{C8F76937-7FB6-588C-8A41-FA05AE525DC9}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.FileFontSource" />
    ///  class.
    ///</summary>
    ///  <param name="filePath">Path to the font file.</param>
    {class} function init(filePath: string): DNFileFontSource;

  end;

  ///<summary>
  ///  Represents single font file source.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FileFontSource')]
  DNFileFontSource = interface(DNFontSource)
  ['{9922D560-22B6-3692-B430-BA19634C0577}']
  { getters & setters } 

    function get_FilePath: string;
    procedure set_FilePath(value: string);

  { methods } 

    ///<summary>
    ///  Check if font file source objects are equal.
    ///</summary>
    ///  <param name="obj">Font file source object which will be compared.</param>
    ///<returns>True if both objects are font file sources targeted to the same file.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to the font file.
    ///</summary>
    property FilePath: string read get_FilePath write set_FilePath;
  end;

  TDNFileFontSource = class(TDNGenericImport<DNFileFontSourceClass, DNFileFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFolderFontSourceClass = interface(DNFontSourceClass)
  ['{3774711F-8CF8-5A5F-AD13-9CA984A5CC6D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.FolderFontSource" />
    ///  class.
    ///</summary>
    ///  <param name="folderPath">Path to the folder.</param>
    {class} function init(folderPath: string): DNFolderFontSource;

  end;

  ///<summary>
  ///  Represents the folder that contains font files.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FolderFontSource')]
  DNFolderFontSource = interface(DNFontSource)
  ['{439AF7CE-357C-3EA4-8D79-E9A05F32198B}']
  { getters & setters } 

    function get_FolderPath: string;
    procedure set_FolderPath(value: string);

  { methods } 

    ///<summary>
    ///  Check if folder font source objects are equal.
    ///</summary>
    ///  <param name="obj">Folder font source object which will be compared.</param>
    ///<returns>True if both objects are folder font sources targeted to the same folder.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Path to the folder that contains font files.
    ///</summary>
    property FolderPath: string read get_FolderPath write set_FolderPath;
  end;

  TDNFolderFontSource = class(TDNGenericImport<DNFolderFontSourceClass, DNFolderFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMemoryFontSourceClass = interface(DNFontSourceClass)
  ['{DD63D585-10AB-5578-947B-23AF6276414A}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.MemoryFontSource" />
    ///  class.
    ///</summary>
    ///  <param name="fontBytes">Font file byte array.</param>
    {class} function init(fontBytes: TArray<Byte>): DNMemoryFontSource;

  end;

  ///<summary>
  ///  Represents single font file source.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.MemoryFontSource')]
  DNMemoryFontSource = interface(DNFontSource)
  ['{F984D74F-C6DD-3262-9614-3999123EECDB}']
  { getters & setters } 

    function get_FontBytes: TArray<Byte>;

  { methods } 

    ///<summary>
    ///  Check if font file source objects are equal.
    ///</summary>
    ///  <param name="obj">Font file source object which will be compared.</param>
    ///<returns>True if both objects are font file sources targeted to the same file.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Releases internal resources.
    ///</summary>
    procedure Dispose;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Font file byte array.
    ///</summary>
    property FontBytes: TArray<Byte> read get_FontBytes;
  end;

  TDNMemoryFontSource = class(TDNGenericImport<DNMemoryFontSourceClass, DNMemoryFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSystemFontSourceClass = interface(DNFontSourceClass)
  ['{8C39868D-73E2-5869-BFE4-87AD651DCA54}']
  { constructors } 

    {class} function init: DNSystemFontSource;

  end;

  ///<summary>
  ///  Represents all fonts installed to the system.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.SystemFontSource')]
  DNSystemFontSource = interface(DNFontSource)
  ['{BF3B3AE0-7D41-3752-912D-BA0BA334F42B}']
  { methods } 

    ///<summary>
    ///  Check if system font source objects are equal.
    ///</summary>
    ///  <param name="obj">System font source object which will be compared.</param>
    ///<returns>True if both objects are system font sources, false otherwise.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSystemFontSource = class(TDNGenericImport<DNSystemFontSourceClass, DNSystemFontSource>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSourceCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A4FCC554-09AA-5E93-9E3B-63D0CBA9C481}']
  end;

  ///<summary>
  ///  Represents font sources collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontSourceCollection')]
  DNFontSourceCollection = interface(DDN.mscorlib.DNICollection<DNFontSource>)
  ['{2D347C4F-34E7-38DB-A0CC-B09E0B9CFF7C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNFontSource;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSource>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNFontSource>; index: Int32);
    ///<summary>
    ///  Deletes the font source element.
    ///</summary>
    ///  <param name="fontSource">FontSource object that will be deleted.</param>
    procedure Delete(fontSource: DNFontSource);
    ///<summary>
    ///  Determines whether an element is in the collection
    ///</summary>
    ///  <param name="item">FontSource object to search.</param>
    function &Contains(item: DNFontSource): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.Font" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNFontSource read get_Item; default;
  end;

  TDNFontSourceCollection = class(TDNGenericImport<DNFontSourceCollectionClass, DNFontSourceCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSubstitutionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{03519108-CDC1-5640-B4AD-82ACC8FAFF22}']
  end;

  ///<summary>
  ///  Represents a base class fot font substitution strategies.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontSubstitution')]
  DNFontSubstitution = interface(DDN.mscorlib.DNObject)
  ['{65FDB15A-49DC-3CA5-943C-FE476A4E3BDE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontSubstitution = class(TDNGenericImport<DNFontSubstitutionClass, DNFontSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNCustomFontSubstitutionBaseClass = interface(DNFontSubstitutionClass)
  ['{5FE06D71-BCD5-52F6-A716-61BF1DB92D1C}']
  { constructors } 

    {class} function init: DNCustomFontSubstitutionBase;

  end;

  ///<summary>
  ///  Represents a base class for custom font substitution strategy.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.CustomFontSubstitutionBase')]
  DNCustomFontSubstitutionBase = interface(DNFontSubstitution)
  ['{AC6DA9B4-FD5F-360A-B9D1-430BACB2DFD9}']
  { methods } 

    function TrySubstitute(originalFontSpecification: DNCustomFontSubstitutionBase_OriginalFontSpecification; out substitutionFont: DNFont): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCustomFontSubstitutionBase = class(TDNGenericImport<DNCustomFontSubstitutionBaseClass, DNCustomFontSubstitutionBase>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSimpleFontSubstitutionClass = interface(DNFontSubstitutionClass)
  ['{EFFA0182-EC59-51F8-B5F6-E73BF5AC90B2}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SimpleFontSubstitution" />
    ///  class.
    ///</summary>
    ///  <param name="originalFontName">Original font name.</param>
    ///  <param name="substitutionFontName">Substitution font name.</param>
    ///  <param name="forcedBySaveOption">Substitution forced by DefaultFontName save option.</param>
    {class} function init(originalFontName: string; substitutionFontName: string; isForcedBySaveOption: Boolean): DNSimpleFontSubstitution;

  end;

  ///<summary>
  ///  Represents a class for simple font substitution strategy.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.SimpleFontSubstitution')]
  DNSimpleFontSubstitution = interface(DNFontSubstitution)
  ['{EDF74800-496A-3870-9030-CAB085E41003}']
  { getters & setters } 

    function get_OriginalFontName: string;
    function get_SubstitutionFontName: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets original font name that should be substituted with <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.SubstitutionFontName" />
    ///</summary>
    property OriginalFontName: string read get_OriginalFontName;
    ///<summary>
    ///  Gets font name that should substitute the <see cref="P:Aspose.Pdf.Text.SimpleFontSubstitution.OriginalFontName" />
    ///</summary>
    property SubstitutionFontName: string read get_SubstitutionFontName;
  end;

  TDNSimpleFontSubstitution = class(TDNGenericImport<DNSimpleFontSubstitutionClass, DNSimpleFontSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNSystemFontsSubstitutionClass = interface(DNFontSubstitutionClass)
  ['{6120DB48-B6DF-5269-ACB8-467F90DAC799}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.SystemFontsSubstitution" />
    ///  class.
    ///</summary>
    ///  <param name="fontCategories">Target font categories to substitute with system fonts</param>
    {class} function init(fontCategories: DNSubstitutionFontCategories): DNSystemFontsSubstitution;

  end;

  ///<summary>
  ///  Represents a class for font substitution strategy that substitutes fonts with system fonts.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.SystemFontsSubstitution')]
  DNSystemFontsSubstitution = interface(DNFontSubstitution)
  ['{288E3831-34F4-3254-8065-28D8E718B865}']
  { getters & setters } 

    function get_FontCategories: DNSubstitutionFontCategories;
    procedure set_FontCategories(value: DNSubstitutionFontCategories);
    function get_DefaultFont: DNFont;
    procedure set_DefaultFont(value: DNFont);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets substitution font categories that should be substituted with system fonts.
    ///</summary>
    property FontCategories: DNSubstitutionFontCategories read get_FontCategories write set_FontCategories;
    ///<summary>
    ///  Gets or sets default substitution font.
    ///  The font is used when no other valid substitution were found but initial font belongs to target substitution category (<see cref="P:Aspose.Pdf.Text.SystemFontsSubstitution.FontCategories" />
    ///  ).
    ///</summary>
    property DefaultFont: DNFont read get_DefaultFont write set_DefaultFont;
  end;

  TDNSystemFontsSubstitution = class(TDNGenericImport<DNSystemFontsSubstitutionClass, DNSystemFontsSubstitution>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNFontSubstitutionCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FE650AE3-95BD-5B4E-A565-CCD64B6EDE05}']
  end;

  ///<summary>
  ///  Represents font substitution strategies collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.FontSubstitutionCollection')]
  DNFontSubstitutionCollection = interface(DDN.mscorlib.DNICollection<DNFontSubstitution>)
  ['{B4D9C0FE-2AC3-3DEA-B10A-5261095AC7DF}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNFontSubstitution;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNFontSubstitution>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNFontSubstitution>; index: Int32);
    ///<summary>
    ///  Determines whether an element is in the collection
    ///</summary>
    ///  <param name="item">FontSubstitution object to search.</param>
    function &Contains(item: DNFontSubstitution): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.Font" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNFontSubstitution read get_Item; default;
  end;

  TDNFontSubstitutionCollection = class(TDNGenericImport<DNFontSubstitutionCollectionClass, DNFontSubstitutionCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  Useful properties to tune Font behaviour
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.IFontOptions')]
  DNIFontOptions = interface(DDN.mscorlib.DNObject)
  ['{D0475854-BC93-35F9-A734-E7C255E441EA}']
  { getters & setters } 

    function get_NotifyAboutFontEmbeddingError: Boolean;
    procedure set_NotifyAboutFontEmbeddingError(value: Boolean);

  { propertys } 

    ///<summary>
    ///  Sometimes it's not possible to embed desired font into document. There are many reasons, for example
    ///  license restrictions or when desired font was not found on destination computer.
    ///  When this situation comes it's not simply to detect, because desired font is embedded via set
    ///  of property flag Font.IsEmbedded = true; Of course it's possible to read this property immediately after it was set but
    ///  it's not convenient approach. Flag NotifyAboutFontEmbeddingError enforces exception mechanism
    ///  for cases when attempt to embed font became failed. If this flag is set an exception of type
    ///<see cref="T:Aspose.Pdf.FontEmbeddingException" />
    ///  will be thrown. By default false.
    ///</summary>
    property NotifyAboutFontEmbeddingError: Boolean read get_NotifyAboutFontEmbeddingError write set_NotifyAboutFontEmbeddingError;
  end;

  //-------------namespace: Aspose.Pdf.Text----------------
  ///<summary>
  ///  This interface represents an element of existing table extracted by TableAbsorber.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.ITableElement')]
  DNITableElement = interface(DDN.mscorlib.DNObject)
  ['{05D456CE-8272-313C-8CE0-E47BD16B8618}']
  { getters & setters } 

    function get_Rectangle: DNRectangle;

  { propertys } 

    ///<summary>
    ///  Gets rectangle that describes position of table element on the page
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMarkupParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4483EDA9-48F8-5E3C-A103-E7A31B036F2A}']
  end;

  ///<summary>
  ///  Represents a paragraph.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.MarkupParagraph')]
  DNMarkupParagraph = interface(DDN.mscorlib.DNObject)
  ['{63E8E8C3-BE69-3DAC-BCD6-8B33BD7A9ECF}']
  { getters & setters } 

    function get_Points: TArray<DNPoint>;
    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Points of polygon that describes paragraph.
    ///  Starting point is lower left corner of the paragraph. And next points are in anti-clockwise sequence.
    ///</summary>
    property Points: TArray<DNPoint> read get_Points;
    ///<summary>
    ///  Gets <see cref="T:System.String" />
    ///  text object that the <see cref="T:Aspose.Pdf.Text.MarkupParagraph" />
    ///  object represents.
    ///</summary>
    property Text: string read get_Text;
  end;

  TDNMarkupParagraph = class(TDNGenericImport<DNMarkupParagraphClass, DNMarkupParagraph>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNMarkupSectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7DFD5BBA-9766-5C8C-9862-7203716DC0D2}']
  end;

  ///<summary>
  ///  Represents a markup section - the rectangular region of a page that contains text and can be visually divided from another text blocks.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.MarkupSection')]
  DNMarkupSection = interface(DDN.mscorlib.DNObject)
  ['{E1EF322D-A204-3EB3-A2AE-8C058EB11B94}']
  { getters & setters } 

    function get_Rectangle: DNRectangle;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Section rectangle
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  TDNMarkupSection = class(TDNGenericImport<DNMarkupSectionClass, DNMarkupSection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNPageMarkupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{37D9F0CC-453F-526A-8A3F-C0A973BDEB27}']
  end;

  ///<summary>
  ///  Page markup represented by collections of <see cref="T:Aspose.Pdf.Text.MarkupSection" />
  ///  and <see cref="T:Aspose.Pdf.Text.MarkupParagraph" />
  ///  .
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.PageMarkup')]
  DNPageMarkup = interface(DDN.mscorlib.DNObject)
  ['{53A55FA5-EB5B-33F7-BF4E-BB1CC0947891}']
  { getters & setters } 

    function get_Number: Int32;
    function get_Rectangle: DNRectangle;
    function get_IsMulticolumnParagraphsAllowed: Boolean;
    procedure set_IsMulticolumnParagraphsAllowed(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets processed page number.
    ///</summary>
    property Number: Int32 read get_Number;
    ///<summary>
    ///  Gets processed page rectangle.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.
    ///</summary>
    property IsMulticolumnParagraphsAllowed: Boolean read get_IsMulticolumnParagraphsAllowed write set_IsMulticolumnParagraphsAllowed;
  end;

  TDNPageMarkup = class(TDNGenericImport<DNPageMarkupClass, DNPageMarkup>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNParagraphAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDED4352-83F1-5A09-B015-E250FD29044A}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.ParagraphAbsorber" />
    ///  that performs search for sections/paragraphs of the document or page.
    ///</summary>
    {class} function init: DNParagraphAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.ParagraphAbsorber" />
    ///  that performs search for sections/paragraphs of the document or page.
    ///</summary>
    ///<remarks>
    ///  See <see cref="P:Aspose.Pdf.Text.ParagraphAbsorber.SectionsSearchDepth" />
    ///  property for more hints about the parameter.
    ///</remarks>
    ///  <param name="sectionsSearchDepth">Number of sequential searches for more fine elements of structure that will be performed.</param>
    {class} function init(sectionsSearchDepth: Int32): DNParagraphAbsorber; overload;

  end;

  ///<summary>
  ///  Represents an absorber object of page structure objects such as sections and paragraphs.
  ///  Performs search for sections and paragraphs of text and provides access for rectangles and polydons that describes it in text coordinate space.
  ///  Also performs text segments search and provides access to search results via <see cref="!:TextFragments" />
  ///  collections grouped by structure elements.
  ///</summary>
  ///<remarks>
  ///  When the search is completed the <see cref="P:Aspose.Pdf.Text.ParagraphAbsorber.PageMarkups" />
  ///  collection will contains <see cref="T:Aspose.Pdf.Text.PageMarkup" />
  ///  objects that represents page structure by collections of <see cref="T:Aspose.Pdf.Text.MarkupSection" />
  ///  and <see cref="T:Aspose.Pdf.Text.MarkupParagraph" />
  ///  .
  ///  The <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to find first text segment of each paragraph on the first PDF document page and highlight it.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document("input.pdf");
  ///  // Create ParagraphAbsorber object
  ///  ParagraphAbsorber absorber = new ParagraphAbsorber();
  ///  // Accept the absorber for first page
  ///  absorber.Visit(doc.Pages[1]);
  ///  // Get markup object of first page
  ///  PageMarkup markup = absorber.PageMarkups[0];
  ///  // Loop through structure elements of the page text to find first text fragment of each paragraph
  ///  foreach (MarkupSection section in markup.Sections)
  ///  {
  ///  foreach (MarkupParagraph paragraph in section.Paragraphs)
  ///  {
  ///  TextFragment fragment = paragraph.Fragments[0];
  ///  // Update text properties
  ///  fragment.TextState.BackgroundColor = Color.LightBlue;
  ///  }
  ///  }
  ///  // Save document
  ///  doc.Save(GetOutputPath("output.pdf"));
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.ParagraphAbsorber')]
  DNParagraphAbsorber = interface(DDN.mscorlib.DNObject)
  ['{D54202A6-C7A6-3B0F-9F1A-EA71876ED549}']
  { getters & setters } 

    function get_SectionsSearchDepth: Int32;
    procedure set_SectionsSearchDepth(value: Int32);
    function get_IsMulticolumnParagraphsAllowed: Boolean;
    procedure set_IsMulticolumnParagraphsAllowed(value: Boolean);

  { methods } 

    procedure Visit(doc: DNDocument); overload;
    ///<summary>
    ///  Performs search on the specified <see cref="T:Aspose.Pdf.Page" />
    ///  .
    ///</summary>
    ///  <param name="page">Pdf pocument page object.</param>
    procedure Visit(page: DNPage); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets value that instructs how many times sequential searches for more fine elements of structure will be performed.
    ///  Default search depth is 3.
    ///  It means three searches for horizontally divided sections (headers, paragraphs etc) and three searches for vertically divided ones (columns).
    ///</summary>
    ///<remarks>
    ///  Increasing of this value may lead to minor decreasing performance with no visible changes in search result.
    ///  Decreasing of this value may lead to incorrect determination of paragraphs in sections.
    ///  We are not recommend to set value less than default if you aren't desire to get only 'rough' elements of page structure.
    ///</remarks>
    property SectionsSearchDepth: Int32 read get_SectionsSearchDepth write set_SectionsSearchDepth;
    ///<summary>
    ///  Gets or sets value that indicates whether starting text lines of a next section may be treated as continuation of the last paragraph of a previous section.
    ///</summary>
    property IsMulticolumnParagraphsAllowed: Boolean read get_IsMulticolumnParagraphsAllowed write set_IsMulticolumnParagraphsAllowed;
  end;

  TDNParagraphAbsorber = class(TDNGenericImport<DNParagraphAbsorberClass, DNParagraphAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNPositionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5F90BEC-E52E-5370-AD6E-43B87D3B52DF}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.Position" />
    ///  class
    ///</summary>
    ///  <param name="xIndent">X coordinate value.</param>
    ///  <param name="yIndent">Y coordinate value.</param>
    {class} function init(xIndent: Double; yIndent: Double): DNPosition;

  end;

  ///<summary>
  ///  Represents a position object
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.Position')]
  DNPosition = interface(DDN.mscorlib.DNObject)
  ['{367B214A-3BAF-3DEC-BC85-9E4F9860A91D}']
  { getters & setters } 

    function get_XIndent: Double;
    procedure set_XIndent(value: Double);
    function get_YIndent: Double;
    procedure set_YIndent(value: Double);

  { methods } 

    ///<summary>
    ///  Gets string representation for the current <see cref="T:Aspose.Pdf.Text.Position" />
    ///  object.
    ///</summary>
    ///<returns>String representration of the Position object.</returns>
    function ToString: string;
    ///<summary>
    ///  Determines whether the specified object is equal to the current <see cref="T:Aspose.Pdf.Text.Position" />
    ///  object.
    ///</summary>
    ///  <param name="obj">Object that is checked for equality.</param>
    ///<returns>True in case objects are equal.</returns>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Gets the X coordinate of the object
    ///</summary>
    property XIndent: Double read get_XIndent write set_XIndent;
    ///<summary>
    ///  Gets the Y coordinate of the object
    ///</summary>
    property YIndent: Double read get_YIndent write set_YIndent;
  end;

  TDNPosition = class(TDNGenericImport<DNPositionClass, DNPosition>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTableAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{163099E5-146F-5DD6-957C-38EE3EF9A7EB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TableAbsorber" />
    ///  with text search options.
    ///</summary>
    ///<remarks>
    ///  Performs searching for tables and provides access to the tables via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" />
    ///  object.
    ///</remarks>
    ///  <param name="textSearchOptions">Text search options</param>
    {class} function init(textSearchOptions: DNTextSearchOptions): DNTableAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TableAbsorber" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Performs searching for tables and provides access to the tables via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" />
    ///  object.
    ///</remarks>
    {class} function init: DNTableAbsorber; overload;

  end;

  ///<summary>
  ///  Represents an absorber object of table elements.
  ///  Performs search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TableAbsorber.TableList" />
  ///  collection.
  ///</summary>
  ///<example>
  ///  The example demonstrates how to find table on the first PDF document page and replace the text in a table cell.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create TableAbsorber object to find tables
  ///  TableAbsorber absorber = new TableAbsorber();
  ///  // Visit first page with absorber
  ///  absorber.Visit(pdfDocument.Pages[1]);
  ///  // Get access to first table on page, their first cell and text fragments in it
  ///  TextFragment fragment = absorber.TableList[0].RowList[0].CellList[0].TextFragments[1];
  ///  // Change text of the first text fragment in the cell
  ///  fragment.Text = "hi world";
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TableAbsorber')]
  DNTableAbsorber = interface(DDN.mscorlib.DNObject)
  ['{ED143C28-62FE-34D7-945C-9465481ABA77}']
  { getters & setters } 

    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TableList: DDN.mscorlib.DNIList<DNAbsorbedTable>;

  { methods } 

    ///<summary>
    ///  Extracts tables on the specified page
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract table on the first PDF document page.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TableAbsorber object to find tables
    ///  TableAbsorber absorber = new TableAbsorber();
    ///  // Visit first page with absorber
    ///  absorber.Visit(pdfDocument.Pages[1]);
    ///  // Get access to first table on page, their first cell and text fragments in it
    ///  TextFragment fragment = absorber.TableList[0].RowList[0].CellList[0].TextFragments[1];
    ///  // Change text of the first text fragment in the cell
    ///  fragment.Text = "hi world";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="page">Pdf pocument page object.</param>
    procedure Visit(page: DNPage);
    ///<summary>
    ///  Removes an <see cref="T:Aspose.Pdf.Text.AbsorbedTable" />
    ///  from the page.
    ///</summary>
    ///  <param name="table"><see cref="T:Aspose.Pdf.Text.AbsorbedTable" />
    ///  to remove.</param>
    ///<remarks>
    ///  Please take into account it changes TableList collection. In case removing/replacing tables in loop please use copy of TableList collection.
    ///</remarks>
    procedure Remove(table: DNAbsorbedTable);
    ///<summary>
    ///  Replaces an <see cref="T:Aspose.Pdf.Text.AbsorbedTable" />
    ///  with <see cref="T:Aspose.Pdf.Table" />
    ///  on the page.
    ///</summary>
    ///  <param name="page">Pdf pocument page object.</param>
    ///  <param name="oldTable"><see cref="T:Aspose.Pdf.Text.AbsorbedTable" />
    ///  to be replaced.</param>
    ///  <param name="newTable"><see cref="T:Aspose.Pdf.Table" />
    ///  to replace old table.</param>
    ///<remarks>
    ///  Please take into account it changes TableList collection. In case removing/replacing tables in loop please use copy of TableList collection.
    ///</remarks>
    procedure Replace(page: DNPage; oldTable: DNAbsorbedTable; newTable: DNTable);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets text search options.
    ///</summary>
    ///<remarks>
    ///  Allows to define several options that will be used during search text containing in tables.
    ///</remarks>
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    ///<summary>
    ///  Returns readonly IList containing tables that were found
    ///</summary>
    property TableList: DDN.mscorlib.DNIList<DNAbsorbedTable> read get_TableList;
  end;

  TDNTableAbsorber = class(TDNGenericImport<DNTableAbsorberClass, DNTableAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTabStopClass = interface(DDN.mscorlib.DNObjectClass)
  ['{583D94B5-54DF-5AC0-BBD8-8A3BAB6A864F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class.
    ///</summary>
    {class} function init: DNTabStop; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class with specified position.
    ///</summary>
    ///  <param name="position">The position of the tab stop.</param>
    {class} function init(position: Single): DNTabStop; overload;

  end;

  ///<summary>
  ///  Represents a custom Tab stop position in a paragraph.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TabStop')]
  DNTabStop = interface(DDN.mscorlib.DNObject)
  ['{B03B19D6-B6C2-31A3-9371-00CA3D5652AE}']
  { getters & setters } 

    function get_Position: Single;
    procedure set_Position(value: Single);
    function get_LeaderType: DNTabLeaderType;
    procedure set_LeaderType(value: DNTabLeaderType);
    function get_AlignmentType: DNTabAlignmentType;
    procedure set_AlignmentType(value: DNTabAlignmentType);
    function get_IsReadOnly: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a float value that indicates the tab stop position.
    ///</summary>
    property Position: Single read get_Position write set_Position;
    ///<summary>
    ///  Gets or sets a <see cref="T:Aspose.Pdf.Text.TabLeaderType" />
    ///  enum that indicates the tab leader type.
    ///</summary>
    property LeaderType: DNTabLeaderType read get_LeaderType write set_LeaderType;
    ///<summary>
    ///  Gets or sets a <see cref="P:Aspose.Pdf.Text.TabStop.AlignmentType" />
    ///  enum that indicates the tab tab alignment type.
    ///</summary>
    property AlignmentType: DNTabAlignmentType read get_AlignmentType write set_AlignmentType;
    ///<summary>
    ///  Gets value indicating that this <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  instance is already attached to <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  and became readonly
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
  end;

  TDNTabStop = class(TDNGenericImport<DNTabStopClass, DNTabStop>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTabStopsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B9F47F3-B741-5381-BF58-4565CC971CA6}']
  { constructors } 

    {class} function init: DNTabStops;

  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Pdf.Text.TabStop" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TabStops')]
  DNTabStops = interface(DDN.mscorlib.DNObject)
  ['{E85C925E-49B4-3253-B364-B47FD36E058E}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Count: Int32;
    function get_Item(index: Int32): DNTabStop;
    procedure set_Item(index: Int32; value: DNTabStop);

  { methods } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class and add it to the
    ///  TabStops collection.
    ///</summary>
    ///<returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  object.</returns>
    function Add: DNTabStop; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class with specified position and
    ///  add it to the TabStops collection.
    ///</summary>
    ///  <param name="position">The position of the tab stop.</param>
    ///<returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  object.</returns>
    function Add(position: Single): DNTabStop; overload;
    ///<summary>
    ///  Add instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class to the TabStops collection.
    ///</summary>
    ///  <param name="tabStop">The <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  object.</param>
    procedure Add(tabStop: DNTabStop); overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class with specified position and leader
    ///  type and add it to the TabStops collection.
    ///</summary>
    ///  <param name="position">The position of the tab stop.</param>
    ///  <param name="leaderType">The leader type of the tab stop.</param>
    ///<returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  object.</returns>
    function Add(position: Single; leaderType: DNTabLeaderType): DNTabStop; overload;
    ///<summary>
    ///  Clones a new <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  objects.
    ///</summary>
    ///<returns>The new <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  object.</returns>
    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets value indicating that this <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  instance is already attached to <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  and became readonly.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  class with specified position and
    ///  add it to the TabStops collection.
    ///</summary>
    ///  <param name="position">The position of the tab stop.</param>
    ///<returns>The new <see cref="T:Aspose.Pdf.Text.TabStop" />
    ///  object.</returns>
    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTabStop read get_Item write set_Item; default;
  end;

  TDNTabStops = class(TDNGenericImport<DNTabStopsClass, DNTabStops>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextAbsorberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{590A9F94-7517-5D4F-BCE1-94D3B97B9390}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" />
    ///  object.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to extract text from all pages of the PDF document.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // accept the absorber for all document's pages
    ///  doc.Pages.Accept(absorber);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example>
    {class} function init: DNTextAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  with extraction options.
    ///</summary>
    ///<remarks>
    ///  Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" />
    ///  object.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to extract text from all pages of the PDF document.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text with formatting
    ///  TextAbsorber absorber = new TextAbsorber(new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure));
    ///  // accept the absorber for all document's pages
    ///  doc.Pages.Accept(absorber);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example><param name="extractionOptions">Text extraction options</param>
    {class} function init(extractionOptions: DNTextExtractionOptions): DNTextAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  with extraction and text search options.
    ///</summary>
    ///<remarks>
    ///  Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" />
    ///  object.
    ///</remarks>
    ///  <param name="extractionOptions">Text extraction options</param>
    ///  <param name="textSearchOptions">Text search options</param>
    {class} function init(extractionOptions: DNTextExtractionOptions; textSearchOptions: DNTextSearchOptions): DNTextAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  with text search options.
    ///</summary>
    ///<remarks>
    ///  Performs text extraction and provides access to the extracted text via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" />
    ///  object.
    ///</remarks>
    ///  <param name="textSearchOptions">Text search options</param>
    {class} function init(textSearchOptions: DNTextSearchOptions): DNTextAbsorber; overload;

  end;

  ///<summary>
  ///  Represents an absorber object of a text.
  ///  Performs text extraction and provides access to the result via <see cref="P:Aspose.Pdf.Text.TextAbsorber.Text" />
  ///  object.
  ///</summary>
  ///<remarks>
  ///  The <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
  ///  object is used to extract text from a Pdf document or the document's page.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to extract text on the first PDF document page.
  ///<code lang="C#">
  ///  // open document
  ///  Document doc = new Document(inFile);
  ///  // create TextAbsorber object to extract text
  ///  TextAbsorber absorber = new TextAbsorber();
  ///  // accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // get the extracted text
  ///  string extractedText = absorber.Text;
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TextAbsorber')]
  DNTextAbsorber = interface(DDN.mscorlib.DNObject)
  ['{11F8DD06-D777-3A46-8314-4B6969FA7D11}']
  { getters & setters } 

    function get_Text: string;
    function get_HasErrors: Boolean;
    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);

  { methods } 

    ///<summary>
    ///  Extracts text on the specified page
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract text on the first PDF document page.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // accept the absorber for all document's pages
    ///  absorber.Visit(doc.Pages[1]);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example><param name="page">Pdf pocument page object.</param>
    procedure Visit(page: DNPage); overload;
    ///<summary>
    ///  Extracts text on the specified XForm.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract text on the first PDF document page.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // accept the absorber for all document's pages
    ///  absorber.Visit(doc.Pages[1].Resources.Forms["Xform1"]);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example><param name="form">Pdf form object.</param>
    procedure Visit(form: DNXForm); overload;
    ///<summary>
    ///  Extracts text on the specified document
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract text on PDF document.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // accept the absorber for all document's pages
    ///  absorber.Visit(doc);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example><param name="pdf">Pdf pocument object.</param>
    procedure Visit(pdf: DNDocument); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets extracted text that the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  extracts on the PDF document or page.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to extract text from all pages of the PDF document.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // accept the absorber for all document's pages
    ///  doc.Pages.Accept(absorber);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example>
    property Text: string read get_Text;
    ///<summary>
    ///  Value indicates whether errors were found during text extraction.
    ///  Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
    ///</summary>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  Gets or sets text extraction options.
    ///</summary>
    ///<remarks>
    ///  Allows to define text formatting mode <see cref="T:Aspose.Pdf.Text.TextExtractionOptions" />
    ///  during extraction.
    ///  The default mode is <see cref="F:Aspose.Pdf.Text.TextExtractionOptions.TextFormattingMode.Pure" />
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to set Pure text formatting mode and perform text extraction.
    ///<code lang="C#">
    ///  // open document
    ///  Document doc = new Document(inFile);
    ///  // create TextAbsorber object to extract text with formatting
    ///  TextAbsorber absorber = new TextAbsorber();
    ///  // set pure text formatting mode
    ///  absorber.ExtractionOptions = new TextExtractionOptions(TextExtractionOptions.TextFormattingMode.Pure);
    ///  // accept the absorber for all document's pages
    ///  doc.Pages.Accept(absorber);
    ///  // get the extracted text
    ///  string extractedText = absorber.Text;
    ///</code></example>
    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
    ///<summary>
    ///  Gets or sets text search options.
    ///</summary>
    ///<remarks>
    ///  Allows to define rectangle which delimits the extracted text.
    ///  By default the rectangle is empty. That means page boundaries only defines the text extraction region.
    ///</remarks>
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
  end;

  TDNTextAbsorber = class(TDNGenericImport<DNTextAbsorberClass, DNTextAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentAbsorberClass = interface(DNTextAbsorberClass)
  ['{D2219F4F-D581-58D1-8FEB-D14663215E43}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  that performs search of all text segments of the document or page.
    ///</summary>
    ///<remarks>
    ///  Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text on the first PDF document page and replace the text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextFragmentAbsorber object
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber();
    ///  // Make the absorber to search all "hello world" text occurrences
    ///  absorber.Phrase = "hello world";
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change text of the first text occurrence
    ///  absorber.TextFragments[1].Text = "hi world";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example>
    {class} function init: DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  with text edit options, that performs search of all text segments of the document or page.
    ///</summary>
    ///<remarks>
    ///  Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find all text fragments on the first PDF document page and replace font for them.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber(new TextEditOptions(TextEditOptions.FontReplace.RemoveUnusedFonts));
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Find Courier font
    ///  Pdf.Text.Font font = FontRepository.FindFont("Courier");
    ///  // Set the font for all the text fragments
    ///  foreach (TextFragment textFragment in absorber.TextFragments)
    ///  {
    ///  textFragment.TextState.Font = font;
    ///  }
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    {class} function init(textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change text and font of the first text occurrence
    ///  absorber.TextFragments[1].Text = "hi world";
    ///  absorber.TextFragments[1].TextState.Font = font;
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    {class} function init(phrase: string): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified System.Text.RegularExpressions.Regex class object.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextAbsorber object to find all instances of the input regex
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber(new System.Text.RegularExpressions.Regex(@"h\w*?o"));
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // we should find "hello" word and replace it with "Hi"
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="regex">System.Text.RegularExpressions.Regex class object that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    {class} function init(regex: DDN.Aspose.Common.DNRegex): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase and text search options.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression.
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
    ///  // we should find "hello" word and replace it with "Hi"
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    ///  <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
    {class} function init(phrase: string; textSearchOptions: DNTextSearchOptions): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase and text search options.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression.
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber(new System.Text.RegularExpressions.Regex(@"h\w*?o"), new TextSearchOptions(true));
    ///  // we should find "hello" word and replace it with "Hi"
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="regex">System.Text.RegularExpressions.Regex class object that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    ///  <param name="textSearchOptions">Text search options (Allows to turn on some search features.)</param>
    {class} function init(regex: DDN.Aspose.Common.DNRegex; textSearchOptions: DNTextSearchOptions): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase, text search options and text edit options.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///<example>
    ///  The example demonstrates how to find text with regular expression on the first PDF document page and replace the text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object that searches all words starting 'h' and ending 'o' using regular expression.
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber(@"h\w*?o", new TextSearchOptions(true));
    ///  // we should find "hello" word and replace it with "Hi"
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    ///  <param name="textSearchOptions">Text search options (Allows to turn on some search features. For example, search with regular expression)</param>
    ///  <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    {class} function init(phrase: string; textSearchOptions: DNTextSearchOptions; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase and text edit options.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///  <param name="phrase">Phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    ///  <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    {class} function init(phrase: string; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  class for the specified text phrase and text edit options.
    ///</summary>
    ///<remarks>
    ///  Performs text search of the specified phrase and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
    ///  collection.
    ///</remarks>
    ///  <param name="regex">System.Text.RegularExpressions.Regex class object that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches</param>
    ///  <param name="textEditOptions">Text edit options (Allows to turn on some edit features).</param>
    {class} function init(regex: DDN.Aspose.Common.DNRegex; textEditOptions: DNTextEditOptions): DNTextFragmentAbsorber; overload;

  end;

  ///<summary>
  ///  Represents an absorber object of text fragments.
  ///  Performs text search and provides access to search results via <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
  ///  collection.
  ///</summary>
  ///<remarks>
  ///  The <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
  ///  object is basically used in text search scenario.
  ///  When the search is completed the occurrences are represented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  objects that the <see cref="P:Aspose.Pdf.Text.TextFragmentAbsorber.TextFragments" />
  ///  collection contains.
  ///  The <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object provides access to the search occurrence text, text properties, and allows to edit text and change the text state (font, font size, color etc).
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to find text on the first PDF document page and replace the text and it's font.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Find font that will be used to change document text font
  ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Change text and font of the first text occurrence
  ///  absorber.TextFragments[1].Text = "hi world";
  ///  absorber.TextFragments[1].TextState.Font = font;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TextFragmentAbsorber')]
  DNTextFragmentAbsorber = interface(DNTextAbsorber)
  ['{53FDB065-4A96-3A68-82AE-8B40BF6AFBD3}']
  { getters & setters } 

    function get_TextFragments: DNTextFragmentCollection;
    procedure set_TextFragments(value: DNTextFragmentCollection);
    function get_Phrase: string;
    procedure set_Phrase(value: string);
    function get_TextSearchOptions: DNTextSearchOptions;
    procedure set_TextSearchOptions(value: DNTextSearchOptions);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_TextReplaceOptions: DNTextReplaceOptions;
    procedure set_TextReplaceOptions(value: DNTextReplaceOptions);
    function get_HasErrors: Boolean;
    function get_Text: string;
    function get_ExtractionOptions: DNTextExtractionOptions;
    procedure set_ExtractionOptions(value: DNTextExtractionOptions);

  { methods } 

    ///<summary>
    ///  Performs search on the specified page.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find text on the first PDF document page and replace the text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  absorber.Visit(doc.Pages[1]);
    ///  // Change text of all search occurrences
    ///  foreach (TextFragment textFragment in absorber.TextFragments)
    ///  {
    ///  textFragment.Text = "hi world";
    ///  }
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="page">PDF document page object.</param>
    procedure Visit(page: DNPage); overload;
    ///<summary>
    ///  Performs search on the specified document.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find text on PDF document and replace text of all search occurrences.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  absorber.Visit(doc);
    ///  // Change text of the first text occurrence
    ///  absorber.TextFragments[1].Text = "hi world";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example><param name="pdf">PDF document object.</param>
    procedure Visit(pdf: DNDocument); overload;
    ///<summary>
    ///  Applies font for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
    ///</summary>
    ///  <param name="font"><see cref="T:Aspose.Pdf.Text.Font" />
    ///  of the text.</param>
    procedure ApplyForAllFragments(font: DNFont); overload;
    ///<summary>
    ///  Applies font size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
    ///</summary>
    ///  <param name="fontSize">Font size of the text.</param>
    procedure ApplyForAllFragments(fontSize: Single); overload;
    ///<summary>
    ///  Applies font and size for all text fragments that were absorbed. It works faster than looping through the fragments if all fragments on the page(s) were absorbed. Otherwise it works similar with looping.
    ///</summary>
    ///  <param name="font"><see cref="T:Aspose.Pdf.Text.Font" />
    ///  of the text.</param>
    ///  <param name="fontSize">Font size of the text.</param>
    procedure ApplyForAllFragments(font: DNFont; fontSize: Single); overload;
    ///<summary>
    ///  Clears TextFragments collection of this <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  object.
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  Removes all text from the specified page.
    ///</summary>
    ///  <param name="page">PDF document page object.</param>
    procedure RemoveAllText(page: DNPage); overload;
    ///<summary>
    ///  Removes text inside the specified rectangle from the specified page.
    ///</summary>
    ///  <param name="page">PDF document page object.</param>
    ///  <param name="rect"><see cref="T:Aspose.Pdf.Rectangle" />
    ///  to remove text inside.</param>
    procedure RemoveAllText(page: DNPage; rect: DNRectangle); overload;
    ///<summary>
    ///  Removes all text from the document.
    ///</summary>
    ///  <param name="document">PDF document object.</param>
    procedure RemoveAllText(document: DNDocument); overload;
    ///<summary>
    ///  Performs search on the specified form object.
    ///</summary>
    ///  <param name="xForm">Pdf form object.</param>
    procedure Visit(xForm: DNXForm); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets collection of search occurrences that are presented with <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  objects.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to find text on the first PDF document page and replace all search occurrences with new text.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Find font that will be used to change document text font
    ///  Aspose.Pdf.Txt.Font font = FontRepository.FindFont("Arial");
    ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
    ///  // Accept the absorber for first page
    ///  doc.Pages[1].Accept(absorber);
    ///  // Change text of all search occurrences
    ///  foreach (TextFragment textFragment in absorber.TextFragments)
    ///  {
    ///  textFragment.Text = "hi world";
    ///  }
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example>
    property TextFragments: DNTextFragmentCollection read get_TextFragments write set_TextFragments;
    ///<summary>
    ///  Gets or sets phrase that the <see cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
    ///  searches on the PDF document or page.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to perform search text several times and perform text replacements.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object to find all "hello" text occurrences
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello");
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // search another word and replace it
    ///  absorber.Phrase = "world";
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "John";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example>
    property Phrase: string read get_Phrase write set_Phrase;
    ///<summary>
    ///  Gets or sets search options. The options enable search using regular expressions.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to perform search text using regular expression.
    ///<code lang="C#">
    ///  // Open document
    ///  Document doc = new Document(@"D:\Tests\input.pdf");
    ///  // Create TextFragmentAbsorber object
    ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber();
    ///  // make the absorber to search all words starting 'h' and ending 'o' using regular expression.
    ///  absorber.Phrase = @"h\w*?o";
    ///  absorber.TextSearchOptions = new TextSearchOptions(true);
    ///  // we should find "hello" word and replace it with "Hi"
    ///  doc.Pages[1].Accept(absorber);
    ///  absorber.TextFragments[1].Text = "Hi";
    ///  // Save document
    ///  doc.Save(@"D:\Tests\output.pdf");
    ///</code></example>
    property TextSearchOptions: DNTextSearchOptions read get_TextSearchOptions write set_TextSearchOptions;
    ///<summary>
    ///  Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
    ///</summary>
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    ///<summary>
    ///  Gets or sets text replace options. The options define behavior when fragment text is replaced to more short/long.
    ///</summary>
    property TextReplaceOptions: DNTextReplaceOptions read get_TextReplaceOptions write set_TextReplaceOptions;
    ///<summary>
    ///  Value indicates whether errors were found during text extraction.
    ///  Searching for errors will performed only if TextSearchOptions.LogTextExtractionErrors = true; And it may decrease performance.
    ///</summary>
    property HasErrors: Boolean read get_HasErrors;
    ///<summary>
    ///  Gets extracted text that the <see cref="T:Aspose.Pdf.Text.TextAbsorber" />
    ///  extracts on the PDF document or page.
    ///</summary>
    property Text: string read get_Text;
    ///<summary>
    ///  Gets or sets text extraction options.
    ///</summary>
    property ExtractionOptions: DNTextExtractionOptions read get_ExtractionOptions write set_ExtractionOptions;
  end;

  TDNTextFragmentAbsorber = class(TDNGenericImport<DNTextFragmentAbsorberClass, DNTextFragmentAbsorber>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B32784D8-6258-5CF8-9D69-3DC6FD52DC7D}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" />
    ///  class for the Pdf page.
    ///</summary>
    ///<remarks>
    ///  The TextBuilder allows to append text objects to Pdf pages.
    ///</remarks>
    ///  <param name="page">Page object.</param>
    {class} function init(page: DNPage): DNTextBuilder; overload;
    ///<summary>
    ///  Initializes a new instance of <see cref="T:Aspose.Pdf.Text.TextBuilder" />
    ///  class for the Pdf page.
    ///</summary>
    ///<remarks>
    ///  The TextBuilder allows to append text objects to Pdf pages.
    ///</remarks>
    ///  <param name="page">Page object.</param>
    ///  <param name="operatorCollection">Operator collection.</param>
    {class} function init(page: DNPage; operatorCollection: DNBaseOperatorCollection): DNTextBuilder; overload;

  end;

  ///<summary>
  ///  Appends text object to Pdf page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextBuilder')]
  DNTextBuilder = interface(DDN.mscorlib.DNObject)
  ['{602FCC4C-0B17-371E-B6A7-016735320835}']
  { methods } 

    ///<summary>
    ///  Appends text paragraph to Pdf page.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to create text paragraph object and append it to the Pdf page.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  Page page = (Page)doc.Pages[1];
    ///  // create text paragraph
    ///  TextParagraph paragraph = new TextParagraph();
    ///  // set the paragraph rectangle
    ///  paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
    ///  // set word wrapping options
    ///  paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
    ///  // append string lines
    ///  paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
    ///  paragraph.AppendLine("line2");
    ///  paragraph.AppendLine("line3");
    ///  // append the paragraph to the Pdf page with the TextBuilder
    ///  TextBuilder textBuilder = new TextBuilder(page);
    ///  textBuilder.AppendParagraph(paragraph);
    ///  // save Pdf document
    ///  doc.Save(outFile);
    ///</code></example><param name="textParagraph">Text paragraph object.</param>
    procedure AppendParagraph(textParagraph: DNTextParagraph);
    ///<summary>
    ///  Appends text fragment to Pdf page
    ///</summary>
    ///<example>
    ///  The example demonstrates how to create text fragment object, customize it's text segments and append it to the Pdf page.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  Page page = (Page)doc.Pages[1];
    ///  // create text fragment
    ///  TextFragment tf = new TextFragment("main text");
    ///  tf.Position = new Position(100, 600);
    ///  // set it's text properties
    ///  tf.TextState.FontSize = 5;
    ///  tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
    ///  tf.TextState.BackgroundColor = Color.LightGray;
    ///  tf.TextState.ForegroundColor = Color.Red;
    ///  // add one more segment to text fragment's Segments collection
    ///  TextSegment segment2 = new TextSegment();
    ///  segment2.Text = "another segment";
    ///  tf.Segments.Add(segment2);
    ///  // create TextBuilder object
    ///  TextBuilder builder = new TextBuilder(page);
    ///  // append the text fragment to the Pdf page
    ///  builder.AppendText(tf);
    ///  //save document
    ///  doc.Save(outFile);
    ///</code></example><param name="textFragment">Text fragment object.</param>
    procedure AppendText(textFragment: DNTextFragment);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextBuilder = class(TDNGenericImport<DNTextBuilderClass, DNTextBuilder>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C10E0D1-E344-5213-B044-62E23160FF44}']
  end;

  ///<summary>
  ///  Describes the text extraction error has appeared in the PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextExtractionError')]
  DNTextExtractionError = interface(DDN.mscorlib.DNObject)
  ['{8DF6140B-59CF-3BC9-BFF0-9A35757570D7}']
  { getters & setters } 

    function get_Summary: string;
    function get_Description: string;
    function get_Location: DNTextExtractionErrorLocation;
    function get_FontKey: string;
    function get_FontName: string;
    function get_ExtractedText: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Brief description of the error.
    ///</summary>
    property Summary: string read get_Summary;
    ///<summary>
    ///  Expanded description of the error.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  Location of the error.
    ///</summary>
    property Location: DNTextExtractionErrorLocation read get_Location;
    ///<summary>
    ///  Key (PDF name) of the Font object that is used for showing text that causes extraction error.
    ///</summary>
    property FontKey: string read get_FontKey;
    ///<summary>
    ///  Readable (internal) name of the Font object that is used for showing text that causes extraction error.
    ///</summary>
    property FontName: string read get_FontName;
    ///<summary>
    ///  Text that was actually extracted.
    ///</summary>
    property ExtractedText: string read get_ExtractedText;
  end;

  TDNTextExtractionError = class(TDNGenericImport<DNTextExtractionErrorClass, DNTextExtractionError>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionErrorLocationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{35B1B902-AB6A-5284-9C91-39BA239824BA}']
  end;

  ///<summary>
  ///  Represents the location in the PDF document where text extraction error has appeared.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextExtractionErrorLocation')]
  DNTextExtractionErrorLocation = interface(DDN.mscorlib.DNObject)
  ['{D754B343-BA55-35C6-A0EF-F45FA1797F1F}']
  { getters & setters } 

    function get_Path: string;
    function get_PageNumber: Int32;
    function get_ObjectType: string;
    function get_FormKey: string;
    function get_OperatorIndex: Int32;
    function get_OperatorString: string;
    function get_FontUsedKey: string;
    function get_TextStartPoint: DNPoint;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Location of the PDF document where text extraction error has appeared.
    ///</summary>
    property Path: string read get_Path;
    ///<summary>
    ///  Number of the document page where text extraction error has located.
    ///</summary>
    property PageNumber: Int32 read get_PageNumber;
    ///<summary>
    ///  Type of the PDF object (Page or xForm) in which contents stream text extraction error has located.
    ///</summary>
    property ObjectType: string read get_ObjectType;
    ///<summary>
    ///  Key (name) of the PDF Form XObject in which contents stream text extraction error has located. Not empty if ObjectType == 'xForm'.
    ///</summary>
    property FormKey: string read get_FormKey;
    ///<summary>
    ///  Index of text showing operator in the contents stream (operator collection) that causes text extraction error.
    ///</summary>
    property OperatorIndex: Int32 read get_OperatorIndex;
    ///<summary>
    ///  Text showing operator that causes text extraction error.
    ///</summary>
    property OperatorString: string read get_OperatorString;
    ///<summary>
    ///  Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.
    ///</summary>
    property FontUsedKey: string read get_FontUsedKey;
    ///<summary>
    ///  Key (name) of the PDF Font object that is used for showing of the operator that causes text extraction error.
    ///</summary>
    property TextStartPoint: DNPoint read get_TextStartPoint;
  end;

  TDNTextExtractionErrorLocation = class(TDNGenericImport<DNTextExtractionErrorLocationClass, DNTextExtractionErrorLocation>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{24C4473B-5A90-58C4-AF0F-A45D8982F5E9}']
  end;

  ///<summary>
  ///  Represents a text fragments collection
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextFragmentCollection')]
  DNTextFragmentCollection = interface(DDN.mscorlib.DNICollection<DNTextFragment>)
  ['{8F6908D8-9849-3A4F-AD4C-CEB7BD2C94F0}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNTextFragment;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextFragment>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNTextFragment>; index: Int32);
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNTextFragment): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating whether collection is read-only
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNTextFragment read get_Item; default;
  end;

  TDNTextFragmentCollection = class(TDNGenericImport<DNTextFragmentCollectionClass, DNTextFragmentCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F7598FA7-6226-5BEF-A7AC-FDF879A58454}']
  end;

  ///<summary>
  ///  Represents text processing options
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextOptions')]
  DNTextOptions = interface(DDN.mscorlib.DNObject)
  ['{E5BC9FF0-B358-3FD8-A6A9-7514C36FD77A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTextOptions = class(TDNGenericImport<DNTextOptionsClass, DNTextOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextEditOptionsClass = interface(DNTextOptionsClass)
  ['{351B11E2-74B9-5D90-B0A1-F26FBB370D32}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" />
    ///  object for the specified no-character behavior mode.
    ///</summary>
    ///  <param name="noCharacterBehavior">No-character behavior mode object.</param>
    {class} function init(noCharacterBehavior: DNText_TextEditOptions_NoCharacterAction): DNTextEditOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" />
    ///  object for the specified font replacement behavior mode.
    ///</summary>
    ///  <param name="fontReplaceBehavior">Font replace behavior object.</param>
    {class} function init(fontReplaceBehavior: DNTextEditOptions_FontReplace): DNTextEditOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" />
    ///  object for the specified language transformation permission.
    ///</summary>
    ///  <param name="allowLanguageTransformation">Allows language transformation if set to true.</param>
    {class} function init(allowLanguageTransformation: Boolean): DNTextEditOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextEditOptions" />
    ///  object for the specified language transformation behavior mode.
    ///</summary>
    ///  <param name="languageTransformationBehavior">language transformation behavior object.</param>
    {class} function init(languageTransformationBehavior: DNTextEditOptions_LanguageTransformation): DNTextEditOptions; overload;

  end;

  ///<summary>
  ///  Descubes options of text edit operations.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextEditOptions')]
  DNTextEditOptions = interface(DNTextOptions)
  ['{0F6F2406-9E5E-33F6-B512-1CDBF5817EF7}']
  { getters & setters } 

    function get_ReplacementFont: DNFont;
    procedure set_ReplacementFont(value: DNFont);
    function get_NoCharacterBehavior: DNText_TextEditOptions_NoCharacterAction;
    procedure set_NoCharacterBehavior(value: DNText_TextEditOptions_NoCharacterAction);
    function get_FontReplaceBehavior: DNTextEditOptions_FontReplace;
    procedure set_FontReplaceBehavior(value: DNTextEditOptions_FontReplace);
    function get_AllowLanguageTransformation: Boolean;
    procedure set_AllowLanguageTransformation(value: Boolean);
    function get_LanguageTransformationBehavior: DNTextEditOptions_LanguageTransformation;
    procedure set_LanguageTransformationBehavior(value: DNTextEditOptions_LanguageTransformation);
    function get_ClippingPathsProcessing: DNTextEditOptions_ClippingPathsProcessingMode;
    procedure set_ClippingPathsProcessing(value: DNTextEditOptions_ClippingPathsProcessingMode);
    function get_ToAttemptGetUnderlineFromSource: Boolean;
    procedure set_ToAttemptGetUnderlineFromSource(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets font used for replacing if user font does not contain required character
    ///</summary>
    property ReplacementFont: DNFont read get_ReplacementFont write set_ReplacementFont;
    ///<summary>
    ///  Gets or sets mode that defines behavior in case fonts don't contain requested characters.
    ///</summary>
    property NoCharacterBehavior: DNText_TextEditOptions_NoCharacterAction read get_NoCharacterBehavior write set_NoCharacterBehavior;
    ///<summary>
    ///  Gets mode that defines behavior for fonts replacement scenarios.
    ///</summary>
    property FontReplaceBehavior: DNTextEditOptions_FontReplace read get_FontReplaceBehavior write set_FontReplaceBehavior;
    ///<summary>
    ///  Gets or sets value that permits usage of language transformation during adding or editing of text.
    ///  true - language transformation will be applied if necessary (default value).
    ///  false - language transformation will NOT be applied.
    ///</summary>
    property AllowLanguageTransformation: Boolean read get_AllowLanguageTransformation write set_AllowLanguageTransformation;
    ///<summary>
    ///  Gets mode that defines behavior for language transformation scenarios.
    ///</summary>
    property LanguageTransformationBehavior: DNTextEditOptions_LanguageTransformation read get_LanguageTransformationBehavior write set_LanguageTransformationBehavior;
    ///<summary>
    ///  Gets mode for processing clipping path of the edited text.
    ///</summary>
    property ClippingPathsProcessing: DNTextEditOptions_ClippingPathsProcessingMode read get_ClippingPathsProcessing write set_ClippingPathsProcessing;
    ///<summary>
    ///  Gets or sets value that permits searching for text underlining on the page of source document.
    ///  (Obsolete) Please use TextSearchOptions.SearchForTextRelatedGraphics instead this.
    ///</summary>
    property ToAttemptGetUnderlineFromSource: Boolean read get_ToAttemptGetUnderlineFromSource write set_ToAttemptGetUnderlineFromSource;
  end;

  TDNTextEditOptions = class(TDNGenericImport<DNTextEditOptionsClass, DNTextEditOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextExtractionOptionsClass = interface(DNTextOptionsClass)
  ['{DD79A053-A4D1-514E-8AB4-6E61FD0C5330}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextExtractionOptions" />
    ///  object for the specified text formatting mode.
    ///</summary>
    ///  <param name="formattingMode">Text formatting mode value.</param>
    {class} function init(formattingMode: DNTextExtractionOptions_TextFormattingMode): DNTextExtractionOptions;

  end;

  ///<summary>
  ///  Represents text extraction options
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextExtractionOptions')]
  DNTextExtractionOptions = interface(DNTextOptions)
  ['{1B9D64F6-EBEA-3268-92A6-1E3B2E1F1CE2}']
  { getters & setters } 

    function get_FormattingMode: DNTextExtractionOptions_TextFormattingMode;
    procedure set_FormattingMode(value: DNTextExtractionOptions_TextFormattingMode);
    function get_ScaleFactor: Double;
    procedure set_ScaleFactor(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets formatting mode.
    ///</summary>
    property FormattingMode: DNTextExtractionOptions_TextFormattingMode read get_FormattingMode write set_FormattingMode;
    ///<summary>
    ///  Gets or sets factor that will be applied to scale font size during extraction in pure mode.
    ///  Setting of less value leads to more spaces in the extracted text.
    ///  Default value is 1 - no scaling;
    ///  Setting value to zero allows algorithm choose scaling automatically.
    ///</summary>
    property ScaleFactor: Double read get_ScaleFactor write set_ScaleFactor;
  end;

  TDNTextExtractionOptions = class(TDNGenericImport<DNTextExtractionOptionsClass, DNTextExtractionOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFormattingOptionsClass = interface(DNTextOptionsClass)
  ['{ECE4CF83-FC7B-5FCC-BC64-365C07838867}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFormattingOptions" />
    ///  object for the specified word wrap mode.
    ///</summary>
    ///  <param name="wrapMode">Word wrap mode.</param>
    {class} function init(wrapMode: DNText_TextFormattingOptions_WordWrapMode): DNTextFormattingOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFormattingOptions" />
    ///  object with undefined word wrap mode.
    ///</summary>
    {class} function init: DNTextFormattingOptions; overload;

  end;

  ///<summary>
  ///  Represents text formatting options
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextFormattingOptions')]
  DNTextFormattingOptions = interface(DNTextOptions)
  ['{AED621F0-F7F7-3C94-B44C-AA4A6D30A456}']
  { getters & setters } 

    function get_WrapMode: DNText_TextFormattingOptions_WordWrapMode;
    procedure set_WrapMode(value: DNText_TextFormattingOptions_WordWrapMode);
    function get_LineSpacing: DNTextFormattingOptions_LineSpacingMode;
    procedure set_LineSpacing(value: DNTextFormattingOptions_LineSpacingMode);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_FirstLineIndent: Single;
    procedure set_FirstLineIndent(value: Single);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets word wrap mode.
    ///  Default value is WordWrapMode.NoWrap
    ///</summary>
    property WrapMode: DNText_TextFormattingOptions_WordWrapMode read get_WrapMode write set_WrapMode;
    ///<summary>
    ///  Gets or sets line spacing mode.
    ///  Default value is LineSpacingMode.FontSize
    ///</summary>
    property LineSpacing: DNTextFormattingOptions_LineSpacingMode read get_LineSpacing write set_LineSpacing;
    ///<summary>
    ///  Gets or sets subsequent lines indent value.
    ///</summary>
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    ///<summary>
    ///  Gets or sets first line indent value.
    ///</summary>
    property FirstLineIndent: Single read get_FirstLineIndent write set_FirstLineIndent;
  end;

  TDNTextFormattingOptions = class(TDNGenericImport<DNTextFormattingOptionsClass, DNTextFormattingOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextReplaceOptionsClass = interface(DNTextOptionsClass)
  ['{955CEFEC-5832-56E6-9CF6-12A42B8ED740}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextReplaceOptions" />
    ///  object for the specified scope.
    ///</summary>
    ///  <param name="scope">Scope object.</param>
    {class} function init(scope: DNText_TextReplaceOptions_Scope): DNTextReplaceOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextReplaceOptions" />
    ///  object for the specified after replace action.
    ///</summary>
    ///  <param name="adjustment">ReplaceAdjustment object.</param>
    {class} function init(adjustment: DNTextReplaceOptions_ReplaceAdjustment): DNTextReplaceOptions; overload;

  end;

  ///<summary>
  ///  Represents text replace options
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextReplaceOptions')]
  DNTextReplaceOptions = interface(DNTextOptions)
  ['{78174F1C-6A20-3242-A760-C31AA9B82B84}']
  { getters & setters } 

    function get_ReplaceScope: DNText_TextReplaceOptions_Scope;
    procedure set_ReplaceScope(value: DNText_TextReplaceOptions_Scope);
    function get_ReplaceAdjustmentAction: DNTextReplaceOptions_ReplaceAdjustment;
    procedure set_ReplaceAdjustmentAction(value: DNTextReplaceOptions_ReplaceAdjustment);
    function get_AdjustmentNewLineSpacing: Double;
    procedure set_AdjustmentNewLineSpacing(value: Double);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets a scope where replace text operation is applied
    ///</summary>
    property ReplaceScope: DNText_TextReplaceOptions_Scope read get_ReplaceScope write set_ReplaceScope;
    ///<summary>
    ///  Gets or sets an action that will be done after replace of text fragment to more short.
    ///</summary>
    property ReplaceAdjustmentAction: DNTextReplaceOptions_ReplaceAdjustment read get_ReplaceAdjustmentAction write set_ReplaceAdjustmentAction;
    ///<summary>
    ///  Gets or sets value of line spacing that used if replace adjustment is forced to create new line of text.
    ///  The value expected is multiplier of font size of the replaced text. Default is 1.2.
    ///</summary>
    property AdjustmentNewLineSpacing: Double read get_AdjustmentNewLineSpacing write set_AdjustmentNewLineSpacing;
  end;

  TDNTextReplaceOptions = class(TDNGenericImport<DNTextReplaceOptionsClass, DNTextReplaceOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSearchOptionsClass = interface(DNTextOptionsClass)
  ['{D681B1EF-4C99-5660-8D28-5021BE1B1EBC}']
  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" />
    ///  object.
    ///  Specifies regular expression usage mode.
    ///</summary>
    ///  <param name="isRegularExpressionUsed">Value that indicates that regularexpression is used.</param>
    {class} function init(isRegularExpressionUsed: Boolean): DNTextSearchOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" />
    ///  object.
    ///  Specifies rectangle that delimits the searched text.
    ///</summary>
    ///  <param name="rectangle">Rectangle that includes the extracted text.</param>
    {class} function init(rectangle: DNRectangle): DNTextSearchOptions; overload;
    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextSearchOptions" />
    ///  object.
    ///  Specifies rectangle that delimits the searched text and regular expression usage mode.
    ///</summary>
    ///  <param name="rectangle">Rectangle that includes the extracted text.</param>
    ///  <param name="isRegularExpressionUsed">Value that indicates that regularexpression is used.</param>
    {class} function init(rectangle: DNRectangle; isRegularExpressionUsed: Boolean): DNTextSearchOptions; overload;

  end;

  ///<summary>
  ///  Represents text search options
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextSearchOptions')]
  DNTextSearchOptions = interface(DNTextOptions)
  ['{86A9CBD3-B045-39AF-BB4C-7208D1A9AE57}']
  { getters & setters } 

    function get_IsRegularExpressionUsed: Boolean;
    procedure set_IsRegularExpressionUsed(value: Boolean);
    function get_LimitToPageBounds: Boolean;
    procedure set_LimitToPageBounds(value: Boolean);
    function get_Rectangle: DNRectangle;
    procedure set_Rectangle(value: DNRectangle);
    function get_UseFontEngineEncoding: Boolean;
    procedure set_UseFontEngineEncoding(value: Boolean);
    function get_IgnoreShadowText: Boolean;
    procedure set_IgnoreShadowText(value: Boolean);
    function get_LogTextExtractionErrors: Boolean;
    procedure set_LogTextExtractionErrors(value: Boolean);
    function get_IgnoreResourceFontErrors: Boolean;
    procedure set_IgnoreResourceFontErrors(value: Boolean);
    function get_SearchForTextRelatedGraphics: Boolean;
    procedure set_SearchForTextRelatedGraphics(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets indication that regular expression is used.
    ///</summary>
    property IsRegularExpressionUsed: Boolean read get_IsRegularExpressionUsed write set_IsRegularExpressionUsed;
    ///<summary>
    ///  Gets or sets indication that text is searched within the page bounds.
    ///</summary>
    property LimitToPageBounds: Boolean read get_LimitToPageBounds write set_LimitToPageBounds;
    ///<summary>
    ///  Gets or sets rectangle that bounds the searched text.
    ///</summary>
    ///<remarks>
    ///  The property may be used in case it is required to delimit text extraction or text replace region.
    ///</remarks>
    property Rectangle: DNRectangle read get_Rectangle write set_Rectangle;
    ///<summary>
    ///  Gets or sets indication that text will be searched using font engine encoding.
    ///  true - means that font engine encoding will be used (try this if text search fails because of imperfect encoding in the document)
    ///  false - means that document font encoding will be used (default value)
    ///</summary>
    property UseFontEngineEncoding: Boolean read get_UseFontEngineEncoding write set_UseFontEngineEncoding;
    ///<summary>
    ///  Gets or sets indication that text fragments representing shadow of normal text will be ignored during search.
    ///  true - means that shadow text will not be found (try this if text search returns duplicated fragments on the close positions)
    ///  false - means that shadow text will be found as well as normal text (default value)
    ///</summary>
    property IgnoreShadowText: Boolean read get_IgnoreShadowText write set_IgnoreShadowText;
    ///<summary>
    ///  Gets or sets indication that text extraction (decoding) errors will be logged in the text (fragment) absorber.
    ///  true - means that text extraction (decoding) errors will be loged. It may decrease performance.
    ///  false (default) - no error loging.
    ///</summary>
    property LogTextExtractionErrors: Boolean read get_LogTextExtractionErrors write set_LogTextExtractionErrors;
    ///<summary>
    ///  Gets or sets indication that errors related to absence of font will be ignored by text (fragment) absorber.
    ///  true - means that errors of absence of font will be ignored. Text segments that refer to incorrect resources will be skipped during processing.
    ///  false (default) - absence of font error will terminate processing by throwing exception.
    ///</summary>
    property IgnoreResourceFontErrors: Boolean read get_IgnoreResourceFontErrors write set_IgnoreResourceFontErrors;
    ///<summary>
    ///  Gets or sets value that permits searching for text related graphics (underlining, background etc.) during text search.
    ///  false - graphic elements that may present in source document will be ignored (default value).
    ///  true - searching for text related graphics will be performed. It may decrease performance of text search and edit. It also may change graphical elements that look like text related.
    ///</summary>
    property SearchForTextRelatedGraphics: Boolean read get_SearchForTextRelatedGraphics write set_SearchForTextRelatedGraphics;
  end;

  TDNTextSearchOptions = class(TDNGenericImport<DNTextSearchOptionsClass, DNTextSearchOptions>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextParagraphClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4647EBF5-6542-596F-81CC-67022970AE32}']
  { constructors } 

    {class} function init: DNTextParagraph;

  end;

  ///<summary>
  ///  Represents text paragraphs as multiline text object.
  ///</summary>
  ///<example>
  ///  The example demonstrates how to create text paragraph object and append it to the Pdf page.
  ///<code lang="C#">
  ///  Document doc = new Document(inFile);
  ///  Page page = (Page)doc.Pages[1];
  ///  // create text paragraph
  ///  TextParagraph paragraph = new TextParagraph();
  ///  // set the paragraph rectangle
  ///  paragraph.Rectangle = new Rectangle(100, 600, 200, 700);
  ///  // set word wrapping options
  ///  paragraph.FormattingOptions.WrapMode = TextFormattingOptions.WordWrapMode.ByWords;
  ///  // append string lines
  ///  paragraph.AppendLine("the quick brown fox jumps over the lazy dog");
  ///  paragraph.AppendLine("line2");
  ///  paragraph.AppendLine("line3");
  ///  // append the paragraph to the Pdf page with the TextBuilder
  ///  TextBuilder textBuilder = new TextBuilder(page);
  ///  textBuilder.AppendParagraph(paragraph);
  ///  // save Pdf document
  ///  doc.Save(outFile);
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TextParagraph')]
  DNTextParagraph = interface(DDN.mscorlib.DNObject)
  ['{4A717D65-C382-3A3F-81AC-B7D0F37CCDA3}']
  { getters & setters } 

    function get_VerticalAlignment: DNVerticalAlignment;
    procedure set_VerticalAlignment(value: DNVerticalAlignment);
    function get_SubsequentLinesIndent: Single;
    procedure set_SubsequentLinesIndent(value: Single);
    function get_FirstLineIndent: Single;
    procedure set_FirstLineIndent(value: Single);
    function get_Justify: Boolean;
    procedure set_Justify(value: Boolean);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_FormattingOptions: DNTextFormattingOptions;
    procedure set_FormattingOptions(value: DNTextFormattingOptions);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_TextRectangle: DNRectangle;
    function get_Rectangle: DNRectangle;
    procedure set_Rectangle(value: DNRectangle);
    function get_Margin: DNMarginInfo;
    procedure set_Margin(value: DNMarginInfo);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);

  { methods } 

    ///<summary>
    ///  Begins the editing of the TextParagraph.
    ///</summary>
    ///<remarks>
    ///  Improves performance of TextParagraph population.
    ///  Any layout calculation is suspended until EndEdit method is invoked.
    ///  Note that method invoke can't be nested.
    ///</remarks>
    procedure BeginEdit;
    ///<summary>
    ///  Ends the editing of the TextParagraph.
    ///</summary>
    ///<remarks>
    ///  Improves performance of TextParagraph population.
    ///  Any layout calculation is suspended until EndEdit method is invoked.
    ///  Note that method invoke can't be nested.
    ///</remarks>
    procedure EndEdit;
    ///<summary>
    ///  Appends text line
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    procedure AppendLine(line: string); overload;
    ///<summary>
    ///  Appends text line.
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    ///  <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
    ///  The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    procedure AppendLine(line: string; lineSpacing: Single); overload;
    ///<summary>
    ///  Appends text line with text state parameters.
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    ///  <param name="textState">Text state of the new line.</param>
    procedure AppendLine(line: string; textState: DNTextState); overload;
    ///<summary>
    ///  Appends text line with text state parameters
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    ///  <param name="textState">Text state of the new line.</param>
    ///  <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
    ///  The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    procedure AppendLine(line: string; textState: DNTextState; lineSpacing: Single); overload;
    ///<summary>
    ///  Appends text line with text state parameters.
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    procedure AppendLine(line: DNTextFragment); overload;
    ///<summary>
    ///  Appends text line with text state parameters.
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    ///  <param name="textState">Text state of the new line.</param>
    procedure AppendLine(line: DNTextFragment; textState: DNTextState); overload;
    ///<summary>
    ///  Appends text line with text state parameters
    ///</summary>
    ///  <param name="line">The new line's text.</param>
    ///  <param name="textState">Text state of the new line.</param>
    ///  <param name="lineSpacing">Additional spacing (0.0 is default and corresponds to default text line height).
    ///  The spacing value is added to default line spacing for the particular line, so you may specify 12.0 to get empty row AFTER a text line drawn with 12pt font.</param>
    procedure AppendLine(line: DNTextFragment; textState: DNTextState; lineSpacing: Single); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets vertical alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  VerticalAlignment.None is equal to VerticalAlignment.Bottom.
    ///</remarks>
    property VerticalAlignment: DNVerticalAlignment read get_VerticalAlignment write set_VerticalAlignment;
    ///<summary>
    ///  Gets or sets subsequent lines indent value.
    ///  If set to a non-zero value, it has an advantage over the FormattingOptions.SubsequentLinesIndent value.
    ///</summary>
    property SubsequentLinesIndent: Single read get_SubsequentLinesIndent write set_SubsequentLinesIndent;
    ///<summary>
    ///  Gets or sets subsequent lines indent value.
    ///  If set to a non-zero value, it has an advantage over the FormattingOptions.SubsequentLinesIndent value.
    ///</summary>
    property FirstLineIndent: Single read get_FirstLineIndent write set_FirstLineIndent;
    ///<summary>
    ///  Gets or sets value whether text is justified.
    ///</summary>
    property Justify: Boolean read get_Justify write set_Justify;
    ///<summary>
    ///  Gets or sets horizontal alignment for the text inside paragrph's <see cref="P:Aspose.Pdf.Text.TextParagraph.Rectangle" />
    ///  .
    ///</summary>
    ///<remarks>
    ///  HorizontalAlignment.None is equal to HorizontalAlignment.Left.
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets formatting options.
    ///</summary>
    property FormattingOptions: DNTextFormattingOptions read get_FormattingOptions write set_FormattingOptions;
    ///<summary>
    ///  Gets or sets position of the paragraph.
    ///</summary>
    property Position: DNPosition read get_Position write set_Position;
    ///<summary>
    ///  Gets rectangle of the text placed to the paragraph.
    ///</summary>
    property TextRectangle: DNRectangle read get_TextRectangle;
    ///<summary>
    ///  Gets or sets rectangle of the paragraph.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle write set_Rectangle;
    ///<summary>
    ///  Gets or sets the padding.
    ///</summary>
    property Margin: DNMarginInfo read get_Margin write set_Margin;
    ///<summary>
    ///  Gets or sets rotation angle in degrees.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
  end;

  TDNTextParagraph = class(TDNGenericImport<DNTextParagraphClass, DNTextParagraph>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSegmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4D0DE35D-4CE8-5BF0-9389-1A09D4F4DDF3}']
  { constructors } 

    ///<summary>
    ///  Creates TextSegment object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  Page page = (Page)doc.Pages[1];
    ///  // create text fragment
    ///  TextFragment tf = new TextFragment("main text");
    ///  tf.Position = new Position(100, 600);
    ///  // set it's text properties
    ///  tf.TextState.FontSize = 5;
    ///  tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
    ///  tf.TextState.BackgroundColor = Color.LightGray;
    ///  tf.TextState.ForegroundColor = Color.Red;
    ///  // add one more segment to text fragment's Segments collection
    ///  TextSegment segment2 = new TextSegment();
    ///  segment2.Text = "another segment";
    ///  tf.Segments.Add(segment2);
    ///  // create TextBuilder object
    ///  TextBuilder builder = new TextBuilder(page);
    ///  // append the text fragment to the Pdf page
    ///  builder.AppendText(tf);
    ///  //save document
    ///  doc.Save(outFile);
    ///</code></example>
    {class} function init: DNTextSegment; overload;
    ///<summary>
    ///  Creates TextSegment object.
    ///</summary>
    ///<example>
    ///  The example demonstrates how to create text fragment object, add a text segment to the text fragment collection and append it to the Pdf page.
    ///<code lang="C#">
    ///  Document doc = new Document(inFile);
    ///  Page page = (Page)doc.Pages[1];
    ///  // create text fragment
    ///  TextFragment tf = new TextFragment("main text");
    ///  tf.Position = new Position(100, 600);
    ///  // set it's text properties
    ///  tf.TextState.FontSize = 5;
    ///  tf.TextState.Font = FontRepository.FindFont("TimesNewRoman");
    ///  tf.TextState.BackgroundColor = Color.LightGray;
    ///  tf.TextState.ForegroundColor = Color.Red;
    ///  // add one more segment to text fragment's Segments collection
    ///  TextSegment segment2 = new TextSegment("another segment");
    ///  tf.Segments.Add(segment2);
    ///  // create TextBuilder object
    ///  TextBuilder builder = new TextBuilder(page);
    ///  // append the text fragment to the Pdf page
    ///  builder.AppendText(tf);
    ///  //save document
    ///  doc.Save(outFile);
    ///</code></example><param name="text">Text segment's text.</param>
    {class} function init(text: string): DNTextSegment; overload;

  { static methods } 

    {class} function MyHtmlEncode(value: string): string;

  end;

  ///<summary>
  ///  Represents segment of Pdf text.
  ///</summary>
  ///<remarks>
  ///  In a few words, <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects are children of <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object.
  ///  In details:
  ///  Text of pdf document in <see cref="N:Aspose.Pdf" />
  ///  is represented by two basic objects: <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  and <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  The differences between them is mostly context-dependent.
  ///  Let's consider following scenario. User searches text "hello world" to operate with it, change it's properties, look etc.
  ///<code lang="C#">
  ///  Document doc = new Document(docFile);
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  doc.Pages[1].Accept(absorber);
  ///</code>
  ///  Phisycally pdf text's representation is very complex.
  ///  The text "hello world" may consist of several phisycally independent text segments.
  ///  The Aspose.Pdf text model basically establishes that <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  object
  ///  provides single logic operation set over physical <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects set that represent user's query.
  ///  In text search scenario, <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  is logical "hello world" text representation,
  ///  and <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  object collection represents all physical segments that construct "hello world" text object.
  ///  So, <see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  is close to logical text representation.
  ///  And <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  is close to physical text representation.
  ///  Obviously each <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  object may have it's own font, coloring, positioning properties.
  ///<see cref="T:Aspose.Pdf.Text.TextFragment" />
  ///  provides simple way to change text with it's properties: set font, set font size, set font color etc.
  ///  Meanwhile <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects are accessible and users are able to operate with <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  objects independently.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to change text color and font size of the text with <see cref="P:Aspose.Pdf.Text.TextSegment.TextState" />
  ///  object of <see cref="T:Aspose.Pdf.Text.TextSegment" />
  ///  object.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Change foreground color of the first text segment of the first text occurrence
  ///  absorber.TextFragments[1].Segments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
  ///  // Change font size of the first text segment of the first text occurrence
  ///  absorber.TextFragments[1].Segments[1].TextState.FontSize = 15;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example>
  [DNTypeName('Aspose.Pdf.Text.TextSegment')]
  DNTextSegment = interface(DDN.mscorlib.DNObject)
  ['{57844BAC-143C-3DB5-A520-BA2796113317}']
  { getters & setters } 

    function get_StartCharIndex: Int32;
    function get_EndCharIndex: Int32;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextState: DNTextState;
    procedure set_TextState(value: DNTextState);
    function get_Position: DNPosition;
    procedure set_Position(value: DNPosition);
    function get_Rectangle: DNRectangle;
    function get_BaselinePosition: DNPosition;
    procedure set_BaselinePosition(value: DNPosition);
    function get_TextEditOptions: DNTextEditOptions;
    procedure set_TextEditOptions(value: DNTextEditOptions);
    function get_Characters: DNCharInfoCollection;
    function get_Hyperlink: DNHyperlink;
    procedure set_Hyperlink(value: DNHyperlink);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets starting character index of current segment in the show text operator (Tj, TJ) segment.
    ///</summary>
    property StartCharIndex: Int32 read get_StartCharIndex;
    ///<summary>
    ///  Gets ending character index of current segment in the show text operator (Tj, TJ) segment.
    ///</summary>
    property EndCharIndex: Int32 read get_EndCharIndex;
    ///<summary>
    ///  Gets or sets <see cref="T:System.String" />
    ///  text object that the <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object represents.
    ///</summary>
    property Text: string read get_Text write set_Text;
    ///<summary>
    ///  Gets or sets text state for the text that <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object represents.
    ///</summary>
    ///<remarks>
    ///  Provides a way to change following properties of the text:
    ///  Font
    ///  FontSize
    ///  FontStyle
    ///  ForegroundColor
    ///  BackgroundColor
    ///</remarks>
    property TextState: DNTextState read get_TextState write set_TextState;
    ///<summary>
    ///  Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object.
    ///</summary>
    property Position: DNPosition read get_Position write set_Position;
    ///<summary>
    ///  Gets rectangle of the TextSegment
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
    ///<summary>
    ///  Gets text position for text, represented with <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object.
    ///  The YIndent of the Position structure represents baseline coordinate of the text segment.
    ///</summary>
    property BaselinePosition: DNPosition read get_BaselinePosition write set_BaselinePosition;
    ///<summary>
    ///  Gets or sets text edit options. The options define special behavior when requested symbol cannot be written with font.
    ///</summary>
    property TextEditOptions: DNTextEditOptions read get_TextEditOptions write set_TextEditOptions;
    ///<summary>
    ///  Gets collection of CharInfo objects that represent information on characters in the text segment.
    ///</summary>
    property Characters: DNCharInfoCollection read get_Characters;
    ///<summary>
    ///  Gets or sets the segment hyperlink(for pdf generator).
    ///</summary>
    property Hyperlink: DNHyperlink read get_Hyperlink write set_Hyperlink;
  end;

  TDNTextSegment = class(TDNGenericImport<DNTextSegmentClass, DNTextSegment>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextSegmentCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6A69712-95AF-529A-B970-5B5406E5827E}']
  end;

  ///<summary>
  ///  Represents a text segments collection
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextSegmentCollection')]
  DNTextSegmentCollection = interface(DDN.mscorlib.DNICollection<DNTextSegment>)
  ['{53ADABA6-E38C-3BEB-A6E9-99339BECA936}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsSynchronized: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNTextSegment;

  { methods } 

    ///<summary>
    ///  Returns an enumerator for the entire collection.
    ///</summary>
    ///<returns>Enumerator object.</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNTextSegment>;
    ///<summary>
    ///  Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array
    ///</summary>
    ///  <param name="array">Array of objects which will be copied.</param>
    ///  <param name="index">Starting index from which copying will be started.</param>
    procedure CopyTo(&array: TArray<DNTextSegment>; index: Int32);
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNTextSegment): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the number of <see cref="T:Aspose.Pdf.Text.TextSegment" />
    ///  object elements actually contained in the collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Gets an object that can be used to synchronize access to the collection.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether access to the collection is synchronized (thread safe).
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Gets a value indicating whether collection is read-only
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNTextSegment read get_Item; default;
  end;

  TDNTextSegmentCollection = class(TDNGenericImport<DNTextSegmentCollectionClass, DNTextSegmentCollection>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A65AB67-FEE5-5ACD-B1A9-FC34E74A0B04}']
  { constructors } 

    ///<summary>
    ///  Creates text state object.
    ///</summary>
    {class} function init: DNTextState; overload;
    ///<summary>
    ///  Creates text state object with font size specification.
    ///</summary>
    ///  <param name="fontSize">Font size.</param>
    {class} function init(fontSize: Double): DNTextState; overload;
    ///<summary>
    ///  Creates text state object with foreground color specification.
    ///</summary>
    ///  <param name="foregroundColor">Foreground color.</param>
    {class} function init(foregroundColor: DDN.Aspose.Common.DNColor): DNTextState; overload;
    ///<summary>
    ///  Creates text state object with foreground color and font size specification.
    ///</summary>
    ///  <param name="foregroundColor">Foreground color.</param>
    ///  <param name="fontSize">Font size.</param>
    {class} function init(foregroundColor: DDN.Aspose.Common.DNColor; fontSize: Double): DNTextState; overload;
    ///<summary>
    ///  Creates text state object with font family specification.
    ///</summary>
    ///  <param name="fontFamily">Font family.</param>
    {class} function init(fontFamily: string): DNTextState; overload;
    ///<summary>
    ///  Creates text state object with font family and font style specification.
    ///</summary>
    ///  <param name="fontFamily">Font family.</param>
    ///  <param name="bold">Bold font style.</param>
    ///  <param name="italic">Italic font style.</param>
    {class} function init(fontFamily: string; bold: Boolean; italic: Boolean): DNTextState; overload;
    ///<summary>
    ///  Creates text state object with font family and font size specification.
    ///</summary>
    ///  <param name="fontFamily">Font family.</param>
    ///  <param name="fontSize">Font size.</param>
    {class} function init(fontFamily: string; fontSize: Double): DNTextState; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { static fields } 

    ///<summary>
    ///  You can place this tag in text to declare tabulation.
    ///</summary>
    ///<remarks>
    ///  It has effect only in couple with <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  .
    ///</remarks>
    {class} property TabTag: string read __fakeFieldGet_TabTag;
    ///<summary>
    ///  Default value of tabulation in widths of space character of default font.
    ///</summary>
    {class} property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  end;

  ///<summary>
  ///  Represents a text state of a text
  ///</summary>
  [DNTypeName('Aspose.Pdf.Text.TextState')]
  DNTextState = interface(DDN.mscorlib.DNObject)
  ['{2226E10B-65B6-3C1B-8E39-6D330E7A6C48}']
  { getters & setters } 

    function get_CharacterSpacing: Single;
    procedure set_CharacterSpacing(value: Single);
    function get_LineSpacing: Single;
    procedure set_LineSpacing(value: Single);
    function get_HorizontalScaling: Single;
    procedure set_HorizontalScaling(value: Single);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_WordSpacing: Single;
    procedure set_WordSpacing(value: Single);
    function get_Invisible: Boolean;
    procedure set_Invisible(value: Boolean);
    function get_RenderingMode: DNTextRenderingMode;
    procedure set_RenderingMode(value: DNTextRenderingMode);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_StrokingColor: DNColor;
    procedure set_StrokingColor(value: DNColor);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    function get_StrikeOut: Boolean;
    procedure set_StrikeOut(value: Boolean);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_FontStyle: DNFontStyles;
    procedure set_FontStyle(value: DNFontStyles);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);

  { fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { fields } 

    ///<summary>
    ///  You can place this tag in text to declare tabulation.
    ///</summary>
    ///<remarks>
    ///  It has effect only in couple with <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  .
    ///</remarks>
   property TabTag: string read __fakeFieldGet_TabTag;
    ///<summary>
    ///  Default value of tabulation in widths of space character of default font.
    ///</summary>
   property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { methods } 

    ///<summary>
    ///  Applies settings from another textState.
    ///</summary>
    ///<remarks>
    ///  Only those properties will be copied that were changed explicitly.
    ///</remarks>
    ///  <param name="textState">Text state object.</param>
    procedure ApplyChangesFrom(textState: DNTextState);
    ///<summary>
    ///  Measures the string.
    ///</summary>
    ///  <param name="str">The string.</param>
    ///<returns>Width of the string represented with this text state.</returns>
    function MeasureString(str: string): Double;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets character spacing of the text.
    ///</summary>
    property CharacterSpacing: Single read get_CharacterSpacing write set_CharacterSpacing;
    ///<summary>
    ///  Gets or sets line spacing of the text.
    ///</summary>
    ///<remarks>
    ///  Note that the value is not preserved as a text characteristic within the document.
    ///  The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
    ///  The property is used by runtime in context of current generation/modification process.
    ///</remarks>
    property LineSpacing: Single read get_LineSpacing write set_LineSpacing;
    ///<summary>
    ///  Gets or sets horizontal scaling of the text.
    ///</summary>
    property HorizontalScaling: Single read get_HorizontalScaling write set_HorizontalScaling;
    ///<summary>
    ///  Gets or sets subscript of the text.
    ///</summary>
    property Subscript: Boolean read get_Subscript write set_Subscript;
    ///<summary>
    ///  Gets or sets superscript of the text.
    ///</summary>
    property Superscript: Boolean read get_Superscript write set_Superscript;
    ///<summary>
    ///  Gets or sets word spacing of the text.
    ///</summary>
    property WordSpacing: Single read get_WordSpacing write set_WordSpacing;
    ///<summary>
    ///  Gets or sets invisibility of the text. Obsolete. Please use RenderingMode instead.
    ///</summary>
    property Invisible: Boolean read get_Invisible write set_Invisible;
    ///<summary>
    ///  Gets or sets rendering mode of text.
    ///</summary>
    property RenderingMode: DNTextRenderingMode read get_RenderingMode write set_RenderingMode;
    ///<summary>
    ///  Gets or sets font size of the text.
    ///</summary>
    property FontSize: Single read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets font of the text.
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Gets or sets foreground color of the text.
    ///</summary>
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets foreground color of the text.
    ///</summary>
    property StrokingColor: DNColor read get_StrokingColor write set_StrokingColor;
    ///<summary>
    ///  Gets or sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property Underline: Boolean read get_Underline write set_Underline;
    ///<summary>
    ///  Sets strikeout for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property StrikeOut: Boolean read get_StrikeOut write set_StrikeOut;
    ///<summary>
    ///  Sets background color of the text.
    ///</summary>
    ///<remarks>
    ///  Note that the value is not preserved as a text characteristic within the document.
    ///  The BackgroundColor property getter works for an object in case it was explicitly set previously with BackgroundColor setter for those object.
    ///  The property is used by runtime in context of current generation/modification process.
    ///</remarks>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Sets font style of the text.
    ///</summary>
    property FontStyle: DNFontStyles read get_FontStyle write set_FontStyle;
    ///<summary>
    ///  Gets or sets horizontal alignment for the text.
    ///</summary>
    ///<remarks>
    ///  HorizontalAlignment.None is equal to HorizontalAlignment.Left.
    ///  Note that TextState.HorizontalAlignment property works in new document generation scenarios only.
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
  end;

  TDNTextState = class(TDNGenericImport<DNTextStateClass, DNTextState>) end;

  //-------------namespace: Aspose.Pdf.Text----------------
  DNTextFragmentStateClass = interface(DNTextStateClass)
  ['{2C25C51B-3D4D-5C56-A8C6-72F1D9531C33}']
  { static getter & setter } 

    procedure set_StrikeOut(value: Boolean);

  { constructors } 

    ///<summary>
    ///  Initializes new instance of the <see cref="T:Aspose.Pdf.Text.TextFragmentState" />
    ///  object with specified <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///  This <see cref="T:Aspose.Pdf.Text.TextFragmentState" />
    ///  initialization is not supported.
    ///  TextFragmentState is only available with <see cref="P:Aspose.Pdf.Text.TextFragment.TextState" />
    ///  property.
    ///</summary>
    ///  <param name="fragment">Text fragment object.</param>
    {class} function init(fragment: DNTextFragment): DNTextFragmentState;

  { static fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { static fields } 

    ///<summary>
    ///  You can place this tag in text to declare tabulation.
    ///</summary>
    ///<remarks>
    ///  It has effect only in couple with <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  .
    ///</remarks>
    {class} property TabTag: string read __fakeFieldGet_TabTag;
    ///<summary>
    ///  Default value of tabulation in widths of space character of default font.
    ///</summary>
    {class} property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { static propertys } 

    ///<summary>
    ///  Sets strikeout for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    {class} property StrikeOut: Boolean write set_StrikeOut;
  end;

  ///<summary>
  ///  Represents a text state of a text fragment.
  ///</summary>
  ///<remarks>
  ///  Provides a way to change following properties of the text:
  ///  font (<see cref="P:Aspose.Pdf.Text.TextFragmentState.Font" />
  ///  property)
  ///  font size (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontSize" />
  ///  property)
  ///  font style (<see cref="P:Aspose.Pdf.Text.TextFragmentState.FontStyle" />
  ///  property)
  ///  foreground color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.ForegroundColor" />
  ///  property)
  ///  background color (<see cref="P:Aspose.Pdf.Text.TextFragmentState.BackgroundColor" />
  ///  property)
  ///  Note that changing <see cref="T:Aspose.Pdf.Text.TextFragmentState" />
  ///  properties may change inner <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" />
  ///  collection because TextFragment is an aggregate object
  ///  and it may rearrange internal segments or merge them into single segment.
  ///  If your requirement is to leave the <see cref="P:Aspose.Pdf.Text.TextFragment.Segments" />
  ///  collection unchanged, please change inner segments individually.
  ///</remarks>
  ///<example>
  ///  The example demonstrates how to change text color and font size of the text with <see cref="T:Aspose.Pdf.Text.TextState" />
  ///  object.
  ///<code lang="C#">
  ///  // Open document
  ///  Document doc = new Document(@"D:\Tests\input.pdf");
  ///  // Create TextFragmentAbsorber object to find all "hello world" text occurrences
  ///  TextFragmentAbsorber absorber = new TextFragmentAbsorber("hello world");
  ///  // Accept the absorber for first page
  ///  doc.Pages[1].Accept(absorber);
  ///  // Change foreground color of the first text occurrence
  ///  absorber.TextFragments[1].TextState.ForegroundColor = Color.FromRgb(System.Drawing.Color.Red);
  ///  // Change font size of the first text occurrence
  ///  absorber.TextFragments[1].TextState.FontSize = 15;
  ///  // Save document
  ///  doc.Save(@"D:\Tests\output.pdf");
  ///</code></example><seealso cref="T:Aspose.Pdf.Text.TextFragmentAbsorber" />
  ///<seealso cref="T:Aspose.Pdf.Document" />
  [DNTypeName('Aspose.Pdf.Text.TextFragmentState')]
  DNTextFragmentState = interface(DNTextState)
  ['{62205DBB-B021-3B35-B223-8B61A0CF1652}']
  { getters & setters } 

    function get_CharacterSpacing: Single;
    procedure set_CharacterSpacing(value: Single);
    function get_HorizontalScaling: Single;
    procedure set_HorizontalScaling(value: Single);
    function get_WordSpacing: Single;
    procedure set_WordSpacing(value: Single);
    function get_Invisible: Boolean;
    procedure set_Invisible(value: Boolean);
    function get_RenderingMode: DNTextRenderingMode;
    procedure set_RenderingMode(value: DNTextRenderingMode);
    function get_Subscript: Boolean;
    procedure set_Subscript(value: Boolean);
    function get_Superscript: Boolean;
    procedure set_Superscript(value: Boolean);
    function get_TabStops: DNTabStops;
    function get_LineSpacing: Single;
    procedure set_LineSpacing(value: Single);
    function get_ForegroundColor: DNColor;
    procedure set_ForegroundColor(value: DNColor);
    function get_StrokingColor: DNColor;
    procedure set_StrokingColor(value: DNColor);
    function get_BackgroundColor: DNColor;
    procedure set_BackgroundColor(value: DNColor);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);
    procedure set_StrikeOut(value: Boolean);
    function get_FontStyle: DNFontStyles;
    procedure set_FontStyle(value: DNFontStyles);
    function get_Font: DNFont;
    procedure set_Font(value: DNFont);
    function get_FontSize: Single;
    procedure set_FontSize(value: Single);
    function get_HorizontalAlignment: DNHorizontalAlignment;
    procedure set_HorizontalAlignment(value: DNHorizontalAlignment);
    function get_FormattingOptions: DNTextFormattingOptions;
    procedure set_FormattingOptions(value: DNTextFormattingOptions);
    function get_Rotation: Double;
    procedure set_Rotation(value: Double);
    function get_DrawTextRectangleBorder: Boolean;
    procedure set_DrawTextRectangleBorder(value: Boolean);

  { fields getter & setter } 

   function __fakeFieldGet_TabTag: string;
   function __fakeFieldGet_TabstopDefaultValue: Single;

  { fields } 

    ///<summary>
    ///  You can place this tag in text to declare tabulation.
    ///</summary>
    ///<remarks>
    ///  It has effect only in couple with <see cref="T:Aspose.Pdf.Text.TabStops" />
    ///  .
    ///</remarks>
   property TabTag: string read __fakeFieldGet_TabTag;
    ///<summary>
    ///  Default value of tabulation in widths of space character of default font.
    ///</summary>
   property TabstopDefaultValue: Single read __fakeFieldGet_TabstopDefaultValue;

  { methods } 

    ///<summary>
    ///  Measures the string.
    ///</summary>
    ///  <param name="str">The string.</param>
    ///<returns></returns>
    function MeasureString(str: string): Double;
    ///<summary>
    ///  Applies settings from another textState.
    ///</summary>
    ///<remarks>
    ///  Only those properties will be copied that were changed explicitly.
    ///</remarks>
    ///  <param name="textState">Text state object.</param>
    procedure ApplyChangesFrom(textState: DNTextState);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets character spacing of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    property CharacterSpacing: Single read get_CharacterSpacing write set_CharacterSpacing;
    ///<summary>
    ///  Gets or sets horizontal scaling of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    property HorizontalScaling: Single read get_HorizontalScaling write set_HorizontalScaling;
    ///<summary>
    ///  Gets or sets word spacing of the text.
    ///</summary>
    property WordSpacing: Single read get_WordSpacing write set_WordSpacing;
    ///<summary>
    ///  Gets or sets invisibility of the text.
    ///</summary>
    property Invisible: Boolean read get_Invisible write set_Invisible;
    ///<summary>
    ///  Gets or sets rendering mode of the text.
    ///</summary>
    property RenderingMode: DNTextRenderingMode read get_RenderingMode write set_RenderingMode;
    ///<summary>
    ///  Gets or sets subscript of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    property Subscript: Boolean read get_Subscript write set_Subscript;
    ///<summary>
    ///  Gets or sets superscript of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object.
    ///</summary>
    property Superscript: Boolean read get_Superscript write set_Superscript;
    ///<summary>
    ///  Gets tabstops for the text.
    ///</summary>
    ///<remarks>
    ///  Note that Tabstops property works in new document generation scenarios only.
    ///  Tabstops may be added during <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  initialization. Tabstops must be constructed before the text.
    ///</remarks>
    property TabStops: DNTabStops read get_TabStops;
    ///<summary>
    ///  Gets or sets line spacing of the text.
    ///</summary>
    ///<remarks>
    ///  Note that the value is not preserved as a text characteristic within the document.
    ///  The LineSpacing property getter works for an object in case it was explicitly set previously with LineSpacing setter for those object.
    ///  The property is used by runtime in context of current generation/modification process.
    ///</remarks>
    property LineSpacing: Single read get_LineSpacing write set_LineSpacing;
    ///<summary>
    ///  Gets or sets foreground color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property ForegroundColor: DNColor read get_ForegroundColor write set_ForegroundColor;
    ///<summary>
    ///  Gets or sets color stroking operations of <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  rendering (stroke text, rectangle border)
    ///</summary>
    property StrokingColor: DNColor read get_StrokingColor write set_StrokingColor;
    ///<summary>
    ///  Sets background color of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property BackgroundColor: DNColor read get_BackgroundColor write set_BackgroundColor;
    ///<summary>
    ///  Gets or sets underline for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property Underline: Boolean read get_Underline write set_Underline;
    ///<summary>
    ///  Sets strikeout for the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property StrikeOut: Boolean write set_StrikeOut;
    ///<summary>
    ///  Sets font style of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property FontStyle: DNFontStyles read get_FontStyle write set_FontStyle;
    ///<summary>
    ///  Gets or sets font of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property Font: DNFont read get_Font write set_Font;
    ///<summary>
    ///  Gets or sets font size of the text, represented by the <see cref="T:Aspose.Pdf.Text.TextFragment" />
    ///  object
    ///</summary>
    property FontSize: Single read get_FontSize write set_FontSize;
    ///<summary>
    ///  Gets or sets horizontal alignment for the text.
    ///</summary>
    ///<remarks>
    ///  HorizontalAlignment.None is equal to HorizontalAlignment.Left.
    ///  Note that TextFragmentState.VerticalAlignment property works in new document generation scenarios only.
    ///</remarks>
    property HorizontalAlignment: DNHorizontalAlignment read get_HorizontalAlignment write set_HorizontalAlignment;
    ///<summary>
    ///  Gets or sets formatting options.
    ///  Setting of the options will be effective in generator scenarios only.
    ///</summary>
    property FormattingOptions: DNTextFormattingOptions read get_FormattingOptions write set_FormattingOptions;
    ///<summary>
    ///  Gets or sets rotation angle in degrees.
    ///</summary>
    property Rotation: Double read get_Rotation write set_Rotation;
    property DrawTextRectangleBorder: Boolean read get_DrawTextRectangleBorder write set_DrawTextRectangleBorder;
  end;

  TDNTextFragmentState = class(TDNGenericImport<DNTextFragmentStateClass, DNTextFragmentState>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTimestampSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{87545BD2-5231-556E-A329-0D33C03FC941}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.TimestampSettings" />
    ///  class.
    ///  <param name="serverUrl">The timestamp server url.</param>
    ///  <param name="basicAuthCredentials">The basic authentication credentials, username and password are combined into a string "username:password".</param>
    ///</summary>
    {class} function init(serverUrl: string; basicAuthCredentials: string): DNTimestampSettings;

  end;

  ///<summary>
  ///  Represents the ocsp settings using during signing process.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TimestampSettings')]
  DNTimestampSettings = interface(DDN.mscorlib.DNObject)
  ['{83DB3DD9-0A7F-3E23-9B49-ECE41F8F0A93}']
  { getters & setters } 

    function get_ServerUrl: string;
    procedure set_ServerUrl(value: string);
    function get_BasicAuthCredentials: string;
    procedure set_BasicAuthCredentials(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets/sets the timestamp server url.
    ///</summary>
    property ServerUrl: string read get_ServerUrl write set_ServerUrl;
    ///<summary>
    ///  Gets/sets the basic authentication credentials, Username and password are combined into a string "username:password".
    ///</summary>
    property BasicAuthCredentials: string read get_BasicAuthCredentials write set_BasicAuthCredentials;
  end;

  TDNTimestampSettings = class(TDNGenericImport<DNTimestampSettingsClass, DNTimestampSettings>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNTocInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8BF14456-B93F-5399-B28A-6D247296F8FB}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.TocInfo" />
    ///  class.
    ///</summary>
    {class} function init: DNTocInfo;

  end;

  ///<summary>
  ///  Represents table of contents info.
  ///</summary>
  [DNTypeName('Aspose.Pdf.TocInfo')]
  DNTocInfo = interface(DDN.mscorlib.DNObject)
  ['{B8A1F86F-041E-3D24-AC33-139272924F49}']
  { getters & setters } 

    function get_ColumnInfo: DNColumnInfo;
    procedure set_ColumnInfo(value: DNColumnInfo);
    function get_FormatArray: TArray<DNLevelFormat>;
    procedure set_FormatArray(value: TArray<DNLevelFormat>);
    function get_FormatArrayLength: Int32;
    procedure set_FormatArrayLength(value: Int32);
    function get_Title: DNTextFragment;
    procedure set_Title(value: DNTextFragment);
    function get_IsCountTocPages: Boolean;
    procedure set_IsCountTocPages(value: Boolean);
    function get_PageNumbersPrefix: string;
    procedure set_PageNumbersPrefix(value: string);
    function get_IsShowPageNumbers: Boolean;
    procedure set_IsShowPageNumbers(value: Boolean);
    function get_LineDash: DNTabLeaderType;
    procedure set_LineDash(value: DNTabLeaderType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets column info.
    ///</summary>
    property ColumnInfo: DNColumnInfo read get_ColumnInfo write set_ColumnInfo;
    ///<summary>
    ///  Gets or sets format array for table of contents.
    ///</summary>
    property FormatArray: TArray<DNLevelFormat> read get_FormatArray write set_FormatArray;
    ///<summary>
    ///  Gets or sets format array length
    ///</summary>
    property FormatArrayLength: Int32 read get_FormatArrayLength write set_FormatArrayLength;
    ///<summary>
    ///  Gets or sets table of contents title.
    ///</summary>
    property Title: DNTextFragment read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets is count or passed toc pages.
    ///</summary>
    property IsCountTocPages: Boolean read get_IsCountTocPages write set_IsCountTocPages;
    property PageNumbersPrefix: string read get_PageNumbersPrefix write set_PageNumbersPrefix;
    property IsShowPageNumbers: Boolean read get_IsShowPageNumbers write set_IsShowPageNumbers;
    ///<summary>
    ///  Gets or sets TOC line dash.
    ///</summary>
    property LineDash: DNTabLeaderType read get_LineDash write set_LineDash;
  end;

  TDNTocInfo = class(TDNGenericImport<DNTocInfoClass, DNTocInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnifiedSaveOptions_ProgressEventHandlerInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C607C129-BD83-5FDF-AFF3-CE6228874AC7}']
  end;

  ///<summary>
  ///  This class represents information about conversion progress
  ///  that can be used in external applicatuion to show conversion progress to end user
  ///</summary>
  [DNTypeName('Aspose.Pdf.UnifiedSaveOptions+ProgressEventHandlerInfo')]
  DNUnifiedSaveOptions_ProgressEventHandlerInfo = interface(DDN.mscorlib.DNObject)
  ['{C4F9D72D-7E1B-3261-B70B-765FE66F6F1A}']
  { fields getter & setter } 

   function __fakeFieldGet_EventType: DNProgressEventType;
   procedure __fakeFieldSet_EventType(value: DNProgressEventType);
   function __fakeFieldGet_Value: Int32;
   procedure __fakeFieldSet_Value(value: Int32);
   function __fakeFieldGet_MaxValue: Int32;
   procedure __fakeFieldSet_MaxValue(value: Int32);

  { fields } 

    ///<summary>
    ///  Type of progress event that occured
    ///</summary>
   property EventType: DNProgressEventType read __fakeFieldGet_EventType write __fakeFieldSet_EventType;
    ///<summary>
    ///  current value of progress value
    ///</summary>
   property Value: Int32 read __fakeFieldGet_Value write __fakeFieldSet_Value;
    ///<summary>
    ///  maximum possible value of progress value
    ///</summary>
   property MaxValue: Int32 read __fakeFieldGet_MaxValue write __fakeFieldSet_MaxValue;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUnifiedSaveOptions_ProgressEventHandlerInfo = class(TDNGenericImport<DNUnifiedSaveOptions_ProgressEventHandlerInfoClass, DNUnifiedSaveOptions_ProgressEventHandlerInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWarningInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ECB4DD55-F407-54CD-9679-C6F84C5D1C70}']
  { constructors } 

    ///<summary>
    ///  Constructs instance for gathering information.
    ///</summary>
    ///  <param name="type">
    ///  the warning type to set
    ///</param>
    ///  <param name="message">
    ///  the warning message to set
    ///</param>
    {class} function init(&type: DNWarningType; message: string): DNWarningInfo;

  end;

  ///<summary>
  ///  Immutable object for encapsulating warning information.
  ///</summary>
  [DNTypeName('Aspose.Pdf.WarningInfo')]
  DNWarningInfo = interface(DDN.mscorlib.DNObject)
  ['{A2A770FC-6A0A-30E2-BB04-05BCA86B6A6D}']
  { getters & setters } 

    function get_WarningMessage: string;
    function get_WarningTypeProperty: DNWarningType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Returns string representation of warning message.
    ///</summary>
    ///<returns>
    ///  the warning message
    ///</returns>
    property WarningMessage: string read get_WarningMessage;
    ///<summary>
    ///  Returns warning type.
    ///</summary>
    ///<returns>
    ///  the warning type
    ///</returns>
    property WarningTypeProperty: DNWarningType read get_WarningTypeProperty;
  end;

  TDNWarningInfo = class(TDNGenericImport<DNWarningInfoClass, DNWarningInfo>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNWatermarkClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AD956318-A1BB-538B-B01E-4334A649F6CF}']
  { constructors } 

    ///<summary>
    ///  Initializes a watermark object with an image and it's position on a page.
    ///</summary>
    ///  <param name="image">Image of the watermark. </param>
    ///  <param name="rect">Position of the watermark on the page.</param>
    {class} function init(image: DDN.Aspose.Common.DNImage; rect: DNRectangle): DNWatermark; overload;
    ///<summary>
    ///  Initializes a watermark object with an image.
    ///</summary>
    ///  <param name="image">Image of the watermark.</param>
    {class} function init(image: DDN.Aspose.Common.DNImage): DNWatermark; overload;

  end;

  ///<summary>
  ///  Represents a watermark of the page.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Watermark')]
  DNWatermark = interface(DDN.mscorlib.DNObject)
  ['{6E0DF3EA-FED0-3EEF-ACD3-40453E346B54}']
  { getters & setters } 

    function get_Image: DDN.Aspose.Common.DNImage;
    function get_Position: DNRectangle;
    function get_Available: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets an image of the watermark.
    ///</summary>
    property Image: DDN.Aspose.Common.DNImage read get_Image;
    ///<summary>
    ///  Gets a position of the watermark's image on a page.
    ///</summary>
    property Position: DNRectangle read get_Position;
    ///<summary>
    ///  Gets a flag the watermark is present.
    ///</summary>
    property Available: Boolean read get_Available;
  end;

  TDNWatermark = class(TDNGenericImport<DNWatermarkClass, DNWatermark>) end;

  //-------------namespace: Aspose.Pdf.XfaConverter----------------
  DNXfaParserOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C22ADC94-02F6-5948-B1EF-13AB41CE0DA4}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.XfaConverter.XfaParserOptions" />
    ///  class.
    ///</summary>
    ///  <param name="pageSize">Size of the page.</param>
    {class} function init(pageSize: DDN.Aspose.Common.DNSizeF): DNXfaParserOptions;

  end;

  ///<summary>
  ///  class to handle related data incapsulation
  ///</summary>
  [DNTypeName('Aspose.Pdf.XfaConverter.XfaParserOptions')]
  DNXfaParserOptions = interface(DDN.mscorlib.DNObject)
  ['{44B11397-C3AD-3C92-8AEE-FB7807C7D5FA}']
  { getters & setters } 

    function get_PageSize: DDN.Aspose.Common.DNSizeF;
    procedure set_PageSize(value: DDN.Aspose.Common.DNSizeF);
    function get_Signed: Boolean;
    procedure set_Signed(value: Boolean);
    function get_EmulateRequierdGroups: Boolean;
    procedure set_EmulateRequierdGroups(value: Boolean);
    function get_BasePath: DDN.Aspose.Common.DNUri;
    procedure set_BasePath(value: DDN.Aspose.Common.DNUri);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets the size of the page.
    ///</summary>
    ///<value>
    ///  The size of the page.
    ///</value>
    property PageSize: DDN.Aspose.Common.DNSizeF read get_PageSize write set_PageSize;
    ///<summary>
    ///  If this property is true then document will be converted with using of xfa form stream (if it exists).
    ///  If it is false then xfa form stream will be ignored.
    ///  This property was inrtoduced because it's not clear how to calculate check sum that used for checking sygnature.
    ///</summary>
    property Signed: Boolean read get_Signed write set_Signed;
    ///<summary>
    ///  If this property is true then additional red rectangles will be drawn for required Xfa "excluded groups"
    ///  This property was introduced because absences of analogues of excluded groups during conversion Xfa representation of forms
    ///  to standard.
    ///  It is false by default.
    ///</summary>
    property EmulateRequierdGroups: Boolean read get_EmulateRequierdGroups write set_EmulateRequierdGroups;
    ///<summary>
    ///  Gets or sets the base path.
    ///</summary>
    ///<value>
    ///  The base path.
    ///</value>
    property BasePath: DDN.Aspose.Common.DNUri read get_BasePath write set_BasePath;
  end;

  TDNXfaParserOptions = class(TDNGenericImport<DNXfaParserOptionsClass, DNXfaParserOptions>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXFormClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4884EB9D-CD54-5805-8A13-F7896821E8B2}']
  { static methods } 

    ///<summary>
    ///  Creates XForm which duplicates contents of the page.
    ///</summary>
    ///  <param name="source">Source page</param>
    ///  <param name="document">Document where new XForm will be added.</param>
    ///<returns>Newly created XForm.</returns>
    {class} function CreateNewForm(source: DNPage; document: DNDocument): DNXForm;

  end;

  ///<summary>
  ///  Class represent XForm
  ///</summary>
  [DNTypeName('Aspose.Pdf.XForm')]
  DNXForm = interface(DDN.mscorlib.DNObject)
  ['{B60B3507-ECAE-385D-A8B5-2DE21FCCF5F8}']
  { getters & setters } 

    function get_BBox: DNRectangle;
    procedure set_BBox(value: DNRectangle);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Contents: DNOperatorCollection;
    function get_Opi: DNOpi;
    function get_Matrix: DNMatrix;
    procedure set_Matrix(value: DNMatrix);
    function get_Resources: DNResources;
    function get_Rectangle: DNRectangle;

  { methods } 

    ///<summary>
    ///  Returns resources of Form X-Object
    ///</summary>
    ///  <param name="allowCreate">If For does not have resources and allowCreate is true, Resources will be automatically created for the form.</param>
    ///<returns></returns>
    function GetResources(allowCreate: Boolean): DNResources; overload;
    function GetResources: DNResources; overload;
    ///<summary>
    ///  Clears cached data
    ///</summary>
    procedure FreeMemory;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets form bounding box.
    ///</summary>
    property BBox: DNRectangle read get_BBox write set_BBox;
    ///<summary>
    ///  Gets or sets form name. Form name is name which used to reference form in XObejct ductionary in page resources.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Gets operators of the form.
    ///</summary>
    property Contents: DNOperatorCollection read get_Contents;
    ///<summary>
    ///  Gets The Open Prepress Interface (OPI).
    ///</summary>
    property Opi: DNOpi read get_Opi;
    ///<summary>
    ///  Gets or sets matrix of the form.
    ///</summary>
    property Matrix: DNMatrix read get_Matrix write set_Matrix;
    ///<summary>
    ///  Gets Form XObject resources.
    ///</summary>
    property Resources: DNResources read get_Resources;
    ///<summary>
    ///  Gets or sets rectangel of the form.
    ///</summary>
    property Rectangle: DNRectangle read get_Rectangle;
  end;

  TDNXForm = class(TDNGenericImport<DNXFormClass, DNXForm>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXFormCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E82B73CF-C08F-5D9F-A3E8-6868BA6D123F}']
  end;

  ///<summary>
  ///  Class represents collection of XFormCollection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XFormCollection')]
  DNXFormCollection = interface(DDN.mscorlib.DNICollection<DNXForm>)
  ['{D11B006C-FA64-3C89-8218-BAFA1B11BE2D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNXForm; overload;
    function get_Item(name: string): DNXForm; overload;

  { methods } 

    ///<summary>
    ///  Delete XForm from collectin
    ///</summary>
    ///  <param name="index">Index of XForm which must be deleted</param>
    procedure Delete(index: Int32); overload;
    ///<summary>
    ///  Deletes all XForms from collection.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Copies XFormCollection into collection.
    ///</summary>
    ///  <param name="array">Array of XForm to be copied</param>
    ///  <param name="index">Index where XFormCollection will be copied</param>
    procedure CopyTo(&array: TArray<DNXForm>; index: Int32);
    ///<summary>
    ///  Retunrs collection enumerator.
    ///</summary>
    ///<returns>Enumerator for collection</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXForm>;
    ///<summary>
    ///  Deletes XForm from collection by form name.
    ///</summary>
    ///  <param name="name">Name of XForm to be deleted.</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNXForm): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets count of XForms in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true if object is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNXForm read get_Item; default;
    property Item[name: string]: DNXForm read get_Item; default;
  end;

  TDNXFormCollection = class(TDNGenericImport<DNXFormCollectionClass, DNXFormCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXImageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{01F15CF1-E316-5260-9385-122010B187BC}']
  { static methods } 

    {class} function DetectColorType(bmp: DDN.Aspose.Common.DNBitmap): DNColorType;

  end;

  ///<summary>
  ///  Class representing image X-Object.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XImage')]
  DNXImage = interface(DDN.mscorlib.DNObject)
  ['{C7212F00-37E2-3FE0-9D8D-55A37014D281}']
  { getters & setters } 

    function get_ContainsTransparency: Boolean;
    function get_Grayscaled: DDN.Aspose.Common.DNImage;
    function get_FilterType: DNImageFilterType;
    function get_Width: Int32;
    function get_Height: Int32;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Metadata: DNMetadata;

  { methods } 

    ///<summary>
    ///  Renames image and replaces all references to the image with the new name
    ///</summary>
    ///  <param name="name">New image name. </param>
    procedure Rename(name: string);
    ///<summary>
    ///  Saves image data into stream as JPEG image.
    ///</summary>
    ///  <param name="stream">Stream where image data will be saved.</param>
    procedure Save(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Saves image into stream with requested format.
    ///</summary>
    ///  <param name="stream">Stream where image will be saved</param>
    ///  <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///</param>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat); overload;
    ///<summary>
    ///  Saves image data into stream as JPEG image with specified resolution.
    ///</summary>
    ///  <param name="stream">Stream where image data will be saved.</param>
    ///  <param name="resolution">Image resolution</param>
    procedure Save(stream: DDN.mscorlib.DNStream; resolution: Int32); overload;
    ///<summary>
    ///  Saves image into stream with requested format with specified resolution.
    ///</summary>
    ///  <param name="stream">Stream where image will be saved</param>
    ///  <param name="format">Format which will be used for image enconding. <see cref="T:System.Drawing.Imaging.ImageFormat" />
    ///</param>
    ///  <param name="resolution">Image resolution</param>
    procedure Save(stream: DDN.mscorlib.DNStream; format: DDN.Aspose.Common.DNImageFormat; resolution: Int32); overload;
    ///<summary>
    ///  Returns color type of image.
    ///</summary>
    ///<returns>The color type value.</returns>
    function GetColorType: DNColorType;
    ///<summary>
    ///  Returns true if both images references to the same object.
    ///</summary>
    ///  <param name="image">Image to be compared with "this" image.</param>
    ///<returns>Boolean value which is true if images references to the same object. </returns>
    function IsTheSameObject(image: DNXImage): Boolean;
    ///<summary>
    ///  Returns name of the image in ints collection.
    ///</summary>
    ///<returns>Image key (name).</returns>
    function GetNameInCollection: string;
    ///<summary>
    ///  Returns the original image stream.
    ///</summary>
    ///<returns>The original image stream.</returns>
    function ToStream: DDN.mscorlib.DNStream;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  If the image contains transparancy than return true; otherwise, false.
    ///</summary>
    property ContainsTransparency: Boolean read get_ContainsTransparency;
    ///<summary>
    ///  Gets grayscaled version of image.
    ///</summary>
    property Grayscaled: DDN.Aspose.Common.DNImage read get_Grayscaled;
    ///<summary>
    ///  Gets image filter type.
    ///</summary>
    property FilterType: DNImageFilterType read get_FilterType;
    ///<summary>
    ///  Gets width of the image.
    ///</summary>
    property Width: Int32 read get_Width;
    ///<summary>
    ///  Gets height of the image.
    ///</summary>
    property Height: Int32 read get_Height;
    ///<summary>
    ///  Gets or sets image name. Please note that if you change name of the image which has references in page contents, document may became incorrect. Please use XImage.Rename method in this case.
    ///</summary>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  Metadata of the image.
    ///</summary>
    property Metadata: DNMetadata read get_Metadata;
  end;

  TDNXImage = class(TDNGenericImport<DNXImageClass, DNXImage>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXImageCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3911A4EF-77F6-515F-8B08-68A607F26235}']
  end;

  ///<summary>
  ///  Class representing XImage collection.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XImageCollection')]
  DNXImageCollection = interface(DDN.mscorlib.DNICollection<DNXImage>)
  ['{58CEB66A-780F-3CD0-9C27-1161D25FD6E5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Names: TArray<string>;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNXImage; overload;
    function get_Item(name: string): DNXImage; overload;

  { methods } 

    ///<summary>
    ///  Adds new image to Image list. This method adds image as reference to the same PdfObject (which allows to decrease file size)
    ///</summary>
    ///  <param name="image">XImage to be added.</param>
    ///<returns>Name of the added image. </returns>
    function Add(image: DNXImage): string; overload;
    ///<summary>
    ///  Adds entity to the end of the collection, so entity can be accessed by the last index.
    ///</summary>
    ///  <param name="image">Stream containing image data (in JPEG format).</param>
    ///<returns>Name of the added image.</returns>
    function Add(image: DDN.mscorlib.DNStream): string; overload;
    ///<summary>
    ///  Adds entity to the end of the collection, so entity can be accessed by the last index.
    ///</summary>
    ///  <param name="image">Stream containing image data.</param>
    ///  <param name="filterType">The image filter type.</param>
    procedure Add(image: DDN.mscorlib.DNStream; filterType: DNImageFilterType); overload;
    ///<summary>
    ///  Adds entity to the end of the collection, so entity can be accessed by the last index.
    ///</summary>
    ///  <param name="image">Stream containing image data (in JPEG format).</param>
    ///  <param name="quality">JPEG quality.</param>
    procedure Add(image: DDN.mscorlib.DNStream; quality: Int32); overload;
    ///<summary>
    ///  Removes index from collection by index.
    ///</summary>
    ///  <param name="index">Image index.</param>
    procedure Delete(index: Int32); overload;
    procedure Delete(index: Int32; action: DNImageDeleteAction); overload;
    ///<summary>
    ///  Removes item from collection by name.
    ///</summary>
    ///  <param name="name">Name of image which must to be deleted.</param>
    procedure Delete(name: string); overload;
    ///<summary>
    ///  Removes item from collection by name.
    ///</summary>
    ///  <param name="name">Name of image which must to be deleted.</param>
    ///  <param name="action">Action to be performed with image object.</param>
    procedure Delete(name: string; action: DNImageDeleteAction); overload;
    ///<summary>
    ///  Deletes images from collection.
    ///</summary>
    procedure Delete; overload;
    ///<summary>
    ///  Returns collection enumerator.
    ///</summary>
    ///<returns>Enumerator of collection</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNXImage>;
    ///<summary>
    ///  Copies array of images into collection.
    ///</summary>
    ///  <param name="array">Array to be copied.</param>
    ///  <param name="index">Index where images will be copied into collection.</param>
    procedure CopyTo(&array: TArray<DNXImage>; index: Int32);
    ///<summary>
    ///  Replace image in collection with another image.
    ///</summary>
    ///  <param name="index">Index of collection item which will be replaced.</param>
    ///  <param name="stream">Stream containing image data (in JPEG format).</param>
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Replace image in collection with another image.
    ///</summary>
    ///  <param name="index">Index of collection item which will be replaced.</param>
    ///  <param name="stream">Stream containing image data (in JPEG format).</param>
    ///  <param name="quality">Quality of JPEG compression, in percent (valid vaues are 0..100).</param>
    ///  <param name="isBlackAndWhite">If true, image is compressed with CCITT compression method which provides better compression for black nad white image. May be used only for black and white images.</param>
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream; quality: Int32; isBlackAndWhite: Boolean); overload;
    ///<summary>
    ///  Replace image in collection with another image.
    ///</summary>
    ///  <param name="index">Index of collection item which will be replaced.</param>
    ///  <param name="stream">Stream containing image data (in JPEG format).</param>
    ///  <param name="quality">JPEG quality.</param>
    procedure Replace(index: Int32; stream: DDN.mscorlib.DNStream; quality: Int32); overload;
    ///<summary>
    ///  Returns name in images list which is key of the given image.
    ///</summary>
    ///  <param name="image">Image to search.</param>
    ///<returns>Name (key) of the found image; null if images was not found.</returns>
    function GetImageName(image: DNXImage): string;
    ///<summary>
    ///  Determines whether the collection contains a specific value.
    ///</summary>
    ///  <param name="item">The object to locate in the collection</param>
    ///<returns>true if item is found in the collection; otherwise, false.</returns>
    function &Contains(item: DNXImage): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Count of images in collection.
    ///</summary>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  Returns true if object is synchronized.
    ///</summary>
    property IsSynchronized: Boolean read get_IsSynchronized;
    ///<summary>
    ///  Returns synchronization object.
    ///</summary>
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    ///<summary>
    ///  Gets array of image names.
    ///</summary>
    property Names: TArray<string> read get_Names;
    ///<summary>
    ///  Gets a value indicating whether the collection is read-only.
    ///</summary>
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNXImage read get_Item; default;
    property Item[name: string]: DNXImage read get_Item; default;
  end;

  TDNXImageCollection = class(TDNGenericImport<DNXImageCollectionClass, DNXImageCollection>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpFieldClass = interface(DDN.mscorlib.DNObjectClass)
  ['{81CDB915-AC81-53C8-AE20-4AB20EEA68CE}']
  { static getter & setter } 

    {class} function get_Empty: DNXmpField;
    {class} function get_Lang: DNXmpField;

  { static propertys } 

    ///<summary>
    ///  Gets an Empty xmp field.
    ///</summary>
    {class} property Empty: DNXmpField read get_Empty;
    ///<summary>
    ///  Gets xml:lang qualifier.
    ///</summary>
    {class} property Lang: DNXmpField read get_Lang;
  end;

  ///<summary>
  ///  Represents XMP field.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpField')]
  DNXmpField = interface(DDN.mscorlib.DNObject)
  ['{7A4329B5-D4F7-3965-B211-9986AE27A5BF}']
  { getters & setters } 

    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NamespaceUri: string;
    procedure set_NamespaceUri(value: string);
    function get_LocalName: string;
    procedure set_LocalName(value: string);
    function get_Name: string;
    function get_Value: DNXmpValue;
    function get_FieldType: DNXmpFieldType;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  Indicates whether this instance and a specified object are equal.
    ///</summary>
    ///<returns>
    ///  true if obj and this instance are the same type and represent the same value; otherwise, false.
    ///</returns>
    ///  <param name="obj">Another object to compare to. </param>
    ///<filterpriority>2</filterpriority>
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  Returns a hash code for this instance.
    ///</summary>
    ///<returns>
    ///  A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  Gets value as a structure
    ///</summary>
    ///<returns></returns>
    function ToStructure: TArray<DNXmpField>;
    ///<summary>
    ///  Gets value as an array.
    ///</summary>
    ///<returns></returns>
    function ToArray: TArray<DNXmpValue>;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the prefix.
    ///</summary>
    ///<value>The prefix.</value>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  Gets the namespace URI.
    ///</summary>
    ///<value>The namespace URI.</value>
    property NamespaceUri: string read get_NamespaceUri write set_NamespaceUri;
    ///<summary>
    ///  Gets or sets the name of the local.
    ///</summary>
    ///<value>The name of the local.</value>
    property LocalName: string read get_LocalName write set_LocalName;
    ///<summary>
    ///  Gets the name.
    ///</summary>
    ///<value>The name.</value>
    property Name: string read get_Name;
    ///<summary>
    ///  Gets the value.
    ///</summary>
    ///<value>The value.</value>
    property Value: DNXmpValue read get_Value;
    ///<summary>
    ///  Gets the type of the field.
    ///</summary>
    ///<value>The type of the field.</value>
    property FieldType: DNXmpFieldType read get_FieldType;
    ///<summary>
    ///  Gets a value indicating whether this instance is empty.
    ///</summary>
    ///<value><c>true</c> if this instance is empty; otherwise, <c>false</c>.</value>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmpField = class(TDNGenericImport<DNXmpFieldClass, DNXmpField>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{01DE5DC7-C6D5-5690-A0FA-CD58A168F91B}']
  end;

  ///<summary>
  ///  Represents the base class for field, property, value type instances.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionObject')]
  DNXmpPdfAExtensionObject = interface(DDN.mscorlib.DNObject)
  ['{DA6429F5-D8BB-3DCE-B491-F53BC40AE033}']
  { getters & setters } 

    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the description.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  Gets or sets the value.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionObject = class(TDNGenericImport<DNXmpPdfAExtensionObjectClass, DNXmpPdfAExtensionObject>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionFieldClass = interface(DNXmpPdfAExtensionObjectClass)
  ['{A5C04197-E988-5DCE-81D9-A9A7273A90BC}']
  { constructors } 

    ///<summary>
    ///  Initializes object.
    ///</summary>
    ///  <param name="name">The field name.</param>
    ///  <param name="value">The field value.</param>
    ///  <param name="valueType">The field value type.</param>
    ///  <param name="description">The field description.</param>
    {class} function init(name: string; value: string; valueType: string; description: string): DNXmpPdfAExtensionField;

  end;

  ///<summary>
  ///  This schema describes a field in a structured type. It is very similar to the PDF/A Property Value Type
  ///  schema, but defines a field in a structure instead of a property.
  ///  Schema namespace URI: http://www.aiim.org/pdfa/ns/field#
  ///  Required schema namespace prefix: pdfaField.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionField')]
  DNXmpPdfAExtensionField = interface(DNXmpPdfAExtensionObject)
  ['{BF196ACC-739D-3880-A6EF-D2B4EAD8C590}']
  { getters & setters } 

    function get_Name: string;
    function get_ValueType: string;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Field name. Field names must be valid XML element names.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Field value type, drawn from XMP Specification 2004, or an embedded PDF/A value type extension
    ///  schema. Predefined XMP type names or names of custom types.
    ///</summary>
    property ValueType: string read get_ValueType;
    ///<summary>
    ///  Gets the description.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  Gets or sets the value.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionField = class(TDNGenericImport<DNXmpPdfAExtensionFieldClass, DNXmpPdfAExtensionField>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionPropertyClass = interface(DNXmpPdfAExtensionFieldClass)
  ['{1A30C86D-9988-5E35-A645-9DC8AC35D79B}']
  { constructors } 

    ///<summary>
    ///  Initializes new object.
    ///</summary>
    ///  <param name="name">The property name.</param>
    ///  <param name="value">The property value.</param>
    ///  <param name="valueType">The property value type.</param>
    ///  <param name="category">The property category.</param>
    ///  <param name="description">The property description.</param>
    {class} function init(name: string; value: string; valueType: string; category: DNXmpPdfAExtensionCategoryType; description: string): DNXmpPdfAExtensionProperty;

  end;

  ///<summary>
  ///  Describes a single property. Schema namespace URI: http://www.aiim.org/pdfa/ns/property#
  ///  Required schema namespace prefix: pdfaProperty
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionProperty')]
  DNXmpPdfAExtensionProperty = interface(DNXmpPdfAExtensionField)
  ['{DE1A9211-F799-3EFD-A300-0C96E6A5D692}']
  { getters & setters } 

    function get_Category: DNXmpPdfAExtensionCategoryType;
    function get_Name: string;
    function get_ValueType: string;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the property category.
    ///</summary>
    property Category: DNXmpPdfAExtensionCategoryType read get_Category;
    ///<summary>
    ///  Field name. Field names must be valid XML element names.
    ///</summary>
    property Name: string read get_Name;
    ///<summary>
    ///  Field value type, drawn from XMP Specification 2004, or an embedded PDF/A value type extension
    ///  schema. Predefined XMP type names or names of custom types.
    ///</summary>
    property ValueType: string read get_ValueType;
    property Description: string read get_Description;
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionProperty = class(TDNGenericImport<DNXmpPdfAExtensionPropertyClass, DNXmpPdfAExtensionProperty>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionValueTypeClass = interface(DNXmpPdfAExtensionObjectClass)
  ['{953376F1-680A-5F0B-AF09-8233E127FEAE}']
  { constructors } 

    ///<summary>
    ///  Initializes new object.
    ///</summary>
    ///  <param name="type">The value type.</param>
    ///  <param name="namespaceUri">The namespace URI.</param>
    ///  <param name="prefix">The prefix.</param>
    ///  <param name="description">The description.</param>
    {class} function init(&type: string; namespaceUri: string; prefix: string; description: string): DNXmpPdfAExtensionValueType;

  end;

  ///<summary>
  ///  The PDF/A ValueType schema is required for all property value types which are not defined in the XMP 2004 specification, i.e. for value types outside of the following list:
  ///  - Array types (these are container types which may contain one or more fields): Alt, Bag, Seq
  ///  - Basic value types: Boolean, (open and closed) Choice, Date, Dimensions, Integer, Lang Alt, Locale, MIMEType, ProperName, Real, Text, Thumbnail, URI, URL, XPath
  ///  - Media Management value types: AgentName, RenditionClass, ResourceEvent, ResourceRef, Version
  ///  - Basic Job/Workflow value type: Job
  ///  - EXIF schema value types: Flash, CFAPattern, DeviceSettings, GPSCoordinate, OECF/SFR, Rational
  ///  Schema namespace URI: http://www.aiim.org/pdfa/ns/type#
  ///  Required schema namespace prefix: pdfaType
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionValueType')]
  DNXmpPdfAExtensionValueType = interface(DNXmpPdfAExtensionObject)
  ['{39F9126D-2F78-3DD7-B909-67BB88AD30C1}']
  { getters & setters } 

    function get_Type: string;
    function get_NamespaceUri: string;
    function get_Prefix: string;
    function get_Fields: DDN.mscorlib.DNIList<DNXmpPdfAExtensionField>;
    function get_Description: string;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    ///<summary>
    ///  Add new field.
    ///</summary>
    ///  <param name="field">The field to add.</param>
    procedure Add(field: DNXmpPdfAExtensionField);
    ///<summary>
    ///  Adds the range of fields.
    ///</summary>
    ///  <param name="fields">The fields to add.</param>
    procedure AddRange(fields: TArray<DNXmpPdfAExtensionField>);
    ///<summary>
    ///  Removes the field from the list of fields.
    ///</summary>
    ///  <param name="field">The field to remove.</param>
    procedure Remove(field: DNXmpPdfAExtensionField);
    ///<summary>
    ///  Clears all fields.
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the value type.
    ///</summary>
    property &Type: string read get_Type;
    ///<summary>
    ///  Gets the namespace URI.
    ///</summary>
    property NamespaceUri: string read get_NamespaceUri;
    ///<summary>
    ///  Gets the prefix.
    ///</summary>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  Gets the list of fields.
    ///</summary>
    property Fields: DDN.mscorlib.DNIList<DNXmpPdfAExtensionField> read get_Fields;
    ///<summary>
    ///  Gets the description.
    ///</summary>
    property Description: string read get_Description;
    ///<summary>
    ///  Gets or sets the value.
    ///</summary>
    property Value: string read get_Value write set_Value;
  end;

  TDNXmpPdfAExtensionValueType = class(TDNGenericImport<DNXmpPdfAExtensionValueTypeClass, DNXmpPdfAExtensionValueType>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionSchemaClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02D924C3-8612-53BA-89A9-C74719BD2034}']
  { constructors } 

    ///<summary>
    ///  Initializes new object.
    ///</summary>
    ///  <param name="description">The schema description.</param>
    {class} function init(description: DNXmpPdfAExtensionSchemaDescription): DNXmpPdfAExtensionSchema;

  { static fields getter & setter } 

   function __fakeFieldGet_DefaultExtensionNamespacePrefix: string;
   function __fakeFieldGet_DefaultExtensionNamespaceUri: string;
   function __fakeFieldGet_DefaultSchemaNamespacePrefix: string;
   function __fakeFieldGet_DefaultSchemaNamespaceUri: string;
   function __fakeFieldGet_DefaultPropertyNamespacePrefix: string;
   function __fakeFieldGet_DefaultPropertyNamespaceUri: string;
   function __fakeFieldGet_DefaultValueTypeNamespacePrefix: string;
   function __fakeFieldGet_DefaultValueNamespaceUri: string;
   function __fakeFieldGet_DefaultFieldNamespacePrefix: string;
   function __fakeFieldGet_DefaultFieldNamespaceUri: string;
   function __fakeFieldGet_RdfPrefix: string;
   function __fakeFieldGet_RdfNamespaceURI: string;

  { static fields } 

    ///<summary>
    ///  Default extension namespace prefix.
    ///</summary>
    {class} property DefaultExtensionNamespacePrefix: string read __fakeFieldGet_DefaultExtensionNamespacePrefix;
    ///<summary>
    ///  Default extension namespace uri.
    ///</summary>
    {class} property DefaultExtensionNamespaceUri: string read __fakeFieldGet_DefaultExtensionNamespaceUri;
    ///<summary>
    ///  Default schema namespace prefix.
    ///</summary>
    {class} property DefaultSchemaNamespacePrefix: string read __fakeFieldGet_DefaultSchemaNamespacePrefix;
    ///<summary>
    ///  Default schema namespace uri.
    ///</summary>
    {class} property DefaultSchemaNamespaceUri: string read __fakeFieldGet_DefaultSchemaNamespaceUri;
    ///<summary>
    ///  Default property namespace prefix.
    ///</summary>
    {class} property DefaultPropertyNamespacePrefix: string read __fakeFieldGet_DefaultPropertyNamespacePrefix;
    ///<summary>
    ///  Default property namespace uri.
    ///</summary>
    {class} property DefaultPropertyNamespaceUri: string read __fakeFieldGet_DefaultPropertyNamespaceUri;
    ///<summary>
    ///  Default valie type namespace prefix.
    ///</summary>
    {class} property DefaultValueTypeNamespacePrefix: string read __fakeFieldGet_DefaultValueTypeNamespacePrefix;
    ///<summary>
    ///  Default value namespace uri.
    ///</summary>
    {class} property DefaultValueNamespaceUri: string read __fakeFieldGet_DefaultValueNamespaceUri;
    ///<summary>
    ///  Default field namespace prefix.
    ///</summary>
    {class} property DefaultFieldNamespacePrefix: string read __fakeFieldGet_DefaultFieldNamespacePrefix;
    ///<summary>
    ///  Default extension namespace uri.
    ///</summary>
    {class} property DefaultFieldNamespaceUri: string read __fakeFieldGet_DefaultFieldNamespaceUri;
    ///<summary>
    ///  Default rdf namespace prefix.
    ///</summary>
    {class} property RdfPrefix: string read __fakeFieldGet_RdfPrefix;
    ///<summary>
    ///  Default rdf namespace uri.
    ///</summary>
    {class} property RdfNamespaceURI: string read __fakeFieldGet_RdfNamespaceURI;

  end;

  ///<summary>
  ///  Describes the XMP extension schema which is provided by PDF/A-1.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionSchema')]
  DNXmpPdfAExtensionSchema = interface(DDN.mscorlib.DNObject)
  ['{492BD78B-7D73-31D6-BAF6-82EB6CC6F45B}']
  { getters & setters } 

    function get_Description: DNXmpPdfAExtensionSchemaDescription;

  { methods } 

    ///<summary>
    ///  Adds new object into schema.
    ///</summary>
    ///  <param name="obj">The new object.</param>
    procedure Add(obj: DNXmpPdfAExtensionObject);
    ///<summary>
    ///  Determines whether obj exists in schema.
    ///</summary>
    ///  <param name="obj">The obj to find.</param>
    ///<returns>True - object exists in schema; otherwise, false.</returns>
    function &Contains(obj: DNXmpPdfAExtensionObject): Boolean;
    ///<summary>
    ///  Removes the object from schema.
    ///</summary>
    ///  <param name="obj">The object to remove.</param>
    procedure Remove(obj: DNXmpPdfAExtensionObject);
    ///<summary>
    ///  Returns the xml element (tag - li) that represents schema in xml tree.
    ///</summary>
    ///  <param name="xmlDocument">The source xml document.</param>
    ///<returns>The xml element.</returns>
    function GetSchemaXml(xmlDocument: DDN.Aspose.Common.DNXmlDocument): DDN.Aspose.Common.DNXmlElement;
    ///<summary>
    ///  Gets the values of properties as xml tree representation.
    ///</summary>
    ///  <param name="xmlDocument">The source xml document.</param>
    ///  <param name="rootElement">The root node of properties values list.</param>
    procedure GetValuesXml(xmlDocument: DDN.Aspose.Common.DNXmlDocument; rootElement: DDN.Aspose.Common.DNXmlElement);
    ///<summary>
    ///  Returns PDF/A property by its name.
    ///</summary>
    ///  <param name="name">Property name.</param>
    ///<returns></returns>
    function GetProperty(name: string): DNXmpPdfAExtensionProperty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the schema description.
    ///</summary>
    property Description: DNXmpPdfAExtensionSchemaDescription read get_Description;
  end;

  TDNXmpPdfAExtensionSchema = class(TDNGenericImport<DNXmpPdfAExtensionSchemaClass, DNXmpPdfAExtensionSchema>)
  public const
    ///<summary>
    ///  Default extension namespace prefix.
    ///</summary>
   DefaultExtensionNamespacePrefix = 'pdfaExtension';
    ///<summary>
    ///  Default extension namespace uri.
    ///</summary>
   DefaultExtensionNamespaceUri = 'http://www.aiim.org/pdfa/ns/extension/';
    ///<summary>
    ///  Default schema namespace prefix.
    ///</summary>
   DefaultSchemaNamespacePrefix = 'pdfaSchema';
    ///<summary>
    ///  Default schema namespace uri.
    ///</summary>
   DefaultSchemaNamespaceUri = 'http://www.aiim.org/pdfa/ns/schema#';
    ///<summary>
    ///  Default property namespace prefix.
    ///</summary>
   DefaultPropertyNamespacePrefix = 'pdfaProperty';
    ///<summary>
    ///  Default property namespace uri.
    ///</summary>
   DefaultPropertyNamespaceUri = 'http://www.aiim.org/pdfa/ns/property#';
    ///<summary>
    ///  Default valie type namespace prefix.
    ///</summary>
   DefaultValueTypeNamespacePrefix = 'pdfaType';
    ///<summary>
    ///  Default value namespace uri.
    ///</summary>
   DefaultValueNamespaceUri = 'http://www.aiim.org/pdfa/ns/type#';
    ///<summary>
    ///  Default field namespace prefix.
    ///</summary>
   DefaultFieldNamespacePrefix = 'pdfaField';
    ///<summary>
    ///  Default extension namespace uri.
    ///</summary>
   DefaultFieldNamespaceUri = 'http://www.aiim.org/pdfa/ns/field#';
    ///<summary>
    ///  Default rdf namespace prefix.
    ///</summary>
   RdfPrefix = 'rdf';
    ///<summary>
    ///  Default rdf namespace uri.
    ///</summary>
   RdfNamespaceURI = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';
  end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpPdfAExtensionSchemaDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{354525BF-BCF6-55D5-8819-6A7556785D88}']
  { constructors } 

    ///<summary>
    ///  Initializes new object.
    ///</summary>
    ///  <param name="prefix">The prefix.</param>
    ///  <param name="namespaceURI">The namespace URI.</param>
    ///  <param name="description">The optional desciption.</param>
    {class} function init(prefix: string; namespaceURI: string; description: string): DNXmpPdfAExtensionSchemaDescription;

  end;

  ///<summary>
  ///  Represents the description of XMP extension schema which is provided by PDF/A-1.
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpPdfAExtensionSchemaDescription')]
  DNXmpPdfAExtensionSchemaDescription = interface(DDN.mscorlib.DNObject)
  ['{AC447CE0-0B1B-3945-9A63-A3ADD8509071}']
  { getters & setters } 

    function get_Prefix: string;
    function get_NamespaceURI: string;
    function get_Description: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the prefix.
    ///</summary>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  Gets the namespace URI.
    ///</summary>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  Gets the optional description.
    ///</summary>
    property Description: string read get_Description;
  end;

  TDNXmpPdfAExtensionSchemaDescription = class(TDNGenericImport<DNXmpPdfAExtensionSchemaDescriptionClass, DNXmpPdfAExtensionSchemaDescription>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNXmpValueClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB1B1870-5B54-5B5B-9491-40380ECF9784}']
  { constructors } 

    ///<summary>
    ///  Constructor for string value.
    ///</summary>
    ///  <param name="value">String value.</param>
    {class} function init(value: string): DNXmpValue; overload;
    ///<summary>
    ///  Consructor for integer value.
    ///</summary>
    ///  <param name="value">Integer value.</param>
    {class} function init(value: Int32): DNXmpValue; overload;
    ///<summary>
    ///  Constructor for floating point Value.
    ///</summary>
    ///  <param name="value">Double value.</param>
    {class} function init(value: Double): DNXmpValue; overload;
    ///<summary>
    ///  Constructor for date time value.
    ///</summary>
    ///  <param name="value">Date time value.</param>
    {class} function init(value: DDN.mscorlib.DNDateTime): DNXmpValue; overload;
    ///<summary>
    ///  Constructor for array value.
    ///</summary>
    ///  <param name="array">Array value.</param>
    {class} function init(&array: TArray<DNXmpValue>): DNXmpValue; overload;

  end;

  ///<summary>
  ///  Represents XMP value
  ///</summary>
  [DNTypeName('Aspose.Pdf.XmpValue')]
  DNXmpValue = interface(DDN.mscorlib.DNObject)
  ['{AF69B09B-E829-3113-942E-7F064F4FBD38}']
  { getters & setters } 

    function get_IsString: Boolean;
    function get_IsInteger: Boolean;
    function get_IsDouble: Boolean;
    function get_IsDateTime: Boolean;
    function get_IsField: Boolean;
    function get_IsNamedValue: Boolean;
    function get_IsNamedValues: Boolean;
    function get_IsStructure: Boolean;
    function get_IsArray: Boolean;

  { methods } 

    ///<summary>
    ///  Converts to string.
    ///</summary>
    ///<returns></returns>
    function ToStringValue: string;
    ///<summary>
    ///  Converts to integer.
    ///</summary>
    ///<returns></returns>
    function ToInteger: Int32;
    ///<summary>
    ///  Converts to double.
    ///</summary>
    ///<returns></returns>
    function ToDouble: Double;
    ///<summary>
    ///  Converts to date time.
    ///</summary>
    ///<returns></returns>
    function ToDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  Returns array.
    ///</summary>
    ///<returns></returns>
    function ToArray: TArray<DNXmpValue>;
    ///<summary>
    ///  Returns XMP value as structure (set of fields).
    ///</summary>
    ///<returns></returns>
    function ToStructure: TArray<DNXmpField>;
    ///<summary>
    ///  Returns XMP value as XMP field.
    ///</summary>
    ///<returns></returns>
    function ToField: DNXmpField;
    ///<summary>
    ///  Returs string representation of XmpValue.
    ///</summary>
    ///<returns></returns>
    function ToString: string; overload;
    ///<summary>
    ///  Returns string representation.
    ///</summary>
    ///  <param name="formatProvider"></param>
    ///<returns></returns>
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  Returns true if value is string.
    ///</summary>
    property IsString: Boolean read get_IsString;
    ///<summary>
    ///  Returns true if value is integer.
    ///</summary>
    property IsInteger: Boolean read get_IsInteger;
    ///<summary>
    ///  Returns true if value is floating point value.
    ///</summary>
    property IsDouble: Boolean read get_IsDouble;
    ///<summary>
    ///  Returns true if value is DateTime.
    ///</summary>
    property IsDateTime: Boolean read get_IsDateTime;
    ///<summary>
    ///  Returns true if XmpValue is field.
    ///</summary>
    property IsField: Boolean read get_IsField;
    ///<summary>
    ///  Returns true if XmpValue is named value.
    ///</summary>
    property IsNamedValue: Boolean read get_IsNamedValue;
    ///<summary>
    ///  Returns true is XmpValue represents named values.
    ///</summary>
    property IsNamedValues: Boolean read get_IsNamedValues;
    ///<summary>
    ///  Returns true is XmpValue represents structure.
    ///</summary>
    property IsStructure: Boolean read get_IsStructure;
    ///<summary>
    ///  Returns true is XmpValue is array.
    ///</summary>
    property IsArray: Boolean read get_IsArray;
  end;

  TDNXmpValue = class(TDNGenericImport<DNXmpValueClass, DNXmpValue>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNDocumentInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57EC4FC6-07C8-5A84-BB39-1BCB2ADC24C6}']
  { constructors } 

    ///<summary>
    ///  Initialize DocumentInfo instance.
    ///</summary>
    ///  <param name="document">The info of this document will be used for initialization.</param>
    {class} function init(document: DNDocument): DNDocumentInfo;

  { static methods } 

    ///<summary>
    ///  Determines if the key is predefined (Title, Author, etc.), not custom.
    ///</summary>
    ///  <param name="key">Selected key</param>
    ///<returns>True in case the key is predefined.</returns>
    {class} function IsPredefinedKey(key: string): Boolean;

  end;

  ///<summary>
  ///  Represents meta information of PDF document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.DocumentInfo')]
  DNDocumentInfo = interface(DDN.mscorlib.DNObject)
  ['{32E3518C-D2BA-346D-A891-823C271DF56F}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_Creator: string;
    procedure set_Creator(value: string);
    function get_Author: string;
    procedure set_Author(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_Producer: string;
    procedure set_Producer(value: string);
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    procedure set_CreationDate(value: DDN.mscorlib.DNDateTime);
    function get_CreationTimeZone: DDN.mscorlib.DNTimeSpan;
    procedure set_CreationTimeZone(value: DDN.mscorlib.DNTimeSpan);
    function get_ModTimeZone: DDN.mscorlib.DNTimeSpan;
    procedure set_ModTimeZone(value: DDN.mscorlib.DNTimeSpan);
    function get_ModDate: DDN.mscorlib.DNDateTime;
    procedure set_ModDate(value: DDN.mscorlib.DNDateTime);
    function get_Trapped: string;
    procedure set_Trapped(value: string);
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Comparer: DDN.mscorlib.DNIEqualityComparer<string>;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  Clears the document info.
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  Adds an element with the specified key and value into the collection.
    ///</summary>
    ///  <param name="key">The key of the element to add.</param>
    ///  <param name="value">The value of the element to add. The value can be null.</param>
    procedure Add(key: string; value: string);
    ///<summary>
    ///  Removes the element with the specified key from the collection.
    ///</summary>
    ///  <param name="key">The key of the element to remove.</param>
    procedure Remove(key: string);
    ///<summary>
    ///  Clears custom data only, leaves all other predefined values (Title, Author, etc.).
    ///</summary>
    procedure ClearCustomData;
    function ContainsKey(key: string): Boolean;
    function ContainsValue(value: string): Boolean;
    function TryGetValue(key: string; out value: string): Boolean;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets or sets document title.
    ///</summary>
    property Title: string read get_Title write set_Title;
    ///<summary>
    ///  Gets or sets document creator.
    ///</summary>
    property Creator: string read get_Creator write set_Creator;
    ///<summary>
    ///  Gets or sets document author.
    ///</summary>
    property Author: string read get_Author write set_Author;
    ///<summary>
    ///  Gets or sets the subject of the document.
    ///</summary>
    property Subject: string read get_Subject write set_Subject;
    ///<summary>
    ///  Gets or set the keywords of the document.
    ///</summary>
    property Keywords: string read get_Keywords write set_Keywords;
    ///<summary>
    ///  Gets or sets the document producer.
    ///</summary>
    property Producer: string read get_Producer write set_Producer;
    ///<summary>
    ///  Gets or sets the date of document creation.
    ///</summary>
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate write set_CreationDate;
    ///<summary>
    ///  Time zone of creation date.
    ///</summary>
    property CreationTimeZone: DDN.mscorlib.DNTimeSpan read get_CreationTimeZone write set_CreationTimeZone;
    ///<summary>
    ///  Time zone of modification date.
    ///</summary>
    property ModTimeZone: DDN.mscorlib.DNTimeSpan read get_ModTimeZone write set_ModTimeZone;
    ///<summary>
    ///  Gets or sets the date of document modification.
    ///</summary>
    property ModDate: DDN.mscorlib.DNDateTime read get_ModDate write set_ModDate;
    ///<summary>
    ///  Gets or sets the trapped flag.
    ///</summary>
    property Trapped: string read get_Trapped write set_Trapped;
    property Item[key: string]: string read get_Item write set_Item; default;
    property Comparer: DDN.mscorlib.DNIEqualityComparer<string> read get_Comparer;
    property Count: Int32 read get_Count;
  end;

  TDNDocumentInfo = class(TDNGenericImport<DNDocumentInfoClass, DNDocumentInfo>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  DNBookmarksClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A51ABA36-5972-55DD-B76D-EA59414C1607}']
  { constructors } 

    {class} function init: DNBookmarks;

  end;

  ///<summary>
  ///  Represents a collection of <see cref="T:Aspose.Pdf.Facades.Bookmark" />
  ///  objects.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.Bookmarks')]
  DNBookmarks = interface(DDN.mscorlib.DNObject)
  ['{FA064CF6-4FF2-33E5-B73A-C4AC49491D4F}']
  { getters & setters } 

    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure AddRange(collection: DDN.mscorlib.DNIEnumerable<DNBookmark>);
    function BinarySearch(index: Int32; count: Int32; item: DNBookmark; comparer: DDN.mscorlib.DNIComparer<DNBookmark>): Int32; overload;
    function BinarySearch(item: DNBookmark): Int32; overload;
    function BinarySearch(item: DNBookmark; comparer: DDN.mscorlib.DNIComparer<DNBookmark>): Int32; overload;
    function &Contains(item: DNBookmark): Boolean;
    procedure CopyTo(&array: TArray<DNBookmark>); overload;
    procedure CopyTo(index: Int32; &array: TArray<DNBookmark>; arrayIndex: Int32; count: Int32); overload;
    procedure CopyTo(&array: TArray<DNBookmark>; arrayIndex: Int32); overload;
    function IndexOf(item: DNBookmark): Int32; overload;
    function IndexOf(item: DNBookmark; index: Int32): Int32; overload;
    function IndexOf(item: DNBookmark; index: Int32; count: Int32): Int32; overload;
    procedure Insert(index: Int32; item: DNBookmark);
    procedure InsertRange(index: Int32; collection: DDN.mscorlib.DNIEnumerable<DNBookmark>);
    function LastIndexOf(item: DNBookmark): Int32; overload;
    function LastIndexOf(item: DNBookmark; index: Int32): Int32; overload;
    function LastIndexOf(item: DNBookmark; index: Int32; count: Int32): Int32; overload;
    procedure RemoveAt(index: Int32);
    procedure RemoveRange(index: Int32; count: Int32);
    procedure Reverse; overload;
    procedure Reverse(index: Int32; count: Int32); overload;
    procedure Sort; overload;
    procedure Sort(comparer: DDN.mscorlib.DNIComparer<DNBookmark>); overload;
    procedure Sort(index: Int32; count: Int32; comparer: DDN.mscorlib.DNIComparer<DNBookmark>); overload;
    function ToArray: TArray<DNBookmark>;
    procedure TrimExcess;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNBookmarks = class(TDNGenericImport<DNBookmarksClass, DNBookmarks>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPrintControllerClass = interface(DDN.Aspose.Common.DNPrintControllerClass)
  ['{A1585971-3254-5D9E-97EE-73F374CF4E6D}']
  { constructors } 

    {class} function init: DNPrintController;

  end;

  ///<summary>
  ///  Represents print controller.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PrintController')]
  DNPrintController = interface(DDN.Aspose.Common.DNPrintController)
  ['{13399E81-D366-35F8-847C-1FD9D404A7E5}']
  { getters & setters } 

    function get_FileName: string;
    procedure set_FileName(value: string);
    function get_IsPreview: Boolean;

  { methods } 

    function OnStartPage(document: DDN.Aspose.Common.DNPrintDocument; e: DDN.Aspose.Common.DNPrintPageEventArgs): DDN.Aspose.Common.DNGraphics;
    procedure OnStartPrint(document: DDN.Aspose.Common.DNPrintDocument; e: DDN.Aspose.Common.DNPrintEventArgs);
    procedure OnEndPage(document: DDN.Aspose.Common.DNPrintDocument; e: DDN.Aspose.Common.DNPrintPageEventArgs);
    procedure OnEndPrint(document: DDN.Aspose.Common.DNPrintDocument; e: DDN.Aspose.Common.DNPrintEventArgs);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName write set_FileName;
    property IsPreview: Boolean read get_IsPreview;
  end;

  TDNPrintController = class(TDNGenericImport<DNPrintControllerClass, DNPrintController>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNResourceLoadingEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{ACEA708E-CBB9-5F04-92D8-1D6B069960DE}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.ResourceLoadingEventArgs" />
    ///  class.
    ///</summary>
    ///  <param name="uri">The URI path.</param>
    {class} function init(uri: string): DNResourceLoadingEventArgs;

  end;

  ///<summary>
  ///  Represents resource loading event arguments.
  ///</summary>
  [DNTypeName('Aspose.Pdf.ResourceLoadingEventArgs')]
  DNResourceLoadingEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{46E3DF16-511D-3ABE-8A0D-E5589E677AEF}']
  { getters & setters } 

    function get_Uri: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  Gets the URI.
    ///</summary>
    ///<value>
    ///  The URI.
    ///</value>
    property Uri: string read get_Uri;
  end;

  TDNResourceLoadingEventArgs = class(TDNGenericImport<DNResourceLoadingEventArgsClass, DNResourceLoadingEventArgs>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNIncorrectCMapUsageExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{B9155AC0-9652-5B4A-8B2E-E0ACA6E46693}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectCMapUsageException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNIncorrectCMapUsageException;

  end;

  ///<summary>
  ///  The exception that is thrown when font usage is incorrect.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IncorrectCMapUsageException')]
  DNIncorrectCMapUsageException = interface(DDN.mscorlib.DNException)
  ['{294E3F20-9035-33C1-8B93-E049A02D50BC}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectCMapUsageException = class(TDNGenericImport<DNIncorrectCMapUsageExceptionClass, DNIncorrectCMapUsageException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNPdfExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{DFF6E7A0-A869-57F2-A745-84D08A101358}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException" />
    ///  class.
    ///</summary>
    {class} function init: DNPdfException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNPdfException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNPdfException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.PdfException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNPdfException; overload;

  end;

  ///<summary>
  ///  Represents errors that occur during PDF application execution.
  ///</summary>
  [DNTypeName('Aspose.Pdf.PdfException')]
  DNPdfException = interface(DDN.mscorlib.DNException)
  ['{3955B80E-8CC4-349F-8340-E87F1789C7C6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNPdfException = class(TDNGenericImport<DNPdfExceptionClass, DNPdfException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNEmptyValueExceptionClass = interface(DNPdfExceptionClass)
  ['{8F03EB80-C24E-59C3-8CDA-9CB4C407DC93}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.EmptyValueException" />
    ///  class.
    ///</summary>
    {class} function init: DNEmptyValueException; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="message">Exception message.</param>
    {class} function init(message: string): DNEmptyValueException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when requirested value does not exists.
  ///</summary>
  [DNTypeName('Aspose.Pdf.EmptyValueException')]
  DNEmptyValueException = interface(DNPdfException)
  ['{7F27A0FA-CF89-3C40-92D4-99052C9759F8}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNEmptyValueException = class(TDNGenericImport<DNEmptyValueExceptionClass, DNEmptyValueException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidFileFormatExceptionClass = interface(DNPdfExceptionClass)
  ['{4D1F01FB-3C37-5C00-9876-87216FEC4EB9}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException" />
    ///  class.
    ///</summary>
    {class} function init: DNInvalidFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNInvalidFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidFileFormatException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a file is invalid.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidFileFormatException')]
  DNInvalidFileFormatException = interface(DNPdfException)
  ['{A2A4CCCB-BE57-3AD6-8E4B-0CC3180DCCD4}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFileFormatException = class(TDNGenericImport<DNInvalidFileFormatExceptionClass, DNInvalidFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNIncorrectFontUsageExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{92727253-2CEB-5137-BA4F-2F2914D515F8}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNIncorrectFontUsageException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNIncorrectFontUsageException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.IncorrectFontUsageException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNIncorrectFontUsageException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when font usage is incorrect.
  ///</summary>
  [DNTypeName('Aspose.Pdf.IncorrectFontUsageException')]
  DNIncorrectFontUsageException = interface(DNInvalidFileFormatException)
  ['{A369FA16-BCE2-33F3-9556-5866B244DAC6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNIncorrectFontUsageException = class(TDNGenericImport<DNIncorrectFontUsageExceptionClass, DNIncorrectFontUsageException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidCgmFileFormatExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{6B0614C9-3CC7-5DF1-A0AB-62DC8F154197}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException" />
    ///  class.
    ///</summary>
    {class} function init: DNInvalidCgmFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNInvalidCgmFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidCgmFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidCgmFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidCgmFileFormatException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a Cgm file is invalid.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidCgmFileFormatException')]
  DNInvalidCgmFileFormatException = interface(DNInvalidFileFormatException)
  ['{0F4EBBB3-8991-3D00-B221-9F570C060F1F}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidCgmFileFormatException = class(TDNGenericImport<DNInvalidCgmFileFormatExceptionClass, DNInvalidCgmFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidPdfFileFormatExceptionClass = interface(DNInvalidFileFormatExceptionClass)
  ['{38DF2511-B55D-59FF-AE70-A62466290BBD}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNInvalidPdfFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidPdfFileFormatException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPdfFileFormatException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidPdfFileFormatException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a pdf file is invalid.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidPdfFileFormatException')]
  DNInvalidPdfFileFormatException = interface(DNInvalidFileFormatException)
  ['{CA9E7BB8-5E19-327F-BFFF-AFF1D74639F6}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPdfFileFormatException = class(TDNGenericImport<DNInvalidPdfFileFormatExceptionClass, DNInvalidPdfFileFormatException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidPasswordExceptionClass = interface(DNPdfExceptionClass)
  ['{73163FA5-1C67-52F6-A819-45595CD19ADD}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNInvalidPasswordException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidPasswordException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidPasswordException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when invalid password is provided by user.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidPasswordException')]
  DNInvalidPasswordException = interface(DNPdfException)
  ['{22CEC0AD-3F9A-3EFF-9A91-027CC5D486D3}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidPasswordException = class(TDNGenericImport<DNInvalidPasswordExceptionClass, DNInvalidPasswordException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidValueFormatExceptionClass = interface(DNPdfExceptionClass)
  ['{5DD1E803-10F9-5FF6-9920-E3B1BA20360E}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidValueFormatException" />
    ///  class.
    ///</summary>
    {class} function init: DNInvalidValueFormatException; overload;
    ///<summary>
    ///  Constructor.
    ///</summary>
    ///  <param name="message">Exception message.</param>
    {class} function init(message: string): DNInvalidValueFormatException; overload;

  end;

  ///<summary>
  ///  Exception which thrown when requested value has incorrect format.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidValueFormatException')]
  DNInvalidValueFormatException = interface(DNPdfException)
  ['{539B8128-1DF8-37A6-8BCE-1D9A2118F0DE}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidValueFormatException = class(TDNGenericImport<DNInvalidValueFormatExceptionClass, DNInvalidValueFormatException>) end;

  //-------------namespace: Aspose.Pdf.Tagged----------------
  DNTaggedExceptionClass = interface(DNPdfExceptionClass)
  ['{65097AD1-5E71-575C-B49E-6D3644EFF8B8}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Tagged.TaggedException" />
    ///  class.
    ///</summary>
    {class} function init: DNTaggedException;

  end;

  ///<summary>
  ///  Represents exception for TaggedPDF content of document.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Tagged.TaggedException')]
  DNTaggedException = interface(DNPdfException)
  ['{42CFE2D5-C628-3B19-8465-2DFDDAE2147A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTaggedException = class(TDNGenericImport<DNTaggedExceptionClass, DNTaggedException>) end;

  //-------------namespace: Aspose.Pdf.Sanitization----------------
  DNSanitizationExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{74AE72B9-F071-575E-AAE6-D6BE8A9F1F85}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Sanitization.SanitizationException" />
    ///  class.
    ///</summary>
    {class} function init: DNSanitizationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Sanitization.SanitizationException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNSanitizationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Sanitization.SanitizationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSanitizationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.Sanitization.SanitizationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNSanitizationException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when an sanitization operation failed.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Sanitization.SanitizationException')]
  DNSanitizationException = interface(DDN.mscorlib.DNException)
  ['{7690483D-5CD7-31A3-89D9-1671A10DD3AF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSanitizationException = class(TDNGenericImport<DNSanitizationExceptionClass, DNSanitizationException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFontEmbeddingExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{3B90FBBB-F79A-565B-8DDD-0CC4F37431F8}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNFontEmbeddingException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFontEmbeddingException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontEmbeddingException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNFontEmbeddingException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when an attempt to embed font became failed
  ///</summary>
  [DNTypeName('Aspose.Pdf.FontEmbeddingException')]
  DNFontEmbeddingException = interface(DDN.mscorlib.DNApplicationException)
  ['{8F1AEE10-16AE-35C2-B505-A7A09DFEB687}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFontEmbeddingException = class(TDNGenericImport<DNFontEmbeddingExceptionClass, DNFontEmbeddingException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNFontNotFoundExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{C5F16BAB-B27E-590D-A565-923AD363018F}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNFontNotFoundException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNFontNotFoundException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.FontNotFoundException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNFontNotFoundException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a font is not found.
  ///</summary>
  [DNTypeName('Aspose.Pdf.FontNotFoundException')]
  DNFontNotFoundException = interface(DDN.mscorlib.DNApplicationException)
  ['{EDCF92F2-5B20-3C58-B6CE-B570C636D771}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNFontNotFoundException = class(TDNGenericImport<DNFontNotFoundExceptionClass, DNFontNotFoundException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNUnsupportedFontTypeExceptionClass = interface(DDN.mscorlib.DNApplicationExceptionClass)
  ['{215172CD-3D76-5B07-A7D7-64A0B0B5DC13}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNUnsupportedFontTypeException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNUnsupportedFontTypeException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.UnsupportedFontTypeException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNUnsupportedFontTypeException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when a font type is not supported.
  ///</summary>
  [DNTypeName('Aspose.Pdf.UnsupportedFontTypeException')]
  DNUnsupportedFontTypeException = interface(DDN.mscorlib.DNApplicationException)
  ['{68B6DF46-D168-3CA8-93C0-C11B3DF4AA87}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNUnsupportedFontTypeException = class(TDNGenericImport<DNUnsupportedFontTypeExceptionClass, DNUnsupportedFontTypeException>) end;

  //-------------namespace: Aspose.Pdf----------------
  DNInvalidFormTypeOperationExceptionClass = interface(DDN.mscorlib.DNInvalidOperationExceptionClass)
  ['{0E557BEF-EBC2-55B4-8A9A-F630A87E5761}']
  { constructors } 

    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException" />
    ///  class.
    ///</summary>
    {class} function init: DNInvalidFormTypeOperationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException" />
    ///  class.
    ///</summary>
    ///  <param name="message">The message.</param>
    {class} function init(message: string): DNInvalidFormTypeOperationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="message">The error message that explains the reason for the exception. </param>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNInvalidFormTypeOperationException; overload;
    ///<summary>
    ///  Initializes a new instance of the <see cref="T:Aspose.Pdf.InvalidFormTypeOperationException"></see> class with a specified error message and a reference to the inner exception that is the cause of this exception.
    ///</summary>
    ///  <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified. </param>
    {class} function init(innerException: DDN.mscorlib.DNException): DNInvalidFormTypeOperationException; overload;

  end;

  ///<summary>
  ///  The exception that is thrown when an operation with form type is not valid.
  ///</summary>
  [DNTypeName('Aspose.Pdf.InvalidFormTypeOperationException')]
  DNInvalidFormTypeOperationException = interface(DDN.mscorlib.DNInvalidOperationException)
  ['{036BB5DC-4218-3005-8A27-CFD5CB6F88FF}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNInvalidFormTypeOperationException = class(TDNGenericImport<DNInvalidFormTypeOperationExceptionClass, DNInvalidFormTypeOperationException>) end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  General facade interface that defines common facades methods.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.IFacade')]
  DNIFacade = interface(DDN.mscorlib.DNIDisposable)
  ['{FC5E8C17-4B73-3AB9-87F6-7B05370683D5}']
  { methods } 

    ///<summary>
    ///  Binds PDF document for editing.
    ///</summary>
    ///  <param name="srcFile">The path of input PDF document.</param>
    procedure BindPdf(srcFile: string); overload;
    ///<summary>
    ///  Binds PDF document for editing.
    ///</summary>
    ///  <param name="srcStream">The stream of input PDF document.</param>
    procedure BindPdf(srcStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  Binds PDF document for editing.
    ///</summary>
    ///  <param name="srcDoc">Input PDF document.</param>
    procedure BindPdf(srcDoc: DNDocument); overload;
    ///<summary>
    ///  Releases any resources associates with the current facade.
    ///</summary>
    procedure Close;

  end;

  //-------------namespace: Aspose.Pdf.Facades----------------
  ///<summary>
  ///  Facade interface that defines methods common for all saveable facades.
  ///</summary>
  [DNTypeName('Aspose.Pdf.Facades.ISaveableFacade')]
  DNISaveableFacade = interface(DNIFacade)
  ['{B3768FA2-D883-37E2-BC87-5E5D7655FA29}']
  { methods } 

    ///<summary>
    ///  Saves the result PDF document to file.
    ///</summary>
    ///  <param name="destFile">The path of output PDF document.</param>
    procedure Save(destFile: string); overload;
    ///<summary>
    ///  Saves the result PDF document to stream.
    ///</summary>
    ///  <param name="destStream">The stream of output PDF document.</param>
    procedure Save(destStream: DDN.mscorlib.DNStream); overload;

  end;


implementation

end.
