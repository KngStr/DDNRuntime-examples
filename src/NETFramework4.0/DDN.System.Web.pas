//----------------------------------------------------------------------------
//  System.Web.dll: System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework 4.x
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Web
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Web;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes featureï¼Œfpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System,
  DDN.System.ComponentModel.DataAnnotations,
  DDN.System.Configuration,
  DDN.System.Drawing,
  DDN.System.Web.ApplicationServices,
  DDN.System.Data,
  DDN.System.Xml,
  DDN.System.EnterpriseServices;

type

{ enums }

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ApplicationShutdownReason')]
  DNApplicationShutdownReason = type Integer;
  DNApplicationShutdownReasonHelper = record helper for DNApplicationShutdownReason
  public const
    None = 0;
    HostingEnvironment = 1;
    ChangeInGlobalAsax = 2;
    ConfigurationChange = 3;
    UnloadAppDomainCalled = 4;
    ChangeInSecurityPolicyFile = 5;
    BinDirChangeOrDirectoryRename = 6;
    BrowsersDirChangeOrDirectoryRename = 7;
    CodeDirChangeOrDirectoryRename = 8;
    ResourcesDirChangeOrDirectoryRename = 9;
    IdleTimeout = 10;
    PhysicalApplicationPathChanged = 11;
    HttpRuntimeClose = 12;
    InitializationError = 13;
    MaxRecompilationsReached = 14;
    BuildManagerChange = 15;
  end;


  //-------------namespace: System.Web.Caching----------------
  [DNTypeName('System.Web.Caching.CacheItemPriority')]
  DNCacheItemPriority = type Integer;
  DNCacheItemPriorityHelper = record helper for DNCacheItemPriority
  public const
    Low = 1;
    BelowNormal = 2;
    Normal = 3;
    Default_ = 3;
    AboveNormal = 4;
    High = 5;
    NotRemovable = 6;
  end;


  //-------------namespace: System.Web.Caching----------------
  [DNTypeName('System.Web.Caching.CacheItemRemovedReason')]
  DNCacheItemRemovedReason = type Integer;
  DNCacheItemRemovedReasonHelper = record helper for DNCacheItemRemovedReason
  public const
    Removed = 1;
    Expired = 2;
    Underused = 3;
    DependencyChanged = 4;
  end;


  //-------------namespace: System.Web.Caching----------------
  [DNTypeName('System.Web.Caching.CacheItemUpdateReason')]
  DNCacheItemUpdateReason = type Integer;
  DNCacheItemUpdateReasonHelper = record helper for DNCacheItemUpdateReason
  public const
    Expired = 1;
    DependencyChanged = 2;
  end;


  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.BuildProviderAppliesTo')]
  DNBuildProviderAppliesTo = type Integer;
  DNBuildProviderAppliesToHelper = record helper for DNBuildProviderAppliesTo
  public const
    Web = 1;
    Code = 2;
    Resources = 4;
    All = 7;
  end;


  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.BuildProviderResultFlags')]
  DNBuildProviderResultFlags = type Integer;
  DNBuildProviderResultFlagsHelper = record helper for DNBuildProviderResultFlags
  public const
    Default_ = 0;
    ShutdownAppDomainOnChange = 1;
  end;


  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.FolderLevelBuildProviderAppliesTo')]
  DNFolderLevelBuildProviderAppliesTo = type Integer;
  DNFolderLevelBuildProviderAppliesToHelper = record helper for DNFolderLevelBuildProviderAppliesTo
  public const
    None = 0;
    Code = 1;
    WebReferences = 2;
    LocalResources = 4;
    GlobalResources = 8;
  end;


  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.PrecompilationFlags')]
  DNPrecompilationFlags = type Integer;
  DNPrecompilationFlagsHelper = record helper for DNPrecompilationFlags
  public const
    Default_ = 0;
    Updatable = 1;
    OverwriteTarget = 2;
    ForceDebug = 4;
    Clean = 8;
    CodeAnalysis = 16;
    AllowPartiallyTrustedCallers = 32;
    DelaySign = 64;
    FixedNames = 128;
    IgnoreBadImageFormatException = 256;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.AsyncPreloadModeFlags')]
  DNAsyncPreloadModeFlags = type Integer;
  DNAsyncPreloadModeFlagsHelper = record helper for DNAsyncPreloadModeFlags
  public const
    None = 0;
    Form = 1;
    FormMultiPart = 2;
    AllFormTypes = 3;
    NonForm = 4;
    All = 7;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.AuthenticationMode')]
  DNAuthenticationMode = type Integer;
  DNAuthenticationModeHelper = record helper for DNAuthenticationMode
  public const
    None = 0;
    Windows = 1;
    Passport = 2;
    Forms = 3;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.AuthorizationRuleAction')]
  DNAuthorizationRuleAction = type Integer;
  DNAuthorizationRuleActionHelper = record helper for DNAuthorizationRuleAction
  public const
    Deny = 0;
    Allow = 1;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.CustomErrorsMode')]
  DNCustomErrorsMode = type Integer;
  DNCustomErrorsModeHelper = record helper for DNCustomErrorsMode
  public const
    RemoteOnly = 0;
    On_ = 1;
    Off = 2;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.CustomErrorsRedirectMode')]
  DNCustomErrorsRedirectMode = type Integer;
  DNCustomErrorsRedirectModeHelper = record helper for DNCustomErrorsRedirectMode
  public const
    ResponseRedirect = 0;
    ResponseRewrite = 1;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.FcnMode')]
  DNFcnMode = type Integer;
  DNFcnModeHelper = record helper for DNFcnMode
  public const
    NotSet = 0;
    Default_ = 1;
    Disabled = 2;
    Single = 3;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.FormsAuthPasswordFormat')]
  DNFormsAuthPasswordFormat = type Integer;
  DNFormsAuthPasswordFormatHelper = record helper for DNFormsAuthPasswordFormat
  public const
    Clear = 0;
    SHA1 = 1;
    MD5 = 2;
    SHA256 = 3;
    SHA384 = 4;
    SHA512 = 5;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.FormsProtectionEnum')]
  DNFormsProtectionEnum = type Integer;
  DNFormsProtectionEnumHelper = record helper for DNFormsProtectionEnum
  public const
    All = 0;
    None = 1;
    Encryption = 2;
    Validation = 3;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.MachineKeyCompatibilityMode')]
  DNMachineKeyCompatibilityMode = type Integer;
  DNMachineKeyCompatibilityModeHelper = record helper for DNMachineKeyCompatibilityMode
  public const
    Framework20SP1 = 0;
    Framework20SP2 = 1;
    Framework45 = 2;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.MachineKeyValidation')]
  DNMachineKeyValidation = type Integer;
  DNMachineKeyValidationHelper = record helper for DNMachineKeyValidation
  public const
    MD5 = 0;
    SHA1 = 1;
    TripleDES = 2;
    AES = 3;
    HMACSHA256 = 4;
    HMACSHA384 = 5;
    HMACSHA512 = 6;
    Custom = 7;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.PagesEnableSessionState')]
  DNPagesEnableSessionState = type Integer;
  DNPagesEnableSessionStateHelper = record helper for DNPagesEnableSessionState
  public const
    False = 0;
    ReadOnly = 1;
    True = 2;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.ProcessModelComAuthenticationLevel')]
  DNProcessModelComAuthenticationLevel = type Integer;
  DNProcessModelComAuthenticationLevelHelper = record helper for DNProcessModelComAuthenticationLevel
  public const
    None = 0;
    Call = 1;
    Connect = 2;
    Default_ = 3;
    Pkt = 4;
    PktIntegrity = 5;
    PktPrivacy = 6;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.ProcessModelComImpersonationLevel')]
  DNProcessModelComImpersonationLevel = type Integer;
  DNProcessModelComImpersonationLevelHelper = record helper for DNProcessModelComImpersonationLevel
  public const
    Default_ = 0;
    Anonymous = 1;
    Delegate = 2;
    Identify = 3;
    Impersonate = 4;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.ProcessModelLogLevel')]
  DNProcessModelLogLevel = type Integer;
  DNProcessModelLogLevelHelper = record helper for DNProcessModelLogLevel
  public const
    None = 0;
    All = 1;
    Errors = 2;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.ProfileGuidedOptimizationsFlags')]
  DNProfileGuidedOptimizationsFlags = type Integer;
  DNProfileGuidedOptimizationsFlagsHelper = record helper for DNProfileGuidedOptimizationsFlags
  public const
    None = 0;
    All = 1;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.SerializationMode')]
  DNSerializationMode = type Integer;
  DNSerializationModeHelper = record helper for DNSerializationMode
  public const
    String_ = 0;
    Xml = 1;
    Binary = 2;
    ProviderSpecific = 3;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.TicketCompatibilityMode')]
  DNTicketCompatibilityMode = type Integer;
  DNTicketCompatibilityModeHelper = record helper for DNTicketCompatibilityMode
  public const
    Framework20 = 0;
    Framework40 = 1;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.TraceDisplayMode')]
  DNTraceDisplayMode = type Integer;
  DNTraceDisplayModeHelper = record helper for DNTraceDisplayMode
  public const
    SortByTime = 1;
    SortByCategory = 2;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.WebApplicationLevel')]
  DNWebApplicationLevel = type Integer;
  DNWebApplicationLevelHelper = record helper for DNWebApplicationLevel
  public const
    AboveApplication = 10;
    AtApplication = 20;
    BelowApplication = 30;
  end;


  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.XhtmlConformanceMode')]
  DNXhtmlConformanceMode = type Integer;
  DNXhtmlConformanceModeHelper = record helper for DNXhtmlConformanceMode
  public const
    Transitional = 0;
    Legacy = 1;
    Strict_ = 2;
  end;


  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.HostSecurityPolicyResults')]
  DNHostSecurityPolicyResults = type Integer;
  DNHostSecurityPolicyResultsHelper = record helper for DNHostSecurityPolicyResults
  public const
    DefaultPolicy = 0;
    FullTrust = 1;
    AppDomainTrust = 2;
    Nothing = 3;
  end;


  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.RecycleLimitNotificationFrequency')]
  DNRecycleLimitNotificationFrequency = type Integer;
  DNRecycleLimitNotificationFrequencyHelper = record helper for DNRecycleLimitNotificationFrequency
  public const
    High = 0;
    Medium = 1;
    Low = 2;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.HttpCacheability')]
  DNHttpCacheability = type Integer;
  DNHttpCacheabilityHelper = record helper for DNHttpCacheability
  public const
    NoCache = 1;
    Private_ = 2;
    Server = 3;
    ServerAndNoCache = 3;
    Public_ = 4;
    ServerAndPrivate = 5;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.HttpCacheRevalidation')]
  DNHttpCacheRevalidation = type Integer;
  DNHttpCacheRevalidationHelper = record helper for DNHttpCacheRevalidation
  public const
    AllCaches = 1;
    ProxyCaches = 2;
    None = 3;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.HttpCookieMode')]
  DNHttpCookieMode = type Integer;
  DNHttpCookieModeHelper = record helper for DNHttpCookieMode
  public const
    UseUri = 0;
    UseCookies = 1;
    AutoDetect = 2;
    UseDeviceProfile = 3;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.HttpValidationStatus')]
  DNHttpValidationStatus = type Integer;
  DNHttpValidationStatusHelper = record helper for DNHttpValidationStatus
  public const
    Invalid = 1;
    IgnoreThisRequest = 2;
    Valid = 3;
  end;


  //-------------namespace: System.Web.Mail----------------
  [DNTypeName('System.Web.Mail.MailEncoding')]
  DNMailEncoding = type Integer;
  DNMailEncodingHelper = record helper for DNMailEncoding
  public const
    UUEncode = 0;
    Base64 = 1;
  end;


  //-------------namespace: System.Web.Mail----------------
  [DNTypeName('System.Web.Mail.MailFormat')]
  DNMailFormat = type Integer;
  DNMailFormatHelper = record helper for DNMailFormat
  public const
    Text = 0;
    Html = 1;
  end;


  //-------------namespace: System.Web.Mail----------------
  [DNTypeName('System.Web.Mail.MailPriority')]
  DNMailPriority = type Integer;
  DNMailPriorityHelper = record helper for DNMailPriority
  public const
    Normal = 0;
    Low = 1;
    High = 2;
  end;


  //-------------namespace: System.Web.Management----------------
  [DNTypeName('System.Web.Management.EventNotificationType')]
  DNEventNotificationType = type Integer;
  DNEventNotificationTypeHelper = record helper for DNEventNotificationType
  public const
    Regular = 0;
    Urgent = 1;
    Flush = 2;
    Unbuffered = 3;
  end;


  //-------------namespace: System.Web.Management----------------
  [DNTypeName('System.Web.Management.SessionStateType')]
  DNSessionStateType = type Integer;
  DNSessionStateTypeHelper = record helper for DNSessionStateType
  public const
    Temporary = 0;
    Persisted = 1;
    Custom = 2;
  end;


  //-------------namespace: System.Web.Management----------------
  [DNTypeName('System.Web.Management.SqlFeatures')]
  DNSqlFeatures = type Integer;
  DNSqlFeaturesHelper = record helper for DNSqlFeatures
  public const
    None = 0;
    Membership = 1;
    Profile = 2;
    RoleManager = 4;
    Personalization = 8;
    SqlWebEventProvider = 16;
    All = 1073741855;
  end;


  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.BindingBehavior')]
  DNBindingBehavior = type Integer;
  DNBindingBehaviorHelper = record helper for DNBindingBehavior
  public const
    Optional = 0;
    Never = 1;
    Required = 2;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ProcessShutdownReason')]
  DNProcessShutdownReason = type Integer;
  DNProcessShutdownReasonHelper = record helper for DNProcessShutdownReason
  public const
    None = 0;
    Unexpected = 1;
    RequestsLimit = 2;
    RequestQueueLimit = 3;
    Timeout = 4;
    IdleTimeout = 5;
    MemoryLimitExceeded = 6;
    PingFailed = 7;
    DeadlockSuspected = 8;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ProcessStatus')]
  DNProcessStatus = type Integer;
  DNProcessStatusHelper = record helper for DNProcessStatus
  public const
    Alive = 1;
    ShuttingDown = 2;
    ShutDown = 3;
    Terminated = 4;
  end;


  //-------------namespace: System.Web.Profile----------------
  [DNTypeName('System.Web.Profile.ProfileAuthenticationOption')]
  DNProfileAuthenticationOption = type Integer;
  DNProfileAuthenticationOptionHelper = record helper for DNProfileAuthenticationOption
  public const
    Anonymous = 0;
    Authenticated = 1;
    All = 2;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ReadEntityBodyMode')]
  DNReadEntityBodyMode = type Integer;
  DNReadEntityBodyModeHelper = record helper for DNReadEntityBodyMode
  public const
    None = 0;
    Classic = 1;
    Bufferless = 2;
    Buffered = 3;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.RequestNotification')]
  DNRequestNotification = type Integer;
  DNRequestNotificationHelper = record helper for DNRequestNotification
  public const
    BeginRequest = 1;
    AuthenticateRequest = 2;
    AuthorizeRequest = 4;
    ResolveRequestCache = 8;
    MapRequestHandler = 16;
    AcquireRequestState = 32;
    PreExecuteRequestHandler = 64;
    ExecuteRequestHandler = 128;
    ReleaseRequestState = 256;
    UpdateRequestCache = 512;
    LogRequest = 1024;
    EndRequest = 2048;
    SendResponse = 536870912;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.RequestNotificationStatus')]
  DNRequestNotificationStatus = type Integer;
  DNRequestNotificationStatusHelper = record helper for DNRequestNotificationStatus
  public const
    Continue_ = 0;
    Pending = 1;
    FinishRequest = 2;
  end;


  //-------------namespace: System.Web.Routing----------------
  [DNTypeName('System.Web.Routing.RouteDirection')]
  DNRouteDirection = type Integer;
  DNRouteDirectionHelper = record helper for DNRouteDirection
  public const
    IncomingRequest = 0;
    UrlGeneration = 1;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.SameSiteMode')]
  DNSameSiteMode = type Integer;
  DNSameSiteModeHelper = record helper for DNSameSiteMode
  public const
    None = 0;
    Lax = 1;
    Strict_ = 2;
  end;


  //-------------namespace: System.Web.Security----------------
  [DNTypeName('System.Web.Security.ActiveDirectoryConnectionProtection')]
  DNActiveDirectoryConnectionProtection = type Integer;
  DNActiveDirectoryConnectionProtectionHelper = record helper for DNActiveDirectoryConnectionProtection
  public const
    None = 0;
    Ssl = 1;
    SignAndSeal = 2;
  end;


  //-------------namespace: System.Web.Security.AntiXss----------------
  [DNTypeName('System.Web.Security.AntiXss.LowerCodeCharts')]
  DNLowerCodeCharts = type Integer;
  DNLowerCodeChartsHelper = record helper for DNLowerCodeCharts
  public const
    None = 0;
    BasicLatin = 1;
    C1ControlsAndLatin1Supplement = 2;
    LatinExtendedA = 4;
    LatinExtendedB = 8;
    IpaExtensions = 16;
    SpacingModifierLetters = 32;
    CombiningDiacriticalMarks = 64;
    Default_ = 127;
    GreekAndCoptic = 128;
    Cyrillic = 256;
    CyrillicSupplement = 512;
    Armenian = 1024;
    Hebrew = 2048;
    Arabic = 4096;
    Syriac = 8192;
    ArabicSupplement = 16384;
    Thaana = 32768;
    Nko = 65536;
    Samaritan = 131072;
    Devanagari = 262144;
    Bengali = 524288;
    Gurmukhi = 1048576;
    Gujarati = 2097152;
    Oriya = 4194304;
    Tamil = 8388608;
    Telugu = 16777216;
    Kannada = 33554432;
    Malayalam = 67108864;
    Sinhala = 134217728;
    Thai = 268435456;
    Lao = 536870912;
    Tibetan = 1073741824;
  end;


  //-------------namespace: System.Web.Security.AntiXss----------------
  [DNTypeName('System.Web.Security.AntiXss.LowerMidCodeCharts')]
  DNLowerMidCodeCharts = type Integer;
  DNLowerMidCodeChartsHelper = record helper for DNLowerMidCodeCharts
  public const
    None = 0;
    Myanmar = 1;
    Georgian = 2;
    HangulJamo = 4;
    Ethiopic = 8;
    EthiopicSupplement = 16;
    Cherokee = 32;
    UnifiedCanadianAboriginalSyllabics = 64;
    Ogham = 128;
    Runic = 256;
    Tagalog = 512;
    Hanunoo = 1024;
    Buhid = 2048;
    Tagbanwa = 4096;
    Khmer = 8192;
    Mongolian = 16384;
    UnifiedCanadianAboriginalSyllabicsExtended = 32768;
    Limbu = 65536;
    TaiLe = 131072;
    NewTaiLue = 262144;
    KhmerSymbols = 524288;
    Buginese = 1048576;
    TaiTham = 2097152;
    Balinese = 4194304;
    Sudanese = 8388608;
    Lepcha = 16777216;
    OlChiki = 33554432;
    VedicExtensions = 67108864;
    PhoneticExtensions = 134217728;
    PhoneticExtensionsSupplement = 268435456;
    CombiningDiacriticalMarksSupplement = 536870912;
    LatinExtendedAdditional = 1073741824;
  end;


  //-------------namespace: System.Web.Security.AntiXss----------------
  [DNTypeName('System.Web.Security.AntiXss.MidCodeCharts')]
  DNMidCodeCharts = type Integer;
  DNMidCodeChartsHelper = record helper for DNMidCodeCharts
  public const
    None = 0;
    GreekExtended = 1;
    GeneralPunctuation = 2;
    SuperscriptsAndSubscripts = 4;
    CurrencySymbols = 8;
    CombiningDiacriticalMarksForSymbols = 16;
    LetterlikeSymbols = 32;
    NumberForms = 64;
    Arrows = 128;
    MathematicalOperators = 256;
    MiscellaneousTechnical = 512;
    ControlPictures = 1024;
    OpticalCharacterRecognition = 2048;
    EnclosedAlphanumerics = 4096;
    BoxDrawing = 8192;
    BlockElements = 16384;
    EthiopicExtended = 16384;
    GeometricShapes = 32768;
    MiscellaneousSymbols = 65536;
    Dingbats = 131072;
    MiscellaneousMathematicalSymbolsA = 262144;
    SupplementalArrowsA = 524288;
    BraillePatterns = 1048576;
    SupplementalArrowsB = 2097152;
    MiscellaneousMathematicalSymbolsB = 4194304;
    SupplementalMathematicalOperators = 8388608;
    MiscellaneousSymbolsAndArrows = 16777216;
    Glagolitic = 33554432;
    LatinExtendedC = 67108864;
    Coptic = 134217728;
    GeorgianSupplement = 268435456;
    Tifinagh = 536870912;
  end;


  //-------------namespace: System.Web.Security.AntiXss----------------
  [DNTypeName('System.Web.Security.AntiXss.UpperCodeCharts')]
  DNUpperCodeCharts = type Integer;
  DNUpperCodeChartsHelper = record helper for DNUpperCodeCharts
  public const
    None = 0;
    DevanagariExtended = 1;
    KayahLi = 2;
    Rejang = 4;
    HangulJamoExtendedA = 8;
    Javanese = 16;
    Cham = 32;
    MyanmarExtendedA = 64;
    TaiViet = 128;
    MeeteiMayek = 256;
    HangulSyllables = 512;
    HangulJamoExtendedB = 1024;
    CjkCompatibilityIdeographs = 2048;
    AlphabeticPresentationForms = 4096;
    ArabicPresentationFormsA = 8192;
    VariationSelectors = 16384;
    VerticalForms = 32768;
    CombiningHalfMarks = 65536;
    CjkCompatibilityForms = 131072;
    SmallFormVariants = 262144;
    ArabicPresentationFormsB = 524288;
    HalfWidthAndFullWidthForms = 1048576;
    Specials = 2097152;
  end;


  //-------------namespace: System.Web.Security.AntiXss----------------
  [DNTypeName('System.Web.Security.AntiXss.UpperMidCodeCharts')]
  DNUpperMidCodeCharts = type Integer;
  DNUpperMidCodeChartsHelper = record helper for DNUpperMidCodeCharts
  public const
    None = 0;
    CyrillicExtendedA = 1;
    SupplementalPunctuation = 2;
    CjkRadicalsSupplement = 4;
    KangxiRadicals = 8;
    IdeographicDescriptionCharacters = 16;
    CjkSymbolsAndPunctuation = 32;
    Hiragana = 64;
    Katakana = 128;
    Bopomofo = 256;
    HangulCompatibilityJamo = 512;
    Kanbun = 1024;
    BopomofoExtended = 2048;
    CjkStrokes = 4096;
    KatakanaPhoneticExtensions = 8192;
    EnclosedCjkLettersAndMonths = 16384;
    CjkCompatibility = 32768;
    CjkUnifiedIdeographsExtensionA = 65536;
    YijingHexagramSymbols = 131072;
    CjkUnifiedIdeographs = 262144;
    YiSyllables = 524288;
    YiRadicals = 1048576;
    Lisu = 2097152;
    Vai = 4194304;
    CyrillicExtendedB = 8388608;
    Bamum = 16777216;
    ModifierToneLetters = 33554432;
    LatinExtendedD = 67108864;
    SylotiNagri = 134217728;
    CommonIndicNumberForms = 268435456;
    Phagspa = 536870912;
    Saurashtra = 1073741824;
  end;


  //-------------namespace: System.Web.Security----------------
  [DNTypeName('System.Web.Security.CookieProtection')]
  DNCookieProtection = type Integer;
  DNCookieProtectionHelper = record helper for DNCookieProtection
  public const
    None = 0;
    Validation = 1;
    Encryption = 2;
    All = 3;
  end;


  //-------------namespace: System.Web.Security----------------
  [DNTypeName('System.Web.Security.MachineKeyProtection')]
  DNMachineKeyProtection = type Integer;
  DNMachineKeyProtectionHelper = record helper for DNMachineKeyProtection
  public const
    All = 0;
    Encryption = 1;
    Validation = 2;
  end;


  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.SessionStateActions')]
  DNSessionStateActions = type Integer;
  DNSessionStateActionsHelper = record helper for DNSessionStateActions
  public const
    None = 0;
    InitializeItem = 1;
  end;


  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.SessionStateBehavior')]
  DNSessionStateBehavior = type Integer;
  DNSessionStateBehaviorHelper = record helper for DNSessionStateBehavior
  public const
    Default_ = 0;
    Required = 1;
    ReadOnly = 2;
    Disabled = 3;
  end;


  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.SessionStateMode')]
  DNSessionStateMode = type Integer;
  DNSessionStateModeHelper = record helper for DNSessionStateMode
  public const
    Off = 0;
    InProc = 1;
    StateServer = 2;
    SQLServer = 3;
    Custom = 4;
  end;


  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.TraceMode')]
  DNTraceMode = type Integer;
  DNTraceModeHelper = record helper for DNTraceMode
  public const
    SortByTime = 0;
    SortByCategory = 1;
    Default_ = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ClientIDMode')]
  DNClientIDMode = type Integer;
  DNClientIDModeHelper = record helper for DNClientIDMode
  public const
    Inherit = 0;
    AutoID = 1;
    Predictable = 2;
    Static_ = 3;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.CodeBlockType')]
  DNCodeBlockType = type Integer;
  DNCodeBlockTypeHelper = record helper for DNCodeBlockType
  public const
    Code = 0;
    Expression = 1;
    DataBinding = 2;
    EncodedExpression = 3;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.CodeConstructType')]
  DNCodeConstructType = type Integer;
  DNCodeConstructTypeHelper = record helper for DNCodeConstructType
  public const
    CodeSnippet = 0;
    ExpressionSnippet = 1;
    DataBindingSnippet = 2;
    ScriptTag = 3;
    EncodedExpressionSnippet = 4;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.CompilationMode')]
  DNCompilationMode = type Integer;
  DNCompilationModeHelper = record helper for DNCompilationMode
  public const
    Auto = 0;
    Never = 1;
    Always = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ConflictOptions')]
  DNConflictOptions = type Integer;
  DNConflictOptionsHelper = record helper for DNConflictOptions
  public const
    OverwriteChanges = 0;
    CompareAllValues = 1;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.DataSourceCacheExpiry')]
  DNDataSourceCacheExpiry = type Integer;
  DNDataSourceCacheExpiryHelper = record helper for DNDataSourceCacheExpiry
  public const
    Absolute_ = 0;
    Sliding = 1;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.DataSourceCapabilities')]
  DNDataSourceCapabilities = type Integer;
  DNDataSourceCapabilitiesHelper = record helper for DNDataSourceCapabilities
  public const
    None = 0;
    Sort = 1;
    Page = 2;
    RetrieveTotalRowCount = 4;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.DataSourceOperation')]
  DNDataSourceOperation = type Integer;
  DNDataSourceOperationHelper = record helper for DNDataSourceOperation
  public const
    Delete = 0;
    Insert = 1;
    Select = 2;
    Update = 3;
    SelectCount = 4;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.HtmlTextWriterAttribute')]
  DNHtmlTextWriterAttribute = type Integer;
  DNHtmlTextWriterAttributeHelper = record helper for DNHtmlTextWriterAttribute
  public const
    Accesskey = 0;
    Align = 1;
    Alt = 2;
    Background = 3;
    Bgcolor = 4;
    Border = 5;
    Bordercolor = 6;
    Cellpadding = 7;
    Cellspacing = 8;
    Checked = 9;
    Class_ = 10;
    Cols = 11;
    Colspan = 12;
    Disabled = 13;
    For_ = 14;
    Height = 15;
    Href = 16;
    Id = 17;
    Maxlength = 18;
    Multiple = 19;
    Name = 20;
    Nowrap = 21;
    Onchange = 22;
    Onclick = 23;
    ReadOnly = 24;
    Rows = 25;
    Rowspan = 26;
    Rules = 27;
    Selected = 28;
    Size = 29;
    Src = 30;
    Style = 31;
    Tabindex = 32;
    Target = 33;
    Title = 34;
    Type_ = 35;
    Valign = 36;
    Value = 37;
    Width = 38;
    Wrap = 39;
    Abbr = 40;
    AutoComplete = 41;
    Axis = 42;
    Content = 43;
    Coords = 44;
    DesignerRegion = 45;
    Dir = 46;
    Headers = 47;
    Longdesc = 48;
    Rel = 49;
    Scope = 50;
    Shape = 51;
    Usemap = 52;
    VCardName = 53;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.HtmlTextWriterStyle')]
  DNHtmlTextWriterStyle = type Integer;
  DNHtmlTextWriterStyleHelper = record helper for DNHtmlTextWriterStyle
  public const
    BackgroundColor = 0;
    BackgroundImage = 1;
    BorderCollapse = 2;
    BorderColor = 3;
    BorderStyle = 4;
    BorderWidth = 5;
    Color = 6;
    FontFamily = 7;
    FontSize = 8;
    FontStyle = 9;
    FontWeight = 10;
    Height = 11;
    TextDecoration = 12;
    Width = 13;
    ListStyleImage = 14;
    ListStyleType = 15;
    Cursor = 16;
    Direction = 17;
    Display = 18;
    Filter = 19;
    FontVariant = 20;
    Left = 21;
    Margin = 22;
    MarginBottom = 23;
    MarginLeft = 24;
    MarginRight = 25;
    MarginTop = 26;
    Overflow = 27;
    OverflowX = 28;
    OverflowY = 29;
    Padding = 30;
    PaddingBottom = 31;
    PaddingLeft = 32;
    PaddingRight = 33;
    PaddingTop = 34;
    Position = 35;
    TextAlign = 36;
    VerticalAlign = 37;
    TextOverflow = 38;
    Top = 39;
    Visibility = 40;
    WhiteSpace = 41;
    ZIndex = 42;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.HtmlTextWriterTag')]
  DNHtmlTextWriterTag = type Integer;
  DNHtmlTextWriterTagHelper = record helper for DNHtmlTextWriterTag
  public const
    Unknown = 0;
    A = 1;
    Acronym = 2;
    Address = 3;
    Area = 4;
    B = 5;
    Base = 6;
    Basefont = 7;
    Bdo = 8;
    Bgsound = 9;
    Big = 10;
    Blockquote = 11;
    Body = 12;
    Br = 13;
    Button = 14;
    Caption = 15;
    Center = 16;
    Cite = 17;
    Code = 18;
    Col = 19;
    Colgroup = 20;
    Dd = 21;
    Del = 22;
    Dfn = 23;
    Dir = 24;
    Div_ = 25;
    Dl = 26;
    Dt = 27;
    Em = 28;
    Embed = 29;
    Fieldset = 30;
    Font = 31;
    Form = 32;
    Frame = 33;
    Frameset = 34;
    H1 = 35;
    H2 = 36;
    H3 = 37;
    H4 = 38;
    H5 = 39;
    H6 = 40;
    Head = 41;
    Hr = 42;
    Html = 43;
    I = 44;
    Iframe = 45;
    Img = 46;
    Input = 47;
    Ins = 48;
    Isindex = 49;
    Kbd = 50;
    Label_ = 51;
    Legend = 52;
    Li = 53;
    Link = 54;
    Map = 55;
    Marquee = 56;
    Menu = 57;
    Meta = 58;
    Nobr = 59;
    Noframes = 60;
    Noscript = 61;
    Object_ = 62;
    Ol = 63;
    Option = 64;
    P = 65;
    Param = 66;
    Pre = 67;
    Q = 68;
    Rt = 69;
    Ruby = 70;
    S = 71;
    Samp = 72;
    Script = 73;
    Select = 74;
    Small = 75;
    Span = 76;
    Strike = 77;
    Strong = 78;
    Style = 79;
    Sub = 80;
    Sup = 81;
    Table = 82;
    Tbody = 83;
    Td = 84;
    Textarea = 85;
    Tfoot = 86;
    Th = 87;
    Thead = 88;
    Title = 89;
    Tr = 90;
    Tt = 91;
    U = 92;
    Ul = 93;
    Var_ = 94;
    Wbr = 95;
    Xml = 96;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.OutputCacheLocation')]
  DNOutputCacheLocation = type Integer;
  DNOutputCacheLocationHelper = record helper for DNOutputCacheLocation
  public const
    Any = 0;
    Client = 1;
    Downstream = 2;
    Server = 3;
    None = 4;
    ServerAndClient = 5;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.PersistenceMode')]
  DNPersistenceMode = type Integer;
  DNPersistenceModeHelper = record helper for DNPersistenceMode
  public const
    Attribute = 0;
    InnerProperty = 1;
    InnerDefaultProperty = 2;
    EncodedInnerDefaultProperty = 3;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.TemplateInstance')]
  DNTemplateInstance = type Integer;
  DNTemplateInstanceHelper = record helper for DNTemplateInstance
  public const
    Multiple = 0;
    Single = 1;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.UnobtrusiveValidationMode')]
  DNUnobtrusiveValidationMode = type Integer;
  DNUnobtrusiveValidationModeHelper = record helper for DNUnobtrusiveValidationMode
  public const
    None = 0;
    WebForms = 1;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ValidateRequestMode')]
  DNValidateRequestMode = type Integer;
  DNValidateRequestModeHelper = record helper for DNValidateRequestMode
  public const
    Inherit = 0;
    Disabled = 1;
    Enabled = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.VerificationConditionalOperator')]
  DNVerificationConditionalOperator = type Integer;
  DNVerificationConditionalOperatorHelper = record helper for DNVerificationConditionalOperator
  public const
    Equals = 0;
    NotEquals = 1;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.VerificationReportLevel')]
  DNVerificationReportLevel = type Integer;
  DNVerificationReportLevelHelper = record helper for DNVerificationReportLevel
  public const
    Error = 0;
    Warning = 1;
    Guideline = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.VerificationRule')]
  DNVerificationRule = type Integer;
  DNVerificationRuleHelper = record helper for DNVerificationRule
  public const
    Required = 0;
    Prohibited = 1;
    NotEmptyString = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ViewStateEncryptionMode')]
  DNViewStateEncryptionMode = type Integer;
  DNViewStateEncryptionModeHelper = record helper for DNViewStateEncryptionMode
  public const
    Auto = 0;
    Always = 1;
    Never = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ViewStateMode')]
  DNViewStateMode = type Integer;
  DNViewStateModeHelper = record helper for DNViewStateMode
  public const
    Inherit = 0;
    Enabled = 1;
    Disabled = 2;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.VirtualReferenceType')]
  DNVirtualReferenceType = type Integer;
  DNVirtualReferenceTypeHelper = record helper for DNVirtualReferenceType
  public const
    Page = 0;
    UserControl = 1;
    Master = 2;
    SourceFile = 3;
    Other = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.AutoCompleteType')]
  DNAutoCompleteType = type Integer;
  DNAutoCompleteTypeHelper = record helper for DNAutoCompleteType
  public const
    None = 0;
    Disabled = 1;
    Cellular = 2;
    Company = 3;
    Department = 4;
    DisplayName = 5;
    Email = 6;
    FirstName = 7;
    Gender = 8;
    HomeCity = 9;
    HomeCountryRegion = 10;
    HomeFax = 11;
    HomePhone = 12;
    HomeState = 13;
    HomeStreetAddress = 14;
    HomeZipCode = 15;
    Homepage = 16;
    JobTitle = 17;
    LastName = 18;
    MiddleName = 19;
    Notes = 20;
    Office = 21;
    Pager = 22;
    BusinessCity = 23;
    BusinessCountryRegion = 24;
    BusinessFax = 25;
    BusinessPhone = 26;
    BusinessState = 27;
    BusinessStreetAddress = 28;
    BusinessUrl = 29;
    BusinessZipCode = 30;
    Search = 31;
    Enabled = 32;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.BorderStyle')]
  DNBorderStyle = type Integer;
  DNBorderStyleHelper = record helper for DNBorderStyle
  public const
    NotSet = 0;
    None = 1;
    Dotted = 2;
    Dashed = 3;
    Solid = 4;
    Double = 5;
    Groove = 6;
    Ridge = 7;
    Inset = 8;
    Outset = 9;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.BulletedListDisplayMode')]
  DNBulletedListDisplayMode = type Integer;
  DNBulletedListDisplayModeHelper = record helper for DNBulletedListDisplayMode
  public const
    Text = 0;
    HyperLink = 1;
    LinkButton = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.BulletStyle')]
  DNBulletStyle = type Integer;
  DNBulletStyleHelper = record helper for DNBulletStyle
  public const
    NotSet = 0;
    Numbered = 1;
    LowerAlpha = 2;
    UpperAlpha = 3;
    LowerRoman = 4;
    UpperRoman = 5;
    Disc = 6;
    Circle = 7;
    Square = 8;
    CustomImage = 9;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ButtonColumnType')]
  DNButtonColumnType = type Integer;
  DNButtonColumnTypeHelper = record helper for DNButtonColumnType
  public const
    LinkButton = 0;
    PushButton = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ButtonType')]
  DNButtonType = type Integer;
  DNButtonTypeHelper = record helper for DNButtonType
  public const
    Button = 0;
    Image = 1;
    Link = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.CalendarSelectionMode')]
  DNCalendarSelectionMode = type Integer;
  DNCalendarSelectionModeHelper = record helper for DNCalendarSelectionMode
  public const
    None = 0;
    Day = 1;
    DayWeek = 2;
    DayWeekMonth = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ContentDirection')]
  DNContentDirection = type Integer;
  DNContentDirectionHelper = record helper for DNContentDirection
  public const
    NotSet = 0;
    LeftToRight = 1;
    RightToLeft = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DataBoundControlMode')]
  DNDataBoundControlMode = type Integer;
  DNDataBoundControlModeHelper = record helper for DNDataBoundControlMode
  public const
    ReadOnly = 0;
    Edit = 1;
    Insert = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DataControlCellType')]
  DNDataControlCellType = type Integer;
  DNDataControlCellTypeHelper = record helper for DNDataControlCellType
  public const
    Header = 0;
    Footer = 1;
    DataCell = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DataControlRowState')]
  DNDataControlRowState = type Integer;
  DNDataControlRowStateHelper = record helper for DNDataControlRowState
  public const
    Normal = 0;
    Alternate = 1;
    Selected = 2;
    Edit = 4;
    Insert = 8;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DataControlRowType')]
  DNDataControlRowType = type Integer;
  DNDataControlRowTypeHelper = record helper for DNDataControlRowType
  public const
    Header = 0;
    Footer = 1;
    DataRow = 2;
    Separator = 3;
    Pager = 4;
    EmptyDataRow = 5;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DayNameFormat')]
  DNDayNameFormat = type Integer;
  DNDayNameFormatHelper = record helper for DNDayNameFormat
  public const
    Full = 0;
    Short = 1;
    FirstLetter = 2;
    FirstTwoLetters = 3;
    Shortest = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.DetailsViewMode')]
  DNDetailsViewMode = type Integer;
  DNDetailsViewModeHelper = record helper for DNDetailsViewMode
  public const
    ReadOnly = 0;
    Edit = 1;
    Insert = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.FirstDayOfWeek')]
  DNFirstDayOfWeek = type Integer;
  DNFirstDayOfWeekHelper = record helper for DNFirstDayOfWeek
  public const
    Sunday = 0;
    Monday = 1;
    Tuesday = 2;
    Wednesday = 3;
    Thursday = 4;
    Friday = 5;
    Saturday = 6;
    Default_ = 7;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.FontSize')]
  DNFontSize = type Integer;
  DNFontSizeHelper = record helper for DNFontSize
  public const
    NotSet = 0;
    AsUnit = 1;
    Smaller = 2;
    Larger = 3;
    XXSmall = 4;
    XSmall = 5;
    Small = 6;
    Medium = 7;
    Large = 8;
    XLarge = 9;
    XXLarge = 10;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.FormViewMode')]
  DNFormViewMode = type Integer;
  DNFormViewModeHelper = record helper for DNFormViewMode
  public const
    ReadOnly = 0;
    Edit = 1;
    Insert = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.GridLines')]
  DNGridLines = type Integer;
  DNGridLinesHelper = record helper for DNGridLines
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
    Both = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.HorizontalAlign')]
  DNHorizontalAlign = type Integer;
  DNHorizontalAlignHelper = record helper for DNHorizontalAlign
  public const
    NotSet = 0;
    Left = 1;
    Center = 2;
    Right = 3;
    Justify = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.HotSpotMode')]
  DNHotSpotMode = type Integer;
  DNHotSpotModeHelper = record helper for DNHotSpotMode
  public const
    NotSet = 0;
    Navigate = 1;
    PostBack = 2;
    Inactive = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ImageAlign')]
  DNImageAlign = type Integer;
  DNImageAlignHelper = record helper for DNImageAlign
  public const
    NotSet = 0;
    Left = 1;
    Right = 2;
    Baseline = 3;
    Top = 4;
    Middle = 5;
    Bottom = 6;
    AbsBottom = 7;
    AbsMiddle = 8;
    TextTop = 9;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ListItemType')]
  DNListItemType = type Integer;
  DNListItemTypeHelper = record helper for DNListItemType
  public const
    Header = 0;
    Footer = 1;
    Item = 2;
    AlternatingItem = 3;
    SelectedItem = 4;
    EditItem = 5;
    Separator = 6;
    Pager = 7;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ListSelectionMode')]
  DNListSelectionMode = type Integer;
  DNListSelectionModeHelper = record helper for DNListSelectionMode
  public const
    Single = 0;
    Multiple = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.LiteralMode')]
  DNLiteralMode = type Integer;
  DNLiteralModeHelper = record helper for DNLiteralMode
  public const
    Transform = 0;
    PassThrough = 1;
    Encode = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.LoginFailureAction')]
  DNLoginFailureAction = type Integer;
  DNLoginFailureActionHelper = record helper for DNLoginFailureAction
  public const
    Refresh = 0;
    RedirectToLoginPage = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.LoginTextLayout')]
  DNLoginTextLayout = type Integer;
  DNLoginTextLayoutHelper = record helper for DNLoginTextLayout
  public const
    TextOnLeft = 0;
    TextOnTop = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.LogoutAction')]
  DNLogoutAction = type Integer;
  DNLogoutActionHelper = record helper for DNLogoutAction
  public const
    Refresh = 0;
    Redirect = 1;
    RedirectToLoginPage = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.MenuRenderingMode')]
  DNMenuRenderingMode = type Integer;
  DNMenuRenderingModeHelper = record helper for DNMenuRenderingMode
  public const
    Default_ = 0;
    Table = 1;
    List = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.NextPrevFormat')]
  DNNextPrevFormat = type Integer;
  DNNextPrevFormatHelper = record helper for DNNextPrevFormat
  public const
    CustomText = 0;
    ShortMonth = 1;
    FullMonth = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.Orientation')]
  DNOrientation = type Integer;
  DNOrientationHelper = record helper for DNOrientation
  public const
    Horizontal = 0;
    Vertical = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.PagerButtons')]
  DNPagerButtons = type Integer;
  DNPagerButtonsHelper = record helper for DNPagerButtons
  public const
    NextPrevious = 0;
    Numeric = 1;
    NextPreviousFirstLast = 2;
    NumericFirstLast = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.PagerMode')]
  DNPagerMode = type Integer;
  DNPagerModeHelper = record helper for DNPagerMode
  public const
    NextPrev = 0;
    NumericPages = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.PagerPosition')]
  DNPagerPosition = type Integer;
  DNPagerPositionHelper = record helper for DNPagerPosition
  public const
    Bottom = 0;
    Top = 1;
    TopAndBottom = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ParsingCulture')]
  DNParsingCulture = type Integer;
  DNParsingCultureHelper = record helper for DNParsingCulture
  public const
    Invariant = 0;
    Current = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.PathDirection')]
  DNPathDirection = type Integer;
  DNPathDirectionHelper = record helper for DNPathDirection
  public const
    RootToCurrent = 0;
    CurrentToRoot = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.RepeatDirection')]
  DNRepeatDirection = type Integer;
  DNRepeatDirectionHelper = record helper for DNRepeatDirection
  public const
    Horizontal = 0;
    Vertical = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.RepeatLayout')]
  DNRepeatLayout = type Integer;
  DNRepeatLayoutHelper = record helper for DNRepeatLayout
  public const
    Table = 0;
    Flow = 1;
    UnorderedList = 2;
    OrderedList = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ScrollBars')]
  DNScrollBars = type Integer;
  DNScrollBarsHelper = record helper for DNScrollBars
  public const
    None = 0;
    Horizontal = 1;
    Vertical = 2;
    Both = 3;
    Auto = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.SiteMapNodeItemType')]
  DNSiteMapNodeItemType = type Integer;
  DNSiteMapNodeItemTypeHelper = record helper for DNSiteMapNodeItemType
  public const
    Root = 0;
    Parent = 1;
    Current = 2;
    PathSeparator = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.SortDirection')]
  DNSortDirection = type Integer;
  DNSortDirectionHelper = record helper for DNSortDirection
  public const
    Ascending = 0;
    Descending = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceCommandType')]
  DNSqlDataSourceCommandType = type Integer;
  DNSqlDataSourceCommandTypeHelper = record helper for DNSqlDataSourceCommandType
  public const
    Text = 0;
    StoredProcedure = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceMode')]
  DNSqlDataSourceMode = type Integer;
  DNSqlDataSourceModeHelper = record helper for DNSqlDataSourceMode
  public const
    DataReader = 0;
    DataSet = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TableCaptionAlign')]
  DNTableCaptionAlign = type Integer;
  DNTableCaptionAlignHelper = record helper for DNTableCaptionAlign
  public const
    NotSet = 0;
    Top = 1;
    Bottom = 2;
    Left = 3;
    Right = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TableHeaderScope')]
  DNTableHeaderScope = type Integer;
  DNTableHeaderScopeHelper = record helper for DNTableHeaderScope
  public const
    NotSet = 0;
    Row = 1;
    Column = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TableRowSection')]
  DNTableRowSection = type Integer;
  DNTableRowSectionHelper = record helper for DNTableRowSection
  public const
    TableHeader = 0;
    TableBody = 1;
    TableFooter = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TextAlign')]
  DNTextAlign = type Integer;
  DNTextAlignHelper = record helper for DNTextAlign
  public const
    Left = 1;
    Right = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TextBoxMode')]
  DNTextBoxMode = type Integer;
  DNTextBoxModeHelper = record helper for DNTextBoxMode
  public const
    SingleLine = 0;
    MultiLine = 1;
    Password = 2;
    Color = 3;
    Date = 4;
    DateTime = 5;
    DateTimeLocal = 6;
    Email = 7;
    Month = 8;
    Number = 9;
    Range = 10;
    Search = 11;
    Phone = 12;
    Time = 13;
    Url = 14;
    Week = 15;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TitleFormat')]
  DNTitleFormat = type Integer;
  DNTitleFormatHelper = record helper for DNTitleFormat
  public const
    Month = 0;
    MonthYear = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TreeNodeSelectAction')]
  DNTreeNodeSelectAction = type Integer;
  DNTreeNodeSelectActionHelper = record helper for DNTreeNodeSelectAction
  public const
    Select = 0;
    Expand = 1;
    SelectExpand = 2;
    None = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TreeNodeTypes')]
  DNTreeNodeTypes = type Integer;
  DNTreeNodeTypesHelper = record helper for DNTreeNodeTypes
  public const
    None = 0;
    Root = 1;
    Parent = 2;
    Leaf = 4;
    All = 7;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.TreeViewImageSet')]
  DNTreeViewImageSet = type Integer;
  DNTreeViewImageSetHelper = record helper for DNTreeViewImageSet
  public const
    Custom = 0;
    XPFileExplorer = 1;
    Msdn = 2;
    WindowsHelp = 3;
    Simple = 4;
    Simple2 = 5;
    BulletedList = 6;
    BulletedList2 = 7;
    BulletedList3 = 8;
    BulletedList4 = 9;
    Arrows = 10;
    News = 11;
    Contacts = 12;
    Inbox = 13;
    Events = 14;
    Faq = 15;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.UnitType')]
  DNUnitType = type Integer;
  DNUnitTypeHelper = record helper for DNUnitType
  public const
    Pixel = 1;
    Point = 2;
    Pica = 3;
    Inch = 4;
    Mm = 5;
    Cm = 6;
    Percentage = 7;
    Em = 8;
    Ex = 9;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ValidationCompareOperator')]
  DNValidationCompareOperator = type Integer;
  DNValidationCompareOperatorHelper = record helper for DNValidationCompareOperator
  public const
    Equal = 0;
    NotEqual = 1;
    GreaterThan = 2;
    GreaterThanEqual = 3;
    LessThan = 4;
    LessThanEqual = 5;
    DataTypeCheck = 6;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ValidationDataType')]
  DNValidationDataType = type Integer;
  DNValidationDataTypeHelper = record helper for DNValidationDataType
  public const
    String_ = 0;
    Integer = 1;
    Double = 2;
    Date = 3;
    Currency = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ValidationSummaryDisplayMode')]
  DNValidationSummaryDisplayMode = type Integer;
  DNValidationSummaryDisplayModeHelper = record helper for DNValidationSummaryDisplayMode
  public const
    List = 0;
    BulletList = 1;
    SingleParagraph = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ValidatorDisplay')]
  DNValidatorDisplay = type Integer;
  DNValidatorDisplayHelper = record helper for DNValidatorDisplay
  public const
    None = 0;
    Static_ = 1;
    Dynamic_ = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.VerticalAlign')]
  DNVerticalAlign = type Integer;
  DNVerticalAlignHelper = record helper for DNVerticalAlign
  public const
    NotSet = 0;
    Top = 1;
    Middle = 2;
    Bottom = 3;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.PartChromeState')]
  DNPartChromeState = type Integer;
  DNPartChromeStateHelper = record helper for DNPartChromeState
  public const
    Normal = 0;
    Minimized = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.PartChromeType')]
  DNPartChromeType = type Integer;
  DNPartChromeTypeHelper = record helper for DNPartChromeType
  public const
    Default_ = 0;
    TitleAndBorder = 1;
    None = 2;
    TitleOnly = 3;
    BorderOnly = 4;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationScope')]
  DNPersonalizationScope = type Integer;
  DNPersonalizationScopeHelper = record helper for DNPersonalizationScope
  public const
    User = 0;
    Shared = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartExportMode')]
  DNWebPartExportMode = type Integer;
  DNWebPartExportModeHelper = record helper for DNWebPartExportMode
  public const
    None = 0;
    All = 1;
    NonSensitiveData = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartHelpMode')]
  DNWebPartHelpMode = type Integer;
  DNWebPartHelpModeHelper = record helper for DNWebPartHelpMode
  public const
    Modal = 0;
    Modeless = 1;
    Navigate = 2;
  end;


  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartVerbRenderMode')]
  DNWebPartVerbRenderMode = type Integer;
  DNWebPartVerbRenderModeHelper = record helper for DNWebPartVerbRenderMode
  public const
    Menu = 0;
    TitleBar = 1;
  end;


  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.WizardStepType')]
  DNWizardStepType = type Integer;
  DNWizardStepTypeHelper = record helper for DNWizardStepType
  public const
    Auto = 0;
    Complete = 1;
    Finish = 2;
    Start = 3;
    Step = 4;
  end;


  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.XhtmlMobileDocType')]
  DNXhtmlMobileDocType = type Integer;
  DNXhtmlMobileDocTypeHelper = record helper for DNXhtmlMobileDocType
  public const
    XhtmlBasic = 0;
    XhtmlMobileProfile = 1;
    Wml20 = 2;
  end;


  //-------------namespace: System.Web.Util----------------
  [DNTypeName('System.Web.Util.RequestValidationSource')]
  DNRequestValidationSource = type Integer;
  DNRequestValidationSourceHelper = record helper for DNRequestValidationSource
  public const
    QueryString = 0;
    Form = 1;
    Cookies = 2;
    Files = 3;
    RawUrl = 4;
    Path = 5;
    PathInfo = 6;
    Headers = 7;
  end;




type


{ declares }

  DNISessionStateItemCollection = interface; // type: System.Web.SessionState.ISessionStateItemCollection, namespace: System.Web.SessionState
  DNIHierarchicalEnumerable = interface; // type: System.Web.UI.IHierarchicalEnumerable, namespace: System.Web.UI
  DNIAssemblyPostProcessor = interface; // type: System.Web.Compilation.IAssemblyPostProcessor, namespace: System.Web.Compilation
  DNIApplicationMonitor = interface; // type: System.Web.Hosting.IApplicationMonitor, namespace: System.Web.Hosting
  DNIOutputCacheEntry = interface; // type: System.Web.Caching.IOutputCacheEntry, namespace: System.Web.Caching
  DNIImplicitResourceProvider = interface; // type: System.Web.Compilation.IImplicitResourceProvider, namespace: System.Web.Compilation
  DNIResourceProvider = interface; // type: System.Web.Compilation.IResourceProvider, namespace: System.Web.Compilation
  DNIConfigMapPath = interface; // type: System.Web.Configuration.IConfigMapPath, namespace: System.Web.Configuration
  DNIConfigMapPathFactory = interface; // type: System.Web.Configuration.IConfigMapPathFactory, namespace: System.Web.Configuration
  DNIInternalConfigWebHost = interface; // type: System.Web.Configuration.Internal.IInternalConfigWebHost, namespace: System.Web.Configuration.Internal
  DNIRemoteWebConfigurationHostServer = interface; // type: System.Web.Configuration.IRemoteWebConfigurationHostServer, namespace: System.Web.Configuration
  DNIStringLocalizerProvider = interface; // type: System.Web.Globalization.IStringLocalizerProvider, namespace: System.Web.Globalization
  DNIAdphManager = interface; // type: System.Web.Hosting.IAdphManager, namespace: System.Web.Hosting
  DNIAppDomainFactory = interface; // type: System.Web.Hosting.IAppDomainFactory, namespace: System.Web.Hosting
  DNIAppDomainInfo = interface; // type: System.Web.Hosting.IAppDomainInfo, namespace: System.Web.Hosting
  DNIAppDomainInfoEnum = interface; // type: System.Web.Hosting.IAppDomainInfoEnum, namespace: System.Web.Hosting
  DNIApplicationHost = interface; // type: System.Web.Hosting.IApplicationHost, namespace: System.Web.Hosting
  DNIApplicationPreloadManager = interface; // type: System.Web.Hosting.IApplicationPreloadManager, namespace: System.Web.Hosting
  DNIApplicationPreloadUtil = interface; // type: System.Web.Hosting.IApplicationPreloadUtil, namespace: System.Web.Hosting
  DNIAppManagerAppDomainFactory = interface; // type: System.Web.Hosting.IAppManagerAppDomainFactory, namespace: System.Web.Hosting
  DNIISAPIRuntime = interface; // type: System.Web.Hosting.IISAPIRuntime, namespace: System.Web.Hosting
  DNIListenerChannelCallback = interface; // type: System.Web.Hosting.IListenerChannelCallback, namespace: System.Web.Hosting
  DNIPphManager = interface; // type: System.Web.Hosting.IPphManager, namespace: System.Web.Hosting
  DNIProcessHost = interface; // type: System.Web.Hosting.IProcessHost, namespace: System.Web.Hosting
  DNIProcessHostFactoryHelper = interface; // type: System.Web.Hosting.IProcessHostFactoryHelper, namespace: System.Web.Hosting
  DNIProcessHostIdleAndHealthCheck = interface; // type: System.Web.Hosting.IProcessHostIdleAndHealthCheck, namespace: System.Web.Hosting
  DNIProcessHostPreloadClient = interface; // type: System.Web.Hosting.IProcessHostPreloadClient, namespace: System.Web.Hosting
  DNIProcessHostSupportFunctions = interface; // type: System.Web.Hosting.IProcessHostSupportFunctions, namespace: System.Web.Hosting
  DNIProcessPingCallback = interface; // type: System.Web.Hosting.IProcessPingCallback, namespace: System.Web.Hosting
  DNIRegisteredObject = interface; // type: System.Web.Hosting.IRegisteredObject, namespace: System.Web.Hosting
  DNIStopListeningRegisteredObject = interface; // type: System.Web.Hosting.IStopListeningRegisteredObject, namespace: System.Web.Hosting
  DNISuspendibleRegisteredObject = interface; // type: System.Web.Hosting.ISuspendibleRegisteredObject, namespace: System.Web.Hosting
  DNIHtmlString = interface; // type: System.Web.IHtmlString, namespace: System.Web
  DNIHttpHandler = interface; // type: System.Web.IHttpHandler, namespace: System.Web
  DNIHttpAsyncHandler = interface; // type: System.Web.IHttpAsyncHandler, namespace: System.Web
  DNIHttpHandlerFactory = interface; // type: System.Web.IHttpHandlerFactory, namespace: System.Web
  DNIHttpModule = interface; // type: System.Web.IHttpModule, namespace: System.Web
  DNISessionStateModule = interface; // type: System.Web.SessionState.ISessionStateModule, namespace: System.Web.SessionState
  DNIPartitionResolver = interface; // type: System.Web.IPartitionResolver, namespace: System.Web
  DNISubscriptionToken = interface; // type: System.Web.ISubscriptionToken, namespace: System.Web
  DNITlsTokenBindingInfo = interface; // type: System.Web.ITlsTokenBindingInfo, namespace: System.Web
  DNIRegiisUtility = interface; // type: System.Web.Management.IRegiisUtility, namespace: System.Web.Management
  DNIWebEventCustomEvaluator = interface; // type: System.Web.Management.IWebEventCustomEvaluator, namespace: System.Web.Management
  DNIMetadataAware = interface; // type: System.Web.ModelBinding.IMetadataAware, namespace: System.Web.ModelBinding
  DNIModelBinder = interface; // type: System.Web.ModelBinding.IModelBinder, namespace: System.Web.ModelBinding
  DNIModelNameProvider = interface; // type: System.Web.ModelBinding.IModelNameProvider, namespace: System.Web.ModelBinding
  DNIValueProvider = interface; // type: System.Web.ModelBinding.IValueProvider, namespace: System.Web.ModelBinding
  DNIUnvalidatedValueProvider = interface; // type: System.Web.ModelBinding.IUnvalidatedValueProvider, namespace: System.Web.ModelBinding
  DNIValueProviderSource = interface; // type: System.Web.ModelBinding.IValueProviderSource, namespace: System.Web.ModelBinding
  DNIUnvalidatedValueProviderSource = interface; // type: System.Web.ModelBinding.IUnvalidatedValueProviderSource, namespace: System.Web.ModelBinding
  DNIRouteConstraint = interface; // type: System.Web.Routing.IRouteConstraint, namespace: System.Web.Routing
  DNIRouteHandler = interface; // type: System.Web.Routing.IRouteHandler, namespace: System.Web.Routing
  DNIHttpSessionState = interface; // type: System.Web.SessionState.IHttpSessionState, namespace: System.Web.SessionState
  DNIPartialSessionState = interface; // type: System.Web.SessionState.IPartialSessionState, namespace: System.Web.SessionState
  DNIRequiresSessionState = interface; // type: System.Web.SessionState.IRequiresSessionState, namespace: System.Web.SessionState
  DNIReadOnlySessionState = interface; // type: System.Web.SessionState.IReadOnlySessionState, namespace: System.Web.SessionState
  DNISessionIDManager = interface; // type: System.Web.SessionState.ISessionIDManager, namespace: System.Web.SessionState
  DNIStateRuntime = interface; // type: System.Web.SessionState.IStateRuntime, namespace: System.Web.SessionState
  DNIAttributeAccessor = interface; // type: System.Web.UI.IAttributeAccessor, namespace: System.Web.UI
  DNIAutoFieldGenerator = interface; // type: System.Web.UI.IAutoFieldGenerator, namespace: System.Web.UI
  DNIBindableControl = interface; // type: System.Web.UI.IBindableControl, namespace: System.Web.UI
  DNICallbackEventHandler = interface; // type: System.Web.UI.ICallbackEventHandler, namespace: System.Web.UI
  DNICheckBoxControl = interface; // type: System.Web.UI.ICheckBoxControl, namespace: System.Web.UI
  DNICodeBlockTypeAccessor = interface; // type: System.Web.UI.ICodeBlockTypeAccessor, namespace: System.Web.UI
  DNIControlBuilderAccessor = interface; // type: System.Web.UI.IControlBuilderAccessor, namespace: System.Web.UI
  DNIControlDesignerAccessor = interface; // type: System.Web.UI.IControlDesignerAccessor, namespace: System.Web.UI
  DNIDataBindingsAccessor = interface; // type: System.Web.UI.IDataBindingsAccessor, namespace: System.Web.UI
  DNIDataKeysControl = interface; // type: System.Web.UI.IDataKeysControl, namespace: System.Web.UI
  DNIDataSource = interface; // type: System.Web.UI.IDataSource, namespace: System.Web.UI
  DNIDataSourceViewSchemaAccessor = interface; // type: System.Web.UI.IDataSourceViewSchemaAccessor, namespace: System.Web.UI
  DNIExpressionsAccessor = interface; // type: System.Web.UI.IExpressionsAccessor, namespace: System.Web.UI
  DNIFilterResolutionService = interface; // type: System.Web.UI.IFilterResolutionService, namespace: System.Web.UI
  DNIHierarchicalDataSource = interface; // type: System.Web.UI.IHierarchicalDataSource, namespace: System.Web.UI
  DNIHierarchyData = interface; // type: System.Web.UI.IHierarchyData, namespace: System.Web.UI
  DNINamingContainer = interface; // type: System.Web.UI.INamingContainer, namespace: System.Web.UI
  DNIDataItemContainer = interface; // type: System.Web.UI.IDataItemContainer, namespace: System.Web.UI
  DNINavigateUIData = interface; // type: System.Web.UI.INavigateUIData, namespace: System.Web.UI
  DNIParserAccessor = interface; // type: System.Web.UI.IParserAccessor, namespace: System.Web.UI
  DNIPostBackDataHandler = interface; // type: System.Web.UI.IPostBackDataHandler, namespace: System.Web.UI
  DNIPostBackEventHandler = interface; // type: System.Web.UI.IPostBackEventHandler, namespace: System.Web.UI
  DNIResourceUrlGenerator = interface; // type: System.Web.UI.IResourceUrlGenerator, namespace: System.Web.UI
  DNIStateFormatter = interface; // type: System.Web.UI.IStateFormatter, namespace: System.Web.UI
  DNIStateManager = interface; // type: System.Web.UI.IStateManager, namespace: System.Web.UI
  DNIStyleSheet = interface; // type: System.Web.UI.IStyleSheet, namespace: System.Web.UI
  DNITemplate = interface; // type: System.Web.UI.ITemplate, namespace: System.Web.UI
  DNIBindableTemplate = interface; // type: System.Web.UI.IBindableTemplate, namespace: System.Web.UI
  DNITextControl = interface; // type: System.Web.UI.ITextControl, namespace: System.Web.UI
  DNIEditableTextControl = interface; // type: System.Web.UI.IEditableTextControl, namespace: System.Web.UI
  DNIThemeResolutionService = interface; // type: System.Web.UI.IThemeResolutionService, namespace: System.Web.UI
  DNIUrlResolutionService = interface; // type: System.Web.UI.IUrlResolutionService, namespace: System.Web.UI
  DNIUserControlDesignerAccessor = interface; // type: System.Web.UI.IUserControlDesignerAccessor, namespace: System.Web.UI
  DNIUserControlTypeResolutionService = interface; // type: System.Web.UI.IUserControlTypeResolutionService, namespace: System.Web.UI
  DNIValidator = interface; // type: System.Web.UI.IValidator, namespace: System.Web.UI
  DNIButtonControl = interface; // type: System.Web.UI.WebControls.IButtonControl, namespace: System.Web.UI.WebControls
  DNICallbackContainer = interface; // type: System.Web.UI.WebControls.ICallbackContainer, namespace: System.Web.UI.WebControls
  DNICompositeControlDesignerAccessor = interface; // type: System.Web.UI.WebControls.ICompositeControlDesignerAccessor, namespace: System.Web.UI.WebControls
  DNIDataBoundControl = interface; // type: System.Web.UI.WebControls.IDataBoundControl, namespace: System.Web.UI.WebControls
  DNIDataBoundItemControl = interface; // type: System.Web.UI.WebControls.IDataBoundItemControl, namespace: System.Web.UI.WebControls
  DNIDataBoundListControl = interface; // type: System.Web.UI.WebControls.IDataBoundListControl, namespace: System.Web.UI.WebControls
  DNIFieldControl = interface; // type: System.Web.UI.WebControls.IFieldControl, namespace: System.Web.UI.WebControls
  DNIPersistedSelector = interface; // type: System.Web.UI.WebControls.IPersistedSelector, namespace: System.Web.UI.WebControls
  DNIPostBackContainer = interface; // type: System.Web.UI.WebControls.IPostBackContainer, namespace: System.Web.UI.WebControls
  DNIRepeatInfoUser = interface; // type: System.Web.UI.WebControls.IRepeatInfoUser, namespace: System.Web.UI.WebControls
  DNIPersonalizable = interface; // type: System.Web.UI.WebControls.WebParts.IPersonalizable, namespace: System.Web.UI.WebControls.WebParts
  DNITrackingPersonalizable = interface; // type: System.Web.UI.WebControls.WebParts.ITrackingPersonalizable, namespace: System.Web.UI.WebControls.WebParts
  DNITransformerConfigurationControl = interface; // type: System.Web.UI.WebControls.WebParts.ITransformerConfigurationControl, namespace: System.Web.UI.WebControls.WebParts
  DNIVersioningPersonalizable = interface; // type: System.Web.UI.WebControls.WebParts.IVersioningPersonalizable, namespace: System.Web.UI.WebControls.WebParts
  DNIWebActionable = interface; // type: System.Web.UI.WebControls.WebParts.IWebActionable, namespace: System.Web.UI.WebControls.WebParts
  DNIWebEditable = interface; // type: System.Web.UI.WebControls.WebParts.IWebEditable, namespace: System.Web.UI.WebControls.WebParts
  DNIWebPart = interface; // type: System.Web.UI.WebControls.WebParts.IWebPart, namespace: System.Web.UI.WebControls.WebParts
  DNIWebPartField = interface; // type: System.Web.UI.WebControls.WebParts.IWebPartField, namespace: System.Web.UI.WebControls.WebParts
  DNIWebPartParameters = interface; // type: System.Web.UI.WebControls.WebParts.IWebPartParameters, namespace: System.Web.UI.WebControls.WebParts
  DNIWebPartRow = interface; // type: System.Web.UI.WebControls.WebParts.IWebPartRow, namespace: System.Web.UI.WebControls.WebParts
  DNIWebPartTable = interface; // type: System.Web.UI.WebControls.WebParts.IWebPartTable, namespace: System.Web.UI.WebControls.WebParts
  DNIWebObjectFactory = interface; // type: System.Web.Util.IWebObjectFactory, namespace: System.Web.Util
  DNIWebPropertyAccessor = interface; // type: System.Web.Util.IWebPropertyAccessor, namespace: System.Web.Util
  DNMembershipPasswordAttribute = interface; // type: System.Web.Security.MembershipPasswordAttribute, namespace: System.Web.Security
  DNBuildProviderAppliesToAttribute = interface; // type: System.Web.Compilation.BuildProviderAppliesToAttribute, namespace: System.Web.Compilation
  DNDesignTimeResourceProviderFactoryAttribute = interface; // type: System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute, namespace: System.Web.Compilation
  DNExpressionEditorAttribute = interface; // type: System.Web.Compilation.ExpressionEditorAttribute, namespace: System.Web.Compilation
  DNExpressionPrefixAttribute = interface; // type: System.Web.Compilation.ExpressionPrefixAttribute, namespace: System.Web.Compilation
  DNFolderLevelBuildProviderAppliesToAttribute = interface; // type: System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute, namespace: System.Web.Compilation
  DNBindingBehaviorAttribute = interface; // type: System.Web.ModelBinding.BindingBehaviorAttribute, namespace: System.Web.ModelBinding
  DNBindNeverAttribute = interface; // type: System.Web.ModelBinding.BindNeverAttribute, namespace: System.Web.ModelBinding
  DNBindRequiredAttribute = interface; // type: System.Web.ModelBinding.BindRequiredAttribute, namespace: System.Web.ModelBinding
  DNExtensibleModelBinderAttribute = interface; // type: System.Web.ModelBinding.ExtensibleModelBinderAttribute, namespace: System.Web.ModelBinding
  DNModelBinderProviderOptionsAttribute = interface; // type: System.Web.ModelBinding.ModelBinderProviderOptionsAttribute, namespace: System.Web.ModelBinding
  DNUserProfileAttribute = interface; // type: System.Web.ModelBinding.UserProfileAttribute, namespace: System.Web.ModelBinding
  DNValueProviderSourceAttribute = interface; // type: System.Web.ModelBinding.ValueProviderSourceAttribute, namespace: System.Web.ModelBinding
  DNControlAttribute = interface; // type: System.Web.ModelBinding.ControlAttribute, namespace: System.Web.ModelBinding
  DNCookieAttribute = interface; // type: System.Web.ModelBinding.CookieAttribute, namespace: System.Web.ModelBinding
  DNFormAttribute = interface; // type: System.Web.ModelBinding.FormAttribute, namespace: System.Web.ModelBinding
  DNProfileAttribute = interface; // type: System.Web.ModelBinding.ProfileAttribute, namespace: System.Web.ModelBinding
  DNQueryStringAttribute = interface; // type: System.Web.ModelBinding.QueryStringAttribute, namespace: System.Web.ModelBinding
  DNRouteDataAttribute = interface; // type: System.Web.ModelBinding.RouteDataAttribute, namespace: System.Web.ModelBinding
  DNSessionAttribute = interface; // type: System.Web.ModelBinding.SessionAttribute, namespace: System.Web.ModelBinding
  DNViewStateAttribute = interface; // type: System.Web.ModelBinding.ViewStateAttribute, namespace: System.Web.ModelBinding
  DNPreApplicationStartMethodAttribute = interface; // type: System.Web.PreApplicationStartMethodAttribute, namespace: System.Web
  DNCustomProviderDataAttribute = interface; // type: System.Web.Profile.CustomProviderDataAttribute, namespace: System.Web.Profile
  DNProfileProviderAttribute = interface; // type: System.Web.Profile.ProfileProviderAttribute, namespace: System.Web.Profile
  DNSettingsAllowAnonymousAttribute = interface; // type: System.Web.Profile.SettingsAllowAnonymousAttribute, namespace: System.Web.Profile
  DNConstructorNeedsTagAttribute = interface; // type: System.Web.UI.ConstructorNeedsTagAttribute, namespace: System.Web.UI
  DNControlBuilderAttribute = interface; // type: System.Web.UI.ControlBuilderAttribute, namespace: System.Web.UI
  DNControlValuePropertyAttribute = interface; // type: System.Web.UI.ControlValuePropertyAttribute, namespace: System.Web.UI
  DNCssClassPropertyAttribute = interface; // type: System.Web.UI.CssClassPropertyAttribute, namespace: System.Web.UI
  DNDataBindingHandlerAttribute = interface; // type: System.Web.UI.DataBindingHandlerAttribute, namespace: System.Web.UI
  DNDataKeyPropertyAttribute = interface; // type: System.Web.UI.DataKeyPropertyAttribute, namespace: System.Web.UI
  DNFileLevelControlBuilderAttribute = interface; // type: System.Web.UI.FileLevelControlBuilderAttribute, namespace: System.Web.UI
  DNFilterableAttribute = interface; // type: System.Web.UI.FilterableAttribute, namespace: System.Web.UI
  DNIDReferencePropertyAttribute = interface; // type: System.Web.UI.IDReferencePropertyAttribute, namespace: System.Web.UI
  DNNonVisualControlAttribute = interface; // type: System.Web.UI.NonVisualControlAttribute, namespace: System.Web.UI
  DNParseChildrenAttribute = interface; // type: System.Web.UI.ParseChildrenAttribute, namespace: System.Web.UI
  DNPartialCachingAttribute = interface; // type: System.Web.UI.PartialCachingAttribute, namespace: System.Web.UI
  DNPersistChildrenAttribute = interface; // type: System.Web.UI.PersistChildrenAttribute, namespace: System.Web.UI
  DNPersistenceModeAttribute = interface; // type: System.Web.UI.PersistenceModeAttribute, namespace: System.Web.UI
  DNSupportsEventValidationAttribute = interface; // type: System.Web.UI.SupportsEventValidationAttribute, namespace: System.Web.UI
  DNTagPrefixAttribute = interface; // type: System.Web.UI.TagPrefixAttribute, namespace: System.Web.UI
  DNTemplateContainerAttribute = interface; // type: System.Web.UI.TemplateContainerAttribute, namespace: System.Web.UI
  DNTemplateInstanceAttribute = interface; // type: System.Web.UI.TemplateInstanceAttribute, namespace: System.Web.UI
  DNThemeableAttribute = interface; // type: System.Web.UI.ThemeableAttribute, namespace: System.Web.UI
  DNToolboxDataAttribute = interface; // type: System.Web.UI.ToolboxDataAttribute, namespace: System.Web.UI
  DNUrlPropertyAttribute = interface; // type: System.Web.UI.UrlPropertyAttribute, namespace: System.Web.UI
  DNValidationPropertyAttribute = interface; // type: System.Web.UI.ValidationPropertyAttribute, namespace: System.Web.UI
  DNVerificationAttribute = interface; // type: System.Web.UI.VerificationAttribute, namespace: System.Web.UI
  DNViewStateModeByIdAttribute = interface; // type: System.Web.UI.ViewStateModeByIdAttribute, namespace: System.Web.UI
  DNConnectionConsumerAttribute = interface; // type: System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNConnectionProviderAttribute = interface; // type: System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizableAttribute = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizableAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNWebBrowsableAttribute = interface; // type: System.Web.UI.WebControls.WebParts.WebBrowsableAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNWebDescriptionAttribute = interface; // type: System.Web.UI.WebControls.WebParts.WebDescriptionAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNWebDisplayNameAttribute = interface; // type: System.Web.UI.WebControls.WebParts.WebDisplayNameAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartTransformerAttribute = interface; // type: System.Web.UI.WebControls.WebParts.WebPartTransformerAttribute, namespace: System.Web.UI.WebControls.WebParts
  DNWebResourceAttribute = interface; // type: System.Web.UI.WebResourceAttribute, namespace: System.Web.UI
  DNParserErrorCollection = interface; // type: System.Web.ParserErrorCollection, namespace: System.Web
  DNEmbeddedMailObjectsCollection = interface; // type: System.Web.UI.WebControls.EmbeddedMailObjectsCollection, namespace: System.Web.UI.WebControls
  DNRoleGroupCollection = interface; // type: System.Web.UI.WebControls.RoleGroupCollection, namespace: System.Web.UI.WebControls
  DNProxyWebPartConnectionCollection = interface; // type: System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartConnectionCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartConnectionCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDisplayModeCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartTransformerCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartTransformerCollection, namespace: System.Web.UI.WebControls.WebParts
  DNValueProviderCollection = interface; // type: System.Web.ModelBinding.ValueProviderCollection, namespace: System.Web.ModelBinding
  DNModelBinderProviderCollection = interface; // type: System.Web.ModelBinding.ModelBinderProviderCollection, namespace: System.Web.ModelBinding
  DNModelErrorCollection = interface; // type: System.Web.ModelBinding.ModelErrorCollection, namespace: System.Web.ModelBinding
  DNModelValidatorProviderCollection = interface; // type: System.Web.ModelBinding.ModelValidatorProviderCollection, namespace: System.Web.ModelBinding
  DNRouteCollection = interface; // type: System.Web.Routing.RouteCollection, namespace: System.Web.Routing
  DNWebBaseEventCollection = interface; // type: System.Web.Management.WebBaseEventCollection, namespace: System.Web.Management
  DNCatalogPartCollection = interface; // type: System.Web.UI.WebControls.WebParts.CatalogPartCollection, namespace: System.Web.UI.WebControls.WebParts
  DNConnectionInterfaceCollection = interface; // type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection, namespace: System.Web.UI.WebControls.WebParts
  DNConsumerConnectionPointCollection = interface; // type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection, namespace: System.Web.UI.WebControls.WebParts
  DNEditorPartCollection = interface; // type: System.Web.UI.WebControls.WebParts.EditorPartCollection, namespace: System.Web.UI.WebControls.WebParts
  DNProviderConnectionPointCollection = interface; // type: System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection, namespace: System.Web.UI.WebControls.WebParts
  DNTransformerTypeCollection = interface; // type: System.Web.UI.WebControls.WebParts.TransformerTypeCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDescriptionCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartVerbCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartVerbCollection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartZoneCollection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartZoneCollection, namespace: System.Web.UI.WebControls.WebParts
  DNHttpClientCertificate = interface; // type: System.Web.HttpClientCertificate, namespace: System.Web
  DNVirtualDirectoryMappingCollection = interface; // type: System.Web.Configuration.VirtualDirectoryMappingCollection, namespace: System.Web.Configuration
  DNHttpApplicationState = interface; // type: System.Web.HttpApplicationState, namespace: System.Web
  DNHttpApplicationStateBase = interface; // type: System.Web.HttpApplicationStateBase, namespace: System.Web
  DNHttpApplicationStateWrapper = interface; // type: System.Web.HttpApplicationStateWrapper, namespace: System.Web
  DNHttpCookieCollection = interface; // type: System.Web.HttpCookieCollection, namespace: System.Web
  DNHttpFileCollection = interface; // type: System.Web.HttpFileCollection, namespace: System.Web
  DNHttpFileCollectionBase = interface; // type: System.Web.HttpFileCollectionBase, namespace: System.Web
  DNHttpFileCollectionWrapper = interface; // type: System.Web.HttpFileCollectionWrapper, namespace: System.Web
  DNHttpModuleCollection = interface; // type: System.Web.HttpModuleCollection, namespace: System.Web
  DNSessionStateItemCollection = interface; // type: System.Web.SessionState.SessionStateItemCollection, namespace: System.Web.SessionState
  DNAdapterDictionary = interface; // type: System.Web.Configuration.AdapterDictionary, namespace: System.Web.Configuration
  DNDataSourceCacheDurationConverter = interface; // type: System.Web.UI.DataSourceCacheDurationConverter, namespace: System.Web.UI
  DNControlIDConverter = interface; // type: System.Web.UI.WebControls.ControlIDConverter, namespace: System.Web.UI.WebControls
  DNAssociatedControlConverter = interface; // type: System.Web.UI.WebControls.AssociatedControlConverter, namespace: System.Web.UI.WebControls
  DNValidatedControlConverter = interface; // type: System.Web.UI.WebControls.ValidatedControlConverter, namespace: System.Web.UI.WebControls
  DNControlPropertyNameConverter = interface; // type: System.Web.UI.WebControls.ControlPropertyNameConverter, namespace: System.Web.UI.WebControls
  DNTargetConverter = interface; // type: System.Web.UI.WebControls.TargetConverter, namespace: System.Web.UI.WebControls
  DNMachineKeyValidationConverter = interface; // type: System.Web.Configuration.MachineKeyValidationConverter, namespace: System.Web.Configuration
  DNWebColorConverter = interface; // type: System.Web.UI.WebControls.WebColorConverter, namespace: System.Web.UI.WebControls
  DNLowerCaseStringConverter = interface; // type: System.Web.Configuration.LowerCaseStringConverter, namespace: System.Web.Configuration
  DNFontNamesConverter = interface; // type: System.Web.UI.WebControls.FontNamesConverter, namespace: System.Web.UI.WebControls
  DNFontUnitConverter = interface; // type: System.Web.UI.WebControls.FontUnitConverter, namespace: System.Web.UI.WebControls
  DNStringArrayConverter = interface; // type: System.Web.UI.WebControls.StringArrayConverter, namespace: System.Web.UI.WebControls
  DNUnitConverter = interface; // type: System.Web.UI.WebControls.UnitConverter, namespace: System.Web.UI.WebControls
  DNAssemblyCollection = interface; // type: System.Web.Configuration.AssemblyCollection, namespace: System.Web.Configuration
  DNAuthorizationRuleCollection = interface; // type: System.Web.Configuration.AuthorizationRuleCollection, namespace: System.Web.Configuration
  DNBufferModesCollection = interface; // type: System.Web.Configuration.BufferModesCollection, namespace: System.Web.Configuration
  DNBuildProviderCollection = interface; // type: System.Web.Configuration.BuildProviderCollection, namespace: System.Web.Configuration
  DNClientTargetCollection = interface; // type: System.Web.Configuration.ClientTargetCollection, namespace: System.Web.Configuration
  DNCodeSubDirectoriesCollection = interface; // type: System.Web.Configuration.CodeSubDirectoriesCollection, namespace: System.Web.Configuration
  DNCompilerCollection = interface; // type: System.Web.Configuration.CompilerCollection, namespace: System.Web.Configuration
  DNCustomErrorCollection = interface; // type: System.Web.Configuration.CustomErrorCollection, namespace: System.Web.Configuration
  DNEventMappingSettingsCollection = interface; // type: System.Web.Configuration.EventMappingSettingsCollection, namespace: System.Web.Configuration
  DNExpressionBuilderCollection = interface; // type: System.Web.Configuration.ExpressionBuilderCollection, namespace: System.Web.Configuration
  DNFolderLevelBuildProviderCollection = interface; // type: System.Web.Configuration.FolderLevelBuildProviderCollection, namespace: System.Web.Configuration
  DNFormsAuthenticationUserCollection = interface; // type: System.Web.Configuration.FormsAuthenticationUserCollection, namespace: System.Web.Configuration
  DNFullTrustAssemblyCollection = interface; // type: System.Web.Configuration.FullTrustAssemblyCollection, namespace: System.Web.Configuration
  DNHttpHandlerActionCollection = interface; // type: System.Web.Configuration.HttpHandlerActionCollection, namespace: System.Web.Configuration
  DNHttpModuleActionCollection = interface; // type: System.Web.Configuration.HttpModuleActionCollection, namespace: System.Web.Configuration
  DNIgnoreDeviceFilterElementCollection = interface; // type: System.Web.Configuration.IgnoreDeviceFilterElementCollection, namespace: System.Web.Configuration
  DNNamespaceCollection = interface; // type: System.Web.Configuration.NamespaceCollection, namespace: System.Web.Configuration
  DNOutputCacheProfileCollection = interface; // type: System.Web.Configuration.OutputCacheProfileCollection, namespace: System.Web.Configuration
  DNPartialTrustVisibleAssemblyCollection = interface; // type: System.Web.Configuration.PartialTrustVisibleAssemblyCollection, namespace: System.Web.Configuration
  DNProfileGroupSettingsCollection = interface; // type: System.Web.Configuration.ProfileGroupSettingsCollection, namespace: System.Web.Configuration
  DNProfilePropertySettingsCollection = interface; // type: System.Web.Configuration.ProfilePropertySettingsCollection, namespace: System.Web.Configuration
  DNRootProfilePropertySettingsCollection = interface; // type: System.Web.Configuration.RootProfilePropertySettingsCollection, namespace: System.Web.Configuration
  DNProfileSettingsCollection = interface; // type: System.Web.Configuration.ProfileSettingsCollection, namespace: System.Web.Configuration
  DNProtocolCollection = interface; // type: System.Web.Configuration.ProtocolCollection, namespace: System.Web.Configuration
  DNRuleSettingsCollection = interface; // type: System.Web.Configuration.RuleSettingsCollection, namespace: System.Web.Configuration
  DNSqlCacheDependencyDatabaseCollection = interface; // type: System.Web.Configuration.SqlCacheDependencyDatabaseCollection, namespace: System.Web.Configuration
  DNTagMapCollection = interface; // type: System.Web.Configuration.TagMapCollection, namespace: System.Web.Configuration
  DNTagPrefixCollection = interface; // type: System.Web.Configuration.TagPrefixCollection, namespace: System.Web.Configuration
  DNTransformerInfoCollection = interface; // type: System.Web.Configuration.TransformerInfoCollection, namespace: System.Web.Configuration
  DNTrustLevelCollection = interface; // type: System.Web.Configuration.TrustLevelCollection, namespace: System.Web.Configuration
  DNUrlMappingCollection = interface; // type: System.Web.Configuration.UrlMappingCollection, namespace: System.Web.Configuration
  DNAnonymousIdentificationSection = interface; // type: System.Web.Configuration.AnonymousIdentificationSection, namespace: System.Web.Configuration
  DNAuthenticationSection = interface; // type: System.Web.Configuration.AuthenticationSection, namespace: System.Web.Configuration
  DNAuthorizationSection = interface; // type: System.Web.Configuration.AuthorizationSection, namespace: System.Web.Configuration
  DNCacheSection = interface; // type: System.Web.Configuration.CacheSection, namespace: System.Web.Configuration
  DNClientTargetSection = interface; // type: System.Web.Configuration.ClientTargetSection, namespace: System.Web.Configuration
  DNCompilationSection = interface; // type: System.Web.Configuration.CompilationSection, namespace: System.Web.Configuration
  DNCustomErrorsSection = interface; // type: System.Web.Configuration.CustomErrorsSection, namespace: System.Web.Configuration
  DNDeploymentSection = interface; // type: System.Web.Configuration.DeploymentSection, namespace: System.Web.Configuration
  DNFullTrustAssembliesSection = interface; // type: System.Web.Configuration.FullTrustAssembliesSection, namespace: System.Web.Configuration
  DNGlobalizationSection = interface; // type: System.Web.Configuration.GlobalizationSection, namespace: System.Web.Configuration
  DNHealthMonitoringSection = interface; // type: System.Web.Configuration.HealthMonitoringSection, namespace: System.Web.Configuration
  DNHostingEnvironmentSection = interface; // type: System.Web.Configuration.HostingEnvironmentSection, namespace: System.Web.Configuration
  DNHttpCookiesSection = interface; // type: System.Web.Configuration.HttpCookiesSection, namespace: System.Web.Configuration
  DNHttpHandlersSection = interface; // type: System.Web.Configuration.HttpHandlersSection, namespace: System.Web.Configuration
  DNHttpModulesSection = interface; // type: System.Web.Configuration.HttpModulesSection, namespace: System.Web.Configuration
  DNHttpRuntimeSection = interface; // type: System.Web.Configuration.HttpRuntimeSection, namespace: System.Web.Configuration
  DNIdentitySection = interface; // type: System.Web.Configuration.IdentitySection, namespace: System.Web.Configuration
  DNMachineKeySection = interface; // type: System.Web.Configuration.MachineKeySection, namespace: System.Web.Configuration
  DNMembershipSection = interface; // type: System.Web.Configuration.MembershipSection, namespace: System.Web.Configuration
  DNOutputCacheSection = interface; // type: System.Web.Configuration.OutputCacheSection, namespace: System.Web.Configuration
  DNOutputCacheSettingsSection = interface; // type: System.Web.Configuration.OutputCacheSettingsSection, namespace: System.Web.Configuration
  DNPagesSection = interface; // type: System.Web.Configuration.PagesSection, namespace: System.Web.Configuration
  DNPartialTrustVisibleAssembliesSection = interface; // type: System.Web.Configuration.PartialTrustVisibleAssembliesSection, namespace: System.Web.Configuration
  DNProcessModelSection = interface; // type: System.Web.Configuration.ProcessModelSection, namespace: System.Web.Configuration
  DNProfileSection = interface; // type: System.Web.Configuration.ProfileSection, namespace: System.Web.Configuration
  DNProtocolsSection = interface; // type: System.Web.Configuration.ProtocolsSection, namespace: System.Web.Configuration
  DNRoleManagerSection = interface; // type: System.Web.Configuration.RoleManagerSection, namespace: System.Web.Configuration
  DNSecurityPolicySection = interface; // type: System.Web.Configuration.SecurityPolicySection, namespace: System.Web.Configuration
  DNSessionPageStateSection = interface; // type: System.Web.Configuration.SessionPageStateSection, namespace: System.Web.Configuration
  DNSessionStateSection = interface; // type: System.Web.Configuration.SessionStateSection, namespace: System.Web.Configuration
  DNSiteMapSection = interface; // type: System.Web.Configuration.SiteMapSection, namespace: System.Web.Configuration
  DNSqlCacheDependencySection = interface; // type: System.Web.Configuration.SqlCacheDependencySection, namespace: System.Web.Configuration
  DNTraceSection = interface; // type: System.Web.Configuration.TraceSection, namespace: System.Web.Configuration
  DNTrustSection = interface; // type: System.Web.Configuration.TrustSection, namespace: System.Web.Configuration
  DNUrlMappingsSection = interface; // type: System.Web.Configuration.UrlMappingsSection, namespace: System.Web.Configuration
  DNWebControlsSection = interface; // type: System.Web.Configuration.WebControlsSection, namespace: System.Web.Configuration
  DNWebPartsSection = interface; // type: System.Web.Configuration.WebPartsSection, namespace: System.Web.Configuration
  DNXhtmlConformanceSection = interface; // type: System.Web.Configuration.XhtmlConformanceSection, namespace: System.Web.Configuration
  DNAssemblyInfo = interface; // type: System.Web.Configuration.AssemblyInfo, namespace: System.Web.Configuration
  DNAuthorizationRule = interface; // type: System.Web.Configuration.AuthorizationRule, namespace: System.Web.Configuration
  DNBufferModeSettings = interface; // type: System.Web.Configuration.BufferModeSettings, namespace: System.Web.Configuration
  DNConfiguration_BuildProvider = interface; // type: System.Web.Configuration.BuildProvider, namespace: System.Web.Configuration
  DNClientTarget = interface; // type: System.Web.Configuration.ClientTarget, namespace: System.Web.Configuration
  DNCodeSubDirectory = interface; // type: System.Web.Configuration.CodeSubDirectory, namespace: System.Web.Configuration
  DNCompiler = interface; // type: System.Web.Configuration.Compiler, namespace: System.Web.Configuration
  DNCustomError = interface; // type: System.Web.Configuration.CustomError, namespace: System.Web.Configuration
  DNEventMappingSettings = interface; // type: System.Web.Configuration.EventMappingSettings, namespace: System.Web.Configuration
  DNConfiguration_ExpressionBuilder = interface; // type: System.Web.Configuration.ExpressionBuilder, namespace: System.Web.Configuration
  DNFolderLevelBuildProvider = interface; // type: System.Web.Configuration.FolderLevelBuildProvider, namespace: System.Web.Configuration
  DNFormsAuthenticationConfiguration = interface; // type: System.Web.Configuration.FormsAuthenticationConfiguration, namespace: System.Web.Configuration
  DNFormsAuthenticationCredentials = interface; // type: System.Web.Configuration.FormsAuthenticationCredentials, namespace: System.Web.Configuration
  DNFormsAuthenticationUser = interface; // type: System.Web.Configuration.FormsAuthenticationUser, namespace: System.Web.Configuration
  DNFullTrustAssembly = interface; // type: System.Web.Configuration.FullTrustAssembly, namespace: System.Web.Configuration
  DNHttpHandlerAction = interface; // type: System.Web.Configuration.HttpHandlerAction, namespace: System.Web.Configuration
  DNHttpModuleAction = interface; // type: System.Web.Configuration.HttpModuleAction, namespace: System.Web.Configuration
  DNIgnoreDeviceFilterElement = interface; // type: System.Web.Configuration.IgnoreDeviceFilterElement, namespace: System.Web.Configuration
  DNNamespaceInfo = interface; // type: System.Web.Configuration.NamespaceInfo, namespace: System.Web.Configuration
  DNOutputCacheProfile = interface; // type: System.Web.Configuration.OutputCacheProfile, namespace: System.Web.Configuration
  DNPartialTrustVisibleAssembly = interface; // type: System.Web.Configuration.PartialTrustVisibleAssembly, namespace: System.Web.Configuration
  DNPassportAuthentication = interface; // type: System.Web.Configuration.PassportAuthentication, namespace: System.Web.Configuration
  DNProfileGroupSettings = interface; // type: System.Web.Configuration.ProfileGroupSettings, namespace: System.Web.Configuration
  DNProfilePropertySettings = interface; // type: System.Web.Configuration.ProfilePropertySettings, namespace: System.Web.Configuration
  DNProfileSettings = interface; // type: System.Web.Configuration.ProfileSettings, namespace: System.Web.Configuration
  DNProtocolElement = interface; // type: System.Web.Configuration.ProtocolElement, namespace: System.Web.Configuration
  DNRuleSettings = interface; // type: System.Web.Configuration.RuleSettings, namespace: System.Web.Configuration
  DNSqlCacheDependencyDatabase = interface; // type: System.Web.Configuration.SqlCacheDependencyDatabase, namespace: System.Web.Configuration
  DNTagMapInfo = interface; // type: System.Web.Configuration.TagMapInfo, namespace: System.Web.Configuration
  DNTagPrefixInfo = interface; // type: System.Web.Configuration.TagPrefixInfo, namespace: System.Web.Configuration
  DNTransformerInfo = interface; // type: System.Web.Configuration.TransformerInfo, namespace: System.Web.Configuration
  DNTrustLevel = interface; // type: System.Web.Configuration.TrustLevel, namespace: System.Web.Configuration
  DNUrlMapping = interface; // type: System.Web.Configuration.UrlMapping, namespace: System.Web.Configuration
  DNWebPartsPersonalization = interface; // type: System.Web.Configuration.WebPartsPersonalization, namespace: System.Web.Configuration
  DNWebPartsPersonalizationAuthorization = interface; // type: System.Web.Configuration.WebPartsPersonalizationAuthorization, namespace: System.Web.Configuration
  DNWebConfigurationFileMap = interface; // type: System.Web.Configuration.WebConfigurationFileMap, namespace: System.Web.Configuration
  DNSystemWebCachingSectionGroup = interface; // type: System.Web.Configuration.SystemWebCachingSectionGroup, namespace: System.Web.Configuration
  DNProfileProvider = interface; // type: System.Web.Profile.ProfileProvider, namespace: System.Web.Profile
  DNSqlProfileProvider = interface; // type: System.Web.Profile.SqlProfileProvider, namespace: System.Web.Profile
  DNCacheStoreProvider = interface; // type: System.Web.Caching.CacheStoreProvider, namespace: System.Web.Caching
  DNOutputCacheProvider = interface; // type: System.Web.Caching.OutputCacheProvider, namespace: System.Web.Caching
  DNOutputCacheProviderAsync = interface; // type: System.Web.Caching.OutputCacheProviderAsync, namespace: System.Web.Caching
  DNWebEventProvider = interface; // type: System.Web.Management.WebEventProvider, namespace: System.Web.Management
  DNBufferedWebEventProvider = interface; // type: System.Web.Management.BufferedWebEventProvider, namespace: System.Web.Management
  DNMailWebEventProvider = interface; // type: System.Web.Management.MailWebEventProvider, namespace: System.Web.Management
  DNSimpleMailWebEventProvider = interface; // type: System.Web.Management.SimpleMailWebEventProvider, namespace: System.Web.Management
  DNTemplatedMailWebEventProvider = interface; // type: System.Web.Management.TemplatedMailWebEventProvider, namespace: System.Web.Management
  DNSqlWebEventProvider = interface; // type: System.Web.Management.SqlWebEventProvider, namespace: System.Web.Management
  DNEventLogWebEventProvider = interface; // type: System.Web.Management.EventLogWebEventProvider, namespace: System.Web.Management
  DNIisTraceWebEventProvider = interface; // type: System.Web.Management.IisTraceWebEventProvider, namespace: System.Web.Management
  DNTraceWebEventProvider = interface; // type: System.Web.Management.TraceWebEventProvider, namespace: System.Web.Management
  DNWmiWebEventProvider = interface; // type: System.Web.Management.WmiWebEventProvider, namespace: System.Web.Management
  DNActiveDirectoryMembershipProvider = interface; // type: System.Web.Security.ActiveDirectoryMembershipProvider, namespace: System.Web.Security
  DNSqlMembershipProvider = interface; // type: System.Web.Security.SqlMembershipProvider, namespace: System.Web.Security
  DNAuthorizationStoreRoleProvider = interface; // type: System.Web.Security.AuthorizationStoreRoleProvider, namespace: System.Web.Security
  DNSqlRoleProvider = interface; // type: System.Web.Security.SqlRoleProvider, namespace: System.Web.Security
  DNWindowsTokenRoleProvider = interface; // type: System.Web.Security.WindowsTokenRoleProvider, namespace: System.Web.Security
  DNSessionStateStoreProviderBase = interface; // type: System.Web.SessionState.SessionStateStoreProviderBase, namespace: System.Web.SessionState
  DNSiteMapProvider = interface; // type: System.Web.SiteMapProvider, namespace: System.Web
  DNStaticSiteMapProvider = interface; // type: System.Web.StaticSiteMapProvider, namespace: System.Web
  DNXmlSiteMapProvider = interface; // type: System.Web.XmlSiteMapProvider, namespace: System.Web
  DNPersonalizationProvider = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationProvider, namespace: System.Web.UI.WebControls.WebParts
  DNSqlPersonalizationProvider = interface; // type: System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider, namespace: System.Web.UI.WebControls.WebParts
  DNProfileProviderCollection = interface; // type: System.Web.Profile.ProfileProviderCollection, namespace: System.Web.Profile
  DNOutputCacheProviderCollection = interface; // type: System.Web.Caching.OutputCacheProviderCollection, namespace: System.Web.Caching
  DNRoleProviderCollection = interface; // type: System.Web.Security.RoleProviderCollection, namespace: System.Web.Security
  DNSiteMapProviderCollection = interface; // type: System.Web.SiteMapProviderCollection, namespace: System.Web
  DNPersonalizationProviderCollection = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection, namespace: System.Web.UI.WebControls.WebParts
  DNProfileBase = interface; // type: System.Web.Profile.ProfileBase, namespace: System.Web.Profile
  DNDefaultProfile = interface; // type: System.Web.Profile.DefaultProfile, namespace: System.Web.Profile
  DNModelValidatingEventArgs = interface; // type: System.Web.ModelBinding.ModelValidatingEventArgs, namespace: System.Web.ModelBinding
  DNDetailsViewDeleteEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewDeleteEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewInsertEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewInsertEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewModeEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewModeEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewPageEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewPageEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewUpdateEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewUpdateEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewDeleteEventArgs = interface; // type: System.Web.UI.WebControls.FormViewDeleteEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewInsertEventArgs = interface; // type: System.Web.UI.WebControls.FormViewInsertEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewModeEventArgs = interface; // type: System.Web.UI.WebControls.FormViewModeEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewPageEventArgs = interface; // type: System.Web.UI.WebControls.FormViewPageEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewUpdateEventArgs = interface; // type: System.Web.UI.WebControls.FormViewUpdateEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewCancelEditEventArgs = interface; // type: System.Web.UI.WebControls.GridViewCancelEditEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewDeleteEventArgs = interface; // type: System.Web.UI.WebControls.GridViewDeleteEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewEditEventArgs = interface; // type: System.Web.UI.WebControls.GridViewEditEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewPageEventArgs = interface; // type: System.Web.UI.WebControls.GridViewPageEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewSelectEventArgs = interface; // type: System.Web.UI.WebControls.GridViewSelectEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewSortEventArgs = interface; // type: System.Web.UI.WebControls.GridViewSortEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewUpdateEventArgs = interface; // type: System.Web.UI.WebControls.GridViewUpdateEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceDisposingEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceFilteringEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceMethodEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceSelectingEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs, namespace: System.Web.UI.WebControls
  DNSqlDataSourceCommandEventArgs = interface; // type: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs, namespace: System.Web.UI.WebControls
  DNSqlDataSourceSelectingEventArgs = interface; // type: System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs, namespace: System.Web.UI.WebControls
  DNSqlDataSourceFilteringEventArgs = interface; // type: System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs, namespace: System.Web.UI.WebControls
  DNWebPartCancelEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartAddingEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartMovingEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartConnectionsCancelEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDisplayModeCancelEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNBuildManagerHostUnloadEventArgs = interface; // type: System.Web.Compilation.BuildManagerHostUnloadEventArgs, namespace: System.Web.Compilation
  DNModelValidatedEventArgs = interface; // type: System.Web.ModelBinding.ModelValidatedEventArgs, namespace: System.Web.ModelBinding
  DNProfileAutoSaveEventArgs = interface; // type: System.Web.Profile.ProfileAutoSaveEventArgs, namespace: System.Web.Profile
  DNProfileEventArgs = interface; // type: System.Web.Profile.ProfileEventArgs, namespace: System.Web.Profile
  DNProfileMigrateEventArgs = interface; // type: System.Web.Profile.ProfileMigrateEventArgs, namespace: System.Web.Profile
  DNAnonymousIdentificationEventArgs = interface; // type: System.Web.Security.AnonymousIdentificationEventArgs, namespace: System.Web.Security
  DNDefaultAuthenticationEventArgs = interface; // type: System.Web.Security.DefaultAuthenticationEventArgs, namespace: System.Web.Security
  DNFormsAuthenticationEventArgs = interface; // type: System.Web.Security.FormsAuthenticationEventArgs, namespace: System.Web.Security
  DNPassportAuthenticationEventArgs = interface; // type: System.Web.Security.PassportAuthenticationEventArgs, namespace: System.Web.Security
  DNRoleManagerEventArgs = interface; // type: System.Web.Security.RoleManagerEventArgs, namespace: System.Web.Security
  DNWindowsAuthenticationEventArgs = interface; // type: System.Web.Security.WindowsAuthenticationEventArgs, namespace: System.Web.Security
  DNSiteMapResolveEventArgs = interface; // type: System.Web.SiteMapResolveEventArgs, namespace: System.Web
  DNTraceContextEventArgs = interface; // type: System.Web.TraceContextEventArgs, namespace: System.Web
  DNImageClickEventArgs = interface; // type: System.Web.UI.ImageClickEventArgs, namespace: System.Web.UI
  DNAdCreatedEventArgs = interface; // type: System.Web.UI.WebControls.AdCreatedEventArgs, namespace: System.Web.UI.WebControls
  DNAuthenticateEventArgs = interface; // type: System.Web.UI.WebControls.AuthenticateEventArgs, namespace: System.Web.UI.WebControls
  DNBulletedListEventArgs = interface; // type: System.Web.UI.WebControls.BulletedListEventArgs, namespace: System.Web.UI.WebControls
  DNCallingDataMethodsEventArgs = interface; // type: System.Web.UI.WebControls.CallingDataMethodsEventArgs, namespace: System.Web.UI.WebControls
  DNCommandEventArgs = interface; // type: System.Web.UI.WebControls.CommandEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridCommandEventArgs = interface; // type: System.Web.UI.WebControls.DataGridCommandEventArgs, namespace: System.Web.UI.WebControls
  DNDataListCommandEventArgs = interface; // type: System.Web.UI.WebControls.DataListCommandEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewCommandEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewCommandEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewCommandEventArgs = interface; // type: System.Web.UI.WebControls.FormViewCommandEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewCommandEventArgs = interface; // type: System.Web.UI.WebControls.GridViewCommandEventArgs, namespace: System.Web.UI.WebControls
  DNMenuEventArgs = interface; // type: System.Web.UI.WebControls.MenuEventArgs, namespace: System.Web.UI.WebControls
  DNRepeaterCommandEventArgs = interface; // type: System.Web.UI.WebControls.RepeaterCommandEventArgs, namespace: System.Web.UI.WebControls
  DNCreateUserErrorEventArgs = interface; // type: System.Web.UI.WebControls.CreateUserErrorEventArgs, namespace: System.Web.UI.WebControls
  DNCreatingModelDataSourceEventArgs = interface; // type: System.Web.UI.WebControls.CreatingModelDataSourceEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridItemEventArgs = interface; // type: System.Web.UI.WebControls.DataGridItemEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridPageChangedEventArgs = interface; // type: System.Web.UI.WebControls.DataGridPageChangedEventArgs, namespace: System.Web.UI.WebControls
  DNDataGridSortCommandEventArgs = interface; // type: System.Web.UI.WebControls.DataGridSortCommandEventArgs, namespace: System.Web.UI.WebControls
  DNDataListItemEventArgs = interface; // type: System.Web.UI.WebControls.DataListItemEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewDeletedEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewDeletedEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewInsertedEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewInsertedEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewUpdatedEventArgs = interface; // type: System.Web.UI.WebControls.DetailsViewUpdatedEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewDeletedEventArgs = interface; // type: System.Web.UI.WebControls.FormViewDeletedEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewInsertedEventArgs = interface; // type: System.Web.UI.WebControls.FormViewInsertedEventArgs, namespace: System.Web.UI.WebControls
  DNFormViewUpdatedEventArgs = interface; // type: System.Web.UI.WebControls.FormViewUpdatedEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewDeletedEventArgs = interface; // type: System.Web.UI.WebControls.GridViewDeletedEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewRowEventArgs = interface; // type: System.Web.UI.WebControls.GridViewRowEventArgs, namespace: System.Web.UI.WebControls
  DNGridViewUpdatedEventArgs = interface; // type: System.Web.UI.WebControls.GridViewUpdatedEventArgs, namespace: System.Web.UI.WebControls
  DNImageMapEventArgs = interface; // type: System.Web.UI.WebControls.ImageMapEventArgs, namespace: System.Web.UI.WebControls
  DNLoginCancelEventArgs = interface; // type: System.Web.UI.WebControls.LoginCancelEventArgs, namespace: System.Web.UI.WebControls
  DNMailMessageEventArgs = interface; // type: System.Web.UI.WebControls.MailMessageEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceEventArgs, namespace: System.Web.UI.WebControls
  DNObjectDataSourceStatusEventArgs = interface; // type: System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs, namespace: System.Web.UI.WebControls
  DNRepeaterItemEventArgs = interface; // type: System.Web.UI.WebControls.RepeaterItemEventArgs, namespace: System.Web.UI.WebControls
  DNSendMailErrorEventArgs = interface; // type: System.Web.UI.WebControls.SendMailErrorEventArgs, namespace: System.Web.UI.WebControls
  DNServerValidateEventArgs = interface; // type: System.Web.UI.WebControls.ServerValidateEventArgs, namespace: System.Web.UI.WebControls
  DNSiteMapNodeItemEventArgs = interface; // type: System.Web.UI.WebControls.SiteMapNodeItemEventArgs, namespace: System.Web.UI.WebControls
  DNSqlDataSourceStatusEventArgs = interface; // type: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs, namespace: System.Web.UI.WebControls
  DNTreeNodeEventArgs = interface; // type: System.Web.UI.WebControls.TreeNodeEventArgs, namespace: System.Web.UI.WebControls
  DNWebPartAuthorizationEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartConnectionsEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDisplayModeEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartVerbsEventArgs = interface; // type: System.Web.UI.WebControls.WebParts.WebPartVerbsEventArgs, namespace: System.Web.UI.WebControls.WebParts
  DNWizardNavigationEventArgs = interface; // type: System.Web.UI.WebControls.WizardNavigationEventArgs, namespace: System.Web.UI.WebControls
  DNHttpException = interface; // type: System.Web.HttpException, namespace: System.Web
  DNHttpCompileException = interface; // type: System.Web.HttpCompileException, namespace: System.Web
  DNHttpParseException = interface; // type: System.Web.HttpParseException, namespace: System.Web
  DNHttpRequestValidationException = interface; // type: System.Web.HttpRequestValidationException, namespace: System.Web
  DNHttpUnhandledException = interface; // type: System.Web.HttpUnhandledException, namespace: System.Web
  DNDatabaseNotEnabledForNotificationException = interface; // type: System.Web.Caching.DatabaseNotEnabledForNotificationException, namespace: System.Web.Caching
  DNTableNotEnabledForNotificationException = interface; // type: System.Web.Caching.TableNotEnabledForNotificationException, namespace: System.Web.Caching
  DNSqlExecutionException = interface; // type: System.Web.Management.SqlExecutionException, namespace: System.Web.Management
  DNViewStateException = interface; // type: System.Web.UI.ViewStateException, namespace: System.Web.UI
  DNStyle = interface; // type: System.Web.UI.WebControls.Style, namespace: System.Web.UI.WebControls
  DNMenuItemStyle = interface; // type: System.Web.UI.WebControls.MenuItemStyle, namespace: System.Web.UI.WebControls
  DNPanelStyle = interface; // type: System.Web.UI.WebControls.PanelStyle, namespace: System.Web.UI.WebControls
  DNSubMenuStyle = interface; // type: System.Web.UI.WebControls.SubMenuStyle, namespace: System.Web.UI.WebControls
  DNTableItemStyle = interface; // type: System.Web.UI.WebControls.TableItemStyle, namespace: System.Web.UI.WebControls
  DNDataGridPagerStyle = interface; // type: System.Web.UI.WebControls.DataGridPagerStyle, namespace: System.Web.UI.WebControls
  DNTitleStyle = interface; // type: System.Web.UI.WebControls.WebParts.TitleStyle, namespace: System.Web.UI.WebControls.WebParts
  DNTableSectionStyle = interface; // type: System.Web.UI.WebControls.TableSectionStyle, namespace: System.Web.UI.WebControls
  DNTableStyle = interface; // type: System.Web.UI.WebControls.TableStyle, namespace: System.Web.UI.WebControls
  DNWebPartMenuStyle = interface; // type: System.Web.UI.WebControls.WebParts.WebPartMenuStyle, namespace: System.Web.UI.WebControls.WebParts
  DNTreeNodeStyle = interface; // type: System.Web.UI.WebControls.TreeNodeStyle, namespace: System.Web.UI.WebControls
  DNIisTraceListener = interface; // type: System.Web.IisTraceListener, namespace: System.Web
  DNWebPageTraceListener = interface; // type: System.Web.WebPageTraceListener, namespace: System.Web
  DNHttpWriter = interface; // type: System.Web.HttpWriter, namespace: System.Web
  DNHtmlTextWriter = interface; // type: System.Web.UI.HtmlTextWriter, namespace: System.Web.UI
  DNHtml32TextWriter = interface; // type: System.Web.UI.Html32TextWriter, namespace: System.Web.UI
  DNChtmlTextWriter = interface; // type: System.Web.UI.ChtmlTextWriter, namespace: System.Web.UI
  DNXhtmlTextWriter = interface; // type: System.Web.UI.XhtmlTextWriter, namespace: System.Web.UI
  DNClientBuildManager = interface; // type: System.Web.Compilation.ClientBuildManager, namespace: System.Web.Compilation
  DNClientBuildManagerCallback = interface; // type: System.Web.Compilation.ClientBuildManagerCallback, namespace: System.Web.Compilation
  DNAppDomainProtocolHandler = interface; // type: System.Web.Hosting.AppDomainProtocolHandler, namespace: System.Web.Hosting
  DNApplicationManager = interface; // type: System.Web.Hosting.ApplicationManager, namespace: System.Web.Hosting
  DNHostingEnvironment = interface; // type: System.Web.Hosting.HostingEnvironment, namespace: System.Web.Hosting
  DNISAPIRuntime = interface; // type: System.Web.Hosting.ISAPIRuntime, namespace: System.Web.Hosting
  DNProcessHost = interface; // type: System.Web.Hosting.ProcessHost, namespace: System.Web.Hosting
  DNProcessHostFactoryHelper = interface; // type: System.Web.Hosting.ProcessHostFactoryHelper, namespace: System.Web.Hosting
  DNProcessProtocolHandler = interface; // type: System.Web.Hosting.ProcessProtocolHandler, namespace: System.Web.Hosting
  DNRecycleLimitMonitor = interface; // type: System.Web.Hosting.RecycleLimitMonitor, namespace: System.Web.Hosting
  DNRecycleLimitMonitor_RecycleLimitMonitorSingleton = interface; // type: System.Web.Hosting.RecycleLimitMonitor+RecycleLimitMonitorSingleton, namespace: System.Web.Hosting
  DNVirtualFileBase = interface; // type: System.Web.Hosting.VirtualFileBase, namespace: System.Web.Hosting
  DNVirtualDirectory = interface; // type: System.Web.Hosting.VirtualDirectory, namespace: System.Web.Hosting
  DNVirtualFile = interface; // type: System.Web.Hosting.VirtualFile, namespace: System.Web.Hosting
  DNVirtualPathProvider = interface; // type: System.Web.Hosting.VirtualPathProvider, namespace: System.Web.Hosting
  DNAspNetWebSocket = interface; // type: System.Web.WebSockets.AspNetWebSocket, namespace: System.Web.WebSockets
  DNAspNetWebSocketContext = interface; // type: System.Web.WebSockets.AspNetWebSocketContext, namespace: System.Web.WebSockets
  DNFormsIdentity = interface; // type: System.Web.Security.FormsIdentity, namespace: System.Web.Security
  DNPassportPrincipal = interface; // type: System.Web.Security.PassportPrincipal, namespace: System.Web.Security
  DNRolePrincipal = interface; // type: System.Web.Security.RolePrincipal, namespace: System.Web.Security
  DNFontUnit = interface; // type: System.Web.UI.WebControls.FontUnit, namespace: System.Web.UI.WebControls
  DNUnit = interface; // type: System.Web.UI.WebControls.Unit, namespace: System.Web.UI.WebControls
  DNCache = interface; // type: System.Web.Caching.Cache, namespace: System.Web.Caching
  DNCacheDependency = interface; // type: System.Web.Caching.CacheDependency, namespace: System.Web.Caching
  DNAggregateCacheDependency = interface; // type: System.Web.Caching.AggregateCacheDependency, namespace: System.Web.Caching
  DNSqlCacheDependency = interface; // type: System.Web.Caching.SqlCacheDependency, namespace: System.Web.Caching
  DNCacheInsertOptions = interface; // type: System.Web.Caching.CacheInsertOptions, namespace: System.Web.Caching
  DNHeaderElement = interface; // type: System.Web.Caching.HeaderElement, namespace: System.Web.Caching
  DNOutputCache = interface; // type: System.Web.Caching.OutputCache, namespace: System.Web.Caching
  DNOutputCacheUtility = interface; // type: System.Web.Caching.OutputCacheUtility, namespace: System.Web.Caching
  DNResponseElement = interface; // type: System.Web.Caching.ResponseElement, namespace: System.Web.Caching
  DNFileResponseElement = interface; // type: System.Web.Caching.FileResponseElement, namespace: System.Web.Caching
  DNMemoryResponseElement = interface; // type: System.Web.Caching.MemoryResponseElement, namespace: System.Web.Caching
  DNSubstitutionResponseElement = interface; // type: System.Web.Caching.SubstitutionResponseElement, namespace: System.Web.Caching
  DNSqlCacheDependencyAdmin = interface; // type: System.Web.Caching.SqlCacheDependencyAdmin, namespace: System.Web.Caching
  DNAssemblyBuilder = interface; // type: System.Web.Compilation.AssemblyBuilder, namespace: System.Web.Compilation
  DNBuildDependencySet = interface; // type: System.Web.Compilation.BuildDependencySet, namespace: System.Web.Compilation
  DNBuildManager = interface; // type: System.Web.Compilation.BuildManager, namespace: System.Web.Compilation
  DNCompilation_BuildProvider = interface; // type: System.Web.Compilation.BuildProvider, namespace: System.Web.Compilation
  DNClientBuildManagerParameter = interface; // type: System.Web.Compilation.ClientBuildManagerParameter, namespace: System.Web.Compilation
  DNCompilerType = interface; // type: System.Web.Compilation.CompilerType, namespace: System.Web.Compilation
  DNControlBuilderInterceptor = interface; // type: System.Web.Compilation.ControlBuilderInterceptor, namespace: System.Web.Compilation
  DNCompilation_ExpressionBuilder = interface; // type: System.Web.Compilation.ExpressionBuilder, namespace: System.Web.Compilation
  DNAppSettingsExpressionBuilder = interface; // type: System.Web.Compilation.AppSettingsExpressionBuilder, namespace: System.Web.Compilation
  DNConnectionStringsExpressionBuilder = interface; // type: System.Web.Compilation.ConnectionStringsExpressionBuilder, namespace: System.Web.Compilation
  DNResourceExpressionBuilder = interface; // type: System.Web.Compilation.ResourceExpressionBuilder, namespace: System.Web.Compilation
  DNRouteUrlExpressionBuilder = interface; // type: System.Web.Compilation.RouteUrlExpressionBuilder, namespace: System.Web.Compilation
  DNRouteValueExpressionBuilder = interface; // type: System.Web.Compilation.RouteValueExpressionBuilder, namespace: System.Web.Compilation
  DNExpressionBuilderContext = interface; // type: System.Web.Compilation.ExpressionBuilderContext, namespace: System.Web.Compilation
  DNImplicitResourceKey = interface; // type: System.Web.Compilation.ImplicitResourceKey, namespace: System.Web.Compilation
  DNLinePragmaCodeInfo = interface; // type: System.Web.Compilation.LinePragmaCodeInfo, namespace: System.Web.Compilation
  DNResourceExpressionFields = interface; // type: System.Web.Compilation.ResourceExpressionFields, namespace: System.Web.Compilation
  DNResourceProviderFactory = interface; // type: System.Web.Compilation.ResourceProviderFactory, namespace: System.Web.Compilation
  DNBrowserCapabilitiesCodeGenerator = interface; // type: System.Web.Configuration.BrowserCapabilitiesCodeGenerator, namespace: System.Web.Configuration
  DNBrowserCapabilitiesFactoryBase = interface; // type: System.Web.Configuration.BrowserCapabilitiesFactoryBase, namespace: System.Web.Configuration
  DNBrowserCapabilitiesFactory = interface; // type: System.Web.Configuration.BrowserCapabilitiesFactory, namespace: System.Web.Configuration
  DNHttpCapabilitiesBase = interface; // type: System.Web.Configuration.HttpCapabilitiesBase, namespace: System.Web.Configuration
  DNHttpBrowserCapabilities = interface; // type: System.Web.HttpBrowserCapabilities, namespace: System.Web
  DNHttpCapabilitiesProvider = interface; // type: System.Web.Configuration.HttpCapabilitiesProvider, namespace: System.Web.Configuration
  DNHttpCapabilitiesDefaultProvider = interface; // type: System.Web.Configuration.HttpCapabilitiesDefaultProvider, namespace: System.Web.Configuration
  DNHttpCapabilitiesSectionHandler = interface; // type: System.Web.Configuration.HttpCapabilitiesSectionHandler, namespace: System.Web.Configuration
  DNHttpConfigurationContext = interface; // type: System.Web.Configuration.HttpConfigurationContext, namespace: System.Web.Configuration
  DNProtocolsConfigurationHandler = interface; // type: System.Web.Configuration.ProtocolsConfigurationHandler, namespace: System.Web.Configuration
  DNProvidersHelper = interface; // type: System.Web.Configuration.ProvidersHelper, namespace: System.Web.Configuration
  DNRegexWorker = interface; // type: System.Web.Configuration.RegexWorker, namespace: System.Web.Configuration
  DNRemoteWebConfigurationHostServer = interface; // type: System.Web.Configuration.RemoteWebConfigurationHostServer, namespace: System.Web.Configuration
  DNUserMapPath = interface; // type: System.Web.Configuration.UserMapPath, namespace: System.Web.Configuration
  DNVirtualDirectoryMapping = interface; // type: System.Web.Configuration.VirtualDirectoryMapping, namespace: System.Web.Configuration
  DNWebConfigurationManager = interface; // type: System.Web.Configuration.WebConfigurationManager, namespace: System.Web.Configuration
  DNWebContext = interface; // type: System.Web.Configuration.WebContext, namespace: System.Web.Configuration
  DNDefaultHttpHandler = interface; // type: System.Web.DefaultHttpHandler, namespace: System.Web
  DNEventHandlerTaskAsyncHelper = interface; // type: System.Web.EventHandlerTaskAsyncHelper, namespace: System.Web
  DNResourceFileStringLocalizerProvider = interface; // type: System.Web.Globalization.ResourceFileStringLocalizerProvider, namespace: System.Web.Globalization
  DNStringLocalizerProviders = interface; // type: System.Web.Globalization.StringLocalizerProviders, namespace: System.Web.Globalization
  DNAssemblyResourceLoader = interface; // type: System.Web.Handlers.AssemblyResourceLoader, namespace: System.Web.Handlers
  DNTraceHandler = interface; // type: System.Web.Handlers.TraceHandler, namespace: System.Web.Handlers
  DNAppDomainFactory = interface; // type: System.Web.Hosting.AppDomainFactory, namespace: System.Web.Hosting
  DNAppDomainInfo = interface; // type: System.Web.Hosting.AppDomainInfo, namespace: System.Web.Hosting
  DNAppDomainInfoEnum = interface; // type: System.Web.Hosting.AppDomainInfoEnum, namespace: System.Web.Hosting
  DNApplicationHost = interface; // type: System.Web.Hosting.ApplicationHost, namespace: System.Web.Hosting
  DNApplicationInfo = interface; // type: System.Web.Hosting.ApplicationInfo, namespace: System.Web.Hosting
  DNApplicationMonitors = interface; // type: System.Web.Hosting.ApplicationMonitors, namespace: System.Web.Hosting
  DNAppManagerAppDomainFactory = interface; // type: System.Web.Hosting.AppManagerAppDomainFactory, namespace: System.Web.Hosting
  DNAspNetMemoryMonitor = interface; // type: System.Web.Hosting.AspNetMemoryMonitor, namespace: System.Web.Hosting
  DNHostSecurityPolicyResolver = interface; // type: System.Web.Hosting.HostSecurityPolicyResolver, namespace: System.Web.Hosting
  DNLowPhysicalMemoryInfo = interface; // type: System.Web.Hosting.LowPhysicalMemoryInfo, namespace: System.Web.Hosting
  DNLowPhysicalMemoryObserver = interface; // type: System.Web.Hosting.LowPhysicalMemoryObserver, namespace: System.Web.Hosting
  DNRecycleLimitInfo = interface; // type: System.Web.Hosting.RecycleLimitInfo, namespace: System.Web.Hosting
  DNRecycleLimitObserver = interface; // type: System.Web.Hosting.RecycleLimitObserver, namespace: System.Web.Hosting
  DNHtmlString = interface; // type: System.Web.HtmlString, namespace: System.Web
  DNHttpApplication = interface; // type: System.Web.HttpApplication, namespace: System.Web
  DNHttpBrowserCapabilitiesBase = interface; // type: System.Web.HttpBrowserCapabilitiesBase, namespace: System.Web
  DNHttpBrowserCapabilitiesWrapper = interface; // type: System.Web.HttpBrowserCapabilitiesWrapper, namespace: System.Web
  DNHttpCachePolicy = interface; // type: System.Web.HttpCachePolicy, namespace: System.Web
  DNHttpCachePolicyBase = interface; // type: System.Web.HttpCachePolicyBase, namespace: System.Web
  DNHttpCachePolicyWrapper = interface; // type: System.Web.HttpCachePolicyWrapper, namespace: System.Web
  DNHttpCacheVaryByContentEncodings = interface; // type: System.Web.HttpCacheVaryByContentEncodings, namespace: System.Web
  DNHttpCacheVaryByHeaders = interface; // type: System.Web.HttpCacheVaryByHeaders, namespace: System.Web
  DNHttpCacheVaryByParams = interface; // type: System.Web.HttpCacheVaryByParams, namespace: System.Web
  DNHttpContext = interface; // type: System.Web.HttpContext, namespace: System.Web
  DNHttpContextBase = interface; // type: System.Web.HttpContextBase, namespace: System.Web
  DNHttpContextWrapper = interface; // type: System.Web.HttpContextWrapper, namespace: System.Web
  DNHttpCookie = interface; // type: System.Web.HttpCookie, namespace: System.Web
  DNHttpPostedFile = interface; // type: System.Web.HttpPostedFile, namespace: System.Web
  DNHttpPostedFileBase = interface; // type: System.Web.HttpPostedFileBase, namespace: System.Web
  DNHttpPostedFileWrapper = interface; // type: System.Web.HttpPostedFileWrapper, namespace: System.Web
  DNHttpRequest = interface; // type: System.Web.HttpRequest, namespace: System.Web
  DNHttpRequestBase = interface; // type: System.Web.HttpRequestBase, namespace: System.Web
  DNHttpRequestWrapper = interface; // type: System.Web.HttpRequestWrapper, namespace: System.Web
  DNHttpResponse = interface; // type: System.Web.HttpResponse, namespace: System.Web
  DNHttpResponseBase = interface; // type: System.Web.HttpResponseBase, namespace: System.Web
  DNHttpResponseWrapper = interface; // type: System.Web.HttpResponseWrapper, namespace: System.Web
  DNHttpRuntime = interface; // type: System.Web.HttpRuntime, namespace: System.Web
  DNHttpServerUtility = interface; // type: System.Web.HttpServerUtility, namespace: System.Web
  DNHttpServerUtilityBase = interface; // type: System.Web.HttpServerUtilityBase, namespace: System.Web
  DNHttpServerUtilityWrapper = interface; // type: System.Web.HttpServerUtilityWrapper, namespace: System.Web
  DNHttpSessionStateBase = interface; // type: System.Web.HttpSessionStateBase, namespace: System.Web
  DNHttpSessionStateWrapper = interface; // type: System.Web.HttpSessionStateWrapper, namespace: System.Web
  DNHttpStaticObjectsCollection = interface; // type: System.Web.HttpStaticObjectsCollection, namespace: System.Web
  DNHttpStaticObjectsCollectionBase = interface; // type: System.Web.HttpStaticObjectsCollectionBase, namespace: System.Web
  DNHttpStaticObjectsCollectionWrapper = interface; // type: System.Web.HttpStaticObjectsCollectionWrapper, namespace: System.Web
  DNHttpTaskAsyncHandler = interface; // type: System.Web.HttpTaskAsyncHandler, namespace: System.Web
  DNHttpUtility = interface; // type: System.Web.HttpUtility, namespace: System.Web
  DNHttpWorkerRequest = interface; // type: System.Web.HttpWorkerRequest, namespace: System.Web
  DNSimpleWorkerRequest = interface; // type: System.Web.Hosting.SimpleWorkerRequest, namespace: System.Web.Hosting
  DNPageExecutionContext = interface; // type: System.Web.Instrumentation.PageExecutionContext, namespace: System.Web.Instrumentation
  DNPageExecutionListener = interface; // type: System.Web.Instrumentation.PageExecutionListener, namespace: System.Web.Instrumentation
  DNPageInstrumentationService = interface; // type: System.Web.Instrumentation.PageInstrumentationService, namespace: System.Web.Instrumentation
  DNMailAttachment = interface; // type: System.Web.Mail.MailAttachment, namespace: System.Web.Mail
  DNMailMessage = interface; // type: System.Web.Mail.MailMessage, namespace: System.Web.Mail
  DNSmtpMail = interface; // type: System.Web.Mail.SmtpMail, namespace: System.Web.Mail
  DNMailEventNotificationInfo = interface; // type: System.Web.Management.MailEventNotificationInfo, namespace: System.Web.Management
  DNRegiisUtility = interface; // type: System.Web.Management.RegiisUtility, namespace: System.Web.Management
  DNRuleFiringRecord = interface; // type: System.Web.Management.RuleFiringRecord, namespace: System.Web.Management
  DNSqlServices = interface; // type: System.Web.Management.SqlServices, namespace: System.Web.Management
  DNWebApplicationInformation = interface; // type: System.Web.Management.WebApplicationInformation, namespace: System.Web.Management
  DNWebBaseEvent = interface; // type: System.Web.Management.WebBaseEvent, namespace: System.Web.Management
  DNWebManagementEvent = interface; // type: System.Web.Management.WebManagementEvent, namespace: System.Web.Management
  DNWebApplicationLifetimeEvent = interface; // type: System.Web.Management.WebApplicationLifetimeEvent, namespace: System.Web.Management
  DNWebAuditEvent = interface; // type: System.Web.Management.WebAuditEvent, namespace: System.Web.Management
  DNWebFailureAuditEvent = interface; // type: System.Web.Management.WebFailureAuditEvent, namespace: System.Web.Management
  DNWebAuthenticationFailureAuditEvent = interface; // type: System.Web.Management.WebAuthenticationFailureAuditEvent, namespace: System.Web.Management
  DNWebViewStateFailureAuditEvent = interface; // type: System.Web.Management.WebViewStateFailureAuditEvent, namespace: System.Web.Management
  DNWebSuccessAuditEvent = interface; // type: System.Web.Management.WebSuccessAuditEvent, namespace: System.Web.Management
  DNWebAuthenticationSuccessAuditEvent = interface; // type: System.Web.Management.WebAuthenticationSuccessAuditEvent, namespace: System.Web.Management
  DNWebBaseErrorEvent = interface; // type: System.Web.Management.WebBaseErrorEvent, namespace: System.Web.Management
  DNWebErrorEvent = interface; // type: System.Web.Management.WebErrorEvent, namespace: System.Web.Management
  DNWebRequestErrorEvent = interface; // type: System.Web.Management.WebRequestErrorEvent, namespace: System.Web.Management
  DNWebHeartbeatEvent = interface; // type: System.Web.Management.WebHeartbeatEvent, namespace: System.Web.Management
  DNWebRequestEvent = interface; // type: System.Web.Management.WebRequestEvent, namespace: System.Web.Management
  DNWebEventBufferFlushInfo = interface; // type: System.Web.Management.WebEventBufferFlushInfo, namespace: System.Web.Management
  DNWebEventCodes = interface; // type: System.Web.Management.WebEventCodes, namespace: System.Web.Management
  DNWebEventFormatter = interface; // type: System.Web.Management.WebEventFormatter, namespace: System.Web.Management
  DNWebEventManager = interface; // type: System.Web.Management.WebEventManager, namespace: System.Web.Management
  DNWebProcessInformation = interface; // type: System.Web.Management.WebProcessInformation, namespace: System.Web.Management
  DNWebProcessStatistics = interface; // type: System.Web.Management.WebProcessStatistics, namespace: System.Web.Management
  DNWebRequestInformation = interface; // type: System.Web.Management.WebRequestInformation, namespace: System.Web.Management
  DNWebThreadInformation = interface; // type: System.Web.Management.WebThreadInformation, namespace: System.Web.Management
  DNMimeMapping = interface; // type: System.Web.MimeMapping, namespace: System.Web
  DNCollectionModelBinder<TElement> = interface; // type: System.Web.ModelBinding.CollectionModelBinder`1, namespace: System.Web.ModelBinding
  DNArrayModelBinder<TElement> = interface; // type: System.Web.ModelBinding.ArrayModelBinder`1, namespace: System.Web.ModelBinding
  DNDictionaryModelBinder<TKey, TValue> = interface; // type: System.Web.ModelBinding.DictionaryModelBinder`2, namespace: System.Web.ModelBinding
  DNComplexModel = interface; // type: System.Web.ModelBinding.ComplexModel, namespace: System.Web.ModelBinding
  DNComplexModelBinder = interface; // type: System.Web.ModelBinding.ComplexModelBinder, namespace: System.Web.ModelBinding
  DNComplexModelResult = interface; // type: System.Web.ModelBinding.ComplexModelResult, namespace: System.Web.ModelBinding
  DNCookieValueProvider = interface; // type: System.Web.ModelBinding.CookieValueProvider, namespace: System.Web.ModelBinding
  DNDefaultModelBinder = interface; // type: System.Web.ModelBinding.DefaultModelBinder, namespace: System.Web.ModelBinding
  DNRouteDataValueProvider = interface; // type: System.Web.ModelBinding.RouteDataValueProvider, namespace: System.Web.ModelBinding
  DNDictionaryValueProvider<TValue> = interface; // type: System.Web.ModelBinding.DictionaryValueProvider`1, namespace: System.Web.ModelBinding
  DNKeyValuePairModelBinder<TKey, TValue> = interface; // type: System.Web.ModelBinding.KeyValuePairModelBinder`2, namespace: System.Web.ModelBinding
  DNModelBinderDictionary = interface; // type: System.Web.ModelBinding.ModelBinderDictionary, namespace: System.Web.ModelBinding
  DNModelBinderErrorMessageProviders = interface; // type: System.Web.ModelBinding.ModelBinderErrorMessageProviders, namespace: System.Web.ModelBinding
  DNModelBinderProvider = interface; // type: System.Web.ModelBinding.ModelBinderProvider, namespace: System.Web.ModelBinding
  DNArrayModelBinderProvider = interface; // type: System.Web.ModelBinding.ArrayModelBinderProvider, namespace: System.Web.ModelBinding
  DNBinaryDataModelBinderProvider = interface; // type: System.Web.ModelBinding.BinaryDataModelBinderProvider, namespace: System.Web.ModelBinding
  DNCollectionModelBinderProvider = interface; // type: System.Web.ModelBinding.CollectionModelBinderProvider, namespace: System.Web.ModelBinding
  DNComplexModelBinderProvider = interface; // type: System.Web.ModelBinding.ComplexModelBinderProvider, namespace: System.Web.ModelBinding
  DNDictionaryModelBinderProvider = interface; // type: System.Web.ModelBinding.DictionaryModelBinderProvider, namespace: System.Web.ModelBinding
  DNGenericModelBinderProvider = interface; // type: System.Web.ModelBinding.GenericModelBinderProvider, namespace: System.Web.ModelBinding
  DNKeyValuePairModelBinderProvider = interface; // type: System.Web.ModelBinding.KeyValuePairModelBinderProvider, namespace: System.Web.ModelBinding
  DNMutableObjectModelBinderProvider = interface; // type: System.Web.ModelBinding.MutableObjectModelBinderProvider, namespace: System.Web.ModelBinding
  DNSimpleModelBinderProvider = interface; // type: System.Web.ModelBinding.SimpleModelBinderProvider, namespace: System.Web.ModelBinding
  DNTypeConverterModelBinderProvider = interface; // type: System.Web.ModelBinding.TypeConverterModelBinderProvider, namespace: System.Web.ModelBinding
  DNTypeMatchModelBinderProvider = interface; // type: System.Web.ModelBinding.TypeMatchModelBinderProvider, namespace: System.Web.ModelBinding
  DNModelBinderProviders = interface; // type: System.Web.ModelBinding.ModelBinderProviders, namespace: System.Web.ModelBinding
  DNModelBinders = interface; // type: System.Web.ModelBinding.ModelBinders, namespace: System.Web.ModelBinding
  DNModelBindingContext = interface; // type: System.Web.ModelBinding.ModelBindingContext, namespace: System.Web.ModelBinding
  DNModelBindingExecutionContext = interface; // type: System.Web.ModelBinding.ModelBindingExecutionContext, namespace: System.Web.ModelBinding
  DNModelError = interface; // type: System.Web.ModelBinding.ModelError, namespace: System.Web.ModelBinding
  DNModelMetadata = interface; // type: System.Web.ModelBinding.ModelMetadata, namespace: System.Web.ModelBinding
  DNDataAnnotationsModelMetadata = interface; // type: System.Web.ModelBinding.DataAnnotationsModelMetadata, namespace: System.Web.ModelBinding
  DNModelMetadataProvider = interface; // type: System.Web.ModelBinding.ModelMetadataProvider, namespace: System.Web.ModelBinding
  DNAssociatedMetadataProvider = interface; // type: System.Web.ModelBinding.AssociatedMetadataProvider, namespace: System.Web.ModelBinding
  DNDataAnnotationsModelMetadataProvider = interface; // type: System.Web.ModelBinding.DataAnnotationsModelMetadataProvider, namespace: System.Web.ModelBinding
  DNEmptyModelMetadataProvider = interface; // type: System.Web.ModelBinding.EmptyModelMetadataProvider, namespace: System.Web.ModelBinding
  DNModelMetadataProviders = interface; // type: System.Web.ModelBinding.ModelMetadataProviders, namespace: System.Web.ModelBinding
  DNModelState = interface; // type: System.Web.ModelBinding.ModelState, namespace: System.Web.ModelBinding
  DNModelStateDictionary = interface; // type: System.Web.ModelBinding.ModelStateDictionary, namespace: System.Web.ModelBinding
  DNModelValidationNode = interface; // type: System.Web.ModelBinding.ModelValidationNode, namespace: System.Web.ModelBinding
  DNModelValidationResult = interface; // type: System.Web.ModelBinding.ModelValidationResult, namespace: System.Web.ModelBinding
  DNModelValidator = interface; // type: System.Web.ModelBinding.ModelValidator, namespace: System.Web.ModelBinding
  DNDataAnnotationsModelValidator = interface; // type: System.Web.ModelBinding.DataAnnotationsModelValidator, namespace: System.Web.ModelBinding
  DNMaxLengthAttributeAdapter = interface; // type: System.Web.ModelBinding.MaxLengthAttributeAdapter, namespace: System.Web.ModelBinding
  DNMinLengthAttributeAdapter = interface; // type: System.Web.ModelBinding.MinLengthAttributeAdapter, namespace: System.Web.ModelBinding
  DNRangeAttributeAdapter = interface; // type: System.Web.ModelBinding.RangeAttributeAdapter, namespace: System.Web.ModelBinding
  DNRegularExpressionAttributeAdapter = interface; // type: System.Web.ModelBinding.RegularExpressionAttributeAdapter, namespace: System.Web.ModelBinding
  DNRequiredAttributeAdapter = interface; // type: System.Web.ModelBinding.RequiredAttributeAdapter, namespace: System.Web.ModelBinding
  DNStringLengthAttributeAdapter = interface; // type: System.Web.ModelBinding.StringLengthAttributeAdapter, namespace: System.Web.ModelBinding
  DNDataAnnotationsModelValidator<TAttribute> = interface; // type: System.Web.ModelBinding.DataAnnotationsModelValidator`1, namespace: System.Web.ModelBinding
  DNValidatableObjectAdapter = interface; // type: System.Web.ModelBinding.ValidatableObjectAdapter, namespace: System.Web.ModelBinding
  DNModelValidatorProvider = interface; // type: System.Web.ModelBinding.ModelValidatorProvider, namespace: System.Web.ModelBinding
  DNAssociatedValidatorProvider = interface; // type: System.Web.ModelBinding.AssociatedValidatorProvider, namespace: System.Web.ModelBinding
  DNDataAnnotationsModelValidatorProvider = interface; // type: System.Web.ModelBinding.DataAnnotationsModelValidatorProvider, namespace: System.Web.ModelBinding
  DNModelValidatorProviders = interface; // type: System.Web.ModelBinding.ModelValidatorProviders, namespace: System.Web.ModelBinding
  DNMutableObjectModelBinder = interface; // type: System.Web.ModelBinding.MutableObjectModelBinder, namespace: System.Web.ModelBinding
  DNNameValueCollectionValueProvider = interface; // type: System.Web.ModelBinding.NameValueCollectionValueProvider, namespace: System.Web.ModelBinding
  DNFormValueProvider = interface; // type: System.Web.ModelBinding.FormValueProvider, namespace: System.Web.ModelBinding
  DNQueryStringValueProvider = interface; // type: System.Web.ModelBinding.QueryStringValueProvider, namespace: System.Web.ModelBinding
  DNSimpleValueProvider = interface; // type: System.Web.ModelBinding.SimpleValueProvider, namespace: System.Web.ModelBinding
  DNControlValueProvider = interface; // type: System.Web.ModelBinding.ControlValueProvider, namespace: System.Web.ModelBinding
  DNProfileValueProvider = interface; // type: System.Web.ModelBinding.ProfileValueProvider, namespace: System.Web.ModelBinding
  DNUserProfileValueProvider = interface; // type: System.Web.ModelBinding.UserProfileValueProvider, namespace: System.Web.ModelBinding
  DNViewStateValueProvider = interface; // type: System.Web.ModelBinding.ViewStateValueProvider, namespace: System.Web.ModelBinding
  DNTypeConverterModelBinder = interface; // type: System.Web.ModelBinding.TypeConverterModelBinder, namespace: System.Web.ModelBinding
  DNTypeMatchModelBinder = interface; // type: System.Web.ModelBinding.TypeMatchModelBinder, namespace: System.Web.ModelBinding
  DNValueProviderResult = interface; // type: System.Web.ModelBinding.ValueProviderResult, namespace: System.Web.ModelBinding
  DNParserError = interface; // type: System.Web.ParserError, namespace: System.Web
  DNProcessInfo = interface; // type: System.Web.ProcessInfo, namespace: System.Web
  DNProcessModelInfo = interface; // type: System.Web.ProcessModelInfo, namespace: System.Web
  DNProfileGroupBase = interface; // type: System.Web.Profile.ProfileGroupBase, namespace: System.Web.Profile
  DNProfileInfo = interface; // type: System.Web.Profile.ProfileInfo, namespace: System.Web.Profile
  DNProfileInfoCollection = interface; // type: System.Web.Profile.ProfileInfoCollection, namespace: System.Web.Profile
  DNProfileManager = interface; // type: System.Web.Profile.ProfileManager, namespace: System.Web.Profile
  DNProfileModule = interface; // type: System.Web.Profile.ProfileModule, namespace: System.Web.Profile
  DNHttpMethodConstraint = interface; // type: System.Web.Routing.HttpMethodConstraint, namespace: System.Web.Routing
  DNPageRouteHandler = interface; // type: System.Web.Routing.PageRouteHandler, namespace: System.Web.Routing
  DNRequestContext = interface; // type: System.Web.Routing.RequestContext, namespace: System.Web.Routing
  DNRouteBase = interface; // type: System.Web.Routing.RouteBase, namespace: System.Web.Routing
  DNRoute = interface; // type: System.Web.Routing.Route, namespace: System.Web.Routing
  DNRouteData = interface; // type: System.Web.Routing.RouteData, namespace: System.Web.Routing
  DNRouteTable = interface; // type: System.Web.Routing.RouteTable, namespace: System.Web.Routing
  DNRouteValueDictionary = interface; // type: System.Web.Routing.RouteValueDictionary, namespace: System.Web.Routing
  DNStopRoutingHandler = interface; // type: System.Web.Routing.StopRoutingHandler, namespace: System.Web.Routing
  DNUrlRoutingHandler = interface; // type: System.Web.Routing.UrlRoutingHandler, namespace: System.Web.Routing
  DNUrlRoutingModule = interface; // type: System.Web.Routing.UrlRoutingModule, namespace: System.Web.Routing
  DNVirtualPathData = interface; // type: System.Web.Routing.VirtualPathData, namespace: System.Web.Routing
  DNAnonymousIdentificationModule = interface; // type: System.Web.Security.AnonymousIdentificationModule, namespace: System.Web.Security
  DNDefaultAuthenticationModule = interface; // type: System.Web.Security.DefaultAuthenticationModule, namespace: System.Web.Security
  DNFileAuthorizationModule = interface; // type: System.Web.Security.FileAuthorizationModule, namespace: System.Web.Security
  DNFormsAuthentication = interface; // type: System.Web.Security.FormsAuthentication, namespace: System.Web.Security
  DNFormsAuthenticationModule = interface; // type: System.Web.Security.FormsAuthenticationModule, namespace: System.Web.Security
  DNFormsAuthenticationTicket = interface; // type: System.Web.Security.FormsAuthenticationTicket, namespace: System.Web.Security
  DNMachineKey = interface; // type: System.Web.Security.MachineKey, namespace: System.Web.Security
  DNMembership = interface; // type: System.Web.Security.Membership, namespace: System.Web.Security
  DNActiveDirectoryMembershipUser = interface; // type: System.Web.Security.ActiveDirectoryMembershipUser, namespace: System.Web.Security
  DNPassportAuthenticationModule = interface; // type: System.Web.Security.PassportAuthenticationModule, namespace: System.Web.Security
  DNPassportIdentity = interface; // type: System.Web.Security.PassportIdentity, namespace: System.Web.Security
  DNRoleManagerModule = interface; // type: System.Web.Security.RoleManagerModule, namespace: System.Web.Security
  DNRoles = interface; // type: System.Web.Security.Roles, namespace: System.Web.Security
  DNUrlAuthorizationModule = interface; // type: System.Web.Security.UrlAuthorizationModule, namespace: System.Web.Security
  DNWindowsAuthenticationModule = interface; // type: System.Web.Security.WindowsAuthenticationModule, namespace: System.Web.Security
  DNHttpSessionState = interface; // type: System.Web.SessionState.HttpSessionState, namespace: System.Web.SessionState
  DNHttpSessionStateContainer = interface; // type: System.Web.SessionState.HttpSessionStateContainer, namespace: System.Web.SessionState
  DNSessionIDManager = interface; // type: System.Web.SessionState.SessionIDManager, namespace: System.Web.SessionState
  DNSessionStateModule = interface; // type: System.Web.SessionState.SessionStateModule, namespace: System.Web.SessionState
  DNSessionStateStoreData = interface; // type: System.Web.SessionState.SessionStateStoreData, namespace: System.Web.SessionState
  DNSessionStateUtility = interface; // type: System.Web.SessionState.SessionStateUtility, namespace: System.Web.SessionState
  DNStateRuntime = interface; // type: System.Web.SessionState.StateRuntime, namespace: System.Web.SessionState
  DNSiteMap = interface; // type: System.Web.SiteMap, namespace: System.Web
  DNSiteMapNode = interface; // type: System.Web.SiteMapNode, namespace: System.Web
  DNSiteMapNodeCollection = interface; // type: System.Web.SiteMapNodeCollection, namespace: System.Web
  DNTraceContext = interface; // type: System.Web.TraceContext, namespace: System.Web
  DNTraceContextRecord = interface; // type: System.Web.TraceContextRecord, namespace: System.Web
  DNControlAdapter = interface; // type: System.Web.UI.Adapters.ControlAdapter, namespace: System.Web.UI.Adapters
  DNPageAdapter = interface; // type: System.Web.UI.Adapters.PageAdapter, namespace: System.Web.UI.Adapters
  DNWebControlAdapter = interface; // type: System.Web.UI.WebControls.Adapters.WebControlAdapter, namespace: System.Web.UI.WebControls.Adapters
  DNDataBoundControlAdapter = interface; // type: System.Web.UI.WebControls.Adapters.DataBoundControlAdapter, namespace: System.Web.UI.WebControls.Adapters
  DNHideDisabledControlAdapter = interface; // type: System.Web.UI.WebControls.Adapters.HideDisabledControlAdapter, namespace: System.Web.UI.WebControls.Adapters
  DNHierarchicalDataBoundControlAdapter = interface; // type: System.Web.UI.WebControls.Adapters.HierarchicalDataBoundControlAdapter, namespace: System.Web.UI.WebControls.Adapters
  DNMenuAdapter = interface; // type: System.Web.UI.WebControls.Adapters.MenuAdapter, namespace: System.Web.UI.WebControls.Adapters
  DNAttributeCollection = interface; // type: System.Web.UI.AttributeCollection, namespace: System.Web.UI
  DNBaseParser = interface; // type: System.Web.UI.BaseParser, namespace: System.Web.UI
  DNTemplateParser = interface; // type: System.Web.UI.TemplateParser, namespace: System.Web.UI
  DNBaseTemplateParser = interface; // type: System.Web.UI.BaseTemplateParser, namespace: System.Web.UI
  DNTemplateControlParser = interface; // type: System.Web.UI.TemplateControlParser, namespace: System.Web.UI
  DNPageParser = interface; // type: System.Web.UI.PageParser, namespace: System.Web.UI
  DNClientScriptManager = interface; // type: System.Web.UI.ClientScriptManager, namespace: System.Web.UI
  DNCompiledBindableTemplateBuilder = interface; // type: System.Web.UI.CompiledBindableTemplateBuilder, namespace: System.Web.UI
  DNCompiledTemplateBuilder = interface; // type: System.Web.UI.CompiledTemplateBuilder, namespace: System.Web.UI
  DNControl = interface; // type: System.Web.UI.Control, namespace: System.Web.UI
  DNBasePartialCachingControl = interface; // type: System.Web.UI.BasePartialCachingControl, namespace: System.Web.UI
  DNPartialCachingControl = interface; // type: System.Web.UI.PartialCachingControl, namespace: System.Web.UI
  DNStaticPartialCachingControl = interface; // type: System.Web.UI.StaticPartialCachingControl, namespace: System.Web.UI
  DNDataBoundLiteralControl = interface; // type: System.Web.UI.DataBoundLiteralControl, namespace: System.Web.UI
  DNDataSourceControl = interface; // type: System.Web.UI.DataSourceControl, namespace: System.Web.UI
  DNObjectDataSource = interface; // type: System.Web.UI.WebControls.ObjectDataSource, namespace: System.Web.UI.WebControls
  DNSqlDataSource = interface; // type: System.Web.UI.WebControls.SqlDataSource, namespace: System.Web.UI.WebControls
  DNAccessDataSource = interface; // type: System.Web.UI.WebControls.AccessDataSource, namespace: System.Web.UI.WebControls
  DNDesignerDataBoundLiteralControl = interface; // type: System.Web.UI.DesignerDataBoundLiteralControl, namespace: System.Web.UI
  DNHierarchicalDataSourceControl = interface; // type: System.Web.UI.HierarchicalDataSourceControl, namespace: System.Web.UI
  DNSiteMapDataSource = interface; // type: System.Web.UI.WebControls.SiteMapDataSource, namespace: System.Web.UI.WebControls
  DNXmlDataSource = interface; // type: System.Web.UI.WebControls.XmlDataSource, namespace: System.Web.UI.WebControls
  DNHtmlControl = interface; // type: System.Web.UI.HtmlControls.HtmlControl, namespace: System.Web.UI.HtmlControls
  DNHtmlArea = interface; // type: System.Web.UI.HtmlControls.HtmlArea, namespace: System.Web.UI.HtmlControls
  DNHtmlContainerControl = interface; // type: System.Web.UI.HtmlControls.HtmlContainerControl, namespace: System.Web.UI.HtmlControls
  DNHtmlAnchor = interface; // type: System.Web.UI.HtmlControls.HtmlAnchor, namespace: System.Web.UI.HtmlControls
  DNHtmlAudio = interface; // type: System.Web.UI.HtmlControls.HtmlAudio, namespace: System.Web.UI.HtmlControls
  DNHtmlButton = interface; // type: System.Web.UI.HtmlControls.HtmlButton, namespace: System.Web.UI.HtmlControls
  DNHtmlElement = interface; // type: System.Web.UI.HtmlControls.HtmlElement, namespace: System.Web.UI.HtmlControls
  DNHtmlEmbed = interface; // type: System.Web.UI.HtmlControls.HtmlEmbed, namespace: System.Web.UI.HtmlControls
  DNHtmlForm = interface; // type: System.Web.UI.HtmlControls.HtmlForm, namespace: System.Web.UI.HtmlControls
  DNHtmlGenericControl = interface; // type: System.Web.UI.HtmlControls.HtmlGenericControl, namespace: System.Web.UI.HtmlControls
  DNHtmlHead = interface; // type: System.Web.UI.HtmlControls.HtmlHead, namespace: System.Web.UI.HtmlControls
  DNHtmlIframe = interface; // type: System.Web.UI.HtmlControls.HtmlIframe, namespace: System.Web.UI.HtmlControls
  DNHtmlSelect = interface; // type: System.Web.UI.HtmlControls.HtmlSelect, namespace: System.Web.UI.HtmlControls
  DNHtmlTable = interface; // type: System.Web.UI.HtmlControls.HtmlTable, namespace: System.Web.UI.HtmlControls
  DNHtmlTableCell = interface; // type: System.Web.UI.HtmlControls.HtmlTableCell, namespace: System.Web.UI.HtmlControls
  DNHtmlTableRow = interface; // type: System.Web.UI.HtmlControls.HtmlTableRow, namespace: System.Web.UI.HtmlControls
  DNHtmlTextArea = interface; // type: System.Web.UI.HtmlControls.HtmlTextArea, namespace: System.Web.UI.HtmlControls
  DNHtmlVideo = interface; // type: System.Web.UI.HtmlControls.HtmlVideo, namespace: System.Web.UI.HtmlControls
  DNHtmlImage = interface; // type: System.Web.UI.HtmlControls.HtmlImage, namespace: System.Web.UI.HtmlControls
  DNHtmlInputControl = interface; // type: System.Web.UI.HtmlControls.HtmlInputControl, namespace: System.Web.UI.HtmlControls
  DNHtmlInputButton = interface; // type: System.Web.UI.HtmlControls.HtmlInputButton, namespace: System.Web.UI.HtmlControls
  DNHtmlInputReset = interface; // type: System.Web.UI.HtmlControls.HtmlInputReset, namespace: System.Web.UI.HtmlControls
  DNHtmlInputSubmit = interface; // type: System.Web.UI.HtmlControls.HtmlInputSubmit, namespace: System.Web.UI.HtmlControls
  DNHtmlInputCheckBox = interface; // type: System.Web.UI.HtmlControls.HtmlInputCheckBox, namespace: System.Web.UI.HtmlControls
  DNHtmlInputFile = interface; // type: System.Web.UI.HtmlControls.HtmlInputFile, namespace: System.Web.UI.HtmlControls
  DNHtmlInputGenericControl = interface; // type: System.Web.UI.HtmlControls.HtmlInputGenericControl, namespace: System.Web.UI.HtmlControls
  DNHtmlInputHidden = interface; // type: System.Web.UI.HtmlControls.HtmlInputHidden, namespace: System.Web.UI.HtmlControls
  DNHtmlInputImage = interface; // type: System.Web.UI.HtmlControls.HtmlInputImage, namespace: System.Web.UI.HtmlControls
  DNHtmlInputRadioButton = interface; // type: System.Web.UI.HtmlControls.HtmlInputRadioButton, namespace: System.Web.UI.HtmlControls
  DNHtmlInputText = interface; // type: System.Web.UI.HtmlControls.HtmlInputText, namespace: System.Web.UI.HtmlControls
  DNHtmlInputPassword = interface; // type: System.Web.UI.HtmlControls.HtmlInputPassword, namespace: System.Web.UI.HtmlControls
  DNHtmlLink = interface; // type: System.Web.UI.HtmlControls.HtmlLink, namespace: System.Web.UI.HtmlControls
  DNHtmlMeta = interface; // type: System.Web.UI.HtmlControls.HtmlMeta, namespace: System.Web.UI.HtmlControls
  DNHtmlSource = interface; // type: System.Web.UI.HtmlControls.HtmlSource, namespace: System.Web.UI.HtmlControls
  DNHtmlTitle = interface; // type: System.Web.UI.HtmlControls.HtmlTitle, namespace: System.Web.UI.HtmlControls
  DNHtmlTrack = interface; // type: System.Web.UI.HtmlControls.HtmlTrack, namespace: System.Web.UI.HtmlControls
  DNLiteralControl = interface; // type: System.Web.UI.LiteralControl, namespace: System.Web.UI
  DNTemplateControl = interface; // type: System.Web.UI.TemplateControl, namespace: System.Web.UI
  DNPage = interface; // type: System.Web.UI.Page, namespace: System.Web.UI
  DNUserControl = interface; // type: System.Web.UI.UserControl, namespace: System.Web.UI
  DNMasterPage = interface; // type: System.Web.UI.MasterPage, namespace: System.Web.UI
  DNContent = interface; // type: System.Web.UI.WebControls.Content, namespace: System.Web.UI.WebControls
  DNContentPlaceHolder = interface; // type: System.Web.UI.WebControls.ContentPlaceHolder, namespace: System.Web.UI.WebControls
  DNHiddenField = interface; // type: System.Web.UI.WebControls.HiddenField, namespace: System.Web.UI.WebControls
  DNLiteral = interface; // type: System.Web.UI.WebControls.Literal, namespace: System.Web.UI.WebControls
  DNLocalize = interface; // type: System.Web.UI.WebControls.Localize, namespace: System.Web.UI.WebControls
  DNLoginView = interface; // type: System.Web.UI.WebControls.LoginView, namespace: System.Web.UI.WebControls
  DNMenuItemTemplateContainer = interface; // type: System.Web.UI.WebControls.MenuItemTemplateContainer, namespace: System.Web.UI.WebControls
  DNMultiView = interface; // type: System.Web.UI.WebControls.MultiView, namespace: System.Web.UI.WebControls
  DNPlaceHolder = interface; // type: System.Web.UI.WebControls.PlaceHolder, namespace: System.Web.UI.WebControls
  DNRepeater = interface; // type: System.Web.UI.WebControls.Repeater, namespace: System.Web.UI.WebControls
  DNRepeaterItem = interface; // type: System.Web.UI.WebControls.RepeaterItem, namespace: System.Web.UI.WebControls
  DNSubstitution = interface; // type: System.Web.UI.WebControls.Substitution, namespace: System.Web.UI.WebControls
  DNView = interface; // type: System.Web.UI.WebControls.View, namespace: System.Web.UI.WebControls
  DNWizardStepBase = interface; // type: System.Web.UI.WebControls.WizardStepBase, namespace: System.Web.UI.WebControls
  DNTemplatedWizardStep = interface; // type: System.Web.UI.WebControls.TemplatedWizardStep, namespace: System.Web.UI.WebControls
  DNCompleteWizardStep = interface; // type: System.Web.UI.WebControls.CompleteWizardStep, namespace: System.Web.UI.WebControls
  DNCreateUserWizardStep = interface; // type: System.Web.UI.WebControls.CreateUserWizardStep, namespace: System.Web.UI.WebControls
  DNWizardStep = interface; // type: System.Web.UI.WebControls.WizardStep, namespace: System.Web.UI.WebControls
  DNWebControl = interface; // type: System.Web.UI.WebControls.WebControl, namespace: System.Web.UI.WebControls
  DNBaseDataBoundControl = interface; // type: System.Web.UI.WebControls.BaseDataBoundControl, namespace: System.Web.UI.WebControls
  DNDataBoundControl = interface; // type: System.Web.UI.WebControls.DataBoundControl, namespace: System.Web.UI.WebControls
  DNAdRotator = interface; // type: System.Web.UI.WebControls.AdRotator, namespace: System.Web.UI.WebControls
  DNCompositeDataBoundControl = interface; // type: System.Web.UI.WebControls.CompositeDataBoundControl, namespace: System.Web.UI.WebControls
  DNDetailsView = interface; // type: System.Web.UI.WebControls.DetailsView, namespace: System.Web.UI.WebControls
  DNFormView = interface; // type: System.Web.UI.WebControls.FormView, namespace: System.Web.UI.WebControls
  DNGridView = interface; // type: System.Web.UI.WebControls.GridView, namespace: System.Web.UI.WebControls
  DNListControl = interface; // type: System.Web.UI.WebControls.ListControl, namespace: System.Web.UI.WebControls
  DNBulletedList = interface; // type: System.Web.UI.WebControls.BulletedList, namespace: System.Web.UI.WebControls
  DNCheckBoxList = interface; // type: System.Web.UI.WebControls.CheckBoxList, namespace: System.Web.UI.WebControls
  DNDropDownList = interface; // type: System.Web.UI.WebControls.DropDownList, namespace: System.Web.UI.WebControls
  DNListBox = interface; // type: System.Web.UI.WebControls.ListBox, namespace: System.Web.UI.WebControls
  DNRadioButtonList = interface; // type: System.Web.UI.WebControls.RadioButtonList, namespace: System.Web.UI.WebControls
  DNHierarchicalDataBoundControl = interface; // type: System.Web.UI.WebControls.HierarchicalDataBoundControl, namespace: System.Web.UI.WebControls
  DNMenu = interface; // type: System.Web.UI.WebControls.Menu, namespace: System.Web.UI.WebControls
  DNTreeView = interface; // type: System.Web.UI.WebControls.TreeView, namespace: System.Web.UI.WebControls
  DNBaseDataList = interface; // type: System.Web.UI.WebControls.BaseDataList, namespace: System.Web.UI.WebControls
  DNDataGrid = interface; // type: System.Web.UI.WebControls.DataGrid, namespace: System.Web.UI.WebControls
  DNDataList = interface; // type: System.Web.UI.WebControls.DataList, namespace: System.Web.UI.WebControls
  DNButton = interface; // type: System.Web.UI.WebControls.Button, namespace: System.Web.UI.WebControls
  DNCalendar = interface; // type: System.Web.UI.WebControls.Calendar, namespace: System.Web.UI.WebControls
  DNCheckBox = interface; // type: System.Web.UI.WebControls.CheckBox, namespace: System.Web.UI.WebControls
  DNRadioButton = interface; // type: System.Web.UI.WebControls.RadioButton, namespace: System.Web.UI.WebControls
  DNCompositeControl = interface; // type: System.Web.UI.WebControls.CompositeControl, namespace: System.Web.UI.WebControls
  DNChangePassword = interface; // type: System.Web.UI.WebControls.ChangePassword, namespace: System.Web.UI.WebControls
  DNLogin = interface; // type: System.Web.UI.WebControls.Login, namespace: System.Web.UI.WebControls
  DNLoginStatus = interface; // type: System.Web.UI.WebControls.LoginStatus, namespace: System.Web.UI.WebControls
  DNPasswordRecovery = interface; // type: System.Web.UI.WebControls.PasswordRecovery, namespace: System.Web.UI.WebControls
  DNSiteMapPath = interface; // type: System.Web.UI.WebControls.SiteMapPath, namespace: System.Web.UI.WebControls
  DNWebZone = interface; // type: System.Web.UI.WebControls.WebParts.WebZone, namespace: System.Web.UI.WebControls.WebParts
  DNToolZone = interface; // type: System.Web.UI.WebControls.WebParts.ToolZone, namespace: System.Web.UI.WebControls.WebParts
  DNCatalogZoneBase = interface; // type: System.Web.UI.WebControls.WebParts.CatalogZoneBase, namespace: System.Web.UI.WebControls.WebParts
  DNCatalogZone = interface; // type: System.Web.UI.WebControls.WebParts.CatalogZone, namespace: System.Web.UI.WebControls.WebParts
  DNConnectionsZone = interface; // type: System.Web.UI.WebControls.WebParts.ConnectionsZone, namespace: System.Web.UI.WebControls.WebParts
  DNEditorZoneBase = interface; // type: System.Web.UI.WebControls.WebParts.EditorZoneBase, namespace: System.Web.UI.WebControls.WebParts
  DNEditorZone = interface; // type: System.Web.UI.WebControls.WebParts.EditorZone, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartZoneBase = interface; // type: System.Web.UI.WebControls.WebParts.WebPartZoneBase, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartZone = interface; // type: System.Web.UI.WebControls.WebParts.WebPartZone, namespace: System.Web.UI.WebControls.WebParts
  DNWizard = interface; // type: System.Web.UI.WebControls.Wizard, namespace: System.Web.UI.WebControls
  DNCreateUserWizard = interface; // type: System.Web.UI.WebControls.CreateUserWizard, namespace: System.Web.UI.WebControls
  DNDataListItem = interface; // type: System.Web.UI.WebControls.DataListItem, namespace: System.Web.UI.WebControls
  DNFileUpload = interface; // type: System.Web.UI.WebControls.FileUpload, namespace: System.Web.UI.WebControls
  DNHyperLink = interface; // type: System.Web.UI.WebControls.HyperLink, namespace: System.Web.UI.WebControls
  DNImage = interface; // type: System.Web.UI.WebControls.Image, namespace: System.Web.UI.WebControls
  DNImageButton = interface; // type: System.Web.UI.WebControls.ImageButton, namespace: System.Web.UI.WebControls
  DNImageMap = interface; // type: System.Web.UI.WebControls.ImageMap, namespace: System.Web.UI.WebControls
  DNLabel = interface; // type: System.Web.UI.WebControls.Label, namespace: System.Web.UI.WebControls
  DNBaseValidator = interface; // type: System.Web.UI.WebControls.BaseValidator, namespace: System.Web.UI.WebControls
  DNBaseCompareValidator = interface; // type: System.Web.UI.WebControls.BaseCompareValidator, namespace: System.Web.UI.WebControls
  DNCompareValidator = interface; // type: System.Web.UI.WebControls.CompareValidator, namespace: System.Web.UI.WebControls
  DNRangeValidator = interface; // type: System.Web.UI.WebControls.RangeValidator, namespace: System.Web.UI.WebControls
  DNCustomValidator = interface; // type: System.Web.UI.WebControls.CustomValidator, namespace: System.Web.UI.WebControls
  DNRegularExpressionValidator = interface; // type: System.Web.UI.WebControls.RegularExpressionValidator, namespace: System.Web.UI.WebControls
  DNRequiredFieldValidator = interface; // type: System.Web.UI.WebControls.RequiredFieldValidator, namespace: System.Web.UI.WebControls
  DNModelErrorMessage = interface; // type: System.Web.UI.WebControls.ModelErrorMessage, namespace: System.Web.UI.WebControls
  DNLinkButton = interface; // type: System.Web.UI.WebControls.LinkButton, namespace: System.Web.UI.WebControls
  DNLoginName = interface; // type: System.Web.UI.WebControls.LoginName, namespace: System.Web.UI.WebControls
  DNPanel = interface; // type: System.Web.UI.WebControls.Panel, namespace: System.Web.UI.WebControls
  DNPart = interface; // type: System.Web.UI.WebControls.WebParts.Part, namespace: System.Web.UI.WebControls.WebParts
  DNCatalogPart = interface; // type: System.Web.UI.WebControls.WebParts.CatalogPart, namespace: System.Web.UI.WebControls.WebParts
  DNDeclarativeCatalogPart = interface; // type: System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart, namespace: System.Web.UI.WebControls.WebParts
  DNImportCatalogPart = interface; // type: System.Web.UI.WebControls.WebParts.ImportCatalogPart, namespace: System.Web.UI.WebControls.WebParts
  DNPageCatalogPart = interface; // type: System.Web.UI.WebControls.WebParts.PageCatalogPart, namespace: System.Web.UI.WebControls.WebParts
  DNEditorPart = interface; // type: System.Web.UI.WebControls.WebParts.EditorPart, namespace: System.Web.UI.WebControls.WebParts
  DNAppearanceEditorPart = interface; // type: System.Web.UI.WebControls.WebParts.AppearanceEditorPart, namespace: System.Web.UI.WebControls.WebParts
  DNBehaviorEditorPart = interface; // type: System.Web.UI.WebControls.WebParts.BehaviorEditorPart, namespace: System.Web.UI.WebControls.WebParts
  DNLayoutEditorPart = interface; // type: System.Web.UI.WebControls.WebParts.LayoutEditorPart, namespace: System.Web.UI.WebControls.WebParts
  DNPropertyGridEditorPart = interface; // type: System.Web.UI.WebControls.WebParts.PropertyGridEditorPart, namespace: System.Web.UI.WebControls.WebParts
  DNWebPart = interface; // type: System.Web.UI.WebControls.WebParts.WebPart, namespace: System.Web.UI.WebControls.WebParts
  DNGenericWebPart = interface; // type: System.Web.UI.WebControls.WebParts.GenericWebPart, namespace: System.Web.UI.WebControls.WebParts
  DNProxyWebPart = interface; // type: System.Web.UI.WebControls.WebParts.ProxyWebPart, namespace: System.Web.UI.WebControls.WebParts
  DNErrorWebPart = interface; // type: System.Web.UI.WebControls.WebParts.ErrorWebPart, namespace: System.Web.UI.WebControls.WebParts
  DNUnauthorizedWebPart = interface; // type: System.Web.UI.WebControls.WebParts.UnauthorizedWebPart, namespace: System.Web.UI.WebControls.WebParts
  DNSiteMapNodeItem = interface; // type: System.Web.UI.WebControls.SiteMapNodeItem, namespace: System.Web.UI.WebControls
  DNTable = interface; // type: System.Web.UI.WebControls.Table, namespace: System.Web.UI.WebControls
  DNTableCell = interface; // type: System.Web.UI.WebControls.TableCell, namespace: System.Web.UI.WebControls
  DNDataControlFieldCell = interface; // type: System.Web.UI.WebControls.DataControlFieldCell, namespace: System.Web.UI.WebControls
  DNDataControlFieldHeaderCell = interface; // type: System.Web.UI.WebControls.DataControlFieldHeaderCell, namespace: System.Web.UI.WebControls
  DNTableHeaderCell = interface; // type: System.Web.UI.WebControls.TableHeaderCell, namespace: System.Web.UI.WebControls
  DNTableRow = interface; // type: System.Web.UI.WebControls.TableRow, namespace: System.Web.UI.WebControls
  DNDataGridItem = interface; // type: System.Web.UI.WebControls.DataGridItem, namespace: System.Web.UI.WebControls
  DNDetailsViewRow = interface; // type: System.Web.UI.WebControls.DetailsViewRow, namespace: System.Web.UI.WebControls
  DNDetailsViewPagerRow = interface; // type: System.Web.UI.WebControls.DetailsViewPagerRow, namespace: System.Web.UI.WebControls
  DNFormViewRow = interface; // type: System.Web.UI.WebControls.FormViewRow, namespace: System.Web.UI.WebControls
  DNFormViewPagerRow = interface; // type: System.Web.UI.WebControls.FormViewPagerRow, namespace: System.Web.UI.WebControls
  DNGridViewRow = interface; // type: System.Web.UI.WebControls.GridViewRow, namespace: System.Web.UI.WebControls
  DNTableFooterRow = interface; // type: System.Web.UI.WebControls.TableFooterRow, namespace: System.Web.UI.WebControls
  DNTableHeaderRow = interface; // type: System.Web.UI.WebControls.TableHeaderRow, namespace: System.Web.UI.WebControls
  DNTextBox = interface; // type: System.Web.UI.WebControls.TextBox, namespace: System.Web.UI.WebControls
  DNValidationSummary = interface; // type: System.Web.UI.WebControls.ValidationSummary, namespace: System.Web.UI.WebControls
  DNProxyWebPartManager = interface; // type: System.Web.UI.WebControls.WebParts.ProxyWebPartManager, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartManager = interface; // type: System.Web.UI.WebControls.WebParts.WebPartManager, namespace: System.Web.UI.WebControls.WebParts
  DNXml = interface; // type: System.Web.UI.WebControls.Xml, namespace: System.Web.UI.WebControls
  DNControlBuilder = interface; // type: System.Web.UI.ControlBuilder, namespace: System.Web.UI
  DNCodeStatementBuilder = interface; // type: System.Web.UI.CodeStatementBuilder, namespace: System.Web.UI
  DNDataSourceControlBuilder = interface; // type: System.Web.UI.DataSourceControlBuilder, namespace: System.Web.UI
  DNHtmlEmptyTagControlBuilder = interface; // type: System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder, namespace: System.Web.UI.HtmlControls
  DNHtmlHeadBuilder = interface; // type: System.Web.UI.HtmlControls.HtmlHeadBuilder, namespace: System.Web.UI.HtmlControls
  DNHtmlSelectBuilder = interface; // type: System.Web.UI.HtmlControls.HtmlSelectBuilder, namespace: System.Web.UI.HtmlControls
  DNObjectTagBuilder = interface; // type: System.Web.UI.ObjectTagBuilder, namespace: System.Web.UI
  DNSkinBuilder = interface; // type: System.Web.UI.SkinBuilder, namespace: System.Web.UI
  DNTemplateBuilder = interface; // type: System.Web.UI.TemplateBuilder, namespace: System.Web.UI
  DNBindableTemplateBuilder = interface; // type: System.Web.UI.BindableTemplateBuilder, namespace: System.Web.UI
  DNRootBuilder = interface; // type: System.Web.UI.RootBuilder, namespace: System.Web.UI
  DNFileLevelPageControlBuilder = interface; // type: System.Web.UI.FileLevelPageControlBuilder, namespace: System.Web.UI
  DNFileLevelMasterPageControlBuilder = interface; // type: System.Web.UI.FileLevelMasterPageControlBuilder, namespace: System.Web.UI
  DNFileLevelUserControlBuilder = interface; // type: System.Web.UI.FileLevelUserControlBuilder, namespace: System.Web.UI
  DNUserControlControlBuilder = interface; // type: System.Web.UI.UserControlControlBuilder, namespace: System.Web.UI
  DNMasterPageControlBuilder = interface; // type: System.Web.UI.MasterPageControlBuilder, namespace: System.Web.UI
  DNHyperLinkControlBuilder = interface; // type: System.Web.UI.WebControls.HyperLinkControlBuilder, namespace: System.Web.UI.WebControls
  DNLabelControlBuilder = interface; // type: System.Web.UI.WebControls.LabelControlBuilder, namespace: System.Web.UI.WebControls
  DNLinkButtonControlBuilder = interface; // type: System.Web.UI.WebControls.LinkButtonControlBuilder, namespace: System.Web.UI.WebControls
  DNListItemControlBuilder = interface; // type: System.Web.UI.WebControls.ListItemControlBuilder, namespace: System.Web.UI.WebControls
  DNLiteralControlBuilder = interface; // type: System.Web.UI.WebControls.LiteralControlBuilder, namespace: System.Web.UI.WebControls
  DNMultiViewControlBuilder = interface; // type: System.Web.UI.WebControls.MultiViewControlBuilder, namespace: System.Web.UI.WebControls
  DNPlaceHolderControlBuilder = interface; // type: System.Web.UI.WebControls.PlaceHolderControlBuilder, namespace: System.Web.UI.WebControls
  DNTableCellControlBuilder = interface; // type: System.Web.UI.WebControls.TableCellControlBuilder, namespace: System.Web.UI.WebControls
  DNTextBoxControlBuilder = interface; // type: System.Web.UI.WebControls.TextBoxControlBuilder, namespace: System.Web.UI.WebControls
  DNWizardStepControlBuilder = interface; // type: System.Web.UI.WebControls.WizardStepControlBuilder, namespace: System.Web.UI.WebControls
  DNXmlBuilder = interface; // type: System.Web.UI.WebControls.XmlBuilder, namespace: System.Web.UI.WebControls
  DNControlCachePolicy = interface; // type: System.Web.UI.ControlCachePolicy, namespace: System.Web.UI
  DNControlCollection = interface; // type: System.Web.UI.ControlCollection, namespace: System.Web.UI
  DNEmptyControlCollection = interface; // type: System.Web.UI.EmptyControlCollection, namespace: System.Web.UI
  DNViewCollection = interface; // type: System.Web.UI.WebControls.ViewCollection, namespace: System.Web.UI.WebControls
  DNControlSkin = interface; // type: System.Web.UI.ControlSkin, namespace: System.Web.UI
  DNCssStyleCollection = interface; // type: System.Web.UI.CssStyleCollection, namespace: System.Web.UI
  DNDataBinder = interface; // type: System.Web.UI.DataBinder, namespace: System.Web.UI
  DNDataBinding = interface; // type: System.Web.UI.DataBinding, namespace: System.Web.UI
  DNDataBindingCollection = interface; // type: System.Web.UI.DataBindingCollection, namespace: System.Web.UI
  DNDataSourceSelectArguments = interface; // type: System.Web.UI.DataSourceSelectArguments, namespace: System.Web.UI
  DNDataSourceView = interface; // type: System.Web.UI.DataSourceView, namespace: System.Web.UI
  DNModelDataSourceView = interface; // type: System.Web.UI.WebControls.ModelDataSourceView, namespace: System.Web.UI.WebControls
  DNObjectDataSourceView = interface; // type: System.Web.UI.WebControls.ObjectDataSourceView, namespace: System.Web.UI.WebControls
  DNSiteMapDataSourceView = interface; // type: System.Web.UI.WebControls.SiteMapDataSourceView, namespace: System.Web.UI.WebControls
  DNSqlDataSourceView = interface; // type: System.Web.UI.WebControls.SqlDataSourceView, namespace: System.Web.UI.WebControls
  DNAccessDataSourceView = interface; // type: System.Web.UI.WebControls.AccessDataSourceView, namespace: System.Web.UI.WebControls
  DNXmlDataSourceView = interface; // type: System.Web.UI.WebControls.XmlDataSourceView, namespace: System.Web.UI.WebControls
  DNDesignTimeParseData = interface; // type: System.Web.UI.DesignTimeParseData, namespace: System.Web.UI
  DNDesignTimeTemplateParser = interface; // type: System.Web.UI.DesignTimeTemplateParser, namespace: System.Web.UI
  DNEventEntry = interface; // type: System.Web.UI.EventEntry, namespace: System.Web.UI
  DNExpressionBinding = interface; // type: System.Web.UI.ExpressionBinding, namespace: System.Web.UI
  DNExpressionBindingCollection = interface; // type: System.Web.UI.ExpressionBindingCollection, namespace: System.Web.UI
  DNHierarchicalDataSourceView = interface; // type: System.Web.UI.HierarchicalDataSourceView, namespace: System.Web.UI
  DNSiteMapHierarchicalDataSourceView = interface; // type: System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView, namespace: System.Web.UI.WebControls
  DNXmlHierarchicalDataSourceView = interface; // type: System.Web.UI.WebControls.XmlHierarchicalDataSourceView, namespace: System.Web.UI.WebControls
  DNHtmlTableCellCollection = interface; // type: System.Web.UI.HtmlControls.HtmlTableCellCollection, namespace: System.Web.UI.HtmlControls
  DNHtmlTableRowCollection = interface; // type: System.Web.UI.HtmlControls.HtmlTableRowCollection, namespace: System.Web.UI.HtmlControls
  DNIndexedString = interface; // type: System.Web.UI.IndexedString, namespace: System.Web.UI
  DNListSourceHelper = interface; // type: System.Web.UI.ListSourceHelper, namespace: System.Web.UI
  DNLosFormatter = interface; // type: System.Web.UI.LosFormatter, namespace: System.Web.UI
  DNObjectConverter = interface; // type: System.Web.UI.ObjectConverter, namespace: System.Web.UI
  DNObjectPersistData = interface; // type: System.Web.UI.ObjectPersistData, namespace: System.Web.UI
  DNObjectStateFormatter = interface; // type: System.Web.UI.ObjectStateFormatter, namespace: System.Web.UI
  DNOutputCacheParameters = interface; // type: System.Web.UI.OutputCacheParameters, namespace: System.Web.UI
  DNPageAsyncTask = interface; // type: System.Web.UI.PageAsyncTask, namespace: System.Web.UI
  DNPageHandlerFactory = interface; // type: System.Web.UI.PageHandlerFactory, namespace: System.Web.UI
  DNPageParserFilter = interface; // type: System.Web.UI.PageParserFilter, namespace: System.Web.UI
  DNPageStatePersister = interface; // type: System.Web.UI.PageStatePersister, namespace: System.Web.UI
  DNHiddenFieldPageStatePersister = interface; // type: System.Web.UI.HiddenFieldPageStatePersister, namespace: System.Web.UI
  DNSessionPageStatePersister = interface; // type: System.Web.UI.SessionPageStatePersister, namespace: System.Web.UI
  DNPageTheme = interface; // type: System.Web.UI.PageTheme, namespace: System.Web.UI
  DNPair = interface; // type: System.Web.UI.Pair, namespace: System.Web.UI
  DNParseRecorder = interface; // type: System.Web.UI.ParseRecorder, namespace: System.Web.UI
  DNPostBackOptions = interface; // type: System.Web.UI.PostBackOptions, namespace: System.Web.UI
  DNPropertyConverter = interface; // type: System.Web.UI.PropertyConverter, namespace: System.Web.UI
  DNPropertyEntry = interface; // type: System.Web.UI.PropertyEntry, namespace: System.Web.UI
  DNBoundPropertyEntry = interface; // type: System.Web.UI.BoundPropertyEntry, namespace: System.Web.UI
  DNBuilderPropertyEntry = interface; // type: System.Web.UI.BuilderPropertyEntry, namespace: System.Web.UI
  DNComplexPropertyEntry = interface; // type: System.Web.UI.ComplexPropertyEntry, namespace: System.Web.UI
  DNTemplatePropertyEntry = interface; // type: System.Web.UI.TemplatePropertyEntry, namespace: System.Web.UI
  DNSimplePropertyEntry = interface; // type: System.Web.UI.SimplePropertyEntry, namespace: System.Web.UI
  DNRenderTraceListener = interface; // type: System.Web.UI.RenderTraceListener, namespace: System.Web.UI
  DNSimpleWebHandlerParser = interface; // type: System.Web.UI.SimpleWebHandlerParser, namespace: System.Web.UI
  DNWebServiceParser = interface; // type: System.Web.UI.WebServiceParser, namespace: System.Web.UI
  DNStateBag = interface; // type: System.Web.UI.StateBag, namespace: System.Web.UI
  DNStateItem = interface; // type: System.Web.UI.StateItem, namespace: System.Web.UI
  DNStateManagedCollection = interface; // type: System.Web.UI.StateManagedCollection, namespace: System.Web.UI
  DNDataControlFieldCollection = interface; // type: System.Web.UI.WebControls.DataControlFieldCollection, namespace: System.Web.UI.WebControls
  DNHotSpotCollection = interface; // type: System.Web.UI.WebControls.HotSpotCollection, namespace: System.Web.UI.WebControls
  DNMenuItemBindingCollection = interface; // type: System.Web.UI.WebControls.MenuItemBindingCollection, namespace: System.Web.UI.WebControls
  DNMenuItemStyleCollection = interface; // type: System.Web.UI.WebControls.MenuItemStyleCollection, namespace: System.Web.UI.WebControls
  DNParameterCollection = interface; // type: System.Web.UI.WebControls.ParameterCollection, namespace: System.Web.UI.WebControls
  DNStyleCollection = interface; // type: System.Web.UI.WebControls.StyleCollection, namespace: System.Web.UI.WebControls
  DNSubMenuStyleCollection = interface; // type: System.Web.UI.WebControls.SubMenuStyleCollection, namespace: System.Web.UI.WebControls
  DNTreeNodeBindingCollection = interface; // type: System.Web.UI.WebControls.TreeNodeBindingCollection, namespace: System.Web.UI.WebControls
  DNTreeNodeStyleCollection = interface; // type: System.Web.UI.WebControls.TreeNodeStyleCollection, namespace: System.Web.UI.WebControls
  DNThemeProvider = interface; // type: System.Web.UI.ThemeProvider, namespace: System.Web.UI
  DNTriplet = interface; // type: System.Web.UI.Triplet, namespace: System.Web.UI
  DNValidationSettings = interface; // type: System.Web.UI.ValidationSettings, namespace: System.Web.UI
  DNValidatorCollection = interface; // type: System.Web.UI.ValidatorCollection, namespace: System.Web.UI
  DNAutoFieldsGenerator = interface; // type: System.Web.UI.WebControls.AutoFieldsGenerator, namespace: System.Web.UI.WebControls
  DNDetailsViewRowsGenerator = interface; // type: System.Web.UI.WebControls.DetailsViewRowsGenerator, namespace: System.Web.UI.WebControls
  DNGridViewColumnsGenerator = interface; // type: System.Web.UI.WebControls.GridViewColumnsGenerator, namespace: System.Web.UI.WebControls
  DNAutoGeneratedFieldProperties = interface; // type: System.Web.UI.WebControls.AutoGeneratedFieldProperties, namespace: System.Web.UI.WebControls
  DNCalendarDay = interface; // type: System.Web.UI.WebControls.CalendarDay, namespace: System.Web.UI.WebControls
  DNDataControlCommands = interface; // type: System.Web.UI.WebControls.DataControlCommands, namespace: System.Web.UI.WebControls
  DNDataControlField = interface; // type: System.Web.UI.WebControls.DataControlField, namespace: System.Web.UI.WebControls
  DNBoundField = interface; // type: System.Web.UI.WebControls.BoundField, namespace: System.Web.UI.WebControls
  DNAutoGeneratedField = interface; // type: System.Web.UI.WebControls.AutoGeneratedField, namespace: System.Web.UI.WebControls
  DNCheckBoxField = interface; // type: System.Web.UI.WebControls.CheckBoxField, namespace: System.Web.UI.WebControls
  DNButtonFieldBase = interface; // type: System.Web.UI.WebControls.ButtonFieldBase, namespace: System.Web.UI.WebControls
  DNButtonField = interface; // type: System.Web.UI.WebControls.ButtonField, namespace: System.Web.UI.WebControls
  DNCommandField = interface; // type: System.Web.UI.WebControls.CommandField, namespace: System.Web.UI.WebControls
  DNHyperLinkField = interface; // type: System.Web.UI.WebControls.HyperLinkField, namespace: System.Web.UI.WebControls
  DNImageField = interface; // type: System.Web.UI.WebControls.ImageField, namespace: System.Web.UI.WebControls
  DNTemplateField = interface; // type: System.Web.UI.WebControls.TemplateField, namespace: System.Web.UI.WebControls
  DNDataGridColumn = interface; // type: System.Web.UI.WebControls.DataGridColumn, namespace: System.Web.UI.WebControls
  DNBoundColumn = interface; // type: System.Web.UI.WebControls.BoundColumn, namespace: System.Web.UI.WebControls
  DNButtonColumn = interface; // type: System.Web.UI.WebControls.ButtonColumn, namespace: System.Web.UI.WebControls
  DNEditCommandColumn = interface; // type: System.Web.UI.WebControls.EditCommandColumn, namespace: System.Web.UI.WebControls
  DNHyperLinkColumn = interface; // type: System.Web.UI.WebControls.HyperLinkColumn, namespace: System.Web.UI.WebControls
  DNTemplateColumn = interface; // type: System.Web.UI.WebControls.TemplateColumn, namespace: System.Web.UI.WebControls
  DNDataGridColumnCollection = interface; // type: System.Web.UI.WebControls.DataGridColumnCollection, namespace: System.Web.UI.WebControls
  DNDataGridItemCollection = interface; // type: System.Web.UI.WebControls.DataGridItemCollection, namespace: System.Web.UI.WebControls
  DNDataKey = interface; // type: System.Web.UI.WebControls.DataKey, namespace: System.Web.UI.WebControls
  DNDataKeyArray = interface; // type: System.Web.UI.WebControls.DataKeyArray, namespace: System.Web.UI.WebControls
  DNDataKeyCollection = interface; // type: System.Web.UI.WebControls.DataKeyCollection, namespace: System.Web.UI.WebControls
  DNDataListItemCollection = interface; // type: System.Web.UI.WebControls.DataListItemCollection, namespace: System.Web.UI.WebControls
  DNDataSourceSelectResultProcessingOptions = interface; // type: System.Web.UI.WebControls.DataSourceSelectResultProcessingOptions, namespace: System.Web.UI.WebControls
  DNDayRenderEventArgs = interface; // type: System.Web.UI.WebControls.DayRenderEventArgs, namespace: System.Web.UI.WebControls
  DNDetailsViewRowCollection = interface; // type: System.Web.UI.WebControls.DetailsViewRowCollection, namespace: System.Web.UI.WebControls
  DNEmbeddedMailObject = interface; // type: System.Web.UI.WebControls.EmbeddedMailObject, namespace: System.Web.UI.WebControls
  DNFontInfo = interface; // type: System.Web.UI.WebControls.FontInfo, namespace: System.Web.UI.WebControls
  DNGridViewRowCollection = interface; // type: System.Web.UI.WebControls.GridViewRowCollection, namespace: System.Web.UI.WebControls
  DNHotSpot = interface; // type: System.Web.UI.WebControls.HotSpot, namespace: System.Web.UI.WebControls
  DNCircleHotSpot = interface; // type: System.Web.UI.WebControls.CircleHotSpot, namespace: System.Web.UI.WebControls
  DNPolygonHotSpot = interface; // type: System.Web.UI.WebControls.PolygonHotSpot, namespace: System.Web.UI.WebControls
  DNRectangleHotSpot = interface; // type: System.Web.UI.WebControls.RectangleHotSpot, namespace: System.Web.UI.WebControls
  DNListItem = interface; // type: System.Web.UI.WebControls.ListItem, namespace: System.Web.UI.WebControls
  DNListItemCollection = interface; // type: System.Web.UI.WebControls.ListItemCollection, namespace: System.Web.UI.WebControls
  DNMailDefinition = interface; // type: System.Web.UI.WebControls.MailDefinition, namespace: System.Web.UI.WebControls
  DNMenuItem = interface; // type: System.Web.UI.WebControls.MenuItem, namespace: System.Web.UI.WebControls
  DNMenuItemBinding = interface; // type: System.Web.UI.WebControls.MenuItemBinding, namespace: System.Web.UI.WebControls
  DNMenuItemCollection = interface; // type: System.Web.UI.WebControls.MenuItemCollection, namespace: System.Web.UI.WebControls
  DNModelDataMethodResult = interface; // type: System.Web.UI.WebControls.ModelDataMethodResult, namespace: System.Web.UI.WebControls
  DNModelDataSource = interface; // type: System.Web.UI.WebControls.ModelDataSource, namespace: System.Web.UI.WebControls
  DNModelDataSourceMethod = interface; // type: System.Web.UI.WebControls.ModelDataSourceMethod, namespace: System.Web.UI.WebControls
  DNModelMethodContext = interface; // type: System.Web.UI.WebControls.ModelMethodContext, namespace: System.Web.UI.WebControls
  DNMonthChangedEventArgs = interface; // type: System.Web.UI.WebControls.MonthChangedEventArgs, namespace: System.Web.UI.WebControls
  DNPagedDataSource = interface; // type: System.Web.UI.WebControls.PagedDataSource, namespace: System.Web.UI.WebControls
  DNPagerSettings = interface; // type: System.Web.UI.WebControls.PagerSettings, namespace: System.Web.UI.WebControls
  DNParameter = interface; // type: System.Web.UI.WebControls.Parameter, namespace: System.Web.UI.WebControls
  DNControlParameter = interface; // type: System.Web.UI.WebControls.ControlParameter, namespace: System.Web.UI.WebControls
  DNCookieParameter = interface; // type: System.Web.UI.WebControls.CookieParameter, namespace: System.Web.UI.WebControls
  DNFormParameter = interface; // type: System.Web.UI.WebControls.FormParameter, namespace: System.Web.UI.WebControls
  DNProfileParameter = interface; // type: System.Web.UI.WebControls.ProfileParameter, namespace: System.Web.UI.WebControls
  DNQueryStringParameter = interface; // type: System.Web.UI.WebControls.QueryStringParameter, namespace: System.Web.UI.WebControls
  DNRouteParameter = interface; // type: System.Web.UI.WebControls.RouteParameter, namespace: System.Web.UI.WebControls
  DNSessionParameter = interface; // type: System.Web.UI.WebControls.SessionParameter, namespace: System.Web.UI.WebControls
  DNQueryExtensions = interface; // type: System.Web.UI.WebControls.QueryExtensions, namespace: System.Web.UI.WebControls
  DNRepeaterItemCollection = interface; // type: System.Web.UI.WebControls.RepeaterItemCollection, namespace: System.Web.UI.WebControls
  DNRepeatInfo = interface; // type: System.Web.UI.WebControls.RepeatInfo, namespace: System.Web.UI.WebControls
  DNRoleGroup = interface; // type: System.Web.UI.WebControls.RoleGroup, namespace: System.Web.UI.WebControls
  DNSelectedDatesCollection = interface; // type: System.Web.UI.WebControls.SelectedDatesCollection, namespace: System.Web.UI.WebControls
  DNSelectResult = interface; // type: System.Web.UI.WebControls.SelectResult, namespace: System.Web.UI.WebControls
  DNTableCellCollection = interface; // type: System.Web.UI.WebControls.TableCellCollection, namespace: System.Web.UI.WebControls
  DNTableRowCollection = interface; // type: System.Web.UI.WebControls.TableRowCollection, namespace: System.Web.UI.WebControls
  DNTreeNode = interface; // type: System.Web.UI.WebControls.TreeNode, namespace: System.Web.UI.WebControls
  DNTreeNodeBinding = interface; // type: System.Web.UI.WebControls.TreeNodeBinding, namespace: System.Web.UI.WebControls
  DNTreeNodeCollection = interface; // type: System.Web.UI.WebControls.TreeNodeCollection, namespace: System.Web.UI.WebControls
  DNCatalogPartChrome = interface; // type: System.Web.UI.WebControls.WebParts.CatalogPartChrome, namespace: System.Web.UI.WebControls.WebParts
  DNConnectionPoint = interface; // type: System.Web.UI.WebControls.WebParts.ConnectionPoint, namespace: System.Web.UI.WebControls.WebParts
  DNConsumerConnectionPoint = interface; // type: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint, namespace: System.Web.UI.WebControls.WebParts
  DNProviderConnectionPoint = interface; // type: System.Web.UI.WebControls.WebParts.ProviderConnectionPoint, namespace: System.Web.UI.WebControls.WebParts
  DNEditorPartChrome = interface; // type: System.Web.UI.WebControls.WebParts.EditorPartChrome, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationAdministration = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationAdministration, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationDictionary = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationDictionary, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationEntry = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationEntry, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationState = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationState, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationStateInfo = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfo, namespace: System.Web.UI.WebControls.WebParts
  DNSharedPersonalizationStateInfo = interface; // type: System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo, namespace: System.Web.UI.WebControls.WebParts
  DNUserPersonalizationStateInfo = interface; // type: System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationStateInfoCollection = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection, namespace: System.Web.UI.WebControls.WebParts
  DNPersonalizationStateQuery = interface; // type: System.Web.UI.WebControls.WebParts.PersonalizationStateQuery, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartChrome = interface; // type: System.Web.UI.WebControls.WebParts.WebPartChrome, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartConnection = interface; // type: System.Web.UI.WebControls.WebParts.WebPartConnection, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDescription = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDescription, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartDisplayMode = interface; // type: System.Web.UI.WebControls.WebParts.WebPartDisplayMode, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartManagerInternals = interface; // type: System.Web.UI.WebControls.WebParts.WebPartManagerInternals, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartPersonalization = interface; // type: System.Web.UI.WebControls.WebParts.WebPartPersonalization, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartTracker = interface; // type: System.Web.UI.WebControls.WebParts.WebPartTracker, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartTransformer = interface; // type: System.Web.UI.WebControls.WebParts.WebPartTransformer, namespace: System.Web.UI.WebControls.WebParts
  DNRowToFieldTransformer = interface; // type: System.Web.UI.WebControls.WebParts.RowToFieldTransformer, namespace: System.Web.UI.WebControls.WebParts
  DNRowToParametersTransformer = interface; // type: System.Web.UI.WebControls.WebParts.RowToParametersTransformer, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartUserCapability = interface; // type: System.Web.UI.WebControls.WebParts.WebPartUserCapability, namespace: System.Web.UI.WebControls.WebParts
  DNWebPartVerb = interface; // type: System.Web.UI.WebControls.WebParts.WebPartVerb, namespace: System.Web.UI.WebControls.WebParts
  DNWizardStepCollection = interface; // type: System.Web.UI.WebControls.WizardStepCollection, namespace: System.Web.UI.WebControls
  DNXPathBinder = interface; // type: System.Web.UI.XPathBinder, namespace: System.Web.UI
  DNUnvalidatedRequestValues = interface; // type: System.Web.UnvalidatedRequestValues, namespace: System.Web
  DNUnvalidatedRequestValuesBase = interface; // type: System.Web.UnvalidatedRequestValuesBase, namespace: System.Web
  DNUnvalidatedRequestValuesWrapper = interface; // type: System.Web.UnvalidatedRequestValuesWrapper, namespace: System.Web
  DNHttpEncoder = interface; // type: System.Web.Util.HttpEncoder, namespace: System.Web.Util
  DNAntiXssEncoder = interface; // type: System.Web.Security.AntiXss.AntiXssEncoder, namespace: System.Web.Security.AntiXss
  DNRequestValidator = interface; // type: System.Web.Util.RequestValidator, namespace: System.Web.Util
  DNTransactions = interface; // type: System.Web.Util.Transactions, namespace: System.Web.Util
  DNWorkItem = interface; // type: System.Web.Util.WorkItem, namespace: System.Web.Util
  DNVirtualPathUtility = interface; // type: System.Web.VirtualPathUtility, namespace: System.Web
  DNAspNetWebSocketOptions = interface; // type: System.Web.WebSockets.AspNetWebSocketOptions, namespace: System.Web.WebSockets

{ delegates }

  [DNTypeName('System.Web.BeginEventHandler')]
  DNBeginEventHandler = function(sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs; cb: DDN.mscorlib.DNAsyncCallback; extraData: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult of object;

  [DNTypeName('System.Web.Caching.CacheItemRemovedCallback')]
  DNCacheItemRemovedCallback = procedure(key: string; value: DDN.mscorlib.DNObject; reason: DNCacheItemRemovedReason) of object;

  [DNTypeName('System.Web.Caching.CacheItemUpdateCallback')]
  DNCacheItemUpdateCallback = procedure(key: string; reason: DNCacheItemUpdateReason; out expensiveObject: DDN.mscorlib.DNObject; out dependency: DNCacheDependency; out absoluteExpiration: DDN.mscorlib.DNDateTime; out slidingExpiration: DDN.mscorlib.DNTimeSpan) of object;

  [DNTypeName('System.Web.Compilation.BuildManagerHostUnloadEventHandler')]
  DNBuildManagerHostUnloadEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNBuildManagerHostUnloadEventArgs) of object;

  [DNTypeName('System.Web.EndEventHandler')]
  DNEndEventHandler = procedure(ar: DDN.mscorlib.DNIAsyncResult) of object;

  [DNTypeName('System.Web.HttpCacheValidateHandler')]
  DNHttpCacheValidateHandler = procedure(context: DNHttpContext; data: DDN.mscorlib.DNObject; out validationStatus: DNHttpValidationStatus) of object;

  [DNTypeName('System.Web.HttpResponseSubstitutionCallback')]
  DNHttpResponseSubstitutionCallback = function(context: DNHttpContext): string of object;

  [DNTypeName('System.Web.HttpWorkerRequest+EndOfSendNotification')]
  DNHttpWorkerRequest_EndOfSendNotification = procedure(wr: DNHttpWorkerRequest; extraData: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelValidationFactory')]
  DNDataAnnotationsModelValidationFactory = function(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNValidationAttribute): DNModelValidator of object;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsValidatableObjectAdapterFactory')]
  DNDataAnnotationsValidatableObjectAdapterFactory = function(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DNModelValidator of object;

  [DNTypeName('System.Web.ModelBinding.ModelBinderErrorMessageProvider')]
  DNModelBinderErrorMessageProvider = function(modelBindingExecutionContext: DNModelBindingExecutionContext; modelMetadata: DNModelMetadata; incomingValue: DDN.mscorlib.DNObject): string of object;

  [DNTypeName('System.Web.Profile.ProfileAutoSaveEventHandler')]
  DNProfileAutoSaveEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProfileAutoSaveEventArgs) of object;

  [DNTypeName('System.Web.Profile.ProfileEventHandler')]
  DNProfileEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProfileEventArgs) of object;

  [DNTypeName('System.Web.Profile.ProfileMigrateEventHandler')]
  DNProfileMigrateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNProfileMigrateEventArgs) of object;

  [DNTypeName('System.Web.Security.AnonymousIdentificationEventHandler')]
  DNAnonymousIdentificationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAnonymousIdentificationEventArgs) of object;

  [DNTypeName('System.Web.Security.DefaultAuthenticationEventHandler')]
  DNDefaultAuthenticationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDefaultAuthenticationEventArgs) of object;

  [DNTypeName('System.Web.Security.FormsAuthenticationEventHandler')]
  DNFormsAuthenticationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormsAuthenticationEventArgs) of object;

  [DNTypeName('System.Web.Security.PassportAuthenticationEventHandler')]
  DNPassportAuthenticationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNPassportAuthenticationEventArgs) of object;

  [DNTypeName('System.Web.Security.RoleManagerEventHandler')]
  DNRoleManagerEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRoleManagerEventArgs) of object;

  [DNTypeName('System.Web.Security.WindowsAuthenticationEventHandler')]
  DNWindowsAuthenticationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWindowsAuthenticationEventArgs) of object;

  [DNTypeName('System.Web.SessionState.SessionStateItemExpireCallback')]
  DNSessionStateItemExpireCallback = procedure(id: string; item: DNSessionStateStoreData) of object;

  [DNTypeName('System.Web.SiteMapResolveEventHandler')]
  DNSiteMapResolveEventHandler = function(sender: DDN.mscorlib.DNObject; e: DNSiteMapResolveEventArgs): DNSiteMapNode of object;

  [DNTypeName('System.Web.TaskEventHandler')]
  DNTaskEventHandler = function(sender: DDN.mscorlib.DNObject; e: DDN.mscorlib.DNEventArgs): DDN.mscorlib.DNTask of object;

  [DNTypeName('System.Web.TraceContextEventHandler')]
  DNTraceContextEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTraceContextEventArgs) of object;

  [DNTypeName('System.Web.UI.BuildMethod')]
  DNBuildMethod = function: DNControl of object;

  [DNTypeName('System.Web.UI.BuildTemplateMethod')]
  DNBuildTemplateMethod = procedure(control: DNControl) of object;

  [DNTypeName('System.Web.UI.ControlSkinDelegate')]
  DNControlSkinDelegate = function(control: DNControl): DNControl of object;

  [DNTypeName('System.Web.UI.DataSourceViewOperationCallback')]
  DNDataSourceViewOperationCallback = function(affectedRecords: Int32; ex: DDN.mscorlib.DNException): Boolean of object;

  [DNTypeName('System.Web.UI.DataSourceViewSelectCallback')]
  DNDataSourceViewSelectCallback = procedure(data: DDN.mscorlib.DNIEnumerable) of object;

  [DNTypeName('System.Web.UI.ExtractTemplateValuesMethod')]
  DNExtractTemplateValuesMethod = function(control: DNControl): DDN.System.DNIOrderedDictionary of object;

  [DNTypeName('System.Web.UI.ImageClickEventHandler')]
  DNImageClickEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNImageClickEventArgs) of object;

  [DNTypeName('System.Web.UI.RenderMethod')]
  DNRenderMethod = procedure(output: DNHtmlTextWriter; container: DNControl) of object;

  [DNTypeName('System.Web.UI.WebControls.AdCreatedEventHandler')]
  DNAdCreatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAdCreatedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.AuthenticateEventHandler')]
  DNAuthenticateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNAuthenticateEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.BulletedListEventHandler')]
  DNBulletedListEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNBulletedListEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.CallingDataMethodsEventHandler')]
  DNCallingDataMethodsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCallingDataMethodsEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.CommandEventHandler')]
  DNCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.CreateUserErrorEventHandler')]
  DNCreateUserErrorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCreateUserErrorEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.CreatingModelDataSourceEventHandler')]
  DNCreatingModelDataSourceEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNCreatingModelDataSourceEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataGridCommandEventHandler')]
  DNDataGridCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataGridItemEventHandler')]
  DNDataGridItemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataGridItemEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataGridPageChangedEventHandler')]
  DNDataGridPageChangedEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridPageChangedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataGridSortCommandEventHandler')]
  DNDataGridSortCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataGridSortCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataListCommandEventHandler')]
  DNDataListCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNDataListCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DataListItemEventHandler')]
  DNDataListItemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDataListItemEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DayRenderEventHandler')]
  DNDayRenderEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDayRenderEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewCommandEventHandler')]
  DNDetailsViewCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewDeletedEventHandler')]
  DNDetailsViewDeletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewDeletedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewDeleteEventHandler')]
  DNDetailsViewDeleteEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewDeleteEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewInsertedEventHandler')]
  DNDetailsViewInsertedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewInsertedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewInsertEventHandler')]
  DNDetailsViewInsertEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewInsertEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewModeEventHandler')]
  DNDetailsViewModeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewModeEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewPageEventHandler')]
  DNDetailsViewPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewPageEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewUpdatedEventHandler')]
  DNDetailsViewUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewUpdatedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewUpdateEventHandler')]
  DNDetailsViewUpdateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNDetailsViewUpdateEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewCommandEventHandler')]
  DNFormViewCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewDeletedEventHandler')]
  DNFormViewDeletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewDeletedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewDeleteEventHandler')]
  DNFormViewDeleteEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewDeleteEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewInsertedEventHandler')]
  DNFormViewInsertedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewInsertedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewInsertEventHandler')]
  DNFormViewInsertEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewInsertEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewModeEventHandler')]
  DNFormViewModeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewModeEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewPageEventHandler')]
  DNFormViewPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewPageEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewUpdatedEventHandler')]
  DNFormViewUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewUpdatedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.FormViewUpdateEventHandler')]
  DNFormViewUpdateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNFormViewUpdateEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewCancelEditEventHandler')]
  DNGridViewCancelEditEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewCancelEditEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewCommandEventHandler')]
  DNGridViewCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewDeletedEventHandler')]
  DNGridViewDeletedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewDeletedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewDeleteEventHandler')]
  DNGridViewDeleteEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewDeleteEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewEditEventHandler')]
  DNGridViewEditEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewEditEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewPageEventHandler')]
  DNGridViewPageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewPageEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewRowEventHandler')]
  DNGridViewRowEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewRowEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewSelectEventHandler')]
  DNGridViewSelectEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewSelectEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewSortEventHandler')]
  DNGridViewSortEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewSortEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewUpdatedEventHandler')]
  DNGridViewUpdatedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewUpdatedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.GridViewUpdateEventHandler')]
  DNGridViewUpdateEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNGridViewUpdateEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ImageMapEventHandler')]
  DNImageMapEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNImageMapEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.LoginCancelEventHandler')]
  DNLoginCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNLoginCancelEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.MailMessageEventHandler')]
  DNMailMessageEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMailMessageEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.MenuEventHandler')]
  DNMenuEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMenuEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.MonthChangedEventHandler')]
  DNMonthChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNMonthChangedEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler')]
  DNObjectDataSourceDisposingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceDisposingEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler')]
  DNObjectDataSourceFilteringEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceFilteringEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler')]
  DNObjectDataSourceMethodEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceMethodEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler')]
  DNObjectDataSourceObjectEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler')]
  DNObjectDataSourceSelectingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceSelectingEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler')]
  DNObjectDataSourceStatusEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNObjectDataSourceStatusEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.RepeaterCommandEventHandler')]
  DNRepeaterCommandEventHandler = procedure(source: DDN.mscorlib.DNObject; e: DNRepeaterCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.RepeaterItemEventHandler')]
  DNRepeaterItemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNRepeaterItemEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SendMailErrorEventHandler')]
  DNSendMailErrorEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSendMailErrorEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.ServerValidateEventHandler')]
  DNServerValidateEventHandler = procedure(source: DDN.mscorlib.DNObject; args: DNServerValidateEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SiteMapNodeItemEventHandler')]
  DNSiteMapNodeItemEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSiteMapNodeItemEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceCommandEventHandler')]
  DNSqlDataSourceCommandEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlDataSourceCommandEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler')]
  DNSqlDataSourceFilteringEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlDataSourceFilteringEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler')]
  DNSqlDataSourceSelectingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlDataSourceSelectingEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceStatusEventHandler')]
  DNSqlDataSourceStatusEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNSqlDataSourceStatusEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeEventHandler')]
  DNTreeNodeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNTreeNodeEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.FieldCallback')]
  DNFieldCallback = procedure(fieldValue: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ParametersCallback')]
  DNParametersCallback = procedure(parametersData: DDN.mscorlib.DNIDictionary) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.RowCallback')]
  DNRowCallback = procedure(rowData: DDN.mscorlib.DNObject) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.TableCallback')]
  DNTableCallback = procedure(tableData: DDN.mscorlib.DNICollection) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartAddingEventHandler')]
  DNWebPartAddingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartAddingEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventHandler')]
  DNWebPartAuthorizationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartAuthorizationEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartCancelEventHandler')]
  DNWebPartCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartCancelEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventHandler')]
  DNWebPartConnectionsCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartConnectionsCancelEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnectionsEventHandler')]
  DNWebPartConnectionsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartConnectionsEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventHandler')]
  DNWebPartDisplayModeCancelEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartDisplayModeCancelEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventHandler')]
  DNWebPartDisplayModeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartDisplayModeEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartEventHandler')]
  DNWebPartEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartMovingEventHandler')]
  DNWebPartMovingEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartMovingEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartVerbsEventHandler')]
  DNWebPartVerbsEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWebPartVerbsEventArgs) of object;

  [DNTypeName('System.Web.UI.WebControls.WizardNavigationEventHandler')]
  DNWizardNavigationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNWizardNavigationEventArgs) of object;

  [DNTypeName('System.Web.Util.TransactedCallback')]
  DNTransactedCallback = procedure of object;

  [DNTypeName('System.Web.Util.WorkItemCallback')]
  DNWorkItemCallback = procedure of object;




{ objects }

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.ISessionStateItemCollection')]
  DNISessionStateItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{81B714DC-1E3F-3D22-B6EA-0B61ADDC4400}']
  { getters & setters } 

    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_Dirty: Boolean;
    procedure set_Dirty(value: Boolean);

  { methods } 

    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;

  { propertys } 

    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property Dirty: Boolean read get_Dirty write set_Dirty;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IHierarchicalEnumerable')]
  DNIHierarchicalEnumerable = interface(DDN.mscorlib.DNIEnumerable)
  ['{AED218C1-4FE7-31D6-B7E8-81FE742378DF}']
  { methods } 

    function GetHierarchyData(enumeratedItem: DDN.mscorlib.DNObject): DNIHierarchyData;

  end;

  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.IAssemblyPostProcessor')]
  DNIAssemblyPostProcessor = interface(DDN.mscorlib.DNIDisposable)
  ['{358528D3-387B-39C6-A780-03A1043AA03B}']
  { methods } 

    procedure PostProcessAssembly(path: string);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IApplicationMonitor')]
  DNIApplicationMonitor = interface(DDN.mscorlib.DNIDisposable)
  ['{B3F5B9BC-FD54-3BD7-A371-699AE76AFF67}']
  { methods } 

    procedure Start;
    procedure Stop;

  end;

  //-------------namespace: System.Web.Caching----------------
  [DNTypeName('System.Web.Caching.IOutputCacheEntry')]
  DNIOutputCacheEntry = interface(DDN.mscorlib.DNObject)
  ['{CD0D96EC-CA41-3C10-B2D3-C2477F4C3697}']
  { getters & setters } 

    function get_HeaderElements: DDN.mscorlib.DNList<DNHeaderElement>;
    procedure set_HeaderElements(value: DDN.mscorlib.DNList<DNHeaderElement>);
    function get_ResponseElements: DDN.mscorlib.DNList<DNResponseElement>;
    procedure set_ResponseElements(value: DDN.mscorlib.DNList<DNResponseElement>);

  { propertys } 

    property HeaderElements: DDN.mscorlib.DNList<DNHeaderElement> read get_HeaderElements write set_HeaderElements;
    property ResponseElements: DDN.mscorlib.DNList<DNResponseElement> read get_ResponseElements write set_ResponseElements;
  end;

  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.IImplicitResourceProvider')]
  DNIImplicitResourceProvider = interface(DDN.mscorlib.DNObject)
  ['{86B3F99B-56BC-36CC-80E6-17325EBEEB8C}']
  { methods } 

    function GetObject(key: DNImplicitResourceKey; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;
    function GetImplicitResourceKeys(keyPrefix: string): DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.Web.Compilation----------------
  [DNTypeName('System.Web.Compilation.IResourceProvider')]
  DNIResourceProvider = interface(DDN.mscorlib.DNObject)
  ['{F5A06147-4FD6-3F03-9909-4658EB450D2F}']
  { getters & setters } 

    function get_ResourceReader: DDN.mscorlib.DNIResourceReader;

  { methods } 

    function GetObject(resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject;

  { propertys } 

    property ResourceReader: DDN.mscorlib.DNIResourceReader read get_ResourceReader;
  end;

  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.IConfigMapPath')]
  DNIConfigMapPath = interface(DDN.mscorlib.DNObject)
  ['{1FFBA333-D4CB-3446-95EF-66E2D8B01DA1}']
  { methods } 

    function GetMachineConfigFilename: string;
    function GetRootWebConfigFilename: string;
    procedure GetPathConfigFilename(siteID: string; path: string; out directory: string; out baseName: string);
    procedure GetDefaultSiteNameAndID(out siteName: string; out siteID: string);
    procedure ResolveSiteArgument(siteArgument: string; out siteName: string; out siteID: string);
    function MapPath(siteID: string; path: string): string;
    function GetAppPathForPath(siteID: string; path: string): string;

  end;

  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.IConfigMapPathFactory')]
  DNIConfigMapPathFactory = interface(DDN.mscorlib.DNObject)
  ['{32B5DE01-9912-3CDF-B0B9-555490BBF8F2}']
  { methods } 

    function Create(virtualPath: string; physicalPath: string): DNIConfigMapPath;

  end;

  //-------------namespace: System.Web.Configuration.Internal----------------
  [DNTypeName('System.Web.Configuration.Internal.IInternalConfigWebHost')]
  DNIInternalConfigWebHost = interface(DDN.mscorlib.DNObject)
  ['{1689C9D0-CA58-3FEF-B5FE-371A665E56D9}']
  { methods } 

    procedure GetSiteIDAndVPathFromConfigPath(configPath: string; out siteID: string; out vpath: string);
    function GetConfigPathFromSiteIDAndVPath(siteID: string; vpath: string): string;

  end;

  //-------------namespace: System.Web.Configuration----------------
  [DNTypeName('System.Web.Configuration.IRemoteWebConfigurationHostServer')]
  DNIRemoteWebConfigurationHostServer = interface(DDN.mscorlib.DNObject)
  ['{A99B591A-23C6-4238-8452-C7B0E895063D}']
  { methods } 

    function GetData(fileName: string; getReadTimeOnly: Boolean; out readTime: Int64): TArray<Byte>;
    procedure WriteData(fileName: string; templateFileName: string; data: TArray<Byte>; out readTime: Int64);
    function GetFilePaths(webLevel: Int32; path: string; site: string; locationSubPath: string): string;
    function DoEncryptOrDecrypt(doEncrypt: Boolean; xmlString: string; protectionProviderName: string; protectionProviderType: string; parameterKeys: TArray<string>; parameterValues: TArray<string>): string;
    procedure GetFileDetails(name: string; out exists: Boolean; out size: Int64; out createDate: Int64; out lastWriteDate: Int64);

  end;

  //-------------namespace: System.Web.Globalization----------------
  [DNTypeName('System.Web.Globalization.IStringLocalizerProvider')]
  DNIStringLocalizerProvider = interface(DDN.mscorlib.DNObject)
  ['{01453ED7-F394-3191-9969-7BB3855BB39F}']
  { methods } 

    function GetLocalizedString(culture: DDN.mscorlib.DNCultureInfo; name: string; arguments: TArray<DDN.mscorlib.DNObject>): string;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IAdphManager')]
  DNIAdphManager = interface(DDN.mscorlib.DNObject)
  ['{A702CF54-6984-3727-B5FA-242A5241773B}']
  { methods } 

    procedure StartAppDomainProtocolListenerChannel([in]appId: string; [in]protocolId: string; listenerChannelCallback: DNIListenerChannelCallback);
    procedure StopAppDomainProtocolListenerChannel([in]appId: string; [in]protocolId: string; listenerChannelId: Int32; immediate: Boolean);
    procedure StopAppDomainProtocol([in]appId: string; [in]protocolId: string; immediate: Boolean);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IAppDomainFactory')]
  DNIAppDomainFactory = interface(DDN.mscorlib.DNObject)
  ['{E6E21054-A7DC-4378-877D-B7F4A2D7E8BA}']
  { methods } 

    function Create([in]module: string; [in]typeName: string; [in]appId: string; [in]appPath: string; [in]strUrlOfAppOrigin: string; [in]iZone: Int32): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IAppDomainInfo')]
  DNIAppDomainInfo = interface(DDN.mscorlib.DNObject)
  ['{5BC9C234-6CD7-49BF-A07A-6FDB7F22DFFF}']
  { methods } 

    function GetId: string;
    function GetVirtualPath: string;
    function GetPhysicalPath: string;
    function GetSiteId: Int32;
    function IsIdle: Boolean;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IAppDomainInfoEnum')]
  DNIAppDomainInfoEnum = interface(DDN.mscorlib.DNObject)
  ['{F79648FB-558B-4A09-88F1-1E3BCB30E34F}']
  { methods } 

    function GetData: DNIAppDomainInfo;
    function Count: Int32;
    function MoveNext: Boolean;
    procedure Reset;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IApplicationHost')]
  DNIApplicationHost = interface(DDN.mscorlib.DNObject)
  ['{54AD286F-317C-3C59-B017-80EC8B6CAC78}']
  { methods } 

    function GetConfigToken: IntPtr;
    function GetSiteName: string;
    function GetSiteID: string;
    function GetVirtualPath: string;
    function GetPhysicalPath: string;
    function GetConfigMapPathFactory: DNIConfigMapPathFactory;
    procedure MessageReceived;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IApplicationPreloadManager')]
  DNIApplicationPreloadManager = interface(DDN.mscorlib.DNObject)
  ['{AE54F424-71BC-4DA5-AA2F-8C0CD53496FC}']
  { methods } 

    procedure SetApplicationPreloadUtil([in]preloadUtil: DNIApplicationPreloadUtil);
    procedure SetApplicationPreloadState([in]context: string; [in]appId: string; [in]enabled: Boolean);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IApplicationPreloadUtil')]
  DNIApplicationPreloadUtil = interface(DDN.mscorlib.DNObject)
  ['{940D8ADD-9E40-4475-9A67-2CDCDF57995C}']
  { methods } 

    procedure GetApplicationPreloadInfo([in]context: string; out enabled: Boolean; out startupObjType: string; out parametersForStartupObj: TArray<string>);
    procedure ReportApplicationPreloadFailure([in]context: string; [in]errorCode: Int32; [in]errorMessage: string);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IAppManagerAppDomainFactory')]
  DNIAppManagerAppDomainFactory = interface(DDN.mscorlib.DNObject)
  ['{02998279-7175-4D59-AA5A-FB8E44D4CA9D}']
  { methods } 

    function Create([in]appId: string; [in]appPath: string): DDN.mscorlib.DNObject;
    procedure Stop;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IISAPIRuntime')]
  DNIISAPIRuntime = interface(DDN.mscorlib.DNObject)
  ['{08A2C56F-7C16-41C1-A8BE-432917A1A2D1}']
  { methods } 

    procedure StartProcessing;
    procedure StopProcessing;
    function ProcessRequest([in]ecb: IntPtr; [in]useProcessModel: Int32): Int32;
    procedure DoGCCollect;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IListenerChannelCallback')]
  DNIListenerChannelCallback = interface(DDN.mscorlib.DNObject)
  ['{DC3B0A85-9DA7-47E4-BA1B-E27DA9DB8A1E}']
  { methods } 

    procedure ReportStarted;
    procedure ReportStopped(hr: Int32);
    procedure ReportMessageReceived;
    function GetId: Int32;
    function GetBlobLength: Int32;
    procedure GetBlob([in][out]buffer: TArray<Byte>; out bufferSize: Int32);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IPphManager')]
  DNIPphManager = interface(DDN.mscorlib.DNObject)
  ['{1CC9099D-0A8D-41CB-87D6-845E4F8C4E91}']
  { methods } 

    procedure StartProcessProtocolListenerChannel([in]protocolId: string; listenerChannelCallback: DNIListenerChannelCallback);
    procedure StopProcessProtocolListenerChannel([in]protocolId: string; listenerChannelId: Int32; immediate: Boolean);
    procedure StopProcessProtocol([in]protocolId: string; immediate: Boolean);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessHost')]
  DNIProcessHost = interface(DDN.mscorlib.DNObject)
  ['{0CCD465E-3114-4CA3-AD50-CEA561307E93}']
  { methods } 

    procedure StartApplication([in]appId: string; [in]appPath: string; out runtimeInterface: DDN.mscorlib.DNObject);
    procedure ShutdownApplication([in]appId: string);
    procedure Shutdown;
    procedure EnumerateAppDomains(out appDomainInfoEnum: DNIAppDomainInfoEnum);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessHostFactoryHelper')]
  DNIProcessHostFactoryHelper = interface(DDN.mscorlib.DNObject)
  ['{02FD465D-5C5D-4B7E-95B6-82FAA031B74A}']
  { methods } 

    function GetProcessHost(functions: DNIProcessHostSupportFunctions): DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessHostIdleAndHealthCheck')]
  DNIProcessHostIdleAndHealthCheck = interface(DDN.mscorlib.DNObject)
  ['{9D98B251-453E-44F6-9CEC-8B5AED970129}']
  { methods } 

    function IsIdle: Boolean;
    procedure Ping(callback: DNIProcessPingCallback);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessHostPreloadClient')]
  DNIProcessHostPreloadClient = interface(DDN.mscorlib.DNObject)
  ['{F33D3FAE-C3AE-3659-98A0-E1BA32EC79CE}']
  { methods } 

    procedure Preload(parameters: TArray<string>);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessHostSupportFunctions')]
  DNIProcessHostSupportFunctions = interface(DDN.mscorlib.DNObject)
  ['{35F9C4C1-3800-4D17-99BC-018A62243687}']
  { methods } 

    procedure GetApplicationProperties([in]appId: string; out virtualPath: string; out physicalPath: string; out siteName: string; out siteId: string);
    procedure MapPath([in]appId: string; [in]virtualPath: string; out physicalPath: string);
    function GetConfigToken([in]appId: string): IntPtr;
    function GetRootWebConfigFilename: string;
    function GetNativeConfigurationSystem: IntPtr;
    function GetAppHostConfigFilename: string;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IProcessPingCallback')]
  DNIProcessPingCallback = interface(DDN.mscorlib.DNObject)
  ['{F11DC4C9-DDD1-4566-AD53-CF6F3A28FEFE}']
  { methods } 

    procedure Respond;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IRegisteredObject')]
  DNIRegisteredObject = interface(DDN.mscorlib.DNObject)
  ['{770A7A91-4006-39FA-86AF-59A3BC8C6159}']
  { methods } 

    procedure Stop(immediate: Boolean);

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.IStopListeningRegisteredObject')]
  DNIStopListeningRegisteredObject = interface(DNIRegisteredObject)
  ['{9D471548-36CD-3B53-9508-3578BF7D94D3}']
  { methods } 

    procedure StopListening;

  end;

  //-------------namespace: System.Web.Hosting----------------
  [DNTypeName('System.Web.Hosting.ISuspendibleRegisteredObject')]
  DNISuspendibleRegisteredObject = interface(DNIRegisteredObject)
  ['{B6F50874-98FE-3ABB-84DB-68401780E8AB}']
  { methods } 

    function Suspend: DDN.mscorlib.DNAction;

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IHtmlString')]
  DNIHtmlString = interface(DDN.mscorlib.DNObject)
  ['{D6FA99F2-CA95-34AB-8090-E28AB7AFBB25}']
  { methods } 

    function ToHtmlString: string;

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IHttpHandler')]
  DNIHttpHandler = interface(DDN.mscorlib.DNObject)
  ['{26B16466-7259-3DBF-95D3-411CDE29148E}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    procedure ProcessRequest(context: DNHttpContext);

  { propertys } 

    property IsReusable: Boolean read get_IsReusable;
  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IHttpAsyncHandler')]
  DNIHttpAsyncHandler = interface(DNIHttpHandler)
  ['{D9DC422C-D11E-3762-B435-6AAC262AC41A}']
  { methods } 

    function BeginProcessRequest(context: DNHttpContext; cb: DDN.mscorlib.DNAsyncCallback; extraData: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndProcessRequest(result: DDN.mscorlib.DNIAsyncResult);

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IHttpHandlerFactory')]
  DNIHttpHandlerFactory = interface(DDN.mscorlib.DNObject)
  ['{0D5F12A0-959E-3FC3-864B-22943F57C048}']
  { methods } 

    function GetHandler(context: DNHttpContext; requestType: string; url: string; pathTranslated: string): DNIHttpHandler;
    procedure ReleaseHandler(handler: DNIHttpHandler);

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IHttpModule')]
  DNIHttpModule = interface(DDN.mscorlib.DNObject)
  ['{BA463F2B-069A-3AF2-A57A-0C54926761B3}']
  { methods } 

    procedure Init(context: DNHttpApplication);
    procedure Dispose;

  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.ISessionStateModule')]
  DNISessionStateModule = interface(DNIHttpModule)
  ['{D7EEE96B-0F08-3D71-B860-20382843E319}']
  { methods } 

    procedure ReleaseSessionState(context: DNHttpContext);
    function ReleaseSessionStateAsync(context: DNHttpContext): DDN.mscorlib.DNTask;

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.IPartitionResolver')]
  DNIPartitionResolver = interface(DDN.mscorlib.DNObject)
  ['{98C151BB-5967-3551-9C4B-A891E2826512}']
  { methods } 

    procedure Initialize;
    function ResolvePartition(key: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ISubscriptionToken')]
  DNISubscriptionToken = interface(DDN.mscorlib.DNObject)
  ['{54AC8CE6-A609-3938-BC6B-F36062A5D213}']
  { getters & setters } 

    function get_IsActive: Boolean;

  { methods } 

    procedure Unsubscribe;

  { propertys } 

    property IsActive: Boolean read get_IsActive;
  end;

  //-------------namespace: System.Web----------------
  [DNTypeName('System.Web.ITlsTokenBindingInfo')]
  DNITlsTokenBindingInfo = interface(DDN.mscorlib.DNObject)
  ['{847B0781-162E-3640-AB6B-34AC4E4A9CF6}']
  { methods } 

    function GetProvidedTokenBindingId: TArray<Byte>;
    function GetReferredTokenBindingId: TArray<Byte>;

  end;

  //-------------namespace: System.Web.Management----------------
  [DNTypeName('System.Web.Management.IRegiisUtility')]
  DNIRegiisUtility = interface(DDN.mscorlib.DNObject)
  ['{C84F668A-CC3F-11D7-B79E-505054503030}']
  { methods } 

    procedure ProtectedConfigAction(actionToPerform: Int64; [in]firstArgument: string; [in]secondArgument: string; [in]providerName: string; [in]appPath: string; [in]site: string; [in]cspOrLocation: string; keySize: Int32; out exception: IntPtr);
    procedure RegisterSystemWebAssembly(doReg: Int32; out exception: IntPtr);
    procedure RegisterAsnetMmcAssembly(doReg: Int32; [in]assemblyName: string; [in]binaryDirectory: string; out exception: IntPtr);
    procedure RemoveBrowserCaps(out exception: IntPtr);

  end;

  //-------------namespace: System.Web.Management----------------
  [DNTypeName('System.Web.Management.IWebEventCustomEvaluator')]
  DNIWebEventCustomEvaluator = interface(DDN.mscorlib.DNObject)
  ['{F77E89D6-56A2-3ED2-A13D-665E32F7F589}']
  { methods } 

    function CanFire(raisedEvent: DNWebBaseEvent; &record: DNRuleFiringRecord): Boolean;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IMetadataAware')]
  DNIMetadataAware = interface(DDN.mscorlib.DNObject)
  ['{E7F0158B-BE08-34B6-A2A6-4D2657338E4E}']
  { methods } 

    procedure OnMetadataCreated(metadata: DNModelMetadata);

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IModelBinder')]
  DNIModelBinder = interface(DDN.mscorlib.DNObject)
  ['{233EA4F7-A535-337C-86ED-8A8EC32AD4AD}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IModelNameProvider')]
  DNIModelNameProvider = interface(DDN.mscorlib.DNObject)
  ['{2F89887A-84EF-3587-9052-D3CE60EF6287}']
  { methods } 

    function GetModelName: string;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IValueProvider')]
  DNIValueProvider = interface(DDN.mscorlib.DNObject)
  ['{6CB847B8-AC4D-3217-86BD-3A80C767EC50}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IUnvalidatedValueProvider')]
  DNIUnvalidatedValueProvider = interface(DNIValueProvider)
  ['{75431375-A038-3515-89F2-055D596BF670}']
  { methods } 

    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IValueProviderSource')]
  DNIValueProviderSource = interface(DDN.mscorlib.DNObject)
  ['{A5442E37-ADEA-3533-96BE-43670145C771}']
  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;

  end;

  //-------------namespace: System.Web.ModelBinding----------------
  [DNTypeName('System.Web.ModelBinding.IUnvalidatedValueProviderSource')]
  DNIUnvalidatedValueProviderSource = interface(DNIValueProviderSource)
  ['{FE3D2C04-7FD5-3B93-BBC7-95AA01E15DBD}']
  { getters & setters } 

    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);

  { propertys } 

    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
  end;

  //-------------namespace: System.Web.Routing----------------
  [DNTypeName('System.Web.Routing.IRouteConstraint')]
  DNIRouteConstraint = interface(DDN.mscorlib.DNObject)
  ['{CD6CB6E7-7B0A-31AE-8739-136EDA24BD47}']
  { methods } 

    function Match(httpContext: DNHttpContextBase; route: DNRoute; parameterName: string; values: DNRouteValueDictionary; routeDirection: DNRouteDirection): Boolean;

  end;

  //-------------namespace: System.Web.Routing----------------
  [DNTypeName('System.Web.Routing.IRouteHandler')]
  DNIRouteHandler = interface(DDN.mscorlib.DNObject)
  ['{BC0F1BFB-3973-3521-8B17-CDACF0F96566}']
  { methods } 

    function GetHttpHandler(requestContext: DNRequestContext): DNIHttpHandler;

  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.IHttpSessionState')]
  DNIHttpSessionState = interface(DDN.mscorlib.DNObject)
  ['{A3053189-9748-3C63-809D-E07C088F8EE5}']
  { getters & setters } 

    function get_SessionID: string;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_IsNewSession: Boolean;
    function get_Mode: DNSessionStateMode;
    function get_IsCookieless: Boolean;
    function get_CookieMode: DNHttpCookieMode;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_StaticObjects: DNHttpStaticObjectsCollection;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Abandon;
    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure RemoveAll;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);

  { propertys } 

    property SessionID: string read get_SessionID;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property IsNewSession: Boolean read get_IsNewSession;
    property Mode: DNSessionStateMode read get_Mode;
    property IsCookieless: Boolean read get_IsCookieless;
    property CookieMode: DNHttpCookieMode read get_CookieMode;
    property LCID: Int32 read get_LCID write set_LCID;
    property CodePage: Int32 read get_CodePage write set_CodePage;
    property StaticObjects: DNHttpStaticObjectsCollection read get_StaticObjects;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.IPartialSessionState')]
  DNIPartialSessionState = interface(DDN.mscorlib.DNObject)
  ['{FEEB5115-E5A5-34E0-BE67-F324D979110B}']
  { getters & setters } 

    function get_PartialSessionStateKeys: DDN.mscorlib.DNIList<string>;

  { propertys } 

    property PartialSessionStateKeys: DDN.mscorlib.DNIList<string> read get_PartialSessionStateKeys;
  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.IRequiresSessionState')]
  DNIRequiresSessionState = interface(DDN.mscorlib.DNObject)
  ['{9EC0CBE1-7DA3-361C-89F5-C7D57E7E90DE}']
  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.IReadOnlySessionState')]
  DNIReadOnlySessionState = interface(DNIRequiresSessionState)
  ['{34481030-84A8-37C4-B40A-6BD831B04E1C}']
  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.ISessionIDManager')]
  DNISessionIDManager = interface(DDN.mscorlib.DNObject)
  ['{4F1CF96A-B8E5-3DC3-968E-E14A760AA00E}']
  { methods } 

    function InitializeRequest(context: DNHttpContext; suppressAutoDetectRedirect: Boolean; out supportSessionIDReissue: Boolean): Boolean;
    function GetSessionID(context: DNHttpContext): string;
    function CreateSessionID(context: DNHttpContext): string;
    procedure SaveSessionID(context: DNHttpContext; id: string; out redirected: Boolean; out cookieAdded: Boolean);
    procedure RemoveSessionID(context: DNHttpContext);
    function Validate(id: string): Boolean;
    procedure Initialize;

  end;

  //-------------namespace: System.Web.SessionState----------------
  [DNTypeName('System.Web.SessionState.IStateRuntime')]
  DNIStateRuntime = interface(DDN.mscorlib.DNObject)
  ['{7297744B-E188-40BF-B7E9-56698D25CF44}']
  { methods } 

    procedure StopProcessing;
    procedure ProcessRequest([in]tracker: IntPtr; [in]verb: Int32; [in]uri: string; [in]exclusive: Int32; [in]timeout: Int32; [in]lockCookieExists: Int32; [in]lockCookie: Int32; [in]contentLength: Int32; [in]content: IntPtr); overload;
    procedure ProcessRequest([in]tracker: IntPtr; [in]verb: Int32; [in]uri: string; [in]exclusive: Int32; [in]extraFlags: Int32; [in]timeout: Int32; [in]lockCookieExists: Int32; [in]lockCookie: Int32; [in]contentLength: Int32; [in]content: IntPtr); overload;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IAttributeAccessor')]
  DNIAttributeAccessor = interface(DDN.mscorlib.DNObject)
  ['{3278122C-436C-3919-8DDB-568587E5A119}']
  { methods } 

    function GetAttribute(key: string): string;
    procedure SetAttribute(key: string; value: string);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IAutoFieldGenerator')]
  DNIAutoFieldGenerator = interface(DDN.mscorlib.DNObject)
  ['{DCB50A25-2EC9-3A2B-938C-F5664C7CD711}']
  { methods } 

    function GenerateFields(control: DNControl): DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IBindableControl')]
  DNIBindableControl = interface(DDN.mscorlib.DNObject)
  ['{67DA3653-AD6E-3C16-9670-B43FCFA2994F}']
  { methods } 

    procedure ExtractValues(dictionary: DDN.System.DNIOrderedDictionary);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ICallbackEventHandler')]
  DNICallbackEventHandler = interface(DDN.mscorlib.DNObject)
  ['{6437921E-0CC3-32D6-9B5E-93EEF605CD99}']
  { methods } 

    procedure RaiseCallbackEvent(eventArgument: string);
    function GetCallbackResult: string;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ICheckBoxControl')]
  DNICheckBoxControl = interface(DDN.mscorlib.DNObject)
  ['{246360BD-4B11-32B3-A50C-322ACE779D89}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);

  { events } 

    procedure add_CheckedChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CheckedChanged(value: DDN.mscorlib.DNEventHandler);

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ICodeBlockTypeAccessor')]
  DNICodeBlockTypeAccessor = interface(DDN.mscorlib.DNObject)
  ['{BE93EAF2-84F1-3BCB-9E52-F0AD2D58175E}']
  { getters & setters } 

    function get_BlockType: DNCodeBlockType;

  { propertys } 

    property BlockType: DNCodeBlockType read get_BlockType;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IControlBuilderAccessor')]
  DNIControlBuilderAccessor = interface(DDN.mscorlib.DNObject)
  ['{9AD57EEE-6BB6-3C56-A77F-94594A940876}']
  { getters & setters } 

    function get_ControlBuilder: DNControlBuilder;

  { propertys } 

    property ControlBuilder: DNControlBuilder read get_ControlBuilder;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IControlDesignerAccessor')]
  DNIControlDesignerAccessor = interface(DDN.mscorlib.DNObject)
  ['{43BD638E-E68C-34DF-BE26-308698FDD255}']
  { getters & setters } 

    function get_UserData: DDN.mscorlib.DNIDictionary;

  { methods } 

    function GetDesignModeState: DDN.mscorlib.DNIDictionary;
    procedure SetDesignModeState(data: DDN.mscorlib.DNIDictionary);
    procedure SetOwnerControl(owner: DNControl);

  { propertys } 

    property UserData: DDN.mscorlib.DNIDictionary read get_UserData;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IDataBindingsAccessor')]
  DNIDataBindingsAccessor = interface(DDN.mscorlib.DNObject)
  ['{AD9F1257-3A1F-3A40-9C10-D86A9519C334}']
  { getters & setters } 

    function get_DataBindings: DNDataBindingCollection;
    function get_HasDataBindings: Boolean;

  { propertys } 

    property DataBindings: DNDataBindingCollection read get_DataBindings;
    property HasDataBindings: Boolean read get_HasDataBindings;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IDataKeysControl')]
  DNIDataKeysControl = interface(DDN.mscorlib.DNObject)
  ['{96846167-8CEA-3D31-9EAC-0F1797320ED5}']
  { getters & setters } 

    function get_ClientIDRowSuffix: TArray<string>;
    function get_ClientIDRowSuffixDataKeys: DNDataKeyArray;

  { propertys } 

    property ClientIDRowSuffix: TArray<string> read get_ClientIDRowSuffix;
    property ClientIDRowSuffixDataKeys: DNDataKeyArray read get_ClientIDRowSuffixDataKeys;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IDataSource')]
  DNIDataSource = interface(DDN.mscorlib.DNObject)
  ['{8A41ABFC-1B3C-364C-9DFB-7B232D64ADB7}']
  { events } 

    procedure add_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetView(viewName: string): DNDataSourceView;
    function GetViewNames: DDN.mscorlib.DNICollection;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IDataSourceViewSchemaAccessor')]
  DNIDataSourceViewSchemaAccessor = interface(DDN.mscorlib.DNObject)
  ['{9FD31262-29D4-3E31-A2FD-589A7D4B3C37}']
  { getters & setters } 

    function get_DataSourceViewSchema: DDN.mscorlib.DNObject;
    procedure set_DataSourceViewSchema(value: DDN.mscorlib.DNObject);

  { propertys } 

    property DataSourceViewSchema: DDN.mscorlib.DNObject read get_DataSourceViewSchema write set_DataSourceViewSchema;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IExpressionsAccessor')]
  DNIExpressionsAccessor = interface(DDN.mscorlib.DNObject)
  ['{F291A6AE-3402-34B7-A3C9-374A272BBE89}']
  { getters & setters } 

    function get_HasExpressions: Boolean;
    function get_Expressions: DNExpressionBindingCollection;

  { propertys } 

    property HasExpressions: Boolean read get_HasExpressions;
    property Expressions: DNExpressionBindingCollection read get_Expressions;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IFilterResolutionService')]
  DNIFilterResolutionService = interface(DDN.mscorlib.DNObject)
  ['{50DB772C-37B6-3FBB-94C5-FC345C9951B7}']
  { methods } 

    function EvaluateFilter(filterName: string): Boolean;
    function CompareFilters(filter1: string; filter2: string): Int32;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IHierarchicalDataSource')]
  DNIHierarchicalDataSource = interface(DDN.mscorlib.DNObject)
  ['{F8226D7E-FC84-3D2D-A9F7-04DB706CB025}']
  { events } 

    procedure add_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetHierarchicalView(viewPath: string): DNHierarchicalDataSourceView;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IHierarchyData')]
  DNIHierarchyData = interface(DDN.mscorlib.DNObject)
  ['{1A7D7FC6-DCBD-3CAE-9359-25433116BEAC}']
  { getters & setters } 

    function get_HasChildren: Boolean;
    function get_Path: string;
    function get_Item: DDN.mscorlib.DNObject;
    function get_Type: string;

  { methods } 

    function GetChildren: DNIHierarchicalEnumerable;
    function GetParent: DNIHierarchyData;

  { propertys } 

    property HasChildren: Boolean read get_HasChildren;
    property Path: string read get_Path;
    property Item: DDN.mscorlib.DNObject read get_Item;
    property &Type: string read get_Type;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.INamingContainer')]
  DNINamingContainer = interface(DDN.mscorlib.DNObject)
  ['{9A0F2E06-7F10-3981-92B4-994498642CBE}']
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IDataItemContainer')]
  DNIDataItemContainer = interface(DNINamingContainer)
  ['{F8403222-06F1-3878-8A9A-403936FA15F5}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    function get_DataItemIndex: Int32;
    function get_DisplayIndex: Int32;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property DataItemIndex: Int32 read get_DataItemIndex;
    property DisplayIndex: Int32 read get_DisplayIndex;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.INavigateUIData')]
  DNINavigateUIData = interface(DDN.mscorlib.DNObject)
  ['{23089491-133C-35CC-9B0C-B0BCCEF7E8CC}']
  { getters & setters } 

    function get_Description: string;
    function get_Name: string;
    function get_NavigateUrl: string;
    function get_Value: string;

  { propertys } 

    property Description: string read get_Description;
    property Name: string read get_Name;
    property NavigateUrl: string read get_NavigateUrl;
    property Value: string read get_Value;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IParserAccessor')]
  DNIParserAccessor = interface(DDN.mscorlib.DNObject)
  ['{23DD04F4-D4D8-3140-B2BE-E92D6BFC5CD8}']
  { methods } 

    procedure AddParsedSubObject(obj: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IPostBackDataHandler')]
  DNIPostBackDataHandler = interface(DDN.mscorlib.DNObject)
  ['{7A5F12CB-E956-34D5-8151-6AFCA7BD7C39}']
  { methods } 

    function LoadPostData(postDataKey: string; postCollection: DDN.System.DNNameValueCollection): Boolean;
    procedure RaisePostDataChangedEvent;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IPostBackEventHandler')]
  DNIPostBackEventHandler = interface(DDN.mscorlib.DNObject)
  ['{AACE2526-9FBD-3B82-93F0-5B4A1697BF21}']
  { methods } 

    procedure RaisePostBackEvent(eventArgument: string);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IResourceUrlGenerator')]
  DNIResourceUrlGenerator = interface(DDN.mscorlib.DNObject)
  ['{1B3E769C-0F54-371D-9E14-FDAA988DD85D}']
  { methods } 

    function GetResourceUrl(&type: DDN.mscorlib.DNType; resourceName: string): string;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IStateFormatter')]
  DNIStateFormatter = interface(DDN.mscorlib.DNObject)
  ['{EE5F5AE9-DB8F-32E6-889C-8E30E38DD5E0}']
  { methods } 

    function Deserialize(serializedState: string): DDN.mscorlib.DNObject;
    function Serialize(state: DDN.mscorlib.DNObject): string;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IStateManager')]
  DNIStateManager = interface(DDN.mscorlib.DNObject)
  ['{B3919048-6C6F-3C5E-8648-99F5471060B1}']
  { getters & setters } 

    function get_IsTrackingViewState: Boolean;

  { methods } 

    procedure LoadViewState(state: DDN.mscorlib.DNObject);
    function SaveViewState: DDN.mscorlib.DNObject;
    procedure TrackViewState;

  { propertys } 

    property IsTrackingViewState: Boolean read get_IsTrackingViewState;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IStyleSheet')]
  DNIStyleSheet = interface(DDN.mscorlib.DNObject)
  ['{41A6B979-4253-37F9-8659-D870D9C9DAB9}']
  { methods } 

    procedure CreateStyleRule(style: DNStyle; urlResolver: DNIUrlResolutionService; selector: string);
    procedure RegisterStyle(style: DNStyle; urlResolver: DNIUrlResolutionService);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ITemplate')]
  DNITemplate = interface(DDN.mscorlib.DNObject)
  ['{F95F3FEC-A275-3419-AF5A-F53DE67117DB}']
  { methods } 

    procedure InstantiateIn(container: DNControl);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IBindableTemplate')]
  DNIBindableTemplate = interface(DNITemplate)
  ['{C3710A1C-B570-36F1-85B7-DBAD61637F35}']
  { methods } 

    function ExtractValues(container: DNControl): DDN.System.DNIOrderedDictionary;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.ITextControl')]
  DNITextControl = interface(DDN.mscorlib.DNObject)
  ['{1F8D5952-826A-3380-B817-3944853AD50D}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);

  { propertys } 

    property Text: string read get_Text write set_Text;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IEditableTextControl')]
  DNIEditableTextControl = interface(DNITextControl)
  ['{6A78FD64-3E82-33B6-AFBF-4B4B1D87372E}']
  { events } 

    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IThemeResolutionService')]
  DNIThemeResolutionService = interface(DDN.mscorlib.DNObject)
  ['{BA46431A-51D5-36FA-B56D-43D9AADEBF11}']
  { methods } 

    function GetAllThemeProviders: TArray<DNThemeProvider>;
    function GetThemeProvider: DNThemeProvider;
    function GetStylesheetThemeProvider: DNThemeProvider;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IUrlResolutionService')]
  DNIUrlResolutionService = interface(DDN.mscorlib.DNObject)
  ['{C01DAB44-84B8-3BC2-B027-469FEDC1A540}']
  { methods } 

    function ResolveClientUrl(relativeUrl: string): string;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IUserControlDesignerAccessor')]
  DNIUserControlDesignerAccessor = interface(DDN.mscorlib.DNObject)
  ['{A2581AF2-D489-39F9-B08A-E90B4654A0CC}']
  { getters & setters } 

    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_TagName: string;
    procedure set_TagName(value: string);

  { propertys } 

    property InnerText: string read get_InnerText write set_InnerText;
    property TagName: string read get_TagName write set_TagName;
  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IUserControlTypeResolutionService')]
  DNIUserControlTypeResolutionService = interface(DDN.mscorlib.DNObject)
  ['{E25E7379-2497-3047-8097-33F2B8602883}']
  { methods } 

    function GetType(tagPrefix: string; tagName: string): DDN.mscorlib.DNType;

  end;

  //-------------namespace: System.Web.UI----------------
  [DNTypeName('System.Web.UI.IValidator')]
  DNIValidator = interface(DDN.mscorlib.DNObject)
  ['{6CB14B01-E35F-38F3-8A30-DCEA86E72AC9}']
  { getters & setters } 

    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);

  { methods } 

    procedure Validate;

  { propertys } 

    property IsValid: Boolean read get_IsValid write set_IsValid;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IButtonControl')]
  DNIButtonControl = interface(DDN.mscorlib.DNObject)
  ['{D520C9EE-9ACE-379F-A25C-5824D00497DD}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_CommandArgument: string;
    procedure set_CommandArgument(value: string);
    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_PostBackUrl: string;
    procedure set_PostBackUrl(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);

  { events } 

    procedure add_Click(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Click(value: DDN.mscorlib.DNEventHandler);
    procedure add_Command(value: DNCommandEventHandler);
    procedure remove_Command(value: DNCommandEventHandler);

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property CommandArgument: string read get_CommandArgument write set_CommandArgument;
    property CommandName: string read get_CommandName write set_CommandName;
    property PostBackUrl: string read get_PostBackUrl write set_PostBackUrl;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ICallbackContainer')]
  DNICallbackContainer = interface(DDN.mscorlib.DNObject)
  ['{93BD9EC7-855F-3627-8EE3-474E0BD18543}']
  { methods } 

    function GetCallbackScript(buttonControl: DNIButtonControl; argument: string): string;

  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.ICompositeControlDesignerAccessor')]
  DNICompositeControlDesignerAccessor = interface(DDN.mscorlib.DNObject)
  ['{A1876989-7381-3754-8198-B65E7782DDAE}']
  { methods } 

    procedure RecreateChildControls;

  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IDataBoundControl')]
  DNIDataBoundControl = interface(DDN.mscorlib.DNObject)
  ['{F786667A-FA61-34D6-9876-AA2ADF11844E}']
  { getters & setters } 

    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataKeyNames: TArray<string>;
    procedure set_DataKeyNames(value: TArray<string>);
    function get_DataMember: string;
    procedure set_DataMember(value: string);

  { propertys } 

    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataKeyNames: TArray<string> read get_DataKeyNames write set_DataKeyNames;
    property DataMember: string read get_DataMember write set_DataMember;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IDataBoundItemControl')]
  DNIDataBoundItemControl = interface(DNIDataBoundControl)
  ['{3F70943D-49C0-31AD-9A1A-5C0DCA33C83D}']
  { getters & setters } 

    function get_DataKey: DNDataKey;
    function get_Mode: DNDataBoundControlMode;

  { propertys } 

    property DataKey: DNDataKey read get_DataKey;
    property Mode: DNDataBoundControlMode read get_Mode;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IDataBoundListControl')]
  DNIDataBoundListControl = interface(DNIDataBoundControl)
  ['{E47A1787-7C5A-38B0-83A4-BA7680B35AA9}']
  { getters & setters } 

    function get_DataKeys: DNDataKeyArray;
    function get_SelectedDataKey: DNDataKey;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_ClientIDRowSuffix: TArray<string>;
    procedure set_ClientIDRowSuffix(value: TArray<string>);
    function get_EnablePersistedSelection: Boolean;
    procedure set_EnablePersistedSelection(value: Boolean);

  { propertys } 

    property DataKeys: DNDataKeyArray read get_DataKeys;
    property SelectedDataKey: DNDataKey read get_SelectedDataKey;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property ClientIDRowSuffix: TArray<string> read get_ClientIDRowSuffix write set_ClientIDRowSuffix;
    property EnablePersistedSelection: Boolean read get_EnablePersistedSelection write set_EnablePersistedSelection;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IFieldControl')]
  DNIFieldControl = interface(DDN.mscorlib.DNObject)
  ['{2B0B2EDF-83FB-34A6-BB12-374BA026180A}']
  { getters & setters } 

    function get_FieldsGenerator: DNIAutoFieldGenerator;
    procedure set_FieldsGenerator(value: DNIAutoFieldGenerator);

  { propertys } 

    property FieldsGenerator: DNIAutoFieldGenerator read get_FieldsGenerator write set_FieldsGenerator;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IPersistedSelector')]
  DNIPersistedSelector = interface(DDN.mscorlib.DNObject)
  ['{E1810FC7-79A2-3D33-A607-69E138F6095F}']
  { getters & setters } 

    function get_DataKey: DNDataKey;
    procedure set_DataKey(value: DNDataKey);

  { propertys } 

    property DataKey: DNDataKey read get_DataKey write set_DataKey;
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IPostBackContainer')]
  DNIPostBackContainer = interface(DDN.mscorlib.DNObject)
  ['{24F87908-19E5-3446-A66B-DA9A5CAA4D5E}']
  { methods } 

    function GetPostBackOptions(buttonControl: DNIButtonControl): DNPostBackOptions;

  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  [DNTypeName('System.Web.UI.WebControls.IRepeatInfoUser')]
  DNIRepeatInfoUser = interface(DDN.mscorlib.DNObject)
  ['{687C44A5-5A30-3619-BE94-6D5F433BF9D1}']
  { getters & setters } 

    function get_HasHeader: Boolean;
    function get_HasFooter: Boolean;
    function get_HasSeparators: Boolean;
    function get_RepeatedItemCount: Int32;

  { methods } 

    function GetItemStyle(itemType: DNListItemType; repeatIndex: Int32): DNStyle;
    procedure RenderItem(itemType: DNListItemType; repeatIndex: Int32; repeatInfo: DNRepeatInfo; writer: DNHtmlTextWriter);

  { propertys } 

    property HasHeader: Boolean read get_HasHeader;
    property HasFooter: Boolean read get_HasFooter;
    property HasSeparators: Boolean read get_HasSeparators;
    property RepeatedItemCount: Int32 read get_RepeatedItemCount;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IPersonalizable')]
  DNIPersonalizable = interface(DDN.mscorlib.DNObject)
  ['{A77BAE48-B4FB-3DF4-9A05-A8D42B7F139A}']
  { getters & setters } 

    function get_IsDirty: Boolean;

  { methods } 

    procedure Load(state: DNPersonalizationDictionary);
    procedure Save(state: DNPersonalizationDictionary);

  { propertys } 

    property IsDirty: Boolean read get_IsDirty;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.ITrackingPersonalizable')]
  DNITrackingPersonalizable = interface(DDN.mscorlib.DNObject)
  ['{3C9CFB45-1CE6-30ED-8685-88DBCE39F295}']
  { getters & setters } 

    function get_TracksChanges: Boolean;

  { methods } 

    procedure BeginLoad;
    procedure BeginSave;
    procedure EndLoad;
    procedure EndSave;

  { propertys } 

    property TracksChanges: Boolean read get_TracksChanges;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.ITransformerConfigurationControl')]
  DNITransformerConfigurationControl = interface(DDN.mscorlib.DNObject)
  ['{6DCCB8B8-1E8A-317A-98B0-3281849E8814}']
  { events } 

    procedure add_Cancelled(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Cancelled(value: DDN.mscorlib.DNEventHandler);
    procedure add_Succeeded(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Succeeded(value: DDN.mscorlib.DNEventHandler);

  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IVersioningPersonalizable')]
  DNIVersioningPersonalizable = interface(DDN.mscorlib.DNObject)
  ['{1CE12C08-EDA3-36BD-8DA6-5AD5891F2539}']
  { methods } 

    procedure Load(unknownProperties: DDN.mscorlib.DNIDictionary);

  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebActionable')]
  DNIWebActionable = interface(DDN.mscorlib.DNObject)
  ['{A1DF85B5-BD62-3A85-8565-09E915DB7F78}']
  { getters & setters } 

    function get_Verbs: DNWebPartVerbCollection;

  { propertys } 

    property Verbs: DNWebPartVerbCollection read get_Verbs;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebEditable')]
  DNIWebEditable = interface(DDN.mscorlib.DNObject)
  ['{778EEB21-4EDD-325C-A31A-3A45EB6A7907}']
  { getters & setters } 

    function get_WebBrowsableObject: DDN.mscorlib.DNObject;

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;

  { propertys } 

    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebPart')]
  DNIWebPart = interface(DDN.mscorlib.DNObject)
  ['{78958742-CAE3-3765-88DD-DEF6868F2C67}']
  { getters & setters } 

    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);

  { propertys } 

    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property Description: string read get_Description write set_Description;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebPartField')]
  DNIWebPartField = interface(DDN.mscorlib.DNObject)
  ['{381540A0-F46C-33A2-8B8C-D663B5D90DCE}']
  { getters & setters } 

    function get_Schema: DDN.System.DNPropertyDescriptor;

  { methods } 

    procedure GetFieldValue(callback: DNFieldCallback);

  { propertys } 

    property Schema: DDN.System.DNPropertyDescriptor read get_Schema;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebPartParameters')]
  DNIWebPartParameters = interface(DDN.mscorlib.DNObject)
  ['{DE7679E4-8609-33D5-B4E3-373A82788321}']
  { getters & setters } 

    function get_Schema: DDN.System.DNPropertyDescriptorCollection;

  { methods } 

    procedure GetParametersData(callback: DNParametersCallback);
    procedure SetConsumerSchema(schema: DDN.System.DNPropertyDescriptorCollection);

  { propertys } 

    property Schema: DDN.System.DNPropertyDescriptorCollection read get_Schema;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebPartRow')]
  DNIWebPartRow = interface(DDN.mscorlib.DNObject)
  ['{456A5FC8-CAEC-3D81-88AE-1EA1FE5C4BAF}']
  { getters & setters } 

    function get_Schema: DDN.System.DNPropertyDescriptorCollection;

  { methods } 

    procedure GetRowData(callback: DNRowCallback);

  { propertys } 

    property Schema: DDN.System.DNPropertyDescriptorCollection read get_Schema;
  end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  [DNTypeName('System.Web.UI.WebControls.WebParts.IWebPartTable')]
  DNIWebPartTable = interface(DDN.mscorlib.DNObject)
  ['{1A416041-C064-39C7-A1C1-5189320C0949}']
  { getters & setters } 

    function get_Schema: DDN.System.DNPropertyDescriptorCollection;

  { methods } 

    procedure GetTableData(callback: DNTableCallback);

  { propertys } 

    property Schema: DDN.System.DNPropertyDescriptorCollection read get_Schema;
  end;

  //-------------namespace: System.Web.Util----------------
  [DNTypeName('System.Web.Util.IWebObjectFactory')]
  DNIWebObjectFactory = interface(DDN.mscorlib.DNObject)
  ['{11071503-E6A1-35DA-BBA5-45CE73165061}']
  { methods } 

    function CreateInstance: DDN.mscorlib.DNObject;

  end;

  //-------------namespace: System.Web.Util----------------
  [DNTypeName('System.Web.Util.IWebPropertyAccessor')]
  DNIWebPropertyAccessor = interface(DDN.mscorlib.DNObject)
  ['{C3B4C9FB-0EAB-3864-A445-2A1D04A72AF7}']
  { methods } 

    function GetProperty(target: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    procedure SetProperty(target: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);

  end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipPasswordAttributeClass = interface(DNObjectClass)
  ['{3659C759-A457-593E-95A3-AA8A364EC5DC}']
  { constructors } 

    {class} function init: DNMembershipPasswordAttribute;

  end;

  [DNTypeName('System.Web.Security.MembershipPasswordAttribute')]
  DNMembershipPasswordAttribute = interface(DNObject)
  ['{2C24E4E7-AD1B-3020-8B9B-2C8328070E37}']
  { getters & setters } 

    function get_MinRequiredPasswordLength: Int32;
    procedure set_MinRequiredPasswordLength(value: Int32);
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    procedure set_MinRequiredNonAlphanumericCharacters(value: Int32);
    function get_PasswordStrengthRegularExpression: string;
    procedure set_PasswordStrengthRegularExpression(value: string);
    function get_ResourceType: DDN.mscorlib.DNType;
    procedure set_ResourceType(value: DDN.mscorlib.DNType);
    function get_MinPasswordLengthError: string;
    procedure set_MinPasswordLengthError(value: string);
    function get_MinNonAlphanumericCharactersError: string;
    procedure set_MinNonAlphanumericCharactersError(value: string);
    function get_PasswordStrengthError: string;
    procedure set_PasswordStrengthError(value: string);
    function get_PasswordStrengthRegexTimeout: DDN.mscorlib.DNNullable<Int32>;
    procedure set_PasswordStrengthRegexTimeout(value: DDN.mscorlib.DNNullable<Int32>);
    function get_RequiresValidationContext: Boolean;
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_ErrorMessageResourceName: string;
    procedure set_ErrorMessageResourceName(value: string);
    function get_ErrorMessageResourceType: DDN.mscorlib.DNType;
    procedure set_ErrorMessageResourceType(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function FormatErrorMessage(name: string): string;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean;
    procedure Validate(value: DDN.mscorlib.DNObject; name: string); overload;
    procedure Validate(value: DDN.mscorlib.DNObject; validationContext: DDN.System.ComponentModel.DataAnnotations.DNValidationContext); overload;
    function GetValidationResult(value: DDN.mscorlib.DNObject; validationContext: DDN.System.ComponentModel.DataAnnotations.DNValidationContext): DDN.System.ComponentModel.DataAnnotations.DNValidationResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength write set_MinRequiredPasswordLength;
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters write set_MinRequiredNonAlphanumericCharacters;
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression write set_PasswordStrengthRegularExpression;
    property ResourceType: DDN.mscorlib.DNType read get_ResourceType write set_ResourceType;
    property MinPasswordLengthError: string read get_MinPasswordLengthError write set_MinPasswordLengthError;
    property MinNonAlphanumericCharactersError: string read get_MinNonAlphanumericCharactersError write set_MinNonAlphanumericCharactersError;
    property PasswordStrengthError: string read get_PasswordStrengthError write set_PasswordStrengthError;
    property PasswordStrengthRegexTimeout: DDN.mscorlib.DNNullable<Int32> read get_PasswordStrengthRegexTimeout write set_PasswordStrengthRegexTimeout;
    property RequiresValidationContext: Boolean read get_RequiresValidationContext;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property ErrorMessageResourceName: string read get_ErrorMessageResourceName write set_ErrorMessageResourceName;
    property ErrorMessageResourceType: DDN.mscorlib.DNType read get_ErrorMessageResourceType write set_ErrorMessageResourceType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNMembershipPasswordAttribute = class(TDNGenericImport<DNMembershipPasswordAttributeClass, DNMembershipPasswordAttribute>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNBuildProviderAppliesToAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{88120D21-58BB-53CF-A6C4-785C9BE2F4BC}']
  { constructors } 

    {class} function init(appliesTo: DNBuildProviderAppliesTo): DNBuildProviderAppliesToAttribute;

  end;

  [DNTypeName('System.Web.Compilation.BuildProviderAppliesToAttribute')]
  DNBuildProviderAppliesToAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EDA0A723-C2A1-3ABF-BD87-86B9F88B7DD0}']
  { getters & setters } 

    function get_AppliesTo: DNBuildProviderAppliesTo;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppliesTo: DNBuildProviderAppliesTo read get_AppliesTo;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBuildProviderAppliesToAttribute = class(TDNGenericImport<DNBuildProviderAppliesToAttributeClass, DNBuildProviderAppliesToAttribute>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNDesignTimeResourceProviderFactoryAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{730C02B0-2BCE-54FD-889D-7C9B02DC5B21}']
  { constructors } 

    {class} function init(factoryType: DDN.mscorlib.DNType): DNDesignTimeResourceProviderFactoryAttribute; overload;
    {class} function init(factoryTypeName: string): DNDesignTimeResourceProviderFactoryAttribute; overload;

  end;

  [DNTypeName('System.Web.Compilation.DesignTimeResourceProviderFactoryAttribute')]
  DNDesignTimeResourceProviderFactoryAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F2D0E8F9-D9B6-31E6-B99C-6E038A923257}']
  { getters & setters } 

    function get_FactoryTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FactoryTypeName: string read get_FactoryTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDesignTimeResourceProviderFactoryAttribute = class(TDNGenericImport<DNDesignTimeResourceProviderFactoryAttributeClass, DNDesignTimeResourceProviderFactoryAttribute>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNExpressionEditorAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1DE2EFBB-072E-51C4-BA66-19AAA37B9015}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType): DNExpressionEditorAttribute; overload;
    {class} function init(typeName: string): DNExpressionEditorAttribute; overload;

  end;

  [DNTypeName('System.Web.Compilation.ExpressionEditorAttribute')]
  DNExpressionEditorAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2BB69D48-A1AC-37AF-B3B9-2BE530B9086A}']
  { getters & setters } 

    function get_EditorTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EditorTypeName: string read get_EditorTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExpressionEditorAttribute = class(TDNGenericImport<DNExpressionEditorAttributeClass, DNExpressionEditorAttribute>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNExpressionPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{52C9308C-48F5-50BF-8388-319B2B2DE5E6}']
  { constructors } 

    {class} function init(expressionPrefix: string): DNExpressionPrefixAttribute;

  end;

  [DNTypeName('System.Web.Compilation.ExpressionPrefixAttribute')]
  DNExpressionPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B0D08560-C618-3982-A844-7C6C6756031F}']
  { getters & setters } 

    function get_ExpressionPrefix: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExpressionPrefix: string read get_ExpressionPrefix;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExpressionPrefixAttribute = class(TDNGenericImport<DNExpressionPrefixAttributeClass, DNExpressionPrefixAttribute>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNFolderLevelBuildProviderAppliesToAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0116C36B-25AE-56E3-B8AA-3A78026A0A40}']
  { constructors } 

    {class} function init(appliesTo: DNFolderLevelBuildProviderAppliesTo): DNFolderLevelBuildProviderAppliesToAttribute;

  end;

  [DNTypeName('System.Web.Compilation.FolderLevelBuildProviderAppliesToAttribute')]
  DNFolderLevelBuildProviderAppliesToAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5A088EEE-0D01-3AFF-A7D5-36E6A954D7A2}']
  { getters & setters } 

    function get_AppliesTo: DNFolderLevelBuildProviderAppliesTo;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppliesTo: DNFolderLevelBuildProviderAppliesTo read get_AppliesTo;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFolderLevelBuildProviderAppliesToAttribute = class(TDNGenericImport<DNFolderLevelBuildProviderAppliesToAttributeClass, DNFolderLevelBuildProviderAppliesToAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNBindingBehaviorAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5E1A1BBE-47A6-5D78-A52D-437FE9A867AF}']
  { constructors } 

    {class} function init(behavior: DNBindingBehavior): DNBindingBehaviorAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.BindingBehaviorAttribute')]
  DNBindingBehaviorAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DFF9B9B8-D615-3817-B5D5-83755225307B}']
  { getters & setters } 

    function get_Behavior: DNBindingBehavior;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Behavior: DNBindingBehavior read get_Behavior;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindingBehaviorAttribute = class(TDNGenericImport<DNBindingBehaviorAttributeClass, DNBindingBehaviorAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNBindNeverAttributeClass = interface(DNBindingBehaviorAttributeClass)
  ['{9F1F061E-8466-55EA-A3BB-CFDEAA363D77}']
  { constructors } 

    {class} function init: DNBindNeverAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.BindNeverAttribute')]
  DNBindNeverAttribute = interface(DNBindingBehaviorAttribute)
  ['{A0754FFC-AEB3-34C8-9ADB-C2B72B1527CC}']
  { getters & setters } 

    function get_Behavior: DNBindingBehavior;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Behavior: DNBindingBehavior read get_Behavior;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindNeverAttribute = class(TDNGenericImport<DNBindNeverAttributeClass, DNBindNeverAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNBindRequiredAttributeClass = interface(DNBindingBehaviorAttributeClass)
  ['{2B52EA96-F47E-59F3-84B7-4FE35F995200}']
  { constructors } 

    {class} function init: DNBindRequiredAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.BindRequiredAttribute')]
  DNBindRequiredAttribute = interface(DNBindingBehaviorAttribute)
  ['{AF5C003F-3A29-37B1-8BA0-8A2D71EBDB19}']
  { getters & setters } 

    function get_Behavior: DNBindingBehavior;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Behavior: DNBindingBehavior read get_Behavior;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNBindRequiredAttribute = class(TDNGenericImport<DNBindRequiredAttributeClass, DNBindRequiredAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNExtensibleModelBinderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FD1D2959-C4F9-52F3-AEB3-249B763054FF}']
  { constructors } 

    {class} function init(binderType: DDN.mscorlib.DNType): DNExtensibleModelBinderAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.ExtensibleModelBinderAttribute')]
  DNExtensibleModelBinderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{766E2D41-C12D-379E-92DB-80B8219AC36A}']
  { getters & setters } 

    function get_BinderType: DDN.mscorlib.DNType;
    function get_SuppressPrefixCheck: Boolean;
    procedure set_SuppressPrefixCheck(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BinderType: DDN.mscorlib.DNType read get_BinderType;
    property SuppressPrefixCheck: Boolean read get_SuppressPrefixCheck write set_SuppressPrefixCheck;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNExtensibleModelBinderAttribute = class(TDNGenericImport<DNExtensibleModelBinderAttributeClass, DNExtensibleModelBinderAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderProviderOptionsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7E6E3A71-28A6-57C5-849A-5D97E02C4A81}']
  { constructors } 

    {class} function init: DNModelBinderProviderOptionsAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderProviderOptionsAttribute')]
  DNModelBinderProviderOptionsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{11830456-7C28-343D-BCC1-AED285E725B3}']
  { getters & setters } 

    function get_FrontOfList: Boolean;
    procedure set_FrontOfList(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FrontOfList: Boolean read get_FrontOfList write set_FrontOfList;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNModelBinderProviderOptionsAttribute = class(TDNGenericImport<DNModelBinderProviderOptionsAttributeClass, DNModelBinderProviderOptionsAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNUserProfileAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{0EB31CCD-7D0E-5487-BBE2-30880D7553E5}']
  { constructors } 

    {class} function init: DNUserProfileAttribute;

  end;

  [DNTypeName('System.Web.ModelBinding.UserProfileAttribute')]
  DNUserProfileAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8BA87DAA-40C9-3004-927F-8ABB2782F57A}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUserProfileAttribute = class(TDNGenericImport<DNUserProfileAttributeClass, DNUserProfileAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNValueProviderSourceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{34C563DD-57BB-576A-8C22-AFEBAB66D0EA}']
  end;

  [DNTypeName('System.Web.ModelBinding.ValueProviderSourceAttribute')]
  DNValueProviderSourceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{97A10FF4-89C2-3929-B10D-F09A2CE032F5}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetModelName: string;
    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValueProviderSourceAttribute = class(TDNGenericImport<DNValueProviderSourceAttributeClass, DNValueProviderSourceAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNControlAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{C9AA1F6E-739D-53B4-B477-FDAE7883660A}']
  { constructors } 

    {class} function init: DNControlAttribute; overload;
    {class} function init(controlID: string): DNControlAttribute; overload;
    {class} function init(controlID: string; propertyName: string): DNControlAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ControlAttribute')]
  DNControlAttribute = interface(DNValueProviderSourceAttribute)
  ['{F09942F4-0BB3-3606-8A08-EB1D40635120}']
  { getters & setters } 

    function get_ControlID: string;
    function get_PropertyName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlID: string read get_ControlID;
    property PropertyName: string read get_PropertyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNControlAttribute = class(TDNGenericImport<DNControlAttributeClass, DNControlAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNCookieAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{6BD42A7F-C7D0-5134-9C2E-4196D3779824}']
  { constructors } 

    {class} function init: DNCookieAttribute; overload;
    {class} function init(name: string): DNCookieAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.CookieAttribute')]
  DNCookieAttribute = interface(DNValueProviderSourceAttribute)
  ['{D6FCAC2A-ADAE-3688-81F9-E18045285924}']
  { getters & setters } 

    function get_Name: string;
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCookieAttribute = class(TDNGenericImport<DNCookieAttributeClass, DNCookieAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNFormAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{54C0126A-2EEF-5E11-B396-9E5532ADAF1C}']
  { constructors } 

    {class} function init: DNFormAttribute; overload;
    {class} function init(fieldName: string): DNFormAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.FormAttribute')]
  DNFormAttribute = interface(DNValueProviderSourceAttribute)
  ['{ABD19C65-0C24-3C7D-97BB-416FB2571B13}']
  { getters & setters } 

    function get_FieldName: string;
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldName: string read get_FieldName;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFormAttribute = class(TDNGenericImport<DNFormAttributeClass, DNFormAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNProfileAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{57103A7C-EFF3-55F1-AFA3-5009E9F1A8A7}']
  { constructors } 

    {class} function init: DNProfileAttribute; overload;
    {class} function init(key: string): DNProfileAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ProfileAttribute')]
  DNProfileAttribute = interface(DNValueProviderSourceAttribute)
  ['{68DEE482-D6C2-3114-BD75-42FDDF920E7F}']
  { getters & setters } 

    function get_Key: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNProfileAttribute = class(TDNGenericImport<DNProfileAttributeClass, DNProfileAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNQueryStringAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{229D5F1F-F74D-5594-8500-9AA1D5349C4B}']
  { constructors } 

    {class} function init: DNQueryStringAttribute; overload;
    {class} function init(key: string): DNQueryStringAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.QueryStringAttribute')]
  DNQueryStringAttribute = interface(DNValueProviderSourceAttribute)
  ['{1E46C49F-2926-3D69-ADA4-5123BA31B442}']
  { getters & setters } 

    function get_Key: string;
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNQueryStringAttribute = class(TDNGenericImport<DNQueryStringAttributeClass, DNQueryStringAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNRouteDataAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{BDB8E6E8-A0DF-5188-9DCE-2D3F16E14AD0}']
  { constructors } 

    {class} function init: DNRouteDataAttribute; overload;
    {class} function init(key: string): DNRouteDataAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.RouteDataAttribute')]
  DNRouteDataAttribute = interface(DNValueProviderSourceAttribute)
  ['{C0FF3458-31D9-344D-BE7B-64BD27CC6B96}']
  { getters & setters } 

    function get_Key: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNRouteDataAttribute = class(TDNGenericImport<DNRouteDataAttributeClass, DNRouteDataAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNSessionAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{7385AB57-7841-590B-A4A2-D6E411540844}']
  { constructors } 

    {class} function init: DNSessionAttribute; overload;
    {class} function init(name: string): DNSessionAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.SessionAttribute')]
  DNSessionAttribute = interface(DNValueProviderSourceAttribute)
  ['{E1A377BA-DED2-3E0A-9194-F81CC27F5D2D}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetModelName: string;
    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSessionAttribute = class(TDNGenericImport<DNSessionAttributeClass, DNSessionAttribute>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNViewStateAttributeClass = interface(DNValueProviderSourceAttributeClass)
  ['{F576A219-EEE2-582A-987E-4F6407D0908C}']
  { constructors } 

    {class} function init: DNViewStateAttribute; overload;
    {class} function init(key: string): DNViewStateAttribute; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ViewStateAttribute')]
  DNViewStateAttribute = interface(DNValueProviderSourceAttribute)
  ['{D4FB0648-2A82-3ED2-83E3-E1538757A406}']
  { getters & setters } 

    function get_Key: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetValueProvider(modelBindingExecutionContext: DNModelBindingExecutionContext): DNIValueProvider;
    function GetModelName: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Key: string read get_Key;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNViewStateAttribute = class(TDNGenericImport<DNViewStateAttributeClass, DNViewStateAttribute>) end;

  //-------------namespace: System.Web----------------
  DNPreApplicationStartMethodAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D29AF36C-7CD1-5062-A0CF-02D87D54DFED}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; methodName: string): DNPreApplicationStartMethodAttribute;

  end;

  [DNTypeName('System.Web.PreApplicationStartMethodAttribute')]
  DNPreApplicationStartMethodAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{A9627D04-095B-3FA7-934F-813CE433A13C}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    function get_MethodName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DDN.mscorlib.DNType read get_Type;
    property MethodName: string read get_MethodName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPreApplicationStartMethodAttribute = class(TDNGenericImport<DNPreApplicationStartMethodAttributeClass, DNPreApplicationStartMethodAttribute>) end;

  //-------------namespace: System.Web.Profile----------------
  DNCustomProviderDataAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6C6D337A-15E7-5EF8-91B0-B11EBEB599D5}']
  { constructors } 

    {class} function init(customProviderData: string): DNCustomProviderDataAttribute;

  end;

  [DNTypeName('System.Web.Profile.CustomProviderDataAttribute')]
  DNCustomProviderDataAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{79B4A502-3B06-3D34-AABC-84066014640E}']
  { getters & setters } 

    function get_CustomProviderData: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CustomProviderData: string read get_CustomProviderData;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCustomProviderDataAttribute = class(TDNGenericImport<DNCustomProviderDataAttributeClass, DNCustomProviderDataAttribute>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{638D047A-ADF7-5C3F-A4E9-113784779AD7}']
  { constructors } 

    {class} function init(providerName: string): DNProfileProviderAttribute;

  end;

  [DNTypeName('System.Web.Profile.ProfileProviderAttribute')]
  DNProfileProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{15342A69-488B-3C87-B52E-43C34F510649}']
  { getters & setters } 

    function get_ProviderName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProviderName: string read get_ProviderName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNProfileProviderAttribute = class(TDNGenericImport<DNProfileProviderAttributeClass, DNProfileProviderAttribute>) end;

  //-------------namespace: System.Web.Profile----------------
  DNSettingsAllowAnonymousAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{99063960-6CD5-57D8-B580-55CEB864A88E}']
  { constructors } 

    {class} function init(allow: Boolean): DNSettingsAllowAnonymousAttribute;

  end;

  [DNTypeName('System.Web.Profile.SettingsAllowAnonymousAttribute')]
  DNSettingsAllowAnonymousAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{260E6993-7591-3EB9-9B2D-CC2FEE10A5C0}']
  { getters & setters } 

    function get_Allow: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function IsDefaultAttribute: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Allow: Boolean read get_Allow;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSettingsAllowAnonymousAttribute = class(TDNGenericImport<DNSettingsAllowAnonymousAttributeClass, DNSettingsAllowAnonymousAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNConstructorNeedsTagAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{AE2748EC-AEFC-53D2-A439-319127570FA9}']
  { constructors } 

    {class} function init: DNConstructorNeedsTagAttribute; overload;
    {class} function init(needsTag: Boolean): DNConstructorNeedsTagAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.ConstructorNeedsTagAttribute')]
  DNConstructorNeedsTagAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{06A54D6A-C60C-3AED-8D3E-2092F716E997}']
  { getters & setters } 

    function get_NeedsTag: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NeedsTag: Boolean read get_NeedsTag;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConstructorNeedsTagAttribute = class(TDNGenericImport<DNConstructorNeedsTagAttributeClass, DNConstructorNeedsTagAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlBuilderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{D2648C5C-0F00-59A9-96D6-919C6E796A8F}']
  { constructors } 

    {class} function init(builderType: DDN.mscorlib.DNType): DNControlBuilderAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNControlBuilderAttribute;

  { static fields } 

    {class} property &Default: DNControlBuilderAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.ControlBuilderAttribute')]
  DNControlBuilderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0EA1A452-E9CB-3802-8D18-66C95EEED518}']
  { getters & setters } 

    function get_BuilderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuilderType: DDN.mscorlib.DNType read get_BuilderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNControlBuilderAttribute = class(TDNGenericImport<DNControlBuilderAttributeClass, DNControlBuilderAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlValuePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6E6C2BAF-BD9A-5D9D-AF00-A450261EE764}']
  { constructors } 

    {class} function init(name: string): DNControlValuePropertyAttribute; overload;
    {class} function init(name: string; defaultValue: DDN.mscorlib.DNObject): DNControlValuePropertyAttribute; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNType; defaultValue: string): DNControlValuePropertyAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.ControlValuePropertyAttribute')]
  DNControlValuePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{62E2D17A-F25D-3929-843E-32B8FBC36A56}']
  { getters & setters } 

    function get_Name: string;
    function get_DefaultValue: DDN.mscorlib.DNObject;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property DefaultValue: DDN.mscorlib.DNObject read get_DefaultValue;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNControlValuePropertyAttribute = class(TDNGenericImport<DNControlValuePropertyAttributeClass, DNControlValuePropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNCssClassPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{245F3170-5AA3-57AF-9054-CFA7E918CA65}']
  { constructors } 

    {class} function init: DNCssClassPropertyAttribute;

  end;

  [DNTypeName('System.Web.UI.CssClassPropertyAttribute')]
  DNCssClassPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8E5629D8-E891-3883-8D24-E44B0B003F49}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNCssClassPropertyAttribute = class(TDNGenericImport<DNCssClassPropertyAttributeClass, DNCssClassPropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataBindingHandlerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CA9FAC62-9E91-557F-8C4A-8B55DD817C79}']
  { constructors } 

    {class} function init: DNDataBindingHandlerAttribute; overload;
    {class} function init(&type: DDN.mscorlib.DNType): DNDataBindingHandlerAttribute; overload;
    {class} function init(typeName: string): DNDataBindingHandlerAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNDataBindingHandlerAttribute;

  { static fields } 

    {class} property &Default: DNDataBindingHandlerAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.DataBindingHandlerAttribute')]
  DNDataBindingHandlerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{8C79EAC2-55F4-38D5-AC98-91692D303FEB}']
  { getters & setters } 

    function get_HandlerTypeName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HandlerTypeName: string read get_HandlerTypeName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataBindingHandlerAttribute = class(TDNGenericImport<DNDataBindingHandlerAttributeClass, DNDataBindingHandlerAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataKeyPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{7711B293-5A1A-51C6-BF29-1B8BB6246ADF}']
  { constructors } 

    {class} function init(name: string): DNDataKeyPropertyAttribute;

  end;

  [DNTypeName('System.Web.UI.DataKeyPropertyAttribute')]
  DNDataKeyPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C0AB78A1-36C2-36C3-A83E-35986D14BF77}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNDataKeyPropertyAttribute = class(TDNGenericImport<DNDataKeyPropertyAttributeClass, DNDataKeyPropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNFileLevelControlBuilderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81FDC1F0-F9EA-5C9B-912D-87BF7699EC73}']
  { constructors } 

    {class} function init(builderType: DDN.mscorlib.DNType): DNFileLevelControlBuilderAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNFileLevelControlBuilderAttribute;

  { static fields } 

    {class} property &Default: DNFileLevelControlBuilderAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.FileLevelControlBuilderAttribute')]
  DNFileLevelControlBuilderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DED271CC-73FF-3C3F-A7B1-310E6DD3B4FF}']
  { getters & setters } 

    function get_BuilderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuilderType: DDN.mscorlib.DNType read get_BuilderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFileLevelControlBuilderAttribute = class(TDNGenericImport<DNFileLevelControlBuilderAttributeClass, DNFileLevelControlBuilderAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNFilterableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{B855C6DB-B599-53DB-8EFD-878B8A5E1384}']
  { constructors } 

    {class} function init(filterable: Boolean): DNFilterableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNFilterableAttribute;
   function __fakeFieldGet_No: DNFilterableAttribute;
   function __fakeFieldGet_Default: DNFilterableAttribute;

  { static fields } 

    {class} property Yes: DNFilterableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNFilterableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNFilterableAttribute read __fakeFieldGet_Default;

  { static methods } 

    {class} function IsObjectFilterable(instance: DDN.mscorlib.DNObject): Boolean;
    {class} function IsPropertyFilterable(propertyDescriptor: DDN.System.DNPropertyDescriptor): Boolean;
    {class} function IsTypeFilterable(&type: DDN.mscorlib.DNType): Boolean;

  end;

  [DNTypeName('System.Web.UI.FilterableAttribute')]
  DNFilterableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{217E80FB-7BF3-3CE1-8141-D44583EDEE31}']
  { getters & setters } 

    function get_Filterable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Filterable: Boolean read get_Filterable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNFilterableAttribute = class(TDNGenericImport<DNFilterableAttributeClass, DNFilterableAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNIDReferencePropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{047477F0-9870-55A0-832F-0092EFDB2BE2}']
  { constructors } 

    {class} function init: DNIDReferencePropertyAttribute; overload;
    {class} function init(referencedControlType: DDN.mscorlib.DNType): DNIDReferencePropertyAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.IDReferencePropertyAttribute')]
  DNIDReferencePropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{397C9BFC-7BBF-3001-88CC-D99DE3C9D20B}']
  { getters & setters } 

    function get_ReferencedControlType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReferencedControlType: DDN.mscorlib.DNType read get_ReferencedControlType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNIDReferencePropertyAttribute = class(TDNGenericImport<DNIDReferencePropertyAttributeClass, DNIDReferencePropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNNonVisualControlAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3E260CCE-5DFC-5A01-BB0E-C245A33A8B2B}']
  { constructors } 

    {class} function init: DNNonVisualControlAttribute; overload;
    {class} function init(nonVisual: Boolean): DNNonVisualControlAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_NonVisual: DNNonVisualControlAttribute;
   function __fakeFieldGet_Visual: DNNonVisualControlAttribute;
   function __fakeFieldGet_Default: DNNonVisualControlAttribute;

  { static fields } 

    {class} property NonVisual: DNNonVisualControlAttribute read __fakeFieldGet_NonVisual;
    {class} property Visual: DNNonVisualControlAttribute read __fakeFieldGet_Visual;
    {class} property &Default: DNNonVisualControlAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.NonVisualControlAttribute')]
  DNNonVisualControlAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CD558F01-7AA6-3BCC-9383-C4CCA05FFB71}']
  { getters & setters } 

    function get_IsNonVisual: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsNonVisual: Boolean read get_IsNonVisual;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNNonVisualControlAttribute = class(TDNGenericImport<DNNonVisualControlAttributeClass, DNNonVisualControlAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNParseChildrenAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{52D52CD7-978A-540E-A9E0-87841923E715}']
  { constructors } 

    {class} function init: DNParseChildrenAttribute; overload;
    {class} function init(childrenAsProperties: Boolean): DNParseChildrenAttribute; overload;
    {class} function init(childControlType: DDN.mscorlib.DNType): DNParseChildrenAttribute; overload;
    {class} function init(childrenAsProperties: Boolean; defaultProperty: string): DNParseChildrenAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_ParseAsChildren: DNParseChildrenAttribute;
   function __fakeFieldGet_ParseAsProperties: DNParseChildrenAttribute;
   function __fakeFieldGet_Default: DNParseChildrenAttribute;

  { static fields } 

    {class} property ParseAsChildren: DNParseChildrenAttribute read __fakeFieldGet_ParseAsChildren;
    {class} property ParseAsProperties: DNParseChildrenAttribute read __fakeFieldGet_ParseAsProperties;
    {class} property &Default: DNParseChildrenAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.ParseChildrenAttribute')]
  DNParseChildrenAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{0FF431B8-CD70-3A3A-8E98-18C2D70E5C25}']
  { getters & setters } 

    function get_ChildControlType: DDN.mscorlib.DNType;
    function get_ChildrenAsProperties: Boolean;
    procedure set_ChildrenAsProperties(value: Boolean);
    function get_DefaultProperty: string;
    procedure set_DefaultProperty(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChildControlType: DDN.mscorlib.DNType read get_ChildControlType;
    property ChildrenAsProperties: Boolean read get_ChildrenAsProperties write set_ChildrenAsProperties;
    property DefaultProperty: string read get_DefaultProperty write set_DefaultProperty;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNParseChildrenAttribute = class(TDNGenericImport<DNParseChildrenAttributeClass, DNParseChildrenAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNPartialCachingAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C6648B6A-39C2-5A63-B8CF-3AC5DB0799B3}']
  { constructors } 

    {class} function init(duration: Int32): DNPartialCachingAttribute; overload;
    {class} function init(duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string): DNPartialCachingAttribute; overload;
    {class} function init(duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; shared: Boolean): DNPartialCachingAttribute; overload;
    {class} function init(duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; sqlDependency: string; shared: Boolean): DNPartialCachingAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.PartialCachingAttribute')]
  DNPartialCachingAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{76E430B4-737D-3F36-91B5-A076670AFB65}']
  { getters & setters } 

    function get_Duration: Int32;
    procedure set_Duration(value: Int32);
    function get_VaryByParams: string;
    procedure set_VaryByParams(value: string);
    function get_VaryByControls: string;
    procedure set_VaryByControls(value: string);
    function get_VaryByCustom: string;
    procedure set_VaryByCustom(value: string);
    function get_SqlDependency: string;
    procedure set_SqlDependency(value: string);
    function get_Shared: Boolean;
    procedure set_Shared(value: Boolean);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Duration: Int32 read get_Duration write set_Duration;
    property VaryByParams: string read get_VaryByParams write set_VaryByParams;
    property VaryByControls: string read get_VaryByControls write set_VaryByControls;
    property VaryByCustom: string read get_VaryByCustom write set_VaryByCustom;
    property SqlDependency: string read get_SqlDependency write set_SqlDependency;
    property Shared: Boolean read get_Shared write set_Shared;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPartialCachingAttribute = class(TDNGenericImport<DNPartialCachingAttributeClass, DNPartialCachingAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNPersistChildrenAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C9581551-DA10-5AD9-B858-6DA755709CAA}']
  { constructors } 

    {class} function init(persist: Boolean): DNPersistChildrenAttribute; overload;
    {class} function init(persist: Boolean; usesCustomPersistence: Boolean): DNPersistChildrenAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNPersistChildrenAttribute;
   function __fakeFieldGet_No: DNPersistChildrenAttribute;
   function __fakeFieldGet_Default: DNPersistChildrenAttribute;

  { static fields } 

    {class} property Yes: DNPersistChildrenAttribute read __fakeFieldGet_Yes;
    {class} property No: DNPersistChildrenAttribute read __fakeFieldGet_No;
    {class} property &Default: DNPersistChildrenAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.PersistChildrenAttribute')]
  DNPersistChildrenAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{054C9BC5-DE3F-364A-A7D9-AC35FD17B340}']
  { getters & setters } 

    function get_Persist: Boolean;
    function get_UsesCustomPersistence: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Persist: Boolean read get_Persist;
    property UsesCustomPersistence: Boolean read get_UsesCustomPersistence;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPersistChildrenAttribute = class(TDNGenericImport<DNPersistChildrenAttributeClass, DNPersistChildrenAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNPersistenceModeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{DCAF228E-D827-514F-8228-CF94594DC30E}']
  { constructors } 

    {class} function init(mode: DNPersistenceMode): DNPersistenceModeAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Attribute: DNPersistenceModeAttribute;
   function __fakeFieldGet_InnerProperty: DNPersistenceModeAttribute;
   function __fakeFieldGet_InnerDefaultProperty: DNPersistenceModeAttribute;
   function __fakeFieldGet_EncodedInnerDefaultProperty: DNPersistenceModeAttribute;
   function __fakeFieldGet_Default: DNPersistenceModeAttribute;

  { static fields } 

    {class} property Attribute: DNPersistenceModeAttribute read __fakeFieldGet_Attribute;
    {class} property InnerProperty: DNPersistenceModeAttribute read __fakeFieldGet_InnerProperty;
    {class} property InnerDefaultProperty: DNPersistenceModeAttribute read __fakeFieldGet_InnerDefaultProperty;
    {class} property EncodedInnerDefaultProperty: DNPersistenceModeAttribute read __fakeFieldGet_EncodedInnerDefaultProperty;
    {class} property &Default: DNPersistenceModeAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.PersistenceModeAttribute')]
  DNPersistenceModeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{F1FE6D93-A12C-35D1-8B19-FA62D48C8A94}']
  { getters & setters } 

    function get_Mode: DNPersistenceMode;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNPersistenceMode read get_Mode;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPersistenceModeAttribute = class(TDNGenericImport<DNPersistenceModeAttributeClass, DNPersistenceModeAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNSupportsEventValidationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{EEC7BA02-1B5D-57DE-9EED-116A8BAFE678}']
  { constructors } 

    {class} function init: DNSupportsEventValidationAttribute;

  end;

  [DNTypeName('System.Web.UI.SupportsEventValidationAttribute')]
  DNSupportsEventValidationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{28802846-DBE4-3CBE-AFBE-634DE456BC92}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSupportsEventValidationAttribute = class(TDNGenericImport<DNSupportsEventValidationAttributeClass, DNSupportsEventValidationAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNTagPrefixAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ACDF0986-3224-5C50-9B86-400D73632FAD}']
  { constructors } 

    {class} function init(namespaceName: string; tagPrefix: string): DNTagPrefixAttribute;

  end;

  [DNTypeName('System.Web.UI.TagPrefixAttribute')]
  DNTagPrefixAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1DE4349F-4039-3310-8EC9-F82AB9B8C8D0}']
  { getters & setters } 

    function get_NamespaceName: string;
    function get_TagPrefix: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NamespaceName: string read get_NamespaceName;
    property TagPrefix: string read get_TagPrefix;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTagPrefixAttribute = class(TDNGenericImport<DNTagPrefixAttributeClass, DNTagPrefixAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateContainerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{937CA60B-6D0A-55D1-99E7-CF8647B627FA}']
  { constructors } 

    {class} function init(containerType: DDN.mscorlib.DNType): DNTemplateContainerAttribute; overload;
    {class} function init(containerType: DDN.mscorlib.DNType; bindingDirection: DDN.System.DNBindingDirection): DNTemplateContainerAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.TemplateContainerAttribute')]
  DNTemplateContainerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{316558EA-EF16-361E-BE85-8886E7AD991D}']
  { getters & setters } 

    function get_BindingDirection: DDN.System.DNBindingDirection;
    function get_ContainerType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingDirection: DDN.System.DNBindingDirection read get_BindingDirection;
    property ContainerType: DDN.mscorlib.DNType read get_ContainerType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTemplateContainerAttribute = class(TDNGenericImport<DNTemplateContainerAttributeClass, DNTemplateContainerAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateInstanceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8DCA87D4-025D-5AD8-8F54-0B39689B6824}']
  { constructors } 

    {class} function init(instances: DNTemplateInstance): DNTemplateInstanceAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Multiple: DNTemplateInstanceAttribute;
   function __fakeFieldGet_Single: DNTemplateInstanceAttribute;
   function __fakeFieldGet_Default: DNTemplateInstanceAttribute;

  { static fields } 

    {class} property Multiple: DNTemplateInstanceAttribute read __fakeFieldGet_Multiple;
    {class} property Single: DNTemplateInstanceAttribute read __fakeFieldGet_Single;
    {class} property &Default: DNTemplateInstanceAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.TemplateInstanceAttribute')]
  DNTemplateInstanceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{EF243D53-08BF-32D3-850B-182B129ED907}']
  { getters & setters } 

    function get_Instances: DNTemplateInstance;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Instances: DNTemplateInstance read get_Instances;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNTemplateInstanceAttribute = class(TDNGenericImport<DNTemplateInstanceAttributeClass, DNTemplateInstanceAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNThemeableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9BEE757D-BC62-50C3-B600-9AC7B22A65A9}']
  { constructors } 

    {class} function init(themeable: Boolean): DNThemeableAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNThemeableAttribute;
   function __fakeFieldGet_No: DNThemeableAttribute;
   function __fakeFieldGet_Default: DNThemeableAttribute;

  { static fields } 

    {class} property Yes: DNThemeableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNThemeableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNThemeableAttribute read __fakeFieldGet_Default;

  { static methods } 

    {class} function IsObjectThemeable(instance: DDN.mscorlib.DNObject): Boolean;
    {class} function IsTypeThemeable(&type: DDN.mscorlib.DNType): Boolean;

  end;

  [DNTypeName('System.Web.UI.ThemeableAttribute')]
  DNThemeableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{989F5155-4960-30E8-BCB0-AF5FF805C4E1}']
  { getters & setters } 

    function get_Themeable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Themeable: Boolean read get_Themeable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNThemeableAttribute = class(TDNGenericImport<DNThemeableAttributeClass, DNThemeableAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNToolboxDataAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9B38C1FA-8D3F-5541-A413-13E0FAAC6FAC}']
  { constructors } 

    {class} function init(data: string): DNToolboxDataAttribute;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNToolboxDataAttribute;

  { static fields } 

    {class} property &Default: DNToolboxDataAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.ToolboxDataAttribute')]
  DNToolboxDataAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{862E4B0F-7A7C-3CD7-BDAC-97DEC4C36222}']
  { getters & setters } 

    function get_Data: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Data: string read get_Data;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNToolboxDataAttribute = class(TDNGenericImport<DNToolboxDataAttributeClass, DNToolboxDataAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNUrlPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{81804B76-2CE4-5748-BE90-9C8B75FAE0F1}']
  { constructors } 

    {class} function init: DNUrlPropertyAttribute; overload;
    {class} function init(filter: string): DNUrlPropertyAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.UrlPropertyAttribute')]
  DNUrlPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1B9731A1-7BD7-3D3E-B170-50AC75AC4B28}']
  { getters & setters } 

    function get_Filter: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Filter: string read get_Filter;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNUrlPropertyAttribute = class(TDNGenericImport<DNUrlPropertyAttributeClass, DNUrlPropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNValidationPropertyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{ECB2C246-79C9-5F33-9D2E-5A465BFEB79B}']
  { constructors } 

    {class} function init(name: string): DNValidationPropertyAttribute;

  end;

  [DNTypeName('System.Web.UI.ValidationPropertyAttribute')]
  DNValidationPropertyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4B9D5AF1-39F5-3677-B14A-E02FA910AF81}']
  { getters & setters } 

    function get_Name: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNValidationPropertyAttribute = class(TDNGenericImport<DNValidationPropertyAttributeClass, DNValidationPropertyAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNVerificationAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CB257E87-CB53-5660-BC3B-817AAE6E97B0}']
  { constructors } 

    {class} function init(guideline: string; checkpoint: string; reportLevel: DNVerificationReportLevel; priority: Int32; message: string): DNVerificationAttribute; overload;
    {class} function init(guideline: string; checkpoint: string; reportLevel: DNVerificationReportLevel; priority: Int32; message: string; rule: DNVerificationRule; conditionalProperty: string): DNVerificationAttribute; overload;
    {class} function init(guideline: string; checkpoint: string; reportLevel: DNVerificationReportLevel; priority: Int32; message: string; rule: DNVerificationRule; conditionalProperty: string; conditionalOperator: DNVerificationConditionalOperator; conditionalValue: string; guidelineUrl: string): DNVerificationAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.VerificationAttribute')]
  DNVerificationAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5C68145B-881D-397C-84A2-6CEC396B3206}']
  { getters & setters } 

    function get_Guideline: string;
    function get_Checkpoint: string;
    function get_VerificationReportLevel: DNVerificationReportLevel;
    function get_Priority: Int32;
    function get_Message: string;
    function get_VerificationRule: DNVerificationRule;
    function get_ConditionalProperty: string;
    function get_VerificationConditionalOperator: DNVerificationConditionalOperator;
    function get_ConditionalValue: string;
    function get_GuidelineUrl: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Guideline: string read get_Guideline;
    property Checkpoint: string read get_Checkpoint;
    property VerificationReportLevel: DNVerificationReportLevel read get_VerificationReportLevel;
    property Priority: Int32 read get_Priority;
    property Message: string read get_Message;
    property VerificationRule: DNVerificationRule read get_VerificationRule;
    property ConditionalProperty: string read get_ConditionalProperty;
    property VerificationConditionalOperator: DNVerificationConditionalOperator read get_VerificationConditionalOperator;
    property ConditionalValue: string read get_ConditionalValue;
    property GuidelineUrl: string read get_GuidelineUrl;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNVerificationAttribute = class(TDNGenericImport<DNVerificationAttributeClass, DNVerificationAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNViewStateModeByIdAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{E7A8B739-6401-52F3-A031-403F012B2006}']
  { constructors } 

    {class} function init: DNViewStateModeByIdAttribute;

  end;

  [DNTypeName('System.Web.UI.ViewStateModeByIdAttribute')]
  DNViewStateModeByIdAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E85B19BF-8725-3379-8744-89E8A86886E0}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNViewStateModeByIdAttribute = class(TDNGenericImport<DNViewStateModeByIdAttributeClass, DNViewStateModeByIdAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConnectionConsumerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4CF669A5-D4D9-51BC-B12C-857374380537}']
  { constructors } 

    {class} function init(displayName: string): DNConnectionConsumerAttribute; overload;
    {class} function init(displayName: string; id: string): DNConnectionConsumerAttribute; overload;
    {class} function init(displayName: string; connectionPointType: DDN.mscorlib.DNType): DNConnectionConsumerAttribute; overload;
    {class} function init(displayName: string; id: string; connectionPointType: DDN.mscorlib.DNType): DNConnectionConsumerAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute')]
  DNConnectionConsumerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5C203993-34AD-3931-A656-692A69220BB7}']
  { getters & setters } 

    function get_AllowsMultipleConnections: Boolean;
    procedure set_AllowsMultipleConnections(value: Boolean);
    function get_ID: string;
    function get_DisplayName: string;
    function get_ConnectionPointType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowsMultipleConnections: Boolean read get_AllowsMultipleConnections write set_AllowsMultipleConnections;
    property ID: string read get_ID;
    property DisplayName: string read get_DisplayName;
    property ConnectionPointType: DDN.mscorlib.DNType read get_ConnectionPointType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConnectionConsumerAttribute = class(TDNGenericImport<DNConnectionConsumerAttributeClass, DNConnectionConsumerAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConnectionProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{CE0823D8-CA8B-51FF-86A1-9222FC27A046}']
  { constructors } 

    {class} function init(displayName: string): DNConnectionProviderAttribute; overload;
    {class} function init(displayName: string; id: string): DNConnectionProviderAttribute; overload;
    {class} function init(displayName: string; connectionPointType: DDN.mscorlib.DNType): DNConnectionProviderAttribute; overload;
    {class} function init(displayName: string; id: string; connectionPointType: DDN.mscorlib.DNType): DNConnectionProviderAttribute; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute')]
  DNConnectionProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{86628AE9-F756-331C-B9E7-CFC81578E683}']
  { getters & setters } 

    function get_AllowsMultipleConnections: Boolean;
    procedure set_AllowsMultipleConnections(value: Boolean);
    function get_ID: string;
    function get_DisplayName: string;
    function get_ConnectionPointType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowsMultipleConnections: Boolean read get_AllowsMultipleConnections write set_AllowsMultipleConnections;
    property ID: string read get_ID;
    property DisplayName: string read get_DisplayName;
    property ConnectionPointType: DDN.mscorlib.DNType read get_ConnectionPointType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNConnectionProviderAttribute = class(TDNGenericImport<DNConnectionProviderAttributeClass, DNConnectionProviderAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{5D734E32-4583-5AA7-A993-D4642F5F5FB1}']
  { constructors } 

    {class} function init: DNPersonalizableAttribute; overload;
    {class} function init(isPersonalizable: Boolean): DNPersonalizableAttribute; overload;
    {class} function init(scope: DNPersonalizationScope): DNPersonalizableAttribute; overload;
    {class} function init(scope: DNPersonalizationScope; isSensitive: Boolean): DNPersonalizableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_NotPersonalizable: DNPersonalizableAttribute;
   function __fakeFieldGet_Personalizable: DNPersonalizableAttribute;
   function __fakeFieldGet_UserPersonalizable: DNPersonalizableAttribute;
   function __fakeFieldGet_SharedPersonalizable: DNPersonalizableAttribute;
   function __fakeFieldGet_Default: DNPersonalizableAttribute;

  { static fields } 

    {class} property NotPersonalizable: DNPersonalizableAttribute read __fakeFieldGet_NotPersonalizable;
    {class} property Personalizable: DNPersonalizableAttribute read __fakeFieldGet_Personalizable;
    {class} property UserPersonalizable: DNPersonalizableAttribute read __fakeFieldGet_UserPersonalizable;
    {class} property SharedPersonalizable: DNPersonalizableAttribute read __fakeFieldGet_SharedPersonalizable;
    {class} property &Default: DNPersonalizableAttribute read __fakeFieldGet_Default;

  { static methods } 

    {class} function GetPersonalizableProperties(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNICollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizableAttribute')]
  DNPersonalizableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{73C1981A-43BC-31B5-8ADE-6296818C4339}']
  { getters & setters } 

    function get_IsPersonalizable: Boolean;
    function get_IsSensitive: Boolean;
    function get_Scope: DNPersonalizationScope;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsPersonalizable: Boolean read get_IsPersonalizable;
    property IsSensitive: Boolean read get_IsSensitive;
    property Scope: DNPersonalizationScope read get_Scope;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNPersonalizableAttribute = class(TDNGenericImport<DNPersonalizableAttributeClass, DNPersonalizableAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebBrowsableAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1F2C41CB-2922-5508-9C56-CA8452370C6A}']
  { constructors } 

    {class} function init: DNWebBrowsableAttribute; overload;
    {class} function init(browsable: Boolean): DNWebBrowsableAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Yes: DNWebBrowsableAttribute;
   function __fakeFieldGet_No: DNWebBrowsableAttribute;
   function __fakeFieldGet_Default: DNWebBrowsableAttribute;

  { static fields } 

    {class} property Yes: DNWebBrowsableAttribute read __fakeFieldGet_Yes;
    {class} property No: DNWebBrowsableAttribute read __fakeFieldGet_No;
    {class} property &Default: DNWebBrowsableAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebBrowsableAttribute')]
  DNWebBrowsableAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{39F9250B-67C3-3932-9936-E9A351809E1B}']
  { getters & setters } 

    function get_Browsable: Boolean;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Browsable: Boolean read get_Browsable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebBrowsableAttribute = class(TDNGenericImport<DNWebBrowsableAttributeClass, DNWebBrowsableAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebDescriptionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{64C489B2-CF5C-5109-AF30-789BFB5898C3}']
  { constructors } 

    {class} function init: DNWebDescriptionAttribute; overload;
    {class} function init(description: string): DNWebDescriptionAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNWebDescriptionAttribute;

  { static fields } 

    {class} property &Default: DNWebDescriptionAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebDescriptionAttribute')]
  DNWebDescriptionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{87053DDA-2F57-3F46-B083-AC3222A58922}']
  { getters & setters } 

    function get_Description: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Description: string read get_Description;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebDescriptionAttribute = class(TDNGenericImport<DNWebDescriptionAttributeClass, DNWebDescriptionAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebDisplayNameAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{83CB3843-D96D-5DE0-A1CA-12C2737D2236}']
  { constructors } 

    {class} function init: DNWebDisplayNameAttribute; overload;
    {class} function init(displayName: string): DNWebDisplayNameAttribute; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Default: DNWebDisplayNameAttribute;

  { static fields } 

    {class} property &Default: DNWebDisplayNameAttribute read __fakeFieldGet_Default;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebDisplayNameAttribute')]
  DNWebDisplayNameAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DF71521C-7E87-302E-AA30-3E88CA930930}']
  { getters & setters } 

    function get_DisplayName: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsDefaultAttribute: Boolean;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayName: string read get_DisplayName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebDisplayNameAttribute = class(TDNGenericImport<DNWebDisplayNameAttributeClass, DNWebDisplayNameAttribute>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartTransformerAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C949F3AB-029C-5253-939B-4BC99A126423}']
  { constructors } 

    {class} function init(consumerType: DDN.mscorlib.DNType; providerType: DDN.mscorlib.DNType): DNWebPartTransformerAttribute;

  { static methods } 

    {class} function GetConsumerType(transformerType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;
    {class} function GetProviderType(transformerType: DDN.mscorlib.DNType): DDN.mscorlib.DNType;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartTransformerAttribute')]
  DNWebPartTransformerAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{D3299634-A984-3CA6-8B10-6A58F50DE015}']
  { getters & setters } 

    function get_ConsumerType: DDN.mscorlib.DNType;
    function get_ProviderType: DDN.mscorlib.DNType;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConsumerType: DDN.mscorlib.DNType read get_ConsumerType;
    property ProviderType: DDN.mscorlib.DNType read get_ProviderType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebPartTransformerAttribute = class(TDNGenericImport<DNWebPartTransformerAttributeClass, DNWebPartTransformerAttribute>) end;

  //-------------namespace: System.Web.UI----------------
  DNWebResourceAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{2B069D41-5005-5ACA-8112-13EB7A23A416}']
  { constructors } 

    {class} function init(webResource: string; contentType: string): DNWebResourceAttribute;

  end;

  [DNTypeName('System.Web.UI.WebResourceAttribute')]
  DNWebResourceAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{17E4D7AD-FF8B-3CFD-AF8C-1F8667DEDF84}']
  { getters & setters } 

    function get_CdnPath: string;
    procedure set_CdnPath(value: string);
    function get_LoadSuccessExpression: string;
    procedure set_LoadSuccessExpression(value: string);
    function get_CdnSupportsSecureConnection: Boolean;
    procedure set_CdnSupportsSecureConnection(value: Boolean);
    function get_ContentType: string;
    function get_PerformSubstitution: Boolean;
    procedure set_PerformSubstitution(value: Boolean);
    function get_WebResource: string;
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CdnPath: string read get_CdnPath write set_CdnPath;
    property LoadSuccessExpression: string read get_LoadSuccessExpression write set_LoadSuccessExpression;
    property CdnSupportsSecureConnection: Boolean read get_CdnSupportsSecureConnection write set_CdnSupportsSecureConnection;
    property ContentType: string read get_ContentType;
    property PerformSubstitution: Boolean read get_PerformSubstitution write set_PerformSubstitution;
    property WebResource: string read get_WebResource;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNWebResourceAttribute = class(TDNGenericImport<DNWebResourceAttributeClass, DNWebResourceAttribute>) end;

  //-------------namespace: System.Web----------------
  DNParserErrorCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{95E7F17E-0C53-5BFA-BF77-6C0BDABDAA22}']
  { constructors } 

    {class} function init: DNParserErrorCollection; overload;
    {class} function init(value: TArray<DNParserError>): DNParserErrorCollection; overload;

  end;

  [DNTypeName('System.Web.ParserErrorCollection')]
  DNParserErrorCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{BBC58F4D-DDC3-3CE2-84A1-B77C89F8EB7C}']
  { getters & setters } 

    function get_Item(index: Int32): DNParserError;
    procedure set_Item(index: Int32; value: DNParserError);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNParserError): Int32;
    procedure AddRange(value: TArray<DNParserError>); overload;
    procedure AddRange(value: DNParserErrorCollection); overload;
    function &Contains(value: DNParserError): Boolean;
    procedure CopyTo(&array: TArray<DNParserError>; index: Int32);
    function IndexOf(value: DNParserError): Int32;
    procedure Insert(index: Int32; value: DNParserError);
    procedure Remove(value: DNParserError);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNParserError read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNParserErrorCollection = class(TDNGenericImport<DNParserErrorCollectionClass, DNParserErrorCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNEmbeddedMailObjectsCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{91242D7A-36C2-5B25-BF9E-EC7B76DC5741}']
  { constructors } 

    {class} function init: DNEmbeddedMailObjectsCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.EmbeddedMailObjectsCollection')]
  DNEmbeddedMailObjectsCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{192F1B29-09CB-35BB-B44F-793A17529E5C}']
  { getters & setters } 

    function get_Item(index: Int32): DNEmbeddedMailObject;
    procedure set_Item(index: Int32; value: DNEmbeddedMailObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNEmbeddedMailObject): Int32;
    function &Contains(value: DNEmbeddedMailObject): Boolean;
    procedure CopyTo(&array: TArray<DNEmbeddedMailObject>; index: Int32);
    function IndexOf(value: DNEmbeddedMailObject): Int32;
    procedure Insert(index: Int32; value: DNEmbeddedMailObject);
    procedure Remove(value: DNEmbeddedMailObject);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNEmbeddedMailObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNEmbeddedMailObjectsCollection = class(TDNGenericImport<DNEmbeddedMailObjectsCollectionClass, DNEmbeddedMailObjectsCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRoleGroupCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{3BF08AE0-5D23-5F1A-9593-AD16B05E5CC0}']
  { constructors } 

    {class} function init: DNRoleGroupCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.RoleGroupCollection')]
  DNRoleGroupCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{10E89C7F-6006-3D0A-95C1-CF1AD89184B0}']
  { getters & setters } 

    function get_Item(index: Int32): DNRoleGroup;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    procedure Add(group: DNRoleGroup);
    procedure CopyTo(&array: TArray<DNRoleGroup>; index: Int32);
    function &Contains(group: DNRoleGroup): Boolean;
    function GetMatchingRoleGroup(user: DDN.mscorlib.DNIPrincipal): DNRoleGroup;
    function IndexOf(group: DNRoleGroup): Int32;
    procedure Insert(index: Int32; group: DNRoleGroup);
    procedure Remove(group: DNRoleGroup);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRoleGroup read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNRoleGroupCollection = class(TDNGenericImport<DNRoleGroupCollectionClass, DNRoleGroupCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNProxyWebPartConnectionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{7F3C4673-051F-502A-9DB7-D0DDA96287D0}']
  { constructors } 

    {class} function init: DNProxyWebPartConnectionCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ProxyWebPartConnectionCollection')]
  DNProxyWebPartConnectionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{130C8015-1249-3DE9-A340-CF26424A9E25}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNWebPartConnection; overload;
    procedure set_Item(index: Int32; value: DNWebPartConnection);
    function get_Item(id: string): DNWebPartConnection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNWebPartConnection): Int32;
    function &Contains(value: DNWebPartConnection): Boolean;
    procedure CopyTo(&array: TArray<DNWebPartConnection>; index: Int32);
    function IndexOf(value: DNWebPartConnection): Int32;
    procedure Insert(index: Int32; value: DNWebPartConnection);
    procedure Remove(value: DNWebPartConnection);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNWebPartConnection read get_Item write set_Item; default;
    property Item[id: string]: DNWebPartConnection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNProxyWebPartConnectionCollection = class(TDNGenericImport<DNProxyWebPartConnectionCollectionClass, DNProxyWebPartConnectionCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartConnectionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{AE0B6BE9-B72C-5962-9516-75689E7DE332}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnectionCollection')]
  DNWebPartConnectionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{9B783EB0-12F4-3215-8191-2ACD28424424}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNWebPartConnection; overload;
    procedure set_Item(index: Int32; value: DNWebPartConnection);
    function get_Item(id: string): DNWebPartConnection; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNWebPartConnection): Int32;
    function &Contains(value: DNWebPartConnection): Boolean;
    procedure CopyTo(&array: TArray<DNWebPartConnection>; index: Int32);
    function IndexOf(value: DNWebPartConnection): Int32;
    procedure Insert(index: Int32; value: DNWebPartConnection);
    procedure Remove(value: DNWebPartConnection);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNWebPartConnection read get_Item write set_Item; default;
    property Item[id: string]: DNWebPartConnection read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartConnectionCollection = class(TDNGenericImport<DNWebPartConnectionCollectionClass, DNWebPartConnectionCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDisplayModeCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{5498F4DE-848B-5D70-8886-986FB72DDF58}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayModeCollection')]
  DNWebPartDisplayModeCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{5FE673A6-1DEF-34D8-91DD-ED09C77FEE93}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNWebPartDisplayMode; overload;
    function get_Item(modeName: string): DNWebPartDisplayMode; overload;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(value: DNWebPartDisplayMode): Int32;
    function &Contains(value: DNWebPartDisplayMode): Boolean;
    procedure CopyTo(&array: TArray<DNWebPartDisplayMode>; index: Int32);
    function IndexOf(value: DNWebPartDisplayMode): Int32;
    procedure Insert(index: Int32; value: DNWebPartDisplayMode);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNWebPartDisplayMode read get_Item; default;
    property Item[modeName: string]: DNWebPartDisplayMode read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartDisplayModeCollection = class(TDNGenericImport<DNWebPartDisplayModeCollectionClass, DNWebPartDisplayModeCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartTransformerCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D290CE9B-404A-5CA6-997E-F69DAA7C2303}']
  { constructors } 

    {class} function init: DNWebPartTransformerCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartTransformerCollection')]
  DNWebPartTransformerCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{8A6535FE-31D3-3996-880B-88F43CA21D28}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNWebPartTransformer;
    procedure set_Item(index: Int32; value: DNWebPartTransformer);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    function Add(transformer: DNWebPartTransformer): Int32;
    function &Contains(transformer: DNWebPartTransformer): Boolean;
    procedure CopyTo(&array: TArray<DNWebPartTransformer>; index: Int32);
    function IndexOf(transformer: DNWebPartTransformer): Int32;
    procedure Insert(index: Int32; transformer: DNWebPartTransformer);
    procedure Remove(transformer: DNWebPartTransformer);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNWebPartTransformer read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartTransformerCollection = class(TDNGenericImport<DNWebPartTransformerCollectionClass, DNWebPartTransformerCollection>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNValueProviderCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNIValueProvider>)
  ['{04FA7B52-F956-570A-9097-0CB42681F99E}']
  { constructors } 

    {class} function init: DNValueProviderCollection; overload;
    {class} function init(list: DDN.mscorlib.DNIList<DNIValueProvider>): DNValueProviderCollection; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ValueProviderCollection')]
  DNValueProviderCollection = interface(DDN.mscorlib.DNCollection<DNIValueProvider>)
  ['{A5DFE23B-27C3-323A-A70E-746E88C2966F}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetValue(key: string): DNValueProviderResult; overload;
    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult; overload;
    procedure CopyTo(&array: TArray<DNIValueProvider>; index: Int32);
    function &Contains(item: DNIValueProvider): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNIValueProvider>;
    function IndexOf(item: DNIValueProvider): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNIValueProvider);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNValueProviderCollection = class(TDNGenericImport<DNValueProviderCollectionClass, DNValueProviderCollection>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderProviderCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNModelBinderProvider>)
  ['{43322EE6-97DA-52AE-B1D7-368921A9A24F}']
  { constructors } 

    {class} function init: DNModelBinderProviderCollection; overload;
    {class} function init(list: DDN.mscorlib.DNIList<DNModelBinderProvider>): DNModelBinderProviderCollection; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderProviderCollection')]
  DNModelBinderProviderCollection = interface(DDN.mscorlib.DNCollection<DNModelBinderProvider>)
  ['{2603383F-450E-36FF-BB00-4B379E627413}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure RegisterBinderForGenericType(modelType: DDN.mscorlib.DNType; modelBinder: DNIModelBinder); overload;
    procedure RegisterBinderForGenericType(modelType: DDN.mscorlib.DNType; modelBinderFactory: DDN.mscorlib.DNFunc<TArray<DDN.mscorlib.DNType>, DNIModelBinder>); overload;
    procedure RegisterBinderForGenericType(modelType: DDN.mscorlib.DNType; modelBinderType: DDN.mscorlib.DNType); overload;
    procedure RegisterBinderForType(modelType: DDN.mscorlib.DNType; modelBinder: DNIModelBinder); overload;
    procedure RegisterBinderForType(modelType: DDN.mscorlib.DNType; modelBinderFactory: DDN.mscorlib.DNFunc<DNIModelBinder>); overload;
    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    procedure CopyTo(&array: TArray<DNModelBinderProvider>; index: Int32);
    function &Contains(item: DNModelBinderProvider): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNModelBinderProvider>;
    function IndexOf(item: DNModelBinderProvider): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNModelBinderProvider);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNModelBinderProviderCollection = class(TDNGenericImport<DNModelBinderProviderCollectionClass, DNModelBinderProviderCollection>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelErrorCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNModelError>)
  ['{1931941A-77B3-59B0-A4CC-22FAD8086DDA}']
  { constructors } 

    {class} function init: DNModelErrorCollection;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelErrorCollection')]
  DNModelErrorCollection = interface(DDN.mscorlib.DNCollection<DNModelError>)
  ['{BAB9FF40-9909-3819-9935-56EB38611D75}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Add(exception: DDN.mscorlib.DNException); overload;
    procedure Add(errorMessage: string); overload;
    procedure CopyTo(&array: TArray<DNModelError>; index: Int32);
    function &Contains(item: DNModelError): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNModelError>;
    function IndexOf(item: DNModelError): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNModelError);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNModelErrorCollection = class(TDNGenericImport<DNModelErrorCollectionClass, DNModelErrorCollection>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatorProviderCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNModelValidatorProvider>)
  ['{237080BA-1C9B-5152-AD5E-2CA92232C0A7}']
  { constructors } 

    {class} function init: DNModelValidatorProviderCollection; overload;
    {class} function init(list: DDN.mscorlib.DNIList<DNModelValidatorProvider>): DNModelValidatorProviderCollection; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidatorProviderCollection')]
  DNModelValidatorProviderCollection = interface(DDN.mscorlib.DNCollection<DNModelValidatorProvider>)
  ['{983E14E1-45A2-328F-BBB6-32892DD3A052}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    function GetValidators(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    procedure CopyTo(&array: TArray<DNModelValidatorProvider>; index: Int32);
    function &Contains(item: DNModelValidatorProvider): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNModelValidatorProvider>;
    function IndexOf(item: DNModelValidatorProvider): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNModelValidatorProvider);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNModelValidatorProviderCollection = class(TDNGenericImport<DNModelValidatorProviderCollectionClass, DNModelValidatorProviderCollection>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteCollectionClass = interface(DDN.mscorlib.DNCollectionClass<DNRouteBase>)
  ['{0BF1AFBF-77AD-55F5-8888-CC91C873AFFF}']
  { constructors } 

    {class} function init: DNRouteCollection; overload;
    {class} function init(virtualPathProvider: DNVirtualPathProvider): DNRouteCollection; overload;

  end;

  [DNTypeName('System.Web.Routing.RouteCollection')]
  DNRouteCollection = interface(DDN.mscorlib.DNCollection<DNRouteBase>)
  ['{6E56D400-99C0-321E-A989-BBD35F5BD117}']
  { getters & setters } 

    function get_AppendTrailingSlash: Boolean;
    procedure set_AppendTrailingSlash(value: Boolean);
    function get_LowercaseUrls: Boolean;
    procedure set_LowercaseUrls(value: Boolean);
    function get_RouteExistingFiles: Boolean;
    procedure set_RouteExistingFiles(value: Boolean);
    function get_Item(name: string): DNRouteBase;
    function get_Count: Int32;

  { methods } 

    function MapPageRoute(routeName: string; routeUrl: string; physicalFile: string): DNRoute; overload;
    function MapPageRoute(routeName: string; routeUrl: string; physicalFile: string; checkPhysicalUrlAccess: Boolean): DNRoute; overload;
    function MapPageRoute(routeName: string; routeUrl: string; physicalFile: string; checkPhysicalUrlAccess: Boolean; defaults: DNRouteValueDictionary): DNRoute; overload;
    function MapPageRoute(routeName: string; routeUrl: string; physicalFile: string; checkPhysicalUrlAccess: Boolean; defaults: DNRouteValueDictionary; constraints: DNRouteValueDictionary): DNRoute; overload;
    function MapPageRoute(routeName: string; routeUrl: string; physicalFile: string; checkPhysicalUrlAccess: Boolean; defaults: DNRouteValueDictionary; constraints: DNRouteValueDictionary; dataTokens: DNRouteValueDictionary): DNRoute; overload;
    function GetReadLock: DDN.mscorlib.DNIDisposable;
    function GetRouteData(httpContext: DNHttpContextBase): DNRouteData;
    function GetVirtualPath(requestContext: DNRequestContext; values: DNRouteValueDictionary): DNVirtualPathData; overload;
    function GetWriteLock: DDN.mscorlib.DNIDisposable;
    procedure Ignore(url: string); overload;
    procedure Add(name: string; item: DNRouteBase);
    function GetVirtualPath(requestContext: DNRequestContext; name: string; values: DNRouteValueDictionary): DNVirtualPathData; overload;
    procedure Ignore(url: string; constraints: DDN.mscorlib.DNObject); overload;
    procedure CopyTo(&array: TArray<DNRouteBase>; index: Int32);
    function &Contains(item: DNRouteBase): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DNRouteBase>;
    function IndexOf(item: DNRouteBase): Int32;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; item: DNRouteBase);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppendTrailingSlash: Boolean read get_AppendTrailingSlash write set_AppendTrailingSlash;
    property LowercaseUrls: Boolean read get_LowercaseUrls write set_LowercaseUrls;
    property RouteExistingFiles: Boolean read get_RouteExistingFiles write set_RouteExistingFiles;
    property Item[name: string]: DNRouteBase read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNRouteCollection = class(TDNGenericImport<DNRouteCollectionClass, DNRouteCollection>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebBaseEventCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{B9B5ABA8-8A24-50C3-8567-36A9BB1B47D9}']
  { constructors } 

    {class} function init(events: DDN.mscorlib.DNICollection): DNWebBaseEventCollection;

  end;

  [DNTypeName('System.Web.Management.WebBaseEventCollection')]
  DNWebBaseEventCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{01F3CC6D-0529-3649-A9E0-041B9D268584}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebBaseEvent;
    function get_Count: Int32;

  { methods } 

    function IndexOf(value: DNWebBaseEvent): Int32;
    function &Contains(value: DNWebBaseEvent): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebBaseEvent read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNWebBaseEventCollection = class(TDNGenericImport<DNWebBaseEventCollectionClass, DNWebBaseEventCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNCatalogPartCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{AD59214D-C26B-5192-8E83-00066363912C}']
  { constructors } 

    {class} function init: DNCatalogPartCollection; overload;
    {class} function init(catalogParts: DDN.mscorlib.DNICollection): DNCatalogPartCollection; overload;
    {class} function init(existingCatalogParts: DNCatalogPartCollection; catalogParts: DDN.mscorlib.DNICollection): DNCatalogPartCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNCatalogPartCollection;

  { static fields } 

    {class} property Empty: DNCatalogPartCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.CatalogPartCollection')]
  DNCatalogPartCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{0C92673D-0654-331B-A7F7-6117697B4E4C}']
  { getters & setters } 

    function get_Item(index: Int32): DNCatalogPart; overload;
    function get_Item(id: string): DNCatalogPart; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(catalogPart: DNCatalogPart): Boolean;
    procedure CopyTo(&array: TArray<DNCatalogPart>; index: Int32);
    function IndexOf(catalogPart: DNCatalogPart): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCatalogPart read get_Item; default;
    property Item[id: string]: DNCatalogPart read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNCatalogPartCollection = class(TDNGenericImport<DNCatalogPartCollectionClass, DNCatalogPartCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConnectionInterfaceCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{EC1395A7-04FC-58F9-8403-98BABDC719D9}']
  { constructors } 

    {class} function init: DNConnectionInterfaceCollection; overload;
    {class} function init(connectionInterfaces: DDN.mscorlib.DNICollection): DNConnectionInterfaceCollection; overload;
    {class} function init(existingConnectionInterfaces: DNConnectionInterfaceCollection; connectionInterfaces: DDN.mscorlib.DNICollection): DNConnectionInterfaceCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNConnectionInterfaceCollection;

  { static fields } 

    {class} property Empty: DNConnectionInterfaceCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection')]
  DNConnectionInterfaceCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{862D6845-F805-39B2-B608-1AA00593A7F3}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNType;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DDN.mscorlib.DNType): Boolean;
    function IndexOf(value: DDN.mscorlib.DNType): Int32;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNType>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNType read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNConnectionInterfaceCollection = class(TDNGenericImport<DNConnectionInterfaceCollectionClass, DNConnectionInterfaceCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConsumerConnectionPointCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{1799F4C1-CD4F-506E-BD35-A053E109AC67}']
  { constructors } 

    {class} function init: DNConsumerConnectionPointCollection; overload;
    {class} function init(connectionPoints: DDN.mscorlib.DNICollection): DNConsumerConnectionPointCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConsumerConnectionPointCollection')]
  DNConsumerConnectionPointCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{B52D75C9-F46D-3640-8EAE-C3C397D16AA0}']
  { getters & setters } 

    function get_Default: DNConsumerConnectionPoint;
    function get_Item(index: Int32): DNConsumerConnectionPoint; overload;
    function get_Item(id: string): DNConsumerConnectionPoint; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(connectionPoint: DNConsumerConnectionPoint): Boolean;
    function IndexOf(connectionPoint: DNConsumerConnectionPoint): Int32;
    procedure CopyTo(&array: TArray<DNConsumerConnectionPoint>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Default: DNConsumerConnectionPoint read get_Default;
    property Item[index: Int32]: DNConsumerConnectionPoint read get_Item; default;
    property Item[id: string]: DNConsumerConnectionPoint read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNConsumerConnectionPointCollection = class(TDNGenericImport<DNConsumerConnectionPointCollectionClass, DNConsumerConnectionPointCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNEditorPartCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{AA18CF35-5DAD-570C-8222-B4F65EF82262}']
  { constructors } 

    {class} function init: DNEditorPartCollection; overload;
    {class} function init(editorParts: DDN.mscorlib.DNICollection): DNEditorPartCollection; overload;
    {class} function init(existingEditorParts: DNEditorPartCollection; editorParts: DDN.mscorlib.DNICollection): DNEditorPartCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNEditorPartCollection;

  { static fields } 

    {class} property Empty: DNEditorPartCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.EditorPartCollection')]
  DNEditorPartCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{85A251AB-642E-3025-A2AB-6076D96F6A95}']
  { getters & setters } 

    function get_Item(index: Int32): DNEditorPart;
    function get_Count: Int32;

  { methods } 

    function &Contains(editorPart: DNEditorPart): Boolean;
    procedure CopyTo(&array: TArray<DNEditorPart>; index: Int32);
    function IndexOf(editorPart: DNEditorPart): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNEditorPart read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNEditorPartCollection = class(TDNGenericImport<DNEditorPartCollectionClass, DNEditorPartCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNProviderConnectionPointCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{E6C99C86-E2E9-5D7F-A1CE-BCD0B0885295}']
  { constructors } 

    {class} function init: DNProviderConnectionPointCollection; overload;
    {class} function init(connectionPoints: DDN.mscorlib.DNICollection): DNProviderConnectionPointCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ProviderConnectionPointCollection')]
  DNProviderConnectionPointCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{EAEBE6A7-7962-3D88-B179-7EA416444339}']
  { getters & setters } 

    function get_Default: DNProviderConnectionPoint;
    function get_Item(index: Int32): DNProviderConnectionPoint; overload;
    function get_Item(id: string): DNProviderConnectionPoint; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(connectionPoint: DNProviderConnectionPoint): Boolean;
    function IndexOf(connectionPoint: DNProviderConnectionPoint): Int32;
    procedure CopyTo(&array: TArray<DNProviderConnectionPoint>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Default: DNProviderConnectionPoint read get_Default;
    property Item[index: Int32]: DNProviderConnectionPoint read get_Item; default;
    property Item[id: string]: DNProviderConnectionPoint read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNProviderConnectionPointCollection = class(TDNGenericImport<DNProviderConnectionPointCollectionClass, DNProviderConnectionPointCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNTransformerTypeCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{6BA3497C-C486-5C3D-BE76-239642CC1B68}']
  { constructors } 

    {class} function init: DNTransformerTypeCollection; overload;
    {class} function init(transformerTypes: DDN.mscorlib.DNICollection): DNTransformerTypeCollection; overload;
    {class} function init(existingTransformerTypes: DNTransformerTypeCollection; transformerTypes: DDN.mscorlib.DNICollection): DNTransformerTypeCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNTransformerTypeCollection;

  { static fields } 

    {class} property Empty: DNTransformerTypeCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.TransformerTypeCollection')]
  DNTransformerTypeCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{F5F51596-BE4B-3D74-A23F-0D0EBD84C82E}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNType;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DDN.mscorlib.DNType): Boolean;
    function IndexOf(value: DDN.mscorlib.DNType): Int32;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNType>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNType read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTransformerTypeCollection = class(TDNGenericImport<DNTransformerTypeCollectionClass, DNTransformerTypeCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{8E0A1C8A-3F74-5806-A7FA-5956B0C48245}']
  { constructors } 

    {class} function init: DNWebPartCollection; overload;
    {class} function init(webParts: DDN.mscorlib.DNICollection): DNWebPartCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartCollection')]
  DNWebPartCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{9468640F-5971-3471-B857-64BA9A8B320E}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebPart; overload;
    function get_Item(id: string): DNWebPart; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNWebPart): Boolean;
    function IndexOf(value: DNWebPart): Int32;
    procedure CopyTo(&array: TArray<DNWebPart>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebPart read get_Item; default;
    property Item[id: string]: DNWebPart read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartCollection = class(TDNGenericImport<DNWebPartCollectionClass, DNWebPartCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDescriptionCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{05C3C643-9C9F-55F7-AB35-1E045517F0ED}']
  { constructors } 

    {class} function init: DNWebPartDescriptionCollection; overload;
    {class} function init(webPartDescriptions: DDN.mscorlib.DNICollection): DNWebPartDescriptionCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDescriptionCollection')]
  DNWebPartDescriptionCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{37D23D99-5E01-30B9-9DDE-6C95E05608D2}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebPartDescription; overload;
    function get_Item(id: string): DNWebPartDescription; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNWebPartDescription): Boolean;
    function IndexOf(value: DNWebPartDescription): Int32;
    procedure CopyTo(&array: TArray<DNWebPartDescription>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebPartDescription read get_Item; default;
    property Item[id: string]: DNWebPartDescription read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartDescriptionCollection = class(TDNGenericImport<DNWebPartDescriptionCollectionClass, DNWebPartDescriptionCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartVerbCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{90F59ADE-D235-5DD5-97AB-BBD6E2E8789E}']
  { constructors } 

    {class} function init: DNWebPartVerbCollection; overload;
    {class} function init(verbs: DDN.mscorlib.DNICollection): DNWebPartVerbCollection; overload;
    {class} function init(existingVerbs: DNWebPartVerbCollection; verbs: DDN.mscorlib.DNICollection): DNWebPartVerbCollection; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNWebPartVerbCollection;

  { static fields } 

    {class} property Empty: DNWebPartVerbCollection read __fakeFieldGet_Empty;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartVerbCollection')]
  DNWebPartVerbCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{FBB51AF4-B090-380B-B835-0B283FF51936}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebPartVerb;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNWebPartVerb): Boolean;
    procedure CopyTo(&array: TArray<DNWebPartVerb>; index: Int32);
    function IndexOf(value: DNWebPartVerb): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebPartVerb read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartVerbCollection = class(TDNGenericImport<DNWebPartVerbCollectionClass, DNWebPartVerbCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartZoneCollectionClass = interface(DDN.mscorlib.DNReadOnlyCollectionBaseClass)
  ['{4A27CA32-FD5D-5693-8FD9-9BAF4515DC37}']
  { constructors } 

    {class} function init: DNWebPartZoneCollection; overload;
    {class} function init(webPartZones: DDN.mscorlib.DNICollection): DNWebPartZoneCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartZoneCollection')]
  DNWebPartZoneCollection = interface(DDN.mscorlib.DNReadOnlyCollectionBase)
  ['{D5A7D2F2-D563-3A76-B641-F2909136D1C8}']
  { getters & setters } 

    function get_Item(index: Int32): DNWebPartZoneBase; overload;
    function get_Item(id: string): DNWebPartZoneBase; overload;
    function get_Count: Int32;

  { methods } 

    function &Contains(value: DNWebPartZoneBase): Boolean;
    function IndexOf(value: DNWebPartZoneBase): Int32;
    procedure CopyTo(&array: TArray<DNWebPartZoneBase>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNWebPartZoneBase read get_Item; default;
    property Item[id: string]: DNWebPartZoneBase read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNWebPartZoneCollection = class(TDNGenericImport<DNWebPartZoneCollectionClass, DNWebPartZoneCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpClientCertificateClass = interface(DNObjectClass)
  ['{EAFD2E16-B3A1-5904-8FB5-3ACF27926079}']
  end;

  [DNTypeName('System.Web.HttpClientCertificate')]
  DNHttpClientCertificate = interface(DNObject)
  ['{59595923-566D-3129-8FE7-D2776C558E4D}']
  { getters & setters } 

    function get_Cookie: string;
    function get_Certificate: TArray<Byte>;
    function get_Flags: Int32;
    function get_KeySize: Int32;
    function get_SecretKeySize: Int32;
    function get_Issuer: string;
    function get_ServerIssuer: string;
    function get_Subject: string;
    function get_ServerSubject: string;
    function get_SerialNumber: string;
    function get_ValidFrom: DDN.mscorlib.DNDateTime;
    function get_ValidUntil: DDN.mscorlib.DNDateTime;
    function get_CertEncoding: Int32;
    function get_PublicKey: TArray<Byte>;
    function get_BinaryIssuer: TArray<Byte>;
    function get_IsPresent: Boolean;
    function get_IsValid: Boolean;
    function get_Item(name: string): string; overload;
    procedure set_Item(name: string; value: string);
    function get_Item(index: Int32): string; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    function Get(field: string): string; overload;
    procedure Add(c: DDN.System.DNNameValueCollection); overload;
    procedure Clear;
    function HasKeys: Boolean;
    procedure Add(name: string; value: string); overload;
    function GetValues(name: string): TArray<string>; overload;
    procedure &Set(name: string; value: string);
    procedure Remove(name: string);
    function Get(index: Int32): string; overload;
    function GetValues(index: Int32): TArray<string>; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cookie: string read get_Cookie;
    property Certificate: TArray<Byte> read get_Certificate;
    property Flags: Int32 read get_Flags;
    property KeySize: Int32 read get_KeySize;
    property SecretKeySize: Int32 read get_SecretKeySize;
    property Issuer: string read get_Issuer;
    property ServerIssuer: string read get_ServerIssuer;
    property Subject: string read get_Subject;
    property ServerSubject: string read get_ServerSubject;
    property SerialNumber: string read get_SerialNumber;
    property ValidFrom: DDN.mscorlib.DNDateTime read get_ValidFrom;
    property ValidUntil: DDN.mscorlib.DNDateTime read get_ValidUntil;
    property CertEncoding: Int32 read get_CertEncoding;
    property PublicKey: TArray<Byte> read get_PublicKey;
    property BinaryIssuer: TArray<Byte> read get_BinaryIssuer;
    property IsPresent: Boolean read get_IsPresent;
    property IsValid: Boolean read get_IsValid;
    property Item[name: string]: string read get_Item write set_Item; default;
    property Item[index: Int32]: string read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpClientCertificate = class(TDNGenericImport<DNHttpClientCertificateClass, DNHttpClientCertificate>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNVirtualDirectoryMappingCollectionClass = interface(DNObjectClass)
  ['{5881DF0C-9525-53FC-B69D-3876CBA3180C}']
  { constructors } 

    {class} function init: DNVirtualDirectoryMappingCollection;

  end;

  [DNTypeName('System.Web.Configuration.VirtualDirectoryMappingCollection')]
  DNVirtualDirectoryMappingCollection = interface(DNObject)
  ['{5134AF2E-358D-3D0E-9A3C-1B2845E3D819}']
  { getters & setters } 

    function get_AllKeys: DDN.mscorlib.DNICollection;
    function get_Item(virtualDirectory: string): DNVirtualDirectoryMapping; overload;
    function get_Item(index: Int32): DNVirtualDirectoryMapping; overload;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(virtualDirectory: string; mapping: DNVirtualDirectoryMapping);
    procedure Clear;
    procedure CopyTo(&array: TArray<DNVirtualDirectoryMapping>; index: Int32);
    function Get(index: Int32): DNVirtualDirectoryMapping; overload;
    function Get(virtualDirectory: string): DNVirtualDirectoryMapping; overload;
    function GetKey(index: Int32): string;
    procedure Remove(virtualDirectory: string);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: DDN.mscorlib.DNICollection read get_AllKeys;
    property Item[virtualDirectory: string]: DNVirtualDirectoryMapping read get_Item; default;
    property Item[index: Int32]: DNVirtualDirectoryMapping read get_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNVirtualDirectoryMappingCollection = class(TDNGenericImport<DNVirtualDirectoryMappingCollectionClass, DNVirtualDirectoryMappingCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpApplicationStateClass = interface(DNObjectClass)
  ['{1B7A82F0-BBE9-51D2-B852-23AD8BA96BA0}']
  end;

  [DNTypeName('System.Web.HttpApplicationState')]
  DNHttpApplicationState = interface(DNObject)
  ['{4A5E7943-1D2F-3BCA-8DA5-2895687EF929}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject);
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_AllKeys: TArray<string>;
    function get_Contents: DNHttpApplicationState;
    function get_StaticObjects: DNHttpStaticObjectsCollection;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure &Set(name: string; value: DDN.mscorlib.DNObject);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure RemoveAll;
    function Get(name: string): DDN.mscorlib.DNObject; overload;
    function Get(index: Int32): DDN.mscorlib.DNObject; overload;
    function GetKey(index: Int32): string;
    procedure Lock;
    procedure UnLock;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Contents: DNHttpApplicationState read get_Contents;
    property StaticObjects: DNHttpStaticObjectsCollection read get_StaticObjects;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpApplicationState = class(TDNGenericImport<DNHttpApplicationStateClass, DNHttpApplicationState>) end;

  //-------------namespace: System.Web----------------
  DNHttpApplicationStateBaseClass = interface(DNObjectClass)
  ['{7BCF0471-AC88-54F2-B787-67B6C45DB001}']
  end;

  [DNTypeName('System.Web.HttpApplicationStateBase')]
  DNHttpApplicationStateBase = interface(DNObject)
  ['{4B8FCD46-62DD-3018-9865-C4DBDA5C0E83}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Contents: DNHttpApplicationStateBase;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject);
    function get_StaticObjects: DNHttpStaticObjectsCollectionBase;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Get(index: Int32): DDN.mscorlib.DNObject; overload;
    function Get(name: string): DDN.mscorlib.DNObject; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetKey(index: Int32): string;
    procedure Lock;
    procedure Remove(name: string);
    procedure RemoveAll;
    procedure RemoveAt(index: Int32);
    procedure &Set(name: string; value: DDN.mscorlib.DNObject);
    procedure UnLock;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Contents: DNHttpApplicationStateBase read get_Contents;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property StaticObjects: DNHttpStaticObjectsCollectionBase read get_StaticObjects;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpApplicationStateBase = class(TDNGenericImport<DNHttpApplicationStateBaseClass, DNHttpApplicationStateBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpApplicationStateWrapperClass = interface(DNHttpApplicationStateBaseClass)
  ['{DC4E5AC7-AEB9-587F-81D1-72C976DAF72F}']
  { constructors } 

    {class} function init(httpApplicationState: DNHttpApplicationState): DNHttpApplicationStateWrapper;

  end;

  [DNTypeName('System.Web.HttpApplicationStateWrapper')]
  DNHttpApplicationStateWrapper = interface(DNHttpApplicationStateBase)
  ['{C04F5022-D872-36E2-B3B0-70F9EEC495AD}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Contents: DNHttpApplicationStateBase;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject);
    function get_StaticObjects: DNHttpStaticObjectsCollectionBase;

  { methods } 

    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Get(index: Int32): DDN.mscorlib.DNObject; overload;
    function Get(name: string): DDN.mscorlib.DNObject; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetKey(index: Int32): string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure Lock;
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    procedure Remove(name: string);
    procedure RemoveAll;
    procedure RemoveAt(index: Int32);
    procedure &Set(name: string; value: DDN.mscorlib.DNObject);
    procedure UnLock;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Contents: DNHttpApplicationStateBase read get_Contents;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property StaticObjects: DNHttpStaticObjectsCollectionBase read get_StaticObjects;
  end;

  TDNHttpApplicationStateWrapper = class(TDNGenericImport<DNHttpApplicationStateWrapperClass, DNHttpApplicationStateWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpCookieCollectionClass = interface(DNObjectClass)
  ['{34065803-D8DD-565B-AB5E-830C3D2059C0}']
  { constructors } 

    {class} function init: DNHttpCookieCollection;

  end;

  [DNTypeName('System.Web.HttpCookieCollection')]
  DNHttpCookieCollection = interface(DNObject)
  ['{145D8AE7-A57C-3F1A-BEAE-BD1E560B6E4C}']
  { getters & setters } 

    function get_Item(name: string): DNHttpCookie; overload;
    function get_Item(index: Int32): DNHttpCookie; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure Add(cookie: DNHttpCookie);
    procedure &Set(cookie: DNHttpCookie);
    procedure Remove(name: string);
    procedure Clear;
    function Get(name: string): DNHttpCookie; overload;
    function Get(index: Int32): DNHttpCookie; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNHttpCookie read get_Item; default;
    property Item[index: Int32]: DNHttpCookie read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpCookieCollection = class(TDNGenericImport<DNHttpCookieCollectionClass, DNHttpCookieCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpFileCollectionClass = interface(DNObjectClass)
  ['{17FD715D-0F47-5C0D-8B18-D05CFC7E6608}']
  end;

  [DNTypeName('System.Web.HttpFileCollection')]
  DNHttpFileCollection = interface(DNObject)
  ['{BAAD4383-F415-3684-8D31-C466A7C819BF}']
  { getters & setters } 

    function get_Item(name: string): DNHttpPostedFile; overload;
    function get_Item(index: Int32): DNHttpPostedFile; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    function Get(name: string): DNHttpPostedFile; overload;
    function GetMultiple(name: string): DDN.mscorlib.DNIList<DNHttpPostedFile>;
    function Get(index: Int32): DNHttpPostedFile; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNHttpPostedFile read get_Item; default;
    property Item[index: Int32]: DNHttpPostedFile read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpFileCollection = class(TDNGenericImport<DNHttpFileCollectionClass, DNHttpFileCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpFileCollectionBaseClass = interface(DNObjectClass)
  ['{3D543A46-7EA1-5280-AA7F-EEB32E66AFB6}']
  end;

  [DNTypeName('System.Web.HttpFileCollectionBase')]
  DNHttpFileCollectionBase = interface(DNObject)
  ['{C54BFF55-13DA-378D-B0DC-6AF6B73EA53F}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(name: string): DNHttpPostedFileBase; overload;
    function get_Item(index: Int32): DNHttpPostedFileBase; overload;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function Get(index: Int32): DNHttpPostedFileBase; overload;
    function Get(name: string): DNHttpPostedFileBase; overload;
    function GetMultiple(name: string): DDN.mscorlib.DNIList<DNHttpPostedFileBase>;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetKey(index: Int32): string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[name: string]: DNHttpPostedFileBase read get_Item; default;
    property Item[index: Int32]: DNHttpPostedFileBase read get_Item; default;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpFileCollectionBase = class(TDNGenericImport<DNHttpFileCollectionBaseClass, DNHttpFileCollectionBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpFileCollectionWrapperClass = interface(DNHttpFileCollectionBaseClass)
  ['{FE4E94F4-E410-5863-A379-38EC6A38F3B1}']
  { constructors } 

    {class} function init(httpFileCollection: DNHttpFileCollection): DNHttpFileCollectionWrapper;

  end;

  [DNTypeName('System.Web.HttpFileCollectionWrapper')]
  DNHttpFileCollectionWrapper = interface(DNHttpFileCollectionBase)
  ['{EE864D32-85BC-3E0D-8DE1-73231BBE227A}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(name: string): DNHttpPostedFileBase; overload;
    function get_Item(index: Int32): DNHttpPostedFileBase; overload;

  { methods } 

    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function Get(index: Int32): DNHttpPostedFileBase; overload;
    function Get(name: string): DNHttpPostedFileBase; overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetKey(index: Int32): string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function GetMultiple(name: string): DDN.mscorlib.DNIList<DNHttpPostedFileBase>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[name: string]: DNHttpPostedFileBase read get_Item; default;
    property Item[index: Int32]: DNHttpPostedFileBase read get_Item; default;
  end;

  TDNHttpFileCollectionWrapper = class(TDNGenericImport<DNHttpFileCollectionWrapperClass, DNHttpFileCollectionWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpModuleCollectionClass = interface(DNObjectClass)
  ['{49A39F3D-5996-5B23-B4EE-274E83C4ABBC}']
  end;

  [DNTypeName('System.Web.HttpModuleCollection')]
  DNHttpModuleCollection = interface(DNObject)
  ['{652D1D6C-14F1-356A-9990-BEEDE7914D16}']
  { getters & setters } 

    function get_Item(name: string): DNIHttpModule; overload;
    function get_Item(index: Int32): DNIHttpModule; overload;
    function get_AllKeys: TArray<string>;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;

  { methods } 

    function Get(name: string): DNIHttpModule; overload;
    function Get(index: Int32): DNIHttpModule; overload;
    function GetKey(index: Int32): string;
    procedure CopyTo(dest: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNIHttpModule read get_Item; default;
    property Item[index: Int32]: DNIHttpModule read get_Item; default;
    property AllKeys: TArray<string> read get_AllKeys;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
  end;

  TDNHttpModuleCollection = class(TDNGenericImport<DNHttpModuleCollectionClass, DNHttpModuleCollection>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionStateItemCollectionClass = interface(DNObjectClass)
  ['{BDC0E61C-D849-5E50-9D98-92372BEE4D37}']
  { constructors } 

    {class} function init: DNSessionStateItemCollection;

  { static methods } 

    {class} function Deserialize(reader: DDN.mscorlib.DNBinaryReader): DNSessionStateItemCollection;

  end;

  [DNTypeName('System.Web.SessionState.SessionStateItemCollection')]
  DNSessionStateItemCollection = interface(DNObject)
  ['{15B29393-1069-33BE-A782-4195C0C233E0}']
  { getters & setters } 

    function get_Dirty: Boolean;
    procedure set_Dirty(value: Boolean);
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_Count: Int32;

  { methods } 

    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Serialize(writer: DDN.mscorlib.DNBinaryWriter);
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    procedure OnDeserialization(sender: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dirty: Boolean read get_Dirty write set_Dirty;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property Count: Int32 read get_Count;
  end;

  TDNSessionStateItemCollection = class(TDNGenericImport<DNSessionStateItemCollectionClass, DNSessionStateItemCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAdapterDictionaryClass = interface(DNObjectClass)
  ['{E3054D4F-46E0-5858-84B8-A73B4FBE471E}']
  { constructors } 

    {class} function init: DNAdapterDictionary;

  end;

  [DNTypeName('System.Web.Configuration.AdapterDictionary')]
  DNAdapterDictionary = interface(DNObject)
  ['{31F682F2-2441-31D7-9D08-E3BE0D79F941}']
  { getters & setters } 

    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    function AsReadOnly: DDN.System.DNOrderedDictionary;
    function &Contains(key: DDN.mscorlib.DNObject): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Insert(index: Int32; key: DDN.mscorlib.DNObject; value: DDN.mscorlib.DNObject);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNAdapterDictionary = class(TDNGenericImport<DNAdapterDictionaryClass, DNAdapterDictionary>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataSourceCacheDurationConverterClass = interface(DNObjectClass)
  ['{EBC1D209-072F-5B8B-8989-6EB88A2FE138}']
  { constructors } 

    {class} function init: DNDataSourceCacheDurationConverter;

  end;

  [DNTypeName('System.Web.UI.DataSourceCacheDurationConverter')]
  DNDataSourceCacheDurationConverter = interface(DNObject)
  ['{7CDE7756-BC5F-351D-96F5-F263FF430D5C}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataSourceCacheDurationConverter = class(TDNGenericImport<DNDataSourceCacheDurationConverterClass, DNDataSourceCacheDurationConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNControlIDConverterClass = interface(DNObjectClass)
  ['{94843996-9F02-5434-A907-723A34BBBA8D}']
  { constructors } 

    {class} function init: DNControlIDConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.ControlIDConverter')]
  DNControlIDConverter = interface(DNObject)
  ['{E0B8441F-CBCD-3B10-8E2E-821FE284CC11}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlIDConverter = class(TDNGenericImport<DNControlIDConverterClass, DNControlIDConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAssociatedControlConverterClass = interface(DNControlIDConverterClass)
  ['{BDB3D3CB-68C7-5BA2-B5C6-67FC139FCA5E}']
  { constructors } 

    {class} function init: DNAssociatedControlConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.AssociatedControlConverter')]
  DNAssociatedControlConverter = interface(DNControlIDConverter)
  ['{467B716A-1697-33EB-ADC1-B546DD9E5C9B}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedControlConverter = class(TDNGenericImport<DNAssociatedControlConverterClass, DNAssociatedControlConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNValidatedControlConverterClass = interface(DNControlIDConverterClass)
  ['{3844A860-0E86-509D-A15D-1AE729ECA00F}']
  { constructors } 

    {class} function init: DNValidatedControlConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.ValidatedControlConverter')]
  DNValidatedControlConverter = interface(DNControlIDConverter)
  ['{93B96B80-DECF-3224-AD68-76F3C9FE8252}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValidatedControlConverter = class(TDNGenericImport<DNValidatedControlConverterClass, DNValidatedControlConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNControlPropertyNameConverterClass = interface(DNObjectClass)
  ['{EC0D672E-9079-5968-B162-970C9FDAF1BD}']
  { constructors } 

    {class} function init: DNControlPropertyNameConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.ControlPropertyNameConverter')]
  DNControlPropertyNameConverter = interface(DNObject)
  ['{A07C563D-A1AB-3A42-970E-32C9B628F880}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlPropertyNameConverter = class(TDNGenericImport<DNControlPropertyNameConverterClass, DNControlPropertyNameConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTargetConverterClass = interface(DNObjectClass)
  ['{D821E9CC-8E54-5103-B95B-27609EBC7F7C}']
  { constructors } 

    {class} function init: DNTargetConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.TargetConverter')]
  DNTargetConverter = interface(DNObject)
  ['{E08A9E3F-34C4-337F-8E82-4611E485DB5B}']
  { methods } 

    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTargetConverter = class(TDNGenericImport<DNTargetConverterClass, DNTargetConverter>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNMachineKeyValidationConverterClass = interface(DNObjectClass)
  ['{EF2CA9DB-0BD0-5653-9BCB-6DAF64BCF686}']
  { constructors } 

    {class} function init: DNMachineKeyValidationConverter;

  end;

  [DNTypeName('System.Web.Configuration.MachineKeyValidationConverter')]
  DNMachineKeyValidationConverter = interface(DNObject)
  ['{977A52A4-018C-3741-86A3-B2E0A463618D}']
  { methods } 

    function ConvertTo(ctx: DDN.System.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(ctx: DDN.System.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(ctx: DDN.System.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(ctx: DDN.System.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMachineKeyValidationConverter = class(TDNGenericImport<DNMachineKeyValidationConverterClass, DNMachineKeyValidationConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWebColorConverterClass = interface(DNObjectClass)
  ['{A70CD77E-2F13-53EA-9D9A-2D6009AE01FA}']
  { constructors } 

    {class} function init: DNWebColorConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebColorConverter')]
  DNWebColorConverter = interface(DNObject)
  ['{BA6F2EC4-CE6D-371F-85F6-1EEFBD2371F9}']
  { methods } 

    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebColorConverter = class(TDNGenericImport<DNWebColorConverterClass, DNWebColorConverter>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNLowerCaseStringConverterClass = interface(DNObjectClass)
  ['{F9AC75B1-41B1-5387-B1C7-A257FD0A4598}']
  { constructors } 

    {class} function init: DNLowerCaseStringConverter;

  end;

  [DNTypeName('System.Web.Configuration.LowerCaseStringConverter')]
  DNLowerCaseStringConverter = interface(DNObject)
  ['{9000DBFD-5B2D-35E2-A5FB-C8BFBC18F692}']
  { methods } 

    function CanConvertTo(ctx: DDN.System.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertFrom(ctx: DDN.System.DNITypeDescriptorContext; &type: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertTo(ctx: DDN.System.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertFrom(ctx: DDN.System.DNITypeDescriptorContext; ci: DDN.mscorlib.DNCultureInfo; data: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLowerCaseStringConverter = class(TDNGenericImport<DNLowerCaseStringConverterClass, DNLowerCaseStringConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFontNamesConverterClass = interface(DNObjectClass)
  ['{AC077EB9-8533-5F42-A258-6FFA5073653B}']
  { constructors } 

    {class} function init: DNFontNamesConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.FontNamesConverter')]
  DNFontNamesConverter = interface(DNObject)
  ['{5756C5BD-66D3-3AA0-B94B-81B306097913}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontNamesConverter = class(TDNGenericImport<DNFontNamesConverterClass, DNFontNamesConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFontUnitConverterClass = interface(DNObjectClass)
  ['{009A0A47-4310-59A3-AF4A-EE8D7DECF8B4}']
  { constructors } 

    {class} function init: DNFontUnitConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.FontUnitConverter')]
  DNFontUnitConverter = interface(DNObject)
  ['{1E6D55B9-1FD5-3F31-AAFD-2B8EE351B703}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFontUnitConverter = class(TDNGenericImport<DNFontUnitConverterClass, DNFontUnitConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNStringArrayConverterClass = interface(DNObjectClass)
  ['{39316D4B-E260-5E73-A202-AF27852ACC9A}']
  { constructors } 

    {class} function init: DNStringArrayConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.StringArrayConverter')]
  DNStringArrayConverter = interface(DNObject)
  ['{C9D852F4-0B6E-3FC8-9DDD-6EE2CB6B267A}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStringArrayConverter = class(TDNGenericImport<DNStringArrayConverterClass, DNStringArrayConverter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNUnitConverterClass = interface(DNObjectClass)
  ['{D99EA696-178C-54B6-BC6D-69845633FF13}']
  { constructors } 

    {class} function init: DNUnitConverter;

  end;

  [DNTypeName('System.Web.UI.WebControls.UnitConverter')]
  DNUnitConverter = interface(DNObject)
  ['{2D1616AB-9977-3886-BF7D-FD7F6C631D7C}']
  { methods } 

    function CanConvertFrom(context: DDN.System.DNITypeDescriptorContext; sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(context: DDN.System.DNITypeDescriptorContext; destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertTo(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CanConvertFrom(sourceType: DDN.mscorlib.DNType): Boolean; overload;
    function CanConvertTo(destinationType: DDN.mscorlib.DNType): Boolean; overload;
    function ConvertFrom(value: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromInvariantString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertFromString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; text: string): DDN.mscorlib.DNObject; overload;
    function ConvertTo(value: DDN.mscorlib.DNObject; destinationType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertToInvariantString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToInvariantString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): string; overload;
    function ConvertToString(context: DDN.System.DNITypeDescriptorContext; culture: DDN.mscorlib.DNCultureInfo; value: DDN.mscorlib.DNObject): string; overload;
    function CreateInstance(propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function CreateInstance(context: DDN.System.DNITypeDescriptorContext; propertyValues: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNObject; overload;
    function GetCreateInstanceSupported: Boolean; overload;
    function GetCreateInstanceSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetProperties(value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject; attributes: TArray<DDN.mscorlib.DNAttribute>): DDN.System.DNPropertyDescriptorCollection; overload;
    function GetPropertiesSupported: Boolean; overload;
    function GetPropertiesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValues: DDN.mscorlib.DNICollection; overload;
    function GetStandardValues(context: DDN.System.DNITypeDescriptorContext): DDN.System.DNTypeConverter_StandardValuesCollection; overload;
    function GetStandardValuesExclusive: Boolean; overload;
    function GetStandardValuesExclusive(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function GetStandardValuesSupported: Boolean; overload;
    function GetStandardValuesSupported(context: DDN.System.DNITypeDescriptorContext): Boolean; overload;
    function IsValid(value: DDN.mscorlib.DNObject): Boolean; overload;
    function IsValid(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): Boolean; overload;
    function GetProperties(context: DDN.System.DNITypeDescriptorContext; value: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptorCollection; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUnitConverter = class(TDNGenericImport<DNUnitConverterClass, DNUnitConverter>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAssemblyCollectionClass = interface(DNObjectClass)
  ['{53F2B12E-DBE7-5C47-BDB3-42328350F1FD}']
  { constructors } 

    {class} function init: DNAssemblyCollection;

  end;

  [DNTypeName('System.Web.Configuration.AssemblyCollection')]
  DNAssemblyCollection = interface(DNObject)
  ['{E7BB2788-062E-3249-B551-BD779DC948C0}']
  { getters & setters } 

    function get_Item(index: Int32): DNAssemblyInfo; overload;
    procedure set_Item(index: Int32; value: DNAssemblyInfo);
    function get_Item(assemblyName: string): DNAssemblyInfo; overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(assemblyInformation: DNAssemblyInfo);
    procedure Remove(key: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAssemblyInfo read get_Item write set_Item; default;
    property Item[assemblyName: string]: DNAssemblyInfo read get_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAssemblyCollection = class(TDNGenericImport<DNAssemblyCollectionClass, DNAssemblyCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAuthorizationRuleCollectionClass = interface(DNObjectClass)
  ['{A8ED36C9-E17D-58FD-9790-A5F5477FA247}']
  { constructors } 

    {class} function init: DNAuthorizationRuleCollection;

  end;

  [DNTypeName('System.Web.Configuration.AuthorizationRuleCollection')]
  DNAuthorizationRuleCollection = interface(DNObject)
  ['{971192A6-53B0-3540-9BEF-A8AED6D5E127}']
  { getters & setters } 

    function get_Item(index: Int32): DNAuthorizationRule;
    procedure set_Item(index: Int32; value: DNAuthorizationRule);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(rule: DNAuthorizationRule);
    procedure Clear;
    function Get(index: Int32): DNAuthorizationRule;
    procedure RemoveAt(index: Int32);
    procedure &Set(index: Int32; rule: DNAuthorizationRule);
    function IndexOf(rule: DNAuthorizationRule): Int32;
    procedure Remove(rule: DNAuthorizationRule);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNAuthorizationRule read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthorizationRuleCollection = class(TDNGenericImport<DNAuthorizationRuleCollectionClass, DNAuthorizationRuleCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBufferModesCollectionClass = interface(DNObjectClass)
  ['{E050700B-D9A7-5C47-B775-71BEC9C3DBC6}']
  { constructors } 

    {class} function init: DNBufferModesCollection;

  end;

  [DNTypeName('System.Web.Configuration.BufferModesCollection')]
  DNBufferModesCollection = interface(DNObject)
  ['{CA750FF9-EF6A-3907-A72B-0D4CF5D1426E}']
  { getters & setters } 

    function get_Item(key: string): DNBufferModeSettings; overload;
    function get_Item(index: Int32): DNBufferModeSettings; overload;
    procedure set_Item(index: Int32; value: DNBufferModeSettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(bufferModeSettings: DNBufferModeSettings);
    procedure Remove(s: string);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: DNBufferModeSettings read get_Item; default;
    property Item[index: Int32]: DNBufferModeSettings read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBufferModesCollection = class(TDNGenericImport<DNBufferModesCollectionClass, DNBufferModesCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBuildProviderCollectionClass = interface(DNObjectClass)
  ['{958F16C6-25EE-5170-B6D5-A8B3774DDE81}']
  { constructors } 

    {class} function init: DNBuildProviderCollection;

  end;

  [DNTypeName('System.Web.Configuration.BuildProviderCollection')]
  DNBuildProviderCollection = interface(DNObject)
  ['{0DD7FFF9-4342-3FF7-9609-5DF82FC1D066}']
  { getters & setters } 

    function get_Item(name: string): DNConfiguration_BuildProvider; overload;
    function get_Item(index: Int32): DNConfiguration_BuildProvider; overload;
    procedure set_Item(index: Int32; value: DNConfiguration_BuildProvider);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(buildProvider: DNConfiguration_BuildProvider);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfiguration_BuildProvider read get_Item; default;
    property Item[index: Int32]: DNConfiguration_BuildProvider read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBuildProviderCollection = class(TDNGenericImport<DNBuildProviderCollectionClass, DNBuildProviderCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNClientTargetCollectionClass = interface(DNObjectClass)
  ['{353629E0-633A-5E5A-9BC2-9A888D4BC5F4}']
  { constructors } 

    {class} function init: DNClientTargetCollection;

  end;

  [DNTypeName('System.Web.Configuration.ClientTargetCollection')]
  DNClientTargetCollection = interface(DNObject)
  ['{B58F7BB4-A011-3A7E-8299-B00D01AD1EE5}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNClientTarget; overload;
    function get_Item(index: Int32): DNClientTarget; overload;
    procedure set_Item(index: Int32; value: DNClientTarget);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function GetKey(index: Int32): string;
    procedure Add(clientTarget: DNClientTarget);
    procedure Remove(name: string); overload;
    procedure Remove(clientTarget: DNClientTarget); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNClientTarget read get_Item; default;
    property Item[index: Int32]: DNClientTarget read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNClientTargetCollection = class(TDNGenericImport<DNClientTargetCollectionClass, DNClientTargetCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCodeSubDirectoriesCollectionClass = interface(DNObjectClass)
  ['{2EBB132E-D74B-5A4E-A44A-B4E17697517B}']
  { constructors } 

    {class} function init: DNCodeSubDirectoriesCollection;

  end;

  [DNTypeName('System.Web.Configuration.CodeSubDirectoriesCollection')]
  DNCodeSubDirectoriesCollection = interface(DNObject)
  ['{605E36F1-50AA-33DC-BBF2-020F7C0133DC}']
  { getters & setters } 

    function get_Item(index: Int32): DNCodeSubDirectory;
    procedure set_Item(index: Int32; value: DNCodeSubDirectory);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(codeSubDirectory: DNCodeSubDirectory);
    procedure Clear;
    procedure Remove(directoryName: string);
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNCodeSubDirectory read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCodeSubDirectoriesCollection = class(TDNGenericImport<DNCodeSubDirectoriesCollectionClass, DNCodeSubDirectoriesCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCompilerCollectionClass = interface(DNObjectClass)
  ['{0D3FC469-1B45-5B54-B7DE-45E1721C7AE8}']
  { constructors } 

    {class} function init: DNCompilerCollection;

  end;

  [DNTypeName('System.Web.Configuration.CompilerCollection')]
  DNCompilerCollection = interface(DNObject)
  ['{B4EFC4B1-E7F9-314F-8F5D-E341BC630CBC}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(language: string): DNCompiler; overload;
    function get_Item(index: Int32): DNCompiler; overload;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Get(index: Int32): DNCompiler; overload;
    function Get(language: string): DNCompiler; overload;
    function GetKey(index: Int32): string;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[language: string]: DNCompiler read get_Item; default;
    property Item[index: Int32]: DNCompiler read get_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCompilerCollection = class(TDNGenericImport<DNCompilerCollectionClass, DNCompilerCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCustomErrorCollectionClass = interface(DNObjectClass)
  ['{73D1BB11-7222-5A6A-B7D4-5783135B5429}']
  { constructors } 

    {class} function init: DNCustomErrorCollection;

  end;

  [DNTypeName('System.Web.Configuration.CustomErrorCollection')]
  DNCustomErrorCollection = interface(DNObject)
  ['{5A75BD4B-3EB8-347B-BCB7-FA655E98388C}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(statusCode: string): DNCustomError; overload;
    function get_Item(index: Int32): DNCustomError; overload;
    procedure set_Item(index: Int32; value: DNCustomError);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(customError: DNCustomError);
    procedure Clear;
    function Get(index: Int32): DNCustomError; overload;
    function Get(statusCode: string): DNCustomError; overload;
    function GetKey(index: Int32): string;
    procedure Remove(statusCode: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(customError: DNCustomError);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[statusCode: string]: DNCustomError read get_Item; default;
    property Item[index: Int32]: DNCustomError read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCustomErrorCollection = class(TDNGenericImport<DNCustomErrorCollectionClass, DNCustomErrorCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNEventMappingSettingsCollectionClass = interface(DNObjectClass)
  ['{951A0B6B-1FF9-5960-8091-01FF620FBAF6}']
  { constructors } 

    {class} function init: DNEventMappingSettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.EventMappingSettingsCollection')]
  DNEventMappingSettingsCollection = interface(DNObject)
  ['{6BD924B7-C68C-3E66-8A65-ACC2414DED27}']
  { getters & setters } 

    function get_Item(key: string): DNEventMappingSettings; overload;
    function get_Item(index: Int32): DNEventMappingSettings; overload;
    procedure set_Item(index: Int32; value: DNEventMappingSettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(eventMappingSettings: DNEventMappingSettings);
    procedure Clear;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; eventMappingSettings: DNEventMappingSettings);
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    function &Contains(name: string): Boolean;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: DNEventMappingSettings read get_Item; default;
    property Item[index: Int32]: DNEventMappingSettings read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNEventMappingSettingsCollection = class(TDNGenericImport<DNEventMappingSettingsCollectionClass, DNEventMappingSettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNExpressionBuilderCollectionClass = interface(DNObjectClass)
  ['{71D33FAD-1EB5-5FF1-A7CC-2994CF2A19D5}']
  { constructors } 

    {class} function init: DNExpressionBuilderCollection;

  end;

  [DNTypeName('System.Web.Configuration.ExpressionBuilderCollection')]
  DNExpressionBuilderCollection = interface(DNObject)
  ['{996F6763-E680-35D4-BF9A-972005706BA8}']
  { getters & setters } 

    function get_Item(name: string): DNConfiguration_ExpressionBuilder; overload;
    function get_Item(index: Int32): DNConfiguration_ExpressionBuilder; overload;
    procedure set_Item(index: Int32; value: DNConfiguration_ExpressionBuilder);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(buildProvider: DNConfiguration_ExpressionBuilder);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfiguration_ExpressionBuilder read get_Item; default;
    property Item[index: Int32]: DNConfiguration_ExpressionBuilder read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNExpressionBuilderCollection = class(TDNGenericImport<DNExpressionBuilderCollectionClass, DNExpressionBuilderCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFolderLevelBuildProviderCollectionClass = interface(DNObjectClass)
  ['{CFADDEBE-23AD-5914-B5FA-AF83ABABB6D3}']
  { constructors } 

    {class} function init: DNFolderLevelBuildProviderCollection;

  end;

  [DNTypeName('System.Web.Configuration.FolderLevelBuildProviderCollection')]
  DNFolderLevelBuildProviderCollection = interface(DNObject)
  ['{42653B1B-8EEF-3CBB-9AEA-0F79E4E4EFF5}']
  { getters & setters } 

    function get_Item(name: string): DNConfiguration_BuildProvider; overload;
    function get_Item(index: Int32): DNFolderLevelBuildProvider; overload;
    procedure set_Item(index: Int32; value: DNFolderLevelBuildProvider);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(buildProvider: DNFolderLevelBuildProvider);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNConfiguration_BuildProvider read get_Item; default;
    property Item[index: Int32]: DNFolderLevelBuildProvider read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFolderLevelBuildProviderCollection = class(TDNGenericImport<DNFolderLevelBuildProviderCollectionClass, DNFolderLevelBuildProviderCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFormsAuthenticationUserCollectionClass = interface(DNObjectClass)
  ['{980EB677-70DD-598D-A610-045FCEF9612F}']
  { constructors } 

    {class} function init: DNFormsAuthenticationUserCollection;

  end;

  [DNTypeName('System.Web.Configuration.FormsAuthenticationUserCollection')]
  DNFormsAuthenticationUserCollection = interface(DNObject)
  ['{8B27CD4F-3DC0-31AF-BA13-D20A81F2B806}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNFormsAuthenticationUser; overload;
    function get_Item(index: Int32): DNFormsAuthenticationUser; overload;
    procedure set_Item(index: Int32; value: DNFormsAuthenticationUser);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(user: DNFormsAuthenticationUser);
    procedure Clear;
    function Get(index: Int32): DNFormsAuthenticationUser; overload;
    function Get(name: string): DNFormsAuthenticationUser; overload;
    function GetKey(index: Int32): string;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(user: DNFormsAuthenticationUser);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNFormsAuthenticationUser read get_Item; default;
    property Item[index: Int32]: DNFormsAuthenticationUser read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFormsAuthenticationUserCollection = class(TDNGenericImport<DNFormsAuthenticationUserCollectionClass, DNFormsAuthenticationUserCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFullTrustAssemblyCollectionClass = interface(DNObjectClass)
  ['{1175FEEA-620C-5583-9222-7EB806B14D87}']
  { constructors } 

    {class} function init: DNFullTrustAssemblyCollection;

  end;

  [DNTypeName('System.Web.Configuration.FullTrustAssemblyCollection')]
  DNFullTrustAssemblyCollection = interface(DNObject)
  ['{B0C8893D-A538-3C8F-B495-B7B2997687A2}']
  { getters & setters } 

    function get_Item(index: Int32): DNFullTrustAssembly;
    procedure set_Item(index: Int32; value: DNFullTrustAssembly);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(fullTrustAssembly: DNFullTrustAssembly);
    procedure Remove(key: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNFullTrustAssembly read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFullTrustAssemblyCollection = class(TDNGenericImport<DNFullTrustAssemblyCollectionClass, DNFullTrustAssemblyCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpHandlerActionCollectionClass = interface(DNObjectClass)
  ['{02E50C24-D5D2-5FB2-8AF6-EC54EFF1A332}']
  { constructors } 

    {class} function init: DNHttpHandlerActionCollection;

  end;

  [DNTypeName('System.Web.Configuration.HttpHandlerActionCollection')]
  DNHttpHandlerActionCollection = interface(DNObject)
  ['{08EC0E38-2CA0-3CBB-AE6A-B5B057FD4839}']
  { getters & setters } 

    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Item(index: Int32): DNHttpHandlerAction;
    procedure set_Item(index: Int32; value: DNHttpHandlerAction);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IndexOf(action: DNHttpHandlerAction): Int32;
    procedure Add(httpHandlerAction: DNHttpHandlerAction);
    procedure Remove(action: DNHttpHandlerAction); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(verb: string; path: string); overload;
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Item[index: Int32]: DNHttpHandlerAction read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpHandlerActionCollection = class(TDNGenericImport<DNHttpHandlerActionCollectionClass, DNHttpHandlerActionCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpModuleActionCollectionClass = interface(DNObjectClass)
  ['{CD02426B-832C-5DFF-833B-8A5AA66D25E0}']
  { constructors } 

    {class} function init: DNHttpModuleActionCollection;

  end;

  [DNTypeName('System.Web.Configuration.HttpModuleActionCollection')]
  DNHttpModuleActionCollection = interface(DNObject)
  ['{7CF700D5-4843-3C90-9B87-836214F112B8}']
  { getters & setters } 

    function get_Item(index: Int32): DNHttpModuleAction;
    procedure set_Item(index: Int32; value: DNHttpModuleAction);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IndexOf(action: DNHttpModuleAction): Int32;
    procedure Add(httpModule: DNHttpModuleAction);
    procedure Remove(action: DNHttpModuleAction); overload;
    procedure Remove(name: string); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHttpModuleAction read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpModuleActionCollection = class(TDNGenericImport<DNHttpModuleActionCollectionClass, DNHttpModuleActionCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNIgnoreDeviceFilterElementCollectionClass = interface(DNObjectClass)
  ['{05658462-FEB1-5904-B63E-FD5537CCBA85}']
  { constructors } 

    {class} function init: DNIgnoreDeviceFilterElementCollection;

  end;

  [DNTypeName('System.Web.Configuration.IgnoreDeviceFilterElementCollection')]
  DNIgnoreDeviceFilterElementCollection = interface(DNObject)
  ['{34998E9A-DC4E-3904-967D-1B47CDFB47B1}']
  { getters & setters } 

    function get_Item(name: string): DNIgnoreDeviceFilterElement; overload;
    function get_Item(index: Int32): DNIgnoreDeviceFilterElement; overload;
    procedure set_Item(index: Int32; value: DNIgnoreDeviceFilterElement);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(deviceFilter: DNIgnoreDeviceFilterElement);
    procedure Remove(name: string); overload;
    procedure Remove(deviceFilter: DNIgnoreDeviceFilterElement); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNIgnoreDeviceFilterElement read get_Item; default;
    property Item[index: Int32]: DNIgnoreDeviceFilterElement read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIgnoreDeviceFilterElementCollection = class(TDNGenericImport<DNIgnoreDeviceFilterElementCollectionClass, DNIgnoreDeviceFilterElementCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNNamespaceCollectionClass = interface(DNObjectClass)
  ['{5BB16D87-6B13-525C-80A1-DE0672FB0CC2}']
  { constructors } 

    {class} function init: DNNamespaceCollection;

  end;

  [DNTypeName('System.Web.Configuration.NamespaceCollection')]
  DNNamespaceCollection = interface(DNObject)
  ['{A1F01C37-E4D4-3E61-9F45-59B322E6DFD4}']
  { getters & setters } 

    function get_AutoImportVBNamespace: Boolean;
    procedure set_AutoImportVBNamespace(value: Boolean);
    function get_Item(index: Int32): DNNamespaceInfo;
    procedure set_Item(index: Int32; value: DNNamespaceInfo);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(namespaceInformation: DNNamespaceInfo);
    procedure Remove(s: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoImportVBNamespace: Boolean read get_AutoImportVBNamespace write set_AutoImportVBNamespace;
    property Item[index: Int32]: DNNamespaceInfo read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNNamespaceCollection = class(TDNGenericImport<DNNamespaceCollectionClass, DNNamespaceCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNOutputCacheProfileCollectionClass = interface(DNObjectClass)
  ['{18A61BD3-E1A9-57D1-B940-09BAB4B4AF40}']
  { constructors } 

    {class} function init: DNOutputCacheProfileCollection;

  end;

  [DNTypeName('System.Web.Configuration.OutputCacheProfileCollection')]
  DNOutputCacheProfileCollection = interface(DNObject)
  ['{755EAFF4-6A99-3C3F-9895-A0C5896AAF7B}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNOutputCacheProfile; overload;
    function get_Item(index: Int32): DNOutputCacheProfile; overload;
    procedure set_Item(index: Int32; value: DNOutputCacheProfile);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(name: DNOutputCacheProfile);
    procedure Clear;
    function Get(index: Int32): DNOutputCacheProfile; overload;
    function Get(name: string): DNOutputCacheProfile; overload;
    function GetKey(index: Int32): string;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(user: DNOutputCacheProfile);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNOutputCacheProfile read get_Item; default;
    property Item[index: Int32]: DNOutputCacheProfile read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNOutputCacheProfileCollection = class(TDNGenericImport<DNOutputCacheProfileCollectionClass, DNOutputCacheProfileCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNPartialTrustVisibleAssemblyCollectionClass = interface(DNObjectClass)
  ['{EB618A03-35F2-5A88-B4A7-5FF2F1D35C26}']
  { constructors } 

    {class} function init: DNPartialTrustVisibleAssemblyCollection;

  end;

  [DNTypeName('System.Web.Configuration.PartialTrustVisibleAssemblyCollection')]
  DNPartialTrustVisibleAssemblyCollection = interface(DNObject)
  ['{0C8277F0-5034-3D7B-8BB6-EA87BB9DCCF5}']
  { getters & setters } 

    function get_Item(index: Int32): DNPartialTrustVisibleAssembly;
    procedure set_Item(index: Int32; value: DNPartialTrustVisibleAssembly);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(partialTrustVisibleAssembly: DNPartialTrustVisibleAssembly);
    procedure Remove(key: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNPartialTrustVisibleAssembly read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPartialTrustVisibleAssemblyCollection = class(TDNGenericImport<DNPartialTrustVisibleAssemblyCollectionClass, DNPartialTrustVisibleAssemblyCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfileGroupSettingsCollectionClass = interface(DNObjectClass)
  ['{632B15CC-5B45-5669-87BB-F0E0C99C5E9E}']
  { constructors } 

    {class} function init: DNProfileGroupSettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.ProfileGroupSettingsCollection')]
  DNProfileGroupSettingsCollection = interface(DNObject)
  ['{3A5FAE9E-F630-3179-81FD-5571E0171497}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNProfileGroupSettings; overload;
    function get_Item(index: Int32): DNProfileGroupSettings; overload;
    procedure set_Item(index: Int32; value: DNProfileGroupSettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(group: DNProfileGroupSettings);
    function Get(index: Int32): DNProfileGroupSettings; overload;
    function Get(name: string): DNProfileGroupSettings; overload;
    function GetKey(index: Int32): string;
    procedure &Set(group: DNProfileGroupSettings);
    function IndexOf(group: DNProfileGroupSettings): Int32;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNProfileGroupSettings read get_Item; default;
    property Item[index: Int32]: DNProfileGroupSettings read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfileGroupSettingsCollection = class(TDNGenericImport<DNProfileGroupSettingsCollectionClass, DNProfileGroupSettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfilePropertySettingsCollectionClass = interface(DNObjectClass)
  ['{CC465E9B-6430-5A4C-9279-8B81868BCB2F}']
  { constructors } 

    {class} function init: DNProfilePropertySettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.ProfilePropertySettingsCollection')]
  DNProfilePropertySettingsCollection = interface(DNObject)
  ['{14964B3A-68DB-3F28-90D2-4FA864C1C68C}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNProfilePropertySettings; overload;
    function get_Item(index: Int32): DNProfilePropertySettings; overload;
    procedure set_Item(index: Int32; value: DNProfilePropertySettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(propertySettings: DNProfilePropertySettings);
    function Get(index: Int32): DNProfilePropertySettings; overload;
    function Get(name: string): DNProfilePropertySettings; overload;
    function GetKey(index: Int32): string;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(propertySettings: DNProfilePropertySettings);
    function IndexOf(propertySettings: DNProfilePropertySettings): Int32;
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNProfilePropertySettings read get_Item; default;
    property Item[index: Int32]: DNProfilePropertySettings read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfilePropertySettingsCollection = class(TDNGenericImport<DNProfilePropertySettingsCollectionClass, DNProfilePropertySettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRootProfilePropertySettingsCollectionClass = interface(DNProfilePropertySettingsCollectionClass)
  ['{91E316EF-CAB7-595B-BAB1-E5759D956561}']
  { constructors } 

    {class} function init: DNRootProfilePropertySettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.RootProfilePropertySettingsCollection')]
  DNRootProfilePropertySettingsCollection = interface(DNProfilePropertySettingsCollection)
  ['{A2DE0D37-071E-3D18-9E5B-E1695A7BE7AE}']
  { getters & setters } 

    function get_GroupSettings: DNProfileGroupSettingsCollection;
    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNProfilePropertySettings; overload;
    function get_Item(index: Int32): DNProfilePropertySettings; overload;
    procedure set_Item(index: Int32; value: DNProfilePropertySettings);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(rootProfilePropertySettingsCollection: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Add(propertySettings: DNProfilePropertySettings);
    function Get(index: Int32): DNProfilePropertySettings; overload;
    function Get(name: string): DNProfilePropertySettings; overload;
    function GetKey(index: Int32): string;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(propertySettings: DNProfilePropertySettings);
    function IndexOf(propertySettings: DNProfilePropertySettings): Int32;
    procedure Clear;
    function IsReadOnly: Boolean;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupSettings: DNProfileGroupSettingsCollection read get_GroupSettings;
    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNProfilePropertySettings read get_Item; default;
    property Item[index: Int32]: DNProfilePropertySettings read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRootProfilePropertySettingsCollection = class(TDNGenericImport<DNRootProfilePropertySettingsCollectionClass, DNRootProfilePropertySettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfileSettingsCollectionClass = interface(DNObjectClass)
  ['{61AA8E68-39F3-5248-9461-34E7ABADAB19}']
  { constructors } 

    {class} function init: DNProfileSettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.ProfileSettingsCollection')]
  DNProfileSettingsCollection = interface(DNObject)
  ['{9B7AAC32-E234-3682-9F12-A1A89AF49D21}']
  { getters & setters } 

    function get_Item(index: Int32): DNProfileSettings; overload;
    procedure set_Item(index: Int32; value: DNProfileSettings);
    function get_Item(key: string): DNProfileSettings; overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(profilesSettings: DNProfileSettings);
    procedure Clear;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; authorizationSettings: DNProfileSettings);
    function IndexOf(name: string): Int32;
    procedure Remove(name: string);
    function &Contains(name: string): Boolean;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNProfileSettings read get_Item write set_Item; default;
    property Item[key: string]: DNProfileSettings read get_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfileSettingsCollection = class(TDNGenericImport<DNProfileSettingsCollectionClass, DNProfileSettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProtocolCollectionClass = interface(DNObjectClass)
  ['{314B767B-A95C-560A-AD28-C7B51519B42D}']
  { constructors } 

    {class} function init: DNProtocolCollection;

  end;

  [DNTypeName('System.Web.Configuration.ProtocolCollection')]
  DNProtocolCollection = interface(DNObject)
  ['{70E8AC04-3ED1-38D5-861E-C79D6BB7DD2E}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNProtocolElement; overload;
    function get_Item(index: Int32): DNProtocolElement; overload;
    procedure set_Item(index: Int32; value: DNProtocolElement);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(protocolElement: DNProtocolElement);
    procedure Remove(name: string); overload;
    procedure Remove(protocolElement: DNProtocolElement); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNProtocolElement read get_Item; default;
    property Item[index: Int32]: DNProtocolElement read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolCollection = class(TDNGenericImport<DNProtocolCollectionClass, DNProtocolCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRuleSettingsCollectionClass = interface(DNObjectClass)
  ['{4B026729-1445-5353-BFDC-4D81172F16BC}']
  { constructors } 

    {class} function init: DNRuleSettingsCollection;

  end;

  [DNTypeName('System.Web.Configuration.RuleSettingsCollection')]
  DNRuleSettingsCollection = interface(DNObject)
  ['{DCFA27AE-5AED-318F-A393-EDE8E3CF4D91}']
  { getters & setters } 

    function get_Item(index: Int32): DNRuleSettings; overload;
    procedure set_Item(index: Int32; value: DNRuleSettings);
    function get_Item(key: string): DNRuleSettings; overload;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(ruleSettings: DNRuleSettings);
    procedure Clear;
    procedure RemoveAt(index: Int32);
    procedure Insert(index: Int32; eventSettings: DNRuleSettings);
    procedure Remove(name: string);
    function IndexOf(name: string): Int32;
    function &Contains(name: string): Boolean;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNRuleSettings read get_Item write set_Item; default;
    property Item[key: string]: DNRuleSettings read get_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRuleSettingsCollection = class(TDNGenericImport<DNRuleSettingsCollectionClass, DNRuleSettingsCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSqlCacheDependencyDatabaseCollectionClass = interface(DNObjectClass)
  ['{DA6C4BCC-35C7-57A7-9304-75C36E943F6F}']
  { constructors } 

    {class} function init: DNSqlCacheDependencyDatabaseCollection;

  end;

  [DNTypeName('System.Web.Configuration.SqlCacheDependencyDatabaseCollection')]
  DNSqlCacheDependencyDatabaseCollection = interface(DNObject)
  ['{8FCF0B33-1DF8-3CA3-80A0-6EBA0458A69E}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNSqlCacheDependencyDatabase; overload;
    function get_Item(index: Int32): DNSqlCacheDependencyDatabase; overload;
    procedure set_Item(index: Int32; value: DNSqlCacheDependencyDatabase);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(name: DNSqlCacheDependencyDatabase);
    procedure Clear;
    function Get(index: Int32): DNSqlCacheDependencyDatabase; overload;
    function Get(name: string): DNSqlCacheDependencyDatabase; overload;
    function GetKey(index: Int32): string;
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure &Set(user: DNSqlCacheDependencyDatabase);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNSqlCacheDependencyDatabase read get_Item; default;
    property Item[index: Int32]: DNSqlCacheDependencyDatabase read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSqlCacheDependencyDatabaseCollection = class(TDNGenericImport<DNSqlCacheDependencyDatabaseCollectionClass, DNSqlCacheDependencyDatabaseCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTagMapCollectionClass = interface(DNObjectClass)
  ['{97B60C47-BE31-5BE1-8F8E-350C45B7908A}']
  { constructors } 

    {class} function init: DNTagMapCollection;

  end;

  [DNTypeName('System.Web.Configuration.TagMapCollection')]
  DNTagMapCollection = interface(DNObject)
  ['{42A2D568-EF1F-3DCB-ADD2-A02C32DE70B0}']
  { getters & setters } 

    function get_Item(index: Int32): DNTagMapInfo;
    procedure set_Item(index: Int32; value: DNTagMapInfo);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(tagMapInformation: DNTagMapInfo);
    procedure Remove(tagMapInformation: DNTagMapInfo);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTagMapInfo read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTagMapCollection = class(TDNGenericImport<DNTagMapCollectionClass, DNTagMapCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTagPrefixCollectionClass = interface(DNObjectClass)
  ['{620C90ED-B127-59DB-92E2-8EF8DCD9D252}']
  { constructors } 

    {class} function init: DNTagPrefixCollection;

  end;

  [DNTypeName('System.Web.Configuration.TagPrefixCollection')]
  DNTagPrefixCollection = interface(DNObject)
  ['{DC681265-A2BD-3519-ABDA-69FFDAEF6694}']
  { getters & setters } 

    function get_Item(index: Int32): DNTagPrefixInfo;
    procedure set_Item(index: Int32; value: DNTagPrefixInfo);
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(tagPrefixInformation: DNTagPrefixInfo);
    procedure Remove(tagPrefixInformation: DNTagPrefixInfo);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTagPrefixInfo read get_Item write set_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTagPrefixCollection = class(TDNGenericImport<DNTagPrefixCollectionClass, DNTagPrefixCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTransformerInfoCollectionClass = interface(DNObjectClass)
  ['{5D1186A9-5B02-5416-9026-866CC3CE75B9}']
  { constructors } 

    {class} function init: DNTransformerInfoCollection;

  end;

  [DNTypeName('System.Web.Configuration.TransformerInfoCollection')]
  DNTransformerInfoCollection = interface(DNObject)
  ['{FAC025EA-5B47-36DD-A865-D75D5357EE61}']
  { getters & setters } 

    function get_Item(index: Int32): DNTransformerInfo;
    procedure set_Item(index: Int32; value: DNTransformerInfo);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(transformerInfo: DNTransformerInfo);
    procedure Clear;
    procedure Remove(s: string);
    procedure RemoveAt(index: Int32);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTransformerInfo read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTransformerInfoCollection = class(TDNGenericImport<DNTransformerInfoCollectionClass, DNTransformerInfoCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTrustLevelCollectionClass = interface(DNObjectClass)
  ['{2CD25177-04D4-568E-B922-DE10E5E2E87D}']
  { constructors } 

    {class} function init: DNTrustLevelCollection;

  end;

  [DNTypeName('System.Web.Configuration.TrustLevelCollection')]
  DNTrustLevelCollection = interface(DNObject)
  ['{5A1B8DEB-31FB-3025-BCBA-B6EBB559ADCE}']
  { getters & setters } 

    function get_Item(index: Int32): DNTrustLevel; overload;
    procedure set_Item(index: Int32; value: DNTrustLevel);
    function get_Item(key: string): DNTrustLevel; overload;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    procedure Add(trustLevel: DNTrustLevel);
    procedure Clear;
    function Get(index: Int32): DNTrustLevel;
    procedure RemoveAt(index: Int32);
    procedure Remove(trustLevel: DNTrustLevel);
    procedure &Set(index: Int32; trustLevel: DNTrustLevel);
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNTrustLevel read get_Item write set_Item; default;
    property Item[key: string]: DNTrustLevel read get_Item; default;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTrustLevelCollection = class(TDNGenericImport<DNTrustLevelCollectionClass, DNTrustLevelCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNUrlMappingCollectionClass = interface(DNObjectClass)
  ['{C6794F65-17B9-5E54-BCD5-6244996CDCC5}']
  { constructors } 

    {class} function init: DNUrlMappingCollection;

  end;

  [DNTypeName('System.Web.Configuration.UrlMappingCollection')]
  DNUrlMappingCollection = interface(DNObject)
  ['{2432E8DE-AA4B-3ACD-A615-94B21B6C4687}']
  { getters & setters } 

    function get_AllKeys: TArray<string>;
    function get_Item(name: string): DNUrlMapping; overload;
    function get_Item(index: Int32): DNUrlMapping; overload;
    procedure set_Item(index: Int32; value: DNUrlMapping);
    function get_Count: Int32;
    function get_EmitClear: Boolean;
    procedure set_EmitClear(value: Boolean);
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function GetKey(index: Int32): string;
    procedure Add(urlMapping: DNUrlMapping);
    procedure Remove(name: string); overload;
    procedure Remove(urlMapping: DNUrlMapping); overload;
    procedure RemoveAt(index: Int32);
    procedure Clear;
    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNConfigurationElement>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllKeys: TArray<string> read get_AllKeys;
    property Item[name: string]: DNUrlMapping read get_Item; default;
    property Item[index: Int32]: DNUrlMapping read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property EmitClear: Boolean read get_EmitClear write set_EmitClear;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property CollectionType: DDN.System.Configuration.DNConfigurationElementCollectionType read get_CollectionType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNUrlMappingCollection = class(TDNGenericImport<DNUrlMappingCollectionClass, DNUrlMappingCollection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAnonymousIdentificationSectionClass = interface(DNObjectClass)
  ['{AA4ECEB2-0288-5690-8CE3-DE415376646A}']
  { constructors } 

    {class} function init: DNAnonymousIdentificationSection;

  end;

  [DNTypeName('System.Web.Configuration.AnonymousIdentificationSection')]
  DNAnonymousIdentificationSection = interface(DNObject)
  ['{2AA2883E-06D3-3BF1-A162-6A22D8864BF7}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_CookieName: string;
    procedure set_CookieName(value: string);
    function get_CookieTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_CookieTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_CookiePath: string;
    procedure set_CookiePath(value: string);
    function get_CookieRequireSSL: Boolean;
    procedure set_CookieRequireSSL(value: Boolean);
    function get_CookieSlidingExpiration: Boolean;
    procedure set_CookieSlidingExpiration(value: Boolean);
    function get_CookieProtection: DNCookieProtection;
    procedure set_CookieProtection(value: DNCookieProtection);
    function get_Cookieless: DNHttpCookieMode;
    procedure set_Cookieless(value: DNHttpCookieMode);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property CookieName: string read get_CookieName write set_CookieName;
    property CookieTimeout: DDN.mscorlib.DNTimeSpan read get_CookieTimeout write set_CookieTimeout;
    property CookiePath: string read get_CookiePath write set_CookiePath;
    property CookieRequireSSL: Boolean read get_CookieRequireSSL write set_CookieRequireSSL;
    property CookieSlidingExpiration: Boolean read get_CookieSlidingExpiration write set_CookieSlidingExpiration;
    property CookieProtection: DNCookieProtection read get_CookieProtection write set_CookieProtection;
    property Cookieless: DNHttpCookieMode read get_Cookieless write set_Cookieless;
    property Domain: string read get_Domain write set_Domain;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAnonymousIdentificationSection = class(TDNGenericImport<DNAnonymousIdentificationSectionClass, DNAnonymousIdentificationSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAuthenticationSectionClass = interface(DNObjectClass)
  ['{94CD452C-46D8-5621-A930-159508FE55CE}']
  { constructors } 

    {class} function init: DNAuthenticationSection;

  end;

  [DNTypeName('System.Web.Configuration.AuthenticationSection')]
  DNAuthenticationSection = interface(DNObject)
  ['{DA3FC1DA-F3DF-3152-8689-3113B8552D7A}']
  { getters & setters } 

    function get_Forms: DNFormsAuthenticationConfiguration;
    function get_Passport: DNPassportAuthentication;
    function get_Mode: DNAuthenticationMode;
    procedure set_Mode(value: DNAuthenticationMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Forms: DNFormsAuthenticationConfiguration read get_Forms;
    property Passport: DNPassportAuthentication read get_Passport;
    property Mode: DNAuthenticationMode read get_Mode write set_Mode;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthenticationSection = class(TDNGenericImport<DNAuthenticationSectionClass, DNAuthenticationSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAuthorizationSectionClass = interface(DNObjectClass)
  ['{3316DF7B-3593-57B0-B340-3AFD811B87F7}']
  { constructors } 

    {class} function init: DNAuthorizationSection;

  end;

  [DNTypeName('System.Web.Configuration.AuthorizationSection')]
  DNAuthorizationSection = interface(DNObject)
  ['{0743CD04-840F-30C5-9F45-A9CEDB3B8509}']
  { getters & setters } 

    function get_Rules: DNAuthorizationRuleCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rules: DNAuthorizationRuleCollection read get_Rules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthorizationSection = class(TDNGenericImport<DNAuthorizationSectionClass, DNAuthorizationSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCacheSectionClass = interface(DNObjectClass)
  ['{B6512FE5-EDB7-5D14-A8DC-9196D433952D}']
  { constructors } 

    {class} function init: DNCacheSection;

  end;

  [DNTypeName('System.Web.Configuration.CacheSection')]
  DNCacheSection = interface(DNObject)
  ['{0AFD6832-3676-3FC2-9949-00CE0A0455B4}']
  { getters & setters } 

    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_DisableMemoryCollection: Boolean;
    procedure set_DisableMemoryCollection(value: Boolean);
    function get_DisableExpiration: Boolean;
    procedure set_DisableExpiration(value: Boolean);
    function get_PrivateBytesLimit: Int64;
    procedure set_PrivateBytesLimit(value: Int64);
    function get_PercentagePhysicalMemoryUsedLimit: Int32;
    procedure set_PercentagePhysicalMemoryUsedLimit(value: Int32);
    function get_PrivateBytesPollTime: DDN.mscorlib.DNTimeSpan;
    procedure set_PrivateBytesPollTime(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property DisableMemoryCollection: Boolean read get_DisableMemoryCollection write set_DisableMemoryCollection;
    property DisableExpiration: Boolean read get_DisableExpiration write set_DisableExpiration;
    property PrivateBytesLimit: Int64 read get_PrivateBytesLimit write set_PrivateBytesLimit;
    property PercentagePhysicalMemoryUsedLimit: Int32 read get_PercentagePhysicalMemoryUsedLimit write set_PercentagePhysicalMemoryUsedLimit;
    property PrivateBytesPollTime: DDN.mscorlib.DNTimeSpan read get_PrivateBytesPollTime write set_PrivateBytesPollTime;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCacheSection = class(TDNGenericImport<DNCacheSectionClass, DNCacheSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNClientTargetSectionClass = interface(DNObjectClass)
  ['{3BA47E8E-6C4A-540C-AD44-F35C4681DFDD}']
  { constructors } 

    {class} function init: DNClientTargetSection;

  end;

  [DNTypeName('System.Web.Configuration.ClientTargetSection')]
  DNClientTargetSection = interface(DNObject)
  ['{8365E32E-EF05-34CE-8965-4AE084D5DCF0}']
  { getters & setters } 

    function get_ClientTargets: DNClientTargetCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientTargets: DNClientTargetCollection read get_ClientTargets;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNClientTargetSection = class(TDNGenericImport<DNClientTargetSectionClass, DNClientTargetSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCompilationSectionClass = interface(DNObjectClass)
  ['{23F6FC62-2456-5DD1-AACE-64892A3801CC}']
  { constructors } 

    {class} function init: DNCompilationSection;

  end;

  [DNTypeName('System.Web.Configuration.CompilationSection')]
  DNCompilationSection = interface(DNObject)
  ['{54F6A534-5CB8-3CB7-963D-4110F051CB49}']
  { getters & setters } 

    function get_TempDirectory: string;
    procedure set_TempDirectory(value: string);
    function get_Debug: Boolean;
    procedure set_Debug(value: Boolean);
    function get_Strict: Boolean;
    procedure set_Strict(value: Boolean);
    function get_Explicit: Boolean;
    procedure set_Explicit(value: Boolean);
    function get_Batch: Boolean;
    procedure set_Batch(value: Boolean);
    function get_OptimizeCompilations: Boolean;
    procedure set_OptimizeCompilations(value: Boolean);
    function get_UrlLinePragmas: Boolean;
    procedure set_UrlLinePragmas(value: Boolean);
    function get_BatchTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_BatchTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_MaxBatchSize: Int32;
    procedure set_MaxBatchSize(value: Int32);
    function get_MaxBatchGeneratedFileSize: Int32;
    procedure set_MaxBatchGeneratedFileSize(value: Int32);
    function get_NumRecompilesBeforeAppRestart: Int32;
    procedure set_NumRecompilesBeforeAppRestart(value: Int32);
    function get_DefaultLanguage: string;
    procedure set_DefaultLanguage(value: string);
    function get_TargetFramework: string;
    procedure set_TargetFramework(value: string);
    function get_Compilers: DNCompilerCollection;
    function get_Assemblies: DNAssemblyCollection;
    function get_BuildProviders: DNBuildProviderCollection;
    function get_FolderLevelBuildProviders: DNFolderLevelBuildProviderCollection;
    function get_ExpressionBuilders: DNExpressionBuilderCollection;
    function get_AssemblyPostProcessorType: string;
    procedure set_AssemblyPostProcessorType(value: string);
    function get_CodeSubDirectories: DNCodeSubDirectoriesCollection;
    function get_EnablePrefetchOptimization: Boolean;
    procedure set_EnablePrefetchOptimization(value: Boolean);
    function get_ProfileGuidedOptimizations: DNProfileGuidedOptimizationsFlags;
    procedure set_ProfileGuidedOptimizations(value: DNProfileGuidedOptimizationsFlags);
    function get_ControlBuilderInterceptorType: string;
    procedure set_ControlBuilderInterceptorType(value: string);
    function get_DisableObsoleteWarnings: Boolean;
    procedure set_DisableObsoleteWarnings(value: Boolean);
    function get_MaxConcurrentCompilations: Int32;
    procedure set_MaxConcurrentCompilations(value: Int32);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TempDirectory: string read get_TempDirectory write set_TempDirectory;
    property Debug: Boolean read get_Debug write set_Debug;
    property &Strict: Boolean read get_Strict write set_Strict;
    property Explicit: Boolean read get_Explicit write set_Explicit;
    property Batch: Boolean read get_Batch write set_Batch;
    property OptimizeCompilations: Boolean read get_OptimizeCompilations write set_OptimizeCompilations;
    property UrlLinePragmas: Boolean read get_UrlLinePragmas write set_UrlLinePragmas;
    property BatchTimeout: DDN.mscorlib.DNTimeSpan read get_BatchTimeout write set_BatchTimeout;
    property MaxBatchSize: Int32 read get_MaxBatchSize write set_MaxBatchSize;
    property MaxBatchGeneratedFileSize: Int32 read get_MaxBatchGeneratedFileSize write set_MaxBatchGeneratedFileSize;
    property NumRecompilesBeforeAppRestart: Int32 read get_NumRecompilesBeforeAppRestart write set_NumRecompilesBeforeAppRestart;
    property DefaultLanguage: string read get_DefaultLanguage write set_DefaultLanguage;
    property TargetFramework: string read get_TargetFramework write set_TargetFramework;
    property Compilers: DNCompilerCollection read get_Compilers;
    property Assemblies: DNAssemblyCollection read get_Assemblies;
    property BuildProviders: DNBuildProviderCollection read get_BuildProviders;
    property FolderLevelBuildProviders: DNFolderLevelBuildProviderCollection read get_FolderLevelBuildProviders;
    property ExpressionBuilders: DNExpressionBuilderCollection read get_ExpressionBuilders;
    property AssemblyPostProcessorType: string read get_AssemblyPostProcessorType write set_AssemblyPostProcessorType;
    property CodeSubDirectories: DNCodeSubDirectoriesCollection read get_CodeSubDirectories;
    property EnablePrefetchOptimization: Boolean read get_EnablePrefetchOptimization write set_EnablePrefetchOptimization;
    property ProfileGuidedOptimizations: DNProfileGuidedOptimizationsFlags read get_ProfileGuidedOptimizations write set_ProfileGuidedOptimizations;
    property ControlBuilderInterceptorType: string read get_ControlBuilderInterceptorType write set_ControlBuilderInterceptorType;
    property DisableObsoleteWarnings: Boolean read get_DisableObsoleteWarnings write set_DisableObsoleteWarnings;
    property MaxConcurrentCompilations: Int32 read get_MaxConcurrentCompilations write set_MaxConcurrentCompilations;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCompilationSection = class(TDNGenericImport<DNCompilationSectionClass, DNCompilationSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCustomErrorsSectionClass = interface(DNObjectClass)
  ['{01AF463D-7872-5009-8E4D-1D3C2F44667D}']
  { constructors } 

    {class} function init: DNCustomErrorsSection;

  end;

  [DNTypeName('System.Web.Configuration.CustomErrorsSection')]
  DNCustomErrorsSection = interface(DNObject)
  ['{11CED565-291E-3D05-80EF-778807839501}']
  { getters & setters } 

    function get_AllowNestedErrors: Boolean;
    procedure set_AllowNestedErrors(value: Boolean);
    function get_DefaultRedirect: string;
    procedure set_DefaultRedirect(value: string);
    function get_RedirectMode: DNCustomErrorsRedirectMode;
    procedure set_RedirectMode(value: DNCustomErrorsRedirectMode);
    function get_Mode: DNCustomErrorsMode;
    procedure set_Mode(value: DNCustomErrorsMode);
    function get_Errors: DNCustomErrorCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowNestedErrors: Boolean read get_AllowNestedErrors write set_AllowNestedErrors;
    property DefaultRedirect: string read get_DefaultRedirect write set_DefaultRedirect;
    property RedirectMode: DNCustomErrorsRedirectMode read get_RedirectMode write set_RedirectMode;
    property Mode: DNCustomErrorsMode read get_Mode write set_Mode;
    property Errors: DNCustomErrorCollection read get_Errors;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCustomErrorsSection = class(TDNGenericImport<DNCustomErrorsSectionClass, DNCustomErrorsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNDeploymentSectionClass = interface(DNObjectClass)
  ['{F3BC2622-8477-5C44-8974-89B84199643D}']
  { constructors } 

    {class} function init: DNDeploymentSection;

  end;

  [DNTypeName('System.Web.Configuration.DeploymentSection')]
  DNDeploymentSection = interface(DNObject)
  ['{212E56FD-0A6D-38D0-A7AF-C707ADFCCB47}']
  { getters & setters } 

    function get_Retail: Boolean;
    procedure set_Retail(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Retail: Boolean read get_Retail write set_Retail;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNDeploymentSection = class(TDNGenericImport<DNDeploymentSectionClass, DNDeploymentSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFullTrustAssembliesSectionClass = interface(DNObjectClass)
  ['{E5AABBD1-958C-5375-9E3A-39B5EB759EA9}']
  { constructors } 

    {class} function init: DNFullTrustAssembliesSection;

  end;

  [DNTypeName('System.Web.Configuration.FullTrustAssembliesSection')]
  DNFullTrustAssembliesSection = interface(DNObject)
  ['{C7B523EE-8D7F-3663-AC3A-E3CBE58C9BAF}']
  { getters & setters } 

    function get_FullTrustAssemblies: DNFullTrustAssemblyCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FullTrustAssemblies: DNFullTrustAssemblyCollection read get_FullTrustAssemblies;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFullTrustAssembliesSection = class(TDNGenericImport<DNFullTrustAssembliesSectionClass, DNFullTrustAssembliesSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNGlobalizationSectionClass = interface(DNObjectClass)
  ['{7AD697AC-B54A-54DA-9135-F409F1504E99}']
  { constructors } 

    {class} function init: DNGlobalizationSection;

  end;

  [DNTypeName('System.Web.Configuration.GlobalizationSection')]
  DNGlobalizationSection = interface(DNObject)
  ['{4C970F69-64C1-31F9-9E48-C312DE25387E}']
  { getters & setters } 

    function get_RequestEncoding: DDN.mscorlib.DNEncoding;
    procedure set_RequestEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ResponseEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ResponseEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ResponseHeaderEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ResponseHeaderEncoding(value: DDN.mscorlib.DNEncoding);
    function get_FileEncoding: DDN.mscorlib.DNEncoding;
    procedure set_FileEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Culture: string;
    procedure set_Culture(value: string);
    function get_UICulture: string;
    procedure set_UICulture(value: string);
    function get_EnableClientBasedCulture: Boolean;
    procedure set_EnableClientBasedCulture(value: Boolean);
    function get_ResourceProviderFactoryType: string;
    procedure set_ResourceProviderFactoryType(value: string);
    function get_EnableBestFitResponseEncoding: Boolean;
    procedure set_EnableBestFitResponseEncoding(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestEncoding: DDN.mscorlib.DNEncoding read get_RequestEncoding write set_RequestEncoding;
    property ResponseEncoding: DDN.mscorlib.DNEncoding read get_ResponseEncoding write set_ResponseEncoding;
    property ResponseHeaderEncoding: DDN.mscorlib.DNEncoding read get_ResponseHeaderEncoding write set_ResponseHeaderEncoding;
    property FileEncoding: DDN.mscorlib.DNEncoding read get_FileEncoding write set_FileEncoding;
    property Culture: string read get_Culture write set_Culture;
    property UICulture: string read get_UICulture write set_UICulture;
    property EnableClientBasedCulture: Boolean read get_EnableClientBasedCulture write set_EnableClientBasedCulture;
    property ResourceProviderFactoryType: string read get_ResourceProviderFactoryType write set_ResourceProviderFactoryType;
    property EnableBestFitResponseEncoding: Boolean read get_EnableBestFitResponseEncoding write set_EnableBestFitResponseEncoding;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNGlobalizationSection = class(TDNGenericImport<DNGlobalizationSectionClass, DNGlobalizationSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHealthMonitoringSectionClass = interface(DNObjectClass)
  ['{D49347AE-9B09-570B-822D-4FF301AD1363}']
  { constructors } 

    {class} function init: DNHealthMonitoringSection;

  end;

  [DNTypeName('System.Web.Configuration.HealthMonitoringSection')]
  DNHealthMonitoringSection = interface(DNObject)
  ['{51CD8522-11B4-3008-8C72-6A9F3D215440}']
  { getters & setters } 

    function get_HeartbeatInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_HeartbeatInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_BufferModes: DNBufferModesCollection;
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_Profiles: DNProfileSettingsCollection;
    function get_Rules: DNRuleSettingsCollection;
    function get_EventMappings: DNEventMappingSettingsCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeartbeatInterval: DDN.mscorlib.DNTimeSpan read get_HeartbeatInterval write set_HeartbeatInterval;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property BufferModes: DNBufferModesCollection read get_BufferModes;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property Profiles: DNProfileSettingsCollection read get_Profiles;
    property Rules: DNRuleSettingsCollection read get_Rules;
    property EventMappings: DNEventMappingSettingsCollection read get_EventMappings;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHealthMonitoringSection = class(TDNGenericImport<DNHealthMonitoringSectionClass, DNHealthMonitoringSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHostingEnvironmentSectionClass = interface(DNObjectClass)
  ['{F62661B9-8DE4-5296-8D81-87C98F63949C}']
  { constructors } 

    {class} function init: DNHostingEnvironmentSection;

  end;

  [DNTypeName('System.Web.Configuration.HostingEnvironmentSection')]
  DNHostingEnvironmentSection = interface(DNObject)
  ['{09D801FC-D241-322B-971C-9F41F5C5C3F2}']
  { getters & setters } 

    function get_ShutdownTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_ShutdownTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_IdleTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_IdleTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_ShadowCopyBinAssemblies: Boolean;
    procedure set_ShadowCopyBinAssemblies(value: Boolean);
    function get_UrlMetadataSlidingExpiration: DDN.mscorlib.DNTimeSpan;
    procedure set_UrlMetadataSlidingExpiration(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShutdownTimeout: DDN.mscorlib.DNTimeSpan read get_ShutdownTimeout write set_ShutdownTimeout;
    property IdleTimeout: DDN.mscorlib.DNTimeSpan read get_IdleTimeout write set_IdleTimeout;
    property ShadowCopyBinAssemblies: Boolean read get_ShadowCopyBinAssemblies write set_ShadowCopyBinAssemblies;
    property UrlMetadataSlidingExpiration: DDN.mscorlib.DNTimeSpan read get_UrlMetadataSlidingExpiration write set_UrlMetadataSlidingExpiration;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHostingEnvironmentSection = class(TDNGenericImport<DNHostingEnvironmentSectionClass, DNHostingEnvironmentSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpCookiesSectionClass = interface(DNObjectClass)
  ['{D6C5C9BF-96DD-542E-A75A-6DD68E015586}']
  { constructors } 

    {class} function init: DNHttpCookiesSection;

  end;

  [DNTypeName('System.Web.Configuration.HttpCookiesSection')]
  DNHttpCookiesSection = interface(DNObject)
  ['{D3BB5D1D-2BD5-34A4-B678-B67FCC35F28C}']
  { getters & setters } 

    function get_HttpOnlyCookies: Boolean;
    procedure set_HttpOnlyCookies(value: Boolean);
    function get_RequireSSL: Boolean;
    procedure set_RequireSSL(value: Boolean);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_SameSite: DNSameSiteMode;
    procedure set_SameSite(value: DNSameSiteMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HttpOnlyCookies: Boolean read get_HttpOnlyCookies write set_HttpOnlyCookies;
    property RequireSSL: Boolean read get_RequireSSL write set_RequireSSL;
    property Domain: string read get_Domain write set_Domain;
    property SameSite: DNSameSiteMode read get_SameSite write set_SameSite;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpCookiesSection = class(TDNGenericImport<DNHttpCookiesSectionClass, DNHttpCookiesSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpHandlersSectionClass = interface(DNObjectClass)
  ['{E9D62E8A-2404-5AF6-AC39-DD07AD2BC4F1}']
  { constructors } 

    {class} function init: DNHttpHandlersSection;

  end;

  [DNTypeName('System.Web.Configuration.HttpHandlersSection')]
  DNHttpHandlersSection = interface(DNObject)
  ['{F9C9E665-75AB-34DD-8EE6-4D90F852693B}']
  { getters & setters } 

    function get_Handlers: DNHttpHandlerActionCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Handlers: DNHttpHandlerActionCollection read get_Handlers;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpHandlersSection = class(TDNGenericImport<DNHttpHandlersSectionClass, DNHttpHandlersSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpModulesSectionClass = interface(DNObjectClass)
  ['{892D8507-6154-52A5-8523-1E0072018107}']
  { constructors } 

    {class} function init: DNHttpModulesSection;

  end;

  [DNTypeName('System.Web.Configuration.HttpModulesSection')]
  DNHttpModulesSection = interface(DNObject)
  ['{B19BF53D-F039-367E-B03F-815F8E13592B}']
  { getters & setters } 

    function get_Modules: DNHttpModuleActionCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Modules: DNHttpModuleActionCollection read get_Modules;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpModulesSection = class(TDNGenericImport<DNHttpModulesSectionClass, DNHttpModulesSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpRuntimeSectionClass = interface(DNObjectClass)
  ['{DF598F48-2D8F-50AE-B80B-4F80ED4AFCF0}']
  { constructors } 

    {class} function init: DNHttpRuntimeSection;

  end;

  [DNTypeName('System.Web.Configuration.HttpRuntimeSection')]
  DNHttpRuntimeSection = interface(DNObject)
  ['{82CA7436-F52C-33BC-A2DB-209B2D79F730}']
  { getters & setters } 

    function get_AsyncPreloadMode: DNAsyncPreloadModeFlags;
    procedure set_AsyncPreloadMode(value: DNAsyncPreloadModeFlags);
    function get_FcnMode: DNFcnMode;
    procedure set_FcnMode(value: DNFcnMode);
    function get_ExecutionTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_ExecutionTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_MaxRequestLength: Int32;
    procedure set_MaxRequestLength(value: Int32);
    function get_RequestLengthDiskThreshold: Int32;
    procedure set_RequestLengthDiskThreshold(value: Int32);
    function get_UseFullyQualifiedRedirectUrl: Boolean;
    procedure set_UseFullyQualifiedRedirectUrl(value: Boolean);
    function get_MinFreeThreads: Int32;
    procedure set_MinFreeThreads(value: Int32);
    function get_MinLocalRequestFreeThreads: Int32;
    procedure set_MinLocalRequestFreeThreads(value: Int32);
    function get_AppRequestQueueLimit: Int32;
    procedure set_AppRequestQueueLimit(value: Int32);
    function get_EnableKernelOutputCache: Boolean;
    procedure set_EnableKernelOutputCache(value: Boolean);
    function get_EnableVersionHeader: Boolean;
    procedure set_EnableVersionHeader(value: Boolean);
    function get_ApartmentThreading: Boolean;
    procedure set_ApartmentThreading(value: Boolean);
    function get_RequireRootedSaveAsPath: Boolean;
    procedure set_RequireRootedSaveAsPath(value: Boolean);
    function get_Enable: Boolean;
    procedure set_Enable(value: Boolean);
    function get_TargetFramework: string;
    procedure set_TargetFramework(value: string);
    function get_SendCacheControlHeader: Boolean;
    procedure set_SendCacheControlHeader(value: Boolean);
    function get_DefaultRegexMatchTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_DefaultRegexMatchTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_ShutdownTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_ShutdownTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_DelayNotificationTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_DelayNotificationTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_WaitChangeNotification: Int32;
    procedure set_WaitChangeNotification(value: Int32);
    function get_MaxWaitChangeNotification: Int32;
    procedure set_MaxWaitChangeNotification(value: Int32);
    function get_EnableHeaderChecking: Boolean;
    procedure set_EnableHeaderChecking(value: Boolean);
    function get_EncoderType: string;
    procedure set_EncoderType(value: string);
    function get_RequestValidationMode: DDN.mscorlib.DNVersion;
    procedure set_RequestValidationMode(value: DDN.mscorlib.DNVersion);
    function get_RequestValidationType: string;
    procedure set_RequestValidationType(value: string);
    function get_RequestPathInvalidCharacters: string;
    procedure set_RequestPathInvalidCharacters(value: string);
    function get_MaxUrlLength: Int32;
    procedure set_MaxUrlLength(value: Int32);
    function get_MaxQueryStringLength: Int32;
    procedure set_MaxQueryStringLength(value: Int32);
    function get_RelaxedUrlToFileSystemMapping: Boolean;
    procedure set_RelaxedUrlToFileSystemMapping(value: Boolean);
    function get_AllowDynamicModuleRegistration: Boolean;
    procedure set_AllowDynamicModuleRegistration(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AsyncPreloadMode: DNAsyncPreloadModeFlags read get_AsyncPreloadMode write set_AsyncPreloadMode;
    property FcnMode: DNFcnMode read get_FcnMode write set_FcnMode;
    property ExecutionTimeout: DDN.mscorlib.DNTimeSpan read get_ExecutionTimeout write set_ExecutionTimeout;
    property MaxRequestLength: Int32 read get_MaxRequestLength write set_MaxRequestLength;
    property RequestLengthDiskThreshold: Int32 read get_RequestLengthDiskThreshold write set_RequestLengthDiskThreshold;
    property UseFullyQualifiedRedirectUrl: Boolean read get_UseFullyQualifiedRedirectUrl write set_UseFullyQualifiedRedirectUrl;
    property MinFreeThreads: Int32 read get_MinFreeThreads write set_MinFreeThreads;
    property MinLocalRequestFreeThreads: Int32 read get_MinLocalRequestFreeThreads write set_MinLocalRequestFreeThreads;
    property AppRequestQueueLimit: Int32 read get_AppRequestQueueLimit write set_AppRequestQueueLimit;
    property EnableKernelOutputCache: Boolean read get_EnableKernelOutputCache write set_EnableKernelOutputCache;
    property EnableVersionHeader: Boolean read get_EnableVersionHeader write set_EnableVersionHeader;
    property ApartmentThreading: Boolean read get_ApartmentThreading write set_ApartmentThreading;
    property RequireRootedSaveAsPath: Boolean read get_RequireRootedSaveAsPath write set_RequireRootedSaveAsPath;
    property Enable: Boolean read get_Enable write set_Enable;
    property TargetFramework: string read get_TargetFramework write set_TargetFramework;
    property SendCacheControlHeader: Boolean read get_SendCacheControlHeader write set_SendCacheControlHeader;
    property DefaultRegexMatchTimeout: DDN.mscorlib.DNTimeSpan read get_DefaultRegexMatchTimeout write set_DefaultRegexMatchTimeout;
    property ShutdownTimeout: DDN.mscorlib.DNTimeSpan read get_ShutdownTimeout write set_ShutdownTimeout;
    property DelayNotificationTimeout: DDN.mscorlib.DNTimeSpan read get_DelayNotificationTimeout write set_DelayNotificationTimeout;
    property WaitChangeNotification: Int32 read get_WaitChangeNotification write set_WaitChangeNotification;
    property MaxWaitChangeNotification: Int32 read get_MaxWaitChangeNotification write set_MaxWaitChangeNotification;
    property EnableHeaderChecking: Boolean read get_EnableHeaderChecking write set_EnableHeaderChecking;
    property EncoderType: string read get_EncoderType write set_EncoderType;
    property RequestValidationMode: DDN.mscorlib.DNVersion read get_RequestValidationMode write set_RequestValidationMode;
    property RequestValidationType: string read get_RequestValidationType write set_RequestValidationType;
    property RequestPathInvalidCharacters: string read get_RequestPathInvalidCharacters write set_RequestPathInvalidCharacters;
    property MaxUrlLength: Int32 read get_MaxUrlLength write set_MaxUrlLength;
    property MaxQueryStringLength: Int32 read get_MaxQueryStringLength write set_MaxQueryStringLength;
    property RelaxedUrlToFileSystemMapping: Boolean read get_RelaxedUrlToFileSystemMapping write set_RelaxedUrlToFileSystemMapping;
    property AllowDynamicModuleRegistration: Boolean read get_AllowDynamicModuleRegistration write set_AllowDynamicModuleRegistration;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpRuntimeSection = class(TDNGenericImport<DNHttpRuntimeSectionClass, DNHttpRuntimeSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNIdentitySectionClass = interface(DNObjectClass)
  ['{F855CCE8-0E7E-539B-8CB1-5294E603A169}']
  { constructors } 

    {class} function init: DNIdentitySection;

  end;

  [DNTypeName('System.Web.Configuration.IdentitySection')]
  DNIdentitySection = interface(DNObject)
  ['{35C37037-34E1-34F7-9255-8B7B29BDDAC7}']
  { getters & setters } 

    function get_Impersonate: Boolean;
    procedure set_Impersonate(value: Boolean);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Impersonate: Boolean read get_Impersonate write set_Impersonate;
    property UserName: string read get_UserName write set_UserName;
    property Password: string read get_Password write set_Password;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIdentitySection = class(TDNGenericImport<DNIdentitySectionClass, DNIdentitySection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNMachineKeySectionClass = interface(DNObjectClass)
  ['{22EF19EA-9A7B-5F20-81ED-0CBAE38C7D94}']
  { constructors } 

    {class} function init: DNMachineKeySection;

  end;

  [DNTypeName('System.Web.Configuration.MachineKeySection')]
  DNMachineKeySection = interface(DNObject)
  ['{057728D7-2A32-37C0-B621-6FD64939C575}']
  { getters & setters } 

    function get_ValidationKey: string;
    procedure set_ValidationKey(value: string);
    function get_DecryptionKey: string;
    procedure set_DecryptionKey(value: string);
    function get_Decryption: string;
    procedure set_Decryption(value: string);
    function get_ValidationAlgorithm: string;
    procedure set_ValidationAlgorithm(value: string);
    function get_Validation: DNMachineKeyValidation;
    procedure set_Validation(value: DNMachineKeyValidation);
    function get_DataProtectorType: string;
    procedure set_DataProtectorType(value: string);
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_CompatibilityMode: DNMachineKeyCompatibilityMode;
    procedure set_CompatibilityMode(value: DNMachineKeyCompatibilityMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValidationKey: string read get_ValidationKey write set_ValidationKey;
    property DecryptionKey: string read get_DecryptionKey write set_DecryptionKey;
    property Decryption: string read get_Decryption write set_Decryption;
    property ValidationAlgorithm: string read get_ValidationAlgorithm write set_ValidationAlgorithm;
    property Validation: DNMachineKeyValidation read get_Validation write set_Validation;
    property DataProtectorType: string read get_DataProtectorType write set_DataProtectorType;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property CompatibilityMode: DNMachineKeyCompatibilityMode read get_CompatibilityMode write set_CompatibilityMode;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNMachineKeySection = class(TDNGenericImport<DNMachineKeySectionClass, DNMachineKeySection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNMembershipSectionClass = interface(DNObjectClass)
  ['{1191CDB3-4E6B-5AF1-B408-A2DD74AFB963}']
  { constructors } 

    {class} function init: DNMembershipSection;

  end;

  [DNTypeName('System.Web.Configuration.MembershipSection')]
  DNMembershipSection = interface(DNObject)
  ['{F8C50929-790D-3C03-85FD-9F4152D87B87}']
  { getters & setters } 

    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_HashAlgorithmType: string;
    procedure set_HashAlgorithmType(value: string);
    function get_UserIsOnlineTimeWindow: DDN.mscorlib.DNTimeSpan;
    procedure set_UserIsOnlineTimeWindow(value: DDN.mscorlib.DNTimeSpan);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property HashAlgorithmType: string read get_HashAlgorithmType write set_HashAlgorithmType;
    property UserIsOnlineTimeWindow: DDN.mscorlib.DNTimeSpan read get_UserIsOnlineTimeWindow write set_UserIsOnlineTimeWindow;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNMembershipSection = class(TDNGenericImport<DNMembershipSectionClass, DNMembershipSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNOutputCacheSectionClass = interface(DNObjectClass)
  ['{C6DB8C40-7CDC-5E37-B6CF-601AF1AB00DE}']
  { constructors } 

    {class} function init: DNOutputCacheSection;

  end;

  [DNTypeName('System.Web.Configuration.OutputCacheSection')]
  DNOutputCacheSection = interface(DNObject)
  ['{3C3D0296-9179-3096-AD7A-9CA01225D297}']
  { getters & setters } 

    function get_EnableOutputCache: Boolean;
    procedure set_EnableOutputCache(value: Boolean);
    function get_EnableFragmentCache: Boolean;
    procedure set_EnableFragmentCache(value: Boolean);
    function get_SendCacheControlHeader: Boolean;
    procedure set_SendCacheControlHeader(value: Boolean);
    function get_OmitVaryStar: Boolean;
    procedure set_OmitVaryStar(value: Boolean);
    function get_EnableKernelCacheForVaryByStar: Boolean;
    procedure set_EnableKernelCacheForVaryByStar(value: Boolean);
    function get_DefaultProviderName: string;
    procedure set_DefaultProviderName(value: string);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableOutputCache: Boolean read get_EnableOutputCache write set_EnableOutputCache;
    property EnableFragmentCache: Boolean read get_EnableFragmentCache write set_EnableFragmentCache;
    property SendCacheControlHeader: Boolean read get_SendCacheControlHeader write set_SendCacheControlHeader;
    property OmitVaryStar: Boolean read get_OmitVaryStar write set_OmitVaryStar;
    property EnableKernelCacheForVaryByStar: Boolean read get_EnableKernelCacheForVaryByStar write set_EnableKernelCacheForVaryByStar;
    property DefaultProviderName: string read get_DefaultProviderName write set_DefaultProviderName;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNOutputCacheSection = class(TDNGenericImport<DNOutputCacheSectionClass, DNOutputCacheSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNOutputCacheSettingsSectionClass = interface(DNObjectClass)
  ['{A9E053A9-6908-5FC4-81E9-DF7CB60F3C4B}']
  { constructors } 

    {class} function init: DNOutputCacheSettingsSection;

  end;

  [DNTypeName('System.Web.Configuration.OutputCacheSettingsSection')]
  DNOutputCacheSettingsSection = interface(DNObject)
  ['{EA3789D3-4CE5-318A-ACEC-506C9A958302}']
  { getters & setters } 

    function get_OutputCacheProfiles: DNOutputCacheProfileCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OutputCacheProfiles: DNOutputCacheProfileCollection read get_OutputCacheProfiles;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNOutputCacheSettingsSection = class(TDNGenericImport<DNOutputCacheSettingsSectionClass, DNOutputCacheSettingsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNPagesSectionClass = interface(DNObjectClass)
  ['{528F75FD-FFAF-5059-A5D4-1B7822E528AF}']
  { constructors } 

    {class} function init: DNPagesSection;

  end;

  [DNTypeName('System.Web.Configuration.PagesSection')]
  DNPagesSection = interface(DNObject)
  ['{4E9EA579-8517-36F3-BAFC-4D0A93E0F89F}']
  { getters & setters } 

    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_EnableSessionState: DNPagesEnableSessionState;
    procedure set_EnableSessionState(value: DNPagesEnableSessionState);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_EnableViewStateMac: Boolean;
    procedure set_EnableViewStateMac(value: Boolean);
    function get_EnableEventValidation: Boolean;
    procedure set_EnableEventValidation(value: Boolean);
    function get_SmartNavigation: Boolean;
    procedure set_SmartNavigation(value: Boolean);
    function get_AutoEventWireup: Boolean;
    procedure set_AutoEventWireup(value: Boolean);
    function get_MaintainScrollPositionOnPostBack: Boolean;
    procedure set_MaintainScrollPositionOnPostBack(value: Boolean);
    function get_PageBaseType: string;
    procedure set_PageBaseType(value: string);
    function get_UserControlBaseType: string;
    procedure set_UserControlBaseType(value: string);
    function get_PageParserFilterType: string;
    procedure set_PageParserFilterType(value: string);
    function get_ValidateRequest: Boolean;
    procedure set_ValidateRequest(value: Boolean);
    function get_MasterPageFile: string;
    procedure set_MasterPageFile(value: string);
    function get_Theme: string;
    procedure set_Theme(value: string);
    function get_StyleSheetTheme: string;
    procedure set_StyleSheetTheme(value: string);
    function get_Namespaces: DNNamespaceCollection;
    function get_Controls: DNTagPrefixCollection;
    function get_MaxPageStateFieldLength: Int32;
    procedure set_MaxPageStateFieldLength(value: Int32);
    function get_TagMapping: DNTagMapCollection;
    function get_CompilationMode: DNCompilationMode;
    procedure set_CompilationMode(value: DNCompilationMode);
    function get_ViewStateEncryptionMode: DNViewStateEncryptionMode;
    procedure set_ViewStateEncryptionMode(value: DNViewStateEncryptionMode);
    function get_AsyncTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_AsyncTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_RenderAllHiddenFieldsAtTopOfForm: Boolean;
    procedure set_RenderAllHiddenFieldsAtTopOfForm(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ControlRenderingCompatibilityVersion: DDN.mscorlib.DNVersion;
    procedure set_ControlRenderingCompatibilityVersion(value: DDN.mscorlib.DNVersion);
    function get_IgnoreDeviceFilters: DNIgnoreDeviceFilterElementCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Buffer: Boolean read get_Buffer write set_Buffer;
    property EnableSessionState: DNPagesEnableSessionState read get_EnableSessionState write set_EnableSessionState;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property EnableViewStateMac: Boolean read get_EnableViewStateMac write set_EnableViewStateMac;
    property EnableEventValidation: Boolean read get_EnableEventValidation write set_EnableEventValidation;
    property SmartNavigation: Boolean read get_SmartNavigation write set_SmartNavigation;
    property AutoEventWireup: Boolean read get_AutoEventWireup write set_AutoEventWireup;
    property MaintainScrollPositionOnPostBack: Boolean read get_MaintainScrollPositionOnPostBack write set_MaintainScrollPositionOnPostBack;
    property PageBaseType: string read get_PageBaseType write set_PageBaseType;
    property UserControlBaseType: string read get_UserControlBaseType write set_UserControlBaseType;
    property PageParserFilterType: string read get_PageParserFilterType write set_PageParserFilterType;
    property ValidateRequest: Boolean read get_ValidateRequest write set_ValidateRequest;
    property MasterPageFile: string read get_MasterPageFile write set_MasterPageFile;
    property Theme: string read get_Theme write set_Theme;
    property StyleSheetTheme: string read get_StyleSheetTheme write set_StyleSheetTheme;
    property Namespaces: DNNamespaceCollection read get_Namespaces;
    property Controls: DNTagPrefixCollection read get_Controls;
    property MaxPageStateFieldLength: Int32 read get_MaxPageStateFieldLength write set_MaxPageStateFieldLength;
    property TagMapping: DNTagMapCollection read get_TagMapping;
    property CompilationMode: DNCompilationMode read get_CompilationMode write set_CompilationMode;
    property ViewStateEncryptionMode: DNViewStateEncryptionMode read get_ViewStateEncryptionMode write set_ViewStateEncryptionMode;
    property AsyncTimeout: DDN.mscorlib.DNTimeSpan read get_AsyncTimeout write set_AsyncTimeout;
    property RenderAllHiddenFieldsAtTopOfForm: Boolean read get_RenderAllHiddenFieldsAtTopOfForm write set_RenderAllHiddenFieldsAtTopOfForm;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ControlRenderingCompatibilityVersion: DDN.mscorlib.DNVersion read get_ControlRenderingCompatibilityVersion write set_ControlRenderingCompatibilityVersion;
    property IgnoreDeviceFilters: DNIgnoreDeviceFilterElementCollection read get_IgnoreDeviceFilters;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPagesSection = class(TDNGenericImport<DNPagesSectionClass, DNPagesSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNPartialTrustVisibleAssembliesSectionClass = interface(DNObjectClass)
  ['{C6579D96-D59D-56BC-8751-8A219F760E67}']
  { constructors } 

    {class} function init: DNPartialTrustVisibleAssembliesSection;

  end;

  [DNTypeName('System.Web.Configuration.PartialTrustVisibleAssembliesSection')]
  DNPartialTrustVisibleAssembliesSection = interface(DNObject)
  ['{0A8747C7-2E80-39FF-B666-1496C9178255}']
  { getters & setters } 

    function get_PartialTrustVisibleAssemblies: DNPartialTrustVisibleAssemblyCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PartialTrustVisibleAssemblies: DNPartialTrustVisibleAssemblyCollection read get_PartialTrustVisibleAssemblies;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPartialTrustVisibleAssembliesSection = class(TDNGenericImport<DNPartialTrustVisibleAssembliesSectionClass, DNPartialTrustVisibleAssembliesSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProcessModelSectionClass = interface(DNObjectClass)
  ['{D2FC073B-F788-50E7-957C-06BE58567E5A}']
  { constructors } 

    {class} function init: DNProcessModelSection;

  end;

  [DNTypeName('System.Web.Configuration.ProcessModelSection')]
  DNProcessModelSection = interface(DNObject)
  ['{4E040CF3-D40B-35AB-82C1-2FADE1DDFD84}']
  { getters & setters } 

    function get_Enable: Boolean;
    procedure set_Enable(value: Boolean);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);
    function get_IdleTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_IdleTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_ShutdownTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_ShutdownTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_RequestLimit: Int32;
    procedure set_RequestLimit(value: Int32);
    function get_RequestQueueLimit: Int32;
    procedure set_RequestQueueLimit(value: Int32);
    function get_RestartQueueLimit: Int32;
    procedure set_RestartQueueLimit(value: Int32);
    function get_MemoryLimit: Int32;
    procedure set_MemoryLimit(value: Int32);
    function get_WebGarden: Boolean;
    procedure set_WebGarden(value: Boolean);
    function get_CpuMask: Int32;
    procedure set_CpuMask(value: Int32);
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_LogLevel: DNProcessModelLogLevel;
    procedure set_LogLevel(value: DNProcessModelLogLevel);
    function get_ClientConnectedCheck: DDN.mscorlib.DNTimeSpan;
    procedure set_ClientConnectedCheck(value: DDN.mscorlib.DNTimeSpan);
    function get_ComAuthenticationLevel: DNProcessModelComAuthenticationLevel;
    procedure set_ComAuthenticationLevel(value: DNProcessModelComAuthenticationLevel);
    function get_ComImpersonationLevel: DNProcessModelComImpersonationLevel;
    procedure set_ComImpersonationLevel(value: DNProcessModelComImpersonationLevel);
    function get_ResponseDeadlockInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_ResponseDeadlockInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_ResponseRestartDeadlockInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_ResponseRestartDeadlockInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_AutoConfig: Boolean;
    procedure set_AutoConfig(value: Boolean);
    function get_MaxWorkerThreads: Int32;
    procedure set_MaxWorkerThreads(value: Int32);
    function get_MaxIOThreads: Int32;
    procedure set_MaxIOThreads(value: Int32);
    function get_MinWorkerThreads: Int32;
    procedure set_MinWorkerThreads(value: Int32);
    function get_MinIOThreads: Int32;
    procedure set_MinIOThreads(value: Int32);
    function get_ServerErrorMessageFile: string;
    procedure set_ServerErrorMessageFile(value: string);
    function get_PingFrequency: DDN.mscorlib.DNTimeSpan;
    procedure set_PingFrequency(value: DDN.mscorlib.DNTimeSpan);
    function get_PingTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_PingTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_MaxAppDomains: Int32;
    procedure set_MaxAppDomains(value: Int32);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enable: Boolean read get_Enable write set_Enable;
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
    property IdleTimeout: DDN.mscorlib.DNTimeSpan read get_IdleTimeout write set_IdleTimeout;
    property ShutdownTimeout: DDN.mscorlib.DNTimeSpan read get_ShutdownTimeout write set_ShutdownTimeout;
    property RequestLimit: Int32 read get_RequestLimit write set_RequestLimit;
    property RequestQueueLimit: Int32 read get_RequestQueueLimit write set_RequestQueueLimit;
    property RestartQueueLimit: Int32 read get_RestartQueueLimit write set_RestartQueueLimit;
    property MemoryLimit: Int32 read get_MemoryLimit write set_MemoryLimit;
    property WebGarden: Boolean read get_WebGarden write set_WebGarden;
    property CpuMask: Int32 read get_CpuMask write set_CpuMask;
    property UserName: string read get_UserName write set_UserName;
    property Password: string read get_Password write set_Password;
    property LogLevel: DNProcessModelLogLevel read get_LogLevel write set_LogLevel;
    property ClientConnectedCheck: DDN.mscorlib.DNTimeSpan read get_ClientConnectedCheck write set_ClientConnectedCheck;
    property ComAuthenticationLevel: DNProcessModelComAuthenticationLevel read get_ComAuthenticationLevel write set_ComAuthenticationLevel;
    property ComImpersonationLevel: DNProcessModelComImpersonationLevel read get_ComImpersonationLevel write set_ComImpersonationLevel;
    property ResponseDeadlockInterval: DDN.mscorlib.DNTimeSpan read get_ResponseDeadlockInterval write set_ResponseDeadlockInterval;
    property ResponseRestartDeadlockInterval: DDN.mscorlib.DNTimeSpan read get_ResponseRestartDeadlockInterval write set_ResponseRestartDeadlockInterval;
    property AutoConfig: Boolean read get_AutoConfig write set_AutoConfig;
    property MaxWorkerThreads: Int32 read get_MaxWorkerThreads write set_MaxWorkerThreads;
    property MaxIOThreads: Int32 read get_MaxIOThreads write set_MaxIOThreads;
    property MinWorkerThreads: Int32 read get_MinWorkerThreads write set_MinWorkerThreads;
    property MinIOThreads: Int32 read get_MinIOThreads write set_MinIOThreads;
    property ServerErrorMessageFile: string read get_ServerErrorMessageFile write set_ServerErrorMessageFile;
    property PingFrequency: DDN.mscorlib.DNTimeSpan read get_PingFrequency write set_PingFrequency;
    property PingTimeout: DDN.mscorlib.DNTimeSpan read get_PingTimeout write set_PingTimeout;
    property MaxAppDomains: Int32 read get_MaxAppDomains write set_MaxAppDomains;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProcessModelSection = class(TDNGenericImport<DNProcessModelSectionClass, DNProcessModelSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfileSectionClass = interface(DNObjectClass)
  ['{C7E73327-C248-5945-BAC8-1BC97DEC6C21}']
  { constructors } 

    {class} function init: DNProfileSection;

  end;

  [DNTypeName('System.Web.Configuration.ProfileSection')]
  DNProfileSection = interface(DNObject)
  ['{B38571B8-A744-3557-8CAF-9545B59F4119}']
  { getters & setters } 

    function get_AutomaticSaveEnabled: Boolean;
    procedure set_AutomaticSaveEnabled(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_Inherits: string;
    procedure set_Inherits(value: string);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_PropertySettings: DNRootProfilePropertySettingsCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutomaticSaveEnabled: Boolean read get_AutomaticSaveEnabled write set_AutomaticSaveEnabled;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property Inherits: string read get_Inherits write set_Inherits;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property PropertySettings: DNRootProfilePropertySettingsCollection read get_PropertySettings;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfileSection = class(TDNGenericImport<DNProfileSectionClass, DNProfileSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProtocolsSectionClass = interface(DNObjectClass)
  ['{4D33AAC0-1CBA-544A-BA5B-54A7FC037892}']
  { constructors } 

    {class} function init: DNProtocolsSection;

  end;

  [DNTypeName('System.Web.Configuration.ProtocolsSection')]
  DNProtocolsSection = interface(DNObject)
  ['{70198C00-D361-372A-A58A-5C504C8F4DE7}']
  { getters & setters } 

    function get_Protocols: DNProtocolCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Protocols: DNProtocolCollection read get_Protocols;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolsSection = class(TDNGenericImport<DNProtocolsSectionClass, DNProtocolsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRoleManagerSectionClass = interface(DNObjectClass)
  ['{D4143D77-8E71-565E-ADD5-9DEB16A104E7}']
  { constructors } 

    {class} function init: DNRoleManagerSection;

  end;

  [DNTypeName('System.Web.Configuration.RoleManagerSection')]
  DNRoleManagerSection = interface(DNObject)
  ['{188CD7D8-CF67-39AB-8CBA-74479B24E15D}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_CreatePersistentCookie: Boolean;
    procedure set_CreatePersistentCookie(value: Boolean);
    function get_CacheRolesInCookie: Boolean;
    procedure set_CacheRolesInCookie(value: Boolean);
    function get_CookieName: string;
    procedure set_CookieName(value: string);
    function get_CookieTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_CookieTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_CookiePath: string;
    procedure set_CookiePath(value: string);
    function get_CookieRequireSSL: Boolean;
    procedure set_CookieRequireSSL(value: Boolean);
    function get_CookieSlidingExpiration: Boolean;
    procedure set_CookieSlidingExpiration(value: Boolean);
    function get_CookieProtection: DNCookieProtection;
    procedure set_CookieProtection(value: DNCookieProtection);
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_MaxCachedResults: Int32;
    procedure set_MaxCachedResults(value: Int32);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property CreatePersistentCookie: Boolean read get_CreatePersistentCookie write set_CreatePersistentCookie;
    property CacheRolesInCookie: Boolean read get_CacheRolesInCookie write set_CacheRolesInCookie;
    property CookieName: string read get_CookieName write set_CookieName;
    property CookieTimeout: DDN.mscorlib.DNTimeSpan read get_CookieTimeout write set_CookieTimeout;
    property CookiePath: string read get_CookiePath write set_CookiePath;
    property CookieRequireSSL: Boolean read get_CookieRequireSSL write set_CookieRequireSSL;
    property CookieSlidingExpiration: Boolean read get_CookieSlidingExpiration write set_CookieSlidingExpiration;
    property CookieProtection: DNCookieProtection read get_CookieProtection write set_CookieProtection;
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property Domain: string read get_Domain write set_Domain;
    property MaxCachedResults: Int32 read get_MaxCachedResults write set_MaxCachedResults;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRoleManagerSection = class(TDNGenericImport<DNRoleManagerSectionClass, DNRoleManagerSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSecurityPolicySectionClass = interface(DNObjectClass)
  ['{DB38976F-D7B2-5C35-B118-A49BB0650444}']
  { constructors } 

    {class} function init: DNSecurityPolicySection;

  end;

  [DNTypeName('System.Web.Configuration.SecurityPolicySection')]
  DNSecurityPolicySection = interface(DNObject)
  ['{D06DF9A4-51AE-3183-964D-2E18DA009344}']
  { getters & setters } 

    function get_TrustLevels: DNTrustLevelCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TrustLevels: DNTrustLevelCollection read get_TrustLevels;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSecurityPolicySection = class(TDNGenericImport<DNSecurityPolicySectionClass, DNSecurityPolicySection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSessionPageStateSectionClass = interface(DNObjectClass)
  ['{03777281-D791-51A1-8638-5AE613FD438C}']
  { constructors } 

    {class} function init: DNSessionPageStateSection;

  end;

  [DNTypeName('System.Web.Configuration.SessionPageStateSection')]
  DNSessionPageStateSection = interface(DNObject)
  ['{525F5967-2813-350A-8079-56CA32D82F86}']
  { getters & setters } 

    function get_HistorySize: Int32;
    procedure set_HistorySize(value: Int32);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HistorySize: Int32 read get_HistorySize write set_HistorySize;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSessionPageStateSection = class(TDNGenericImport<DNSessionPageStateSectionClass, DNSessionPageStateSection>)
  public const
   DefaultHistorySize = 9;
  end;

  //-------------namespace: System.Web.Configuration----------------
  DNSessionStateSectionClass = interface(DNObjectClass)
  ['{6703DEFF-EE1B-5BAC-903E-77B954CE5E1E}']
  { constructors } 

    {class} function init: DNSessionStateSection;

  end;

  [DNTypeName('System.Web.Configuration.SessionStateSection')]
  DNSessionStateSection = interface(DNObject)
  ['{8DB166D0-5B9B-3603-98E0-CF3E330B3E4A}']
  { getters & setters } 

    function get_Mode: DNSessionStateMode;
    procedure set_Mode(value: DNSessionStateMode);
    function get_StateConnectionString: string;
    procedure set_StateConnectionString(value: string);
    function get_StateNetworkTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_StateNetworkTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_SqlConnectionString: string;
    procedure set_SqlConnectionString(value: string);
    function get_SqlCommandTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_SqlCommandTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_SqlConnectionRetryInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_SqlConnectionRetryInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_CustomProvider: string;
    procedure set_CustomProvider(value: string);
    function get_Cookieless: DNHttpCookieMode;
    procedure set_Cookieless(value: DNHttpCookieMode);
    function get_CookieName: string;
    procedure set_CookieName(value: string);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);
    function get_AllowCustomSqlDatabase: Boolean;
    procedure set_AllowCustomSqlDatabase(value: Boolean);
    function get_CompressionEnabled: Boolean;
    procedure set_CompressionEnabled(value: Boolean);
    function get_RegenerateExpiredSessionId: Boolean;
    procedure set_RegenerateExpiredSessionId(value: Boolean);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_PartitionResolverType: string;
    procedure set_PartitionResolverType(value: string);
    function get_UseHostingIdentity: Boolean;
    procedure set_UseHostingIdentity(value: Boolean);
    function get_SessionIDManagerType: string;
    procedure set_SessionIDManagerType(value: string);
    function get_CookieSameSite: DNSameSiteMode;
    procedure set_CookieSameSite(value: DNSameSiteMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNSessionStateMode read get_Mode write set_Mode;
    property StateConnectionString: string read get_StateConnectionString write set_StateConnectionString;
    property StateNetworkTimeout: DDN.mscorlib.DNTimeSpan read get_StateNetworkTimeout write set_StateNetworkTimeout;
    property SqlConnectionString: string read get_SqlConnectionString write set_SqlConnectionString;
    property SqlCommandTimeout: DDN.mscorlib.DNTimeSpan read get_SqlCommandTimeout write set_SqlCommandTimeout;
    property SqlConnectionRetryInterval: DDN.mscorlib.DNTimeSpan read get_SqlConnectionRetryInterval write set_SqlConnectionRetryInterval;
    property CustomProvider: string read get_CustomProvider write set_CustomProvider;
    property Cookieless: DNHttpCookieMode read get_Cookieless write set_Cookieless;
    property CookieName: string read get_CookieName write set_CookieName;
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
    property AllowCustomSqlDatabase: Boolean read get_AllowCustomSqlDatabase write set_AllowCustomSqlDatabase;
    property CompressionEnabled: Boolean read get_CompressionEnabled write set_CompressionEnabled;
    property RegenerateExpiredSessionId: Boolean read get_RegenerateExpiredSessionId write set_RegenerateExpiredSessionId;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property PartitionResolverType: string read get_PartitionResolverType write set_PartitionResolverType;
    property UseHostingIdentity: Boolean read get_UseHostingIdentity write set_UseHostingIdentity;
    property SessionIDManagerType: string read get_SessionIDManagerType write set_SessionIDManagerType;
    property CookieSameSite: DNSameSiteMode read get_CookieSameSite write set_CookieSameSite;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSessionStateSection = class(TDNGenericImport<DNSessionStateSectionClass, DNSessionStateSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSiteMapSectionClass = interface(DNObjectClass)
  ['{7BC709CF-29A6-5DEC-8A11-9E96621D1404}']
  { constructors } 

    {class} function init: DNSiteMapSection;

  end;

  [DNTypeName('System.Web.Configuration.SiteMapSection')]
  DNSiteMapSection = interface(DNObject)
  ['{4309C0CE-083D-36CB-A7D7-20AE1C4A525A}']
  { getters & setters } 

    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSiteMapSection = class(TDNGenericImport<DNSiteMapSectionClass, DNSiteMapSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSqlCacheDependencySectionClass = interface(DNObjectClass)
  ['{B093A097-681B-5D81-AAA7-C50865BAB906}']
  { constructors } 

    {class} function init: DNSqlCacheDependencySection;

  end;

  [DNTypeName('System.Web.Configuration.SqlCacheDependencySection')]
  DNSqlCacheDependencySection = interface(DNObject)
  ['{DA5C0767-E04F-316F-A9E8-C7E8E77D63E5}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_PollTime: Int32;
    procedure set_PollTime(value: Int32);
    function get_Databases: DNSqlCacheDependencyDatabaseCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property PollTime: Int32 read get_PollTime write set_PollTime;
    property Databases: DNSqlCacheDependencyDatabaseCollection read get_Databases;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSqlCacheDependencySection = class(TDNGenericImport<DNSqlCacheDependencySectionClass, DNSqlCacheDependencySection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTraceSectionClass = interface(DNObjectClass)
  ['{9457D917-3AB2-53B4-A78F-DEDA3A83E9AD}']
  { constructors } 

    {class} function init: DNTraceSection;

  end;

  [DNTypeName('System.Web.Configuration.TraceSection')]
  DNTraceSection = interface(DNObject)
  ['{2BD34DCF-B310-38D2-9E8D-4610509BE432}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_MostRecent: Boolean;
    procedure set_MostRecent(value: Boolean);
    function get_LocalOnly: Boolean;
    procedure set_LocalOnly(value: Boolean);
    function get_PageOutput: Boolean;
    procedure set_PageOutput(value: Boolean);
    function get_RequestLimit: Int32;
    procedure set_RequestLimit(value: Int32);
    function get_TraceMode: DNTraceDisplayMode;
    procedure set_TraceMode(value: DNTraceDisplayMode);
    function get_WriteToDiagnosticsTrace: Boolean;
    procedure set_WriteToDiagnosticsTrace(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property MostRecent: Boolean read get_MostRecent write set_MostRecent;
    property LocalOnly: Boolean read get_LocalOnly write set_LocalOnly;
    property PageOutput: Boolean read get_PageOutput write set_PageOutput;
    property RequestLimit: Int32 read get_RequestLimit write set_RequestLimit;
    property TraceMode: DNTraceDisplayMode read get_TraceMode write set_TraceMode;
    property WriteToDiagnosticsTrace: Boolean read get_WriteToDiagnosticsTrace write set_WriteToDiagnosticsTrace;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTraceSection = class(TDNGenericImport<DNTraceSectionClass, DNTraceSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTrustSectionClass = interface(DNObjectClass)
  ['{912F8B2A-DD5E-5AC5-92FC-2588FB804CD5}']
  { constructors } 

    {class} function init: DNTrustSection;

  end;

  [DNTypeName('System.Web.Configuration.TrustSection')]
  DNTrustSection = interface(DNObject)
  ['{25B32778-1B17-3916-B926-68C3821F7042}']
  { getters & setters } 

    function get_Level: string;
    procedure set_Level(value: string);
    function get_OriginUrl: string;
    procedure set_OriginUrl(value: string);
    function get_ProcessRequestInApplicationTrust: Boolean;
    procedure set_ProcessRequestInApplicationTrust(value: Boolean);
    function get_LegacyCasModel: Boolean;
    procedure set_LegacyCasModel(value: Boolean);
    function get_PermissionSetName: string;
    procedure set_PermissionSetName(value: string);
    function get_HostSecurityPolicyResolverType: string;
    procedure set_HostSecurityPolicyResolverType(value: string);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Level: string read get_Level write set_Level;
    property OriginUrl: string read get_OriginUrl write set_OriginUrl;
    property ProcessRequestInApplicationTrust: Boolean read get_ProcessRequestInApplicationTrust write set_ProcessRequestInApplicationTrust;
    property LegacyCasModel: Boolean read get_LegacyCasModel write set_LegacyCasModel;
    property PermissionSetName: string read get_PermissionSetName write set_PermissionSetName;
    property HostSecurityPolicyResolverType: string read get_HostSecurityPolicyResolverType write set_HostSecurityPolicyResolverType;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTrustSection = class(TDNGenericImport<DNTrustSectionClass, DNTrustSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNUrlMappingsSectionClass = interface(DNObjectClass)
  ['{84A03034-02E9-5829-A515-BED4C561E3AF}']
  { constructors } 

    {class} function init: DNUrlMappingsSection;

  end;

  [DNTypeName('System.Web.Configuration.UrlMappingsSection')]
  DNUrlMappingsSection = interface(DNObject)
  ['{5136447E-05A6-3F54-9E43-F134D2D6304F}']
  { getters & setters } 

    function get_UrlMappings: DNUrlMappingCollection;
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UrlMappings: DNUrlMappingCollection read get_UrlMappings;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNUrlMappingsSection = class(TDNGenericImport<DNUrlMappingsSectionClass, DNUrlMappingsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebControlsSectionClass = interface(DNObjectClass)
  ['{C7E6BC3F-3DA6-5AA0-B0FC-14A56E00159B}']
  { constructors } 

    {class} function init: DNWebControlsSection;

  end;

  [DNTypeName('System.Web.Configuration.WebControlsSection')]
  DNWebControlsSection = interface(DNObject)
  ['{95C6813C-9C12-3DD6-97D9-44D7E2ABAA34}']
  { getters & setters } 

    function get_ClientScriptsLocation: string;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientScriptsLocation: string read get_ClientScriptsLocation;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebControlsSection = class(TDNGenericImport<DNWebControlsSectionClass, DNWebControlsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebPartsSectionClass = interface(DNObjectClass)
  ['{5EA3F7C8-82C8-5953-9256-1BEFA1FADF27}']
  { constructors } 

    {class} function init: DNWebPartsSection;

  end;

  [DNTypeName('System.Web.Configuration.WebPartsSection')]
  DNWebPartsSection = interface(DNObject)
  ['{B260AAFD-5281-3864-887F-36AE40280A08}']
  { getters & setters } 

    function get_EnableExport: Boolean;
    procedure set_EnableExport(value: Boolean);
    function get_Personalization: DNWebPartsPersonalization;
    function get_Transformers: DNTransformerInfoCollection;
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableExport: Boolean read get_EnableExport write set_EnableExport;
    property Personalization: DNWebPartsPersonalization read get_Personalization;
    property Transformers: DNTransformerInfoCollection read get_Transformers;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebPartsSection = class(TDNGenericImport<DNWebPartsSectionClass, DNWebPartsSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNXhtmlConformanceSectionClass = interface(DNObjectClass)
  ['{8563FACA-C694-537D-B9D0-CC7AC2D481B0}']
  { constructors } 

    {class} function init: DNXhtmlConformanceSection;

  end;

  [DNTypeName('System.Web.Configuration.XhtmlConformanceSection')]
  DNXhtmlConformanceSection = interface(DNObject)
  ['{91C3E203-FC38-340D-95CC-4E46F73AC6E3}']
  { getters & setters } 

    function get_Mode: DNXhtmlConformanceMode;
    procedure set_Mode(value: DNXhtmlConformanceMode);
    function get_SectionInformation: DDN.System.Configuration.DNSectionInformation;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNXhtmlConformanceMode read get_Mode write set_Mode;
    property SectionInformation: DDN.System.Configuration.DNSectionInformation read get_SectionInformation;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNXhtmlConformanceSection = class(TDNGenericImport<DNXhtmlConformanceSectionClass, DNXhtmlConformanceSection>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAssemblyInfoClass = interface(DNObjectClass)
  ['{7F1A6207-601A-5813-A7E6-37CFE4BE16C1}']
  { constructors } 

    {class} function init(assemblyName: string): DNAssemblyInfo;

  end;

  [DNTypeName('System.Web.Configuration.AssemblyInfo')]
  DNAssemblyInfo = interface(DNObject)
  ['{3E50EF09-A6DF-3597-8A9D-D9B513F6DE29}']
  { getters & setters } 

    function get_Assembly: string;
    procedure set_Assembly(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Assembly: string read get_Assembly write set_Assembly;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAssemblyInfo = class(TDNGenericImport<DNAssemblyInfoClass, DNAssemblyInfo>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNAuthorizationRuleClass = interface(DNObjectClass)
  ['{B576F4E7-D7AC-53F2-9B17-3BC55241EF6B}']
  { constructors } 

    {class} function init(action: DNAuthorizationRuleAction): DNAuthorizationRule;

  end;

  [DNTypeName('System.Web.Configuration.AuthorizationRule')]
  DNAuthorizationRule = interface(DNObject)
  ['{D89E5F04-CB08-3A63-A2BB-FA50BCBAE162}']
  { getters & setters } 

    function get_Action: DNAuthorizationRuleAction;
    procedure set_Action(value: DNAuthorizationRuleAction);
    function get_Verbs: DDN.System.DNStringCollection;
    function get_Users: DDN.System.DNStringCollection;
    function get_Roles: DDN.System.DNStringCollection;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: DNAuthorizationRuleAction read get_Action write set_Action;
    property Verbs: DDN.System.DNStringCollection read get_Verbs;
    property Users: DDN.System.DNStringCollection read get_Users;
    property Roles: DDN.System.DNStringCollection read get_Roles;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNAuthorizationRule = class(TDNGenericImport<DNAuthorizationRuleClass, DNAuthorizationRule>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBufferModeSettingsClass = interface(DNObjectClass)
  ['{3FBB4E46-39DC-55E1-8750-D51BF8033273}']
  { constructors } 

    {class} function init(name: string; maxBufferSize: Int32; maxFlushSize: Int32; urgentFlushThreshold: Int32; regularFlushInterval: DDN.mscorlib.DNTimeSpan; urgentFlushInterval: DDN.mscorlib.DNTimeSpan; maxBufferThreads: Int32): DNBufferModeSettings;

  end;

  [DNTypeName('System.Web.Configuration.BufferModeSettings')]
  DNBufferModeSettings = interface(DNObject)
  ['{F5E87648-9379-3272-A053-6385555FFF93}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_MaxBufferSize: Int32;
    procedure set_MaxBufferSize(value: Int32);
    function get_MaxFlushSize: Int32;
    procedure set_MaxFlushSize(value: Int32);
    function get_UrgentFlushThreshold: Int32;
    procedure set_UrgentFlushThreshold(value: Int32);
    function get_RegularFlushInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_RegularFlushInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_UrgentFlushInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_UrgentFlushInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_MaxBufferThreads: Int32;
    procedure set_MaxBufferThreads(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property MaxBufferSize: Int32 read get_MaxBufferSize write set_MaxBufferSize;
    property MaxFlushSize: Int32 read get_MaxFlushSize write set_MaxFlushSize;
    property UrgentFlushThreshold: Int32 read get_UrgentFlushThreshold write set_UrgentFlushThreshold;
    property RegularFlushInterval: DDN.mscorlib.DNTimeSpan read get_RegularFlushInterval write set_RegularFlushInterval;
    property UrgentFlushInterval: DDN.mscorlib.DNTimeSpan read get_UrgentFlushInterval write set_UrgentFlushInterval;
    property MaxBufferThreads: Int32 read get_MaxBufferThreads write set_MaxBufferThreads;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNBufferModeSettings = class(TDNGenericImport<DNBufferModeSettingsClass, DNBufferModeSettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNConfiguration_BuildProviderClass = interface(DNObjectClass)
  ['{DEDD35EA-3516-5A1B-A7E4-8D4B726B9765}']
  { constructors } 

    {class} function init(extension: string; &type: string): DNConfiguration_BuildProvider;

  end;

  [DNTypeName('System.Web.Configuration.BuildProvider')]
  DNConfiguration_BuildProvider = interface(DNObject)
  ['{02E2E49B-EA1B-39BC-9CB1-BD0E4DA447BF}']
  { getters & setters } 

    function get_Extension: string;
    procedure set_Extension(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(provider: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Extension: string read get_Extension write set_Extension;
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfiguration_BuildProvider = class(TDNGenericImport<DNConfiguration_BuildProviderClass, DNConfiguration_BuildProvider>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNClientTargetClass = interface(DNObjectClass)
  ['{ACC8A005-B7EA-56F3-B68F-BD398B2D6203}']
  { constructors } 

    {class} function init(alias: string; userAgent: string): DNClientTarget;

  end;

  [DNTypeName('System.Web.Configuration.ClientTarget')]
  DNClientTarget = interface(DNObject)
  ['{90B1D40C-EBBC-3590-91AF-39EB344360D8}']
  { getters & setters } 

    function get_Alias: string;
    function get_UserAgent: string;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alias: string read get_Alias;
    property UserAgent: string read get_UserAgent;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNClientTarget = class(TDNGenericImport<DNClientTargetClass, DNClientTarget>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCodeSubDirectoryClass = interface(DNObjectClass)
  ['{5708467B-B435-5E82-8054-3033CF6E75D6}']
  { constructors } 

    {class} function init(directoryName: string): DNCodeSubDirectory;

  end;

  [DNTypeName('System.Web.Configuration.CodeSubDirectory')]
  DNCodeSubDirectory = interface(DNObject)
  ['{1467F2F5-D91F-36C2-A21A-45B908B372AB}']
  { getters & setters } 

    function get_DirectoryName: string;
    procedure set_DirectoryName(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DirectoryName: string read get_DirectoryName write set_DirectoryName;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCodeSubDirectory = class(TDNGenericImport<DNCodeSubDirectoryClass, DNCodeSubDirectory>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCompilerClass = interface(DNObjectClass)
  ['{6837E24A-4ABE-561E-B489-070C10A9BA93}']
  { constructors } 

    {class} function init(compilerOptions: string; extension: string; language: string; &type: string; warningLevel: Int32): DNCompiler;

  end;

  [DNTypeName('System.Web.Configuration.Compiler')]
  DNCompiler = interface(DNObject)
  ['{D6EFA6B5-DC71-3276-9032-845AA6E71771}']
  { getters & setters } 

    function get_Language: string;
    function get_Extension: string;
    function get_Type: string;
    function get_WarningLevel: Int32;
    function get_CompilerOptions: string;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Language: string read get_Language;
    property Extension: string read get_Extension;
    property &Type: string read get_Type;
    property WarningLevel: Int32 read get_WarningLevel;
    property CompilerOptions: string read get_CompilerOptions;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCompiler = class(TDNGenericImport<DNCompilerClass, DNCompiler>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNCustomErrorClass = interface(DNObjectClass)
  ['{C5BA0287-6757-5537-A50E-27C009B398DE}']
  { constructors } 

    {class} function init(statusCode: Int32; redirect: string): DNCustomError;

  end;

  [DNTypeName('System.Web.Configuration.CustomError')]
  DNCustomError = interface(DNObject)
  ['{A67F42F4-A029-3B64-9756-6B333D3BBCE3}']
  { getters & setters } 

    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_Redirect: string;
    procedure set_Redirect(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(customError: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    property Redirect: string read get_Redirect write set_Redirect;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNCustomError = class(TDNGenericImport<DNCustomErrorClass, DNCustomError>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNEventMappingSettingsClass = interface(DNObjectClass)
  ['{632A4D7A-5A7B-5C55-BD61-B85D5795DC11}']
  { constructors } 

    {class} function init(name: string; &type: string; startEventCode: Int32; endEventCode: Int32): DNEventMappingSettings; overload;
    {class} function init(name: string; &type: string): DNEventMappingSettings; overload;

  end;

  [DNTypeName('System.Web.Configuration.EventMappingSettings')]
  DNEventMappingSettings = interface(DNObject)
  ['{59155EBD-80C3-3E73-96E8-910B0821201E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_StartEventCode: Int32;
    procedure set_StartEventCode(value: Int32);
    function get_EndEventCode: Int32;
    procedure set_EndEventCode(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property StartEventCode: Int32 read get_StartEventCode write set_StartEventCode;
    property EndEventCode: Int32 read get_EndEventCode write set_EndEventCode;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNEventMappingSettings = class(TDNGenericImport<DNEventMappingSettingsClass, DNEventMappingSettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNConfiguration_ExpressionBuilderClass = interface(DNObjectClass)
  ['{6006A2F2-F358-5827-B740-55B6E8790E28}']
  { constructors } 

    {class} function init(expressionPrefix: string; theType: string): DNConfiguration_ExpressionBuilder;

  end;

  [DNTypeName('System.Web.Configuration.ExpressionBuilder')]
  DNConfiguration_ExpressionBuilder = interface(DNObject)
  ['{A0A432FC-54A2-3536-B44B-E78A76E72F6D}']
  { getters & setters } 

    function get_ExpressionPrefix: string;
    procedure set_ExpressionPrefix(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExpressionPrefix: string read get_ExpressionPrefix write set_ExpressionPrefix;
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNConfiguration_ExpressionBuilder = class(TDNGenericImport<DNConfiguration_ExpressionBuilderClass, DNConfiguration_ExpressionBuilder>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFolderLevelBuildProviderClass = interface(DNObjectClass)
  ['{606A932A-5ADB-57DC-BDEF-68AE42EB0166}']
  { constructors } 

    {class} function init(name: string; &type: string): DNFolderLevelBuildProvider;

  end;

  [DNTypeName('System.Web.Configuration.FolderLevelBuildProvider')]
  DNFolderLevelBuildProvider = interface(DNObject)
  ['{92857006-B8A7-35C1-B2EF-45D18B033588}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(provider: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFolderLevelBuildProvider = class(TDNGenericImport<DNFolderLevelBuildProviderClass, DNFolderLevelBuildProvider>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFormsAuthenticationConfigurationClass = interface(DNObjectClass)
  ['{302ADEA2-2D78-599D-AC0B-6A9BFDEA8BF1}']
  { constructors } 

    {class} function init: DNFormsAuthenticationConfiguration;

  end;

  [DNTypeName('System.Web.Configuration.FormsAuthenticationConfiguration')]
  DNFormsAuthenticationConfiguration = interface(DNObject)
  ['{027615CE-18B0-3BA3-9288-39BF582C9695}']
  { getters & setters } 

    function get_Credentials: DNFormsAuthenticationCredentials;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_LoginUrl: string;
    procedure set_LoginUrl(value: string);
    function get_DefaultUrl: string;
    procedure set_DefaultUrl(value: string);
    function get_Protection: DNFormsProtectionEnum;
    procedure set_Protection(value: DNFormsProtectionEnum);
    function get_Timeout: DDN.mscorlib.DNTimeSpan;
    procedure set_Timeout(value: DDN.mscorlib.DNTimeSpan);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_RequireSSL: Boolean;
    procedure set_RequireSSL(value: Boolean);
    function get_SlidingExpiration: Boolean;
    procedure set_SlidingExpiration(value: Boolean);
    function get_EnableCrossAppRedirects: Boolean;
    procedure set_EnableCrossAppRedirects(value: Boolean);
    function get_Cookieless: DNHttpCookieMode;
    procedure set_Cookieless(value: DNHttpCookieMode);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_TicketCompatibilityMode: DNTicketCompatibilityMode;
    procedure set_TicketCompatibilityMode(value: DNTicketCompatibilityMode);
    function get_CookieSameSite: DNSameSiteMode;
    procedure set_CookieSameSite(value: DNSameSiteMode);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Credentials: DNFormsAuthenticationCredentials read get_Credentials;
    property Name: string read get_Name write set_Name;
    property LoginUrl: string read get_LoginUrl write set_LoginUrl;
    property DefaultUrl: string read get_DefaultUrl write set_DefaultUrl;
    property Protection: DNFormsProtectionEnum read get_Protection write set_Protection;
    property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout write set_Timeout;
    property Path: string read get_Path write set_Path;
    property RequireSSL: Boolean read get_RequireSSL write set_RequireSSL;
    property SlidingExpiration: Boolean read get_SlidingExpiration write set_SlidingExpiration;
    property EnableCrossAppRedirects: Boolean read get_EnableCrossAppRedirects write set_EnableCrossAppRedirects;
    property Cookieless: DNHttpCookieMode read get_Cookieless write set_Cookieless;
    property Domain: string read get_Domain write set_Domain;
    property TicketCompatibilityMode: DNTicketCompatibilityMode read get_TicketCompatibilityMode write set_TicketCompatibilityMode;
    property CookieSameSite: DNSameSiteMode read get_CookieSameSite write set_CookieSameSite;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFormsAuthenticationConfiguration = class(TDNGenericImport<DNFormsAuthenticationConfigurationClass, DNFormsAuthenticationConfiguration>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFormsAuthenticationCredentialsClass = interface(DNObjectClass)
  ['{43B2F92F-F9F3-5A58-AA7A-7163B26FA3F4}']
  { constructors } 

    {class} function init: DNFormsAuthenticationCredentials;

  end;

  [DNTypeName('System.Web.Configuration.FormsAuthenticationCredentials')]
  DNFormsAuthenticationCredentials = interface(DNObject)
  ['{9CA792AD-65B0-3523-9B56-FEC032209BC1}']
  { getters & setters } 

    function get_Users: DNFormsAuthenticationUserCollection;
    function get_PasswordFormat: DNFormsAuthPasswordFormat;
    procedure set_PasswordFormat(value: DNFormsAuthPasswordFormat);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Users: DNFormsAuthenticationUserCollection read get_Users;
    property PasswordFormat: DNFormsAuthPasswordFormat read get_PasswordFormat write set_PasswordFormat;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFormsAuthenticationCredentials = class(TDNGenericImport<DNFormsAuthenticationCredentialsClass, DNFormsAuthenticationCredentials>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFormsAuthenticationUserClass = interface(DNObjectClass)
  ['{DEC8BB92-EB8E-5D6E-9C74-6C5460E4EAE5}']
  { constructors } 

    {class} function init(name: string; password: string): DNFormsAuthenticationUser;

  end;

  [DNTypeName('System.Web.Configuration.FormsAuthenticationUser')]
  DNFormsAuthenticationUser = interface(DNObject)
  ['{29105EE2-6B64-38ED-A2E6-0E3E9FBA88C0}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Password: string;
    procedure set_Password(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Password: string read get_Password write set_Password;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFormsAuthenticationUser = class(TDNGenericImport<DNFormsAuthenticationUserClass, DNFormsAuthenticationUser>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNFullTrustAssemblyClass = interface(DNObjectClass)
  ['{560BAFCD-F282-5648-BAD9-0B4A54FE9D25}']
  { constructors } 

    {class} function init(assemblyName: string; version: string; publicKey: string): DNFullTrustAssembly;

  end;

  [DNTypeName('System.Web.Configuration.FullTrustAssembly')]
  DNFullTrustAssembly = interface(DNObject)
  ['{72B8B8C2-4429-37D7-BBD7-AC606E6FD292}']
  { getters & setters } 

    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_PublicKey: string;
    procedure set_PublicKey(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property Version: string read get_Version write set_Version;
    property PublicKey: string read get_PublicKey write set_PublicKey;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNFullTrustAssembly = class(TDNGenericImport<DNFullTrustAssemblyClass, DNFullTrustAssembly>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpHandlerActionClass = interface(DNObjectClass)
  ['{B89A1901-B6C2-5A22-8A4C-3472A47CA8EA}']
  { constructors } 

    {class} function init(path: string; &type: string; verb: string): DNHttpHandlerAction; overload;
    {class} function init(path: string; &type: string; verb: string; validate: Boolean): DNHttpHandlerAction; overload;

  end;

  [DNTypeName('System.Web.Configuration.HttpHandlerAction')]
  DNHttpHandlerAction = interface(DNObject)
  ['{A9FC1F35-BE2C-3F8D-AD21-27CCE16E0553}']
  { getters & setters } 

    function get_Path: string;
    procedure set_Path(value: string);
    function get_Verb: string;
    procedure set_Verb(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Validate: Boolean;
    procedure set_Validate(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Path: string read get_Path write set_Path;
    property Verb: string read get_Verb write set_Verb;
    property &Type: string read get_Type write set_Type;
    property Validate: Boolean read get_Validate write set_Validate;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpHandlerAction = class(TDNGenericImport<DNHttpHandlerActionClass, DNHttpHandlerAction>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpModuleActionClass = interface(DNObjectClass)
  ['{76834EEE-2C8C-5948-9E6F-4A62F2B11A30}']
  { constructors } 

    {class} function init(name: string; &type: string): DNHttpModuleAction;

  end;

  [DNTypeName('System.Web.Configuration.HttpModuleAction')]
  DNHttpModuleAction = interface(DNObject)
  ['{321893F1-B196-3E44-B75E-631D30CDC39B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNHttpModuleAction = class(TDNGenericImport<DNHttpModuleActionClass, DNHttpModuleAction>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNIgnoreDeviceFilterElementClass = interface(DNObjectClass)
  ['{804656FB-0B25-591C-9D37-188AFD3A0CCA}']
  { constructors } 

    {class} function init(name: string): DNIgnoreDeviceFilterElement;

  end;

  [DNTypeName('System.Web.Configuration.IgnoreDeviceFilterElement')]
  DNIgnoreDeviceFilterElement = interface(DNObject)
  ['{4299DA4A-F877-3EB6-9C11-1F1B04FD9D11}']
  { getters & setters } 

    function get_Name: string;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNIgnoreDeviceFilterElement = class(TDNGenericImport<DNIgnoreDeviceFilterElementClass, DNIgnoreDeviceFilterElement>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNNamespaceInfoClass = interface(DNObjectClass)
  ['{A73DD943-3B7A-5439-84A1-ED7BA6F0E434}']
  { constructors } 

    {class} function init(name: string): DNNamespaceInfo;

  end;

  [DNTypeName('System.Web.Configuration.NamespaceInfo')]
  DNNamespaceInfo = interface(DNObject)
  ['{794796D4-9C08-3CD3-A77D-CFAA51056AF3}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(namespaceInformation: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Namespace: string read get_Namespace write set_Namespace;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNNamespaceInfo = class(TDNGenericImport<DNNamespaceInfoClass, DNNamespaceInfo>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNOutputCacheProfileClass = interface(DNObjectClass)
  ['{CCA23DF0-E98C-5DEA-9703-EAF9153C5B52}']
  { constructors } 

    {class} function init(name: string): DNOutputCacheProfile;

  end;

  [DNTypeName('System.Web.Configuration.OutputCacheProfile')]
  DNOutputCacheProfile = interface(DNObject)
  ['{ABA5ED81-AC46-3E13-B197-51F3C55D7FD8}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Duration: Int32;
    procedure set_Duration(value: Int32);
    function get_Location: DNOutputCacheLocation;
    procedure set_Location(value: DNOutputCacheLocation);
    function get_SqlDependency: string;
    procedure set_SqlDependency(value: string);
    function get_VaryByCustom: string;
    procedure set_VaryByCustom(value: string);
    function get_VaryByControl: string;
    procedure set_VaryByControl(value: string);
    function get_VaryByContentEncoding: string;
    procedure set_VaryByContentEncoding(value: string);
    function get_VaryByHeader: string;
    procedure set_VaryByHeader(value: string);
    function get_VaryByParam: string;
    procedure set_VaryByParam(value: string);
    function get_NoStore: Boolean;
    procedure set_NoStore(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Duration: Int32 read get_Duration write set_Duration;
    property Location: DNOutputCacheLocation read get_Location write set_Location;
    property SqlDependency: string read get_SqlDependency write set_SqlDependency;
    property VaryByCustom: string read get_VaryByCustom write set_VaryByCustom;
    property VaryByControl: string read get_VaryByControl write set_VaryByControl;
    property VaryByContentEncoding: string read get_VaryByContentEncoding write set_VaryByContentEncoding;
    property VaryByHeader: string read get_VaryByHeader write set_VaryByHeader;
    property VaryByParam: string read get_VaryByParam write set_VaryByParam;
    property NoStore: Boolean read get_NoStore write set_NoStore;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNOutputCacheProfile = class(TDNGenericImport<DNOutputCacheProfileClass, DNOutputCacheProfile>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNPartialTrustVisibleAssemblyClass = interface(DNObjectClass)
  ['{63F3C8C2-A50B-58B2-B4CB-B3E9B43128A7}']
  { constructors } 

    {class} function init(assemblyName: string; publicKey: string): DNPartialTrustVisibleAssembly;

  end;

  [DNTypeName('System.Web.Configuration.PartialTrustVisibleAssembly')]
  DNPartialTrustVisibleAssembly = interface(DNObject)
  ['{0E4B7F44-CE98-34E9-80AC-65788087CBBD}']
  { getters & setters } 

    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_PublicKey: string;
    procedure set_PublicKey(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property PublicKey: string read get_PublicKey write set_PublicKey;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPartialTrustVisibleAssembly = class(TDNGenericImport<DNPartialTrustVisibleAssemblyClass, DNPartialTrustVisibleAssembly>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNPassportAuthenticationClass = interface(DNObjectClass)
  ['{46D5BE62-5474-5D9D-9424-1BF1E92CFEE6}']
  { constructors } 

    {class} function init: DNPassportAuthentication;

  end;

  [DNTypeName('System.Web.Configuration.PassportAuthentication')]
  DNPassportAuthentication = interface(DNObject)
  ['{FBF274D8-ECBE-3A0D-A52A-716429BA3CD0}']
  { getters & setters } 

    function get_RedirectUrl: string;
    procedure set_RedirectUrl(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RedirectUrl: string read get_RedirectUrl write set_RedirectUrl;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNPassportAuthentication = class(TDNGenericImport<DNPassportAuthenticationClass, DNPassportAuthentication>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfileGroupSettingsClass = interface(DNObjectClass)
  ['{17DCDB17-8C78-53CF-9995-CF403790511B}']
  { constructors } 

    {class} function init(name: string): DNProfileGroupSettings;

  end;

  [DNTypeName('System.Web.Configuration.ProfileGroupSettings')]
  DNProfileGroupSettings = interface(DNObject)
  ['{4E29BB2E-626C-3DC7-BE17-D110A9C8092E}']
  { getters & setters } 

    function get_Name: string;
    function get_PropertySettings: DNProfilePropertySettingsCollection;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property PropertySettings: DNProfilePropertySettingsCollection read get_PropertySettings;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfileGroupSettings = class(TDNGenericImport<DNProfileGroupSettingsClass, DNProfileGroupSettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfilePropertySettingsClass = interface(DNObjectClass)
  ['{68F90DF9-D66F-5C31-8F68-DD48787908BC}']
  { constructors } 

    {class} function init(name: string): DNProfilePropertySettings; overload;
    {class} function init(name: string; readOnly: Boolean; serializeAs: DNSerializationMode; providerName: string; defaultValue: string; profileType: string; allowAnonymous: Boolean; customProviderData: string): DNProfilePropertySettings; overload;

  end;

  [DNTypeName('System.Web.Configuration.ProfilePropertySettings')]
  DNProfilePropertySettings = interface(DNObject)
  ['{86C7D0DF-2DAB-321F-A46B-EFFD8BD8B363}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_SerializeAs: DNSerializationMode;
    procedure set_SerializeAs(value: DNSerializationMode);
    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_AllowAnonymous: Boolean;
    procedure set_AllowAnonymous(value: Boolean);
    function get_CustomProviderData: string;
    procedure set_CustomProviderData(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property SerializeAs: DNSerializationMode read get_SerializeAs write set_SerializeAs;
    property Provider: string read get_Provider write set_Provider;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property &Type: string read get_Type write set_Type;
    property AllowAnonymous: Boolean read get_AllowAnonymous write set_AllowAnonymous;
    property CustomProviderData: string read get_CustomProviderData write set_CustomProviderData;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfilePropertySettings = class(TDNGenericImport<DNProfilePropertySettingsClass, DNProfilePropertySettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProfileSettingsClass = interface(DNObjectClass)
  ['{DD8E1ADB-AB13-5605-A6F4-8C11F7385131}']
  { constructors } 

    {class} function init(name: string): DNProfileSettings; overload;
    {class} function init(name: string; minInstances: Int32; maxLimit: Int32; minInterval: DDN.mscorlib.DNTimeSpan): DNProfileSettings; overload;
    {class} function init(name: string; minInstances: Int32; maxLimit: Int32; minInterval: DDN.mscorlib.DNTimeSpan; custom: string): DNProfileSettings; overload;

  end;

  [DNTypeName('System.Web.Configuration.ProfileSettings')]
  DNProfileSettings = interface(DNObject)
  ['{62CD7EC7-64D8-3A15-A681-92FD8471B8D2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_MinInstances: Int32;
    procedure set_MinInstances(value: Int32);
    function get_MaxLimit: Int32;
    procedure set_MaxLimit(value: Int32);
    function get_MinInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_MinInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_Custom: string;
    procedure set_Custom(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property MinInstances: Int32 read get_MinInstances write set_MinInstances;
    property MaxLimit: Int32 read get_MaxLimit write set_MaxLimit;
    property MinInterval: DDN.mscorlib.DNTimeSpan read get_MinInterval write set_MinInterval;
    property Custom: string read get_Custom write set_Custom;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProfileSettings = class(TDNGenericImport<DNProfileSettingsClass, DNProfileSettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProtocolElementClass = interface(DNObjectClass)
  ['{B8B127A6-2EB4-5B16-A704-0D920767ED3E}']
  { constructors } 

    {class} function init(name: string): DNProtocolElement; overload;
    {class} function init: DNProtocolElement; overload;

  end;

  [DNTypeName('System.Web.Configuration.ProtocolElement')]
  DNProtocolElement = interface(DNObject)
  ['{A7EAA52F-2CE1-3EFF-841E-3E336A7AE16A}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ProcessHandlerType: string;
    procedure set_ProcessHandlerType(value: string);
    function get_AppDomainHandlerType: string;
    procedure set_AppDomainHandlerType(value: string);
    function get_Validate: Boolean;
    procedure set_Validate(value: Boolean);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property ProcessHandlerType: string read get_ProcessHandlerType write set_ProcessHandlerType;
    property AppDomainHandlerType: string read get_AppDomainHandlerType write set_AppDomainHandlerType;
    property Validate: Boolean read get_Validate write set_Validate;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNProtocolElement = class(TDNGenericImport<DNProtocolElementClass, DNProtocolElement>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRuleSettingsClass = interface(DNObjectClass)
  ['{D375B286-ECAE-504F-8260-CF75733B5669}']
  { constructors } 

    {class} function init(name: string; eventName: string; provider: string): DNRuleSettings; overload;
    {class} function init(name: string; eventName: string; provider: string; profile: string; minInstances: Int32; maxLimit: Int32; minInterval: DDN.mscorlib.DNTimeSpan): DNRuleSettings; overload;
    {class} function init(name: string; eventName: string; provider: string; profile: string; minInstances: Int32; maxLimit: Int32; minInterval: DDN.mscorlib.DNTimeSpan; custom: string): DNRuleSettings; overload;

  end;

  [DNTypeName('System.Web.Configuration.RuleSettings')]
  DNRuleSettings = interface(DNObject)
  ['{AE7F521F-D411-3D8F-BD5D-360AB8933872}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_EventName: string;
    procedure set_EventName(value: string);
    function get_Custom: string;
    procedure set_Custom(value: string);
    function get_Profile: string;
    procedure set_Profile(value: string);
    function get_Provider: string;
    procedure set_Provider(value: string);
    function get_MinInstances: Int32;
    procedure set_MinInstances(value: Int32);
    function get_MaxLimit: Int32;
    procedure set_MaxLimit(value: Int32);
    function get_MinInterval: DDN.mscorlib.DNTimeSpan;
    procedure set_MinInterval(value: DDN.mscorlib.DNTimeSpan);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property EventName: string read get_EventName write set_EventName;
    property Custom: string read get_Custom write set_Custom;
    property Profile: string read get_Profile write set_Profile;
    property Provider: string read get_Provider write set_Provider;
    property MinInstances: Int32 read get_MinInstances write set_MinInstances;
    property MaxLimit: Int32 read get_MaxLimit write set_MaxLimit;
    property MinInterval: DDN.mscorlib.DNTimeSpan read get_MinInterval write set_MinInterval;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNRuleSettings = class(TDNGenericImport<DNRuleSettingsClass, DNRuleSettings>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSqlCacheDependencyDatabaseClass = interface(DNObjectClass)
  ['{32BFCD31-879C-5855-86FB-85CC42ABF7DD}']
  { constructors } 

    {class} function init(name: string; connectionStringName: string; pollTime: Int32): DNSqlCacheDependencyDatabase; overload;
    {class} function init(name: string; connectionStringName: string): DNSqlCacheDependencyDatabase; overload;

  end;

  [DNTypeName('System.Web.Configuration.SqlCacheDependencyDatabase')]
  DNSqlCacheDependencyDatabase = interface(DNObject)
  ['{68B0B16B-A646-3142-B595-499DB5B644B7}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_ConnectionStringName: string;
    procedure set_ConnectionStringName(value: string);
    function get_PollTime: Int32;
    procedure set_PollTime(value: Int32);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property ConnectionStringName: string read get_ConnectionStringName write set_ConnectionStringName;
    property PollTime: Int32 read get_PollTime write set_PollTime;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNSqlCacheDependencyDatabase = class(TDNGenericImport<DNSqlCacheDependencyDatabaseClass, DNSqlCacheDependencyDatabase>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTagMapInfoClass = interface(DNObjectClass)
  ['{79C6B477-1972-5116-B05D-A939A5831905}']
  { constructors } 

    {class} function init(tagTypeName: string; mappedTagTypeName: string): DNTagMapInfo;

  end;

  [DNTypeName('System.Web.Configuration.TagMapInfo')]
  DNTagMapInfo = interface(DNObject)
  ['{3466CB16-E7A1-3022-BFCF-530C325A7686}']
  { getters & setters } 

    function get_MappedTagType: string;
    procedure set_MappedTagType(value: string);
    function get_TagType: string;
    procedure set_TagType(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MappedTagType: string read get_MappedTagType write set_MappedTagType;
    property TagType: string read get_TagType write set_TagType;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTagMapInfo = class(TDNGenericImport<DNTagMapInfoClass, DNTagMapInfo>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTagPrefixInfoClass = interface(DNObjectClass)
  ['{F7ED2197-D291-5048-A301-9F280A16C068}']
  { constructors } 

    {class} function init(tagPrefix: string; nameSpace: string; assembly: string; tagName: string; source: string): DNTagPrefixInfo;

  end;

  [DNTypeName('System.Web.Configuration.TagPrefixInfo')]
  DNTagPrefixInfo = interface(DNObject)
  ['{BFA51AA3-3303-33F2-8387-45FB9143E3CF}']
  { getters & setters } 

    function get_TagPrefix: string;
    procedure set_TagPrefix(value: string);
    function get_TagName: string;
    procedure set_TagName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Assembly: string;
    procedure set_Assembly(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(prefix: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TagPrefix: string read get_TagPrefix write set_TagPrefix;
    property TagName: string read get_TagName write set_TagName;
    property Namespace: string read get_Namespace write set_Namespace;
    property Assembly: string read get_Assembly write set_Assembly;
    property Source: string read get_Source write set_Source;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTagPrefixInfo = class(TDNGenericImport<DNTagPrefixInfoClass, DNTagPrefixInfo>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTransformerInfoClass = interface(DNObjectClass)
  ['{DC78B716-C22A-5332-8992-919480C0E752}']
  { constructors } 

    {class} function init(name: string; &type: string): DNTransformerInfo;

  end;

  [DNTypeName('System.Web.Configuration.TransformerInfo')]
  DNTransformerInfo = interface(DNObject)
  ['{C35375C8-E77A-3CC1-89D3-DBDBA0813EAC}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    procedure set_Type(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function IsReadOnly: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type write set_Type;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTransformerInfo = class(TDNGenericImport<DNTransformerInfoClass, DNTransformerInfo>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNTrustLevelClass = interface(DNObjectClass)
  ['{342F144C-54FD-5BF6-92DB-E74C18DDE52C}']
  { constructors } 

    {class} function init(name: string; policyFile: string): DNTrustLevel;

  end;

  [DNTypeName('System.Web.Configuration.TrustLevel')]
  DNTrustLevel = interface(DNObject)
  ['{D061A1CC-7B15-3F97-9A48-76475892000B}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_PolicyFile: string;
    procedure set_PolicyFile(value: string);
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property PolicyFile: string read get_PolicyFile write set_PolicyFile;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNTrustLevel = class(TDNGenericImport<DNTrustLevelClass, DNTrustLevel>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNUrlMappingClass = interface(DNObjectClass)
  ['{DBB36868-4FB2-50E2-B31E-5EC57E0DA0C8}']
  { constructors } 

    {class} function init(url: string; mappedUrl: string): DNUrlMapping;

  end;

  [DNTypeName('System.Web.Configuration.UrlMapping')]
  DNUrlMapping = interface(DNObject)
  ['{DC674B8E-5639-30CB-9111-DE36C318401C}']
  { getters & setters } 

    function get_Url: string;
    function get_MappedUrl: string;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Url: string read get_Url;
    property MappedUrl: string read get_MappedUrl;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNUrlMapping = class(TDNGenericImport<DNUrlMappingClass, DNUrlMapping>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebPartsPersonalizationClass = interface(DNObjectClass)
  ['{8AB0B952-8760-55B2-A4E5-55A63BD9E5E2}']
  { constructors } 

    {class} function init: DNWebPartsPersonalization;

  end;

  [DNTypeName('System.Web.Configuration.WebPartsPersonalization')]
  DNWebPartsPersonalization = interface(DNObject)
  ['{437B948D-62B8-3179-9A91-1FF9013A897B}']
  { getters & setters } 

    function get_Authorization: DNWebPartsPersonalizationAuthorization;
    function get_DefaultProvider: string;
    procedure set_DefaultProvider(value: string);
    function get_Providers: DDN.System.Configuration.DNProviderSettingsCollection;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Authorization: DNWebPartsPersonalizationAuthorization read get_Authorization;
    property DefaultProvider: string read get_DefaultProvider write set_DefaultProvider;
    property Providers: DDN.System.Configuration.DNProviderSettingsCollection read get_Providers;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebPartsPersonalization = class(TDNGenericImport<DNWebPartsPersonalizationClass, DNWebPartsPersonalization>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebPartsPersonalizationAuthorizationClass = interface(DNObjectClass)
  ['{24D3C6EE-040C-51AA-9C80-5BD99E852D5D}']
  { constructors } 

    {class} function init: DNWebPartsPersonalizationAuthorization;

  end;

  [DNTypeName('System.Web.Configuration.WebPartsPersonalizationAuthorization')]
  DNWebPartsPersonalizationAuthorization = interface(DNObject)
  ['{968E4125-CCD2-3334-B29A-9DA7EF44F6B3}']
  { getters & setters } 

    function get_Rules: DNAuthorizationRuleCollection;
    function get_LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockElements: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection;
    function get_LockItem: Boolean;
    procedure set_LockItem(value: Boolean);
    function get_ElementInformation: DDN.System.Configuration.DNElementInformation;
    function get_CurrentConfiguration: DDN.System.Configuration.DNConfiguration;

  { methods } 

    function IsReadOnly: Boolean;
    function Equals(compareTo: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Rules: DNAuthorizationRuleCollection read get_Rules;
    property LockAttributes: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAttributes;
    property LockAllAttributesExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllAttributesExcept;
    property LockElements: DDN.System.Configuration.DNConfigurationLockCollection read get_LockElements;
    property LockAllElementsExcept: DDN.System.Configuration.DNConfigurationLockCollection read get_LockAllElementsExcept;
    property LockItem: Boolean read get_LockItem write set_LockItem;
    property ElementInformation: DDN.System.Configuration.DNElementInformation read get_ElementInformation;
    property CurrentConfiguration: DDN.System.Configuration.DNConfiguration read get_CurrentConfiguration;
  end;

  TDNWebPartsPersonalizationAuthorization = class(TDNGenericImport<DNWebPartsPersonalizationAuthorizationClass, DNWebPartsPersonalizationAuthorization>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebConfigurationFileMapClass = interface(DNObjectClass)
  ['{247772C3-16F8-56BE-8A67-9CB49641FB6B}']
  { constructors } 

    {class} function init: DNWebConfigurationFileMap; overload;
    {class} function init(machineConfigFileName: string): DNWebConfigurationFileMap; overload;

  end;

  [DNTypeName('System.Web.Configuration.WebConfigurationFileMap')]
  DNWebConfigurationFileMap = interface(DNObject)
  ['{5E887EA0-EBFD-30DD-83DE-FE3CD053072E}']
  { getters & setters } 

    function get_VirtualDirectories: DNVirtualDirectoryMappingCollection;
    function get_MachineConfigFilename: string;
    procedure set_MachineConfigFilename(value: string);

  { methods } 

    function Clone: DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VirtualDirectories: DNVirtualDirectoryMappingCollection read get_VirtualDirectories;
    property MachineConfigFilename: string read get_MachineConfigFilename write set_MachineConfigFilename;
  end;

  TDNWebConfigurationFileMap = class(TDNGenericImport<DNWebConfigurationFileMapClass, DNWebConfigurationFileMap>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNSystemWebCachingSectionGroupClass = interface(DNObjectClass)
  ['{806DB1E5-A5FF-58C2-91BE-755760DBD5F7}']
  { constructors } 

    {class} function init: DNSystemWebCachingSectionGroup;

  end;

  [DNTypeName('System.Web.Configuration.SystemWebCachingSectionGroup')]
  DNSystemWebCachingSectionGroup = interface(DNObject)
  ['{8238191B-0517-3EEA-9C28-401FE8CCB1A6}']
  { getters & setters } 

    function get_Cache: DNCacheSection;
    function get_OutputCache: DNOutputCacheSection;
    function get_OutputCacheSettings: DNOutputCacheSettingsSection;
    function get_SqlCacheDependency: DNSqlCacheDependencySection;
    function get_IsDeclared: Boolean;
    function get_IsDeclarationRequired: Boolean;
    function get_SectionGroupName: string;
    function get_Name: string;
    function get_Type: string;
    procedure set_Type(value: string);
    function get_Sections: DDN.System.Configuration.DNConfigurationSectionCollection;
    function get_SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection;

  { methods } 

    procedure ForceDeclaration; overload;
    procedure ForceDeclaration(force: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cache: DNCacheSection read get_Cache;
    property OutputCache: DNOutputCacheSection read get_OutputCache;
    property OutputCacheSettings: DNOutputCacheSettingsSection read get_OutputCacheSettings;
    property SqlCacheDependency: DNSqlCacheDependencySection read get_SqlCacheDependency;
    property IsDeclared: Boolean read get_IsDeclared;
    property IsDeclarationRequired: Boolean read get_IsDeclarationRequired;
    property SectionGroupName: string read get_SectionGroupName;
    property Name: string read get_Name;
    property &Type: string read get_Type write set_Type;
    property Sections: DDN.System.Configuration.DNConfigurationSectionCollection read get_Sections;
    property SectionGroups: DDN.System.Configuration.DNConfigurationSectionGroupCollection read get_SectionGroups;
  end;

  TDNSystemWebCachingSectionGroup = class(TDNGenericImport<DNSystemWebCachingSectionGroupClass, DNSystemWebCachingSectionGroup>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileProviderClass = interface(DNObjectClass)
  ['{6C53FFF4-A9BF-5B2F-9D60-B0FADDE44665}']
  end;

  [DNTypeName('System.Web.Profile.ProfileProvider')]
  DNProfileProvider = interface(DNObject)
  ['{6B88F4F2-2388-379C-9CA6-9484F524A993}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    function DeleteProfiles(profiles: DNProfileInfoCollection): Int32; overload;
    function DeleteProfiles(usernames: TArray<string>): Int32; overload;
    function DeleteInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    function GetNumberOfInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    function GetAllProfiles(authenticationOption: DNProfileAuthenticationOption; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function GetAllInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function FindProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function FindInactiveProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function GetPropertyValues(context: DDN.System.Configuration.DNSettingsContext; collection: DDN.System.Configuration.DNSettingsPropertyCollection): DDN.System.Configuration.DNSettingsPropertyValueCollection;
    procedure SetPropertyValues(context: DDN.System.Configuration.DNSettingsContext; collection: DDN.System.Configuration.DNSettingsPropertyValueCollection);
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNProfileProvider = class(TDNGenericImport<DNProfileProviderClass, DNProfileProvider>) end;

  //-------------namespace: System.Web.Profile----------------
  DNSqlProfileProviderClass = interface(DNProfileProviderClass)
  ['{A67A6E69-C5F0-5A87-BA9E-D9E3E3EA75B6}']
  { constructors } 

    {class} function init: DNSqlProfileProvider;

  end;

  [DNTypeName('System.Web.Profile.SqlProfileProvider')]
  DNSqlProfileProvider = interface(DNProfileProvider)
  ['{13C5FD9B-91B8-30F3-B9FD-054861862B96}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function GetPropertyValues(sc: DDN.System.Configuration.DNSettingsContext; properties: DDN.System.Configuration.DNSettingsPropertyCollection): DDN.System.Configuration.DNSettingsPropertyValueCollection;
    procedure SetPropertyValues(sc: DDN.System.Configuration.DNSettingsContext; properties: DDN.System.Configuration.DNSettingsPropertyValueCollection);
    function DeleteProfiles(profiles: DNProfileInfoCollection): Int32; overload;
    function DeleteProfiles(usernames: TArray<string>): Int32; overload;
    function DeleteInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    function GetNumberOfInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    function GetAllProfiles(authenticationOption: DNProfileAuthenticationOption; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function GetAllInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function FindProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function FindInactiveProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSqlProfileProvider = class(TDNGenericImport<DNSqlProfileProviderClass, DNSqlProfileProvider>) end;

  //-------------namespace: System.Web.Caching----------------
  DNCacheStoreProviderClass = interface(DNObjectClass)
  ['{D54ED82A-A98B-5034-AE36-4726EA7A1783}']
  end;

  [DNTypeName('System.Web.Caching.CacheStoreProvider')]
  DNCacheStoreProvider = interface(DNObject)
  ['{D21EA9BC-CC14-3CBE-8449-8E760486911A}']
  { getters & setters } 

    function get_ItemCount: Int64;
    function get_SizeInBytes: Int64;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    function Get(key: string): DDN.mscorlib.DNObject;
    procedure Insert(key: string; item: DDN.mscorlib.DNObject; options: DNCacheInsertOptions);
    function Remove(key: string; reason: DNCacheItemRemovedReason): DDN.mscorlib.DNObject; overload;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Add(key: string; item: DDN.mscorlib.DNObject; options: DNCacheInsertOptions): DDN.mscorlib.DNObject;
    function Remove(key: string): DDN.mscorlib.DNObject; overload;
    function Trim(percent: Int32): Int64;
    function AddDependent(key: string; dependency: DNCacheDependency; out utcLastUpdated: DDN.mscorlib.DNDateTime): Boolean;
    procedure RemoveDependent(key: string; dependency: DNCacheDependency);
    procedure Dispose;
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemCount: Int64 read get_ItemCount;
    property SizeInBytes: Int64 read get_SizeInBytes;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNCacheStoreProvider = class(TDNGenericImport<DNCacheStoreProviderClass, DNCacheStoreProvider>) end;

  //-------------namespace: System.Web.Caching----------------
  DNOutputCacheProviderClass = interface(DNObjectClass)
  ['{82FAFD36-FFA4-5444-92D2-FA72C38F31B0}']
  end;

  [DNTypeName('System.Web.Caching.OutputCacheProvider')]
  DNOutputCacheProvider = interface(DNObject)
  ['{9808A787-4F1B-3976-9088-A6D35323CC02}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    function Get(key: string): DDN.mscorlib.DNObject;
    function Add(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNObject;
    procedure &Set(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime);
    procedure Remove(key: string);
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNOutputCacheProvider = class(TDNGenericImport<DNOutputCacheProviderClass, DNOutputCacheProvider>) end;

  //-------------namespace: System.Web.Caching----------------
  DNOutputCacheProviderAsyncClass = interface(DNOutputCacheProviderClass)
  ['{38A57B3D-1D99-5C1C-8B42-7C3DEA25D846}']
  end;

  [DNTypeName('System.Web.Caching.OutputCacheProviderAsync')]
  DNOutputCacheProviderAsync = interface(DNOutputCacheProvider)
  ['{99366591-232E-3474-9DAC-120E4B868DC9}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    function GetAsync(key: string): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function AddAsync(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function SetAsync(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNTask;
    function RemoveAsync(key: string): DDN.mscorlib.DNTask;
    function Get(key: string): DDN.mscorlib.DNObject;
    function Add(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime): DDN.mscorlib.DNObject;
    procedure &Set(key: string; entry: DDN.mscorlib.DNObject; utcExpiry: DDN.mscorlib.DNDateTime);
    procedure Remove(key: string);
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNOutputCacheProviderAsync = class(TDNGenericImport<DNOutputCacheProviderAsyncClass, DNOutputCacheProviderAsync>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebEventProviderClass = interface(DNObjectClass)
  ['{C12EF497-C321-51A1-9560-4B3E4A8E999C}']
  end;

  [DNTypeName('System.Web.Management.WebEventProvider')]
  DNWebEventProvider = interface(DNObject)
  ['{8D1B663C-59BC-3B64-A976-34E41EF2B57E}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure ProcessEvent(raisedEvent: DNWebBaseEvent);
    procedure Shutdown;
    procedure Flush;
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNWebEventProvider = class(TDNGenericImport<DNWebEventProviderClass, DNWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNBufferedWebEventProviderClass = interface(DNWebEventProviderClass)
  ['{351C3EAB-5D1E-5692-96B0-7A9E66E19A19}']
  end;

  [DNTypeName('System.Web.Management.BufferedWebEventProvider')]
  DNBufferedWebEventProvider = interface(DNWebEventProvider)
  ['{E52F6B67-859E-33C6-A5D9-2DA6BFD51BBD}']
  { getters & setters } 

    function get_UseBuffering: Boolean;
    function get_BufferMode: string;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure ProcessEventFlush(flushInfo: DNWebEventBufferFlushInfo);
    procedure Flush;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseBuffering: Boolean read get_UseBuffering;
    property BufferMode: string read get_BufferMode;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNBufferedWebEventProvider = class(TDNGenericImport<DNBufferedWebEventProviderClass, DNBufferedWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNMailWebEventProviderClass = interface(DNBufferedWebEventProviderClass)
  ['{6DDDDB4B-0A99-5479-A2C4-8A6C57ABB076}']
  end;

  [DNTypeName('System.Web.Management.MailWebEventProvider')]
  DNMailWebEventProvider = interface(DNBufferedWebEventProvider)
  ['{7F249CAD-F28F-323B-B835-8BCFBA4BB3E1}']
  { getters & setters } 

    function get_UseBuffering: Boolean;
    function get_BufferMode: string;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Shutdown;
    procedure ProcessEventFlush(flushInfo: DNWebEventBufferFlushInfo);
    procedure Flush;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseBuffering: Boolean read get_UseBuffering;
    property BufferMode: string read get_BufferMode;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNMailWebEventProvider = class(TDNGenericImport<DNMailWebEventProviderClass, DNMailWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNSimpleMailWebEventProviderClass = interface(DNMailWebEventProviderClass)
  ['{35E9199C-88D6-5BD6-9232-916FC9DB1D49}']
  end;

  [DNTypeName('System.Web.Management.SimpleMailWebEventProvider')]
  DNSimpleMailWebEventProvider = interface(DNMailWebEventProvider)
  ['{3856A3D1-E8E7-37BA-8B1D-DF4707CC66CA}']
  { getters & setters } 

    function get_UseBuffering: Boolean;
    function get_BufferMode: string;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Shutdown;
    procedure ProcessEventFlush(flushInfo: DNWebEventBufferFlushInfo);
    procedure Flush;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseBuffering: Boolean read get_UseBuffering;
    property BufferMode: string read get_BufferMode;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSimpleMailWebEventProvider = class(TDNGenericImport<DNSimpleMailWebEventProviderClass, DNSimpleMailWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNTemplatedMailWebEventProviderClass = interface(DNMailWebEventProviderClass)
  ['{2C331E75-A37B-5792-B517-5D5FC333C10F}']
  { static getter & setter } 

    {class} function get_CurrentNotification: DNMailEventNotificationInfo;

  { static propertys } 

    {class} property CurrentNotification: DNMailEventNotificationInfo read get_CurrentNotification;
  end;

  [DNTypeName('System.Web.Management.TemplatedMailWebEventProvider')]
  DNTemplatedMailWebEventProvider = interface(DNMailWebEventProvider)
  ['{6041A0FC-21E5-3AA8-8D95-2085A32F0473}']
  { getters & setters } 

    function get_UseBuffering: Boolean;
    function get_BufferMode: string;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Shutdown;
    procedure ProcessEventFlush(flushInfo: DNWebEventBufferFlushInfo);
    procedure Flush;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseBuffering: Boolean read get_UseBuffering;
    property BufferMode: string read get_BufferMode;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNTemplatedMailWebEventProvider = class(TDNGenericImport<DNTemplatedMailWebEventProviderClass, DNTemplatedMailWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNSqlWebEventProviderClass = interface(DNBufferedWebEventProviderClass)
  ['{C5DCCB78-FB82-59F2-8C86-FE9083000527}']
  end;

  [DNTypeName('System.Web.Management.SqlWebEventProvider')]
  DNSqlWebEventProvider = interface(DNBufferedWebEventProvider)
  ['{A4A7AF72-BDF5-31B3-81AF-CFC86301D6BB}']
  { getters & setters } 

    function get_UseBuffering: Boolean;
    function get_BufferMode: string;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEventFlush(flushInfo: DNWebEventBufferFlushInfo);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Shutdown;
    procedure Flush;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseBuffering: Boolean read get_UseBuffering;
    property BufferMode: string read get_BufferMode;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSqlWebEventProvider = class(TDNGenericImport<DNSqlWebEventProviderClass, DNSqlWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNEventLogWebEventProviderClass = interface(DNWebEventProviderClass)
  ['{FF333683-EA9F-5946-818F-349635EC38BB}']
  end;

  [DNTypeName('System.Web.Management.EventLogWebEventProvider')]
  DNEventLogWebEventProvider = interface(DNWebEventProvider)
  ['{30C3615E-8D04-36FC-97A3-53155905415E}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Flush;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNEventLogWebEventProvider = class(TDNGenericImport<DNEventLogWebEventProviderClass, DNEventLogWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNIisTraceWebEventProviderClass = interface(DNWebEventProviderClass)
  ['{C84D55FC-E7C3-5288-BE9E-9CE88C1DA4BF}']
  { constructors } 

    {class} function init: DNIisTraceWebEventProvider;

  end;

  [DNTypeName('System.Web.Management.IisTraceWebEventProvider')]
  DNIisTraceWebEventProvider = interface(DNWebEventProvider)
  ['{E0641E09-51C0-376D-9BBE-458F08849656}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Flush;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNIisTraceWebEventProvider = class(TDNGenericImport<DNIisTraceWebEventProviderClass, DNIisTraceWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNTraceWebEventProviderClass = interface(DNWebEventProviderClass)
  ['{73117BE9-B5B7-5616-AA39-82312C4294BD}']
  end;

  [DNTypeName('System.Web.Management.TraceWebEventProvider')]
  DNTraceWebEventProvider = interface(DNWebEventProvider)
  ['{649E6594-BF93-3431-8699-2986DB45358D}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Flush;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNTraceWebEventProvider = class(TDNGenericImport<DNTraceWebEventProviderClass, DNTraceWebEventProvider>) end;

  //-------------namespace: System.Web.Management----------------
  DNWmiWebEventProviderClass = interface(DNWebEventProviderClass)
  ['{0F12F632-D63A-5F9B-A119-9F1F11D58ABB}']
  { constructors } 

    {class} function init: DNWmiWebEventProvider;

  end;

  [DNTypeName('System.Web.Management.WmiWebEventProvider')]
  DNWmiWebEventProvider = interface(DNWebEventProvider)
  ['{B83F4812-5F61-3BF5-AF2F-8B85288521A5}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    procedure ProcessEvent(eventRaised: DNWebBaseEvent);
    procedure Flush;
    procedure Shutdown;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNWmiWebEventProvider = class(TDNGenericImport<DNWmiWebEventProviderClass, DNWmiWebEventProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNActiveDirectoryMembershipProviderClass = interface(DNObjectClass)
  ['{B37AEBAD-0B12-5331-8EE0-3671CB9E8987}']
  { constructors } 

    {class} function init: DNActiveDirectoryMembershipProvider;

  end;

  [DNTypeName('System.Web.Security.ActiveDirectoryMembershipProvider')]
  DNActiveDirectoryMembershipProvider = interface(DNObject)
  ['{60548C5F-BD72-3BB7-B6DB-6268C6C914CC}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_CurrentConnectionProtection: DNActiveDirectoryConnectionProtection;
    function get_PasswordFormat: DDN.System.Web.ApplicationServices.DNMembershipPasswordFormat;
    function get_EnablePasswordRetrieval: Boolean;
    function get_EnablePasswordReset: Boolean;
    function get_EnableSearchMethods: Boolean;
    function get_RequiresQuestionAndAnswer: Boolean;
    function get_RequiresUniqueEmail: Boolean;
    function get_MaxInvalidPasswordAttempts: Int32;
    function get_PasswordAttemptWindow: Int32;
    function get_PasswordAnswerAttemptLockoutDuration: Int32;
    function get_MinRequiredPasswordLength: Int32;
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    function get_PasswordStrengthRegularExpression: string;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);
    procedure remove_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus): DDN.System.Web.ApplicationServices.DNMembershipUser;
    function ChangePasswordQuestionAndAnswer(username: string; password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    function GetPassword(username: string; passwordAnswer: string): string;
    function ChangePassword(username: string; oldPassword: string; newPassword: string): Boolean;
    function ResetPassword(username: string; passwordAnswer: string): string;
    function UnlockUser(username: string): Boolean;
    procedure UpdateUser(user: DDN.System.Web.ApplicationServices.DNMembershipUser);
    function ValidateUser(username: string; password: string): Boolean;
    function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    function GetUser(username: string; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    function GetUserNameByEmail(email: string): string;
    function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean;
    function GeneratePassword: string;
    function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function GetNumberOfUsersOnline: Int32;
    function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property CurrentConnectionProtection: DNActiveDirectoryConnectionProtection read get_CurrentConnectionProtection;
    property PasswordFormat: DDN.System.Web.ApplicationServices.DNMembershipPasswordFormat read get_PasswordFormat;
    property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    property EnableSearchMethods: Boolean read get_EnableSearchMethods;
    property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    property RequiresUniqueEmail: Boolean read get_RequiresUniqueEmail;
    property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    property PasswordAnswerAttemptLockoutDuration: Int32 read get_PasswordAnswerAttemptLockoutDuration;
    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNActiveDirectoryMembershipProvider = class(TDNGenericImport<DNActiveDirectoryMembershipProviderClass, DNActiveDirectoryMembershipProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNSqlMembershipProviderClass = interface(DNObjectClass)
  ['{C785FA73-0CCC-5A19-95BE-BB0CDF392A16}']
  { constructors } 

    {class} function init: DNSqlMembershipProvider;

  end;

  [DNTypeName('System.Web.Security.SqlMembershipProvider')]
  DNSqlMembershipProvider = interface(DNObject)
  ['{5EEE84F2-CFEC-33BE-8B85-8FCB02005944}']
  { getters & setters } 

    function get_EnablePasswordRetrieval: Boolean;
    function get_EnablePasswordReset: Boolean;
    function get_RequiresQuestionAndAnswer: Boolean;
    function get_RequiresUniqueEmail: Boolean;
    function get_PasswordFormat: DDN.System.Web.ApplicationServices.DNMembershipPasswordFormat;
    function get_MaxInvalidPasswordAttempts: Int32;
    function get_PasswordAttemptWindow: Int32;
    function get_MinRequiredPasswordLength: Int32;
    function get_MinRequiredNonAlphanumericCharacters: Int32;
    function get_PasswordStrengthRegularExpression: string;
    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);
    procedure remove_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus): DDN.System.Web.ApplicationServices.DNMembershipUser;
    function ChangePasswordQuestionAndAnswer(username: string; password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    function GetPassword(username: string; passwordAnswer: string): string;
    function ChangePassword(username: string; oldPassword: string; newPassword: string): Boolean;
    function ResetPassword(username: string; passwordAnswer: string): string;
    procedure UpdateUser(user: DDN.System.Web.ApplicationServices.DNMembershipUser);
    function ValidateUser(username: string; password: string): Boolean;
    function UnlockUser(username: string): Boolean;
    function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    function GetUser(username: string; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    function GetUserNameByEmail(email: string): string;
    function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean;
    function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function GetNumberOfUsersOnline: Int32;
    function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection;
    function GeneratePassword: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    property RequiresUniqueEmail: Boolean read get_RequiresUniqueEmail;
    property PasswordFormat: DDN.System.Web.ApplicationServices.DNMembershipPasswordFormat read get_PasswordFormat;
    property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSqlMembershipProvider = class(TDNGenericImport<DNSqlMembershipProviderClass, DNSqlMembershipProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNAuthorizationStoreRoleProviderClass = interface(DNObjectClass)
  ['{B488EC75-FBDF-5DF6-B01C-9A95D7AC1928}']
  { constructors } 

    {class} function init: DNAuthorizationStoreRoleProvider;

  end;

  [DNTypeName('System.Web.Security.AuthorizationStoreRoleProvider')]
  DNAuthorizationStoreRoleProvider = interface(DNObject)
  ['{3C815BFB-83D4-319F-9D9D-32393364F2BB}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_ScopeName: string;
    procedure set_ScopeName(value: string);
    function get_CacheRefreshInterval: Int32;
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function IsUserInRole(username: string; roleName: string): Boolean;
    function GetRolesForUser(username: string): TArray<string>;
    procedure CreateRole(roleName: string);
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    function RoleExists(roleName: string): Boolean;
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    procedure RemoveUsersFromRoles(userNames: TArray<string>; roleNames: TArray<string>);
    function GetUsersInRole(roleName: string): TArray<string>;
    function GetAllRoles: TArray<string>;
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property ScopeName: string read get_ScopeName write set_ScopeName;
    property CacheRefreshInterval: Int32 read get_CacheRefreshInterval;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNAuthorizationStoreRoleProvider = class(TDNGenericImport<DNAuthorizationStoreRoleProviderClass, DNAuthorizationStoreRoleProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNSqlRoleProviderClass = interface(DNObjectClass)
  ['{395BF651-B922-59D0-AFF9-6C47B7B18BD9}']
  { constructors } 

    {class} function init: DNSqlRoleProvider;

  end;

  [DNTypeName('System.Web.Security.SqlRoleProvider')]
  DNSqlRoleProvider = interface(DNObject)
  ['{5D1C904E-5EE4-3230-8BED-C76FF0D559DF}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function IsUserInRole(username: string; roleName: string): Boolean;
    function GetRolesForUser(username: string): TArray<string>;
    procedure CreateRole(roleName: string);
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    function RoleExists(roleName: string): Boolean;
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    function GetUsersInRole(roleName: string): TArray<string>;
    function GetAllRoles: TArray<string>;
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSqlRoleProvider = class(TDNGenericImport<DNSqlRoleProviderClass, DNSqlRoleProvider>) end;

  //-------------namespace: System.Web.Security----------------
  DNWindowsTokenRoleProviderClass = interface(DNObjectClass)
  ['{12A90500-71B6-5231-BEAF-99BAABA8D46B}']
  { constructors } 

    {class} function init: DNWindowsTokenRoleProvider;

  end;

  [DNTypeName('System.Web.Security.WindowsTokenRoleProvider')]
  DNWindowsTokenRoleProvider = interface(DNObject)
  ['{C5260E64-FAEA-366C-A4A7-DAEDD6D74910}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function IsUserInRole(username: string; role: DDN.mscorlib.DNWindowsBuiltInRole): Boolean; overload;
    function IsUserInRole(username: string; roleName: string): Boolean; overload;
    function GetRolesForUser(username: string): TArray<string>;
    procedure CreateRole(roleName: string);
    function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean;
    function RoleExists(roleName: string): Boolean;
    procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    function GetUsersInRole(roleName: string): TArray<string>;
    function GetAllRoles: TArray<string>;
    function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNWindowsTokenRoleProvider = class(TDNGenericImport<DNWindowsTokenRoleProviderClass, DNWindowsTokenRoleProvider>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionStateStoreProviderBaseClass = interface(DNObjectClass)
  ['{12623683-1429-5F98-9FF1-183036C96645}']
  end;

  [DNTypeName('System.Web.SessionState.SessionStateStoreProviderBase')]
  DNSessionStateStoreProviderBase = interface(DNObject)
  ['{7435840C-C918-36B5-BECD-F095ED3DC6B9}']
  { getters & setters } 

    function get_Name: string;
    function get_Description: string;

  { methods } 

    procedure Dispose;
    function SetItemExpireCallback(expireCallback: DNSessionStateItemExpireCallback): Boolean;
    procedure InitializeRequest(context: DNHttpContext);
    function GetItem(context: DNHttpContext; id: string; out locked: Boolean; out lockAge: DDN.mscorlib.DNTimeSpan; out lockId: DDN.mscorlib.DNObject; out actions: DNSessionStateActions): DNSessionStateStoreData;
    function GetItemExclusive(context: DNHttpContext; id: string; out locked: Boolean; out lockAge: DDN.mscorlib.DNTimeSpan; out lockId: DDN.mscorlib.DNObject; out actions: DNSessionStateActions): DNSessionStateStoreData;
    procedure ReleaseItemExclusive(context: DNHttpContext; id: string; lockId: DDN.mscorlib.DNObject);
    procedure SetAndReleaseItemExclusive(context: DNHttpContext; id: string; item: DNSessionStateStoreData; lockId: DDN.mscorlib.DNObject; newItem: Boolean);
    procedure RemoveItem(context: DNHttpContext; id: string; lockId: DDN.mscorlib.DNObject; item: DNSessionStateStoreData);
    procedure ResetItemTimeout(context: DNHttpContext; id: string);
    function CreateNewStoreData(context: DNHttpContext; timeout: Int32): DNSessionStateStoreData;
    procedure CreateUninitializedItem(context: DNHttpContext; id: string; timeout: Int32);
    procedure EndRequest(context: DNHttpContext);
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSessionStateStoreProviderBase = class(TDNGenericImport<DNSessionStateStoreProviderBaseClass, DNSessionStateStoreProviderBase>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapProviderClass = interface(DNObjectClass)
  ['{3EDF1A07-34C0-53F0-891C-B60449608F7C}']
  end;

  [DNTypeName('System.Web.SiteMapProvider')]
  DNSiteMapProvider = interface(DNObject)
  ['{0CC4845F-DE26-396C-B451-EFB6163DCC71}']
  { getters & setters } 

    function get_CurrentNode: DNSiteMapNode;
    function get_EnableLocalization: Boolean;
    procedure set_EnableLocalization(value: Boolean);
    function get_ParentProvider: DNSiteMapProvider;
    procedure set_ParentProvider(value: DNSiteMapProvider);
    function get_ResourceKey: string;
    procedure set_ResourceKey(value: string);
    function get_RootProvider: DNSiteMapProvider;
    function get_RootNode: DNSiteMapNode;
    function get_SecurityTrimmingEnabled: Boolean;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_SiteMapResolve(value: DNSiteMapResolveEventHandler);
    procedure remove_SiteMapResolve(value: DNSiteMapResolveEventHandler);

  { methods } 

    function FindSiteMapNode(context: DNHttpContext): DNSiteMapNode; overload;
    function FindSiteMapNodeFromKey(key: string): DNSiteMapNode;
    function FindSiteMapNode(rawUrl: string): DNSiteMapNode; overload;
    function GetChildNodes(node: DNSiteMapNode): DNSiteMapNodeCollection;
    function GetCurrentNodeAndHintAncestorNodes(upLevel: Int32): DNSiteMapNode;
    function GetCurrentNodeAndHintNeighborhoodNodes(upLevel: Int32; downLevel: Int32): DNSiteMapNode;
    function GetParentNode(node: DNSiteMapNode): DNSiteMapNode;
    function GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    function GetParentNodeRelativeToNodeAndHintDownFromParent(node: DNSiteMapNode; walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    procedure HintAncestorNodes(node: DNSiteMapNode; upLevel: Int32);
    procedure HintNeighborhoodNodes(node: DNSiteMapNode; upLevel: Int32; downLevel: Int32);
    procedure Initialize(name: string; attributes: DDN.System.DNNameValueCollection);
    function IsAccessibleToUser(context: DNHttpContext; node: DNSiteMapNode): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentNode: DNSiteMapNode read get_CurrentNode;
    property EnableLocalization: Boolean read get_EnableLocalization write set_EnableLocalization;
    property ParentProvider: DNSiteMapProvider read get_ParentProvider write set_ParentProvider;
    property ResourceKey: string read get_ResourceKey write set_ResourceKey;
    property RootProvider: DNSiteMapProvider read get_RootProvider;
    property RootNode: DNSiteMapNode read get_RootNode;
    property SecurityTrimmingEnabled: Boolean read get_SecurityTrimmingEnabled;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSiteMapProvider = class(TDNGenericImport<DNSiteMapProviderClass, DNSiteMapProvider>) end;

  //-------------namespace: System.Web----------------
  DNStaticSiteMapProviderClass = interface(DNSiteMapProviderClass)
  ['{1638E2E2-2117-5FC6-8221-71586B5B1BD1}']
  end;

  [DNTypeName('System.Web.StaticSiteMapProvider')]
  DNStaticSiteMapProvider = interface(DNSiteMapProvider)
  ['{9DFBBC75-ED44-33F8-A1E5-5FFE5584E7FE}']
  { getters & setters } 

    function get_CurrentNode: DNSiteMapNode;
    function get_EnableLocalization: Boolean;
    procedure set_EnableLocalization(value: Boolean);
    function get_ParentProvider: DNSiteMapProvider;
    procedure set_ParentProvider(value: DNSiteMapProvider);
    function get_ResourceKey: string;
    procedure set_ResourceKey(value: string);
    function get_RootProvider: DNSiteMapProvider;
    function get_RootNode: DNSiteMapNode;
    function get_SecurityTrimmingEnabled: Boolean;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_SiteMapResolve(value: DNSiteMapResolveEventHandler);
    procedure remove_SiteMapResolve(value: DNSiteMapResolveEventHandler);

  { methods } 

    function GetChildNodes(node: DNSiteMapNode): DNSiteMapNodeCollection;
    function BuildSiteMap: DNSiteMapNode;
    function FindSiteMapNodeFromKey(key: string): DNSiteMapNode;
    function FindSiteMapNode(rawUrl: string): DNSiteMapNode; overload;
    function GetParentNode(node: DNSiteMapNode): DNSiteMapNode;
    function FindSiteMapNode(context: DNHttpContext): DNSiteMapNode; overload;
    function GetCurrentNodeAndHintAncestorNodes(upLevel: Int32): DNSiteMapNode;
    function GetCurrentNodeAndHintNeighborhoodNodes(upLevel: Int32; downLevel: Int32): DNSiteMapNode;
    function GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    function GetParentNodeRelativeToNodeAndHintDownFromParent(node: DNSiteMapNode; walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    procedure HintAncestorNodes(node: DNSiteMapNode; upLevel: Int32);
    procedure HintNeighborhoodNodes(node: DNSiteMapNode; upLevel: Int32; downLevel: Int32);
    procedure Initialize(name: string; attributes: DDN.System.DNNameValueCollection);
    function IsAccessibleToUser(context: DNHttpContext; node: DNSiteMapNode): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentNode: DNSiteMapNode read get_CurrentNode;
    property EnableLocalization: Boolean read get_EnableLocalization write set_EnableLocalization;
    property ParentProvider: DNSiteMapProvider read get_ParentProvider write set_ParentProvider;
    property ResourceKey: string read get_ResourceKey write set_ResourceKey;
    property RootProvider: DNSiteMapProvider read get_RootProvider;
    property RootNode: DNSiteMapNode read get_RootNode;
    property SecurityTrimmingEnabled: Boolean read get_SecurityTrimmingEnabled;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNStaticSiteMapProvider = class(TDNGenericImport<DNStaticSiteMapProviderClass, DNStaticSiteMapProvider>) end;

  //-------------namespace: System.Web----------------
  DNXmlSiteMapProviderClass = interface(DNStaticSiteMapProviderClass)
  ['{7B9A69E9-8A7D-5A59-AB35-6AB508B167F7}']
  { constructors } 

    {class} function init: DNXmlSiteMapProvider;

  end;

  [DNTypeName('System.Web.XmlSiteMapProvider')]
  DNXmlSiteMapProvider = interface(DNStaticSiteMapProvider)
  ['{ED139183-97A0-35AE-9865-2038FE1B266A}']
  { getters & setters } 

    function get_RootNode: DNSiteMapNode;
    function get_CurrentNode: DNSiteMapNode;
    function get_EnableLocalization: Boolean;
    procedure set_EnableLocalization(value: Boolean);
    function get_ParentProvider: DNSiteMapProvider;
    procedure set_ParentProvider(value: DNSiteMapProvider);
    function get_ResourceKey: string;
    procedure set_ResourceKey(value: string);
    function get_RootProvider: DNSiteMapProvider;
    function get_SecurityTrimmingEnabled: Boolean;
    function get_Name: string;
    function get_Description: string;

  { events } 

    procedure add_SiteMapResolve(value: DNSiteMapResolveEventHandler);
    procedure remove_SiteMapResolve(value: DNSiteMapResolveEventHandler);

  { methods } 

    function GetChildNodes(node: DNSiteMapNode): DNSiteMapNodeCollection;
    function BuildSiteMap: DNSiteMapNode;
    procedure Initialize(name: string; attributes: DDN.System.DNNameValueCollection);
    function GetParentNode(node: DNSiteMapNode): DNSiteMapNode;
    procedure Dispose;
    function FindSiteMapNode(rawUrl: string): DNSiteMapNode; overload;
    function FindSiteMapNodeFromKey(key: string): DNSiteMapNode;
    function FindSiteMapNode(context: DNHttpContext): DNSiteMapNode; overload;
    function GetCurrentNodeAndHintAncestorNodes(upLevel: Int32): DNSiteMapNode;
    function GetCurrentNodeAndHintNeighborhoodNodes(upLevel: Int32; downLevel: Int32): DNSiteMapNode;
    function GetParentNodeRelativeToCurrentNodeAndHintDownFromParent(walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    function GetParentNodeRelativeToNodeAndHintDownFromParent(node: DNSiteMapNode; walkupLevels: Int32; relativeDepthFromWalkup: Int32): DNSiteMapNode;
    procedure HintAncestorNodes(node: DNSiteMapNode; upLevel: Int32);
    procedure HintNeighborhoodNodes(node: DNSiteMapNode; upLevel: Int32; downLevel: Int32);
    function IsAccessibleToUser(context: DNHttpContext; node: DNSiteMapNode): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RootNode: DNSiteMapNode read get_RootNode;
    property CurrentNode: DNSiteMapNode read get_CurrentNode;
    property EnableLocalization: Boolean read get_EnableLocalization write set_EnableLocalization;
    property ParentProvider: DNSiteMapProvider read get_ParentProvider write set_ParentProvider;
    property ResourceKey: string read get_ResourceKey write set_ResourceKey;
    property RootProvider: DNSiteMapProvider read get_RootProvider;
    property SecurityTrimmingEnabled: Boolean read get_SecurityTrimmingEnabled;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNXmlSiteMapProvider = class(TDNGenericImport<DNXmlSiteMapProviderClass, DNXmlSiteMapProvider>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationProviderClass = interface(DNObjectClass)
  ['{A0325F7E-1390-5F75-9E67-4A903B4CDA8E}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationProvider')]
  DNPersonalizationProvider = interface(DNObject)
  ['{862E70A7-9102-38CE-B80C-337071873E29}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    function DetermineInitialScope(webPartManager: DNWebPartManager; loadedState: DNPersonalizationState): DNPersonalizationScope;
    function DetermineUserCapabilities(webPartManager: DNWebPartManager): DDN.mscorlib.DNIDictionary;
    function FindState(scope: DNPersonalizationScope; query: DNPersonalizationStateQuery; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection;
    function GetCountOfState(scope: DNPersonalizationScope; query: DNPersonalizationStateQuery): Int32;
    function LoadPersonalizationState(webPartManager: DNWebPartManager; ignoreCurrentUser: Boolean): DNPersonalizationState;
    procedure ResetPersonalizationState(webPartManager: DNWebPartManager);
    function ResetState(scope: DNPersonalizationScope; paths: TArray<string>; usernames: TArray<string>): Int32;
    function ResetUserState(path: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    procedure SavePersonalizationState(state: DNPersonalizationState);
    procedure Initialize(name: string; config: DDN.System.DNNameValueCollection);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNPersonalizationProvider = class(TDNGenericImport<DNPersonalizationProviderClass, DNPersonalizationProvider>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNSqlPersonalizationProviderClass = interface(DNPersonalizationProviderClass)
  ['{63BC8ADB-232A-5248-B85E-5037BDA97FBD}']
  { constructors } 

    {class} function init: DNSqlPersonalizationProvider;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.SqlPersonalizationProvider')]
  DNSqlPersonalizationProvider = interface(DNPersonalizationProvider)
  ['{70604570-D5A9-3662-A601-D0029FAC1F4B}']
  { getters & setters } 

    function get_ApplicationName: string;
    procedure set_ApplicationName(value: string);
    function get_Name: string;
    function get_Description: string;

  { methods } 

    function FindState(scope: DNPersonalizationScope; query: DNPersonalizationStateQuery; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection;
    function GetCountOfState(scope: DNPersonalizationScope; query: DNPersonalizationStateQuery): Int32;
    procedure Initialize(name: string; configSettings: DDN.System.DNNameValueCollection);
    function ResetUserState(path: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    function ResetState(scope: DNPersonalizationScope; paths: TArray<string>; usernames: TArray<string>): Int32;
    function DetermineInitialScope(webPartManager: DNWebPartManager; loadedState: DNPersonalizationState): DNPersonalizationScope;
    function DetermineUserCapabilities(webPartManager: DNWebPartManager): DDN.mscorlib.DNIDictionary;
    function LoadPersonalizationState(webPartManager: DNWebPartManager; ignoreCurrentUser: Boolean): DNPersonalizationState;
    procedure ResetPersonalizationState(webPartManager: DNWebPartManager);
    procedure SavePersonalizationState(state: DNPersonalizationState);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    property Name: string read get_Name;
    property Description: string read get_Description;
  end;

  TDNSqlPersonalizationProvider = class(TDNGenericImport<DNSqlPersonalizationProviderClass, DNSqlPersonalizationProvider>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileProviderCollectionClass = interface(DNObjectClass)
  ['{3B87313C-0942-5653-9168-7D28C8DAD297}']
  { constructors } 

    {class} function init: DNProfileProviderCollection;

  end;

  [DNTypeName('System.Web.Profile.ProfileProviderCollection')]
  DNProfileProviderCollection = interface(DNObject)
  ['{BC539980-B128-3848-BF1C-42178B549C1F}']
  { getters & setters } 

    function get_Item(name: string): DNProfileProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNProfileProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNProfileProviderCollection = class(TDNGenericImport<DNProfileProviderCollectionClass, DNProfileProviderCollection>) end;

  //-------------namespace: System.Web.Caching----------------
  DNOutputCacheProviderCollectionClass = interface(DNObjectClass)
  ['{479DE541-530C-50D7-8AD4-3DEDA3275186}']
  { constructors } 

    {class} function init: DNOutputCacheProviderCollection;

  end;

  [DNTypeName('System.Web.Caching.OutputCacheProviderCollection')]
  DNOutputCacheProviderCollection = interface(DNObject)
  ['{87E7E644-605C-3873-AA54-86A967AC303F}']
  { getters & setters } 

    function get_Item(name: string): DNOutputCacheProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    procedure CopyTo(&array: TArray<DNOutputCacheProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNOutputCacheProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNOutputCacheProviderCollection = class(TDNGenericImport<DNOutputCacheProviderCollectionClass, DNOutputCacheProviderCollection>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleProviderCollectionClass = interface(DNObjectClass)
  ['{54C2CE39-E497-559E-8453-23340B756CC2}']
  { constructors } 

    {class} function init: DNRoleProviderCollection;

  end;

  [DNTypeName('System.Web.Security.RoleProviderCollection')]
  DNRoleProviderCollection = interface(DNObject)
  ['{B6A1B4C7-E606-3687-BD9A-5E0F75C5F7F9}']
  { getters & setters } 

    function get_Item(name: string): DDN.System.Web.ApplicationServices.DNRoleProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    procedure CopyTo(&array: TArray<DDN.System.Web.ApplicationServices.DNRoleProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DDN.System.Web.ApplicationServices.DNRoleProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNRoleProviderCollection = class(TDNGenericImport<DNRoleProviderCollectionClass, DNRoleProviderCollection>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapProviderCollectionClass = interface(DNObjectClass)
  ['{DDA5C6F8-BDF3-5162-ACC5-6DCBEE3CC85A}']
  { constructors } 

    {class} function init: DNSiteMapProviderCollection;

  end;

  [DNTypeName('System.Web.SiteMapProviderCollection')]
  DNSiteMapProviderCollection = interface(DNObject)
  ['{FB46BB0F-EABA-30AA-BDAD-47953C44D9E3}']
  { getters & setters } 

    function get_Item(name: string): DNSiteMapProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase); overload;
    procedure AddArray(providerArray: TArray<DNSiteMapProvider>);
    procedure Add(provider: DNSiteMapProvider); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNSiteMapProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNSiteMapProviderCollection = class(TDNGenericImport<DNSiteMapProviderCollectionClass, DNSiteMapProviderCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationProviderCollectionClass = interface(DNObjectClass)
  ['{5AA3C182-0589-5503-B9D1-2CFDF7B1DB4A}']
  { constructors } 

    {class} function init: DNPersonalizationProviderCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationProviderCollection')]
  DNPersonalizationProviderCollection = interface(DNObject)
  ['{97EF6E44-1A8B-3053-8D3E-392CD7CB5CDE}']
  { getters & setters } 

    function get_Item(name: string): DNPersonalizationProvider;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(provider: DDN.System.Configuration.DNProviderBase);
    procedure CopyTo(&array: TArray<DNPersonalizationProvider>; index: Int32); overload;
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.System.Configuration.DNProviderBase>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNPersonalizationProvider read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNPersonalizationProviderCollection = class(TDNGenericImport<DNPersonalizationProviderCollectionClass, DNPersonalizationProviderCollection>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileBaseClass = interface(DNObjectClass)
  ['{AB7942E7-FD8F-5EF8-974E-7702020AE8D7}']
  { static getter & setter } 

    {class} function get_Properties: DDN.System.Configuration.DNSettingsPropertyCollection;

  { constructors } 

    {class} function init: DNProfileBase;

  { static methods } 

    {class} function Create(username: string): DNProfileBase; overload;
    {class} function Create(username: string; isAuthenticated: Boolean): DNProfileBase; overload;

  { static propertys } 

    {class} property Properties: DDN.System.Configuration.DNSettingsPropertyCollection read get_Properties;
  end;

  [DNTypeName('System.Web.Profile.ProfileBase')]
  DNProfileBase = interface(DNObject)
  ['{4EEC7C0A-4AA7-34C2-95BF-A49AAD7967D8}']
  { getters & setters } 

    function get_Item(propertyName: string): DDN.mscorlib.DNObject;
    procedure set_Item(propertyName: string; value: DDN.mscorlib.DNObject);
    function get_UserName: string;
    function get_IsAnonymous: Boolean;
    function get_IsDirty: Boolean;
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_Properties: DDN.System.Configuration.DNSettingsPropertyCollection;
    function get_Providers: DDN.System.Configuration.DNSettingsProviderCollection;
    function get_PropertyValues: DDN.System.Configuration.DNSettingsPropertyValueCollection;
    function get_Context: DDN.System.Configuration.DNSettingsContext;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetPropertyValue(propertyName: string): DDN.mscorlib.DNObject;
    procedure SetPropertyValue(propertyName: string; propertyValue: DDN.mscorlib.DNObject);
    procedure Save;
    function GetProfileGroup(groupName: string): DNProfileGroupBase;
    procedure Initialize(username: string; isAuthenticated: Boolean); overload;
    procedure Initialize(context: DDN.System.Configuration.DNSettingsContext; properties: DDN.System.Configuration.DNSettingsPropertyCollection; providers: DDN.System.Configuration.DNSettingsProviderCollection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[propertyName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UserName: string read get_UserName;
    property IsAnonymous: Boolean read get_IsAnonymous;
    property IsDirty: Boolean read get_IsDirty;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property Properties: DDN.System.Configuration.DNSettingsPropertyCollection read get_Properties;
    property Providers: DDN.System.Configuration.DNSettingsProviderCollection read get_Providers;
    property PropertyValues: DDN.System.Configuration.DNSettingsPropertyValueCollection read get_PropertyValues;
    property Context: DDN.System.Configuration.DNSettingsContext read get_Context;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNProfileBase = class(TDNGenericImport<DNProfileBaseClass, DNProfileBase>) end;

  //-------------namespace: System.Web.Profile----------------
  DNDefaultProfileClass = interface(DNProfileBaseClass)
  ['{8FB6B278-096D-575F-8A37-E8521F1857BB}']
  { constructors } 

    {class} function init: DNDefaultProfile;

  end;

  [DNTypeName('System.Web.Profile.DefaultProfile')]
  DNDefaultProfile = interface(DNProfileBase)
  ['{B931646A-E9B9-37F4-AFEF-5DDE370CE34D}']
  { getters & setters } 

    function get_Item(propertyName: string): DDN.mscorlib.DNObject;
    procedure set_Item(propertyName: string; value: DDN.mscorlib.DNObject);
    function get_UserName: string;
    function get_IsAnonymous: Boolean;
    function get_IsDirty: Boolean;
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_Properties: DDN.System.Configuration.DNSettingsPropertyCollection;
    function get_Providers: DDN.System.Configuration.DNSettingsProviderCollection;
    function get_PropertyValues: DDN.System.Configuration.DNSettingsPropertyValueCollection;
    function get_Context: DDN.System.Configuration.DNSettingsContext;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetPropertyValue(propertyName: string): DDN.mscorlib.DNObject;
    procedure SetPropertyValue(propertyName: string; propertyValue: DDN.mscorlib.DNObject);
    procedure Save;
    function GetProfileGroup(groupName: string): DNProfileGroupBase;
    procedure Initialize(username: string; isAuthenticated: Boolean); overload;
    procedure Initialize(context: DDN.System.Configuration.DNSettingsContext; properties: DDN.System.Configuration.DNSettingsPropertyCollection; providers: DDN.System.Configuration.DNSettingsProviderCollection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[propertyName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property UserName: string read get_UserName;
    property IsAnonymous: Boolean read get_IsAnonymous;
    property IsDirty: Boolean read get_IsDirty;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property Properties: DDN.System.Configuration.DNSettingsPropertyCollection read get_Properties;
    property Providers: DDN.System.Configuration.DNSettingsProviderCollection read get_Providers;
    property PropertyValues: DDN.System.Configuration.DNSettingsPropertyValueCollection read get_PropertyValues;
    property Context: DDN.System.Configuration.DNSettingsContext read get_Context;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNDefaultProfile = class(TDNGenericImport<DNDefaultProfileClass, DNDefaultProfile>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatingEventArgsClass = interface(DNObjectClass)
  ['{08353AE4-626A-516E-93A0-03996721CB1B}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext; parentNode: DNModelValidationNode): DNModelValidatingEventArgs;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidatingEventArgs')]
  DNModelValidatingEventArgs = interface(DNObject)
  ['{3751C270-1668-38D9-9FC4-F29A9BD5B3C2}']
  { getters & setters } 

    function get_ModelBindingExecutionContext: DNModelBindingExecutionContext;
    function get_ParentNode: DNModelValidationNode;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelBindingExecutionContext: DNModelBindingExecutionContext read get_ModelBindingExecutionContext;
    property ParentNode: DNModelValidationNode read get_ParentNode;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNModelValidatingEventArgs = class(TDNGenericImport<DNModelValidatingEventArgsClass, DNModelValidatingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewDeleteEventArgsClass = interface(DNObjectClass)
  ['{E74397F3-354D-52E3-ABBC-F7F94F7973A8}']
  { constructors } 

    {class} function init(rowIndex: Int32): DNDetailsViewDeleteEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewDeleteEventArgs')]
  DNDetailsViewDeleteEventArgs = interface(DNObject)
  ['{4A903FF9-6C31-3E74-A352-5A8DDFFD1B49}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDetailsViewDeleteEventArgs = class(TDNGenericImport<DNDetailsViewDeleteEventArgsClass, DNDetailsViewDeleteEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewInsertEventArgsClass = interface(DNObjectClass)
  ['{E0E35B45-06D8-5B6C-ADCE-310FAB1D0FF3}']
  { constructors } 

    {class} function init(commandArgument: DDN.mscorlib.DNObject): DNDetailsViewInsertEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewInsertEventArgs')]
  DNDetailsViewInsertEventArgs = interface(DNObject)
  ['{F86966A3-58E1-3BFC-99D1-1EA6990FFC0D}']
  { getters & setters } 

    function get_CommandArgument: DDN.mscorlib.DNObject;
    function get_Values: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDetailsViewInsertEventArgs = class(TDNGenericImport<DNDetailsViewInsertEventArgsClass, DNDetailsViewInsertEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewModeEventArgsClass = interface(DNObjectClass)
  ['{12936205-42CE-5E4D-AA3E-1C1CDB580895}']
  { constructors } 

    {class} function init(mode: DNDetailsViewMode; cancelingEdit: Boolean): DNDetailsViewModeEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewModeEventArgs')]
  DNDetailsViewModeEventArgs = interface(DNObject)
  ['{67B7777D-4641-3F18-AC68-AA68FAC08E17}']
  { getters & setters } 

    function get_CancelingEdit: Boolean;
    function get_NewMode: DNDetailsViewMode;
    procedure set_NewMode(value: DNDetailsViewMode);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CancelingEdit: Boolean read get_CancelingEdit;
    property NewMode: DNDetailsViewMode read get_NewMode write set_NewMode;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDetailsViewModeEventArgs = class(TDNGenericImport<DNDetailsViewModeEventArgsClass, DNDetailsViewModeEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewPageEventArgsClass = interface(DNObjectClass)
  ['{5A2877C2-A85E-5D37-A112-EC49D0F8A4A3}']
  { constructors } 

    {class} function init(newPageIndex: Int32): DNDetailsViewPageEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewPageEventArgs')]
  DNDetailsViewPageEventArgs = interface(DNObject)
  ['{559C50FE-F06F-3B8A-8E1E-FE2C58EF4215}']
  { getters & setters } 

    function get_NewPageIndex: Int32;
    procedure set_NewPageIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewPageIndex: Int32 read get_NewPageIndex write set_NewPageIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDetailsViewPageEventArgs = class(TDNGenericImport<DNDetailsViewPageEventArgsClass, DNDetailsViewPageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewUpdateEventArgsClass = interface(DNObjectClass)
  ['{2014E96C-202B-5190-9F85-AB93D2555ABE}']
  { constructors } 

    {class} function init(commandArgument: DDN.mscorlib.DNObject): DNDetailsViewUpdateEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewUpdateEventArgs')]
  DNDetailsViewUpdateEventArgs = interface(DNObject)
  ['{12D00631-A1E6-3CB4-9357-4643D7C86C69}']
  { getters & setters } 

    function get_CommandArgument: DDN.mscorlib.DNObject;
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNDetailsViewUpdateEventArgs = class(TDNGenericImport<DNDetailsViewUpdateEventArgsClass, DNDetailsViewUpdateEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewDeleteEventArgsClass = interface(DNObjectClass)
  ['{695BC522-EB6F-5009-AADE-174BD139E906}']
  { constructors } 

    {class} function init(rowIndex: Int32): DNFormViewDeleteEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewDeleteEventArgs')]
  DNFormViewDeleteEventArgs = interface(DNObject)
  ['{D8E9B984-9EA9-33C7-A38D-8D4C1F93B3FC}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNFormViewDeleteEventArgs = class(TDNGenericImport<DNFormViewDeleteEventArgsClass, DNFormViewDeleteEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewInsertEventArgsClass = interface(DNObjectClass)
  ['{8FB7D392-A1C3-5DCC-BAB1-129D19553685}']
  { constructors } 

    {class} function init(commandArgument: DDN.mscorlib.DNObject): DNFormViewInsertEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewInsertEventArgs')]
  DNFormViewInsertEventArgs = interface(DNObject)
  ['{653A312C-2011-3BDF-A1C8-4C3FB8FA8877}']
  { getters & setters } 

    function get_CommandArgument: DDN.mscorlib.DNObject;
    function get_Values: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNFormViewInsertEventArgs = class(TDNGenericImport<DNFormViewInsertEventArgsClass, DNFormViewInsertEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewModeEventArgsClass = interface(DNObjectClass)
  ['{44A16570-16F8-5686-940F-22B434F4939F}']
  { constructors } 

    {class} function init(mode: DNFormViewMode; cancelingEdit: Boolean): DNFormViewModeEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewModeEventArgs')]
  DNFormViewModeEventArgs = interface(DNObject)
  ['{4354787C-90F3-3F49-8ADB-8E1DBF8AD5AA}']
  { getters & setters } 

    function get_CancelingEdit: Boolean;
    function get_NewMode: DNFormViewMode;
    procedure set_NewMode(value: DNFormViewMode);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CancelingEdit: Boolean read get_CancelingEdit;
    property NewMode: DNFormViewMode read get_NewMode write set_NewMode;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNFormViewModeEventArgs = class(TDNGenericImport<DNFormViewModeEventArgsClass, DNFormViewModeEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewPageEventArgsClass = interface(DNObjectClass)
  ['{47BA1825-39BF-5A01-BD47-00CBEACC4FC2}']
  { constructors } 

    {class} function init(newPageIndex: Int32): DNFormViewPageEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewPageEventArgs')]
  DNFormViewPageEventArgs = interface(DNObject)
  ['{B34CB5AA-820C-3090-946B-EE1E12C64D63}']
  { getters & setters } 

    function get_NewPageIndex: Int32;
    procedure set_NewPageIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewPageIndex: Int32 read get_NewPageIndex write set_NewPageIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNFormViewPageEventArgs = class(TDNGenericImport<DNFormViewPageEventArgsClass, DNFormViewPageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewUpdateEventArgsClass = interface(DNObjectClass)
  ['{034A763E-54EF-5601-899B-A03DF409ECBF}']
  { constructors } 

    {class} function init(commandArgument: DDN.mscorlib.DNObject): DNFormViewUpdateEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewUpdateEventArgs')]
  DNFormViewUpdateEventArgs = interface(DNObject)
  ['{8097D92B-8659-356B-993A-8B3A5B1C08C7}']
  { getters & setters } 

    function get_CommandArgument: DDN.mscorlib.DNObject;
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNFormViewUpdateEventArgs = class(TDNGenericImport<DNFormViewUpdateEventArgsClass, DNFormViewUpdateEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewCancelEditEventArgsClass = interface(DNObjectClass)
  ['{E4DA49D6-E6B1-5F47-951E-BD6BBD3788B6}']
  { constructors } 

    {class} function init(rowIndex: Int32): DNGridViewCancelEditEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewCancelEditEventArgs')]
  DNGridViewCancelEditEventArgs = interface(DNObject)
  ['{E2E65673-4A70-33E1-ADCB-4FF3FE71D202}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewCancelEditEventArgs = class(TDNGenericImport<DNGridViewCancelEditEventArgsClass, DNGridViewCancelEditEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewDeleteEventArgsClass = interface(DNObjectClass)
  ['{2FAB2069-874B-5D0D-ABF6-F0B4EFAD0598}']
  { constructors } 

    {class} function init(rowIndex: Int32): DNGridViewDeleteEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewDeleteEventArgs')]
  DNGridViewDeleteEventArgs = interface(DNObject)
  ['{A64B7B15-A236-37C5-8715-3CF1C44A27D1}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewDeleteEventArgs = class(TDNGenericImport<DNGridViewDeleteEventArgsClass, DNGridViewDeleteEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewEditEventArgsClass = interface(DNObjectClass)
  ['{67C8E7F2-93E9-58F3-B677-D4ACF3C10D49}']
  { constructors } 

    {class} function init(newEditIndex: Int32): DNGridViewEditEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewEditEventArgs')]
  DNGridViewEditEventArgs = interface(DNObject)
  ['{69EAFC4C-110F-3C00-ABCA-44A7511C2983}']
  { getters & setters } 

    function get_NewEditIndex: Int32;
    procedure set_NewEditIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewEditIndex: Int32 read get_NewEditIndex write set_NewEditIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewEditEventArgs = class(TDNGenericImport<DNGridViewEditEventArgsClass, DNGridViewEditEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewPageEventArgsClass = interface(DNObjectClass)
  ['{4C387910-3401-5E63-9100-DD9A66D0FC60}']
  { constructors } 

    {class} function init(newPageIndex: Int32): DNGridViewPageEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewPageEventArgs')]
  DNGridViewPageEventArgs = interface(DNObject)
  ['{C698F022-3231-3C83-B2A4-01B629A49289}']
  { getters & setters } 

    function get_NewPageIndex: Int32;
    procedure set_NewPageIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewPageIndex: Int32 read get_NewPageIndex write set_NewPageIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewPageEventArgs = class(TDNGenericImport<DNGridViewPageEventArgsClass, DNGridViewPageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewSelectEventArgsClass = interface(DNObjectClass)
  ['{F6744302-EDE2-5F7E-A2DE-77A6839F5C39}']
  { constructors } 

    {class} function init(newSelectedIndex: Int32): DNGridViewSelectEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewSelectEventArgs')]
  DNGridViewSelectEventArgs = interface(DNObject)
  ['{8394D2D8-F04F-31D4-99B7-886A0CB9C903}']
  { getters & setters } 

    function get_NewSelectedIndex: Int32;
    procedure set_NewSelectedIndex(value: Int32);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewSelectedIndex: Int32 read get_NewSelectedIndex write set_NewSelectedIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewSelectEventArgs = class(TDNGenericImport<DNGridViewSelectEventArgsClass, DNGridViewSelectEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewSortEventArgsClass = interface(DNObjectClass)
  ['{98B7C7BB-A246-521E-80F9-9F39B60737AF}']
  { constructors } 

    {class} function init(sortExpression: string; sortDirection: DNSortDirection): DNGridViewSortEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewSortEventArgs')]
  DNGridViewSortEventArgs = interface(DNObject)
  ['{3B2376B6-B654-30AC-937F-C1289D1B6FBC}']
  { getters & setters } 

    function get_SortDirection: DNSortDirection;
    procedure set_SortDirection(value: DNSortDirection);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SortDirection: DNSortDirection read get_SortDirection write set_SortDirection;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewSortEventArgs = class(TDNGenericImport<DNGridViewSortEventArgsClass, DNGridViewSortEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewUpdateEventArgsClass = interface(DNObjectClass)
  ['{BB14C2D7-C057-5E2F-BD73-FA4F5D5ADCEA}']
  { constructors } 

    {class} function init(rowIndex: Int32): DNGridViewUpdateEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewUpdateEventArgs')]
  DNGridViewUpdateEventArgs = interface(DNObject)
  ['{BDEF807C-4C8B-3E03-A2BE-D2FE1103724C}']
  { getters & setters } 

    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;
    function get_RowIndex: Int32;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
    property RowIndex: Int32 read get_RowIndex;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNGridViewUpdateEventArgs = class(TDNGenericImport<DNGridViewUpdateEventArgsClass, DNGridViewUpdateEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceDisposingEventArgsClass = interface(DNObjectClass)
  ['{0EA31DF1-250D-5B1A-8B9F-16A13DB54D1C}']
  { constructors } 

    {class} function init(objectInstance: DDN.mscorlib.DNObject): DNObjectDataSourceDisposingEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs')]
  DNObjectDataSourceDisposingEventArgs = interface(DNObject)
  ['{44B2689D-E634-3336-97E2-7C7D6FE64C8B}']
  { getters & setters } 

    function get_ObjectInstance: DDN.mscorlib.DNObject;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectInstance: DDN.mscorlib.DNObject read get_ObjectInstance;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNObjectDataSourceDisposingEventArgs = class(TDNGenericImport<DNObjectDataSourceDisposingEventArgsClass, DNObjectDataSourceDisposingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceFilteringEventArgsClass = interface(DNObjectClass)
  ['{4D832E83-7819-5350-97C1-4E8FC6AF047C}']
  { constructors } 

    {class} function init(parameterValues: DDN.System.DNIOrderedDictionary): DNObjectDataSourceFilteringEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs')]
  DNObjectDataSourceFilteringEventArgs = interface(DNObject)
  ['{AEA8DD60-D20C-3AA5-894F-6C47B30F29F3}']
  { getters & setters } 

    function get_ParameterValues: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParameterValues: DDN.System.DNIOrderedDictionary read get_ParameterValues;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNObjectDataSourceFilteringEventArgs = class(TDNGenericImport<DNObjectDataSourceFilteringEventArgsClass, DNObjectDataSourceFilteringEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceMethodEventArgsClass = interface(DNObjectClass)
  ['{5C7CAFFE-E7C3-5547-A8C3-8C8450AC227A}']
  { constructors } 

    {class} function init(inputParameters: DDN.System.DNIOrderedDictionary): DNObjectDataSourceMethodEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs')]
  DNObjectDataSourceMethodEventArgs = interface(DNObject)
  ['{B4F32287-2C56-33CD-8DE1-A732FB78C26A}']
  { getters & setters } 

    function get_InputParameters: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InputParameters: DDN.System.DNIOrderedDictionary read get_InputParameters;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNObjectDataSourceMethodEventArgs = class(TDNGenericImport<DNObjectDataSourceMethodEventArgsClass, DNObjectDataSourceMethodEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceSelectingEventArgsClass = interface(DNObjectDataSourceMethodEventArgsClass)
  ['{B84B4D83-EF34-5913-8494-59977944541E}']
  { constructors } 

    {class} function init(inputParameters: DDN.System.DNIOrderedDictionary; arguments: DNDataSourceSelectArguments; executingSelectCount: Boolean): DNObjectDataSourceSelectingEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs')]
  DNObjectDataSourceSelectingEventArgs = interface(DNObjectDataSourceMethodEventArgs)
  ['{A6EDEDE9-63A5-30D0-A0D4-1837590E43D7}']
  { getters & setters } 

    function get_Arguments: DNDataSourceSelectArguments;
    function get_ExecutingSelectCount: Boolean;
    function get_InputParameters: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Arguments: DNDataSourceSelectArguments read get_Arguments;
    property ExecutingSelectCount: Boolean read get_ExecutingSelectCount;
    property InputParameters: DDN.System.DNIOrderedDictionary read get_InputParameters;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNObjectDataSourceSelectingEventArgs = class(TDNGenericImport<DNObjectDataSourceSelectingEventArgsClass, DNObjectDataSourceSelectingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceCommandEventArgsClass = interface(DNObjectClass)
  ['{B1A7E79E-1EEF-5EF3-A0D6-66A4CC12B752}']
  { constructors } 

    {class} function init(command: DDN.System.Data.DNDbCommand): DNSqlDataSourceCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceCommandEventArgs')]
  DNSqlDataSourceCommandEventArgs = interface(DNObject)
  ['{E6D37990-B1F8-370B-9D40-5E984DD0A587}']
  { getters & setters } 

    function get_Command: DDN.System.Data.DNDbCommand;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Command: DDN.System.Data.DNDbCommand read get_Command;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNSqlDataSourceCommandEventArgs = class(TDNGenericImport<DNSqlDataSourceCommandEventArgsClass, DNSqlDataSourceCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceSelectingEventArgsClass = interface(DNSqlDataSourceCommandEventArgsClass)
  ['{72B2BE33-2A30-5BAE-BF22-0F6EDF61F4CB}']
  { constructors } 

    {class} function init(command: DDN.System.Data.DNDbCommand; arguments: DNDataSourceSelectArguments): DNSqlDataSourceSelectingEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs')]
  DNSqlDataSourceSelectingEventArgs = interface(DNSqlDataSourceCommandEventArgs)
  ['{98693F9A-7671-3076-9BBA-FAAC475A2070}']
  { getters & setters } 

    function get_Arguments: DNDataSourceSelectArguments;
    function get_Command: DDN.System.Data.DNDbCommand;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Arguments: DNDataSourceSelectArguments read get_Arguments;
    property Command: DDN.System.Data.DNDbCommand read get_Command;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNSqlDataSourceSelectingEventArgs = class(TDNGenericImport<DNSqlDataSourceSelectingEventArgsClass, DNSqlDataSourceSelectingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceFilteringEventArgsClass = interface(DNObjectClass)
  ['{8522348D-F12D-545D-B498-A21FF43932E6}']
  { constructors } 

    {class} function init(parameterValues: DDN.System.DNIOrderedDictionary): DNSqlDataSourceFilteringEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs')]
  DNSqlDataSourceFilteringEventArgs = interface(DNObject)
  ['{F1600EE6-D699-375C-8CEF-C743D3248C0C}']
  { getters & setters } 

    function get_ParameterValues: DDN.System.DNIOrderedDictionary;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ParameterValues: DDN.System.DNIOrderedDictionary read get_ParameterValues;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNSqlDataSourceFilteringEventArgs = class(TDNGenericImport<DNSqlDataSourceFilteringEventArgsClass, DNSqlDataSourceFilteringEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartCancelEventArgsClass = interface(DNObjectClass)
  ['{4F071421-F49B-552C-81EC-EAC958C5575C}']
  { constructors } 

    {class} function init(webPart: DNWebPart): DNWebPartCancelEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartCancelEventArgs')]
  DNWebPartCancelEventArgs = interface(DNObject)
  ['{AB0D1927-EEF2-3163-ACAD-E5AEF2048027}']
  { getters & setters } 

    function get_WebPart: DNWebPart;
    procedure set_WebPart(value: DNWebPart);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WebPart: DNWebPart read get_WebPart write set_WebPart;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNWebPartCancelEventArgs = class(TDNGenericImport<DNWebPartCancelEventArgsClass, DNWebPartCancelEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartAddingEventArgsClass = interface(DNWebPartCancelEventArgsClass)
  ['{6C55E0E6-3B90-5F41-B65A-2E2673C903F0}']
  { constructors } 

    {class} function init(webPart: DNWebPart; zone: DNWebPartZoneBase; zoneIndex: Int32): DNWebPartAddingEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartAddingEventArgs')]
  DNWebPartAddingEventArgs = interface(DNWebPartCancelEventArgs)
  ['{CFD971FF-DAE4-3EAA-9A7E-C8E33345BBE8}']
  { getters & setters } 

    function get_Zone: DNWebPartZoneBase;
    procedure set_Zone(value: DNWebPartZoneBase);
    function get_ZoneIndex: Int32;
    procedure set_ZoneIndex(value: Int32);
    function get_WebPart: DNWebPart;
    procedure set_WebPart(value: DNWebPart);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Zone: DNWebPartZoneBase read get_Zone write set_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex write set_ZoneIndex;
    property WebPart: DNWebPart read get_WebPart write set_WebPart;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNWebPartAddingEventArgs = class(TDNGenericImport<DNWebPartAddingEventArgsClass, DNWebPartAddingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartMovingEventArgsClass = interface(DNWebPartCancelEventArgsClass)
  ['{07C2004A-BD65-57AE-8F02-2FD19256A776}']
  { constructors } 

    {class} function init(webPart: DNWebPart; zone: DNWebPartZoneBase; zoneIndex: Int32): DNWebPartMovingEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartMovingEventArgs')]
  DNWebPartMovingEventArgs = interface(DNWebPartCancelEventArgs)
  ['{A5D44AC8-8D34-3473-AAA2-F5482A238F4A}']
  { getters & setters } 

    function get_Zone: DNWebPartZoneBase;
    procedure set_Zone(value: DNWebPartZoneBase);
    function get_ZoneIndex: Int32;
    procedure set_ZoneIndex(value: Int32);
    function get_WebPart: DNWebPart;
    procedure set_WebPart(value: DNWebPart);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Zone: DNWebPartZoneBase read get_Zone write set_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex write set_ZoneIndex;
    property WebPart: DNWebPart read get_WebPart write set_WebPart;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNWebPartMovingEventArgs = class(TDNGenericImport<DNWebPartMovingEventArgsClass, DNWebPartMovingEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartConnectionsCancelEventArgsClass = interface(DNObjectClass)
  ['{42BE2AB3-A76E-5E3E-B751-E0D954F6D9D9}']
  { constructors } 

    {class} function init(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint): DNWebPartConnectionsCancelEventArgs; overload;
    {class} function init(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint; connection: DNWebPartConnection): DNWebPartConnectionsCancelEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnectionsCancelEventArgs')]
  DNWebPartConnectionsCancelEventArgs = interface(DNObject)
  ['{FCB2CC9E-E952-3FF5-ACB8-0AD0FB039788}']
  { getters & setters } 

    function get_Connection: DNWebPartConnection;
    function get_Consumer: DNWebPart;
    function get_ConsumerConnectionPoint: DNConsumerConnectionPoint;
    function get_Provider: DNWebPart;
    function get_ProviderConnectionPoint: DNProviderConnectionPoint;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNWebPartConnection read get_Connection;
    property Consumer: DNWebPart read get_Consumer;
    property ConsumerConnectionPoint: DNConsumerConnectionPoint read get_ConsumerConnectionPoint;
    property Provider: DNWebPart read get_Provider;
    property ProviderConnectionPoint: DNProviderConnectionPoint read get_ProviderConnectionPoint;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNWebPartConnectionsCancelEventArgs = class(TDNGenericImport<DNWebPartConnectionsCancelEventArgsClass, DNWebPartConnectionsCancelEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDisplayModeCancelEventArgsClass = interface(DNObjectClass)
  ['{DFE44EFF-DCE4-5962-89A0-3B75DEDA8C3B}']
  { constructors } 

    {class} function init(newDisplayMode: DNWebPartDisplayMode): DNWebPartDisplayModeCancelEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayModeCancelEventArgs')]
  DNWebPartDisplayModeCancelEventArgs = interface(DNObject)
  ['{DB6DE869-E373-3A95-98FE-2AADBC9DA948}']
  { getters & setters } 

    function get_NewDisplayMode: DNWebPartDisplayMode;
    procedure set_NewDisplayMode(value: DNWebPartDisplayMode);
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewDisplayMode: DNWebPartDisplayMode read get_NewDisplayMode write set_NewDisplayMode;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNWebPartDisplayModeCancelEventArgs = class(TDNGenericImport<DNWebPartDisplayModeCancelEventArgsClass, DNWebPartDisplayModeCancelEventArgs>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNBuildManagerHostUnloadEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{42DCDF1D-BC58-5199-9C78-00F5E56FE5ED}']
  { constructors } 

    {class} function init(reason: DNApplicationShutdownReason): DNBuildManagerHostUnloadEventArgs;

  end;

  [DNTypeName('System.Web.Compilation.BuildManagerHostUnloadEventArgs')]
  DNBuildManagerHostUnloadEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1EEFF95B-5776-3B29-94F8-612642AB1962}']
  { getters & setters } 

    function get_Reason: DNApplicationShutdownReason;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Reason: DNApplicationShutdownReason read get_Reason;
  end;

  TDNBuildManagerHostUnloadEventArgs = class(TDNGenericImport<DNBuildManagerHostUnloadEventArgsClass, DNBuildManagerHostUnloadEventArgs>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{32334520-93B3-5E7C-B280-EBFD37D7CABA}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext; parentNode: DNModelValidationNode): DNModelValidatedEventArgs;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidatedEventArgs')]
  DNModelValidatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{9DA67F39-FD40-32A2-BAB4-EC2F686B2A7E}']
  { getters & setters } 

    function get_ModelBindingExecutionContext: DNModelBindingExecutionContext;
    function get_ParentNode: DNModelValidationNode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelBindingExecutionContext: DNModelBindingExecutionContext read get_ModelBindingExecutionContext;
    property ParentNode: DNModelValidationNode read get_ParentNode;
  end;

  TDNModelValidatedEventArgs = class(TDNGenericImport<DNModelValidatedEventArgsClass, DNModelValidatedEventArgs>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileAutoSaveEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F2607013-9249-54D9-A17C-879CC3BCCE28}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNProfileAutoSaveEventArgs;

  end;

  [DNTypeName('System.Web.Profile.ProfileAutoSaveEventArgs')]
  DNProfileAutoSaveEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{1ECAD750-99C2-341A-B7D8-76201227E35E}']
  { getters & setters } 

    function get_Context: DNHttpContext;
    function get_ContinueWithProfileAutoSave: Boolean;
    procedure set_ContinueWithProfileAutoSave(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Context: DNHttpContext read get_Context;
    property ContinueWithProfileAutoSave: Boolean read get_ContinueWithProfileAutoSave write set_ContinueWithProfileAutoSave;
  end;

  TDNProfileAutoSaveEventArgs = class(TDNGenericImport<DNProfileAutoSaveEventArgsClass, DNProfileAutoSaveEventArgs>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{908AF131-E1EE-50B9-BB40-73CFA76C38C4}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNProfileEventArgs;

  end;

  [DNTypeName('System.Web.Profile.ProfileEventArgs')]
  DNProfileEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A2631499-57B9-3099-A425-3F28C278C0FC}']
  { getters & setters } 

    function get_Context: DNHttpContext;
    function get_Profile: DNProfileBase;
    procedure set_Profile(value: DNProfileBase);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Context: DNHttpContext read get_Context;
    property Profile: DNProfileBase read get_Profile write set_Profile;
  end;

  TDNProfileEventArgs = class(TDNGenericImport<DNProfileEventArgsClass, DNProfileEventArgs>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileMigrateEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B3CDE806-3CA3-5097-A6AD-0378F8D5D53E}']
  { constructors } 

    {class} function init(context: DNHttpContext; anonymousId: string): DNProfileMigrateEventArgs;

  end;

  [DNTypeName('System.Web.Profile.ProfileMigrateEventArgs')]
  DNProfileMigrateEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{9F78A739-D062-3F37-BDC9-217F003A6B4A}']
  { getters & setters } 

    function get_Context: DNHttpContext;
    function get_AnonymousID: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Context: DNHttpContext read get_Context;
    property AnonymousID: string read get_AnonymousID;
  end;

  TDNProfileMigrateEventArgs = class(TDNGenericImport<DNProfileMigrateEventArgsClass, DNProfileMigrateEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNAnonymousIdentificationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A4C7E5CD-45BB-5A43-A855-250DFC410E2F}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNAnonymousIdentificationEventArgs;

  end;

  [DNTypeName('System.Web.Security.AnonymousIdentificationEventArgs')]
  DNAnonymousIdentificationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{5C3D8017-EA8F-3D61-AD21-426453476461}']
  { getters & setters } 

    function get_AnonymousID: string;
    procedure set_AnonymousID(value: string);
    function get_Context: DNHttpContext;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousID: string read get_AnonymousID write set_AnonymousID;
    property Context: DNHttpContext read get_Context;
  end;

  TDNAnonymousIdentificationEventArgs = class(TDNGenericImport<DNAnonymousIdentificationEventArgsClass, DNAnonymousIdentificationEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNDefaultAuthenticationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5EC48444-D1EC-5A74-9F5C-D99276CDCD58}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNDefaultAuthenticationEventArgs;

  end;

  [DNTypeName('System.Web.Security.DefaultAuthenticationEventArgs')]
  DNDefaultAuthenticationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2D565066-275B-3CE6-B80F-E1D2D82288F6}']
  { getters & setters } 

    function get_Context: DNHttpContext;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Context: DNHttpContext read get_Context;
  end;

  TDNDefaultAuthenticationEventArgs = class(TDNGenericImport<DNDefaultAuthenticationEventArgsClass, DNDefaultAuthenticationEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNFormsAuthenticationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{92A78953-FA83-56E3-823C-AB7BA9A727C4}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNFormsAuthenticationEventArgs;

  end;

  [DNTypeName('System.Web.Security.FormsAuthenticationEventArgs')]
  DNFormsAuthenticationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{3E12B0AC-FB68-3063-B63E-BEF4E81DB413}']
  { getters & setters } 

    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_Context: DNHttpContext;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property Context: DNHttpContext read get_Context;
  end;

  TDNFormsAuthenticationEventArgs = class(TDNGenericImport<DNFormsAuthenticationEventArgsClass, DNFormsAuthenticationEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNPassportAuthenticationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{2E3A87C9-9761-5A74-8236-F8CF96E8A326}']
  { constructors } 

    {class} function init(identity: DNPassportIdentity; context: DNHttpContext): DNPassportAuthenticationEventArgs;

  end;

  [DNTypeName('System.Web.Security.PassportAuthenticationEventArgs')]
  DNPassportAuthenticationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{CB8F5235-B721-3E93-8EA7-F48FB48827D6}']
  { getters & setters } 

    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_Context: DNHttpContext;
    function get_Identity: DNPassportIdentity;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property Context: DNHttpContext read get_Context;
    property Identity: DNPassportIdentity read get_Identity;
  end;

  TDNPassportAuthenticationEventArgs = class(TDNGenericImport<DNPassportAuthenticationEventArgsClass, DNPassportAuthenticationEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleManagerEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{67DABF7E-5F6A-5546-9D0D-9CB048669819}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNRoleManagerEventArgs;

  end;

  [DNTypeName('System.Web.Security.RoleManagerEventArgs')]
  DNRoleManagerEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0C0E0267-FF29-3583-AD62-BF0FA2177D55}']
  { getters & setters } 

    function get_RolesPopulated: Boolean;
    procedure set_RolesPopulated(value: Boolean);
    function get_Context: DNHttpContext;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RolesPopulated: Boolean read get_RolesPopulated write set_RolesPopulated;
    property Context: DNHttpContext read get_Context;
  end;

  TDNRoleManagerEventArgs = class(TDNGenericImport<DNRoleManagerEventArgsClass, DNRoleManagerEventArgs>) end;

  //-------------namespace: System.Web.Security----------------
  DNWindowsAuthenticationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{DDAFF04E-0333-5743-9666-6AB61F613E4C}']
  { constructors } 

    {class} function init(identity: DDN.mscorlib.DNWindowsIdentity; context: DNHttpContext): DNWindowsAuthenticationEventArgs;

  end;

  [DNTypeName('System.Web.Security.WindowsAuthenticationEventArgs')]
  DNWindowsAuthenticationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{3EAAA4D2-B9AB-390D-9485-7979D246912F}']
  { getters & setters } 

    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_Context: DNHttpContext;
    function get_Identity: DDN.mscorlib.DNWindowsIdentity;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property Context: DNHttpContext read get_Context;
    property Identity: DDN.mscorlib.DNWindowsIdentity read get_Identity;
  end;

  TDNWindowsAuthenticationEventArgs = class(TDNGenericImport<DNWindowsAuthenticationEventArgsClass, DNWindowsAuthenticationEventArgs>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapResolveEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B9CD19C0-362C-50D0-B40F-5037C6B7791B}']
  { constructors } 

    {class} function init(context: DNHttpContext; provider: DNSiteMapProvider): DNSiteMapResolveEventArgs;

  end;

  [DNTypeName('System.Web.SiteMapResolveEventArgs')]
  DNSiteMapResolveEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2756097A-A2A0-36A1-A6D5-624144F2AAFD}']
  { getters & setters } 

    function get_Provider: DNSiteMapProvider;
    function get_Context: DNHttpContext;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Provider: DNSiteMapProvider read get_Provider;
    property Context: DNHttpContext read get_Context;
  end;

  TDNSiteMapResolveEventArgs = class(TDNGenericImport<DNSiteMapResolveEventArgsClass, DNSiteMapResolveEventArgs>) end;

  //-------------namespace: System.Web----------------
  DNTraceContextEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{67505178-3A29-5C36-A10C-0EED4346329B}']
  { constructors } 

    {class} function init(records: DDN.mscorlib.DNICollection): DNTraceContextEventArgs;

  end;

  [DNTypeName('System.Web.TraceContextEventArgs')]
  DNTraceContextEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C9B6CD3F-AFA0-346F-94D6-911498612205}']
  { getters & setters } 

    function get_TraceRecords: DDN.mscorlib.DNICollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TraceRecords: DDN.mscorlib.DNICollection read get_TraceRecords;
  end;

  TDNTraceContextEventArgs = class(TDNGenericImport<DNTraceContextEventArgsClass, DNTraceContextEventArgs>) end;

  //-------------namespace: System.Web.UI----------------
  DNImageClickEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{389FCF07-F299-596A-AA65-7DB1721015B6}']
  { constructors } 

    {class} function init(x: Int32; y: Int32): DNImageClickEventArgs; overload;
    {class} function init(x: Int32; y: Int32; xRaw: Double; yRaw: Double): DNImageClickEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.ImageClickEventArgs')]
  DNImageClickEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FFA28DD4-46E1-3DAB-A5E0-3D195909D4EB}']
  { fields getter & setter } 

   function __fakeFieldGet_X: Int32;
   procedure __fakeFieldSet_X(value: Int32);
   function __fakeFieldGet_Y: Int32;
   procedure __fakeFieldSet_Y(value: Int32);
   function __fakeFieldGet_XRaw: Double;
   procedure __fakeFieldSet_XRaw(value: Double);
   function __fakeFieldGet_YRaw: Double;
   procedure __fakeFieldSet_YRaw(value: Double);

  { fields } 

   property X: Int32 read __fakeFieldGet_X write __fakeFieldSet_X;
   property Y: Int32 read __fakeFieldGet_Y write __fakeFieldSet_Y;
   property XRaw: Double read __fakeFieldGet_XRaw write __fakeFieldSet_XRaw;
   property YRaw: Double read __fakeFieldGet_YRaw write __fakeFieldSet_YRaw;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNImageClickEventArgs = class(TDNGenericImport<DNImageClickEventArgsClass, DNImageClickEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAdCreatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{16DFED3F-EE8B-558E-B519-E6B71FB1F88E}']
  { constructors } 

    {class} function init(adProperties: DDN.mscorlib.DNIDictionary): DNAdCreatedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.AdCreatedEventArgs')]
  DNAdCreatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0935440F-DC96-38E5-BD7B-FEFDDB34E15C}']
  { getters & setters } 

    function get_AdProperties: DDN.mscorlib.DNIDictionary;
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AdProperties: DDN.mscorlib.DNIDictionary read get_AdProperties;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
  end;

  TDNAdCreatedEventArgs = class(TDNGenericImport<DNAdCreatedEventArgsClass, DNAdCreatedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAuthenticateEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A93A5253-0BBA-5E26-BC8B-7223629781E1}']
  { constructors } 

    {class} function init: DNAuthenticateEventArgs; overload;
    {class} function init(authenticated: Boolean): DNAuthenticateEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.AuthenticateEventArgs')]
  DNAuthenticateEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{A88B5511-A518-377A-A32D-123B6451FFE6}']
  { getters & setters } 

    function get_Authenticated: Boolean;
    procedure set_Authenticated(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Authenticated: Boolean read get_Authenticated write set_Authenticated;
  end;

  TDNAuthenticateEventArgs = class(TDNGenericImport<DNAuthenticateEventArgsClass, DNAuthenticateEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBulletedListEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F1E3B9E0-9D44-5BA2-9D20-52C677C3EC21}']
  { constructors } 

    {class} function init(index: Int32): DNBulletedListEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.BulletedListEventArgs')]
  DNBulletedListEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{0EADC473-DDF6-36D4-A5FA-913365E12426}']
  { getters & setters } 

    function get_Index: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Index: Int32 read get_Index;
  end;

  TDNBulletedListEventArgs = class(TDNGenericImport<DNBulletedListEventArgsClass, DNBulletedListEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCallingDataMethodsEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{993E3B14-1155-55C7-A744-E9AB19082FEC}']
  { constructors } 

    {class} function init: DNCallingDataMethodsEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.CallingDataMethodsEventArgs')]
  DNCallingDataMethodsEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{41D72835-1430-3D41-8544-19783E5959B1}']
  { getters & setters } 

    function get_DataMethodsType: DDN.mscorlib.DNType;
    procedure set_DataMethodsType(value: DDN.mscorlib.DNType);
    function get_DataMethodsObject: DDN.mscorlib.DNObject;
    procedure set_DataMethodsObject(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataMethodsType: DDN.mscorlib.DNType read get_DataMethodsType write set_DataMethodsType;
    property DataMethodsObject: DDN.mscorlib.DNObject read get_DataMethodsObject write set_DataMethodsObject;
  end;

  TDNCallingDataMethodsEventArgs = class(TDNGenericImport<DNCallingDataMethodsEventArgsClass, DNCallingDataMethodsEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCommandEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F1C3C05A-F591-5C78-9921-9E9293FC2306}']
  { constructors } 

    {class} function init(e: DNCommandEventArgs): DNCommandEventArgs; overload;
    {class} function init(commandName: string; argument: DDN.mscorlib.DNObject): DNCommandEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.CommandEventArgs')]
  DNCommandEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{64A1855B-35C9-371C-A530-2B1D1BEC7B1A}']
  { getters & setters } 

    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNCommandEventArgs = class(TDNGenericImport<DNCommandEventArgsClass, DNCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{19504B28-1D85-5B57-AD4C-73007CF01B33}']
  { constructors } 

    {class} function init(item: DNDataGridItem; commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNDataGridCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridCommandEventArgs')]
  DNDataGridCommandEventArgs = interface(DNCommandEventArgs)
  ['{B3427FE2-4857-3CE0-B104-F9D3D10E5CCE}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Item: DNDataGridItem;
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property Item: DNDataGridItem read get_Item;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNDataGridCommandEventArgs = class(TDNGenericImport<DNDataGridCommandEventArgsClass, DNDataGridCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataListCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{8228F3DE-7208-534D-B525-CDC7D9F81B22}']
  { constructors } 

    {class} function init(item: DNDataListItem; commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNDataListCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataListCommandEventArgs')]
  DNDataListCommandEventArgs = interface(DNCommandEventArgs)
  ['{BCF2510E-64FE-3967-AA1B-7E93A510E9A5}']
  { getters & setters } 

    function get_Item: DNDataListItem;
    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNDataListItem read get_Item;
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNDataListCommandEventArgs = class(TDNGenericImport<DNDataListCommandEventArgsClass, DNDataListCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{B94767CC-A7F9-5965-96F5-98438F3124DA}']
  { constructors } 

    {class} function init(commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNDetailsViewCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewCommandEventArgs')]
  DNDetailsViewCommandEventArgs = interface(DNCommandEventArgs)
  ['{23D1A514-7999-3657-AD8C-71BD611C2AA5}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property Handled: Boolean read get_Handled write set_Handled;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNDetailsViewCommandEventArgs = class(TDNGenericImport<DNDetailsViewCommandEventArgsClass, DNDetailsViewCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{8EDA0982-E549-5135-8281-1FFC58F5FBED}']
  { constructors } 

    {class} function init(commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNFormViewCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewCommandEventArgs')]
  DNFormViewCommandEventArgs = interface(DNCommandEventArgs)
  ['{B10B6CA9-EBE0-39B0-8EF0-D473B7B96DA7}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property Handled: Boolean read get_Handled write set_Handled;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNFormViewCommandEventArgs = class(TDNGenericImport<DNFormViewCommandEventArgsClass, DNFormViewCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{DAB0153B-C716-56D6-815C-83BEAAD84B0D}']
  { constructors } 

    {class} function init(row: DNGridViewRow; commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNGridViewCommandEventArgs; overload;
    {class} function init(commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNGridViewCommandEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewCommandEventArgs')]
  DNGridViewCommandEventArgs = interface(DNCommandEventArgs)
  ['{367AFB90-5ACA-34F0-8819-C8E46A0CD0D8}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property Handled: Boolean read get_Handled write set_Handled;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNGridViewCommandEventArgs = class(TDNGenericImport<DNGridViewCommandEventArgsClass, DNGridViewCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuEventArgsClass = interface(DNCommandEventArgsClass)
  ['{5601952C-EAE2-5153-A824-670B93A49BFE}']
  { constructors } 

    {class} function init(item: DNMenuItem; commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNMenuEventArgs; overload;
    {class} function init(item: DNMenuItem): DNMenuEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuEventArgs')]
  DNMenuEventArgs = interface(DNCommandEventArgs)
  ['{2935E55E-3966-36F9-AFB6-AB84F4025627}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_Item: DNMenuItem;
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property Item: DNMenuItem read get_Item;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNMenuEventArgs = class(TDNGenericImport<DNMenuEventArgsClass, DNMenuEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeaterCommandEventArgsClass = interface(DNCommandEventArgsClass)
  ['{4E42982F-DBFB-549D-B66A-1D1C77146F98}']
  { constructors } 

    {class} function init(item: DNRepeaterItem; commandSource: DDN.mscorlib.DNObject; originalArgs: DNCommandEventArgs): DNRepeaterCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.RepeaterCommandEventArgs')]
  DNRepeaterCommandEventArgs = interface(DNCommandEventArgs)
  ['{32F2B770-66D9-3C76-B454-34F7B8F7F32D}']
  { getters & setters } 

    function get_Item: DNRepeaterItem;
    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_CommandName: string;
    function get_CommandArgument: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNRepeaterItem read get_Item;
    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property CommandName: string read get_CommandName;
    property CommandArgument: DDN.mscorlib.DNObject read get_CommandArgument;
  end;

  TDNRepeaterCommandEventArgs = class(TDNGenericImport<DNRepeaterCommandEventArgsClass, DNRepeaterCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCreateUserErrorEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{73C19213-C525-5C48-871F-567E2C93CEFA}']
  { constructors } 

    {class} function init(s: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus): DNCreateUserErrorEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.CreateUserErrorEventArgs')]
  DNCreateUserErrorEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{28FAE46E-D4F2-3096-A8DF-177708711D5C}']
  { getters & setters } 

    function get_CreateUserError: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus;
    procedure set_CreateUserError(value: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CreateUserError: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus read get_CreateUserError write set_CreateUserError;
  end;

  TDNCreateUserErrorEventArgs = class(TDNGenericImport<DNCreateUserErrorEventArgsClass, DNCreateUserErrorEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCreatingModelDataSourceEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{324DF66A-539C-5072-984B-E0F31AF4BE3A}']
  { constructors } 

    {class} function init: DNCreatingModelDataSourceEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.CreatingModelDataSourceEventArgs')]
  DNCreatingModelDataSourceEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{54956774-7099-3538-A7EB-8B14752B3235}']
  { getters & setters } 

    function get_ModelDataSource: DNModelDataSource;
    procedure set_ModelDataSource(value: DNModelDataSource);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelDataSource: DNModelDataSource read get_ModelDataSource write set_ModelDataSource;
  end;

  TDNCreatingModelDataSourceEventArgs = class(TDNGenericImport<DNCreatingModelDataSourceEventArgsClass, DNCreatingModelDataSourceEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{F46EA941-6E1D-52E4-A0AB-BD28B9E2A345}']
  { constructors } 

    {class} function init(item: DNDataGridItem): DNDataGridItemEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridItemEventArgs')]
  DNDataGridItemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2288471D-D122-349D-87C6-518604AFC9B8}']
  { getters & setters } 

    function get_Item: DNDataGridItem;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNDataGridItem read get_Item;
  end;

  TDNDataGridItemEventArgs = class(TDNGenericImport<DNDataGridItemEventArgsClass, DNDataGridItemEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridPageChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E9AC49A0-787C-5566-AF1E-F8CC8B82B343}']
  { constructors } 

    {class} function init(commandSource: DDN.mscorlib.DNObject; newPageIndex: Int32): DNDataGridPageChangedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridPageChangedEventArgs')]
  DNDataGridPageChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D26CF7C6-FDDD-32D9-AA79-8425EA146289}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_NewPageIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property NewPageIndex: Int32 read get_NewPageIndex;
  end;

  TDNDataGridPageChangedEventArgs = class(TDNGenericImport<DNDataGridPageChangedEventArgsClass, DNDataGridPageChangedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridSortCommandEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4BAD3DD9-CC0D-511C-B21D-8B6421CB3C94}']
  { constructors } 

    {class} function init(commandSource: DDN.mscorlib.DNObject; dce: DNDataGridCommandEventArgs): DNDataGridSortCommandEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridSortCommandEventArgs')]
  DNDataGridSortCommandEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{E9AEAF1E-38C6-3D0F-952B-9C637C41F7D7}']
  { getters & setters } 

    function get_CommandSource: DDN.mscorlib.DNObject;
    function get_SortExpression: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandSource: DDN.mscorlib.DNObject read get_CommandSource;
    property SortExpression: string read get_SortExpression;
  end;

  TDNDataGridSortCommandEventArgs = class(TDNGenericImport<DNDataGridSortCommandEventArgsClass, DNDataGridSortCommandEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataListItemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{ADB9C8D1-8EFF-5BD4-999B-61F92E5D0860}']
  { constructors } 

    {class} function init(item: DNDataListItem): DNDataListItemEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataListItemEventArgs')]
  DNDataListItemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{5F2C40D9-6F27-3CF6-9346-0921BFC032B7}']
  { getters & setters } 

    function get_Item: DNDataListItem;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNDataListItem read get_Item;
  end;

  TDNDataListItemEventArgs = class(TDNGenericImport<DNDataListItemEventArgsClass, DNDataListItemEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewDeletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A4ABAB5D-E424-5375-8966-14BDF1D6A608}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNDetailsViewDeletedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewDeletedEventArgs')]
  DNDetailsViewDeletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{95CBE941-9A15-3091-AA7F-A103A4D098FB}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNDetailsViewDeletedEventArgs = class(TDNGenericImport<DNDetailsViewDeletedEventArgsClass, DNDetailsViewDeletedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewInsertedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B4FCE5FB-20E4-51DB-9E20-566DC55BEE4B}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNDetailsViewInsertedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewInsertedEventArgs')]
  DNDetailsViewInsertedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{AF966D82-B811-3B45-9DBD-023B9C69929F}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInInsertMode: Boolean;
    procedure set_KeepInInsertMode(value: Boolean);
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property KeepInInsertMode: Boolean read get_KeepInInsertMode write set_KeepInInsertMode;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNDetailsViewInsertedEventArgs = class(TDNGenericImport<DNDetailsViewInsertedEventArgsClass, DNDetailsViewInsertedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{B8907521-7B8B-555E-90EA-483B99F3CA9E}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNDetailsViewUpdatedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewUpdatedEventArgs')]
  DNDetailsViewUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{49DC1CE7-95C5-3D54-95EF-D0296D6AE99A}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInEditMode: Boolean;
    procedure set_KeepInEditMode(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property KeepInEditMode: Boolean read get_KeepInEditMode write set_KeepInEditMode;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
  end;

  TDNDetailsViewUpdatedEventArgs = class(TDNGenericImport<DNDetailsViewUpdatedEventArgsClass, DNDetailsViewUpdatedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewDeletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{349A7F26-6489-5D55-8717-A939FEC93F36}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNFormViewDeletedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewDeletedEventArgs')]
  DNFormViewDeletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FC64D976-1387-3E0F-A7F0-8BAD7CA7F7E6}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNFormViewDeletedEventArgs = class(TDNGenericImport<DNFormViewDeletedEventArgsClass, DNFormViewDeletedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewInsertedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{547D7D41-359A-53F6-9905-4DCCC52E513B}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNFormViewInsertedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewInsertedEventArgs')]
  DNFormViewInsertedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{3F695168-746E-3A1A-A0ED-825E262E00C8}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInInsertMode: Boolean;
    procedure set_KeepInInsertMode(value: Boolean);
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property KeepInInsertMode: Boolean read get_KeepInInsertMode write set_KeepInInsertMode;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNFormViewInsertedEventArgs = class(TDNGenericImport<DNFormViewInsertedEventArgsClass, DNFormViewInsertedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3D8163BA-DAD0-53AA-938A-847B6C4CB67A}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNFormViewUpdatedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewUpdatedEventArgs')]
  DNFormViewUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{66D0300F-F358-3D29-82A3-E1BE762D40AB}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInEditMode: Boolean;
    procedure set_KeepInEditMode(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property KeepInEditMode: Boolean read get_KeepInEditMode write set_KeepInEditMode;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
  end;

  TDNFormViewUpdatedEventArgs = class(TDNGenericImport<DNFormViewUpdatedEventArgsClass, DNFormViewUpdatedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewDeletedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4AA15383-B124-5C6D-8E1C-6F008CE0CED4}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNGridViewDeletedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewDeletedEventArgs')]
  DNGridViewDeletedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{905B8261-5576-3F1E-8B47-66D0383764B2}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNGridViewDeletedEventArgs = class(TDNGenericImport<DNGridViewDeletedEventArgsClass, DNGridViewDeletedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{EA8AF41E-4D3D-5A21-A17E-16BF79EAECFE}']
  { constructors } 

    {class} function init(row: DNGridViewRow): DNGridViewRowEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewRowEventArgs')]
  DNGridViewRowEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{12B33821-6405-3809-B39A-75DC0CDEFF62}']
  { getters & setters } 

    function get_Row: DNGridViewRow;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Row: DNGridViewRow read get_Row;
  end;

  TDNGridViewRowEventArgs = class(TDNGenericImport<DNGridViewRowEventArgsClass, DNGridViewRowEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewUpdatedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{E5E6EEE2-BAC0-5B74-BD1E-B4DCFCCD29D4}']
  { constructors } 

    {class} function init(affectedRows: Int32; e: DDN.mscorlib.DNException): DNGridViewUpdatedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewUpdatedEventArgs')]
  DNGridViewUpdatedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{39104AF9-EDB1-3EBA-99E7-2B69B6ECD2FA}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_KeepInEditMode: Boolean;
    procedure set_KeepInEditMode(value: Boolean);
    function get_Keys: DDN.System.DNIOrderedDictionary;
    function get_NewValues: DDN.System.DNIOrderedDictionary;
    function get_OldValues: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property KeepInEditMode: Boolean read get_KeepInEditMode write set_KeepInEditMode;
    property Keys: DDN.System.DNIOrderedDictionary read get_Keys;
    property NewValues: DDN.System.DNIOrderedDictionary read get_NewValues;
    property OldValues: DDN.System.DNIOrderedDictionary read get_OldValues;
  end;

  TDNGridViewUpdatedEventArgs = class(TDNGenericImport<DNGridViewUpdatedEventArgsClass, DNGridViewUpdatedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNImageMapEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{68B31B76-D9FD-5C96-A7E4-849137CD9D85}']
  { constructors } 

    {class} function init(value: string): DNImageMapEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ImageMapEventArgs')]
  DNImageMapEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C1DD0C04-0404-3306-8A8F-6D0D16074EA0}']
  { getters & setters } 

    function get_PostBackValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PostBackValue: string read get_PostBackValue;
  end;

  TDNImageMapEventArgs = class(TDNGenericImport<DNImageMapEventArgsClass, DNImageMapEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLoginCancelEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{33D50118-1301-5D7B-BF31-BD6B7C6ECD6F}']
  { constructors } 

    {class} function init: DNLoginCancelEventArgs; overload;
    {class} function init(cancel: Boolean): DNLoginCancelEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.LoginCancelEventArgs')]
  DNLoginCancelEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{544B1B5C-5A99-36A7-8FC6-C1AC02AD66AF}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNLoginCancelEventArgs = class(TDNGenericImport<DNLoginCancelEventArgsClass, DNLoginCancelEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMailMessageEventArgsClass = interface(DNLoginCancelEventArgsClass)
  ['{F2519313-2957-5B40-A65A-B655217B16E1}']
  { constructors } 

    {class} function init(message: DDN.System.DNMailMessage): DNMailMessageEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.MailMessageEventArgs')]
  DNMailMessageEventArgs = interface(DNLoginCancelEventArgs)
  ['{E6B01212-AFB7-3395-83FD-20ABF1CB42FB}']
  { getters & setters } 

    function get_Message: DDN.System.DNMailMessage;
    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Message: DDN.System.DNMailMessage read get_Message;
    property Cancel: Boolean read get_Cancel write set_Cancel;
  end;

  TDNMailMessageEventArgs = class(TDNGenericImport<DNMailMessageEventArgsClass, DNMailMessageEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4445E943-3FD5-5661-8549-DCE3CD5B4792}']
  { constructors } 

    {class} function init(objectInstance: DDN.mscorlib.DNObject): DNObjectDataSourceEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceEventArgs')]
  DNObjectDataSourceEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{C9976F4C-FA4B-3D65-A934-A4FC41BC000D}']
  { getters & setters } 

    function get_ObjectInstance: DDN.mscorlib.DNObject;
    procedure set_ObjectInstance(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ObjectInstance: DDN.mscorlib.DNObject read get_ObjectInstance write set_ObjectInstance;
  end;

  TDNObjectDataSourceEventArgs = class(TDNGenericImport<DNObjectDataSourceEventArgsClass, DNObjectDataSourceEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceStatusEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{04BF2B2D-C79D-5CDE-AAFF-D7A67AA6570A}']
  { constructors } 

    {class} function init(returnValue: DDN.mscorlib.DNObject; outputParameters: DDN.mscorlib.DNIDictionary): DNObjectDataSourceStatusEventArgs; overload;
    {class} function init(returnValue: DDN.mscorlib.DNObject; outputParameters: DDN.mscorlib.DNIDictionary; exception: DDN.mscorlib.DNException): DNObjectDataSourceStatusEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs')]
  DNObjectDataSourceStatusEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{312DF21B-98F1-379C-B2A6-C3DF354E2105}']
  { getters & setters } 

    function get_OutputParameters: DDN.mscorlib.DNIDictionary;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);
    function get_ReturnValue: DDN.mscorlib.DNObject;
    function get_AffectedRows: Int32;
    procedure set_AffectedRows(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OutputParameters: DDN.mscorlib.DNIDictionary read get_OutputParameters;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
    property ReturnValue: DDN.mscorlib.DNObject read get_ReturnValue;
    property AffectedRows: Int32 read get_AffectedRows write set_AffectedRows;
  end;

  TDNObjectDataSourceStatusEventArgs = class(TDNGenericImport<DNObjectDataSourceStatusEventArgsClass, DNObjectDataSourceStatusEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeaterItemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{56E91DF5-99BC-5A7A-B282-88AADD9F76FB}']
  { constructors } 

    {class} function init(item: DNRepeaterItem): DNRepeaterItemEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.RepeaterItemEventArgs')]
  DNRepeaterItemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{82BFF63E-C1A0-35EA-81C8-1A24D70F0575}']
  { getters & setters } 

    function get_Item: DNRepeaterItem;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNRepeaterItem read get_Item;
  end;

  TDNRepeaterItemEventArgs = class(TDNGenericImport<DNRepeaterItemEventArgsClass, DNRepeaterItemEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSendMailErrorEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4E6905BB-CB0E-5285-8D56-1A99AEE67D65}']
  { constructors } 

    {class} function init(e: DDN.mscorlib.DNException): DNSendMailErrorEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SendMailErrorEventArgs')]
  DNSendMailErrorEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{B70628A1-9856-3B17-A704-0CD3443AF05B}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    procedure set_Exception(value: DDN.mscorlib.DNException);
    function get_Handled: Boolean;
    procedure set_Handled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exception: DDN.mscorlib.DNException read get_Exception write set_Exception;
    property Handled: Boolean read get_Handled write set_Handled;
  end;

  TDNSendMailErrorEventArgs = class(TDNGenericImport<DNSendMailErrorEventArgsClass, DNSendMailErrorEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNServerValidateEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FCBD8C52-C4B0-5968-BD15-97B3A6B451CF}']
  { constructors } 

    {class} function init(value: string; isValid: Boolean): DNServerValidateEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.ServerValidateEventArgs')]
  DNServerValidateEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F9DCDE1E-3E34-3FC7-B489-D4154353EBF0}']
  { getters & setters } 

    function get_Value: string;
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
    property IsValid: Boolean read get_IsValid write set_IsValid;
  end;

  TDNServerValidateEventArgs = class(TDNGenericImport<DNServerValidateEventArgsClass, DNServerValidateEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapNodeItemEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{BAA7DDC0-AB52-5DF5-B8B4-DEA197C8EDD9}']
  { constructors } 

    {class} function init(item: DNSiteMapNodeItem): DNSiteMapNodeItemEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapNodeItemEventArgs')]
  DNSiteMapNodeItemEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{BD4735BA-FABF-3384-8864-04347BB8555A}']
  { getters & setters } 

    function get_Item: DNSiteMapNodeItem;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item: DNSiteMapNodeItem read get_Item;
  end;

  TDNSiteMapNodeItemEventArgs = class(TDNGenericImport<DNSiteMapNodeItemEventArgsClass, DNSiteMapNodeItemEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceStatusEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{892E5E22-B18F-5859-9FCD-3066A69BBE5D}']
  { constructors } 

    {class} function init(command: DDN.System.Data.DNDbCommand; affectedRows: Int32; exception: DDN.mscorlib.DNException): DNSqlDataSourceStatusEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceStatusEventArgs')]
  DNSqlDataSourceStatusEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{F059D925-14B2-368C-BB0F-80649673E78E}']
  { getters & setters } 

    function get_AffectedRows: Int32;
    function get_Command: DDN.System.Data.DNDbCommand;
    function get_Exception: DDN.mscorlib.DNException;
    function get_ExceptionHandled: Boolean;
    procedure set_ExceptionHandled(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AffectedRows: Int32 read get_AffectedRows;
    property Command: DDN.System.Data.DNDbCommand read get_Command;
    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ExceptionHandled: Boolean read get_ExceptionHandled write set_ExceptionHandled;
  end;

  TDNSqlDataSourceStatusEventArgs = class(TDNGenericImport<DNSqlDataSourceStatusEventArgsClass, DNSqlDataSourceStatusEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{ACBA4D79-39D9-5A5B-8222-712FA709925A}']
  { constructors } 

    {class} function init(node: DNTreeNode): DNTreeNodeEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeEventArgs')]
  DNTreeNodeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{81EF9F47-FB00-3A1B-9F8B-2D9F0F0375D4}']
  { getters & setters } 

    function get_Node: DNTreeNode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Node: DNTreeNode read get_Node;
  end;

  TDNTreeNodeEventArgs = class(TDNGenericImport<DNTreeNodeEventArgsClass, DNTreeNodeEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartAuthorizationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7690FAE6-4953-5C75-9E37-9BC58F629204}']
  { constructors } 

    {class} function init(&type: DDN.mscorlib.DNType; path: string; authorizationFilter: string; isShared: Boolean): DNWebPartAuthorizationEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartAuthorizationEventArgs')]
  DNWebPartAuthorizationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{41A7FA73-DBE1-3D48-86AF-C5218B7875CB}']
  { getters & setters } 

    function get_AuthorizationFilter: string;
    function get_IsAuthorized: Boolean;
    procedure set_IsAuthorized(value: Boolean);
    function get_IsShared: Boolean;
    function get_Path: string;
    function get_Type: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AuthorizationFilter: string read get_AuthorizationFilter;
    property IsAuthorized: Boolean read get_IsAuthorized write set_IsAuthorized;
    property IsShared: Boolean read get_IsShared;
    property Path: string read get_Path;
    property &Type: DDN.mscorlib.DNType read get_Type;
  end;

  TDNWebPartAuthorizationEventArgs = class(TDNGenericImport<DNWebPartAuthorizationEventArgsClass, DNWebPartAuthorizationEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartConnectionsEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{4DF51D0D-7030-5297-9893-3637A5D4AE6B}']
  { constructors } 

    {class} function init(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint): DNWebPartConnectionsEventArgs; overload;
    {class} function init(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint; connection: DNWebPartConnection): DNWebPartConnectionsEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnectionsEventArgs')]
  DNWebPartConnectionsEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{9FECD765-AA94-30D5-9013-8E0910E0BDDD}']
  { getters & setters } 

    function get_Connection: DNWebPartConnection;
    function get_Consumer: DNWebPart;
    function get_ConsumerConnectionPoint: DNConsumerConnectionPoint;
    function get_Provider: DNWebPart;
    function get_ProviderConnectionPoint: DNProviderConnectionPoint;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Connection: DNWebPartConnection read get_Connection;
    property Consumer: DNWebPart read get_Consumer;
    property ConsumerConnectionPoint: DNConsumerConnectionPoint read get_ConsumerConnectionPoint;
    property Provider: DNWebPart read get_Provider;
    property ProviderConnectionPoint: DNProviderConnectionPoint read get_ProviderConnectionPoint;
  end;

  TDNWebPartConnectionsEventArgs = class(TDNGenericImport<DNWebPartConnectionsEventArgsClass, DNWebPartConnectionsEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDisplayModeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D6EDF07E-106C-56A7-8895-84912E5B0CD7}']
  { constructors } 

    {class} function init(oldDisplayMode: DNWebPartDisplayMode): DNWebPartDisplayModeEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayModeEventArgs')]
  DNWebPartDisplayModeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{FCFD1407-192F-38EA-B01B-7CBFA55F1C4C}']
  { getters & setters } 

    function get_OldDisplayMode: DNWebPartDisplayMode;
    procedure set_OldDisplayMode(value: DNWebPartDisplayMode);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property OldDisplayMode: DNWebPartDisplayMode read get_OldDisplayMode write set_OldDisplayMode;
  end;

  TDNWebPartDisplayModeEventArgs = class(TDNGenericImport<DNWebPartDisplayModeEventArgsClass, DNWebPartDisplayModeEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{36568AE2-32DA-5212-8577-BA5692EE2FEB}']
  { constructors } 

    {class} function init(webPart: DNWebPart): DNWebPartEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartEventArgs')]
  DNWebPartEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{5BFDEAB6-F527-34D0-A2EC-84529934CF4E}']
  { getters & setters } 

    function get_WebPart: DNWebPart;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property WebPart: DNWebPart read get_WebPart;
  end;

  TDNWebPartEventArgs = class(TDNGenericImport<DNWebPartEventArgsClass, DNWebPartEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartVerbsEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{415C048F-CF8D-5DE0-91E1-83245A06C5F2}']
  { constructors } 

    {class} function init: DNWebPartVerbsEventArgs; overload;
    {class} function init(verbs: DNWebPartVerbCollection): DNWebPartVerbsEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartVerbsEventArgs')]
  DNWebPartVerbsEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{619C7842-4288-394C-8197-3820ADA54A62}']
  { getters & setters } 

    function get_Verbs: DNWebPartVerbCollection;
    procedure set_Verbs(value: DNWebPartVerbCollection);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Verbs: DNWebPartVerbCollection read get_Verbs write set_Verbs;
  end;

  TDNWebPartVerbsEventArgs = class(TDNGenericImport<DNWebPartVerbsEventArgsClass, DNWebPartVerbsEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardNavigationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{3D5FC6D3-F611-5AE8-AA28-E721B4D83A7B}']
  { constructors } 

    {class} function init(currentStepIndex: Int32; nextStepIndex: Int32): DNWizardNavigationEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.WizardNavigationEventArgs')]
  DNWizardNavigationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{2D5D1812-49BD-3B5C-9D99-7C39DED1271C}']
  { getters & setters } 

    function get_Cancel: Boolean;
    procedure set_Cancel(value: Boolean);
    function get_CurrentStepIndex: Int32;
    function get_NextStepIndex: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cancel: Boolean read get_Cancel write set_Cancel;
    property CurrentStepIndex: Int32 read get_CurrentStepIndex;
    property NextStepIndex: Int32 read get_NextStepIndex;
  end;

  TDNWizardNavigationEventArgs = class(TDNGenericImport<DNWizardNavigationEventArgsClass, DNWizardNavigationEventArgs>) end;

  //-------------namespace: System.Web----------------
  DNHttpExceptionClass = interface(DDN.mscorlib.DNExternalExceptionClass)
  ['{ED28C5D5-BED0-5DED-827A-7ECC0A12C8B9}']
  { constructors } 

    {class} function init: DNHttpException; overload;
    {class} function init(message: string): DNHttpException; overload;
    {class} function init(message: string; hr: Int32): DNHttpException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNHttpException; overload;
    {class} function init(httpCode: Int32; message: string; innerException: DDN.mscorlib.DNException): DNHttpException; overload;
    {class} function init(httpCode: Int32; message: string): DNHttpException; overload;
    {class} function init(httpCode: Int32; message: string; hr: Int32): DNHttpException; overload;

  { static methods } 

    {class} function CreateFromLastError(message: string): DNHttpException;

  end;

  [DNTypeName('System.Web.HttpException')]
  DNHttpException = interface(DDN.mscorlib.DNExternalException)
  ['{09862B37-D7EC-38D0-8F3C-078FB0E5B398}']
  { getters & setters } 

    function get_WebEventCode: Int32;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetHttpCode: Int32;
    function GetHtmlErrorMessage: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property WebEventCode: Int32 read get_WebEventCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpException = class(TDNGenericImport<DNHttpExceptionClass, DNHttpException>) end;

  //-------------namespace: System.Web----------------
  DNHttpCompileExceptionClass = interface(DNHttpExceptionClass)
  ['{0040F429-E9FE-570F-B29F-29EF17BC8E06}']
  { constructors } 

    {class} function init: DNHttpCompileException; overload;
    {class} function init(message: string): DNHttpCompileException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNHttpCompileException; overload;
    {class} function init(results: DDN.System.DNCompilerResults; sourceCode: string): DNHttpCompileException; overload;

  end;

  [DNTypeName('System.Web.HttpCompileException')]
  DNHttpCompileException = interface(DNHttpException)
  ['{DC7BEE16-BCE0-36F0-B501-B81519A4BF85}']
  { getters & setters } 

    function get_Message: string;
    function get_Results: DDN.System.DNCompilerResults;
    function get_SourceCode: string;
    function get_WebEventCode: Int32;
    function get_ErrorCode: Int32;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetHttpCode: Int32;
    function GetHtmlErrorMessage: string;
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Results: DDN.System.DNCompilerResults read get_Results;
    property SourceCode: string read get_SourceCode;
    property WebEventCode: Int32 read get_WebEventCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpCompileException = class(TDNGenericImport<DNHttpCompileExceptionClass, DNHttpCompileException>) end;

  //-------------namespace: System.Web----------------
  DNHttpParseExceptionClass = interface(DNHttpExceptionClass)
  ['{1F30B9F7-1DA7-53E8-8914-FBC2F87EA073}']
  { constructors } 

    {class} function init: DNHttpParseException; overload;
    {class} function init(message: string): DNHttpParseException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNHttpParseException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; virtualPath: string; sourceCode: string; line: Int32): DNHttpParseException; overload;

  end;

  [DNTypeName('System.Web.HttpParseException')]
  DNHttpParseException = interface(DNHttpException)
  ['{CE78BC93-2D38-3812-B9FE-86B31D6F7764}']
  { getters & setters } 

    function get_FileName: string;
    function get_VirtualPath: string;
    function get_Line: Int32;
    function get_ParserErrors: DNParserErrorCollection;
    function get_WebEventCode: Int32;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetHttpCode: Int32;
    function GetHtmlErrorMessage: string;
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FileName: string read get_FileName;
    property VirtualPath: string read get_VirtualPath;
    property Line: Int32 read get_Line;
    property ParserErrors: DNParserErrorCollection read get_ParserErrors;
    property WebEventCode: Int32 read get_WebEventCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpParseException = class(TDNGenericImport<DNHttpParseExceptionClass, DNHttpParseException>) end;

  //-------------namespace: System.Web----------------
  DNHttpRequestValidationExceptionClass = interface(DNHttpExceptionClass)
  ['{2DB48D42-87DA-56CB-B227-E493EE77435D}']
  { constructors } 

    {class} function init: DNHttpRequestValidationException; overload;
    {class} function init(message: string): DNHttpRequestValidationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNHttpRequestValidationException; overload;

  end;

  [DNTypeName('System.Web.HttpRequestValidationException')]
  DNHttpRequestValidationException = interface(DNHttpException)
  ['{1F1859B9-6927-3676-8BE2-B479EBAE302C}']
  { getters & setters } 

    function get_WebEventCode: Int32;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetHttpCode: Int32;
    function GetHtmlErrorMessage: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property WebEventCode: Int32 read get_WebEventCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpRequestValidationException = class(TDNGenericImport<DNHttpRequestValidationExceptionClass, DNHttpRequestValidationException>) end;

  //-------------namespace: System.Web----------------
  DNHttpUnhandledExceptionClass = interface(DNHttpExceptionClass)
  ['{A244A33C-1EFE-5ED3-B42B-E4F7077F7DC6}']
  { constructors } 

    {class} function init: DNHttpUnhandledException; overload;
    {class} function init(message: string): DNHttpUnhandledException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNHttpUnhandledException; overload;

  end;

  [DNTypeName('System.Web.HttpUnhandledException')]
  DNHttpUnhandledException = interface(DNHttpException)
  ['{E652819D-AE18-36AB-9D07-1035DAA0C256}']
  { getters & setters } 

    function get_WebEventCode: Int32;
    function get_ErrorCode: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetHttpCode: Int32;
    function GetHtmlErrorMessage: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function ToString: string;
    function GetBaseException: DDN.mscorlib.DNException;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property WebEventCode: Int32 read get_WebEventCode;
    property ErrorCode: Int32 read get_ErrorCode;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNHttpUnhandledException = class(TDNGenericImport<DNHttpUnhandledExceptionClass, DNHttpUnhandledException>) end;

  //-------------namespace: System.Web.Caching----------------
  DNDatabaseNotEnabledForNotificationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{C005E1BF-13AC-521F-B793-47CF0A142A1C}']
  { constructors } 

    {class} function init: DNDatabaseNotEnabledForNotificationException; overload;
    {class} function init(message: string): DNDatabaseNotEnabledForNotificationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNDatabaseNotEnabledForNotificationException; overload;

  end;

  [DNTypeName('System.Web.Caching.DatabaseNotEnabledForNotificationException')]
  DNDatabaseNotEnabledForNotificationException = interface(DDN.mscorlib.DNSystemException)
  ['{675F2ED7-4496-3034-9E79-0F771E766FDB}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNDatabaseNotEnabledForNotificationException = class(TDNGenericImport<DNDatabaseNotEnabledForNotificationExceptionClass, DNDatabaseNotEnabledForNotificationException>) end;

  //-------------namespace: System.Web.Caching----------------
  DNTableNotEnabledForNotificationExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{9C5FDF89-3157-5FEE-B312-38AA761EAE75}']
  { constructors } 

    {class} function init: DNTableNotEnabledForNotificationException; overload;
    {class} function init(message: string): DNTableNotEnabledForNotificationException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNTableNotEnabledForNotificationException; overload;

  end;

  [DNTypeName('System.Web.Caching.TableNotEnabledForNotificationException')]
  DNTableNotEnabledForNotificationException = interface(DDN.mscorlib.DNSystemException)
  ['{E704B4D7-71D9-3BB1-A70B-235552DB617A}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNTableNotEnabledForNotificationException = class(TDNGenericImport<DNTableNotEnabledForNotificationExceptionClass, DNTableNotEnabledForNotificationException>) end;

  //-------------namespace: System.Web.Management----------------
  DNSqlExecutionExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{17E51888-E835-542C-BF41-F1FCE0DB847E}']
  { constructors } 

    {class} function init(message: string; server: string; database: string; sqlFile: string; commands: string; sqlException: DDN.System.Data.DNSqlException): DNSqlExecutionException; overload;
    {class} function init(message: string): DNSqlExecutionException; overload;
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNSqlExecutionException; overload;
    {class} function init: DNSqlExecutionException; overload;

  end;

  [DNTypeName('System.Web.Management.SqlExecutionException')]
  DNSqlExecutionException = interface(DDN.mscorlib.DNSystemException)
  ['{24244466-C8CF-3C65-B386-16D372C3D6D4}']
  { getters & setters } 

    function get_Server: string;
    function get_Database: string;
    function get_SqlFile: string;
    function get_Commands: string;
    function get_Exception: DDN.System.Data.DNSqlException;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Server: string read get_Server;
    property Database: string read get_Database;
    property SqlFile: string read get_SqlFile;
    property Commands: string read get_Commands;
    property Exception: DDN.System.Data.DNSqlException read get_Exception;
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNSqlExecutionException = class(TDNGenericImport<DNSqlExecutionExceptionClass, DNSqlExecutionException>) end;

  //-------------namespace: System.Web.UI----------------
  DNViewStateExceptionClass = interface(DDN.mscorlib.DNExceptionClass)
  ['{8C45B7DB-289F-5177-B97E-A274BF1D54C8}']
  { constructors } 

    {class} function init: DNViewStateException;

  end;

  [DNTypeName('System.Web.UI.ViewStateException')]
  DNViewStateException = interface(DDN.mscorlib.DNException)
  ['{716B13D4-B47E-3535-B5FC-FCF2452B025A}']
  { getters & setters } 

    function get_Message: string;
    function get_RemoteAddress: string;
    function get_RemotePort: string;
    function get_UserAgent: string;
    function get_PersistedState: string;
    function get_Referer: string;
    function get_Path: string;
    function get_IsConnected: Boolean;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Message: string read get_Message;
    property RemoteAddress: string read get_RemoteAddress;
    property RemotePort: string read get_RemotePort;
    property UserAgent: string read get_UserAgent;
    property PersistedState: string read get_PersistedState;
    property Referer: string read get_Referer;
    property Path: string read get_Path;
    property IsConnected: Boolean read get_IsConnected;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNViewStateException = class(TDNGenericImport<DNViewStateExceptionClass, DNViewStateException>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNStyleClass = interface(DNObjectClass)
  ['{3035B09F-AEFD-5417-9B5F-52528CBCC72E}']
  { constructors } 

    {class} function init: DNStyle; overload;
    {class} function init(bag: DNStateBag): DNStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.Style')]
  DNStyle = interface(DNObject)
  ['{AC328E16-158B-349C-AD12-47B8B99E68E7}']
  { getters & setters } 

    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure CopyFrom(s: DNStyle);
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNStyle = class(TDNGenericImport<DNStyleClass, DNStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemStyleClass = interface(DNStyleClass)
  ['{06C2AF44-A376-5944-B608-5048D71D8D47}']
  { constructors } 

    {class} function init: DNMenuItemStyle; overload;
    {class} function init(bag: DNStateBag): DNMenuItemStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemStyle')]
  DNMenuItemStyle = interface(DNStyle)
  ['{2C46948C-C8FF-3ADE-8AAA-CBF0DD7E1683}']
  { getters & setters } 

    function get_HorizontalPadding: DNUnit;
    procedure set_HorizontalPadding(value: DNUnit);
    function get_ItemSpacing: DNUnit;
    procedure set_ItemSpacing(value: DNUnit);
    function get_VerticalPadding: DNUnit;
    procedure set_VerticalPadding(value: DNUnit);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HorizontalPadding: DNUnit read get_HorizontalPadding write set_HorizontalPadding;
    property ItemSpacing: DNUnit read get_ItemSpacing write set_ItemSpacing;
    property VerticalPadding: DNUnit read get_VerticalPadding write set_VerticalPadding;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNMenuItemStyle = class(TDNGenericImport<DNMenuItemStyleClass, DNMenuItemStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPanelStyleClass = interface(DNStyleClass)
  ['{2D756592-7DA1-55EB-BCBF-1235D13D7DD2}']
  { constructors } 

    {class} function init(bag: DNStateBag): DNPanelStyle;

  end;

  [DNTypeName('System.Web.UI.WebControls.PanelStyle')]
  DNPanelStyle = interface(DNStyle)
  ['{D6EC74F2-E2A4-37FF-AB3B-9C7BC4D0405B}']
  { getters & setters } 

    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure MergeWith(s: DNStyle);
    procedure CopyFrom(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNPanelStyle = class(TDNGenericImport<DNPanelStyleClass, DNPanelStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSubMenuStyleClass = interface(DNStyleClass)
  ['{36EC7C10-0466-5459-9EC1-822A5BABB888}']
  { constructors } 

    {class} function init: DNSubMenuStyle; overload;
    {class} function init(bag: DNStateBag): DNSubMenuStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.SubMenuStyle')]
  DNSubMenuStyle = interface(DNStyle)
  ['{CB097A09-52C4-333F-8FCD-B1E335CC95B1}']
  { getters & setters } 

    function get_HorizontalPadding: DNUnit;
    procedure set_HorizontalPadding(value: DNUnit);
    function get_VerticalPadding: DNUnit;
    procedure set_VerticalPadding(value: DNUnit);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure MergeWith(s: DNStyle);
    procedure CopyFrom(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HorizontalPadding: DNUnit read get_HorizontalPadding write set_HorizontalPadding;
    property VerticalPadding: DNUnit read get_VerticalPadding write set_VerticalPadding;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNSubMenuStyle = class(TDNGenericImport<DNSubMenuStyleClass, DNSubMenuStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableItemStyleClass = interface(DNStyleClass)
  ['{3761FE78-9499-5F9F-BCEF-B01A0D54EA6C}']
  { constructors } 

    {class} function init: DNTableItemStyle; overload;
    {class} function init(bag: DNStateBag): DNTableItemStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableItemStyle')]
  DNTableItemStyle = interface(DNStyle)
  ['{1397164B-2F61-37A6-9AD7-7E262606B27D}']
  { getters & setters } 

    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNTableItemStyle = class(TDNGenericImport<DNTableItemStyleClass, DNTableItemStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridPagerStyleClass = interface(DNTableItemStyleClass)
  ['{80E960F3-FEE6-5731-B769-FB653F48E191}']
  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridPagerStyle')]
  DNDataGridPagerStyle = interface(DNTableItemStyle)
  ['{42620019-2022-3823-BE8F-3C37B7CF82A0}']
  { getters & setters } 

    function get_Mode: DNPagerMode;
    procedure set_Mode(value: DNPagerMode);
    function get_NextPageText: string;
    procedure set_NextPageText(value: string);
    function get_PageButtonCount: Int32;
    procedure set_PageButtonCount(value: Int32);
    function get_Position: DNPagerPosition;
    procedure set_Position(value: DNPagerPosition);
    function get_PrevPageText: string;
    procedure set_PrevPageText(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Mode: DNPagerMode read get_Mode write set_Mode;
    property NextPageText: string read get_NextPageText write set_NextPageText;
    property PageButtonCount: Int32 read get_PageButtonCount write set_PageButtonCount;
    property Position: DNPagerPosition read get_Position write set_Position;
    property PrevPageText: string read get_PrevPageText write set_PrevPageText;
    property Visible: Boolean read get_Visible write set_Visible;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNDataGridPagerStyle = class(TDNGenericImport<DNDataGridPagerStyleClass, DNDataGridPagerStyle>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNTitleStyleClass = interface(DNTableItemStyleClass)
  ['{744FEE9B-7ABE-5DAD-B461-9090A9E739CC}']
  { constructors } 

    {class} function init: DNTitleStyle;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.TitleStyle')]
  DNTitleStyle = interface(DNTableItemStyle)
  ['{478695F3-C4E0-34CD-947A-FBE406D72207}']
  { getters & setters } 

    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Wrap: Boolean read get_Wrap write set_Wrap;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNTitleStyle = class(TDNGenericImport<DNTitleStyleClass, DNTitleStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableSectionStyleClass = interface(DNStyleClass)
  ['{238AFC9F-4B36-5654-8210-5C9B72F4663D}']
  { constructors } 

    {class} function init: DNTableSectionStyle;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableSectionStyle')]
  DNTableSectionStyle = interface(DNStyle)
  ['{AA409AC1-EC29-3D06-8879-6623F868E009}']
  { getters & setters } 

    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure CopyFrom(s: DNStyle);
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Visible: Boolean read get_Visible write set_Visible;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNTableSectionStyle = class(TDNGenericImport<DNTableSectionStyleClass, DNTableSectionStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableStyleClass = interface(DNStyleClass)
  ['{FE87F5A2-A439-5267-B351-F877A89EB476}']
  { constructors } 

    {class} function init: DNTableStyle; overload;
    {class} function init(bag: DNStateBag): DNTableStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableStyle')]
  DNTableStyle = interface(DNStyle)
  ['{7E4B47F3-917C-30FE-AFD5-1DFB04A17177}']
  { getters & setters } 

    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure MergeWith(s: DNStyle);
    procedure CopyFrom(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNTableStyle = class(TDNGenericImport<DNTableStyleClass, DNTableStyle>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartMenuStyleClass = interface(DNTableStyleClass)
  ['{814705D7-CAFC-5329-B25D-D68131F4BA09}']
  { constructors } 

    {class} function init: DNWebPartMenuStyle; overload;
    {class} function init(bag: DNStateBag): DNWebPartMenuStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartMenuStyle')]
  DNWebPartMenuStyle = interface(DNTableStyle)
  ['{422D4FA1-ADDD-3765-8554-61910A41D269}']
  { getters & setters } 

    function get_ShadowColor: DDN.System.Drawing.DNColor;
    procedure set_ShadowColor(value: DDN.System.Drawing.DNColor);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ShadowColor: DDN.System.Drawing.DNColor read get_ShadowColor write set_ShadowColor;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNWebPartMenuStyle = class(TDNGenericImport<DNWebPartMenuStyleClass, DNWebPartMenuStyle>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeStyleClass = interface(DNStyleClass)
  ['{76A8FBE0-7CB5-5122-AEA0-FBE28D03CA4A}']
  { constructors } 

    {class} function init: DNTreeNodeStyle; overload;
    {class} function init(bag: DNStateBag): DNTreeNodeStyle; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeStyle')]
  DNTreeNodeStyle = interface(DNStyle)
  ['{393362F0-A09D-38DC-B016-40815C138CBE}']
  { getters & setters } 

    function get_ChildNodesPadding: DNUnit;
    procedure set_ChildNodesPadding(value: DNUnit);
    function get_HorizontalPadding: DNUnit;
    procedure set_HorizontalPadding(value: DNUnit);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_NodeSpacing: DNUnit;
    procedure set_NodeSpacing(value: DNUnit);
    function get_VerticalPadding: DNUnit;
    procedure set_VerticalPadding(value: DNUnit);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_IsEmpty: Boolean;
    function get_RegisteredCssClass: string;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Container: DDN.System.DNIContainer;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CopyFrom(s: DNStyle);
    procedure MergeWith(s: DNStyle);
    procedure Reset;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter); overload;
    procedure AddAttributesToRender(writer: DNHtmlTextWriter; owner: DNWebControl); overload;
    function GetStyleAttributes(urlResolver: DNIUrlResolutionService): DNCssStyleCollection;
    procedure SetDirty;
    procedure Dispose;
    function ToString: string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ChildNodesPadding: DNUnit read get_ChildNodesPadding write set_ChildNodesPadding;
    property HorizontalPadding: DNUnit read get_HorizontalPadding write set_HorizontalPadding;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property NodeSpacing: DNUnit read get_NodeSpacing write set_NodeSpacing;
    property VerticalPadding: DNUnit read get_VerticalPadding write set_VerticalPadding;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property CssClass: string read get_CssClass write set_CssClass;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property Height: DNUnit read get_Height write set_Height;
    property IsEmpty: Boolean read get_IsEmpty;
    property RegisteredCssClass: string read get_RegisteredCssClass;
    property Width: DNUnit read get_Width write set_Width;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Container: DDN.System.DNIContainer read get_Container;
  end;

  TDNTreeNodeStyle = class(TDNGenericImport<DNTreeNodeStyleClass, DNTreeNodeStyle>) end;

  //-------------namespace: System.Web----------------
  DNIisTraceListenerClass = interface(DNObjectClass)
  ['{20A0448A-3642-5CD4-81B6-D999CF31748F}']
  { constructors } 

    {class} function init: DNIisTraceListener;

  end;

  [DNTypeName('System.Web.IisTraceListener')]
  DNIisTraceListener = interface(DNObject)
  ['{DE374E39-9A4D-354C-9277-6F339548E5EC}']
  { getters & setters } 

    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    procedure Write(message: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; severity: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; severity: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure Dispose;
    procedure Close;
    procedure Flush;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNIisTraceListener = class(TDNGenericImport<DNIisTraceListenerClass, DNIisTraceListener>) end;

  //-------------namespace: System.Web----------------
  DNWebPageTraceListenerClass = interface(DNObjectClass)
  ['{7C8181DA-FDBA-5CFD-98FC-641C3922F522}']
  { constructors } 

    {class} function init: DNWebPageTraceListener;

  end;

  [DNTypeName('System.Web.WebPageTraceListener')]
  DNWebPageTraceListener = interface(DNObject)
  ['{4680222B-2A8B-327D-AB56-8A3B96D82D56}']
  { getters & setters } 

    function get_Attributes: DDN.System.DNStringDictionary;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsThreadSafe: Boolean;
    function get_IndentLevel: Int32;
    procedure set_IndentLevel(value: Int32);
    function get_IndentSize: Int32;
    procedure set_IndentSize(value: Int32);
    function get_Filter: DDN.System.DNTraceFilter;
    procedure set_Filter(value: DDN.System.DNTraceFilter);
    function get_TraceOutputOptions: DDN.System.DNTraceOptions;
    procedure set_TraceOutputOptions(value: DDN.System.DNTraceOptions);

  { methods } 

    procedure Write(message: string); overload;
    procedure Write(message: string; category: string); overload;
    procedure WriteLine(message: string); overload;
    procedure WriteLine(message: string; category: string); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; severity: DDN.System.DNTraceEventType; id: Int32; format: string; args: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; severity: DDN.System.DNTraceEventType; id: Int32; message: string); overload;
    procedure Dispose;
    procedure Close;
    procedure Flush;
    procedure Fail(message: string); overload;
    procedure Write(o: DDN.mscorlib.DNObject); overload;
    procedure Write(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(o: DDN.mscorlib.DNObject; category: string); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: DDN.mscorlib.DNObject); overload;
    procedure TraceEvent(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32); overload;
    procedure Fail(message: string; detailMessage: string); overload;
    procedure TraceData(eventCache: DDN.System.DNTraceEventCache; source: string; eventType: DDN.System.DNTraceEventType; id: Int32; data: TArray<DDN.mscorlib.DNObject>); overload;
    procedure TraceTransfer(eventCache: DDN.System.DNTraceEventCache; source: string; id: Int32; message: string; relatedActivityId: DDN.mscorlib.DNGuid);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DDN.System.DNStringDictionary read get_Attributes;
    property Name: string read get_Name write set_Name;
    property IsThreadSafe: Boolean read get_IsThreadSafe;
    property IndentLevel: Int32 read get_IndentLevel write set_IndentLevel;
    property IndentSize: Int32 read get_IndentSize write set_IndentSize;
    property Filter: DDN.System.DNTraceFilter read get_Filter write set_Filter;
    property TraceOutputOptions: DDN.System.DNTraceOptions read get_TraceOutputOptions write set_TraceOutputOptions;
  end;

  TDNWebPageTraceListener = class(TDNGenericImport<DNWebPageTraceListenerClass, DNWebPageTraceListener>) end;

  //-------------namespace: System.Web----------------
  DNHttpWriterClass = interface(DDN.mscorlib.DNTextWriterClass)
  ['{5A62A4DB-AC61-540E-A355-D9282724C8E0}']
  end;

  [DNTypeName('System.Web.HttpWriter')]
  DNHttpWriter = interface(DDN.mscorlib.DNTextWriter)
  ['{343B52AD-3D89-39DE-88C5-C88A33B5D107}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;
    function get_NewLine: string;
    procedure set_NewLine(value: string);

  { methods } 

    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Close;
    procedure Flush;
    procedure Write(ch: Char); overload;
    procedure Write(s: string); overload;
    procedure Write(obj: DDN.mscorlib.DNObject); overload;
    procedure WriteLine; overload;
    procedure WriteString(s: string; index: Int32; count: Int32);
    procedure WriteBytes(buffer: TArray<Byte>; index: Int32; count: Int32);
    procedure Dispose;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: UInt32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(value: string); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    procedure Write(value: Boolean); overload;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
    property NewLine: string read get_NewLine write set_NewLine;
  end;

  TDNHttpWriter = class(TDNGenericImport<DNHttpWriterClass, DNHttpWriter>) end;

  //-------------namespace: System.Web.UI----------------
  DNHtmlTextWriterClass = interface(DDN.mscorlib.DNTextWriterClass)
  ['{BBBBE4D8-A1D4-5A24-959E-FC7064CD28E2}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNHtmlTextWriter; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlTextWriter')]
  DNHtmlTextWriter = interface(DDN.mscorlib.DNTextWriter)
  ['{78E056A6-0518-3FC9-84E9-DD8A409BEEAA}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    procedure set_InnerWriter(value: DDN.mscorlib.DNTextWriter);
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    procedure EnterStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    procedure ExitStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    function IsValidFormAttribute(attribute: string): Boolean;
    procedure BeginRender;
    procedure Close;
    procedure EndRender;
    procedure EnterStyle(style: DNStyle); overload;
    procedure ExitStyle(style: DNStyle); overload;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure AddAttribute(name: string; value: string); overload;
    procedure AddAttribute(name: string; value: string; fEndode: Boolean); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string; fEncode: Boolean); overload;
    procedure AddStyleAttribute(name: string; value: string); overload;
    procedure AddStyleAttribute(key: DNHtmlTextWriterStyle; value: string); overload;
    procedure RenderBeginTag(tagName: string); overload;
    procedure RenderEndTag;
    procedure WriteAttribute(name: string; value: string); overload;
    procedure WriteBeginTag(tagName: string);
    procedure WriteFullBeginTag(tagName: string);
    procedure WriteEndTag(tagName: string);
    procedure WriteStyleAttribute(name: string; value: string); overload;
    procedure WriteStyleAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteEncodedUrl(url: string);
    procedure WriteEncodedUrlParameter(urlText: string);
    procedure WriteLineNoTabs(s: string);
    procedure RenderBeginTag(tagKey: DNHtmlTextWriterTag); overload;
    procedure WriteAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteBreak;
    procedure WriteEncodedText(text: string);
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter write set_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNHtmlTextWriter = class(TDNGenericImport<DNHtmlTextWriterClass, DNHtmlTextWriter>)
  public const
   TagLeftChar = #60;
   TagRightChar = #62;
   SelfClosingChars = ' /';
   SelfClosingTagEnd = ' />';
   EndTagLeftChars = '</';
   DoubleQuoteChar = #34;
   SingleQuoteChar = #39;
   SpaceChar = #32;
   EqualsChar = #61;
   SlashChar = #47;
   EqualsDoubleQuoteString = '="';
   SemicolonChar = #59;
   StyleEqualsChar = #58;
   DefaultTabString = '	';
  end;

  //-------------namespace: System.Web.UI----------------
  DNHtml32TextWriterClass = interface(DNHtmlTextWriterClass)
  ['{434854B1-34D8-5F0F-94BB-2EB8C78A372F}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNHtml32TextWriter; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNHtml32TextWriter; overload;

  end;

  [DNTypeName('System.Web.UI.Html32TextWriter')]
  DNHtml32TextWriter = interface(DNHtmlTextWriter)
  ['{EBA1E8BF-464F-39FC-AF46-EB044BC6CE37}']
  { getters & setters } 

    function get_ShouldPerformDivTableSubstitution: Boolean;
    procedure set_ShouldPerformDivTableSubstitution(value: Boolean);
    function get_SupportsBold: Boolean;
    procedure set_SupportsBold(value: Boolean);
    function get_SupportsItalic: Boolean;
    procedure set_SupportsItalic(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    procedure set_InnerWriter(value: DDN.mscorlib.DNTextWriter);
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    procedure RenderEndTag;
    procedure RenderBeginTag(tagKey: DNHtmlTextWriterTag); overload;
    procedure EnterStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    procedure ExitStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    function IsValidFormAttribute(attribute: string): Boolean;
    procedure BeginRender;
    procedure Close;
    procedure EndRender;
    procedure EnterStyle(style: DNStyle); overload;
    procedure ExitStyle(style: DNStyle); overload;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure AddAttribute(name: string; value: string); overload;
    procedure AddAttribute(name: string; value: string; fEndode: Boolean); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string; fEncode: Boolean); overload;
    procedure AddStyleAttribute(name: string; value: string); overload;
    procedure AddStyleAttribute(key: DNHtmlTextWriterStyle; value: string); overload;
    procedure RenderBeginTag(tagName: string); overload;
    procedure WriteAttribute(name: string; value: string); overload;
    procedure WriteBeginTag(tagName: string);
    procedure WriteFullBeginTag(tagName: string);
    procedure WriteEndTag(tagName: string);
    procedure WriteStyleAttribute(name: string; value: string); overload;
    procedure WriteStyleAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteEncodedUrl(url: string);
    procedure WriteEncodedUrlParameter(urlText: string);
    procedure WriteLineNoTabs(s: string);
    procedure WriteAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteBreak;
    procedure WriteEncodedText(text: string);
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShouldPerformDivTableSubstitution: Boolean read get_ShouldPerformDivTableSubstitution write set_ShouldPerformDivTableSubstitution;
    property SupportsBold: Boolean read get_SupportsBold write set_SupportsBold;
    property SupportsItalic: Boolean read get_SupportsItalic write set_SupportsItalic;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter write set_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNHtml32TextWriter = class(TDNGenericImport<DNHtml32TextWriterClass, DNHtml32TextWriter>) end;

  //-------------namespace: System.Web.UI----------------
  DNChtmlTextWriterClass = interface(DNHtml32TextWriterClass)
  ['{FA778D42-94F9-5398-8C9B-B8E02056E606}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNChtmlTextWriter; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNChtmlTextWriter; overload;

  end;

  [DNTypeName('System.Web.UI.ChtmlTextWriter')]
  DNChtmlTextWriter = interface(DNHtml32TextWriter)
  ['{BC7DE27A-08D5-3945-855D-AC5B022E75CA}']
  { getters & setters } 

    function get_ShouldPerformDivTableSubstitution: Boolean;
    procedure set_ShouldPerformDivTableSubstitution(value: Boolean);
    function get_SupportsBold: Boolean;
    procedure set_SupportsBold(value: Boolean);
    function get_SupportsItalic: Boolean;
    procedure set_SupportsItalic(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    procedure set_InnerWriter(value: DDN.mscorlib.DNTextWriter);
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    procedure AddRecognizedAttribute(elementName: string; attributeName: string);
    procedure RemoveRecognizedAttribute(elementName: string; attributeName: string);
    procedure WriteEncodedText(text: string);
    procedure WriteBreak;
    procedure RenderEndTag;
    procedure RenderBeginTag(tagKey: DNHtmlTextWriterTag); overload;
    procedure EnterStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    procedure ExitStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    function IsValidFormAttribute(attribute: string): Boolean;
    procedure BeginRender;
    procedure Close;
    procedure EndRender;
    procedure EnterStyle(style: DNStyle); overload;
    procedure ExitStyle(style: DNStyle); overload;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure AddAttribute(name: string; value: string); overload;
    procedure AddAttribute(name: string; value: string; fEndode: Boolean); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string; fEncode: Boolean); overload;
    procedure AddStyleAttribute(name: string; value: string); overload;
    procedure AddStyleAttribute(key: DNHtmlTextWriterStyle; value: string); overload;
    procedure RenderBeginTag(tagName: string); overload;
    procedure WriteAttribute(name: string; value: string); overload;
    procedure WriteBeginTag(tagName: string);
    procedure WriteFullBeginTag(tagName: string);
    procedure WriteEndTag(tagName: string);
    procedure WriteStyleAttribute(name: string; value: string); overload;
    procedure WriteStyleAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteEncodedUrl(url: string);
    procedure WriteEncodedUrlParameter(urlText: string);
    procedure WriteLineNoTabs(s: string);
    procedure WriteAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShouldPerformDivTableSubstitution: Boolean read get_ShouldPerformDivTableSubstitution write set_ShouldPerformDivTableSubstitution;
    property SupportsBold: Boolean read get_SupportsBold write set_SupportsBold;
    property SupportsItalic: Boolean read get_SupportsItalic write set_SupportsItalic;
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter write set_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNChtmlTextWriter = class(TDNGenericImport<DNChtmlTextWriterClass, DNChtmlTextWriter>) end;

  //-------------namespace: System.Web.UI----------------
  DNXhtmlTextWriterClass = interface(DNHtmlTextWriterClass)
  ['{9A150171-4411-58E0-9871-1B5B5F1473A7}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNXhtmlTextWriter; overload;
    {class} function init(writer: DDN.mscorlib.DNTextWriter; tabString: string): DNXhtmlTextWriter; overload;

  end;

  [DNTypeName('System.Web.UI.XhtmlTextWriter')]
  DNXhtmlTextWriter = interface(DNHtmlTextWriter)
  ['{97FA3242-3E4B-3FF8-A9C2-19C3B510BD8F}']
  { getters & setters } 

    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_NewLine: string;
    procedure set_NewLine(value: string);
    function get_Indent: Int32;
    procedure set_Indent(value: Int32);
    function get_InnerWriter: DDN.mscorlib.DNTextWriter;
    procedure set_InnerWriter(value: DDN.mscorlib.DNTextWriter);
    function get_FormatProvider: DDN.mscorlib.DNIFormatProvider;

  { methods } 

    procedure RemoveRecognizedAttribute(elementName: string; attributeName: string);
    procedure AddRecognizedAttribute(elementName: string; attributeName: string);
    function IsValidFormAttribute(attributeName: string): Boolean;
    procedure SetDocType(docType: DNXhtmlMobileDocType);
    procedure WriteBreak;
    procedure EnterStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    procedure ExitStyle(style: DNStyle; tag: DNHtmlTextWriterTag); overload;
    procedure BeginRender;
    procedure Close;
    procedure EndRender;
    procedure EnterStyle(style: DNStyle); overload;
    procedure ExitStyle(style: DNStyle); overload;
    procedure Flush;
    procedure Write(s: string); overload;
    procedure Write(value: Boolean); overload;
    procedure Write(value: Char); overload;
    procedure Write(buffer: TArray<Char>); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(value: Double); overload;
    procedure Write(value: Single); overload;
    procedure Write(value: Int32); overload;
    procedure Write(value: Int64); overload;
    procedure Write(value: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure Write(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(s: string); overload;
    procedure WriteLine; overload;
    procedure WriteLine(value: Boolean); overload;
    procedure WriteLine(value: Char); overload;
    procedure WriteLine(buffer: TArray<Char>); overload;
    procedure WriteLine(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteLine(value: Double); overload;
    procedure WriteLine(value: Single); overload;
    procedure WriteLine(value: Int32); overload;
    procedure WriteLine(value: Int64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(format: string; arg: TArray<DDN.mscorlib.DNObject>); overload;
    procedure WriteLine(value: UInt32); overload;
    procedure AddAttribute(name: string; value: string); overload;
    procedure AddAttribute(name: string; value: string; fEndode: Boolean); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string); overload;
    procedure AddAttribute(key: DNHtmlTextWriterAttribute; value: string; fEncode: Boolean); overload;
    procedure AddStyleAttribute(name: string; value: string); overload;
    procedure AddStyleAttribute(key: DNHtmlTextWriterStyle; value: string); overload;
    procedure RenderBeginTag(tagName: string); overload;
    procedure RenderEndTag;
    procedure WriteAttribute(name: string; value: string); overload;
    procedure WriteBeginTag(tagName: string);
    procedure WriteFullBeginTag(tagName: string);
    procedure WriteEndTag(tagName: string);
    procedure WriteStyleAttribute(name: string; value: string); overload;
    procedure WriteStyleAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteEncodedUrl(url: string);
    procedure WriteEncodedUrlParameter(urlText: string);
    procedure WriteLineNoTabs(s: string);
    procedure RenderBeginTag(tagKey: DNHtmlTextWriterTag); overload;
    procedure WriteAttribute(name: string; value: string; fEncode: Boolean); overload;
    procedure WriteEncodedText(text: string);
    procedure Dispose;
    procedure Write(value: UInt32); overload;
    procedure Write(value: UInt64); overload;
    procedure Write(value: DDN.mscorlib.DNDecimal); overload;
    procedure Write(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    procedure WriteLine(value: UInt64); overload;
    procedure WriteLine(value: DDN.mscorlib.DNDecimal); overload;
    procedure WriteLine(format: string; arg0: DDN.mscorlib.DNObject; arg1: DDN.mscorlib.DNObject; arg2: DDN.mscorlib.DNObject); overload;
    function WriteAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: Char): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(value: string): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync: DDN.mscorlib.DNTask; overload;
    function FlushAsync: DDN.mscorlib.DNTask;
    function WriteAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function WriteLineAsync(buffer: TArray<Char>): DDN.mscorlib.DNTask; overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    property NewLine: string read get_NewLine write set_NewLine;
    property Indent: Int32 read get_Indent write set_Indent;
    property InnerWriter: DDN.mscorlib.DNTextWriter read get_InnerWriter write set_InnerWriter;
    property FormatProvider: DDN.mscorlib.DNIFormatProvider read get_FormatProvider;
  end;

  TDNXhtmlTextWriter = class(TDNGenericImport<DNXhtmlTextWriterClass, DNXhtmlTextWriter>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNClientBuildManagerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{D16E3894-CB64-5509-B5BA-E5F95C76EE6E}']
  { constructors } 

    {class} function init(appVirtualDir: string; appPhysicalSourceDir: string): DNClientBuildManager; overload;
    {class} function init(appVirtualDir: string; appPhysicalSourceDir: string; appPhysicalTargetDir: string): DNClientBuildManager; overload;
    {class} function init(appVirtualDir: string; appPhysicalSourceDir: string; appPhysicalTargetDir: string; parameter: DNClientBuildManagerParameter): DNClientBuildManager; overload;
    {class} function init(appVirtualDir: string; appPhysicalSourceDir: string; appPhysicalTargetDir: string; parameter: DNClientBuildManagerParameter; typeDescriptionProvider: DDN.System.DNTypeDescriptionProvider): DNClientBuildManager; overload;

  end;

  [DNTypeName('System.Web.Compilation.ClientBuildManager')]
  DNClientBuildManager = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{AE8A8088-ACDF-3965-A594-30C65C622D2E}']
  { getters & setters } 

    function get_CodeGenDir: string;
    function get_IsHostCreated: Boolean;

  { events } 

    procedure add_AppDomainUnloaded(value: DNBuildManagerHostUnloadEventHandler);
    procedure remove_AppDomainUnloaded(value: DNBuildManagerHostUnloadEventHandler);
    procedure add_AppDomainStarted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AppDomainStarted(value: DDN.mscorlib.DNEventHandler);
    procedure add_AppDomainShutdown(value: DNBuildManagerHostUnloadEventHandler);
    procedure remove_AppDomainShutdown(value: DNBuildManagerHostUnloadEventHandler);

  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function CreateObject(&type: DDN.mscorlib.DNType; failIfExists: Boolean): DNIRegisteredObject;
    function GetAppDomainShutdownDirectories: TArray<string>;
    procedure CompileApplicationDependencies;
    function GetBrowserDefinitions: DDN.mscorlib.DNIDictionary;
    function GetGeneratedSourceFile(virtualPath: string): string;
    function GetGeneratedFileVirtualPath(filePath: string): string;
    function GetVirtualCodeDirectories: TArray<string>;
    function GetTopLevelAssemblyReferences(virtualPath: string): TArray<string>;
    procedure GetCodeDirectoryInformation(virtualCodeDir: string; out codeDomProviderType: DDN.mscorlib.DNType; out compilerParameters: DDN.System.DNCompilerParameters; out generatedFilesDir: string);
    procedure GetCompilerParameters(virtualPath: string; out codeDomProviderType: DDN.mscorlib.DNType; out compilerParameters: DDN.System.DNCompilerParameters);
    function GenerateCodeCompileUnit(virtualPath: string; out codeDomProviderType: DDN.mscorlib.DNType; out compilerParameters: DDN.System.DNCompilerParameters; out linePragmasTable: DDN.mscorlib.DNIDictionary): DDN.System.DNCodeCompileUnit; overload;
    function GenerateCodeCompileUnit(virtualPath: string; virtualFileString: string; out codeDomProviderType: DDN.mscorlib.DNType; out compilerParameters: DDN.System.DNCompilerParameters; out linePragmasTable: DDN.mscorlib.DNIDictionary): DDN.System.DNCodeCompileUnit; overload;
    function GenerateCode(virtualPath: string; virtualFileString: string; out linePragmasTable: DDN.mscorlib.DNIDictionary): string;
    function GetCompiledType(virtualPath: string): DDN.mscorlib.DNType;
    procedure CompileFile(virtualPath: string); overload;
    procedure CompileFile(virtualPath: string; callback: DNClientBuildManagerCallback); overload;
    function IsCodeAssembly(assemblyName: string): Boolean;
    function Unload: Boolean;
    procedure PrecompileApplication; overload;
    procedure PrecompileApplication(callback: DNClientBuildManagerCallback); overload;
    procedure PrecompileApplication(callback: DNClientBuildManagerCallback; forceCleanBuild: Boolean); overload;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeGenDir: string read get_CodeGenDir;
    property IsHostCreated: Boolean read get_IsHostCreated;
  end;

  TDNClientBuildManager = class(TDNGenericImport<DNClientBuildManagerClass, DNClientBuildManager>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNClientBuildManagerCallbackClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{5F810F8A-EC67-5577-9980-E29EF954AB6B}']
  { constructors } 

    {class} function init: DNClientBuildManagerCallback;

  end;

  [DNTypeName('System.Web.Compilation.ClientBuildManagerCallback')]
  DNClientBuildManagerCallback = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{5B536BFB-BFCC-3CD2-A1B2-5F94438F609A}']
  { methods } 

    procedure ReportCompilerError(error: DDN.System.DNCompilerError);
    procedure ReportParseError(error: DNParserError);
    procedure ReportProgress(message: string);
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClientBuildManagerCallback = class(TDNGenericImport<DNClientBuildManagerCallbackClass, DNClientBuildManagerCallback>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAppDomainProtocolHandlerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{332616C9-6ABE-5B08-A713-9F2DA76CAD94}']
  end;

  [DNTypeName('System.Web.Hosting.AppDomainProtocolHandler')]
  DNAppDomainProtocolHandler = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{FC1BCBD7-827B-323F-BB43-D956C43D26A7}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure Stop(immediate: Boolean);
    procedure StartListenerChannel(listenerChannelCallback: DNIListenerChannelCallback);
    procedure StopListenerChannel(listenerChannelId: Int32; immediate: Boolean);
    procedure StopProtocol(immediate: Boolean);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainProtocolHandler = class(TDNGenericImport<DNAppDomainProtocolHandlerClass, DNAppDomainProtocolHandler>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNApplicationManagerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{4B37DFC3-5D89-574E-99A0-A538D52468EB}']
  { static methods } 

    {class} function GetApplicationManager: DNApplicationManager;

  end;

  [DNTypeName('System.Web.Hosting.ApplicationManager')]
  DNApplicationManager = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{351450B8-7854-30F7-BC78-A7F7DDBAB2D6}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure Open;
    procedure Close;
    function CreateObject(appHost: DNIApplicationHost; &type: DDN.mscorlib.DNType): DNIRegisteredObject; overload;
    function CreateObject(appId: string; &type: DDN.mscorlib.DNType; virtualPath: string; physicalPath: string; failIfExists: Boolean): DNIRegisteredObject; overload;
    function CreateObject(appId: string; &type: DDN.mscorlib.DNType; virtualPath: string; physicalPath: string; failIfExists: Boolean; throwOnError: Boolean): DNIRegisteredObject; overload;
    function GetObject(appId: string; &type: DDN.mscorlib.DNType): DNIRegisteredObject;
    function GetAppDomain(appId: string): DDN.mscorlib.DNAppDomain; overload;
    function GetAppDomain(appHost: DNIApplicationHost): DDN.mscorlib.DNAppDomain; overload;
    procedure StopObject(appId: string; &type: DDN.mscorlib.DNType);
    function IsIdle: Boolean;
    procedure ShutdownApplication(appId: string);
    procedure ShutdownAll;
    function GetRunningApplications: TArray<DNApplicationInfo>;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNApplicationManager = class(TDNGenericImport<DNApplicationManagerClass, DNApplicationManager>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNHostingEnvironmentClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{FE67BE9E-A468-54CC-8C5F-D41F21134FB9}']
  { static getter & setter } 

    {class} function get_InitializationException: DDN.mscorlib.DNException;
    {class} function get_InClientBuildManager: Boolean;
    {class} function get_IsHosted: Boolean;
    {class} function get_ApplicationHost: DNIApplicationHost;
    {class} function get_ApplicationMonitors: DNApplicationMonitors;
    {class} function get_ApplicationID: string;
    {class} function get_ApplicationPhysicalPath: string;
    {class} function get_ApplicationVirtualPath: string;
    {class} function get_SiteName: string;
    {class} function get_IsDevelopmentEnvironment: Boolean;
    {class} function get_Cache: DNCache;
    {class} function get_ShutdownReason: DNApplicationShutdownReason;
    {class} function get_VirtualPathProvider: DNVirtualPathProvider;
    {class} function get_MaxConcurrentRequestsPerCPU: Int32;
    {class} procedure set_MaxConcurrentRequestsPerCPU(value: Int32);
    {class} function get_MaxConcurrentThreadsPerCPU: Int32;
    {class} procedure set_MaxConcurrentThreadsPerCPU(value: Int32);

  { constructors } 

    {class} function init: DNHostingEnvironment;

  { static methods } 

    {class} procedure RegisterObject(obj: DNIRegisteredObject);
    {class} procedure UnregisterObject(obj: DNIRegisteredObject);
    {class} procedure QueueBackgroundWorkItem(workItem: DDN.mscorlib.DNFunc<DDN.mscorlib.DNCancellationToken, DDN.mscorlib.DNTask>); overload;
    {class} procedure IncrementBusyCount;
    {class} procedure DecrementBusyCount;
    {class} procedure MessageReceived;
    {class} procedure InitiateShutdown;
    {class} function MapPath(virtualPath: string): string;
    {class} function Impersonate: DDN.mscorlib.DNIDisposable; overload;
    {class} function Impersonate(token: IntPtr): DDN.mscorlib.DNIDisposable; overload;
    {class} function SetCultures: DDN.mscorlib.DNIDisposable; overload;
    {class} function SetCultures(virtualPath: string): DDN.mscorlib.DNIDisposable; overload;
    {class} procedure RegisterVirtualPathProvider(virtualPathProvider: DNVirtualPathProvider);
    {class} procedure QueueBackgroundWorkItem(workItem: DDN.mscorlib.DNAction<DDN.mscorlib.DNCancellationToken>); overload;
    {class} function Impersonate(userToken: IntPtr; virtualPath: string): DDN.mscorlib.DNIDisposable; overload;

  { static propertys } 

    {class} property InitializationException: DDN.mscorlib.DNException read get_InitializationException;
    {class} property InClientBuildManager: Boolean read get_InClientBuildManager;
    {class} property IsHosted: Boolean read get_IsHosted;
    {class} property ApplicationHost: DNIApplicationHost read get_ApplicationHost;
    {class} property ApplicationMonitors: DNApplicationMonitors read get_ApplicationMonitors;
    {class} property ApplicationID: string read get_ApplicationID;
    {class} property ApplicationPhysicalPath: string read get_ApplicationPhysicalPath;
    {class} property ApplicationVirtualPath: string read get_ApplicationVirtualPath;
    {class} property SiteName: string read get_SiteName;
    {class} property IsDevelopmentEnvironment: Boolean read get_IsDevelopmentEnvironment;
    {class} property Cache: DNCache read get_Cache;
    {class} property ShutdownReason: DNApplicationShutdownReason read get_ShutdownReason;
    {class} property VirtualPathProvider: DNVirtualPathProvider read get_VirtualPathProvider;
    {class} property MaxConcurrentRequestsPerCPU: Int32 read get_MaxConcurrentRequestsPerCPU write set_MaxConcurrentRequestsPerCPU;
    {class} property MaxConcurrentThreadsPerCPU: Int32 read get_MaxConcurrentThreadsPerCPU write set_MaxConcurrentThreadsPerCPU;
  end;

  [DNTypeName('System.Web.Hosting.HostingEnvironment')]
  DNHostingEnvironment = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{8E0C5936-632E-3F2E-B4DA-D20D1FDA5DA3}']
  { events } 

    {class} procedure add_StopListening(value: DDN.mscorlib.DNEventHandler);
    {class} procedure remove_StopListening(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHostingEnvironment = class(TDNGenericImport<DNHostingEnvironmentClass, DNHostingEnvironment>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNISAPIRuntimeClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C7F250D6-AB3F-5FD0-B66C-DF000ED06084}']
  { constructors } 

    {class} function init: DNISAPIRuntime;

  end;

  [DNTypeName('System.Web.Hosting.ISAPIRuntime')]
  DNISAPIRuntime = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{A37D498B-5F1D-34F5-93E9-E581E7B6A7C9}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure StartProcessing;
    procedure StopProcessing;
    function ProcessRequest(ecb: IntPtr; iWRType: Int32): Int32;
    procedure DoGCCollect;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNISAPIRuntime = class(TDNGenericImport<DNISAPIRuntimeClass, DNISAPIRuntime>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNProcessHostClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{34B0DC61-3F20-5C82-89AD-7BB6544AE02F}']
  end;

  [DNTypeName('System.Web.Hosting.ProcessHost')]
  DNProcessHost = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{3DD3B43F-99B1-3AB5-B824-F530D83561A6}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure SetApplicationPreloadUtil(applicationPreloadUtil: DNIApplicationPreloadUtil);
    procedure SetApplicationPreloadState(context: string; appId: string; enabled: Boolean);
    procedure StartProcessProtocolListenerChannel(protocolId: string; listenerChannelCallback: DNIListenerChannelCallback);
    procedure StopProcessProtocolListenerChannel(protocolId: string; listenerChannelId: Int32; immediate: Boolean);
    procedure StopProcessProtocol(protocolId: string; immediate: Boolean);
    procedure StartAppDomainProtocolListenerChannel(appId: string; protocolId: string; listenerChannelCallback: DNIListenerChannelCallback);
    procedure StopAppDomainProtocolListenerChannel(appId: string; protocolId: string; listenerChannelId: Int32; immediate: Boolean);
    procedure StopAppDomainProtocol(appId: string; protocolId: string; immediate: Boolean);
    procedure StartApplication(appId: string; appPath: string; out runtimeInterface: DDN.mscorlib.DNObject);
    procedure ShutdownApplication(appId: string);
    procedure Shutdown;
    procedure EnumerateAppDomains(out appDomainInfoEnum: DNIAppDomainInfoEnum);
    function IsIdle: Boolean;
    procedure Ping(callback: DNIProcessPingCallback);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProcessHost = class(TDNGenericImport<DNProcessHostClass, DNProcessHost>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNProcessHostFactoryHelperClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{C558B7B7-6252-5CF5-8A43-696338AE9355}']
  { constructors } 

    {class} function init: DNProcessHostFactoryHelper;

  end;

  [DNTypeName('System.Web.Hosting.ProcessHostFactoryHelper')]
  DNProcessHostFactoryHelper = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{26C9227D-3269-3B97-A405-31DA93BA9FB7}']
  { methods } 

    function GetProcessHost(functions: DNIProcessHostSupportFunctions): DDN.mscorlib.DNObject;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProcessHostFactoryHelper = class(TDNGenericImport<DNProcessHostFactoryHelperClass, DNProcessHostFactoryHelper>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNProcessProtocolHandlerClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{CF996107-BD97-5FBA-84DA-190708AB71DE}']
  end;

  [DNTypeName('System.Web.Hosting.ProcessProtocolHandler')]
  DNProcessProtocolHandler = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{DD27417D-C383-377C-9831-3B7A7652BCBC}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure StartListenerChannel(listenerChannelCallback: DNIListenerChannelCallback; AdphManager: DNIAdphManager);
    procedure StopListenerChannel(listenerChannelId: Int32; immediate: Boolean);
    procedure StopProtocol(immediate: Boolean);
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProcessProtocolHandler = class(TDNGenericImport<DNProcessProtocolHandlerClass, DNProcessProtocolHandler>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNRecycleLimitMonitorClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{56F4CDFA-EECC-58EA-83D9-417FBB4A30E6}']
  end;

  [DNTypeName('System.Web.Hosting.RecycleLimitMonitor')]
  DNRecycleLimitMonitor = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{69387787-2069-3B8D-9B51-327D1386E894}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRecycleLimitMonitor = class(TDNGenericImport<DNRecycleLimitMonitorClass, DNRecycleLimitMonitor>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNRecycleLimitMonitor_RecycleLimitMonitorSingletonClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{AAE267DD-4983-5AE3-969C-8B76D6927AFC}']
  { static methods } 

    {class} procedure EnsureCreated;

  end;

  [DNTypeName('System.Web.Hosting.RecycleLimitMonitor+RecycleLimitMonitorSingleton')]
  DNRecycleLimitMonitor_RecycleLimitMonitorSingleton = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{64162F1B-2F58-3017-A93F-6AE20F70943B}']
  { methods } 

    procedure RegisterProxyAndStart(proxy: DNRecycleLimitMonitor; applicationID: string);
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    procedure UnregisterProxyAndStop(proxy: DNRecycleLimitMonitor);
    procedure Dispose;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRecycleLimitMonitor_RecycleLimitMonitorSingleton = class(TDNGenericImport<DNRecycleLimitMonitor_RecycleLimitMonitorSingletonClass, DNRecycleLimitMonitor_RecycleLimitMonitorSingleton>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNVirtualFileBaseClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{8862CB7B-2507-561D-92DF-DE9771B7953C}']
  end;

  [DNTypeName('System.Web.Hosting.VirtualFileBase')]
  DNVirtualFileBase = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{C32D78F1-9BB3-3D52-B052-8D4CAFD8B652}']
  { getters & setters } 

    function get_Name: string;
    function get_VirtualPath: string;
    function get_IsDirectory: Boolean;

  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property VirtualPath: string read get_VirtualPath;
    property IsDirectory: Boolean read get_IsDirectory;
  end;

  TDNVirtualFileBase = class(TDNGenericImport<DNVirtualFileBaseClass, DNVirtualFileBase>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNVirtualDirectoryClass = interface(DNVirtualFileBaseClass)
  ['{54C6AED0-9DB4-5076-A1FF-C7E1E366B415}']
  end;

  [DNTypeName('System.Web.Hosting.VirtualDirectory')]
  DNVirtualDirectory = interface(DNVirtualFileBase)
  ['{8DA61337-F8F7-305C-B5D3-25E5C5D71FF9}']
  { getters & setters } 

    function get_IsDirectory: Boolean;
    function get_Directories: DDN.mscorlib.DNIEnumerable;
    function get_Files: DDN.mscorlib.DNIEnumerable;
    function get_Children: DDN.mscorlib.DNIEnumerable;
    function get_Name: string;
    function get_VirtualPath: string;

  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDirectory: Boolean read get_IsDirectory;
    property Directories: DDN.mscorlib.DNIEnumerable read get_Directories;
    property Files: DDN.mscorlib.DNIEnumerable read get_Files;
    property Children: DDN.mscorlib.DNIEnumerable read get_Children;
    property Name: string read get_Name;
    property VirtualPath: string read get_VirtualPath;
  end;

  TDNVirtualDirectory = class(TDNGenericImport<DNVirtualDirectoryClass, DNVirtualDirectory>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNVirtualFileClass = interface(DNVirtualFileBaseClass)
  ['{0ADD0E47-4D6C-5F21-90DB-9266D06DD44F}']
  end;

  [DNTypeName('System.Web.Hosting.VirtualFile')]
  DNVirtualFile = interface(DNVirtualFileBase)
  ['{D39029F7-3B24-3A28-89F6-5AEC84CFF601}']
  { getters & setters } 

    function get_IsDirectory: Boolean;
    function get_Name: string;
    function get_VirtualPath: string;

  { methods } 

    function Open: DDN.mscorlib.DNStream;
    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDirectory: Boolean read get_IsDirectory;
    property Name: string read get_Name;
    property VirtualPath: string read get_VirtualPath;
  end;

  TDNVirtualFile = class(TDNGenericImport<DNVirtualFileClass, DNVirtualFile>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNVirtualPathProviderClass = interface(DDN.mscorlib.DNMarshalByRefObjectClass)
  ['{61735552-6C33-5360-B8AE-D2A51A8064B4}']
  { static methods } 

    {class} function OpenFile(virtualPath: string): DDN.mscorlib.DNStream;

  end;

  [DNTypeName('System.Web.Hosting.VirtualPathProvider')]
  DNVirtualPathProvider = interface(DDN.mscorlib.DNMarshalByRefObject)
  ['{7E2580BE-D892-3E16-8962-242065396AA0}']
  { methods } 

    function InitializeLifetimeService: DDN.mscorlib.DNObject;
    function GetFileHash(virtualPath: string; virtualPathDependencies: DDN.mscorlib.DNIEnumerable): string;
    function GetCacheDependency(virtualPath: string; virtualPathDependencies: DDN.mscorlib.DNIEnumerable; utcStart: DDN.mscorlib.DNDateTime): DNCacheDependency;
    function FileExists(virtualPath: string): Boolean;
    function DirectoryExists(virtualDir: string): Boolean;
    function GetFile(virtualPath: string): DNVirtualFile;
    function GetDirectory(virtualDir: string): DNVirtualDirectory;
    function GetCacheKey(virtualPath: string): string;
    function CombineVirtualPaths(basePath: string; relativePath: string): string;
    function GetLifetimeService: DDN.mscorlib.DNObject;
    function CreateObjRef(requestedType: DDN.mscorlib.DNType): DDN.mscorlib.DNObjRef;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVirtualPathProvider = class(TDNGenericImport<DNVirtualPathProviderClass, DNVirtualPathProvider>) end;

  //-------------namespace: System.Web.WebSockets----------------
  DNAspNetWebSocketClass = interface(DNObjectClass)
  ['{49DD0DDA-4531-5BEE-B95F-46BF72823CFC}']
  end;

  [DNTypeName('System.Web.WebSockets.AspNetWebSocket')]
  DNAspNetWebSocket = interface(DNObject)
  ['{EFD026CB-7F91-3B39-9DA8-EA21C8204D72}']
  { getters & setters } 

    function get_CloseStatus: DDN.mscorlib.DNNullable<DDN.System.DNWebSocketCloseStatus>;
    function get_CloseStatusDescription: string;
    function get_State: DDN.System.DNWebSocketState;
    function get_SubProtocol: string;

  { methods } 

    procedure &Abort;
    function CloseAsync(closeStatus: DDN.System.DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function CloseOutputAsync(closeStatus: DDN.System.DNWebSocketCloseStatus; statusDescription: string; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    procedure Dispose;
    function ReceiveAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask<DDN.System.DNWebSocketReceiveResult>;
    function SendAsync(buffer: DDN.mscorlib.DNArraySegment<Byte>; messageType: DDN.System.DNWebSocketMessageType; endOfMessage: Boolean; cancellationToken: DDN.mscorlib.DNCancellationToken): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CloseStatus: DDN.mscorlib.DNNullable<DDN.System.DNWebSocketCloseStatus> read get_CloseStatus;
    property CloseStatusDescription: string read get_CloseStatusDescription;
    property State: DDN.System.DNWebSocketState read get_State;
    property SubProtocol: string read get_SubProtocol;
  end;

  TDNAspNetWebSocket = class(TDNGenericImport<DNAspNetWebSocketClass, DNAspNetWebSocket>) end;

  //-------------namespace: System.Web.WebSockets----------------
  DNAspNetWebSocketContextClass = interface(DNObjectClass)
  ['{BE7A2489-B535-5C38-868A-A768A78AEF2C}']
  { static getter & setter } 

    {class} function get_ConnectionCount: Int32;

  { static propertys } 

    {class} property ConnectionCount: Int32 read get_ConnectionCount;
  end;

  [DNTypeName('System.Web.WebSockets.AspNetWebSocketContext')]
  DNAspNetWebSocketContext = interface(DNObject)
  ['{C9CDDFF1-4C5B-33A7-84F3-680A931DC362}']
  { getters & setters } 

    function get_AnonymousID: string;
    function get_Application: DNHttpApplicationStateBase;
    function get_ApplicationPath: string;
    function get_Cache: DNCache;
    function get_ClientCertificate: DNHttpClientCertificate;
    function get_CookieCollection: DDN.System.DNCookieCollection;
    function get_Cookies: DNHttpCookieCollection;
    function get_FilePath: string;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_IsAuthenticated: Boolean;
    function get_IsClientConnected: Boolean;
    function get_IsDebuggingEnabled: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity;
    function get_Origin: string;
    function get_Path: string;
    function get_PathInfo: string;
    function get_Profile: DNProfileBase;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_RawUrl: string;
    function get_RequestUri: DDN.System.DNUri;
    function get_SecWebSocketKey: string;
    function get_SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string>;
    function get_SecWebSocketVersion: string;
    function get_Server: DNHttpServerUtilityBase;
    function get_ServerVariables: DDN.System.DNNameValueCollection;
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_Unvalidated: DNUnvalidatedRequestValuesBase;
    function get_UrlReferrer: DDN.System.DNUri;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_UserAgent: string;
    function get_UserHostAddress: string;
    function get_UserHostName: string;
    function get_UserLanguages: TArray<string>;
    function get_WebSocket: DDN.System.DNWebSocket;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousID: string read get_AnonymousID;
    property Application: DNHttpApplicationStateBase read get_Application;
    property ApplicationPath: string read get_ApplicationPath;
    property Cache: DNCache read get_Cache;
    property ClientCertificate: DNHttpClientCertificate read get_ClientCertificate;
    property CookieCollection: DDN.System.DNCookieCollection read get_CookieCollection;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property FilePath: string read get_FilePath;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsClientConnected: Boolean read get_IsClientConnected;
    property IsDebuggingEnabled: Boolean read get_IsDebuggingEnabled;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    property LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity read get_LogonUserIdentity;
    property Origin: string read get_Origin;
    property Path: string read get_Path;
    property PathInfo: string read get_PathInfo;
    property Profile: DNProfileBase read get_Profile;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property RawUrl: string read get_RawUrl;
    property RequestUri: DDN.System.DNUri read get_RequestUri;
    property SecWebSocketKey: string read get_SecWebSocketKey;
    property SecWebSocketProtocols: DDN.mscorlib.DNIEnumerable<string> read get_SecWebSocketProtocols;
    property SecWebSocketVersion: string read get_SecWebSocketVersion;
    property Server: DNHttpServerUtilityBase read get_Server;
    property ServerVariables: DDN.System.DNNameValueCollection read get_ServerVariables;
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    property Unvalidated: DNUnvalidatedRequestValuesBase read get_Unvalidated;
    property UrlReferrer: DDN.System.DNUri read get_UrlReferrer;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property UserAgent: string read get_UserAgent;
    property UserHostAddress: string read get_UserHostAddress;
    property UserHostName: string read get_UserHostName;
    property UserLanguages: TArray<string> read get_UserLanguages;
    property WebSocket: DDN.System.DNWebSocket read get_WebSocket;
  end;

  TDNAspNetWebSocketContext = class(TDNGenericImport<DNAspNetWebSocketContextClass, DNAspNetWebSocketContext>) end;

  //-------------namespace: System.Web.Security----------------
  DNFormsIdentityClass = interface(DDN.mscorlib.DNClaimsIdentityClass)
  ['{63D96EA0-771B-5286-8A8A-3F2873B01B4E}']
  { constructors } 

    {class} function init(ticket: DNFormsAuthenticationTicket): DNFormsIdentity;

  end;

  [DNTypeName('System.Web.Security.FormsIdentity')]
  DNFormsIdentity = interface(DDN.mscorlib.DNClaimsIdentity)
  ['{EB738959-B624-3758-9BF8-BB71E5943399}']
  { getters & setters } 

    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Ticket: DNFormsAuthenticationTicket;
    function get_Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>;
    function get_Actor: DDN.mscorlib.DNClaimsIdentity;
    procedure set_Actor(value: DDN.mscorlib.DNClaimsIdentity);
    function get_BootstrapContext: DDN.mscorlib.DNObject;
    procedure set_BootstrapContext(value: DDN.mscorlib.DNObject);
    function get_Label: string;
    procedure set_Label(value: string);
    function get_NameClaimType: string;
    function get_RoleClaimType: string;

  { methods } 

    function Clone: DDN.mscorlib.DNClaimsIdentity;
    procedure AddClaim(claim: DDN.mscorlib.DNClaim);
    procedure AddClaims(claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>);
    function TryRemoveClaim(claim: DDN.mscorlib.DNClaim): Boolean;
    procedure RemoveClaim(claim: DDN.mscorlib.DNClaim);
    function FindAll(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindAll(&type: string): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function HasClaim(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    function FindFirst(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNClaim; overload;
    function FindFirst(&type: string): DDN.mscorlib.DNClaim; overload;
    procedure WriteTo(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Ticket: DNFormsAuthenticationTicket read get_Ticket;
    property Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim> read get_Claims;
    property Actor: DDN.mscorlib.DNClaimsIdentity read get_Actor write set_Actor;
    property BootstrapContext: DDN.mscorlib.DNObject read get_BootstrapContext write set_BootstrapContext;
    property &Label: string read get_Label write set_Label;
    property NameClaimType: string read get_NameClaimType;
    property RoleClaimType: string read get_RoleClaimType;
  end;

  TDNFormsIdentity = class(TDNGenericImport<DNFormsIdentityClass, DNFormsIdentity>) end;

  //-------------namespace: System.Web.Security----------------
  DNPassportPrincipalClass = interface(DDN.mscorlib.DNGenericPrincipalClass)
  ['{FD80107A-2669-542B-8A83-DD9FB61132EB}']
  { constructors } 

    {class} function init(identity: DNPassportIdentity; roles: TArray<string>): DNPassportPrincipal;

  end;

  [DNTypeName('System.Web.Security.PassportPrincipal')]
  DNPassportPrincipal = interface(DDN.mscorlib.DNGenericPrincipal)
  ['{38245D7E-DA61-37CF-8F50-8A4001DAACA0}']
  { getters & setters } 

    function get_Identity: DDN.mscorlib.DNIIdentity;
    function get_Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>;
    function get_Identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity>;

  { methods } 

    function IsInRole(role: string): Boolean;
    procedure AddIdentity(identity: DDN.mscorlib.DNClaimsIdentity);
    function Clone: DDN.mscorlib.DNClaimsPrincipal;
    procedure AddIdentities(identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity>);
    function FindAll(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindAll(&type: string): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindFirst(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNClaim; overload;
    function FindFirst(&type: string): DDN.mscorlib.DNClaim; overload;
    function HasClaim(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Identity: DDN.mscorlib.DNIIdentity read get_Identity;
    property Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim> read get_Claims;
    property Identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity> read get_Identities;
  end;

  TDNPassportPrincipal = class(TDNGenericImport<DNPassportPrincipalClass, DNPassportPrincipal>) end;

  //-------------namespace: System.Web.Security----------------
  DNRolePrincipalClass = interface(DDN.mscorlib.DNClaimsPrincipalClass)
  ['{1C1877E3-F32C-561D-B030-0DB17E9DD667}']
  { constructors } 

    {class} function init(identity: DDN.mscorlib.DNIIdentity; encryptedTicket: string): DNRolePrincipal; overload;
    {class} function init(identity: DDN.mscorlib.DNIIdentity): DNRolePrincipal; overload;
    {class} function init(providerName: string; identity: DDN.mscorlib.DNIIdentity): DNRolePrincipal; overload;
    {class} function init(providerName: string; identity: DDN.mscorlib.DNIIdentity; encryptedTicket: string): DNRolePrincipal; overload;

  end;

  [DNTypeName('System.Web.Security.RolePrincipal')]
  DNRolePrincipal = interface(DDN.mscorlib.DNClaimsPrincipal)
  ['{C1246D8D-832C-3E2B-987F-EC49FAA2D209}']
  { getters & setters } 

    function get_Version: Int32;
    function get_ExpireDate: DDN.mscorlib.DNDateTime;
    function get_IssueDate: DDN.mscorlib.DNDateTime;
    function get_Expired: Boolean;
    function get_CookiePath: string;
    function get_Identity: DDN.mscorlib.DNIIdentity;
    function get_IsRoleListCached: Boolean;
    function get_CachedListChanged: Boolean;
    function get_ProviderName: string;
    function get_Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>;
    function get_Identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity>;

  { methods } 

    function IsInRole(role: string): Boolean;
    function ToEncryptedTicket: string;
    procedure SetDirty;
    function GetRoles: TArray<string>;
    procedure AddIdentity(identity: DDN.mscorlib.DNClaimsIdentity);
    function Clone: DDN.mscorlib.DNClaimsPrincipal;
    procedure AddIdentities(identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity>);
    function FindAll(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindAll(&type: string): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim>; overload;
    function FindFirst(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): DDN.mscorlib.DNClaim; overload;
    function FindFirst(&type: string): DDN.mscorlib.DNClaim; overload;
    function HasClaim(match: DDN.mscorlib.DNPredicate<DDN.mscorlib.DNClaim>): Boolean; overload;
    function HasClaim(&type: string; value: string): Boolean; overload;
    procedure WriteTo(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Version: Int32 read get_Version;
    property ExpireDate: DDN.mscorlib.DNDateTime read get_ExpireDate;
    property IssueDate: DDN.mscorlib.DNDateTime read get_IssueDate;
    property Expired: Boolean read get_Expired;
    property CookiePath: string read get_CookiePath;
    property Identity: DDN.mscorlib.DNIIdentity read get_Identity;
    property IsRoleListCached: Boolean read get_IsRoleListCached;
    property CachedListChanged: Boolean read get_CachedListChanged;
    property ProviderName: string read get_ProviderName;
    property Claims: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaim> read get_Claims;
    property Identities: DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNClaimsIdentity> read get_Identities;
  end;

  TDNRolePrincipal = class(TDNGenericImport<DNRolePrincipalClass, DNRolePrincipal>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFontUnitClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{C213CA51-532C-5073-A994-7D230A6E86ED}']
  { constructors } 

    {class} function init(&type: DNFontSize): DNFontUnit; overload;
    {class} function init(value: DNUnit): DNFontUnit; overload;
    {class} function init(value: Int32): DNFontUnit; overload;
    {class} function init(value: Double): DNFontUnit; overload;
    {class} function init(value: Double; &type: DNUnitType): DNFontUnit; overload;
    {class} function init(value: string): DNFontUnit; overload;
    {class} function init(value: string; culture: DDN.mscorlib.DNCultureInfo): DNFontUnit; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNFontUnit;
   function __fakeFieldGet_Smaller: DNFontUnit;
   function __fakeFieldGet_Larger: DNFontUnit;
   function __fakeFieldGet_XXSmall: DNFontUnit;
   function __fakeFieldGet_XSmall: DNFontUnit;
   function __fakeFieldGet_Small: DNFontUnit;
   function __fakeFieldGet_Medium: DNFontUnit;
   function __fakeFieldGet_Large: DNFontUnit;
   function __fakeFieldGet_XLarge: DNFontUnit;
   function __fakeFieldGet_XXLarge: DNFontUnit;

  { static fields } 

    {class} property Empty: DNFontUnit read __fakeFieldGet_Empty;
    {class} property Smaller: DNFontUnit read __fakeFieldGet_Smaller;
    {class} property Larger: DNFontUnit read __fakeFieldGet_Larger;
    {class} property XXSmall: DNFontUnit read __fakeFieldGet_XXSmall;
    {class} property XSmall: DNFontUnit read __fakeFieldGet_XSmall;
    {class} property Small: DNFontUnit read __fakeFieldGet_Small;
    {class} property Medium: DNFontUnit read __fakeFieldGet_Medium;
    {class} property Large: DNFontUnit read __fakeFieldGet_Large;
    {class} property XLarge: DNFontUnit read __fakeFieldGet_XLarge;
    {class} property XXLarge: DNFontUnit read __fakeFieldGet_XXLarge;

  { static methods } 

    {class} function Parse(s: string): DNFontUnit; overload;
    {class} function Parse(s: string; culture: DDN.mscorlib.DNCultureInfo): DNFontUnit; overload;
    {class} function Point(n: Int32): DNFontUnit;

  end;

  [DNTypeName('System.Web.UI.WebControls.FontUnit')]
  DNFontUnit = interface(DDN.mscorlib.DNValueType)
  ['{2676F131-4F62-30A9-8003-2F14C11938CE}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Type: DNFontSize;
    function get_Unit: DNUnit;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string; overload;
    function ToString(culture: DDN.mscorlib.DNCultureInfo): string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property &Type: DNFontSize read get_Type;
    property &Unit: DNUnit read get_Unit;
  end;

  TDNFontUnit = class(TDNGenericImport<DNFontUnitClass, DNFontUnit>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNUnitClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{0CD84224-DD89-5EC3-A7BF-BD15037C4B36}']
  { constructors } 

    {class} function init(value: Int32): DNUnit; overload;
    {class} function init(value: Double): DNUnit; overload;
    {class} function init(value: Double; &type: DNUnitType): DNUnit; overload;
    {class} function init(value: string): DNUnit; overload;
    {class} function init(value: string; culture: DDN.mscorlib.DNCultureInfo): DNUnit; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNUnit;

  { static fields } 

    {class} property Empty: DNUnit read __fakeFieldGet_Empty;

  { static methods } 

    {class} function Parse(s: string): DNUnit; overload;
    {class} function Parse(s: string; culture: DDN.mscorlib.DNCultureInfo): DNUnit; overload;
    {class} function Percentage(n: Double): DNUnit;
    {class} function Pixel(n: Int32): DNUnit;
    {class} function Point(n: Int32): DNUnit;

  end;

  [DNTypeName('System.Web.UI.WebControls.Unit')]
  DNUnit = interface(DDN.mscorlib.DNValueType)
  ['{12F71E33-D2AF-3BF2-96AE-23679BA914E0}']
  { getters & setters } 

    function get_IsEmpty: Boolean;
    function get_Type: DNUnitType;
    function get_Value: Double;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string; overload;
    function ToString(culture: DDN.mscorlib.DNCultureInfo): string; overload;
    function ToString(formatProvider: DDN.mscorlib.DNIFormatProvider): string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IsEmpty: Boolean read get_IsEmpty;
    property &Type: DNUnitType read get_Type;
    property Value: Double read get_Value;
  end;

  TDNUnit = class(TDNGenericImport<DNUnitClass, DNUnit>) end;

  //-------------namespace: System.Web.Caching----------------
  DNCacheClass = interface(DNObjectClass)
  ['{E6E3FE25-D9A7-529B-BBE0-51A430798212}']
  { constructors } 

    {class} function init: DNCache;

  { static fields getter & setter } 

   function __fakeFieldGet_NoAbsoluteExpiration: DDN.mscorlib.DNDateTime;
   function __fakeFieldGet_NoSlidingExpiration: DDN.mscorlib.DNTimeSpan;

  { static fields } 

    {class} property NoAbsoluteExpiration: DDN.mscorlib.DNDateTime read __fakeFieldGet_NoAbsoluteExpiration;
    {class} property NoSlidingExpiration: DDN.mscorlib.DNTimeSpan read __fakeFieldGet_NoSlidingExpiration;

  end;

  [DNTypeName('System.Web.Caching.Cache')]
  DNCache = interface(DDN.mscorlib.DNIEnumerable)
  ['{5BCBD850-EC35-315C-9971-7BB0DE5728DE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(key: string): DDN.mscorlib.DNObject;
    procedure set_Item(key: string; value: DDN.mscorlib.DNObject);
    function get_EffectivePrivateBytesLimit: Int64;
    function get_EffectivePercentagePhysicalMemoryLimit: Int64;

  { methods } 

    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Get(key: string): DDN.mscorlib.DNObject;
    procedure Insert(key: string; value: DDN.mscorlib.DNObject); overload;
    procedure Insert(key: string; value: DDN.mscorlib.DNObject; dependencies: DNCacheDependency); overload;
    procedure Insert(key: string; value: DDN.mscorlib.DNObject; dependencies: DNCacheDependency; absoluteExpiration: DDN.mscorlib.DNDateTime; slidingExpiration: DDN.mscorlib.DNTimeSpan); overload;
    procedure Insert(key: string; value: DDN.mscorlib.DNObject; dependencies: DNCacheDependency; absoluteExpiration: DDN.mscorlib.DNDateTime; slidingExpiration: DDN.mscorlib.DNTimeSpan; onUpdateCallback: DNCacheItemUpdateCallback); overload;
    function Add(key: string; value: DDN.mscorlib.DNObject; dependencies: DNCacheDependency; absoluteExpiration: DDN.mscorlib.DNDateTime; slidingExpiration: DDN.mscorlib.DNTimeSpan; priority: DNCacheItemPriority; onRemoveCallback: DNCacheItemRemovedCallback): DDN.mscorlib.DNObject;
    function Remove(key: string): DDN.mscorlib.DNObject;
    procedure Insert(key: string; value: DDN.mscorlib.DNObject; dependencies: DNCacheDependency; absoluteExpiration: DDN.mscorlib.DNDateTime; slidingExpiration: DDN.mscorlib.DNTimeSpan; priority: DNCacheItemPriority; onRemoveCallback: DNCacheItemRemovedCallback); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[key: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property EffectivePrivateBytesLimit: Int64 read get_EffectivePrivateBytesLimit;
    property EffectivePercentagePhysicalMemoryLimit: Int64 read get_EffectivePercentagePhysicalMemoryLimit;
  end;

  TDNCache = class(TDNGenericImport<DNCacheClass, DNCache>) end;

  //-------------namespace: System.Web.Caching----------------
  DNCacheDependencyClass = interface(DNObjectClass)
  ['{B0DA5413-8FE0-5CBE-B2A6-ED081DEA7FBD}']
  { constructors } 

    {class} function init(filename: string): DNCacheDependency; overload;
    {class} function init(filename: string; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; dependency: DNCacheDependency): DNCacheDependency; overload;
    {class} function init(filenames: TArray<string>; cachekeys: TArray<string>; dependency: DNCacheDependency; start: DDN.mscorlib.DNDateTime): DNCacheDependency; overload;

  end;

  [DNTypeName('System.Web.Caching.CacheDependency')]
  DNCacheDependency = interface(DDN.mscorlib.DNIDisposable)
  ['{3A5DCF48-8E68-3AAE-9CD9-81E1FE012959}']
  { getters & setters } 

    function get_HasChanged: Boolean;
    function get_UtcLastModified: DDN.mscorlib.DNDateTime;

  { methods } 

    procedure Dispose;
    function TakeOwnership: Boolean;
    procedure SetCacheDependencyChanged(dependencyChangedAction: DDN.mscorlib.DNAction<DDN.mscorlib.DNObject, DDN.mscorlib.DNEventArgs>);
    function GetUniqueID: string;
    procedure ItemRemoved;
    function GetFileDependencies: TArray<string>;
    procedure KeepDependenciesAlive;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasChanged: Boolean read get_HasChanged;
    property UtcLastModified: DDN.mscorlib.DNDateTime read get_UtcLastModified;
  end;

  TDNCacheDependency = class(TDNGenericImport<DNCacheDependencyClass, DNCacheDependency>) end;

  //-------------namespace: System.Web.Caching----------------
  DNAggregateCacheDependencyClass = interface(DNCacheDependencyClass)
  ['{DB707BD5-C529-5467-A772-E8FA6FB9BCB5}']
  { constructors } 

    {class} function init: DNAggregateCacheDependency;

  end;

  [DNTypeName('System.Web.Caching.AggregateCacheDependency')]
  DNAggregateCacheDependency = interface(DNCacheDependency)
  ['{B826181C-2BC1-3D09-8AFA-B419AA6B1740}']
  { getters & setters } 

    function get_HasChanged: Boolean;
    function get_UtcLastModified: DDN.mscorlib.DNDateTime;

  { methods } 

    procedure Add(dependencies: TArray<DNCacheDependency>);
    function GetUniqueID: string;
    function GetFileDependencies: TArray<string>;
    procedure Dispose;
    function TakeOwnership: Boolean;
    procedure SetCacheDependencyChanged(dependencyChangedAction: DDN.mscorlib.DNAction<DDN.mscorlib.DNObject, DDN.mscorlib.DNEventArgs>);
    procedure ItemRemoved;
    procedure KeepDependenciesAlive;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasChanged: Boolean read get_HasChanged;
    property UtcLastModified: DDN.mscorlib.DNDateTime read get_UtcLastModified;
  end;

  TDNAggregateCacheDependency = class(TDNGenericImport<DNAggregateCacheDependencyClass, DNAggregateCacheDependency>) end;

  //-------------namespace: System.Web.Caching----------------
  DNSqlCacheDependencyClass = interface(DNCacheDependencyClass)
  ['{A6165AE0-CAB7-57A4-A966-BC8A21BE63B4}']
  { constructors } 

    {class} function init(databaseEntryName: string; tableName: string): DNSqlCacheDependency; overload;
    {class} function init(sqlCmd: DDN.System.Data.DNSqlCommand): DNSqlCacheDependency; overload;

  { static methods } 

    {class} function CreateOutputCacheDependency(dependency: string): DNCacheDependency;

  end;

  [DNTypeName('System.Web.Caching.SqlCacheDependency')]
  DNSqlCacheDependency = interface(DNCacheDependency)
  ['{E19F0686-1B99-39FF-A721-05D2CD732DA3}']
  { getters & setters } 

    function get_HasChanged: Boolean;
    function get_UtcLastModified: DDN.mscorlib.DNDateTime;

  { methods } 

    function GetUniqueID: string;
    procedure Dispose;
    function TakeOwnership: Boolean;
    procedure SetCacheDependencyChanged(dependencyChangedAction: DDN.mscorlib.DNAction<DDN.mscorlib.DNObject, DDN.mscorlib.DNEventArgs>);
    procedure ItemRemoved;
    function GetFileDependencies: TArray<string>;
    procedure KeepDependenciesAlive;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HasChanged: Boolean read get_HasChanged;
    property UtcLastModified: DDN.mscorlib.DNDateTime read get_UtcLastModified;
  end;

  TDNSqlCacheDependency = class(TDNGenericImport<DNSqlCacheDependencyClass, DNSqlCacheDependency>) end;

  //-------------namespace: System.Web.Caching----------------
  DNCacheInsertOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAF1C2D2-6415-5179-9145-5A8EE16CED47}']
  { constructors } 

    {class} function init: DNCacheInsertOptions;

  end;

  [DNTypeName('System.Web.Caching.CacheInsertOptions')]
  DNCacheInsertOptions = interface(DDN.mscorlib.DNObject)
  ['{031F8045-E2EA-3188-A38F-4F57C6DC0CD0}']
  { getters & setters } 

    function get_Dependencies: DNCacheDependency;
    procedure set_Dependencies(value: DNCacheDependency);
    function get_AbsoluteExpiration: DDN.mscorlib.DNDateTime;
    procedure set_AbsoluteExpiration(value: DDN.mscorlib.DNDateTime);
    function get_SlidingExpiration: DDN.mscorlib.DNTimeSpan;
    procedure set_SlidingExpiration(value: DDN.mscorlib.DNTimeSpan);
    function get_Priority: DNCacheItemPriority;
    procedure set_Priority(value: DNCacheItemPriority);
    function get_OnRemovedCallback: DNCacheItemRemovedCallback;
    procedure set_OnRemovedCallback(value: DNCacheItemRemovedCallback);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dependencies: DNCacheDependency read get_Dependencies write set_Dependencies;
    property AbsoluteExpiration: DDN.mscorlib.DNDateTime read get_AbsoluteExpiration write set_AbsoluteExpiration;
    property SlidingExpiration: DDN.mscorlib.DNTimeSpan read get_SlidingExpiration write set_SlidingExpiration;
    property Priority: DNCacheItemPriority read get_Priority write set_Priority;
    property OnRemovedCallback: DNCacheItemRemovedCallback read get_OnRemovedCallback write set_OnRemovedCallback;
  end;

  TDNCacheInsertOptions = class(TDNGenericImport<DNCacheInsertOptionsClass, DNCacheInsertOptions>) end;

  //-------------namespace: System.Web.Caching----------------
  DNHeaderElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{82835569-4594-5B19-9372-2308B5811B66}']
  { constructors } 

    {class} function init(name: string; value: string): DNHeaderElement;

  end;

  [DNTypeName('System.Web.Caching.HeaderElement')]
  DNHeaderElement = interface(DDN.mscorlib.DNObject)
  ['{094D1C91-F44F-3BFF-83E5-AE4F9510AFB0}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property Value: string read get_Value;
  end;

  TDNHeaderElement = class(TDNGenericImport<DNHeaderElementClass, DNHeaderElement>) end;

  //-------------namespace: System.Web.Caching----------------
  DNOutputCacheClass = interface(DDN.mscorlib.DNObjectClass)
  ['{401080DC-490B-5213-A42C-DEAD867C1185}']
  { static getter & setter } 

    {class} function get_DefaultProviderName: string;
    {class} function get_Providers: DNOutputCacheProviderCollection;

  { static methods } 

    {class} procedure Serialize(stream: DDN.mscorlib.DNStream; data: DDN.mscorlib.DNObject);
    {class} function Deserialize(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject;

  { static propertys } 

    {class} property DefaultProviderName: string read get_DefaultProviderName;
    {class} property Providers: DNOutputCacheProviderCollection read get_Providers;
  end;

  [DNTypeName('System.Web.Caching.OutputCache')]
  DNOutputCache = interface(DDN.mscorlib.DNObject)
  ['{FA6C27E3-641E-3083-BFE6-E850679F3CFD}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutputCache = class(TDNGenericImport<DNOutputCacheClass, DNOutputCache>) end;

  //-------------namespace: System.Web.Caching----------------
  DNOutputCacheUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{35CE247B-6F64-5C62-8A87-CED71547C020}']
  { static methods } 

    {class} function SetupKernelCaching(originalCacheUrl: string; response: DNHttpResponse): string;
    {class} procedure FlushKernelCache(cacheKey: string);
    {class} function CreateCacheDependency(response: DNHttpResponse): DNCacheDependency;
    {class} function GetContentBuffers(response: DNHttpResponse): DDN.mscorlib.DNArrayList;
    {class} procedure SetContentBuffers(response: DNHttpResponse; buffers: DDN.mscorlib.DNArrayList);
    {class} function GetValidationCallbacks(response: DNHttpResponse): DDN.mscorlib.DNIEnumerable<DDN.mscorlib.DNKeyValuePair<DNHttpCacheValidateHandler, DDN.mscorlib.DNObject>>;

  end;

  [DNTypeName('System.Web.Caching.OutputCacheUtility')]
  DNOutputCacheUtility = interface(DDN.mscorlib.DNObject)
  ['{8F20AC56-D036-3446-A9C2-70DE2EB44A4B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNOutputCacheUtility = class(TDNGenericImport<DNOutputCacheUtilityClass, DNOutputCacheUtility>) end;

  //-------------namespace: System.Web.Caching----------------
  DNResponseElementClass = interface(DDN.mscorlib.DNObjectClass)
  ['{84CBAF15-9207-5BC3-BC45-CA28AAF7692E}']
  end;

  [DNTypeName('System.Web.Caching.ResponseElement')]
  DNResponseElement = interface(DDN.mscorlib.DNObject)
  ['{E799704A-3C43-38B5-853C-F5EA0E47F00F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResponseElement = class(TDNGenericImport<DNResponseElementClass, DNResponseElement>) end;

  //-------------namespace: System.Web.Caching----------------
  DNFileResponseElementClass = interface(DNResponseElementClass)
  ['{9EF44034-AD1F-5C55-99A0-EDA2D0DBCFAB}']
  { constructors } 

    {class} function init(path: string; offset: Int64; length: Int64): DNFileResponseElement;

  end;

  [DNTypeName('System.Web.Caching.FileResponseElement')]
  DNFileResponseElement = interface(DNResponseElement)
  ['{255F9FBF-B4DC-3C12-97B4-29855F9C7F76}']
  { getters & setters } 

    function get_Path: string;
    function get_Offset: Int64;
    function get_Length: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Path: string read get_Path;
    property Offset: Int64 read get_Offset;
    property Length: Int64 read get_Length;
  end;

  TDNFileResponseElement = class(TDNGenericImport<DNFileResponseElementClass, DNFileResponseElement>) end;

  //-------------namespace: System.Web.Caching----------------
  DNMemoryResponseElementClass = interface(DNResponseElementClass)
  ['{0DF277D4-E791-59FD-9C2B-04A571C00128}']
  { constructors } 

    {class} function init(buffer: TArray<Byte>; length: Int64): DNMemoryResponseElement;

  end;

  [DNTypeName('System.Web.Caching.MemoryResponseElement')]
  DNMemoryResponseElement = interface(DNResponseElement)
  ['{626D98B8-8E47-39C7-A9CF-075C2D40BAF2}']
  { getters & setters } 

    function get_Buffer: TArray<Byte>;
    function get_Length: Int64;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Buffer: TArray<Byte> read get_Buffer;
    property Length: Int64 read get_Length;
  end;

  TDNMemoryResponseElement = class(TDNGenericImport<DNMemoryResponseElementClass, DNMemoryResponseElement>) end;

  //-------------namespace: System.Web.Caching----------------
  DNSubstitutionResponseElementClass = interface(DNResponseElementClass)
  ['{758EBB4E-D850-5FD5-A96E-378AAEB8AE0A}']
  { constructors } 

    {class} function init(callback: DNHttpResponseSubstitutionCallback): DNSubstitutionResponseElement;

  end;

  [DNTypeName('System.Web.Caching.SubstitutionResponseElement')]
  DNSubstitutionResponseElement = interface(DNResponseElement)
  ['{2EBC3C80-BEE9-3BBE-BE5A-73B85F32BF54}']
  { getters & setters } 

    function get_Callback: DNHttpResponseSubstitutionCallback;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Callback: DNHttpResponseSubstitutionCallback read get_Callback;
  end;

  TDNSubstitutionResponseElement = class(TDNGenericImport<DNSubstitutionResponseElementClass, DNSubstitutionResponseElement>) end;

  //-------------namespace: System.Web.Caching----------------
  DNSqlCacheDependencyAdminClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FC1654B9-3BAD-57AD-A18E-E765F19AE038}']
  { static methods } 

    {class} procedure EnableNotifications(connectionString: string);
    {class} procedure DisableNotifications(connectionString: string);
    {class} procedure EnableTableForNotifications(connectionString: string; table: string); overload;
    {class} procedure EnableTableForNotifications(connectionString: string; tables: TArray<string>); overload;
    {class} procedure DisableTableForNotifications(connectionString: string; table: string); overload;
    {class} procedure DisableTableForNotifications(connectionString: string; tables: TArray<string>); overload;
    {class} function GetTablesEnabledForNotifications(connectionString: string): TArray<string>;

  end;

  [DNTypeName('System.Web.Caching.SqlCacheDependencyAdmin')]
  DNSqlCacheDependencyAdmin = interface(DDN.mscorlib.DNObject)
  ['{1DACD072-F0F9-35C3-AF02-E60986D47829}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlCacheDependencyAdmin = class(TDNGenericImport<DNSqlCacheDependencyAdminClass, DNSqlCacheDependencyAdmin>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNAssemblyBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C46E876E-77AD-5F64-BC79-70A5DB911B7D}']
  end;

  [DNTypeName('System.Web.Compilation.AssemblyBuilder')]
  DNAssemblyBuilder = interface(DDN.mscorlib.DNObject)
  ['{4E83604E-65DA-30F8-95DB-AEBE78A7CC36}']
  { getters & setters } 

    function get_CodeDomProvider: DDN.System.DNCodeDomProvider;

  { methods } 

    procedure AddAssemblyReference(a: DDN.mscorlib.DNAssembly);
    function CreateCodeFile(buildProvider: DNCompilation_BuildProvider): DDN.mscorlib.DNTextWriter;
    procedure AddCodeCompileUnit(buildProvider: DNCompilation_BuildProvider; compileUnit: DDN.System.DNCodeCompileUnit);
    procedure GenerateTypeFactory(typeName: string);
    function CreateEmbeddedResource(buildProvider: DNCompilation_BuildProvider; name: string): DDN.mscorlib.DNStream;
    function GetTempFilePhysicalPath(extension: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeDomProvider: DDN.System.DNCodeDomProvider read get_CodeDomProvider;
  end;

  TDNAssemblyBuilder = class(TDNGenericImport<DNAssemblyBuilderClass, DNAssemblyBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNBuildDependencySetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1E535551-238E-5162-AACA-0F854D6D5EC1}']
  end;

  [DNTypeName('System.Web.Compilation.BuildDependencySet')]
  DNBuildDependencySet = interface(DDN.mscorlib.DNObject)
  ['{14C54DA9-4FFC-3578-ACCE-D55210FCC5F3}']
  { getters & setters } 

    function get_HashCode: string;
    function get_VirtualPaths: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HashCode: string read get_HashCode;
    property VirtualPaths: DDN.mscorlib.DNIEnumerable read get_VirtualPaths;
  end;

  TDNBuildDependencySet = class(TDNGenericImport<DNBuildDependencySetClass, DNBuildDependencySet>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNBuildManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A2481E5-B68A-5B18-B8D0-3A11E0B949D0}']
  { static getter & setter } 

    {class} function get_CodeAssemblies: DDN.mscorlib.DNIList;
    {class} function get_BatchCompilationEnabled: DDN.mscorlib.DNNullable<Boolean>;
    {class} procedure set_BatchCompilationEnabled(value: DDN.mscorlib.DNNullable<Boolean>);
    {class} function get_IsPrecompiledApp: Boolean;
    {class} function get_IsUpdatablePrecompiledApp: Boolean;
    {class} function get_TargetFramework: DDN.System.DNFrameworkName;

  { static methods } 

    {class} procedure AddReferencedAssembly(assembly: DDN.mscorlib.DNAssembly);
    {class} function GetReferencedAssemblies: DDN.mscorlib.DNICollection;
    {class} procedure AddCompilationDependency(dependency: string);
    {class} function GetType(typeName: string; throwOnError: Boolean): DDN.mscorlib.DNType; overload;
    {class} function GetGlobalAsaxType: DDN.mscorlib.DNType;
    {class} function GetVirtualPathDependencies(virtualPath: string): DDN.mscorlib.DNICollection;
    {class} function GetCompiledType(virtualPath: string): DDN.mscorlib.DNType;
    {class} function CreateInstanceFromVirtualPath(virtualPath: string; requiredBaseType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    {class} function GetObjectFactory(virtualPath: string; throwIfNotFound: Boolean): DNIWebObjectFactory;
    {class} function GetCompiledAssembly(virtualPath: string): DDN.mscorlib.DNAssembly;
    {class} function GetCompiledCustomString(virtualPath: string): string;
    {class} function GetCachedBuildDependencySet(context: DNHttpContext; virtualPath: string): DNBuildDependencySet; overload;
    {class} function GetCachedBuildDependencySet(context: DNHttpContext; virtualPath: string; ensureIsUpToDate: Boolean): DNBuildDependencySet; overload;
    {class} function CreateCachedFile(fileName: string): DDN.mscorlib.DNStream;
    {class} function ReadCachedFile(fileName: string): DDN.mscorlib.DNStream;
    {class} function GetType(typeName: string; throwOnError: Boolean; ignoreCase: Boolean): DDN.mscorlib.DNType; overload;

  { static propertys } 

    {class} property CodeAssemblies: DDN.mscorlib.DNIList read get_CodeAssemblies;
    {class} property BatchCompilationEnabled: DDN.mscorlib.DNNullable<Boolean> read get_BatchCompilationEnabled write set_BatchCompilationEnabled;
    {class} property IsPrecompiledApp: Boolean read get_IsPrecompiledApp;
    {class} property IsUpdatablePrecompiledApp: Boolean read get_IsUpdatablePrecompiledApp;
    {class} property TargetFramework: DDN.System.DNFrameworkName read get_TargetFramework;
  end;

  [DNTypeName('System.Web.Compilation.BuildManager')]
  DNBuildManager = interface(DDN.mscorlib.DNObject)
  ['{A82089C9-3E95-33F0-A3CB-EFA00BA8ED53}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType; overload;
    function ToString: string;

  end;

  TDNBuildManager = class(TDNGenericImport<DNBuildManagerClass, DNBuildManager>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNCompilation_BuildProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71E2B816-87FB-543A-B59B-6FC1EE321FEC}']
  { static methods } 

    {class} procedure RegisterBuildProvider(extension: string; providerType: DDN.mscorlib.DNType);

  end;

  [DNTypeName('System.Web.Compilation.BuildProvider')]
  DNCompilation_BuildProvider = interface(DDN.mscorlib.DNObject)
  ['{EC8FDEDE-9404-38C2-8F6A-96AD3DA68E19}']
  { getters & setters } 

    function get_CodeCompilerType: DNCompilerType;
    function get_VirtualPathDependencies: DDN.mscorlib.DNICollection;

  { methods } 

    procedure GenerateCode(assemblyBuilder: DNAssemblyBuilder);
    function GetGeneratedType(results: DDN.System.DNCompilerResults): DDN.mscorlib.DNType;
    function GetCustomString(results: DDN.System.DNCompilerResults): string;
    function GetResultFlags(results: DDN.System.DNCompilerResults): DNBuildProviderResultFlags;
    procedure ProcessCompileErrors(results: DDN.System.DNCompilerResults);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeCompilerType: DNCompilerType read get_CodeCompilerType;
    property VirtualPathDependencies: DDN.mscorlib.DNICollection read get_VirtualPathDependencies;
  end;

  TDNCompilation_BuildProvider = class(TDNGenericImport<DNCompilation_BuildProviderClass, DNCompilation_BuildProvider>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNClientBuildManagerParameterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{52853D8D-36DC-575B-A8ED-E2CA04A2428F}']
  { constructors } 

    {class} function init: DNClientBuildManagerParameter;

  end;

  [DNTypeName('System.Web.Compilation.ClientBuildManagerParameter')]
  DNClientBuildManagerParameter = interface(DDN.mscorlib.DNObject)
  ['{FCA272CD-5172-3BAD-AEBA-ECC2EF81C6D2}']
  { getters & setters } 

    function get_ExcludedVirtualPaths: DDN.mscorlib.DNList<string>;
    function get_PrecompilationFlags: DNPrecompilationFlags;
    procedure set_PrecompilationFlags(value: DNPrecompilationFlags);
    function get_StrongNameKeyFile: string;
    procedure set_StrongNameKeyFile(value: string);
    function get_StrongNameKeyContainer: string;
    procedure set_StrongNameKeyContainer(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExcludedVirtualPaths: DDN.mscorlib.DNList<string> read get_ExcludedVirtualPaths;
    property PrecompilationFlags: DNPrecompilationFlags read get_PrecompilationFlags write set_PrecompilationFlags;
    property StrongNameKeyFile: string read get_StrongNameKeyFile write set_StrongNameKeyFile;
    property StrongNameKeyContainer: string read get_StrongNameKeyContainer write set_StrongNameKeyContainer;
  end;

  TDNClientBuildManagerParameter = class(TDNGenericImport<DNClientBuildManagerParameterClass, DNClientBuildManagerParameter>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNCompilerTypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B9039E6B-2259-5CBF-8815-1F45C78FAC47}']
  end;

  [DNTypeName('System.Web.Compilation.CompilerType')]
  DNCompilerType = interface(DDN.mscorlib.DNObject)
  ['{5A2760DA-6982-3ABB-B101-712484E50A84}']
  { getters & setters } 

    function get_CodeDomProviderType: DDN.mscorlib.DNType;
    function get_CompilerParameters: DDN.System.DNCompilerParameters;

  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodeDomProviderType: DDN.mscorlib.DNType read get_CodeDomProviderType;
    property CompilerParameters: DDN.System.DNCompilerParameters read get_CompilerParameters;
  end;

  TDNCompilerType = class(TDNGenericImport<DNCompilerTypeClass, DNCompilerType>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNControlBuilderInterceptorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{22CC439E-B6BB-57D9-AAE5-BD57FC80BFB1}']
  end;

  [DNTypeName('System.Web.Compilation.ControlBuilderInterceptor')]
  DNControlBuilderInterceptor = interface(DDN.mscorlib.DNObject)
  ['{ED30978D-0AFF-3C95-A47B-E3376A735A55}']
  { methods } 

    procedure PreControlBuilderInit(controlBuilder: DNControlBuilder; parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attributes: DDN.mscorlib.DNIDictionary; additionalState: DDN.mscorlib.DNIDictionary);
    procedure OnProcessGeneratedCode(controlBuilder: DNControlBuilder; codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod; additionalState: DDN.mscorlib.DNIDictionary);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlBuilderInterceptor = class(TDNGenericImport<DNControlBuilderInterceptorClass, DNControlBuilderInterceptor>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNCompilation_ExpressionBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{869D3956-D5DF-5F44-AA5E-F5A96B0DF22C}']
  end;

  [DNTypeName('System.Web.Compilation.ExpressionBuilder')]
  DNCompilation_ExpressionBuilder = interface(DDN.mscorlib.DNObject)
  ['{5D1ECEA0-5416-3996-A3C8-283E45CB3A9F}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNCompilation_ExpressionBuilder = class(TDNGenericImport<DNCompilation_ExpressionBuilderClass, DNCompilation_ExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNAppSettingsExpressionBuilderClass = interface(DNCompilation_ExpressionBuilderClass)
  ['{BFD0295C-7FB3-50B0-A7B0-6EB711947165}']
  { constructors } 

    {class} function init: DNAppSettingsExpressionBuilder;

  { static methods } 

    {class} function GetAppSetting(key: string): DDN.mscorlib.DNObject; overload;
    {class} function GetAppSetting(key: string; targetType: DDN.mscorlib.DNType; propertyName: string): DDN.mscorlib.DNObject; overload;

  end;

  [DNTypeName('System.Web.Compilation.AppSettingsExpressionBuilder')]
  DNAppSettingsExpressionBuilder = interface(DNCompilation_ExpressionBuilder)
  ['{15DF62C8-C4DC-3D31-AF24-8E804D3E7312}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNAppSettingsExpressionBuilder = class(TDNGenericImport<DNAppSettingsExpressionBuilderClass, DNAppSettingsExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNConnectionStringsExpressionBuilderClass = interface(DNCompilation_ExpressionBuilderClass)
  ['{D9F0832D-C486-5919-B4DD-CAED2FAA98D1}']
  { constructors } 

    {class} function init: DNConnectionStringsExpressionBuilder;

  { static methods } 

    {class} function GetConnectionStringProviderName(connectionStringName: string): string;
    {class} function GetConnectionString(connectionStringName: string): string;

  end;

  [DNTypeName('System.Web.Compilation.ConnectionStringsExpressionBuilder')]
  DNConnectionStringsExpressionBuilder = interface(DNCompilation_ExpressionBuilder)
  ['{E36A5F5E-5A38-3905-ADAF-68BF3249DE7B}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNConnectionStringsExpressionBuilder = class(TDNGenericImport<DNConnectionStringsExpressionBuilderClass, DNConnectionStringsExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNResourceExpressionBuilderClass = interface(DNCompilation_ExpressionBuilderClass)
  ['{57336FED-73DD-5C5F-95C0-2534DA652BA3}']
  { constructors } 

    {class} function init: DNResourceExpressionBuilder;

  { static methods } 

    {class} function ParseExpression(expression: string): DNResourceExpressionFields; overload;

  end;

  [DNTypeName('System.Web.Compilation.ResourceExpressionBuilder')]
  DNResourceExpressionBuilder = interface(DNCompilation_ExpressionBuilder)
  ['{379F0FB9-8653-3D74-A9A6-CA55798CB52E}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNResourceExpressionBuilder = class(TDNGenericImport<DNResourceExpressionBuilderClass, DNResourceExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNRouteUrlExpressionBuilderClass = interface(DNCompilation_ExpressionBuilderClass)
  ['{E5C65368-04E9-51CE-9E34-A93133B54FE7}']
  { constructors } 

    {class} function init: DNRouteUrlExpressionBuilder;

  { static methods } 

    {class} function TryParseRouteExpression(expression: string; routeValues: DNRouteValueDictionary; out routeName: string): Boolean;
    {class} function GetRouteUrl(control: DNControl; expression: string): string;

  end;

  [DNTypeName('System.Web.Compilation.RouteUrlExpressionBuilder')]
  DNRouteUrlExpressionBuilder = interface(DNCompilation_ExpressionBuilder)
  ['{FB779BEA-4AF1-330A-BEDD-92996D9CED2F}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNRouteUrlExpressionBuilder = class(TDNGenericImport<DNRouteUrlExpressionBuilderClass, DNRouteUrlExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNRouteValueExpressionBuilderClass = interface(DNCompilation_ExpressionBuilderClass)
  ['{58923B55-086B-53C2-8B06-6A3EDDC76731}']
  { constructors } 

    {class} function init: DNRouteValueExpressionBuilder;

  { static methods } 

    {class} function GetRouteValue(page: DNPage; key: string; controlType: DDN.mscorlib.DNType; propertyName: string): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Web.Compilation.RouteValueExpressionBuilder')]
  DNRouteValueExpressionBuilder = interface(DNCompilation_ExpressionBuilder)
  ['{EC703CFF-9780-3282-BFD8-77377797E74E}']
  { getters & setters } 

    function get_SupportsEvaluate: Boolean;

  { methods } 

    function EvaluateExpression(target: DDN.mscorlib.DNObject; entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function GetCodeExpression(entry: DNBoundPropertyEntry; parsedData: DDN.mscorlib.DNObject; context: DNExpressionBuilderContext): DDN.System.DNCodeExpression;
    function ParseExpression(expression: string; propertyType: DDN.mscorlib.DNType; context: DNExpressionBuilderContext): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsEvaluate: Boolean read get_SupportsEvaluate;
  end;

  TDNRouteValueExpressionBuilder = class(TDNGenericImport<DNRouteValueExpressionBuilderClass, DNRouteValueExpressionBuilder>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNExpressionBuilderContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5D6D38B4-F750-5508-AA92-087A78121318}']
  { constructors } 

    {class} function init(virtualPath: string): DNExpressionBuilderContext; overload;
    {class} function init(templateControl: DNTemplateControl): DNExpressionBuilderContext; overload;

  end;

  [DNTypeName('System.Web.Compilation.ExpressionBuilderContext')]
  DNExpressionBuilderContext = interface(DDN.mscorlib.DNObject)
  ['{F3A42765-A013-32AB-A9D2-6A0977724134}']
  { getters & setters } 

    function get_TemplateControl: DNTemplateControl;
    function get_VirtualPath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TemplateControl: DNTemplateControl read get_TemplateControl;
    property VirtualPath: string read get_VirtualPath;
  end;

  TDNExpressionBuilderContext = class(TDNGenericImport<DNExpressionBuilderContextClass, DNExpressionBuilderContext>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNImplicitResourceKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{15B00548-6028-51DE-AEAB-DD7A99C87D1A}']
  { constructors } 

    {class} function init: DNImplicitResourceKey; overload;
    {class} function init(filter: string; keyPrefix: string; &property: string): DNImplicitResourceKey; overload;

  end;

  [DNTypeName('System.Web.Compilation.ImplicitResourceKey')]
  DNImplicitResourceKey = interface(DDN.mscorlib.DNObject)
  ['{7A13EB6D-7DB3-3FCF-9A6B-C035DE1F58A8}']
  { getters & setters } 

    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_KeyPrefix: string;
    procedure set_KeyPrefix(value: string);
    function get_Property: string;
    procedure set_Property(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Filter: string read get_Filter write set_Filter;
    property KeyPrefix: string read get_KeyPrefix write set_KeyPrefix;
    property &Property: string read get_Property write set_Property;
  end;

  TDNImplicitResourceKey = class(TDNGenericImport<DNImplicitResourceKeyClass, DNImplicitResourceKey>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNLinePragmaCodeInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDC1DA02-BC87-5D47-BEDE-3023C60F5173}']
  { constructors } 

    {class} function init: DNLinePragmaCodeInfo; overload;
    {class} function init(startLine: Int32; startColumn: Int32; startGeneratedColumn: Int32; codeLength: Int32; isCodeNugget: Boolean): DNLinePragmaCodeInfo; overload;

  end;

  [DNTypeName('System.Web.Compilation.LinePragmaCodeInfo')]
  DNLinePragmaCodeInfo = interface(DDN.mscorlib.DNObject)
  ['{D1D4D132-1758-3D32-AA49-6FD49215F77A}']
  { getters & setters } 

    function get_StartLine: Int32;
    function get_StartColumn: Int32;
    function get_StartGeneratedColumn: Int32;
    function get_CodeLength: Int32;
    function get_IsCodeNugget: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartLine: Int32 read get_StartLine;
    property StartColumn: Int32 read get_StartColumn;
    property StartGeneratedColumn: Int32 read get_StartGeneratedColumn;
    property CodeLength: Int32 read get_CodeLength;
    property IsCodeNugget: Boolean read get_IsCodeNugget;
  end;

  TDNLinePragmaCodeInfo = class(TDNGenericImport<DNLinePragmaCodeInfoClass, DNLinePragmaCodeInfo>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNResourceExpressionFieldsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC67E541-2530-5EDF-8F1D-307D8FE336C8}']
  end;

  [DNTypeName('System.Web.Compilation.ResourceExpressionFields')]
  DNResourceExpressionFields = interface(DDN.mscorlib.DNObject)
  ['{3ACB191D-3A03-3BB3-965C-27054D612BAB}']
  { getters & setters } 

    function get_ClassKey: string;
    function get_ResourceKey: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClassKey: string read get_ClassKey;
    property ResourceKey: string read get_ResourceKey;
  end;

  TDNResourceExpressionFields = class(TDNGenericImport<DNResourceExpressionFieldsClass, DNResourceExpressionFields>) end;

  //-------------namespace: System.Web.Compilation----------------
  DNResourceProviderFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1135788-5B7D-59AF-B5BD-2354787A8771}']
  end;

  [DNTypeName('System.Web.Compilation.ResourceProviderFactory')]
  DNResourceProviderFactory = interface(DDN.mscorlib.DNObject)
  ['{B239CD1E-B1F1-3CA2-905A-BDBA9AC1003F}']
  { methods } 

    function CreateGlobalResourceProvider(classKey: string): DNIResourceProvider;
    function CreateLocalResourceProvider(virtualPath: string): DNIResourceProvider;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResourceProviderFactory = class(TDNGenericImport<DNResourceProviderFactoryClass, DNResourceProviderFactory>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBrowserCapabilitiesCodeGeneratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F59C2EE7-465B-5044-8099-FED2B790133E}']
  { constructors } 

    {class} function init: DNBrowserCapabilitiesCodeGenerator;

  end;

  [DNTypeName('System.Web.Configuration.BrowserCapabilitiesCodeGenerator')]
  DNBrowserCapabilitiesCodeGenerator = interface(DDN.mscorlib.DNObject)
  ['{05E05926-5192-3F01-8217-4FEE74F24238}']
  { methods } 

    function Uninstall: Boolean;
    procedure Create;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrowserCapabilitiesCodeGenerator = class(TDNGenericImport<DNBrowserCapabilitiesCodeGeneratorClass, DNBrowserCapabilitiesCodeGenerator>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBrowserCapabilitiesFactoryBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{774E3D4C-5C87-566C-A6D0-E2B5D241A83A}']
  { constructors } 

    {class} function init: DNBrowserCapabilitiesFactoryBase;

  end;

  [DNTypeName('System.Web.Configuration.BrowserCapabilitiesFactoryBase')]
  DNBrowserCapabilitiesFactoryBase = interface(DDN.mscorlib.DNObject)
  ['{98D516FB-7293-3EFF-BA8C-6E8379860BF9}']
  { methods } 

    procedure ConfigureBrowserCapabilities(headers: DDN.System.DNNameValueCollection; browserCaps: DNHttpBrowserCapabilities);
    procedure ConfigureCustomCapabilities(headers: DDN.System.DNNameValueCollection; browserCaps: DNHttpBrowserCapabilities);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrowserCapabilitiesFactoryBase = class(TDNGenericImport<DNBrowserCapabilitiesFactoryBaseClass, DNBrowserCapabilitiesFactoryBase>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNBrowserCapabilitiesFactoryClass = interface(DNBrowserCapabilitiesFactoryBaseClass)
  ['{A0D6A65A-3D26-5CAF-BDEC-F7C9E6281A9A}']
  { constructors } 

    {class} function init: DNBrowserCapabilitiesFactory;

  end;

  [DNTypeName('System.Web.Configuration.BrowserCapabilitiesFactory')]
  DNBrowserCapabilitiesFactory = interface(DNBrowserCapabilitiesFactoryBase)
  ['{BADB4865-43D6-34FA-8F77-922613336620}']
  { methods } 

    procedure ConfigureBrowserCapabilities(headers: DDN.System.DNNameValueCollection; browserCaps: DNHttpBrowserCapabilities);
    procedure ConfigureCustomCapabilities(headers: DDN.System.DNNameValueCollection; browserCaps: DNHttpBrowserCapabilities);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBrowserCapabilitiesFactory = class(TDNGenericImport<DNBrowserCapabilitiesFactoryClass, DNBrowserCapabilitiesFactory>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpCapabilitiesBaseClass = interface(DNObjectClass)
  ['{95474E61-7FE0-5F58-BA83-59FE12F61C6B}']
  { static getter & setter } 

    {class} function get_BrowserCapabilitiesProvider: DNHttpCapabilitiesProvider;
    {class} procedure set_BrowserCapabilitiesProvider(value: DNHttpCapabilitiesProvider);

  { constructors } 

    {class} function init: DNHttpCapabilitiesBase;

  { static methods } 

    {class} function GetConfigCapabilities(configKey: string; request: DNHttpRequest): DNHttpCapabilitiesBase;

  { static propertys } 

    {class} property BrowserCapabilitiesProvider: DNHttpCapabilitiesProvider read get_BrowserCapabilitiesProvider write set_BrowserCapabilitiesProvider;
  end;

  [DNTypeName('System.Web.Configuration.HttpCapabilitiesBase')]
  DNHttpCapabilitiesBase = interface(DNIFilterResolutionService)
  ['{7741E04D-9558-3B40-B762-8A40D023C2E0}']
  { getters & setters } 

    function get_UseOptimizedCacheKey: Boolean;
    function get_Item(key: string): string;
    function get_Capabilities: DDN.mscorlib.DNIDictionary;
    procedure set_Capabilities(value: DDN.mscorlib.DNIDictionary);
    function get_Adapters: DDN.mscorlib.DNIDictionary;
    function get_HtmlTextWriter: string;
    procedure set_HtmlTextWriter(value: string);
    function get_Id: string;
    function get_Browsers: DDN.mscorlib.DNArrayList;
    function get_ClrVersion: DDN.mscorlib.DNVersion;
    function get_Type: string;
    function get_Browser: string;
    function get_Version: string;
    function get_MajorVersion: Int32;
    function get_MinorVersionString: string;
    function get_MinorVersion: Double;
    function get_Platform: string;
    function get_TagWriter: DDN.mscorlib.DNType;
    function get_EcmaScriptVersion: DDN.mscorlib.DNVersion;
    function get_MSDomVersion: DDN.mscorlib.DNVersion;
    function get_W3CDomVersion: DDN.mscorlib.DNVersion;
    function get_Beta: Boolean;
    function get_Crawler: Boolean;
    function get_AOL: Boolean;
    function get_Win16: Boolean;
    function get_Win32: Boolean;
    function get_Frames: Boolean;
    function get_RequiresControlStateInSession: Boolean;
    function get_Tables: Boolean;
    function get_Cookies: Boolean;
    function get_VBScript: Boolean;
    function get_JavaScript: Boolean;
    function get_JavaApplets: Boolean;
    function get_JScriptVersion: DDN.mscorlib.DNVersion;
    function get_ActiveXControls: Boolean;
    function get_BackgroundSounds: Boolean;
    function get_CDF: Boolean;
    function get_MobileDeviceManufacturer: string;
    function get_MobileDeviceModel: string;
    function get_GatewayVersion: string;
    function get_GatewayMajorVersion: Int32;
    function get_GatewayMinorVersion: Double;
    function get_PreferredRenderingType: string;
    function get_PreferredRequestEncoding: string;
    function get_PreferredResponseEncoding: string;
    function get_PreferredRenderingMime: string;
    function get_PreferredImageMime: string;
    function get_ScreenCharactersWidth: Int32;
    function get_ScreenCharactersHeight: Int32;
    function get_ScreenPixelsWidth: Int32;
    function get_ScreenPixelsHeight: Int32;
    function get_ScreenBitDepth: Int32;
    function get_IsColor: Boolean;
    function get_InputType: string;
    function get_NumberOfSoftkeys: Int32;
    function get_MaximumSoftkeyLabelLength: Int32;
    function get_CanInitiateVoiceCall: Boolean;
    function get_CanSendMail: Boolean;
    function get_HasBackButton: Boolean;
    function get_RendersWmlDoAcceptsInline: Boolean;
    function get_RendersWmlSelectsAsMenuCards: Boolean;
    function get_RendersBreaksAfterWmlAnchor: Boolean;
    function get_RendersBreaksAfterWmlInput: Boolean;
    function get_RendersBreakBeforeWmlSelectAndInput: Boolean;
    function get_RequiresPhoneNumbersAsPlainText: Boolean;
    function get_RequiresUrlEncodedPostfieldValues: Boolean;
    function get_RequiredMetaTagNameValue: string;
    function get_RendersBreaksAfterHtmlLists: Boolean;
    function get_RequiresUniqueHtmlInputNames: Boolean;
    function get_RequiresUniqueHtmlCheckboxNames: Boolean;
    function get_SupportsCss: Boolean;
    function get_HidesRightAlignedMultiselectScrollbars: Boolean;
    function get_IsMobileDevice: Boolean;
    function get_RequiresAttributeColonSubstitution: Boolean;
    function get_CanRenderOneventAndPrevElementsTogether: Boolean;
    function get_CanRenderInputAndSelectElementsTogether: Boolean;
    function get_CanRenderAfterInputOrSelectElement: Boolean;
    function get_CanRenderPostBackCards: Boolean;
    function get_CanRenderMixedSelects: Boolean;
    function get_CanCombineFormsInDeck: Boolean;
    function get_CanRenderSetvarZeroWithMultiSelectionList: Boolean;
    function get_SupportsImageSubmit: Boolean;
    function get_RequiresUniqueFilePathSuffix: Boolean;
    function get_RequiresNoBreakInFormatting: Boolean;
    function get_RequiresLeadingPageBreak: Boolean;
    function get_SupportsSelectMultiple: Boolean;
    function get_SupportsBold: Boolean;
    function get_SupportsItalic: Boolean;
    function get_SupportsFontSize: Boolean;
    function get_SupportsFontName: Boolean;
    function get_SupportsFontColor: Boolean;
    function get_SupportsBodyColor: Boolean;
    function get_SupportsDivAlign: Boolean;
    function get_SupportsDivNoWrap: Boolean;
    function get_RequiresContentTypeMetaTag: Boolean;
    function get_RequiresDBCSCharacter: Boolean;
    function get_RequiresHtmlAdaptiveErrorReporting: Boolean;
    function get_RequiresOutputOptimization: Boolean;
    function get_SupportsAccesskeyAttribute: Boolean;
    function get_SupportsInputIStyle: Boolean;
    function get_SupportsInputMode: Boolean;
    function get_SupportsIModeSymbols: Boolean;
    function get_SupportsJPhoneSymbols: Boolean;
    function get_SupportsJPhoneMultiMediaAttributes: Boolean;
    function get_MaximumRenderedPageSize: Int32;
    function get_RequiresSpecialViewStateEncoding: Boolean;
    function get_SupportsQueryStringInFormAction: Boolean;
    function get_SupportsCacheControlMetaTag: Boolean;
    function get_SupportsUncheck: Boolean;
    function get_CanRenderEmptySelects: Boolean;
    function get_SupportsRedirectWithCookie: Boolean;
    function get_SupportsEmptyStringInCookieValue: Boolean;
    function get_DefaultSubmitButtonLimit: Int32;
    function get_SupportsXmlHttp: Boolean;
    function get_SupportsCallback: Boolean;
    function get_MaximumHrefLength: Int32;

  { methods } 

    procedure DisableOptimizedCacheKey;
    function IsBrowser(browserName: string): Boolean;
    procedure AddBrowser(browserName: string);
    function GetClrVersions: TArray<DDN.mscorlib.DNVersion>;
    function CreateHtmlTextWriter(w: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseOptimizedCacheKey: Boolean read get_UseOptimizedCacheKey;
    property Item[key: string]: string read get_Item; default;
    property Capabilities: DDN.mscorlib.DNIDictionary read get_Capabilities write set_Capabilities;
    property Adapters: DDN.mscorlib.DNIDictionary read get_Adapters;
    property HtmlTextWriter: string read get_HtmlTextWriter write set_HtmlTextWriter;
    property Id: string read get_Id;
    property Browsers: DDN.mscorlib.DNArrayList read get_Browsers;
    property ClrVersion: DDN.mscorlib.DNVersion read get_ClrVersion;
    property &Type: string read get_Type;
    property Browser: string read get_Browser;
    property Version: string read get_Version;
    property MajorVersion: Int32 read get_MajorVersion;
    property MinorVersionString: string read get_MinorVersionString;
    property MinorVersion: Double read get_MinorVersion;
    property Platform: string read get_Platform;
    property TagWriter: DDN.mscorlib.DNType read get_TagWriter;
    property EcmaScriptVersion: DDN.mscorlib.DNVersion read get_EcmaScriptVersion;
    property MSDomVersion: DDN.mscorlib.DNVersion read get_MSDomVersion;
    property W3CDomVersion: DDN.mscorlib.DNVersion read get_W3CDomVersion;
    property Beta: Boolean read get_Beta;
    property Crawler: Boolean read get_Crawler;
    property AOL: Boolean read get_AOL;
    property Win16: Boolean read get_Win16;
    property Win32: Boolean read get_Win32;
    property Frames: Boolean read get_Frames;
    property RequiresControlStateInSession: Boolean read get_RequiresControlStateInSession;
    property Tables: Boolean read get_Tables;
    property Cookies: Boolean read get_Cookies;
    property VBScript: Boolean read get_VBScript;
    property JavaScript: Boolean read get_JavaScript;
    property JavaApplets: Boolean read get_JavaApplets;
    property JScriptVersion: DDN.mscorlib.DNVersion read get_JScriptVersion;
    property ActiveXControls: Boolean read get_ActiveXControls;
    property BackgroundSounds: Boolean read get_BackgroundSounds;
    property CDF: Boolean read get_CDF;
    property MobileDeviceManufacturer: string read get_MobileDeviceManufacturer;
    property MobileDeviceModel: string read get_MobileDeviceModel;
    property GatewayVersion: string read get_GatewayVersion;
    property GatewayMajorVersion: Int32 read get_GatewayMajorVersion;
    property GatewayMinorVersion: Double read get_GatewayMinorVersion;
    property PreferredRenderingType: string read get_PreferredRenderingType;
    property PreferredRequestEncoding: string read get_PreferredRequestEncoding;
    property PreferredResponseEncoding: string read get_PreferredResponseEncoding;
    property PreferredRenderingMime: string read get_PreferredRenderingMime;
    property PreferredImageMime: string read get_PreferredImageMime;
    property ScreenCharactersWidth: Int32 read get_ScreenCharactersWidth;
    property ScreenCharactersHeight: Int32 read get_ScreenCharactersHeight;
    property ScreenPixelsWidth: Int32 read get_ScreenPixelsWidth;
    property ScreenPixelsHeight: Int32 read get_ScreenPixelsHeight;
    property ScreenBitDepth: Int32 read get_ScreenBitDepth;
    property IsColor: Boolean read get_IsColor;
    property InputType: string read get_InputType;
    property NumberOfSoftkeys: Int32 read get_NumberOfSoftkeys;
    property MaximumSoftkeyLabelLength: Int32 read get_MaximumSoftkeyLabelLength;
    property CanInitiateVoiceCall: Boolean read get_CanInitiateVoiceCall;
    property CanSendMail: Boolean read get_CanSendMail;
    property HasBackButton: Boolean read get_HasBackButton;
    property RendersWmlDoAcceptsInline: Boolean read get_RendersWmlDoAcceptsInline;
    property RendersWmlSelectsAsMenuCards: Boolean read get_RendersWmlSelectsAsMenuCards;
    property RendersBreaksAfterWmlAnchor: Boolean read get_RendersBreaksAfterWmlAnchor;
    property RendersBreaksAfterWmlInput: Boolean read get_RendersBreaksAfterWmlInput;
    property RendersBreakBeforeWmlSelectAndInput: Boolean read get_RendersBreakBeforeWmlSelectAndInput;
    property RequiresPhoneNumbersAsPlainText: Boolean read get_RequiresPhoneNumbersAsPlainText;
    property RequiresUrlEncodedPostfieldValues: Boolean read get_RequiresUrlEncodedPostfieldValues;
    property RequiredMetaTagNameValue: string read get_RequiredMetaTagNameValue;
    property RendersBreaksAfterHtmlLists: Boolean read get_RendersBreaksAfterHtmlLists;
    property RequiresUniqueHtmlInputNames: Boolean read get_RequiresUniqueHtmlInputNames;
    property RequiresUniqueHtmlCheckboxNames: Boolean read get_RequiresUniqueHtmlCheckboxNames;
    property SupportsCss: Boolean read get_SupportsCss;
    property HidesRightAlignedMultiselectScrollbars: Boolean read get_HidesRightAlignedMultiselectScrollbars;
    property IsMobileDevice: Boolean read get_IsMobileDevice;
    property RequiresAttributeColonSubstitution: Boolean read get_RequiresAttributeColonSubstitution;
    property CanRenderOneventAndPrevElementsTogether: Boolean read get_CanRenderOneventAndPrevElementsTogether;
    property CanRenderInputAndSelectElementsTogether: Boolean read get_CanRenderInputAndSelectElementsTogether;
    property CanRenderAfterInputOrSelectElement: Boolean read get_CanRenderAfterInputOrSelectElement;
    property CanRenderPostBackCards: Boolean read get_CanRenderPostBackCards;
    property CanRenderMixedSelects: Boolean read get_CanRenderMixedSelects;
    property CanCombineFormsInDeck: Boolean read get_CanCombineFormsInDeck;
    property CanRenderSetvarZeroWithMultiSelectionList: Boolean read get_CanRenderSetvarZeroWithMultiSelectionList;
    property SupportsImageSubmit: Boolean read get_SupportsImageSubmit;
    property RequiresUniqueFilePathSuffix: Boolean read get_RequiresUniqueFilePathSuffix;
    property RequiresNoBreakInFormatting: Boolean read get_RequiresNoBreakInFormatting;
    property RequiresLeadingPageBreak: Boolean read get_RequiresLeadingPageBreak;
    property SupportsSelectMultiple: Boolean read get_SupportsSelectMultiple;
    property SupportsBold: Boolean read get_SupportsBold;
    property SupportsItalic: Boolean read get_SupportsItalic;
    property SupportsFontSize: Boolean read get_SupportsFontSize;
    property SupportsFontName: Boolean read get_SupportsFontName;
    property SupportsFontColor: Boolean read get_SupportsFontColor;
    property SupportsBodyColor: Boolean read get_SupportsBodyColor;
    property SupportsDivAlign: Boolean read get_SupportsDivAlign;
    property SupportsDivNoWrap: Boolean read get_SupportsDivNoWrap;
    property RequiresContentTypeMetaTag: Boolean read get_RequiresContentTypeMetaTag;
    property RequiresDBCSCharacter: Boolean read get_RequiresDBCSCharacter;
    property RequiresHtmlAdaptiveErrorReporting: Boolean read get_RequiresHtmlAdaptiveErrorReporting;
    property RequiresOutputOptimization: Boolean read get_RequiresOutputOptimization;
    property SupportsAccesskeyAttribute: Boolean read get_SupportsAccesskeyAttribute;
    property SupportsInputIStyle: Boolean read get_SupportsInputIStyle;
    property SupportsInputMode: Boolean read get_SupportsInputMode;
    property SupportsIModeSymbols: Boolean read get_SupportsIModeSymbols;
    property SupportsJPhoneSymbols: Boolean read get_SupportsJPhoneSymbols;
    property SupportsJPhoneMultiMediaAttributes: Boolean read get_SupportsJPhoneMultiMediaAttributes;
    property MaximumRenderedPageSize: Int32 read get_MaximumRenderedPageSize;
    property RequiresSpecialViewStateEncoding: Boolean read get_RequiresSpecialViewStateEncoding;
    property SupportsQueryStringInFormAction: Boolean read get_SupportsQueryStringInFormAction;
    property SupportsCacheControlMetaTag: Boolean read get_SupportsCacheControlMetaTag;
    property SupportsUncheck: Boolean read get_SupportsUncheck;
    property CanRenderEmptySelects: Boolean read get_CanRenderEmptySelects;
    property SupportsRedirectWithCookie: Boolean read get_SupportsRedirectWithCookie;
    property SupportsEmptyStringInCookieValue: Boolean read get_SupportsEmptyStringInCookieValue;
    property DefaultSubmitButtonLimit: Int32 read get_DefaultSubmitButtonLimit;
    property SupportsXmlHttp: Boolean read get_SupportsXmlHttp;
    property SupportsCallback: Boolean read get_SupportsCallback;
    property MaximumHrefLength: Int32 read get_MaximumHrefLength;
  end;

  TDNHttpCapabilitiesBase = class(TDNGenericImport<DNHttpCapabilitiesBaseClass, DNHttpCapabilitiesBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpBrowserCapabilitiesClass = interface(DNHttpCapabilitiesBaseClass)
  ['{923D38F9-8454-52BB-8BB2-A4E64FF0D5AD}']
  { constructors } 

    {class} function init: DNHttpBrowserCapabilities;

  end;

  [DNTypeName('System.Web.HttpBrowserCapabilities')]
  DNHttpBrowserCapabilities = interface(DNHttpCapabilitiesBase)
  ['{E418DA6B-5824-387C-AA25-DAE2EA228256}']
  { getters & setters } 

    function get_UseOptimizedCacheKey: Boolean;
    function get_Item(key: string): string;
    function get_Capabilities: DDN.mscorlib.DNIDictionary;
    procedure set_Capabilities(value: DDN.mscorlib.DNIDictionary);
    function get_Adapters: DDN.mscorlib.DNIDictionary;
    function get_HtmlTextWriter: string;
    procedure set_HtmlTextWriter(value: string);
    function get_Id: string;
    function get_Browsers: DDN.mscorlib.DNArrayList;
    function get_ClrVersion: DDN.mscorlib.DNVersion;
    function get_Type: string;
    function get_Browser: string;
    function get_Version: string;
    function get_MajorVersion: Int32;
    function get_MinorVersionString: string;
    function get_MinorVersion: Double;
    function get_Platform: string;
    function get_TagWriter: DDN.mscorlib.DNType;
    function get_EcmaScriptVersion: DDN.mscorlib.DNVersion;
    function get_MSDomVersion: DDN.mscorlib.DNVersion;
    function get_W3CDomVersion: DDN.mscorlib.DNVersion;
    function get_Beta: Boolean;
    function get_Crawler: Boolean;
    function get_AOL: Boolean;
    function get_Win16: Boolean;
    function get_Win32: Boolean;
    function get_Frames: Boolean;
    function get_RequiresControlStateInSession: Boolean;
    function get_Tables: Boolean;
    function get_Cookies: Boolean;
    function get_VBScript: Boolean;
    function get_JavaScript: Boolean;
    function get_JavaApplets: Boolean;
    function get_JScriptVersion: DDN.mscorlib.DNVersion;
    function get_ActiveXControls: Boolean;
    function get_BackgroundSounds: Boolean;
    function get_CDF: Boolean;
    function get_MobileDeviceManufacturer: string;
    function get_MobileDeviceModel: string;
    function get_GatewayVersion: string;
    function get_GatewayMajorVersion: Int32;
    function get_GatewayMinorVersion: Double;
    function get_PreferredRenderingType: string;
    function get_PreferredRequestEncoding: string;
    function get_PreferredResponseEncoding: string;
    function get_PreferredRenderingMime: string;
    function get_PreferredImageMime: string;
    function get_ScreenCharactersWidth: Int32;
    function get_ScreenCharactersHeight: Int32;
    function get_ScreenPixelsWidth: Int32;
    function get_ScreenPixelsHeight: Int32;
    function get_ScreenBitDepth: Int32;
    function get_IsColor: Boolean;
    function get_InputType: string;
    function get_NumberOfSoftkeys: Int32;
    function get_MaximumSoftkeyLabelLength: Int32;
    function get_CanInitiateVoiceCall: Boolean;
    function get_CanSendMail: Boolean;
    function get_HasBackButton: Boolean;
    function get_RendersWmlDoAcceptsInline: Boolean;
    function get_RendersWmlSelectsAsMenuCards: Boolean;
    function get_RendersBreaksAfterWmlAnchor: Boolean;
    function get_RendersBreaksAfterWmlInput: Boolean;
    function get_RendersBreakBeforeWmlSelectAndInput: Boolean;
    function get_RequiresPhoneNumbersAsPlainText: Boolean;
    function get_RequiresUrlEncodedPostfieldValues: Boolean;
    function get_RequiredMetaTagNameValue: string;
    function get_RendersBreaksAfterHtmlLists: Boolean;
    function get_RequiresUniqueHtmlInputNames: Boolean;
    function get_RequiresUniqueHtmlCheckboxNames: Boolean;
    function get_SupportsCss: Boolean;
    function get_HidesRightAlignedMultiselectScrollbars: Boolean;
    function get_IsMobileDevice: Boolean;
    function get_RequiresAttributeColonSubstitution: Boolean;
    function get_CanRenderOneventAndPrevElementsTogether: Boolean;
    function get_CanRenderInputAndSelectElementsTogether: Boolean;
    function get_CanRenderAfterInputOrSelectElement: Boolean;
    function get_CanRenderPostBackCards: Boolean;
    function get_CanRenderMixedSelects: Boolean;
    function get_CanCombineFormsInDeck: Boolean;
    function get_CanRenderSetvarZeroWithMultiSelectionList: Boolean;
    function get_SupportsImageSubmit: Boolean;
    function get_RequiresUniqueFilePathSuffix: Boolean;
    function get_RequiresNoBreakInFormatting: Boolean;
    function get_RequiresLeadingPageBreak: Boolean;
    function get_SupportsSelectMultiple: Boolean;
    function get_SupportsBold: Boolean;
    function get_SupportsItalic: Boolean;
    function get_SupportsFontSize: Boolean;
    function get_SupportsFontName: Boolean;
    function get_SupportsFontColor: Boolean;
    function get_SupportsBodyColor: Boolean;
    function get_SupportsDivAlign: Boolean;
    function get_SupportsDivNoWrap: Boolean;
    function get_RequiresContentTypeMetaTag: Boolean;
    function get_RequiresDBCSCharacter: Boolean;
    function get_RequiresHtmlAdaptiveErrorReporting: Boolean;
    function get_RequiresOutputOptimization: Boolean;
    function get_SupportsAccesskeyAttribute: Boolean;
    function get_SupportsInputIStyle: Boolean;
    function get_SupportsInputMode: Boolean;
    function get_SupportsIModeSymbols: Boolean;
    function get_SupportsJPhoneSymbols: Boolean;
    function get_SupportsJPhoneMultiMediaAttributes: Boolean;
    function get_MaximumRenderedPageSize: Int32;
    function get_RequiresSpecialViewStateEncoding: Boolean;
    function get_SupportsQueryStringInFormAction: Boolean;
    function get_SupportsCacheControlMetaTag: Boolean;
    function get_SupportsUncheck: Boolean;
    function get_CanRenderEmptySelects: Boolean;
    function get_SupportsRedirectWithCookie: Boolean;
    function get_SupportsEmptyStringInCookieValue: Boolean;
    function get_DefaultSubmitButtonLimit: Int32;
    function get_SupportsXmlHttp: Boolean;
    function get_SupportsCallback: Boolean;
    function get_MaximumHrefLength: Int32;

  { methods } 

    procedure DisableOptimizedCacheKey;
    function IsBrowser(browserName: string): Boolean;
    procedure AddBrowser(browserName: string);
    function GetClrVersions: TArray<DDN.mscorlib.DNVersion>;
    function CreateHtmlTextWriter(w: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UseOptimizedCacheKey: Boolean read get_UseOptimizedCacheKey;
    property Item[key: string]: string read get_Item; default;
    property Capabilities: DDN.mscorlib.DNIDictionary read get_Capabilities write set_Capabilities;
    property Adapters: DDN.mscorlib.DNIDictionary read get_Adapters;
    property HtmlTextWriter: string read get_HtmlTextWriter write set_HtmlTextWriter;
    property Id: string read get_Id;
    property Browsers: DDN.mscorlib.DNArrayList read get_Browsers;
    property ClrVersion: DDN.mscorlib.DNVersion read get_ClrVersion;
    property &Type: string read get_Type;
    property Browser: string read get_Browser;
    property Version: string read get_Version;
    property MajorVersion: Int32 read get_MajorVersion;
    property MinorVersionString: string read get_MinorVersionString;
    property MinorVersion: Double read get_MinorVersion;
    property Platform: string read get_Platform;
    property TagWriter: DDN.mscorlib.DNType read get_TagWriter;
    property EcmaScriptVersion: DDN.mscorlib.DNVersion read get_EcmaScriptVersion;
    property MSDomVersion: DDN.mscorlib.DNVersion read get_MSDomVersion;
    property W3CDomVersion: DDN.mscorlib.DNVersion read get_W3CDomVersion;
    property Beta: Boolean read get_Beta;
    property Crawler: Boolean read get_Crawler;
    property AOL: Boolean read get_AOL;
    property Win16: Boolean read get_Win16;
    property Win32: Boolean read get_Win32;
    property Frames: Boolean read get_Frames;
    property RequiresControlStateInSession: Boolean read get_RequiresControlStateInSession;
    property Tables: Boolean read get_Tables;
    property Cookies: Boolean read get_Cookies;
    property VBScript: Boolean read get_VBScript;
    property JavaScript: Boolean read get_JavaScript;
    property JavaApplets: Boolean read get_JavaApplets;
    property JScriptVersion: DDN.mscorlib.DNVersion read get_JScriptVersion;
    property ActiveXControls: Boolean read get_ActiveXControls;
    property BackgroundSounds: Boolean read get_BackgroundSounds;
    property CDF: Boolean read get_CDF;
    property MobileDeviceManufacturer: string read get_MobileDeviceManufacturer;
    property MobileDeviceModel: string read get_MobileDeviceModel;
    property GatewayVersion: string read get_GatewayVersion;
    property GatewayMajorVersion: Int32 read get_GatewayMajorVersion;
    property GatewayMinorVersion: Double read get_GatewayMinorVersion;
    property PreferredRenderingType: string read get_PreferredRenderingType;
    property PreferredRequestEncoding: string read get_PreferredRequestEncoding;
    property PreferredResponseEncoding: string read get_PreferredResponseEncoding;
    property PreferredRenderingMime: string read get_PreferredRenderingMime;
    property PreferredImageMime: string read get_PreferredImageMime;
    property ScreenCharactersWidth: Int32 read get_ScreenCharactersWidth;
    property ScreenCharactersHeight: Int32 read get_ScreenCharactersHeight;
    property ScreenPixelsWidth: Int32 read get_ScreenPixelsWidth;
    property ScreenPixelsHeight: Int32 read get_ScreenPixelsHeight;
    property ScreenBitDepth: Int32 read get_ScreenBitDepth;
    property IsColor: Boolean read get_IsColor;
    property InputType: string read get_InputType;
    property NumberOfSoftkeys: Int32 read get_NumberOfSoftkeys;
    property MaximumSoftkeyLabelLength: Int32 read get_MaximumSoftkeyLabelLength;
    property CanInitiateVoiceCall: Boolean read get_CanInitiateVoiceCall;
    property CanSendMail: Boolean read get_CanSendMail;
    property HasBackButton: Boolean read get_HasBackButton;
    property RendersWmlDoAcceptsInline: Boolean read get_RendersWmlDoAcceptsInline;
    property RendersWmlSelectsAsMenuCards: Boolean read get_RendersWmlSelectsAsMenuCards;
    property RendersBreaksAfterWmlAnchor: Boolean read get_RendersBreaksAfterWmlAnchor;
    property RendersBreaksAfterWmlInput: Boolean read get_RendersBreaksAfterWmlInput;
    property RendersBreakBeforeWmlSelectAndInput: Boolean read get_RendersBreakBeforeWmlSelectAndInput;
    property RequiresPhoneNumbersAsPlainText: Boolean read get_RequiresPhoneNumbersAsPlainText;
    property RequiresUrlEncodedPostfieldValues: Boolean read get_RequiresUrlEncodedPostfieldValues;
    property RequiredMetaTagNameValue: string read get_RequiredMetaTagNameValue;
    property RendersBreaksAfterHtmlLists: Boolean read get_RendersBreaksAfterHtmlLists;
    property RequiresUniqueHtmlInputNames: Boolean read get_RequiresUniqueHtmlInputNames;
    property RequiresUniqueHtmlCheckboxNames: Boolean read get_RequiresUniqueHtmlCheckboxNames;
    property SupportsCss: Boolean read get_SupportsCss;
    property HidesRightAlignedMultiselectScrollbars: Boolean read get_HidesRightAlignedMultiselectScrollbars;
    property IsMobileDevice: Boolean read get_IsMobileDevice;
    property RequiresAttributeColonSubstitution: Boolean read get_RequiresAttributeColonSubstitution;
    property CanRenderOneventAndPrevElementsTogether: Boolean read get_CanRenderOneventAndPrevElementsTogether;
    property CanRenderInputAndSelectElementsTogether: Boolean read get_CanRenderInputAndSelectElementsTogether;
    property CanRenderAfterInputOrSelectElement: Boolean read get_CanRenderAfterInputOrSelectElement;
    property CanRenderPostBackCards: Boolean read get_CanRenderPostBackCards;
    property CanRenderMixedSelects: Boolean read get_CanRenderMixedSelects;
    property CanCombineFormsInDeck: Boolean read get_CanCombineFormsInDeck;
    property CanRenderSetvarZeroWithMultiSelectionList: Boolean read get_CanRenderSetvarZeroWithMultiSelectionList;
    property SupportsImageSubmit: Boolean read get_SupportsImageSubmit;
    property RequiresUniqueFilePathSuffix: Boolean read get_RequiresUniqueFilePathSuffix;
    property RequiresNoBreakInFormatting: Boolean read get_RequiresNoBreakInFormatting;
    property RequiresLeadingPageBreak: Boolean read get_RequiresLeadingPageBreak;
    property SupportsSelectMultiple: Boolean read get_SupportsSelectMultiple;
    property SupportsBold: Boolean read get_SupportsBold;
    property SupportsItalic: Boolean read get_SupportsItalic;
    property SupportsFontSize: Boolean read get_SupportsFontSize;
    property SupportsFontName: Boolean read get_SupportsFontName;
    property SupportsFontColor: Boolean read get_SupportsFontColor;
    property SupportsBodyColor: Boolean read get_SupportsBodyColor;
    property SupportsDivAlign: Boolean read get_SupportsDivAlign;
    property SupportsDivNoWrap: Boolean read get_SupportsDivNoWrap;
    property RequiresContentTypeMetaTag: Boolean read get_RequiresContentTypeMetaTag;
    property RequiresDBCSCharacter: Boolean read get_RequiresDBCSCharacter;
    property RequiresHtmlAdaptiveErrorReporting: Boolean read get_RequiresHtmlAdaptiveErrorReporting;
    property RequiresOutputOptimization: Boolean read get_RequiresOutputOptimization;
    property SupportsAccesskeyAttribute: Boolean read get_SupportsAccesskeyAttribute;
    property SupportsInputIStyle: Boolean read get_SupportsInputIStyle;
    property SupportsInputMode: Boolean read get_SupportsInputMode;
    property SupportsIModeSymbols: Boolean read get_SupportsIModeSymbols;
    property SupportsJPhoneSymbols: Boolean read get_SupportsJPhoneSymbols;
    property SupportsJPhoneMultiMediaAttributes: Boolean read get_SupportsJPhoneMultiMediaAttributes;
    property MaximumRenderedPageSize: Int32 read get_MaximumRenderedPageSize;
    property RequiresSpecialViewStateEncoding: Boolean read get_RequiresSpecialViewStateEncoding;
    property SupportsQueryStringInFormAction: Boolean read get_SupportsQueryStringInFormAction;
    property SupportsCacheControlMetaTag: Boolean read get_SupportsCacheControlMetaTag;
    property SupportsUncheck: Boolean read get_SupportsUncheck;
    property CanRenderEmptySelects: Boolean read get_CanRenderEmptySelects;
    property SupportsRedirectWithCookie: Boolean read get_SupportsRedirectWithCookie;
    property SupportsEmptyStringInCookieValue: Boolean read get_SupportsEmptyStringInCookieValue;
    property DefaultSubmitButtonLimit: Int32 read get_DefaultSubmitButtonLimit;
    property SupportsXmlHttp: Boolean read get_SupportsXmlHttp;
    property SupportsCallback: Boolean read get_SupportsCallback;
    property MaximumHrefLength: Int32 read get_MaximumHrefLength;
  end;

  TDNHttpBrowserCapabilities = class(TDNGenericImport<DNHttpBrowserCapabilitiesClass, DNHttpBrowserCapabilities>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpCapabilitiesProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0B443300-1114-583F-A1EB-DD929CDDB253}']
  end;

  [DNTypeName('System.Web.Configuration.HttpCapabilitiesProvider')]
  DNHttpCapabilitiesProvider = interface(DDN.mscorlib.DNObject)
  ['{6E6673E6-6336-300C-88CA-39F35B407FF3}']
  { methods } 

    function GetBrowserCapabilities(request: DNHttpRequest): DNHttpBrowserCapabilities;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpCapabilitiesProvider = class(TDNGenericImport<DNHttpCapabilitiesProviderClass, DNHttpCapabilitiesProvider>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpCapabilitiesDefaultProviderClass = interface(DNHttpCapabilitiesProviderClass)
  ['{46D1AD25-3BCB-5623-87AB-EA060228DCAC}']
  { constructors } 

    {class} function init: DNHttpCapabilitiesDefaultProvider; overload;
    {class} function init(parent: DNHttpCapabilitiesDefaultProvider): DNHttpCapabilitiesDefaultProvider; overload;

  end;

  [DNTypeName('System.Web.Configuration.HttpCapabilitiesDefaultProvider')]
  DNHttpCapabilitiesDefaultProvider = interface(DNHttpCapabilitiesProvider)
  ['{9C6DAADE-E82C-3165-8109-5A8D34E82B50}']
  { getters & setters } 

    function get_UserAgentCacheKeyLength: Int32;
    procedure set_UserAgentCacheKeyLength(value: Int32);
    function get_ResultType: DDN.mscorlib.DNType;
    procedure set_ResultType(value: DDN.mscorlib.DNType);
    function get_CacheTime: DDN.mscorlib.DNTimeSpan;
    procedure set_CacheTime(value: DDN.mscorlib.DNTimeSpan);

  { methods } 

    procedure AddDependency(variable: string);
    procedure AddRuleList(ruleList: DDN.mscorlib.DNArrayList);
    function GetBrowserCapabilities(request: DNHttpRequest): DNHttpBrowserCapabilities;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserAgentCacheKeyLength: Int32 read get_UserAgentCacheKeyLength write set_UserAgentCacheKeyLength;
    property ResultType: DDN.mscorlib.DNType read get_ResultType write set_ResultType;
    property CacheTime: DDN.mscorlib.DNTimeSpan read get_CacheTime write set_CacheTime;
  end;

  TDNHttpCapabilitiesDefaultProvider = class(TDNGenericImport<DNHttpCapabilitiesDefaultProviderClass, DNHttpCapabilitiesDefaultProvider>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpCapabilitiesSectionHandlerClass = interface(DNObjectClass)
  ['{92C17435-1622-557E-8C80-84C58CC434D1}']
  { constructors } 

    {class} function init: DNHttpCapabilitiesSectionHandler;

  end;

  [DNTypeName('System.Web.Configuration.HttpCapabilitiesSectionHandler')]
  DNHttpCapabilitiesSectionHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{34C07E46-1EC4-3274-BC35-B715EE382A09}']
  { methods } 

    function Create(parent: DDN.mscorlib.DNObject; configurationContext: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpCapabilitiesSectionHandler = class(TDNGenericImport<DNHttpCapabilitiesSectionHandlerClass, DNHttpCapabilitiesSectionHandler>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNHttpConfigurationContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E041522A-8FA2-5899-9B11-B3F25B3B463A}']
  end;

  [DNTypeName('System.Web.Configuration.HttpConfigurationContext')]
  DNHttpConfigurationContext = interface(DDN.mscorlib.DNObject)
  ['{322DB0CB-D528-33CB-81D1-AF81E5F4BBB5}']
  { getters & setters } 

    function get_VirtualPath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VirtualPath: string read get_VirtualPath;
  end;

  TDNHttpConfigurationContext = class(TDNGenericImport<DNHttpConfigurationContextClass, DNHttpConfigurationContext>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProtocolsConfigurationHandlerClass = interface(DNObjectClass)
  ['{F63B9337-B7B5-506C-AC99-AC8F9873BCD8}']
  { constructors } 

    {class} function init: DNProtocolsConfigurationHandler;

  end;

  [DNTypeName('System.Web.Configuration.ProtocolsConfigurationHandler')]
  DNProtocolsConfigurationHandler = interface(DDN.System.Configuration.DNIConfigurationSectionHandler)
  ['{CED831C2-F43F-325D-AA06-0F0F9EBC2EDE}']
  { methods } 

    function Create(parent: DDN.mscorlib.DNObject; configContextObj: DDN.mscorlib.DNObject; section: DDN.System.Xml.DNXmlNode): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProtocolsConfigurationHandler = class(TDNGenericImport<DNProtocolsConfigurationHandlerClass, DNProtocolsConfigurationHandler>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNProvidersHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD441F1C-F504-5772-9A65-8C02D34B79B3}']
  { static methods } 

    {class} function InstantiateProvider(providerSettings: DDN.System.Configuration.DNProviderSettings; providerType: DDN.mscorlib.DNType): DDN.System.Configuration.DNProviderBase;
    {class} procedure InstantiateProviders(configProviders: DDN.System.Configuration.DNProviderSettingsCollection; providers: DDN.System.Configuration.DNProviderCollection; providerType: DDN.mscorlib.DNType);

  end;

  [DNTypeName('System.Web.Configuration.ProvidersHelper')]
  DNProvidersHelper = interface(DDN.mscorlib.DNObject)
  ['{768D9617-2630-36BC-A155-3E6BC445BA79}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProvidersHelper = class(TDNGenericImport<DNProvidersHelperClass, DNProvidersHelper>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRegexWorkerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DD2F2D9E-4A57-51DF-9164-92E7EAF33C74}']
  { constructors } 

    {class} function init(browserCaps: DNHttpBrowserCapabilities): DNRegexWorker;

  end;

  [DNTypeName('System.Web.Configuration.RegexWorker')]
  DNRegexWorker = interface(DDN.mscorlib.DNObject)
  ['{6C408AE1-F0F0-3AF4-BE11-47E3C2906989}']
  { getters & setters } 

    function get_Item(key: string): string;

  { methods } 

    function ProcessRegex(target: string; regexExpression: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item; default;
  end;

  TDNRegexWorker = class(TDNGenericImport<DNRegexWorkerClass, DNRegexWorker>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNRemoteWebConfigurationHostServerClass = interface(DNObjectClass)
  ['{AA8BA406-4C64-5C9C-944A-21586A6962D3}']
  { constructors } 

    {class} function init: DNRemoteWebConfigurationHostServer;

  end;

  [DNTypeName('System.Web.Configuration.RemoteWebConfigurationHostServer')]
  DNRemoteWebConfigurationHostServer = interface(DNIRemoteWebConfigurationHostServer)
  ['{DFD0D215-72C0-450D-92B5-10971FC24625}']
  { methods } 

    function GetData(fileName: string; getReadTimeOnly: Boolean; out readTime: Int64): TArray<Byte>;
    procedure WriteData(fileName: string; templateFileName: string; data: TArray<Byte>; out readTime: Int64);
    function GetFilePaths(webLevelAsInt: Int32; path: string; site: string; locationSubPath: string): string;
    function DoEncryptOrDecrypt(doEncrypt: Boolean; xmlString: string; protectionProviderName: string; protectionProviderType: string; paramKeys: TArray<string>; paramValues: TArray<string>): string;
    procedure GetFileDetails(name: string; out exists: Boolean; out size: Int64; out createDate: Int64; out lastWriteDate: Int64);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRemoteWebConfigurationHostServer = class(TDNGenericImport<DNRemoteWebConfigurationHostServerClass, DNRemoteWebConfigurationHostServer>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNUserMapPathClass = interface(DNObjectClass)
  ['{A198A168-83C9-5887-8CBE-49820DFD2C4E}']
  { constructors } 

    {class} function init(fileMap: DDN.System.Configuration.DNConfigurationFileMap): DNUserMapPath;

  end;

  [DNTypeName('System.Web.Configuration.UserMapPath')]
  DNUserMapPath = interface(DNIConfigMapPath)
  ['{5468F477-D8B9-3D23-8E04-E5A890EFC106}']
  { methods } 

    function GetMachineConfigFilename: string;
    function GetRootWebConfigFilename: string;
    procedure GetPathConfigFilename(siteID: string; path: string; out directory: string; out baseName: string);
    procedure GetDefaultSiteNameAndID(out siteName: string; out siteID: string);
    procedure ResolveSiteArgument(siteArgument: string; out siteName: string; out siteID: string);
    function MapPath(siteID: string; path: string): string;
    function GetAppPathForPath(siteID: string; path: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUserMapPath = class(TDNGenericImport<DNUserMapPathClass, DNUserMapPath>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNVirtualDirectoryMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{45B678A4-A41E-5BA0-BFAA-D06406ED0E89}']
  { constructors } 

    {class} function init(physicalDirectory: string; isAppRoot: Boolean): DNVirtualDirectoryMapping; overload;
    {class} function init(physicalDirectory: string; isAppRoot: Boolean; configFileBaseName: string): DNVirtualDirectoryMapping; overload;

  end;

  [DNTypeName('System.Web.Configuration.VirtualDirectoryMapping')]
  DNVirtualDirectoryMapping = interface(DDN.mscorlib.DNObject)
  ['{221E4E06-D7E6-341E-960D-DA51B16769A8}']
  { getters & setters } 

    function get_VirtualDirectory: string;
    function get_PhysicalDirectory: string;
    procedure set_PhysicalDirectory(value: string);
    function get_IsAppRoot: Boolean;
    procedure set_IsAppRoot(value: Boolean);
    function get_ConfigFileBaseName: string;
    procedure set_ConfigFileBaseName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VirtualDirectory: string read get_VirtualDirectory;
    property PhysicalDirectory: string read get_PhysicalDirectory write set_PhysicalDirectory;
    property IsAppRoot: Boolean read get_IsAppRoot write set_IsAppRoot;
    property ConfigFileBaseName: string read get_ConfigFileBaseName write set_ConfigFileBaseName;
  end;

  TDNVirtualDirectoryMapping = class(TDNGenericImport<DNVirtualDirectoryMappingClass, DNVirtualDirectoryMapping>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebConfigurationManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4FCCAAFA-428C-5972-B0D1-E5098D16960D}']
  { static getter & setter } 

    {class} function get_AppSettings: DDN.System.DNNameValueCollection;
    {class} function get_ConnectionStrings: DDN.System.Configuration.DNConnectionStringSettingsCollection;

  { static methods } 

    {class} function OpenMachineConfiguration(locationSubPath: string; server: string; userToken: IntPtr): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string; site: string; locationSubPath: string; server: string; userToken: IntPtr): DDN.System.Configuration.DNConfiguration; overload;
    {class} function GetSection(sectionName: string; path: string): DDN.mscorlib.DNObject; overload;
    {class} function OpenMachineConfiguration: DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMachineConfiguration(locationSubPath: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMachineConfiguration(locationSubPath: string; server: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMachineConfiguration(locationSubPath: string; server: string; userName: string; password: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMappedMachineConfiguration(fileMap: DDN.System.Configuration.DNConfigurationFileMap): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMappedMachineConfiguration(fileMap: DDN.System.Configuration.DNConfigurationFileMap; locationSubPath: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string; site: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string; site: string; locationSubPath: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string; site: string; locationSubPath: string; server: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenWebConfiguration(path: string; site: string; locationSubPath: string; server: string; userName: string; password: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMappedWebConfiguration(fileMap: DNWebConfigurationFileMap; path: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMappedWebConfiguration(fileMap: DNWebConfigurationFileMap; path: string; site: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function OpenMappedWebConfiguration(fileMap: DNWebConfigurationFileMap; path: string; site: string; locationSubPath: string): DDN.System.Configuration.DNConfiguration; overload;
    {class} function GetSection(sectionName: string): DDN.mscorlib.DNObject; overload;
    {class} function GetWebApplicationSection(sectionName: string): DDN.mscorlib.DNObject;

  { static propertys } 

    {class} property AppSettings: DDN.System.DNNameValueCollection read get_AppSettings;
    {class} property ConnectionStrings: DDN.System.Configuration.DNConnectionStringSettingsCollection read get_ConnectionStrings;
  end;

  [DNTypeName('System.Web.Configuration.WebConfigurationManager')]
  DNWebConfigurationManager = interface(DDN.mscorlib.DNObject)
  ['{32A5BFE5-A1ED-365D-A9BF-C3F1D3AE35DB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebConfigurationManager = class(TDNGenericImport<DNWebConfigurationManagerClass, DNWebConfigurationManager>) end;

  //-------------namespace: System.Web.Configuration----------------
  DNWebContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E2504F1F-C95C-5120-B4B5-71A99A86F910}']
  { constructors } 

    {class} function init(pathLevel: DNWebApplicationLevel; site: string; applicationPath: string; path: string; locationSubPath: string; appConfigPath: string): DNWebContext;

  end;

  [DNTypeName('System.Web.Configuration.WebContext')]
  DNWebContext = interface(DDN.mscorlib.DNObject)
  ['{830A309C-ECF9-3AD9-9A82-DC26B64E9863}']
  { getters & setters } 

    function get_ApplicationLevel: DNWebApplicationLevel;
    function get_Site: string;
    function get_ApplicationPath: string;
    function get_Path: string;
    function get_LocationSubPath: string;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ApplicationLevel: DNWebApplicationLevel read get_ApplicationLevel;
    property Site: string read get_Site;
    property ApplicationPath: string read get_ApplicationPath;
    property Path: string read get_Path;
    property LocationSubPath: string read get_LocationSubPath;
  end;

  TDNWebContext = class(TDNGenericImport<DNWebContextClass, DNWebContext>) end;

  //-------------namespace: System.Web----------------
  DNDefaultHttpHandlerClass = interface(DNObjectClass)
  ['{A384C27C-1521-5223-8644-6A7AC5413205}']
  { constructors } 

    {class} function init: DNDefaultHttpHandler;

  end;

  [DNTypeName('System.Web.DefaultHttpHandler')]
  DNDefaultHttpHandler = interface(DNIHttpAsyncHandler)
  ['{B81F7FB2-D024-3C29-9ABE-3A95E9C03D9A}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    procedure OnExecuteUrlPreconditionFailure;
    function OverrideExecuteUrlPath: string;
    procedure EndProcessRequest(result: DDN.mscorlib.DNIAsyncResult);
    procedure ProcessRequest(context: DNHttpContext);
    function BeginProcessRequest(context: DNHttpContext; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReusable: Boolean read get_IsReusable;
  end;

  TDNDefaultHttpHandler = class(TDNGenericImport<DNDefaultHttpHandlerClass, DNDefaultHttpHandler>) end;

  //-------------namespace: System.Web----------------
  DNEventHandlerTaskAsyncHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DEDAC80C-B04D-5930-BA66-E6C98CF8D7A4}']
  { constructors } 

    {class} function init(handler: DNTaskEventHandler): DNEventHandlerTaskAsyncHelper;

  end;

  [DNTypeName('System.Web.EventHandlerTaskAsyncHelper')]
  DNEventHandlerTaskAsyncHelper = interface(DDN.mscorlib.DNObject)
  ['{F2B45C0E-E004-3B40-93D3-5B1CE88F3E74}']
  { getters & setters } 

    function get_BeginEventHandler: DNBeginEventHandler;
    function get_EndEventHandler: DNEndEventHandler;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BeginEventHandler: DNBeginEventHandler read get_BeginEventHandler;
    property EndEventHandler: DNEndEventHandler read get_EndEventHandler;
  end;

  TDNEventHandlerTaskAsyncHelper = class(TDNGenericImport<DNEventHandlerTaskAsyncHelperClass, DNEventHandlerTaskAsyncHelper>) end;

  //-------------namespace: System.Web.Globalization----------------
  DNResourceFileStringLocalizerProviderClass = interface(DNObjectClass)
  ['{04210A51-8540-5E61-AF37-99E2F0D0A41B}']
  { constructors } 

    {class} function init: DNResourceFileStringLocalizerProvider;

  end;

  [DNTypeName('System.Web.Globalization.ResourceFileStringLocalizerProvider')]
  DNResourceFileStringLocalizerProvider = interface(DNIStringLocalizerProvider)
  ['{5A9A4175-95E7-3501-B09E-5AF1A81487D7}']
  { methods } 

    function GetLocalizedString(culture: DDN.mscorlib.DNCultureInfo; name: string; arguments: TArray<DDN.mscorlib.DNObject>): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNResourceFileStringLocalizerProvider = class(TDNGenericImport<DNResourceFileStringLocalizerProviderClass, DNResourceFileStringLocalizerProvider>)
  public const
   ResourceFileName = 'DataAnnotation.Localization';
  end;

  //-------------namespace: System.Web.Globalization----------------
  DNStringLocalizerProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ED6CAC74-AF03-59CC-8DE4-21DB1D020766}']
  { static getter & setter } 

    {class} function get_DataAnnotationStringLocalizerProvider: DNIStringLocalizerProvider;
    {class} procedure set_DataAnnotationStringLocalizerProvider(value: DNIStringLocalizerProvider);

  { static propertys } 

    {class} property DataAnnotationStringLocalizerProvider: DNIStringLocalizerProvider read get_DataAnnotationStringLocalizerProvider write set_DataAnnotationStringLocalizerProvider;
  end;

  [DNTypeName('System.Web.Globalization.StringLocalizerProviders')]
  DNStringLocalizerProviders = interface(DDN.mscorlib.DNObject)
  ['{6223D429-5EFB-37BA-9F2B-F9C5015AE31E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStringLocalizerProviders = class(TDNGenericImport<DNStringLocalizerProvidersClass, DNStringLocalizerProviders>) end;

  //-------------namespace: System.Web.Handlers----------------
  DNAssemblyResourceLoaderClass = interface(DNObjectClass)
  ['{E6B757EA-0924-5EF5-AFD8-9BC1E3E4E749}']
  { constructors } 

    {class} function init: DNAssemblyResourceLoader;

  end;

  [DNTypeName('System.Web.Handlers.AssemblyResourceLoader')]
  DNAssemblyResourceLoader = interface(DNIHttpHandler)
  ['{D59C39A9-40EE-349A-94D5-2748F5E0E066}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssemblyResourceLoader = class(TDNGenericImport<DNAssemblyResourceLoaderClass, DNAssemblyResourceLoader>) end;

  //-------------namespace: System.Web.Handlers----------------
  DNTraceHandlerClass = interface(DNObjectClass)
  ['{91B08D06-5CC3-5BF9-B5FB-446A38FEC80B}']
  { constructors } 

    {class} function init: DNTraceHandler;

  end;

  [DNTypeName('System.Web.Handlers.TraceHandler')]
  DNTraceHandler = interface(DNIHttpHandler)
  ['{DD218073-035A-343B-A4C7-BBE1C1F5A817}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTraceHandler = class(TDNGenericImport<DNTraceHandlerClass, DNTraceHandler>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAppDomainFactoryClass = interface(DNObjectClass)
  ['{21297EDB-13D9-5A47-88D1-73227B2A7C59}']
  { constructors } 

    {class} function init: DNAppDomainFactory;

  end;

  [DNTypeName('System.Web.Hosting.AppDomainFactory')]
  DNAppDomainFactory = interface(DNIAppDomainFactory)
  ['{CE3B1F18-8CB1-3C8F-B81E-56F4735EED5B}']
  { methods } 

    function Create(module: string; typeName: string; appId: string; appPath: string; strUrlOfAppOrigin: string; iZone: Int32): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainFactory = class(TDNGenericImport<DNAppDomainFactoryClass, DNAppDomainFactory>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAppDomainInfoClass = interface(DNObjectClass)
  ['{9CBC1610-DB1E-5DCC-B12E-E979562A32A2}']
  end;

  [DNTypeName('System.Web.Hosting.AppDomainInfo')]
  DNAppDomainInfo = interface(DNIAppDomainInfo)
  ['{B2E328E4-B438-379D-AAF6-683F5542B1DC}']
  { methods } 

    function GetId: string;
    function GetVirtualPath: string;
    function GetPhysicalPath: string;
    function GetSiteId: Int32;
    function IsIdle: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainInfo = class(TDNGenericImport<DNAppDomainInfoClass, DNAppDomainInfo>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAppDomainInfoEnumClass = interface(DNObjectClass)
  ['{556A91D2-92E5-57D6-8969-DDC143315E25}']
  end;

  [DNTypeName('System.Web.Hosting.AppDomainInfoEnum')]
  DNAppDomainInfoEnum = interface(DNIAppDomainInfoEnum)
  ['{4A72F3DB-EA8E-3B38-B151-5A244A6E1D73}']
  { methods } 

    function Count: Int32;
    function GetData: DNIAppDomainInfo;
    function MoveNext: Boolean;
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppDomainInfoEnum = class(TDNGenericImport<DNAppDomainInfoEnumClass, DNAppDomainInfoEnum>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNApplicationHostClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5365FAE3-C699-5EB4-8047-EFD8E2534659}']
  { static methods } 

    {class} function CreateApplicationHost(hostType: DDN.mscorlib.DNType; virtualDir: string; physicalDir: string): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Web.Hosting.ApplicationHost')]
  DNApplicationHost = interface(DDN.mscorlib.DNObject)
  ['{586DD82F-678A-32E4-9EA6-88D83FEE2304}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNApplicationHost = class(TDNGenericImport<DNApplicationHostClass, DNApplicationHost>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNApplicationInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2EA8AB24-8B65-5A89-986F-76BB170197D1}']
  end;

  [DNTypeName('System.Web.Hosting.ApplicationInfo')]
  DNApplicationInfo = interface(DDN.mscorlib.DNObject)
  ['{60CA58DB-ADD0-3146-9F23-93FDBCB31808}']
  { getters & setters } 

    function get_ID: string;
    function get_VirtualPath: string;
    function get_PhysicalPath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ID: string read get_ID;
    property VirtualPath: string read get_VirtualPath;
    property PhysicalPath: string read get_PhysicalPath;
  end;

  TDNApplicationInfo = class(TDNGenericImport<DNApplicationInfoClass, DNApplicationInfo>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNApplicationMonitorsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A3CAF176-3B68-5D51-B700-6D65EB31450C}']
  end;

  [DNTypeName('System.Web.Hosting.ApplicationMonitors')]
  DNApplicationMonitors = interface(DDN.mscorlib.DNObject)
  ['{B85FBF97-A252-3087-BE46-AB9E21575CD8}']
  { getters & setters } 

    function get_MemoryMonitor: DNIApplicationMonitor;
    procedure set_MemoryMonitor(value: DNIApplicationMonitor);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemoryMonitor: DNIApplicationMonitor read get_MemoryMonitor write set_MemoryMonitor;
  end;

  TDNApplicationMonitors = class(TDNGenericImport<DNApplicationMonitorsClass, DNApplicationMonitors>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAppManagerAppDomainFactoryClass = interface(DNObjectClass)
  ['{1699E8B3-99B0-58EB-92B3-B806D2F9C616}']
  { constructors } 

    {class} function init: DNAppManagerAppDomainFactory;

  end;

  [DNTypeName('System.Web.Hosting.AppManagerAppDomainFactory')]
  DNAppManagerAppDomainFactory = interface(DNIAppManagerAppDomainFactory)
  ['{0E8E63A1-A313-36AE-875E-BA100A333D93}']
  { methods } 

    procedure Stop;
    function Create(appId: string; appPath: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAppManagerAppDomainFactory = class(TDNGenericImport<DNAppManagerAppDomainFactoryClass, DNAppManagerAppDomainFactory>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNAspNetMemoryMonitorClass = interface(DNObjectClass)
  ['{6EDC9123-997C-505A-83A0-6D712B6143BF}']
  end;

  [DNTypeName('System.Web.Hosting.AspNetMemoryMonitor')]
  DNAspNetMemoryMonitor = interface(DNIApplicationMonitor)
  ['{28658CCF-4AE1-3F2A-BE21-31A001F3FCE8}']
  { getters & setters } 

    function get_DefaultLowPhysicalMemoryObserver: DDN.mscorlib.DNIObserver<DNLowPhysicalMemoryInfo>;
    procedure set_DefaultLowPhysicalMemoryObserver(value: DDN.mscorlib.DNIObserver<DNLowPhysicalMemoryInfo>);
    function get_DefaultRecycleLimitObserver: DDN.mscorlib.DNIObserver<DNRecycleLimitInfo>;
    procedure set_DefaultRecycleLimitObserver(value: DDN.mscorlib.DNIObserver<DNRecycleLimitInfo>);

  { methods } 

    procedure Start;
    function Subscribe(observer: DDN.mscorlib.DNIObserver<DNLowPhysicalMemoryInfo>): DDN.mscorlib.DNIDisposable; overload;
    function Subscribe(observer: DDN.mscorlib.DNIObserver<DNRecycleLimitInfo>): DDN.mscorlib.DNIDisposable; overload;
    procedure Stop;
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultLowPhysicalMemoryObserver: DDN.mscorlib.DNIObserver<DNLowPhysicalMemoryInfo> read get_DefaultLowPhysicalMemoryObserver write set_DefaultLowPhysicalMemoryObserver;
    property DefaultRecycleLimitObserver: DDN.mscorlib.DNIObserver<DNRecycleLimitInfo> read get_DefaultRecycleLimitObserver write set_DefaultRecycleLimitObserver;
  end;

  TDNAspNetMemoryMonitor = class(TDNGenericImport<DNAspNetMemoryMonitorClass, DNAspNetMemoryMonitor>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNHostSecurityPolicyResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC7DC14F-8615-5B07-8784-DEAAA14AF3AB}']
  { constructors } 

    {class} function init: DNHostSecurityPolicyResolver;

  end;

  [DNTypeName('System.Web.Hosting.HostSecurityPolicyResolver')]
  DNHostSecurityPolicyResolver = interface(DDN.mscorlib.DNObject)
  ['{087A1A84-3E9D-3515-9107-1C1C83DE0527}']
  { methods } 

    function ResolvePolicy(evidence: DDN.mscorlib.DNEvidence): DNHostSecurityPolicyResults;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHostSecurityPolicyResolver = class(TDNGenericImport<DNHostSecurityPolicyResolverClass, DNHostSecurityPolicyResolver>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNLowPhysicalMemoryInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6D6F814E-B328-511A-BEA8-7A64C02D93DB}']
  { constructors } 

    {class} function init(currentPercentUsed: Int32; percentLimit: Int32): DNLowPhysicalMemoryInfo;

  end;

  [DNTypeName('System.Web.Hosting.LowPhysicalMemoryInfo')]
  DNLowPhysicalMemoryInfo = interface(DDN.mscorlib.DNObject)
  ['{52DB70B5-21C3-3467-9858-DE3E9BB0741B}']
  { getters & setters } 

    function get_CurrentPercentUsed: Int32;
    function get_PercentLimit: Int32;
    function get_RequestGC: Boolean;
    procedure set_RequestGC(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentPercentUsed: Int32 read get_CurrentPercentUsed;
    property PercentLimit: Int32 read get_PercentLimit;
    property RequestGC: Boolean read get_RequestGC write set_RequestGC;
  end;

  TDNLowPhysicalMemoryInfo = class(TDNGenericImport<DNLowPhysicalMemoryInfoClass, DNLowPhysicalMemoryInfo>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNLowPhysicalMemoryObserverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A83AD6AF-9F4E-5386-8E14-46760F1B33C2}']
  { constructors } 

    {class} function init: DNLowPhysicalMemoryObserver;

  end;

  [DNTypeName('System.Web.Hosting.LowPhysicalMemoryObserver')]
  DNLowPhysicalMemoryObserver = interface(DDN.mscorlib.DNObject)
  ['{D19B68C2-7C9D-3177-BBA0-961D5FE24A41}']
  { methods } 

    procedure OnCompleted;
    procedure OnError(error: DDN.mscorlib.DNException);
    procedure OnNext(lowMemoryInfo: DNLowPhysicalMemoryInfo);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLowPhysicalMemoryObserver = class(TDNGenericImport<DNLowPhysicalMemoryObserverClass, DNLowPhysicalMemoryObserver>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNRecycleLimitInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{12FD7DDA-0013-5780-8CAE-BD88AE7076EF}']
  { constructors } 

    {class} function init(currentPrivateBytes: Int64; recycleLimit: Int64; recycleLimitNearFrequency: DNRecycleLimitNotificationFrequency): DNRecycleLimitInfo;

  end;

  [DNTypeName('System.Web.Hosting.RecycleLimitInfo')]
  DNRecycleLimitInfo = interface(DDN.mscorlib.DNObject)
  ['{E97729FA-119A-3BAA-8325-F2CB2DED4ABE}']
  { getters & setters } 

    function get_CurrentPrivateBytes: Int64;
    function get_RecycleLimit: Int64;
    function get_TrimFrequency: DNRecycleLimitNotificationFrequency;
    function get_RequestGC: Boolean;
    procedure set_RequestGC(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentPrivateBytes: Int64 read get_CurrentPrivateBytes;
    property RecycleLimit: Int64 read get_RecycleLimit;
    property TrimFrequency: DNRecycleLimitNotificationFrequency read get_TrimFrequency;
    property RequestGC: Boolean read get_RequestGC write set_RequestGC;
  end;

  TDNRecycleLimitInfo = class(TDNGenericImport<DNRecycleLimitInfoClass, DNRecycleLimitInfo>) end;

  //-------------namespace: System.Web.Hosting----------------
  DNRecycleLimitObserverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D24A1EB5-39E6-5E0B-9C44-3620ED62395E}']
  { constructors } 

    {class} function init: DNRecycleLimitObserver;

  end;

  [DNTypeName('System.Web.Hosting.RecycleLimitObserver')]
  DNRecycleLimitObserver = interface(DDN.mscorlib.DNObject)
  ['{7F00334C-C7EE-3CAC-93DE-69D9F8D1F5AA}']
  { methods } 

    procedure OnCompleted;
    procedure OnError(error: DDN.mscorlib.DNException);
    procedure OnNext(recycleLimitInfo: DNRecycleLimitInfo);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRecycleLimitObserver = class(TDNGenericImport<DNRecycleLimitObserverClass, DNRecycleLimitObserver>) end;

  //-------------namespace: System.Web----------------
  DNHtmlStringClass = interface(DNObjectClass)
  ['{FEB76015-5494-5808-B07C-8CC076646360}']
  { constructors } 

    {class} function init(value: string): DNHtmlString;

  end;

  [DNTypeName('System.Web.HtmlString')]
  DNHtmlString = interface(DNIHtmlString)
  ['{23AC15D1-A413-3A00-8243-347EA686DC79}']
  { methods } 

    function ToHtmlString: string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  end;

  TDNHtmlString = class(TDNGenericImport<DNHtmlStringClass, DNHtmlString>) end;

  //-------------namespace: System.Web----------------
  DNHttpApplicationClass = interface(DNObjectClass)
  ['{F3526242-70FA-5252-951B-0AE1D047E376}']
  { constructors } 

    {class} function init: DNHttpApplication;

  { static methods } 

    {class} procedure RegisterModule(moduleType: DDN.mscorlib.DNType);

  end;

  [DNTypeName('System.Web.HttpApplication')]
  DNHttpApplication = interface(DDN.System.DNIComponent)
  ['{2E758927-0B68-30B2-BFB5-1E7A93E51BF1}']
  { getters & setters } 

    function get_Context: DNHttpContext;
    function get_Request: DNHttpRequest;
    function get_Response: DNHttpResponse;
    function get_Session: DNHttpSessionState;
    function get_Application: DNHttpApplicationState;
    function get_Server: DNHttpServerUtility;
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_Modules: DNHttpModuleCollection;
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_BeginRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_BeginRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_AuthenticateRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AuthenticateRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostAuthenticateRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostAuthenticateRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_AuthorizeRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AuthorizeRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostAuthorizeRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostAuthorizeRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_ResolveRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ResolveRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostResolveRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostResolveRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure add_MapRequestHandler(value: DDN.mscorlib.DNEventHandler);
    procedure remove_MapRequestHandler(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostMapRequestHandler(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostMapRequestHandler(value: DDN.mscorlib.DNEventHandler);
    procedure add_AcquireRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AcquireRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostAcquireRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostAcquireRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRequestHandlerExecute(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRequestHandlerExecute(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostRequestHandlerExecute(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostRequestHandlerExecute(value: DDN.mscorlib.DNEventHandler);
    procedure add_ReleaseRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ReleaseRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostReleaseRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostReleaseRequestState(value: DDN.mscorlib.DNEventHandler);
    procedure add_UpdateRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure remove_UpdateRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostUpdateRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostUpdateRequestCache(value: DDN.mscorlib.DNEventHandler);
    procedure add_LogRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LogRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_PostLogRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PostLogRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_EndRequest(value: DDN.mscorlib.DNEventHandler);
    procedure remove_EndRequest(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_RequestCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_RequestCompleted(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreSendRequestHeaders(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreSendRequestHeaders(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreSendRequestContent(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreSendRequestContent(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CompleteRequest;
    procedure AddOnBeginRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnBeginRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnAuthenticateRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnAuthenticateRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostAuthenticateRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostAuthenticateRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnAuthorizeRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnAuthorizeRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostAuthorizeRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostAuthorizeRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnResolveRequestCacheAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnResolveRequestCacheAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostResolveRequestCacheAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostResolveRequestCacheAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnMapRequestHandlerAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnMapRequestHandlerAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostMapRequestHandlerAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostMapRequestHandlerAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnAcquireRequestStateAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnAcquireRequestStateAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostAcquireRequestStateAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostAcquireRequestStateAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPreRequestHandlerExecuteAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPreRequestHandlerExecuteAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostRequestHandlerExecuteAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostRequestHandlerExecuteAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnReleaseRequestStateAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnReleaseRequestStateAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostReleaseRequestStateAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostReleaseRequestStateAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnUpdateRequestCacheAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnUpdateRequestCacheAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostUpdateRequestCacheAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostUpdateRequestCacheAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnLogRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnLogRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnPostLogRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnPostLogRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure AddOnEndRequestAsync(bh: DNBeginEventHandler; eh: DNEndEventHandler); overload;
    procedure AddOnEndRequestAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure Init;
    procedure Dispose;
    function GetOutputCacheProviderName(context: DNHttpContext): string;
    function GetVaryByCustomString(context: DNHttpContext; custom: string): string;
    procedure OnExecuteRequestStep(callback: DDN.mscorlib.DNAction<DNHttpContextBase, DDN.mscorlib.DNAction>);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Context: DNHttpContext read get_Context;
    property Request: DNHttpRequest read get_Request;
    property Response: DNHttpResponse read get_Response;
    property Session: DNHttpSessionState read get_Session;
    property Application: DNHttpApplicationState read get_Application;
    property Server: DNHttpServerUtility read get_Server;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property Modules: DNHttpModuleCollection read get_Modules;
    property Site: DDN.System.DNISite read get_Site write set_Site;
  end;

  TDNHttpApplication = class(TDNGenericImport<DNHttpApplicationClass, DNHttpApplication>) end;

  //-------------namespace: System.Web----------------
  DNHttpBrowserCapabilitiesBaseClass = interface(DNObjectClass)
  ['{BDC81BD2-C187-5E19-80A2-9066A1F546FC}']
  end;

  [DNTypeName('System.Web.HttpBrowserCapabilitiesBase')]
  DNHttpBrowserCapabilitiesBase = interface(DNIFilterResolutionService)
  ['{C71AD7E2-8255-3893-A290-D3D4DC7A3C67}']
  { getters & setters } 

    function get_ActiveXControls: Boolean;
    function get_Adapters: DDN.mscorlib.DNIDictionary;
    function get_AOL: Boolean;
    function get_BackgroundSounds: Boolean;
    function get_Beta: Boolean;
    function get_Browser: string;
    function get_Browsers: DDN.mscorlib.DNArrayList;
    function get_CanCombineFormsInDeck: Boolean;
    function get_CanInitiateVoiceCall: Boolean;
    function get_CanRenderAfterInputOrSelectElement: Boolean;
    function get_CanRenderEmptySelects: Boolean;
    function get_CanRenderInputAndSelectElementsTogether: Boolean;
    function get_CanRenderMixedSelects: Boolean;
    function get_CanRenderOneventAndPrevElementsTogether: Boolean;
    function get_CanRenderPostBackCards: Boolean;
    function get_CanRenderSetvarZeroWithMultiSelectionList: Boolean;
    function get_CanSendMail: Boolean;
    function get_Capabilities: DDN.mscorlib.DNIDictionary;
    procedure set_Capabilities(value: DDN.mscorlib.DNIDictionary);
    function get_CDF: Boolean;
    function get_ClrVersion: DDN.mscorlib.DNVersion;
    function get_Cookies: Boolean;
    function get_Crawler: Boolean;
    function get_DefaultSubmitButtonLimit: Int32;
    function get_EcmaScriptVersion: DDN.mscorlib.DNVersion;
    function get_Frames: Boolean;
    function get_GatewayMajorVersion: Int32;
    function get_GatewayMinorVersion: Double;
    function get_GatewayVersion: string;
    function get_HasBackButton: Boolean;
    function get_HidesRightAlignedMultiselectScrollbars: Boolean;
    function get_HtmlTextWriter: string;
    procedure set_HtmlTextWriter(value: string);
    function get_Id: string;
    function get_InputType: string;
    function get_IsColor: Boolean;
    function get_IsMobileDevice: Boolean;
    function get_JavaApplets: Boolean;
    function get_JScriptVersion: DDN.mscorlib.DNVersion;
    function get_MajorVersion: Int32;
    function get_MaximumHrefLength: Int32;
    function get_MaximumRenderedPageSize: Int32;
    function get_MaximumSoftkeyLabelLength: Int32;
    function get_MinorVersion: Double;
    function get_MinorVersionString: string;
    function get_MobileDeviceManufacturer: string;
    function get_MobileDeviceModel: string;
    function get_MSDomVersion: DDN.mscorlib.DNVersion;
    function get_NumberOfSoftkeys: Int32;
    function get_Platform: string;
    function get_PreferredImageMime: string;
    function get_PreferredRenderingMime: string;
    function get_PreferredRenderingType: string;
    function get_PreferredRequestEncoding: string;
    function get_PreferredResponseEncoding: string;
    function get_RendersBreakBeforeWmlSelectAndInput: Boolean;
    function get_RendersBreaksAfterHtmlLists: Boolean;
    function get_RendersBreaksAfterWmlAnchor: Boolean;
    function get_RendersBreaksAfterWmlInput: Boolean;
    function get_RendersWmlDoAcceptsInline: Boolean;
    function get_RendersWmlSelectsAsMenuCards: Boolean;
    function get_RequiredMetaTagNameValue: string;
    function get_RequiresAttributeColonSubstitution: Boolean;
    function get_RequiresContentTypeMetaTag: Boolean;
    function get_RequiresControlStateInSession: Boolean;
    function get_RequiresDBCSCharacter: Boolean;
    function get_RequiresHtmlAdaptiveErrorReporting: Boolean;
    function get_RequiresLeadingPageBreak: Boolean;
    function get_RequiresNoBreakInFormatting: Boolean;
    function get_RequiresOutputOptimization: Boolean;
    function get_RequiresPhoneNumbersAsPlainText: Boolean;
    function get_RequiresSpecialViewStateEncoding: Boolean;
    function get_RequiresUniqueFilePathSuffix: Boolean;
    function get_RequiresUniqueHtmlCheckboxNames: Boolean;
    function get_RequiresUniqueHtmlInputNames: Boolean;
    function get_RequiresUrlEncodedPostfieldValues: Boolean;
    function get_ScreenBitDepth: Int32;
    function get_ScreenCharactersHeight: Int32;
    function get_ScreenCharactersWidth: Int32;
    function get_ScreenPixelsHeight: Int32;
    function get_ScreenPixelsWidth: Int32;
    function get_SupportsAccesskeyAttribute: Boolean;
    function get_SupportsBodyColor: Boolean;
    function get_SupportsBold: Boolean;
    function get_SupportsCacheControlMetaTag: Boolean;
    function get_SupportsCallback: Boolean;
    function get_SupportsCss: Boolean;
    function get_SupportsDivAlign: Boolean;
    function get_SupportsDivNoWrap: Boolean;
    function get_SupportsEmptyStringInCookieValue: Boolean;
    function get_SupportsFontColor: Boolean;
    function get_SupportsFontName: Boolean;
    function get_SupportsFontSize: Boolean;
    function get_SupportsImageSubmit: Boolean;
    function get_SupportsIModeSymbols: Boolean;
    function get_SupportsInputIStyle: Boolean;
    function get_SupportsInputMode: Boolean;
    function get_SupportsItalic: Boolean;
    function get_SupportsJPhoneMultiMediaAttributes: Boolean;
    function get_SupportsJPhoneSymbols: Boolean;
    function get_SupportsQueryStringInFormAction: Boolean;
    function get_SupportsRedirectWithCookie: Boolean;
    function get_SupportsSelectMultiple: Boolean;
    function get_SupportsUncheck: Boolean;
    function get_SupportsXmlHttp: Boolean;
    function get_Tables: Boolean;
    function get_TagWriter: DDN.mscorlib.DNType;
    function get_Type: string;
    function get_UseOptimizedCacheKey: Boolean;
    function get_VBScript: Boolean;
    function get_Version: string;
    function get_W3CDomVersion: DDN.mscorlib.DNVersion;
    function get_Win16: Boolean;
    function get_Win32: Boolean;
    function get_Item(key: string): string;

  { methods } 

    procedure AddBrowser(browserName: string);
    function CreateHtmlTextWriter(w: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter;
    procedure DisableOptimizedCacheKey;
    function GetClrVersions: TArray<DDN.mscorlib.DNVersion>;
    function IsBrowser(browserName: string): Boolean;
    function CompareFilters(filter1: string; filter2: string): Int32;
    function EvaluateFilter(filterName: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveXControls: Boolean read get_ActiveXControls;
    property Adapters: DDN.mscorlib.DNIDictionary read get_Adapters;
    property AOL: Boolean read get_AOL;
    property BackgroundSounds: Boolean read get_BackgroundSounds;
    property Beta: Boolean read get_Beta;
    property Browser: string read get_Browser;
    property Browsers: DDN.mscorlib.DNArrayList read get_Browsers;
    property CanCombineFormsInDeck: Boolean read get_CanCombineFormsInDeck;
    property CanInitiateVoiceCall: Boolean read get_CanInitiateVoiceCall;
    property CanRenderAfterInputOrSelectElement: Boolean read get_CanRenderAfterInputOrSelectElement;
    property CanRenderEmptySelects: Boolean read get_CanRenderEmptySelects;
    property CanRenderInputAndSelectElementsTogether: Boolean read get_CanRenderInputAndSelectElementsTogether;
    property CanRenderMixedSelects: Boolean read get_CanRenderMixedSelects;
    property CanRenderOneventAndPrevElementsTogether: Boolean read get_CanRenderOneventAndPrevElementsTogether;
    property CanRenderPostBackCards: Boolean read get_CanRenderPostBackCards;
    property CanRenderSetvarZeroWithMultiSelectionList: Boolean read get_CanRenderSetvarZeroWithMultiSelectionList;
    property CanSendMail: Boolean read get_CanSendMail;
    property Capabilities: DDN.mscorlib.DNIDictionary read get_Capabilities write set_Capabilities;
    property CDF: Boolean read get_CDF;
    property ClrVersion: DDN.mscorlib.DNVersion read get_ClrVersion;
    property Cookies: Boolean read get_Cookies;
    property Crawler: Boolean read get_Crawler;
    property DefaultSubmitButtonLimit: Int32 read get_DefaultSubmitButtonLimit;
    property EcmaScriptVersion: DDN.mscorlib.DNVersion read get_EcmaScriptVersion;
    property Frames: Boolean read get_Frames;
    property GatewayMajorVersion: Int32 read get_GatewayMajorVersion;
    property GatewayMinorVersion: Double read get_GatewayMinorVersion;
    property GatewayVersion: string read get_GatewayVersion;
    property HasBackButton: Boolean read get_HasBackButton;
    property HidesRightAlignedMultiselectScrollbars: Boolean read get_HidesRightAlignedMultiselectScrollbars;
    property HtmlTextWriter: string read get_HtmlTextWriter write set_HtmlTextWriter;
    property Id: string read get_Id;
    property InputType: string read get_InputType;
    property IsColor: Boolean read get_IsColor;
    property IsMobileDevice: Boolean read get_IsMobileDevice;
    property JavaApplets: Boolean read get_JavaApplets;
    property JScriptVersion: DDN.mscorlib.DNVersion read get_JScriptVersion;
    property MajorVersion: Int32 read get_MajorVersion;
    property MaximumHrefLength: Int32 read get_MaximumHrefLength;
    property MaximumRenderedPageSize: Int32 read get_MaximumRenderedPageSize;
    property MaximumSoftkeyLabelLength: Int32 read get_MaximumSoftkeyLabelLength;
    property MinorVersion: Double read get_MinorVersion;
    property MinorVersionString: string read get_MinorVersionString;
    property MobileDeviceManufacturer: string read get_MobileDeviceManufacturer;
    property MobileDeviceModel: string read get_MobileDeviceModel;
    property MSDomVersion: DDN.mscorlib.DNVersion read get_MSDomVersion;
    property NumberOfSoftkeys: Int32 read get_NumberOfSoftkeys;
    property Platform: string read get_Platform;
    property PreferredImageMime: string read get_PreferredImageMime;
    property PreferredRenderingMime: string read get_PreferredRenderingMime;
    property PreferredRenderingType: string read get_PreferredRenderingType;
    property PreferredRequestEncoding: string read get_PreferredRequestEncoding;
    property PreferredResponseEncoding: string read get_PreferredResponseEncoding;
    property RendersBreakBeforeWmlSelectAndInput: Boolean read get_RendersBreakBeforeWmlSelectAndInput;
    property RendersBreaksAfterHtmlLists: Boolean read get_RendersBreaksAfterHtmlLists;
    property RendersBreaksAfterWmlAnchor: Boolean read get_RendersBreaksAfterWmlAnchor;
    property RendersBreaksAfterWmlInput: Boolean read get_RendersBreaksAfterWmlInput;
    property RendersWmlDoAcceptsInline: Boolean read get_RendersWmlDoAcceptsInline;
    property RendersWmlSelectsAsMenuCards: Boolean read get_RendersWmlSelectsAsMenuCards;
    property RequiredMetaTagNameValue: string read get_RequiredMetaTagNameValue;
    property RequiresAttributeColonSubstitution: Boolean read get_RequiresAttributeColonSubstitution;
    property RequiresContentTypeMetaTag: Boolean read get_RequiresContentTypeMetaTag;
    property RequiresControlStateInSession: Boolean read get_RequiresControlStateInSession;
    property RequiresDBCSCharacter: Boolean read get_RequiresDBCSCharacter;
    property RequiresHtmlAdaptiveErrorReporting: Boolean read get_RequiresHtmlAdaptiveErrorReporting;
    property RequiresLeadingPageBreak: Boolean read get_RequiresLeadingPageBreak;
    property RequiresNoBreakInFormatting: Boolean read get_RequiresNoBreakInFormatting;
    property RequiresOutputOptimization: Boolean read get_RequiresOutputOptimization;
    property RequiresPhoneNumbersAsPlainText: Boolean read get_RequiresPhoneNumbersAsPlainText;
    property RequiresSpecialViewStateEncoding: Boolean read get_RequiresSpecialViewStateEncoding;
    property RequiresUniqueFilePathSuffix: Boolean read get_RequiresUniqueFilePathSuffix;
    property RequiresUniqueHtmlCheckboxNames: Boolean read get_RequiresUniqueHtmlCheckboxNames;
    property RequiresUniqueHtmlInputNames: Boolean read get_RequiresUniqueHtmlInputNames;
    property RequiresUrlEncodedPostfieldValues: Boolean read get_RequiresUrlEncodedPostfieldValues;
    property ScreenBitDepth: Int32 read get_ScreenBitDepth;
    property ScreenCharactersHeight: Int32 read get_ScreenCharactersHeight;
    property ScreenCharactersWidth: Int32 read get_ScreenCharactersWidth;
    property ScreenPixelsHeight: Int32 read get_ScreenPixelsHeight;
    property ScreenPixelsWidth: Int32 read get_ScreenPixelsWidth;
    property SupportsAccesskeyAttribute: Boolean read get_SupportsAccesskeyAttribute;
    property SupportsBodyColor: Boolean read get_SupportsBodyColor;
    property SupportsBold: Boolean read get_SupportsBold;
    property SupportsCacheControlMetaTag: Boolean read get_SupportsCacheControlMetaTag;
    property SupportsCallback: Boolean read get_SupportsCallback;
    property SupportsCss: Boolean read get_SupportsCss;
    property SupportsDivAlign: Boolean read get_SupportsDivAlign;
    property SupportsDivNoWrap: Boolean read get_SupportsDivNoWrap;
    property SupportsEmptyStringInCookieValue: Boolean read get_SupportsEmptyStringInCookieValue;
    property SupportsFontColor: Boolean read get_SupportsFontColor;
    property SupportsFontName: Boolean read get_SupportsFontName;
    property SupportsFontSize: Boolean read get_SupportsFontSize;
    property SupportsImageSubmit: Boolean read get_SupportsImageSubmit;
    property SupportsIModeSymbols: Boolean read get_SupportsIModeSymbols;
    property SupportsInputIStyle: Boolean read get_SupportsInputIStyle;
    property SupportsInputMode: Boolean read get_SupportsInputMode;
    property SupportsItalic: Boolean read get_SupportsItalic;
    property SupportsJPhoneMultiMediaAttributes: Boolean read get_SupportsJPhoneMultiMediaAttributes;
    property SupportsJPhoneSymbols: Boolean read get_SupportsJPhoneSymbols;
    property SupportsQueryStringInFormAction: Boolean read get_SupportsQueryStringInFormAction;
    property SupportsRedirectWithCookie: Boolean read get_SupportsRedirectWithCookie;
    property SupportsSelectMultiple: Boolean read get_SupportsSelectMultiple;
    property SupportsUncheck: Boolean read get_SupportsUncheck;
    property SupportsXmlHttp: Boolean read get_SupportsXmlHttp;
    property Tables: Boolean read get_Tables;
    property TagWriter: DDN.mscorlib.DNType read get_TagWriter;
    property &Type: string read get_Type;
    property UseOptimizedCacheKey: Boolean read get_UseOptimizedCacheKey;
    property VBScript: Boolean read get_VBScript;
    property Version: string read get_Version;
    property W3CDomVersion: DDN.mscorlib.DNVersion read get_W3CDomVersion;
    property Win16: Boolean read get_Win16;
    property Win32: Boolean read get_Win32;
    property Item[key: string]: string read get_Item; default;
  end;

  TDNHttpBrowserCapabilitiesBase = class(TDNGenericImport<DNHttpBrowserCapabilitiesBaseClass, DNHttpBrowserCapabilitiesBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpBrowserCapabilitiesWrapperClass = interface(DNHttpBrowserCapabilitiesBaseClass)
  ['{A836DC84-B137-54C1-9B94-0F6044FCC7C6}']
  { constructors } 

    {class} function init(httpBrowserCapabilities: DNHttpBrowserCapabilities): DNHttpBrowserCapabilitiesWrapper;

  end;

  [DNTypeName('System.Web.HttpBrowserCapabilitiesWrapper')]
  DNHttpBrowserCapabilitiesWrapper = interface(DNHttpBrowserCapabilitiesBase)
  ['{76E12A91-A0F7-3FE1-BA4F-2E3A37B8B35D}']
  { getters & setters } 

    function get_Browser: string;
    function get_EcmaScriptVersion: DDN.mscorlib.DNVersion;
    function get_JScriptVersion: DDN.mscorlib.DNVersion;
    function get_SupportsCallback: Boolean;
    function get_W3CDomVersion: DDN.mscorlib.DNVersion;
    function get_ActiveXControls: Boolean;
    function get_Adapters: DDN.mscorlib.DNIDictionary;
    function get_AOL: Boolean;
    function get_BackgroundSounds: Boolean;
    function get_Beta: Boolean;
    function get_Browsers: DDN.mscorlib.DNArrayList;
    function get_CanCombineFormsInDeck: Boolean;
    function get_CanInitiateVoiceCall: Boolean;
    function get_CanRenderAfterInputOrSelectElement: Boolean;
    function get_CanRenderEmptySelects: Boolean;
    function get_CanRenderInputAndSelectElementsTogether: Boolean;
    function get_CanRenderMixedSelects: Boolean;
    function get_CanRenderOneventAndPrevElementsTogether: Boolean;
    function get_CanRenderPostBackCards: Boolean;
    function get_CanRenderSetvarZeroWithMultiSelectionList: Boolean;
    function get_CanSendMail: Boolean;
    function get_Capabilities: DDN.mscorlib.DNIDictionary;
    procedure set_Capabilities(value: DDN.mscorlib.DNIDictionary);
    function get_CDF: Boolean;
    function get_ClrVersion: DDN.mscorlib.DNVersion;
    function get_Cookies: Boolean;
    function get_Crawler: Boolean;
    function get_DefaultSubmitButtonLimit: Int32;
    function get_Frames: Boolean;
    function get_GatewayMajorVersion: Int32;
    function get_GatewayMinorVersion: Double;
    function get_GatewayVersion: string;
    function get_HasBackButton: Boolean;
    function get_HidesRightAlignedMultiselectScrollbars: Boolean;
    function get_HtmlTextWriter: string;
    procedure set_HtmlTextWriter(value: string);
    function get_Id: string;
    function get_InputType: string;
    function get_IsColor: Boolean;
    function get_IsMobileDevice: Boolean;
    function get_JavaApplets: Boolean;
    function get_MajorVersion: Int32;
    function get_MaximumHrefLength: Int32;
    function get_MaximumRenderedPageSize: Int32;
    function get_MaximumSoftkeyLabelLength: Int32;
    function get_MinorVersion: Double;
    function get_MinorVersionString: string;
    function get_MobileDeviceManufacturer: string;
    function get_MobileDeviceModel: string;
    function get_MSDomVersion: DDN.mscorlib.DNVersion;
    function get_NumberOfSoftkeys: Int32;
    function get_Platform: string;
    function get_PreferredImageMime: string;
    function get_PreferredRenderingMime: string;
    function get_PreferredRenderingType: string;
    function get_PreferredRequestEncoding: string;
    function get_PreferredResponseEncoding: string;
    function get_RendersBreakBeforeWmlSelectAndInput: Boolean;
    function get_RendersBreaksAfterHtmlLists: Boolean;
    function get_RendersBreaksAfterWmlAnchor: Boolean;
    function get_RendersBreaksAfterWmlInput: Boolean;
    function get_RendersWmlDoAcceptsInline: Boolean;
    function get_RendersWmlSelectsAsMenuCards: Boolean;
    function get_RequiredMetaTagNameValue: string;
    function get_RequiresAttributeColonSubstitution: Boolean;
    function get_RequiresContentTypeMetaTag: Boolean;
    function get_RequiresControlStateInSession: Boolean;
    function get_RequiresDBCSCharacter: Boolean;
    function get_RequiresHtmlAdaptiveErrorReporting: Boolean;
    function get_RequiresLeadingPageBreak: Boolean;
    function get_RequiresNoBreakInFormatting: Boolean;
    function get_RequiresOutputOptimization: Boolean;
    function get_RequiresPhoneNumbersAsPlainText: Boolean;
    function get_RequiresSpecialViewStateEncoding: Boolean;
    function get_RequiresUniqueFilePathSuffix: Boolean;
    function get_RequiresUniqueHtmlCheckboxNames: Boolean;
    function get_RequiresUniqueHtmlInputNames: Boolean;
    function get_RequiresUrlEncodedPostfieldValues: Boolean;
    function get_ScreenBitDepth: Int32;
    function get_ScreenCharactersHeight: Int32;
    function get_ScreenCharactersWidth: Int32;
    function get_ScreenPixelsHeight: Int32;
    function get_ScreenPixelsWidth: Int32;
    function get_SupportsAccesskeyAttribute: Boolean;
    function get_SupportsBodyColor: Boolean;
    function get_SupportsBold: Boolean;
    function get_SupportsCacheControlMetaTag: Boolean;
    function get_SupportsCss: Boolean;
    function get_SupportsDivAlign: Boolean;
    function get_SupportsDivNoWrap: Boolean;
    function get_SupportsEmptyStringInCookieValue: Boolean;
    function get_SupportsFontColor: Boolean;
    function get_SupportsFontName: Boolean;
    function get_SupportsFontSize: Boolean;
    function get_SupportsImageSubmit: Boolean;
    function get_SupportsIModeSymbols: Boolean;
    function get_SupportsInputIStyle: Boolean;
    function get_SupportsInputMode: Boolean;
    function get_SupportsItalic: Boolean;
    function get_SupportsJPhoneMultiMediaAttributes: Boolean;
    function get_SupportsJPhoneSymbols: Boolean;
    function get_SupportsQueryStringInFormAction: Boolean;
    function get_SupportsRedirectWithCookie: Boolean;
    function get_SupportsSelectMultiple: Boolean;
    function get_SupportsUncheck: Boolean;
    function get_SupportsXmlHttp: Boolean;
    function get_Tables: Boolean;
    function get_TagWriter: DDN.mscorlib.DNType;
    function get_Type: string;
    function get_UseOptimizedCacheKey: Boolean;
    function get_VBScript: Boolean;
    function get_Version: string;
    function get_Win16: Boolean;
    function get_Win32: Boolean;
    function get_Item(key: string): string;

  { methods } 

    procedure AddBrowser(browserName: string);
    function CreateHtmlTextWriter(w: DDN.mscorlib.DNTextWriter): DNHtmlTextWriter;
    procedure DisableOptimizedCacheKey;
    function GetClrVersions: TArray<DDN.mscorlib.DNVersion>;
    function IsBrowser(browserName: string): Boolean;
    function CompareFilters(filter1: string; filter2: string): Int32;
    function EvaluateFilter(filterName: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Browser: string read get_Browser;
    property EcmaScriptVersion: DDN.mscorlib.DNVersion read get_EcmaScriptVersion;
    property JScriptVersion: DDN.mscorlib.DNVersion read get_JScriptVersion;
    property SupportsCallback: Boolean read get_SupportsCallback;
    property W3CDomVersion: DDN.mscorlib.DNVersion read get_W3CDomVersion;
    property ActiveXControls: Boolean read get_ActiveXControls;
    property Adapters: DDN.mscorlib.DNIDictionary read get_Adapters;
    property AOL: Boolean read get_AOL;
    property BackgroundSounds: Boolean read get_BackgroundSounds;
    property Beta: Boolean read get_Beta;
    property Browsers: DDN.mscorlib.DNArrayList read get_Browsers;
    property CanCombineFormsInDeck: Boolean read get_CanCombineFormsInDeck;
    property CanInitiateVoiceCall: Boolean read get_CanInitiateVoiceCall;
    property CanRenderAfterInputOrSelectElement: Boolean read get_CanRenderAfterInputOrSelectElement;
    property CanRenderEmptySelects: Boolean read get_CanRenderEmptySelects;
    property CanRenderInputAndSelectElementsTogether: Boolean read get_CanRenderInputAndSelectElementsTogether;
    property CanRenderMixedSelects: Boolean read get_CanRenderMixedSelects;
    property CanRenderOneventAndPrevElementsTogether: Boolean read get_CanRenderOneventAndPrevElementsTogether;
    property CanRenderPostBackCards: Boolean read get_CanRenderPostBackCards;
    property CanRenderSetvarZeroWithMultiSelectionList: Boolean read get_CanRenderSetvarZeroWithMultiSelectionList;
    property CanSendMail: Boolean read get_CanSendMail;
    property Capabilities: DDN.mscorlib.DNIDictionary read get_Capabilities write set_Capabilities;
    property CDF: Boolean read get_CDF;
    property ClrVersion: DDN.mscorlib.DNVersion read get_ClrVersion;
    property Cookies: Boolean read get_Cookies;
    property Crawler: Boolean read get_Crawler;
    property DefaultSubmitButtonLimit: Int32 read get_DefaultSubmitButtonLimit;
    property Frames: Boolean read get_Frames;
    property GatewayMajorVersion: Int32 read get_GatewayMajorVersion;
    property GatewayMinorVersion: Double read get_GatewayMinorVersion;
    property GatewayVersion: string read get_GatewayVersion;
    property HasBackButton: Boolean read get_HasBackButton;
    property HidesRightAlignedMultiselectScrollbars: Boolean read get_HidesRightAlignedMultiselectScrollbars;
    property HtmlTextWriter: string read get_HtmlTextWriter write set_HtmlTextWriter;
    property Id: string read get_Id;
    property InputType: string read get_InputType;
    property IsColor: Boolean read get_IsColor;
    property IsMobileDevice: Boolean read get_IsMobileDevice;
    property JavaApplets: Boolean read get_JavaApplets;
    property MajorVersion: Int32 read get_MajorVersion;
    property MaximumHrefLength: Int32 read get_MaximumHrefLength;
    property MaximumRenderedPageSize: Int32 read get_MaximumRenderedPageSize;
    property MaximumSoftkeyLabelLength: Int32 read get_MaximumSoftkeyLabelLength;
    property MinorVersion: Double read get_MinorVersion;
    property MinorVersionString: string read get_MinorVersionString;
    property MobileDeviceManufacturer: string read get_MobileDeviceManufacturer;
    property MobileDeviceModel: string read get_MobileDeviceModel;
    property MSDomVersion: DDN.mscorlib.DNVersion read get_MSDomVersion;
    property NumberOfSoftkeys: Int32 read get_NumberOfSoftkeys;
    property Platform: string read get_Platform;
    property PreferredImageMime: string read get_PreferredImageMime;
    property PreferredRenderingMime: string read get_PreferredRenderingMime;
    property PreferredRenderingType: string read get_PreferredRenderingType;
    property PreferredRequestEncoding: string read get_PreferredRequestEncoding;
    property PreferredResponseEncoding: string read get_PreferredResponseEncoding;
    property RendersBreakBeforeWmlSelectAndInput: Boolean read get_RendersBreakBeforeWmlSelectAndInput;
    property RendersBreaksAfterHtmlLists: Boolean read get_RendersBreaksAfterHtmlLists;
    property RendersBreaksAfterWmlAnchor: Boolean read get_RendersBreaksAfterWmlAnchor;
    property RendersBreaksAfterWmlInput: Boolean read get_RendersBreaksAfterWmlInput;
    property RendersWmlDoAcceptsInline: Boolean read get_RendersWmlDoAcceptsInline;
    property RendersWmlSelectsAsMenuCards: Boolean read get_RendersWmlSelectsAsMenuCards;
    property RequiredMetaTagNameValue: string read get_RequiredMetaTagNameValue;
    property RequiresAttributeColonSubstitution: Boolean read get_RequiresAttributeColonSubstitution;
    property RequiresContentTypeMetaTag: Boolean read get_RequiresContentTypeMetaTag;
    property RequiresControlStateInSession: Boolean read get_RequiresControlStateInSession;
    property RequiresDBCSCharacter: Boolean read get_RequiresDBCSCharacter;
    property RequiresHtmlAdaptiveErrorReporting: Boolean read get_RequiresHtmlAdaptiveErrorReporting;
    property RequiresLeadingPageBreak: Boolean read get_RequiresLeadingPageBreak;
    property RequiresNoBreakInFormatting: Boolean read get_RequiresNoBreakInFormatting;
    property RequiresOutputOptimization: Boolean read get_RequiresOutputOptimization;
    property RequiresPhoneNumbersAsPlainText: Boolean read get_RequiresPhoneNumbersAsPlainText;
    property RequiresSpecialViewStateEncoding: Boolean read get_RequiresSpecialViewStateEncoding;
    property RequiresUniqueFilePathSuffix: Boolean read get_RequiresUniqueFilePathSuffix;
    property RequiresUniqueHtmlCheckboxNames: Boolean read get_RequiresUniqueHtmlCheckboxNames;
    property RequiresUniqueHtmlInputNames: Boolean read get_RequiresUniqueHtmlInputNames;
    property RequiresUrlEncodedPostfieldValues: Boolean read get_RequiresUrlEncodedPostfieldValues;
    property ScreenBitDepth: Int32 read get_ScreenBitDepth;
    property ScreenCharactersHeight: Int32 read get_ScreenCharactersHeight;
    property ScreenCharactersWidth: Int32 read get_ScreenCharactersWidth;
    property ScreenPixelsHeight: Int32 read get_ScreenPixelsHeight;
    property ScreenPixelsWidth: Int32 read get_ScreenPixelsWidth;
    property SupportsAccesskeyAttribute: Boolean read get_SupportsAccesskeyAttribute;
    property SupportsBodyColor: Boolean read get_SupportsBodyColor;
    property SupportsBold: Boolean read get_SupportsBold;
    property SupportsCacheControlMetaTag: Boolean read get_SupportsCacheControlMetaTag;
    property SupportsCss: Boolean read get_SupportsCss;
    property SupportsDivAlign: Boolean read get_SupportsDivAlign;
    property SupportsDivNoWrap: Boolean read get_SupportsDivNoWrap;
    property SupportsEmptyStringInCookieValue: Boolean read get_SupportsEmptyStringInCookieValue;
    property SupportsFontColor: Boolean read get_SupportsFontColor;
    property SupportsFontName: Boolean read get_SupportsFontName;
    property SupportsFontSize: Boolean read get_SupportsFontSize;
    property SupportsImageSubmit: Boolean read get_SupportsImageSubmit;
    property SupportsIModeSymbols: Boolean read get_SupportsIModeSymbols;
    property SupportsInputIStyle: Boolean read get_SupportsInputIStyle;
    property SupportsInputMode: Boolean read get_SupportsInputMode;
    property SupportsItalic: Boolean read get_SupportsItalic;
    property SupportsJPhoneMultiMediaAttributes: Boolean read get_SupportsJPhoneMultiMediaAttributes;
    property SupportsJPhoneSymbols: Boolean read get_SupportsJPhoneSymbols;
    property SupportsQueryStringInFormAction: Boolean read get_SupportsQueryStringInFormAction;
    property SupportsRedirectWithCookie: Boolean read get_SupportsRedirectWithCookie;
    property SupportsSelectMultiple: Boolean read get_SupportsSelectMultiple;
    property SupportsUncheck: Boolean read get_SupportsUncheck;
    property SupportsXmlHttp: Boolean read get_SupportsXmlHttp;
    property Tables: Boolean read get_Tables;
    property TagWriter: DDN.mscorlib.DNType read get_TagWriter;
    property &Type: string read get_Type;
    property UseOptimizedCacheKey: Boolean read get_UseOptimizedCacheKey;
    property VBScript: Boolean read get_VBScript;
    property Version: string read get_Version;
    property Win16: Boolean read get_Win16;
    property Win32: Boolean read get_Win32;
    property Item[key: string]: string read get_Item; default;
  end;

  TDNHttpBrowserCapabilitiesWrapper = class(TDNGenericImport<DNHttpBrowserCapabilitiesWrapperClass, DNHttpBrowserCapabilitiesWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpCachePolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4DD4C936-AA1B-5569-8856-439F069803B7}']
  end;

  [DNTypeName('System.Web.HttpCachePolicy')]
  DNHttpCachePolicy = interface(DDN.mscorlib.DNObject)
  ['{19BF1923-A494-350E-8DE9-AAC67FBFC53F}']
  { getters & setters } 

    function get_VaryByContentEncodings: DNHttpCacheVaryByContentEncodings;
    function get_VaryByHeaders: DNHttpCacheVaryByHeaders;
    function get_VaryByParams: DNHttpCacheVaryByParams;
    function get_UtcTimestampCreated: DDN.mscorlib.DNDateTime;
    procedure set_UtcTimestampCreated(value: DDN.mscorlib.DNDateTime);

  { methods } 

    function IsModified: Boolean;
    procedure SetNoServerCaching;
    function GetNoServerCaching: Boolean;
    procedure SetVaryByCustom(custom: string);
    function GetVaryByCustom: string;
    function GetCacheExtensions: string;
    procedure SetNoTransforms;
    function GetNoTransforms: Boolean;
    function GetIgnoreRangeRequests: Boolean;
    procedure SetCacheability(cacheability: DNHttpCacheability); overload;
    function GetCacheability: DNHttpCacheability;
    procedure SetNoStore;
    function GetNoStore: Boolean;
    procedure SetExpires(date: DDN.mscorlib.DNDateTime);
    function GetExpires: DDN.mscorlib.DNDateTime;
    procedure SetMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    function GetMaxAge: DDN.mscorlib.DNTimeSpan;
    procedure SetProxyMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    function GetProxyMaxAge: DDN.mscorlib.DNTimeSpan;
    procedure SetSlidingExpiration(slide: Boolean);
    function HasSlidingExpiration: Boolean;
    procedure SetValidUntilExpires(validUntilExpires: Boolean);
    function IsValidUntilExpires: Boolean;
    procedure SetAllowResponseInBrowserHistory(allow: Boolean);
    procedure SetRevalidation(revalidation: DNHttpCacheRevalidation);
    function GetRevalidation: DNHttpCacheRevalidation;
    procedure SetETag(etag: string);
    function GetETag: string;
    procedure SetLastModified(date: DDN.mscorlib.DNDateTime);
    function GetUtcLastModified: DDN.mscorlib.DNDateTime;
    procedure SetLastModifiedFromFileDependencies;
    function GetLastModifiedFromFileDependencies: Boolean;
    procedure SetETagFromFileDependencies;
    function GetETagFromFileDependencies: Boolean;
    procedure SetOmitVaryStar(omit: Boolean);
    function GetOmitVaryStar: Int32;
    procedure AddValidationCallback(handler: DNHttpCacheValidateHandler; data: DDN.mscorlib.DNObject);
    procedure AppendCacheExtension(extension: string);
    procedure SetCacheability(cacheability: DNHttpCacheability; field: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VaryByContentEncodings: DNHttpCacheVaryByContentEncodings read get_VaryByContentEncodings;
    property VaryByHeaders: DNHttpCacheVaryByHeaders read get_VaryByHeaders;
    property VaryByParams: DNHttpCacheVaryByParams read get_VaryByParams;
    property UtcTimestampCreated: DDN.mscorlib.DNDateTime read get_UtcTimestampCreated write set_UtcTimestampCreated;
  end;

  TDNHttpCachePolicy = class(TDNGenericImport<DNHttpCachePolicyClass, DNHttpCachePolicy>) end;

  //-------------namespace: System.Web----------------
  DNHttpCachePolicyBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5760B207-6963-561D-A271-4987BCEC0C3E}']
  end;

  [DNTypeName('System.Web.HttpCachePolicyBase')]
  DNHttpCachePolicyBase = interface(DDN.mscorlib.DNObject)
  ['{90AD04A6-9F1F-3E4F-BB5B-0341905C37EF}']
  { getters & setters } 

    function get_VaryByContentEncodings: DNHttpCacheVaryByContentEncodings;
    function get_VaryByHeaders: DNHttpCacheVaryByHeaders;
    function get_VaryByParams: DNHttpCacheVaryByParams;

  { methods } 

    procedure AddValidationCallback(handler: DNHttpCacheValidateHandler; data: DDN.mscorlib.DNObject);
    procedure AppendCacheExtension(extension: string);
    procedure SetAllowResponseInBrowserHistory(allow: Boolean);
    procedure SetCacheability(cacheability: DNHttpCacheability); overload;
    procedure SetCacheability(cacheability: DNHttpCacheability; field: string); overload;
    procedure SetETag(etag: string);
    procedure SetETagFromFileDependencies;
    procedure SetExpires(date: DDN.mscorlib.DNDateTime);
    procedure SetLastModified(date: DDN.mscorlib.DNDateTime);
    procedure SetLastModifiedFromFileDependencies;
    procedure SetMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    procedure SetNoServerCaching;
    procedure SetNoStore;
    procedure SetNoTransforms;
    procedure SetOmitVaryStar(omit: Boolean);
    procedure SetProxyMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    procedure SetRevalidation(revalidation: DNHttpCacheRevalidation);
    procedure SetSlidingExpiration(slide: Boolean);
    procedure SetValidUntilExpires(validUntilExpires: Boolean);
    procedure SetVaryByCustom(custom: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VaryByContentEncodings: DNHttpCacheVaryByContentEncodings read get_VaryByContentEncodings;
    property VaryByHeaders: DNHttpCacheVaryByHeaders read get_VaryByHeaders;
    property VaryByParams: DNHttpCacheVaryByParams read get_VaryByParams;
  end;

  TDNHttpCachePolicyBase = class(TDNGenericImport<DNHttpCachePolicyBaseClass, DNHttpCachePolicyBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpCachePolicyWrapperClass = interface(DNHttpCachePolicyBaseClass)
  ['{1DAAD1A7-FC7C-59F7-87A6-C0134199ADED}']
  { constructors } 

    {class} function init(httpCachePolicy: DNHttpCachePolicy): DNHttpCachePolicyWrapper;

  end;

  [DNTypeName('System.Web.HttpCachePolicyWrapper')]
  DNHttpCachePolicyWrapper = interface(DNHttpCachePolicyBase)
  ['{8B2C0F60-1650-357E-9536-774F930F2DBE}']
  { getters & setters } 

    function get_VaryByContentEncodings: DNHttpCacheVaryByContentEncodings;
    function get_VaryByHeaders: DNHttpCacheVaryByHeaders;
    function get_VaryByParams: DNHttpCacheVaryByParams;

  { methods } 

    procedure AddValidationCallback(handler: DNHttpCacheValidateHandler; data: DDN.mscorlib.DNObject);
    procedure AppendCacheExtension(extension: string);
    procedure SetAllowResponseInBrowserHistory(allow: Boolean);
    procedure SetCacheability(cacheability: DNHttpCacheability); overload;
    procedure SetCacheability(cacheability: DNHttpCacheability; field: string); overload;
    procedure SetETag(etag: string);
    procedure SetETagFromFileDependencies;
    procedure SetExpires(date: DDN.mscorlib.DNDateTime);
    procedure SetLastModified(date: DDN.mscorlib.DNDateTime);
    procedure SetLastModifiedFromFileDependencies;
    procedure SetMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    procedure SetNoServerCaching;
    procedure SetNoStore;
    procedure SetNoTransforms;
    procedure SetOmitVaryStar(omit: Boolean);
    procedure SetProxyMaxAge(delta: DDN.mscorlib.DNTimeSpan);
    procedure SetRevalidation(revalidation: DNHttpCacheRevalidation);
    procedure SetSlidingExpiration(slide: Boolean);
    procedure SetValidUntilExpires(validUntilExpires: Boolean);
    procedure SetVaryByCustom(custom: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VaryByContentEncodings: DNHttpCacheVaryByContentEncodings read get_VaryByContentEncodings;
    property VaryByHeaders: DNHttpCacheVaryByHeaders read get_VaryByHeaders;
    property VaryByParams: DNHttpCacheVaryByParams read get_VaryByParams;
  end;

  TDNHttpCachePolicyWrapper = class(TDNGenericImport<DNHttpCachePolicyWrapperClass, DNHttpCachePolicyWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpCacheVaryByContentEncodingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A8783091-5547-5689-9714-4289DD08440D}']
  { constructors } 

    {class} function init: DNHttpCacheVaryByContentEncodings;

  end;

  [DNTypeName('System.Web.HttpCacheVaryByContentEncodings')]
  DNHttpCacheVaryByContentEncodings = interface(DDN.mscorlib.DNObject)
  ['{A719ABFF-CE3B-31D7-99E3-35ABE769B382}']
  { getters & setters } 

    function get_Item(contentEncoding: string): Boolean;
    procedure set_Item(contentEncoding: string; value: Boolean);

  { methods } 

    procedure SetContentEncodings(contentEncodings: TArray<string>);
    function GetContentEncodings: TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[contentEncoding: string]: Boolean read get_Item write set_Item; default;
  end;

  TDNHttpCacheVaryByContentEncodings = class(TDNGenericImport<DNHttpCacheVaryByContentEncodingsClass, DNHttpCacheVaryByContentEncodings>) end;

  //-------------namespace: System.Web----------------
  DNHttpCacheVaryByHeadersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{580E6270-03B4-5B0C-AF23-60ABE7BFB19B}']
  { constructors } 

    {class} function init: DNHttpCacheVaryByHeaders;

  end;

  [DNTypeName('System.Web.HttpCacheVaryByHeaders')]
  DNHttpCacheVaryByHeaders = interface(DDN.mscorlib.DNObject)
  ['{1A4FE57C-2AA7-3CA1-9287-1F9AE9805E41}']
  { getters & setters } 

    function get_AcceptTypes: Boolean;
    procedure set_AcceptTypes(value: Boolean);
    function get_UserLanguage: Boolean;
    procedure set_UserLanguage(value: Boolean);
    function get_UserAgent: Boolean;
    procedure set_UserAgent(value: Boolean);
    function get_UserCharSet: Boolean;
    procedure set_UserCharSet(value: Boolean);
    function get_Item(header: string): Boolean;
    procedure set_Item(header: string; value: Boolean);

  { methods } 

    procedure VaryByUnspecifiedParameters;
    procedure SetHeaders(headers: TArray<string>);
    function GetHeaders: TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AcceptTypes: Boolean read get_AcceptTypes write set_AcceptTypes;
    property UserLanguage: Boolean read get_UserLanguage write set_UserLanguage;
    property UserAgent: Boolean read get_UserAgent write set_UserAgent;
    property UserCharSet: Boolean read get_UserCharSet write set_UserCharSet;
    property Item[header: string]: Boolean read get_Item write set_Item; default;
  end;

  TDNHttpCacheVaryByHeaders = class(TDNGenericImport<DNHttpCacheVaryByHeadersClass, DNHttpCacheVaryByHeaders>) end;

  //-------------namespace: System.Web----------------
  DNHttpCacheVaryByParamsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{06E63B5D-9B32-576F-918F-7187A05871BC}']
  { constructors } 

    {class} function init: DNHttpCacheVaryByParams;

  end;

  [DNTypeName('System.Web.HttpCacheVaryByParams')]
  DNHttpCacheVaryByParams = interface(DDN.mscorlib.DNObject)
  ['{6DB197DF-C450-3946-88DC-9B2CD3EA1BD8}']
  { getters & setters } 

    function get_Item(header: string): Boolean;
    procedure set_Item(header: string; value: Boolean);
    function get_IgnoreParams: Boolean;
    procedure set_IgnoreParams(value: Boolean);

  { methods } 

    procedure SetParams(parameters: TArray<string>);
    function GetParams: TArray<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[header: string]: Boolean read get_Item write set_Item; default;
    property IgnoreParams: Boolean read get_IgnoreParams write set_IgnoreParams;
  end;

  TDNHttpCacheVaryByParams = class(TDNGenericImport<DNHttpCacheVaryByParamsClass, DNHttpCacheVaryByParams>) end;

  //-------------namespace: System.Web----------------
  DNHttpContextClass = interface(DNObjectClass)
  ['{6B7A3BAC-D919-5153-91FA-D06B52022E10}']
  { static getter & setter } 

    {class} function get_Current: DNHttpContext;
    {class} procedure set_Current(value: DNHttpContext);

  { constructors } 

    {class} function init(request: DNHttpRequest; response: DNHttpResponse): DNHttpContext; overload;
    {class} function init(wr: DNHttpWorkerRequest): DNHttpContext; overload;

  { static methods } 

    {class} function GetAppConfig(name: string): DDN.mscorlib.DNObject;
    {class} function GetGlobalResourceObject(classKey: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    {class} function GetGlobalResourceObject(classKey: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    {class} function GetLocalResourceObject(virtualPath: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    {class} function GetLocalResourceObject(virtualPath: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;

  { static propertys } 

    {class} property Current: DNHttpContext read get_Current write set_Current;
  end;

  [DNTypeName('System.Web.HttpContext')]
  DNHttpContext = interface(DDN.mscorlib.DNIServiceProvider)
  ['{31429A69-C7C4-3F35-A3EB-5FF0D637BD02}']
  { getters & setters } 

    function get_IsWebSocketRequest: Boolean;
    function get_IsWebSocketRequestUpgrading: Boolean;
    function get_WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string>;
    function get_WebSocketNegotiatedProtocol: string;
    function get_AsyncPreloadMode: DNAsyncPreloadModeFlags;
    procedure set_AsyncPreloadMode(value: DNAsyncPreloadModeFlags);
    function get_AllowAsyncDuringSyncStages: Boolean;
    procedure set_AllowAsyncDuringSyncStages(value: Boolean);
    function get_ApplicationInstance: DNHttpApplication;
    procedure set_ApplicationInstance(value: DNHttpApplication);
    function get_Application: DNHttpApplicationState;
    function get_Handler: DNIHttpHandler;
    procedure set_Handler(value: DNIHttpHandler);
    function get_PreviousHandler: DNIHttpHandler;
    function get_CurrentHandler: DNIHttpHandler;
    function get_Request: DNHttpRequest;
    function get_Response: DNHttpResponse;
    function get_Trace: DNTraceContext;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_Session: DNHttpSessionState;
    function get_Server: DNHttpServerUtility;
    function get_Error: DDN.mscorlib.DNException;
    function get_AllErrors: TArray<DDN.mscorlib.DNException>;
    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_Profile: DNProfileBase;
    function get_SkipAuthorization: Boolean;
    procedure set_SkipAuthorization(value: Boolean);
    function get_IsDebuggingEnabled: Boolean;
    function get_IsCustomErrorEnabled: Boolean;
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_Cache: DNCache;
    function get_PageInstrumentation: DNPageInstrumentationService;
    function get_ThreadAbortOnTimeout: Boolean;
    procedure set_ThreadAbortOnTimeout(value: Boolean);
    function get_CurrentNotification: DNRequestNotification;
    function get_IsPostNotification: Boolean;

  { methods } 

    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>); overload;
    function AddOnRequestCompleted(callback: DDN.mscorlib.DNAction<DNHttpContext>): DNISubscriptionToken;
    function DisposeOnPipelineCompleted(target: DDN.mscorlib.DNIDisposable): DNISubscriptionToken;
    procedure AddError(errorInfo: DDN.mscorlib.DNException);
    procedure ClearError;
    function GetConfig(name: string): DDN.mscorlib.DNObject;
    procedure RewritePath(path: string); overload;
    procedure RewritePath(path: string; rebaseClientPath: Boolean); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string; setClientFilePath: Boolean); overload;
    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>; options: DNAspNetWebSocketOptions); overload;
    procedure RemapHandler(handler: DNIHttpHandler);
    procedure SetSessionStateBehavior(sessionStateBehavior: DNSessionStateBehavior);
    function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsWebSocketRequest: Boolean read get_IsWebSocketRequest;
    property IsWebSocketRequestUpgrading: Boolean read get_IsWebSocketRequestUpgrading;
    property WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string> read get_WebSocketRequestedProtocols;
    property WebSocketNegotiatedProtocol: string read get_WebSocketNegotiatedProtocol;
    property AsyncPreloadMode: DNAsyncPreloadModeFlags read get_AsyncPreloadMode write set_AsyncPreloadMode;
    property AllowAsyncDuringSyncStages: Boolean read get_AllowAsyncDuringSyncStages write set_AllowAsyncDuringSyncStages;
    property ApplicationInstance: DNHttpApplication read get_ApplicationInstance write set_ApplicationInstance;
    property Application: DNHttpApplicationState read get_Application;
    property Handler: DNIHttpHandler read get_Handler write set_Handler;
    property PreviousHandler: DNIHttpHandler read get_PreviousHandler;
    property CurrentHandler: DNIHttpHandler read get_CurrentHandler;
    property Request: DNHttpRequest read get_Request;
    property Response: DNHttpResponse read get_Response;
    property Trace: DNTraceContext read get_Trace;
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    property Session: DNHttpSessionState read get_Session;
    property Server: DNHttpServerUtility read get_Server;
    property Error: DDN.mscorlib.DNException read get_Error;
    property AllErrors: TArray<DDN.mscorlib.DNException> read get_AllErrors;
    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property Profile: DNProfileBase read get_Profile;
    property SkipAuthorization: Boolean read get_SkipAuthorization write set_SkipAuthorization;
    property IsDebuggingEnabled: Boolean read get_IsDebuggingEnabled;
    property IsCustomErrorEnabled: Boolean read get_IsCustomErrorEnabled;
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    property Cache: DNCache read get_Cache;
    property PageInstrumentation: DNPageInstrumentationService read get_PageInstrumentation;
    property ThreadAbortOnTimeout: Boolean read get_ThreadAbortOnTimeout write set_ThreadAbortOnTimeout;
    property CurrentNotification: DNRequestNotification read get_CurrentNotification;
    property IsPostNotification: Boolean read get_IsPostNotification;
  end;

  TDNHttpContext = class(TDNGenericImport<DNHttpContextClass, DNHttpContext>) end;

  //-------------namespace: System.Web----------------
  DNHttpContextBaseClass = interface(DNObjectClass)
  ['{ACF90ABD-97DB-5035-953D-49B56E79A0DA}']
  end;

  [DNTypeName('System.Web.HttpContextBase')]
  DNHttpContextBase = interface(DDN.mscorlib.DNIServiceProvider)
  ['{52747AEE-6E91-3212-B8DC-A67F2C7CBCFF}']
  { getters & setters } 

    function get_AllErrors: TArray<DDN.mscorlib.DNException>;
    function get_AllowAsyncDuringSyncStages: Boolean;
    procedure set_AllowAsyncDuringSyncStages(value: Boolean);
    function get_Application: DNHttpApplicationStateBase;
    function get_ApplicationInstance: DNHttpApplication;
    procedure set_ApplicationInstance(value: DNHttpApplication);
    function get_AsyncPreloadMode: DNAsyncPreloadModeFlags;
    procedure set_AsyncPreloadMode(value: DNAsyncPreloadModeFlags);
    function get_Cache: DNCache;
    function get_CurrentHandler: DNIHttpHandler;
    function get_CurrentNotification: DNRequestNotification;
    function get_Error: DDN.mscorlib.DNException;
    function get_Handler: DNIHttpHandler;
    procedure set_Handler(value: DNIHttpHandler);
    function get_IsCustomErrorEnabled: Boolean;
    function get_IsDebuggingEnabled: Boolean;
    function get_IsPostNotification: Boolean;
    function get_IsWebSocketRequest: Boolean;
    function get_IsWebSocketRequestUpgrading: Boolean;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_PageInstrumentation: DNPageInstrumentationService;
    function get_PreviousHandler: DNIHttpHandler;
    function get_Profile: DNProfileBase;
    function get_Request: DNHttpRequestBase;
    function get_Response: DNHttpResponseBase;
    function get_Server: DNHttpServerUtilityBase;
    function get_Session: DNHttpSessionStateBase;
    function get_SkipAuthorization: Boolean;
    procedure set_SkipAuthorization(value: Boolean);
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_ThreadAbortOnTimeout: Boolean;
    procedure set_ThreadAbortOnTimeout(value: Boolean);
    function get_Trace: DNTraceContext;
    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_WebSocketNegotiatedProtocol: string;
    function get_WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string>;

  { methods } 

    function AddOnRequestCompleted(callback: DDN.mscorlib.DNAction<DNHttpContextBase>): DNISubscriptionToken;
    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>); overload;
    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>; options: DNAspNetWebSocketOptions); overload;
    procedure AddError(errorInfo: DDN.mscorlib.DNException);
    procedure ClearError;
    function DisposeOnPipelineCompleted(target: DDN.mscorlib.DNIDisposable): DNISubscriptionToken;
    function GetGlobalResourceObject(classKey: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    function GetGlobalResourceObject(classKey: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function GetLocalResourceObject(virtualPath: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    function GetLocalResourceObject(virtualPath: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    procedure RemapHandler(handler: DNIHttpHandler);
    procedure RewritePath(path: string); overload;
    procedure RewritePath(path: string; rebaseClientPath: Boolean); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string; setClientFilePath: Boolean); overload;
    procedure SetSessionStateBehavior(sessionStateBehavior: DNSessionStateBehavior);
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllErrors: TArray<DDN.mscorlib.DNException> read get_AllErrors;
    property AllowAsyncDuringSyncStages: Boolean read get_AllowAsyncDuringSyncStages write set_AllowAsyncDuringSyncStages;
    property Application: DNHttpApplicationStateBase read get_Application;
    property ApplicationInstance: DNHttpApplication read get_ApplicationInstance write set_ApplicationInstance;
    property AsyncPreloadMode: DNAsyncPreloadModeFlags read get_AsyncPreloadMode write set_AsyncPreloadMode;
    property Cache: DNCache read get_Cache;
    property CurrentHandler: DNIHttpHandler read get_CurrentHandler;
    property CurrentNotification: DNRequestNotification read get_CurrentNotification;
    property Error: DDN.mscorlib.DNException read get_Error;
    property Handler: DNIHttpHandler read get_Handler write set_Handler;
    property IsCustomErrorEnabled: Boolean read get_IsCustomErrorEnabled;
    property IsDebuggingEnabled: Boolean read get_IsDebuggingEnabled;
    property IsPostNotification: Boolean read get_IsPostNotification;
    property IsWebSocketRequest: Boolean read get_IsWebSocketRequest;
    property IsWebSocketRequestUpgrading: Boolean read get_IsWebSocketRequestUpgrading;
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    property PageInstrumentation: DNPageInstrumentationService read get_PageInstrumentation;
    property PreviousHandler: DNIHttpHandler read get_PreviousHandler;
    property Profile: DNProfileBase read get_Profile;
    property Request: DNHttpRequestBase read get_Request;
    property Response: DNHttpResponseBase read get_Response;
    property Server: DNHttpServerUtilityBase read get_Server;
    property Session: DNHttpSessionStateBase read get_Session;
    property SkipAuthorization: Boolean read get_SkipAuthorization write set_SkipAuthorization;
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    property ThreadAbortOnTimeout: Boolean read get_ThreadAbortOnTimeout write set_ThreadAbortOnTimeout;
    property Trace: DNTraceContext read get_Trace;
    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property WebSocketNegotiatedProtocol: string read get_WebSocketNegotiatedProtocol;
    property WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string> read get_WebSocketRequestedProtocols;
  end;

  TDNHttpContextBase = class(TDNGenericImport<DNHttpContextBaseClass, DNHttpContextBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpContextWrapperClass = interface(DNHttpContextBaseClass)
  ['{E2D4F290-0E0A-5A2B-AECB-8FED3B699676}']
  { constructors } 

    {class} function init(httpContext: DNHttpContext): DNHttpContextWrapper;

  end;

  [DNTypeName('System.Web.HttpContextWrapper')]
  DNHttpContextWrapper = interface(DNHttpContextBase)
  ['{CC6CB077-ED56-3A9F-B594-62BD63EA413B}']
  { getters & setters } 

    function get_AllErrors: TArray<DDN.mscorlib.DNException>;
    function get_AllowAsyncDuringSyncStages: Boolean;
    procedure set_AllowAsyncDuringSyncStages(value: Boolean);
    function get_Application: DNHttpApplicationStateBase;
    function get_ApplicationInstance: DNHttpApplication;
    procedure set_ApplicationInstance(value: DNHttpApplication);
    function get_AsyncPreloadMode: DNAsyncPreloadModeFlags;
    procedure set_AsyncPreloadMode(value: DNAsyncPreloadModeFlags);
    function get_Cache: DNCache;
    function get_CurrentHandler: DNIHttpHandler;
    function get_CurrentNotification: DNRequestNotification;
    function get_Error: DDN.mscorlib.DNException;
    function get_Handler: DNIHttpHandler;
    procedure set_Handler(value: DNIHttpHandler);
    function get_IsCustomErrorEnabled: Boolean;
    function get_IsDebuggingEnabled: Boolean;
    function get_IsPostNotification: Boolean;
    function get_IsWebSocketRequest: Boolean;
    function get_IsWebSocketRequestUpgrading: Boolean;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_PageInstrumentation: DNPageInstrumentationService;
    function get_PreviousHandler: DNIHttpHandler;
    function get_Profile: DNProfileBase;
    function get_Request: DNHttpRequestBase;
    function get_Response: DNHttpResponseBase;
    function get_Server: DNHttpServerUtilityBase;
    function get_Session: DNHttpSessionStateBase;
    function get_SkipAuthorization: Boolean;
    procedure set_SkipAuthorization(value: Boolean);
    function get_Timestamp: DDN.mscorlib.DNDateTime;
    function get_ThreadAbortOnTimeout: Boolean;
    procedure set_ThreadAbortOnTimeout(value: Boolean);
    function get_Trace: DNTraceContext;
    function get_User: DDN.mscorlib.DNIPrincipal;
    procedure set_User(value: DDN.mscorlib.DNIPrincipal);
    function get_WebSocketNegotiatedProtocol: string;
    function get_WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string>;

  { methods } 

    function AddOnRequestCompleted(callback: DDN.mscorlib.DNAction<DNHttpContextBase>): DNISubscriptionToken;
    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>); overload;
    procedure AcceptWebSocketRequest(userFunc: DDN.mscorlib.DNFunc<DNAspNetWebSocketContext, DDN.mscorlib.DNTask>; options: DNAspNetWebSocketOptions); overload;
    procedure AddError(errorInfo: DDN.mscorlib.DNException);
    procedure ClearError;
    function DisposeOnPipelineCompleted(target: DDN.mscorlib.DNIDisposable): DNISubscriptionToken;
    function GetGlobalResourceObject(classKey: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    function GetGlobalResourceObject(classKey: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function GetLocalResourceObject(virtualPath: string; resourceKey: string): DDN.mscorlib.DNObject; overload;
    function GetLocalResourceObject(virtualPath: string; resourceKey: string; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function GetSection(sectionName: string): DDN.mscorlib.DNObject;
    procedure RemapHandler(handler: DNIHttpHandler);
    procedure RewritePath(path: string); overload;
    procedure RewritePath(path: string; rebaseClientPath: Boolean); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string); overload;
    procedure RewritePath(filePath: string; pathInfo: string; queryString: string; setClientFilePath: Boolean); overload;
    procedure SetSessionStateBehavior(sessionStateBehavior: DNSessionStateBehavior);
    function GetService(serviceType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllErrors: TArray<DDN.mscorlib.DNException> read get_AllErrors;
    property AllowAsyncDuringSyncStages: Boolean read get_AllowAsyncDuringSyncStages write set_AllowAsyncDuringSyncStages;
    property Application: DNHttpApplicationStateBase read get_Application;
    property ApplicationInstance: DNHttpApplication read get_ApplicationInstance write set_ApplicationInstance;
    property AsyncPreloadMode: DNAsyncPreloadModeFlags read get_AsyncPreloadMode write set_AsyncPreloadMode;
    property Cache: DNCache read get_Cache;
    property CurrentHandler: DNIHttpHandler read get_CurrentHandler;
    property CurrentNotification: DNRequestNotification read get_CurrentNotification;
    property Error: DDN.mscorlib.DNException read get_Error;
    property Handler: DNIHttpHandler read get_Handler write set_Handler;
    property IsCustomErrorEnabled: Boolean read get_IsCustomErrorEnabled;
    property IsDebuggingEnabled: Boolean read get_IsDebuggingEnabled;
    property IsPostNotification: Boolean read get_IsPostNotification;
    property IsWebSocketRequest: Boolean read get_IsWebSocketRequest;
    property IsWebSocketRequestUpgrading: Boolean read get_IsWebSocketRequestUpgrading;
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    property PageInstrumentation: DNPageInstrumentationService read get_PageInstrumentation;
    property PreviousHandler: DNIHttpHandler read get_PreviousHandler;
    property Profile: DNProfileBase read get_Profile;
    property Request: DNHttpRequestBase read get_Request;
    property Response: DNHttpResponseBase read get_Response;
    property Server: DNHttpServerUtilityBase read get_Server;
    property Session: DNHttpSessionStateBase read get_Session;
    property SkipAuthorization: Boolean read get_SkipAuthorization write set_SkipAuthorization;
    property Timestamp: DDN.mscorlib.DNDateTime read get_Timestamp;
    property ThreadAbortOnTimeout: Boolean read get_ThreadAbortOnTimeout write set_ThreadAbortOnTimeout;
    property Trace: DNTraceContext read get_Trace;
    property User: DDN.mscorlib.DNIPrincipal read get_User write set_User;
    property WebSocketNegotiatedProtocol: string read get_WebSocketNegotiatedProtocol;
    property WebSocketRequestedProtocols: DDN.mscorlib.DNIList<string> read get_WebSocketRequestedProtocols;
  end;

  TDNHttpContextWrapper = class(TDNGenericImport<DNHttpContextWrapperClass, DNHttpContextWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpCookieClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2D065956-5C32-5F3A-BD25-E8A68B5579AC}']
  { constructors } 

    {class} function init(name: string): DNHttpCookie; overload;
    {class} function init(name: string; value: string): DNHttpCookie; overload;

  { static methods } 

    {class} function TryParse(input: string; out result: DNHttpCookie): Boolean;

  end;

  [DNTypeName('System.Web.HttpCookie')]
  DNHttpCookie = interface(DDN.mscorlib.DNObject)
  ['{B912DB10-D8DE-3470-9200-DC8BE312B40E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Path: string;
    procedure set_Path(value: string);
    function get_Secure: Boolean;
    procedure set_Secure(value: Boolean);
    function get_Shareable: Boolean;
    procedure set_Shareable(value: Boolean);
    function get_HttpOnly: Boolean;
    procedure set_HttpOnly(value: Boolean);
    function get_Domain: string;
    procedure set_Domain(value: string);
    function get_Expires: DDN.mscorlib.DNDateTime;
    procedure set_Expires(value: DDN.mscorlib.DNDateTime);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SameSite: DNSameSiteMode;
    procedure set_SameSite(value: DNSameSiteMode);
    function get_HasKeys: Boolean;
    function get_Values: DDN.System.DNNameValueCollection;
    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Path: string read get_Path write set_Path;
    property Secure: Boolean read get_Secure write set_Secure;
    property Shareable: Boolean read get_Shareable write set_Shareable;
    property HttpOnly: Boolean read get_HttpOnly write set_HttpOnly;
    property Domain: string read get_Domain write set_Domain;
    property Expires: DDN.mscorlib.DNDateTime read get_Expires write set_Expires;
    property Value: string read get_Value write set_Value;
    property SameSite: DNSameSiteMode read get_SameSite write set_SameSite;
    property HasKeys: Boolean read get_HasKeys;
    property Values: DDN.System.DNNameValueCollection read get_Values;
    property Item[key: string]: string read get_Item write set_Item; default;
  end;

  TDNHttpCookie = class(TDNGenericImport<DNHttpCookieClass, DNHttpCookie>) end;

  //-------------namespace: System.Web----------------
  DNHttpPostedFileClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F00679D7-AAC3-5F8E-A88D-7F3F60F411E8}']
  end;

  [DNTypeName('System.Web.HttpPostedFile')]
  DNHttpPostedFile = interface(DDN.mscorlib.DNObject)
  ['{4794AD5E-799D-3C78-903B-63E15F236147}']
  { getters & setters } 

    function get_FileName: string;
    function get_ContentType: string;
    function get_ContentLength: Int32;
    function get_InputStream: DDN.mscorlib.DNStream;

  { methods } 

    procedure SaveAs(filename: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FileName: string read get_FileName;
    property ContentType: string read get_ContentType;
    property ContentLength: Int32 read get_ContentLength;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
  end;

  TDNHttpPostedFile = class(TDNGenericImport<DNHttpPostedFileClass, DNHttpPostedFile>) end;

  //-------------namespace: System.Web----------------
  DNHttpPostedFileBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{107C400E-3F64-5CA4-B64D-59F9DD687E3D}']
  end;

  [DNTypeName('System.Web.HttpPostedFileBase')]
  DNHttpPostedFileBase = interface(DDN.mscorlib.DNObject)
  ['{6E56BA5F-FF9E-3AE0-986E-986FAA12EE84}']
  { getters & setters } 

    function get_ContentLength: Int32;
    function get_ContentType: string;
    function get_FileName: string;
    function get_InputStream: DDN.mscorlib.DNStream;

  { methods } 

    procedure SaveAs(filename: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentLength: Int32 read get_ContentLength;
    property ContentType: string read get_ContentType;
    property FileName: string read get_FileName;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
  end;

  TDNHttpPostedFileBase = class(TDNGenericImport<DNHttpPostedFileBaseClass, DNHttpPostedFileBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpPostedFileWrapperClass = interface(DNHttpPostedFileBaseClass)
  ['{14D2B3CB-DC57-5B69-B4B4-5A4905D7674B}']
  { constructors } 

    {class} function init(httpPostedFile: DNHttpPostedFile): DNHttpPostedFileWrapper;

  end;

  [DNTypeName('System.Web.HttpPostedFileWrapper')]
  DNHttpPostedFileWrapper = interface(DNHttpPostedFileBase)
  ['{F6173476-9236-3195-8226-4F12B8617BBF}']
  { getters & setters } 

    function get_ContentLength: Int32;
    function get_ContentType: string;
    function get_FileName: string;
    function get_InputStream: DDN.mscorlib.DNStream;

  { methods } 

    procedure SaveAs(filename: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentLength: Int32 read get_ContentLength;
    property ContentType: string read get_ContentType;
    property FileName: string read get_FileName;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
  end;

  TDNHttpPostedFileWrapper = class(TDNGenericImport<DNHttpPostedFileWrapperClass, DNHttpPostedFileWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AA11657D-31B7-5B74-9479-3B09D30A51C2}']
  { constructors } 

    {class} function init(filename: string; url: string; queryString: string): DNHttpRequest;

  end;

  [DNTypeName('System.Web.HttpRequest')]
  DNHttpRequest = interface(DDN.mscorlib.DNObject)
  ['{0AE44D2B-CCAF-31E5-BF95-C4A5678F37EF}']
  { getters & setters } 

    function get_RequestContext: DNRequestContext;
    procedure set_RequestContext(value: DNRequestContext);
    function get_IsLocal: Boolean;
    function get_HttpMethod: string;
    function get_RequestType: string;
    procedure set_RequestType(value: string);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_ContentLength: Int32;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_AcceptTypes: TArray<string>;
    function get_IsAuthenticated: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_Path: string;
    function get_AnonymousID: string;
    function get_FilePath: string;
    function get_CurrentExecutionFilePath: string;
    function get_CurrentExecutionFilePathExtension: string;
    function get_AppRelativeCurrentExecutionFilePath: string;
    function get_PathInfo: string;
    function get_PhysicalPath: string;
    function get_ApplicationPath: string;
    function get_PhysicalApplicationPath: string;
    function get_UserAgent: string;
    function get_UserLanguages: TArray<string>;
    function get_Browser: DNHttpBrowserCapabilities;
    procedure set_Browser(value: DNHttpBrowserCapabilities);
    function get_UserHostName: string;
    function get_UserHostAddress: string;
    function get_RawUrl: string;
    function get_Url: DDN.System.DNUri;
    function get_UrlReferrer: DDN.System.DNUri;
    function get_Params: DDN.System.DNNameValueCollection;
    function get_Item(key: string): string;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_Form: DDN.System.DNNameValueCollection;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_Unvalidated: DNUnvalidatedRequestValues;
    function get_ServerVariables: DDN.System.DNNameValueCollection;
    function get_Cookies: DNHttpCookieCollection;
    function get_Files: DNHttpFileCollection;
    function get_InputStream: DDN.mscorlib.DNStream;
    function get_TotalBytes: Int32;
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_ClientCertificate: DNHttpClientCertificate;
    function get_LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity;
    function get_HttpChannelBinding: DDN.System.DNChannelBinding;
    function get_TlsTokenBindingInfo: DNITlsTokenBindingInfo;
    function get_ReadEntityBodyMode: DNReadEntityBodyMode;
    function get_TimedOutToken: DDN.mscorlib.DNCancellationToken;

  { methods } 

    procedure ValidateInput;
    function MapRawImageCoordinates(imageFieldName: string): TArray<Double>;
    function MapPath(virtualPath: string): string; overload;
    function MapPath(virtualPath: string; baseVirtualDir: string; allowCrossAppMapping: Boolean): string; overload;
    procedure InsertEntityBody; overload;
    function GetBufferlessInputStream: DDN.mscorlib.DNStream; overload;
    function GetBufferlessInputStream(disableMaxRequestLength: Boolean): DDN.mscorlib.DNStream; overload;
    function GetBufferedInputStream: DDN.mscorlib.DNStream;
    procedure &Abort;
    function BinaryRead(count: Int32): TArray<Byte>;
    function MapImageCoordinates(imageFieldName: string): TArray<Int32>;
    procedure SaveAs(filename: string; includeHeaders: Boolean);
    procedure InsertEntityBody(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestContext: DNRequestContext read get_RequestContext write set_RequestContext;
    property IsLocal: Boolean read get_IsLocal;
    property HttpMethod: string read get_HttpMethod;
    property RequestType: string read get_RequestType write set_RequestType;
    property ContentType: string read get_ContentType write set_ContentType;
    property ContentLength: Int32 read get_ContentLength;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property AcceptTypes: TArray<string> read get_AcceptTypes;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property Path: string read get_Path;
    property AnonymousID: string read get_AnonymousID;
    property FilePath: string read get_FilePath;
    property CurrentExecutionFilePath: string read get_CurrentExecutionFilePath;
    property CurrentExecutionFilePathExtension: string read get_CurrentExecutionFilePathExtension;
    property AppRelativeCurrentExecutionFilePath: string read get_AppRelativeCurrentExecutionFilePath;
    property PathInfo: string read get_PathInfo;
    property PhysicalPath: string read get_PhysicalPath;
    property ApplicationPath: string read get_ApplicationPath;
    property PhysicalApplicationPath: string read get_PhysicalApplicationPath;
    property UserAgent: string read get_UserAgent;
    property UserLanguages: TArray<string> read get_UserLanguages;
    property Browser: DNHttpBrowserCapabilities read get_Browser write set_Browser;
    property UserHostName: string read get_UserHostName;
    property UserHostAddress: string read get_UserHostAddress;
    property RawUrl: string read get_RawUrl;
    property Url: DDN.System.DNUri read get_Url;
    property UrlReferrer: DDN.System.DNUri read get_UrlReferrer;
    property Params: DDN.System.DNNameValueCollection read get_Params;
    property Item[key: string]: string read get_Item; default;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property Form: DDN.System.DNNameValueCollection read get_Form;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property Unvalidated: DNUnvalidatedRequestValues read get_Unvalidated;
    property ServerVariables: DDN.System.DNNameValueCollection read get_ServerVariables;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Files: DNHttpFileCollection read get_Files;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
    property TotalBytes: Int32 read get_TotalBytes;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property ClientCertificate: DNHttpClientCertificate read get_ClientCertificate;
    property LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity read get_LogonUserIdentity;
    property HttpChannelBinding: DDN.System.DNChannelBinding read get_HttpChannelBinding;
    property TlsTokenBindingInfo: DNITlsTokenBindingInfo read get_TlsTokenBindingInfo;
    property ReadEntityBodyMode: DNReadEntityBodyMode read get_ReadEntityBodyMode;
    property TimedOutToken: DDN.mscorlib.DNCancellationToken read get_TimedOutToken;
  end;

  TDNHttpRequest = class(TDNGenericImport<DNHttpRequestClass, DNHttpRequest>) end;

  //-------------namespace: System.Web----------------
  DNHttpRequestBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C02DD554-5461-5722-8D46-B0655CAF5045}']
  end;

  [DNTypeName('System.Web.HttpRequestBase')]
  DNHttpRequestBase = interface(DDN.mscorlib.DNObject)
  ['{DF0F0DB8-1DE6-38BC-B2A4-1D24D503F464}']
  { getters & setters } 

    function get_AcceptTypes: TArray<string>;
    function get_ApplicationPath: string;
    function get_AnonymousID: string;
    function get_AppRelativeCurrentExecutionFilePath: string;
    function get_Browser: DNHttpBrowserCapabilitiesBase;
    function get_HttpChannelBinding: DDN.System.DNChannelBinding;
    function get_ClientCertificate: DNHttpClientCertificate;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentLength: Int32;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Cookies: DNHttpCookieCollection;
    function get_CurrentExecutionFilePath: string;
    function get_CurrentExecutionFilePathExtension: string;
    function get_FilePath: string;
    function get_Files: DNHttpFileCollectionBase;
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_Form: DDN.System.DNNameValueCollection;
    function get_HttpMethod: string;
    function get_InputStream: DDN.mscorlib.DNStream;
    function get_IsAuthenticated: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity;
    function get_Params: DDN.System.DNNameValueCollection;
    function get_Path: string;
    function get_PathInfo: string;
    function get_PhysicalApplicationPath: string;
    function get_PhysicalPath: string;
    function get_RawUrl: string;
    function get_ReadEntityBodyMode: DNReadEntityBodyMode;
    function get_RequestContext: DNRequestContext;
    procedure set_RequestContext(value: DNRequestContext);
    function get_RequestType: string;
    procedure set_RequestType(value: string);
    function get_ServerVariables: DDN.System.DNNameValueCollection;
    function get_TimedOutToken: DDN.mscorlib.DNCancellationToken;
    function get_TlsTokenBindingInfo: DNITlsTokenBindingInfo;
    function get_TotalBytes: Int32;
    function get_Unvalidated: DNUnvalidatedRequestValuesBase;
    function get_Url: DDN.System.DNUri;
    function get_UrlReferrer: DDN.System.DNUri;
    function get_UserAgent: string;
    function get_UserLanguages: TArray<string>;
    function get_UserHostAddress: string;
    function get_UserHostName: string;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_Item(key: string): string;

  { methods } 

    procedure &Abort;
    function BinaryRead(count: Int32): TArray<Byte>;
    function GetBufferedInputStream: DDN.mscorlib.DNStream;
    function GetBufferlessInputStream: DDN.mscorlib.DNStream; overload;
    function GetBufferlessInputStream(disableMaxRequestLength: Boolean): DDN.mscorlib.DNStream; overload;
    procedure InsertEntityBody; overload;
    procedure InsertEntityBody(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    function MapImageCoordinates(imageFieldName: string): TArray<Int32>;
    function MapRawImageCoordinates(imageFieldName: string): TArray<Double>;
    function MapPath(virtualPath: string): string; overload;
    function MapPath(virtualPath: string; baseVirtualDir: string; allowCrossAppMapping: Boolean): string; overload;
    procedure ValidateInput;
    procedure SaveAs(filename: string; includeHeaders: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AcceptTypes: TArray<string> read get_AcceptTypes;
    property ApplicationPath: string read get_ApplicationPath;
    property AnonymousID: string read get_AnonymousID;
    property AppRelativeCurrentExecutionFilePath: string read get_AppRelativeCurrentExecutionFilePath;
    property Browser: DNHttpBrowserCapabilitiesBase read get_Browser;
    property HttpChannelBinding: DDN.System.DNChannelBinding read get_HttpChannelBinding;
    property ClientCertificate: DNHttpClientCertificate read get_ClientCertificate;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property ContentLength: Int32 read get_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property CurrentExecutionFilePath: string read get_CurrentExecutionFilePath;
    property CurrentExecutionFilePathExtension: string read get_CurrentExecutionFilePathExtension;
    property FilePath: string read get_FilePath;
    property Files: DNHttpFileCollectionBase read get_Files;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property Form: DDN.System.DNNameValueCollection read get_Form;
    property HttpMethod: string read get_HttpMethod;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity read get_LogonUserIdentity;
    property Params: DDN.System.DNNameValueCollection read get_Params;
    property Path: string read get_Path;
    property PathInfo: string read get_PathInfo;
    property PhysicalApplicationPath: string read get_PhysicalApplicationPath;
    property PhysicalPath: string read get_PhysicalPath;
    property RawUrl: string read get_RawUrl;
    property ReadEntityBodyMode: DNReadEntityBodyMode read get_ReadEntityBodyMode;
    property RequestContext: DNRequestContext read get_RequestContext write set_RequestContext;
    property RequestType: string read get_RequestType write set_RequestType;
    property ServerVariables: DDN.System.DNNameValueCollection read get_ServerVariables;
    property TimedOutToken: DDN.mscorlib.DNCancellationToken read get_TimedOutToken;
    property TlsTokenBindingInfo: DNITlsTokenBindingInfo read get_TlsTokenBindingInfo;
    property TotalBytes: Int32 read get_TotalBytes;
    property Unvalidated: DNUnvalidatedRequestValuesBase read get_Unvalidated;
    property Url: DDN.System.DNUri read get_Url;
    property UrlReferrer: DDN.System.DNUri read get_UrlReferrer;
    property UserAgent: string read get_UserAgent;
    property UserLanguages: TArray<string> read get_UserLanguages;
    property UserHostAddress: string read get_UserHostAddress;
    property UserHostName: string read get_UserHostName;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property Item[key: string]: string read get_Item; default;
  end;

  TDNHttpRequestBase = class(TDNGenericImport<DNHttpRequestBaseClass, DNHttpRequestBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpRequestWrapperClass = interface(DNHttpRequestBaseClass)
  ['{EA1B3258-5F10-5267-9F07-EA0AA9C2442A}']
  { constructors } 

    {class} function init(httpRequest: DNHttpRequest): DNHttpRequestWrapper;

  end;

  [DNTypeName('System.Web.HttpRequestWrapper')]
  DNHttpRequestWrapper = interface(DNHttpRequestBase)
  ['{EE28BA9C-6A2C-37CF-8CC0-4ED31461D326}']
  { getters & setters } 

    function get_Browser: DNHttpBrowserCapabilitiesBase;
    function get_Params: DDN.System.DNNameValueCollection;
    function get_Path: string;
    function get_FilePath: string;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_AcceptTypes: TArray<string>;
    function get_ApplicationPath: string;
    function get_AnonymousID: string;
    function get_AppRelativeCurrentExecutionFilePath: string;
    function get_HttpChannelBinding: DDN.System.DNChannelBinding;
    function get_ClientCertificate: DNHttpClientCertificate;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentLength: Int32;
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Cookies: DNHttpCookieCollection;
    function get_CurrentExecutionFilePath: string;
    function get_CurrentExecutionFilePathExtension: string;
    function get_Files: DNHttpFileCollectionBase;
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_Form: DDN.System.DNNameValueCollection;
    function get_HttpMethod: string;
    function get_InputStream: DDN.mscorlib.DNStream;
    function get_IsAuthenticated: Boolean;
    function get_IsLocal: Boolean;
    function get_IsSecureConnection: Boolean;
    function get_LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity;
    function get_PathInfo: string;
    function get_PhysicalApplicationPath: string;
    function get_PhysicalPath: string;
    function get_RawUrl: string;
    function get_ReadEntityBodyMode: DNReadEntityBodyMode;
    function get_RequestContext: DNRequestContext;
    procedure set_RequestContext(value: DNRequestContext);
    function get_RequestType: string;
    procedure set_RequestType(value: string);
    function get_ServerVariables: DDN.System.DNNameValueCollection;
    function get_TimedOutToken: DDN.mscorlib.DNCancellationToken;
    function get_TlsTokenBindingInfo: DNITlsTokenBindingInfo;
    function get_TotalBytes: Int32;
    function get_Unvalidated: DNUnvalidatedRequestValuesBase;
    function get_Url: DDN.System.DNUri;
    function get_UrlReferrer: DDN.System.DNUri;
    function get_UserAgent: string;
    function get_UserLanguages: TArray<string>;
    function get_UserHostAddress: string;
    function get_UserHostName: string;
    function get_Item(key: string): string;

  { methods } 

    procedure &Abort;
    function BinaryRead(count: Int32): TArray<Byte>;
    function GetBufferedInputStream: DDN.mscorlib.DNStream;
    function GetBufferlessInputStream: DDN.mscorlib.DNStream; overload;
    function GetBufferlessInputStream(disableMaxRequestLength: Boolean): DDN.mscorlib.DNStream; overload;
    procedure InsertEntityBody; overload;
    procedure InsertEntityBody(buffer: TArray<Byte>; offset: Int32; count: Int32); overload;
    function MapImageCoordinates(imageFieldName: string): TArray<Int32>;
    function MapRawImageCoordinates(imageFieldName: string): TArray<Double>;
    function MapPath(virtualPath: string): string; overload;
    function MapPath(virtualPath: string; baseVirtualDir: string; allowCrossAppMapping: Boolean): string; overload;
    procedure ValidateInput;
    procedure SaveAs(filename: string; includeHeaders: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Browser: DNHttpBrowserCapabilitiesBase read get_Browser;
    property Params: DDN.System.DNNameValueCollection read get_Params;
    property Path: string read get_Path;
    property FilePath: string read get_FilePath;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property AcceptTypes: TArray<string> read get_AcceptTypes;
    property ApplicationPath: string read get_ApplicationPath;
    property AnonymousID: string read get_AnonymousID;
    property AppRelativeCurrentExecutionFilePath: string read get_AppRelativeCurrentExecutionFilePath;
    property HttpChannelBinding: DDN.System.DNChannelBinding read get_HttpChannelBinding;
    property ClientCertificate: DNHttpClientCertificate read get_ClientCertificate;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property ContentLength: Int32 read get_ContentLength;
    property ContentType: string read get_ContentType write set_ContentType;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property CurrentExecutionFilePath: string read get_CurrentExecutionFilePath;
    property CurrentExecutionFilePathExtension: string read get_CurrentExecutionFilePathExtension;
    property Files: DNHttpFileCollectionBase read get_Files;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property Form: DDN.System.DNNameValueCollection read get_Form;
    property HttpMethod: string read get_HttpMethod;
    property InputStream: DDN.mscorlib.DNStream read get_InputStream;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property IsLocal: Boolean read get_IsLocal;
    property IsSecureConnection: Boolean read get_IsSecureConnection;
    property LogonUserIdentity: DDN.mscorlib.DNWindowsIdentity read get_LogonUserIdentity;
    property PathInfo: string read get_PathInfo;
    property PhysicalApplicationPath: string read get_PhysicalApplicationPath;
    property PhysicalPath: string read get_PhysicalPath;
    property RawUrl: string read get_RawUrl;
    property ReadEntityBodyMode: DNReadEntityBodyMode read get_ReadEntityBodyMode;
    property RequestContext: DNRequestContext read get_RequestContext write set_RequestContext;
    property RequestType: string read get_RequestType write set_RequestType;
    property ServerVariables: DDN.System.DNNameValueCollection read get_ServerVariables;
    property TimedOutToken: DDN.mscorlib.DNCancellationToken read get_TimedOutToken;
    property TlsTokenBindingInfo: DNITlsTokenBindingInfo read get_TlsTokenBindingInfo;
    property TotalBytes: Int32 read get_TotalBytes;
    property Unvalidated: DNUnvalidatedRequestValuesBase read get_Unvalidated;
    property Url: DDN.System.DNUri read get_Url;
    property UrlReferrer: DDN.System.DNUri read get_UrlReferrer;
    property UserAgent: string read get_UserAgent;
    property UserLanguages: TArray<string> read get_UserLanguages;
    property UserHostAddress: string read get_UserHostAddress;
    property UserHostName: string read get_UserHostName;
    property Item[key: string]: string read get_Item; default;
  end;

  TDNHttpRequestWrapper = class(TDNGenericImport<DNHttpRequestWrapperClass, DNHttpRequestWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpResponseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D3FF2532-A653-58EF-A2B2-844D996AF83C}']
  { constructors } 

    {class} function init(writer: DDN.mscorlib.DNTextWriter): DNHttpResponse;

  { static methods } 

    {class} procedure RemoveOutputCacheItem(path: string); overload;
    {class} procedure RemoveOutputCacheItem(path: string; providerName: string); overload;

  end;

  [DNTypeName('System.Web.HttpResponse')]
  DNHttpResponse = interface(DDN.mscorlib.DNObject)
  ['{B1BD5F85-6345-3DB9-AB88-0E84CFC174BA}']
  { getters & setters } 

    function get_HeadersWritten: Boolean;
    function get_SupportsAsyncFlush: Boolean;
    function get_Cookies: DNHttpCookieCollection;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_SubStatusCode: Int32;
    procedure set_SubStatusCode(value: Int32);
    function get_StatusDescription: string;
    procedure set_StatusDescription(value: string);
    function get_TrySkipIisCustomErrors: Boolean;
    procedure set_TrySkipIisCustomErrors(value: Boolean);
    function get_SuppressFormsAuthenticationRedirect: Boolean;
    procedure set_SuppressFormsAuthenticationRedirect(value: Boolean);
    function get_SuppressDefaultCacheControlHeader: Boolean;
    procedure set_SuppressDefaultCacheControlHeader(value: Boolean);
    function get_BufferOutput: Boolean;
    procedure set_BufferOutput(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Charset: string;
    procedure set_Charset(value: string);
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_HeaderEncoding: DDN.mscorlib.DNEncoding;
    procedure set_HeaderEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Cache: DNHttpCachePolicy;
    function get_IsClientConnected: Boolean;
    function get_ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken;
    function get_IsRequestBeingRedirected: Boolean;
    function get_RedirectLocation: string;
    procedure set_RedirectLocation(value: string);
    function get_Output: DDN.mscorlib.DNTextWriter;
    procedure set_Output(value: DDN.mscorlib.DNTextWriter);
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_SuppressContent: Boolean;
    procedure set_SuppressContent(value: Boolean);
    function get_Status: string;
    procedure set_Status(value: string);
    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_Expires: Int32;
    procedure set_Expires(value: Int32);
    function get_ExpiresAbsolute: DDN.mscorlib.DNDateTime;
    procedure set_ExpiresAbsolute(value: DDN.mscorlib.DNDateTime);
    function get_CacheControl: string;
    procedure set_CacheControl(value: string);

  { methods } 

    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure DisableKernelCache;
    procedure DisableUserCache;
    procedure Close;
    procedure BinaryWrite(buffer: TArray<Byte>);
    procedure AppendHeader(name: string; value: string);
    procedure ClearContent;
    procedure Clear;
    procedure Flush;
    function AddOnSendingHeaders(callback: DDN.mscorlib.DNAction<DNHttpContext>): DNISubscriptionToken;
    procedure AppendToLog(param: string);
    procedure Redirect(url: string); overload;
    procedure Redirect(url: string; endResponse: Boolean); overload;
    procedure RedirectToRoute(routeName: string); overload;
    procedure RedirectToRoute(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeName: string); overload;
    procedure RedirectToRoutePermanent(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RedirectPermanent(url: string); overload;
    procedure RedirectPermanent(url: string; endResponse: Boolean); overload;
    procedure Write(s: string); overload;
    procedure Write(obj: DDN.mscorlib.DNObject); overload;
    procedure Write(ch: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure WriteSubstitution(callback: DNHttpResponseSubstitutionCallback);
    procedure WriteFile(filename: string); overload;
    procedure TransmitFile(filename: string); overload;
    procedure TransmitFile(filename: string; offset: Int64; length: Int64); overload;
    procedure WriteFile(filename: string; offset: Int64; size: Int64); overload;
    procedure AddHeader(name: string; value: string);
    procedure &End;
    function FlushAsync: DDN.mscorlib.DNTask;
    procedure AddFileDependency(filename: string);
    procedure AddFileDependencies(filenames: DDN.mscorlib.DNArrayList); overload;
    procedure AddFileDependencies(filenames: TArray<string>); overload;
    procedure AddCacheItemDependency(cacheKey: string);
    procedure AddCacheItemDependencies(cacheKeys: DDN.mscorlib.DNArrayList); overload;
    procedure AddCacheItemDependencies(cacheKeys: TArray<string>); overload;
    procedure AddCacheDependency(dependencies: TArray<DNCacheDependency>);
    procedure Pics(value: string);
    procedure AppendCookie(cookie: DNHttpCookie);
    procedure SetCookie(cookie: DNHttpCookie);
    procedure RedirectToRoute(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure WriteFile(filename: string; readIntoMemory: Boolean); overload;
    procedure WriteFile(fileHandle: IntPtr; offset: Int64; size: Int64); overload;
    procedure PushPromise(path: string); overload;
    procedure PushPromise(path: string; method: string; headers: DDN.System.DNNameValueCollection); overload;
    procedure ClearHeaders;
    function ApplyAppPathModifier(virtualPath: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HeadersWritten: Boolean read get_HeadersWritten;
    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    property SubStatusCode: Int32 read get_SubStatusCode write set_SubStatusCode;
    property StatusDescription: string read get_StatusDescription write set_StatusDescription;
    property TrySkipIisCustomErrors: Boolean read get_TrySkipIisCustomErrors write set_TrySkipIisCustomErrors;
    property SuppressFormsAuthenticationRedirect: Boolean read get_SuppressFormsAuthenticationRedirect write set_SuppressFormsAuthenticationRedirect;
    property SuppressDefaultCacheControlHeader: Boolean read get_SuppressDefaultCacheControlHeader write set_SuppressDefaultCacheControlHeader;
    property BufferOutput: Boolean read get_BufferOutput write set_BufferOutput;
    property ContentType: string read get_ContentType write set_ContentType;
    property Charset: string read get_Charset write set_Charset;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property HeaderEncoding: DDN.mscorlib.DNEncoding read get_HeaderEncoding write set_HeaderEncoding;
    property Cache: DNHttpCachePolicy read get_Cache;
    property IsClientConnected: Boolean read get_IsClientConnected;
    property ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken read get_ClientDisconnectedToken;
    property IsRequestBeingRedirected: Boolean read get_IsRequestBeingRedirected;
    property RedirectLocation: string read get_RedirectLocation write set_RedirectLocation;
    property Output: DDN.mscorlib.DNTextWriter read get_Output write set_Output;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property SuppressContent: Boolean read get_SuppressContent write set_SuppressContent;
    property Status: string read get_Status write set_Status;
    property Buffer: Boolean read get_Buffer write set_Buffer;
    property Expires: Int32 read get_Expires write set_Expires;
    property ExpiresAbsolute: DDN.mscorlib.DNDateTime read get_ExpiresAbsolute write set_ExpiresAbsolute;
    property CacheControl: string read get_CacheControl write set_CacheControl;
  end;

  TDNHttpResponse = class(TDNGenericImport<DNHttpResponseClass, DNHttpResponse>) end;

  //-------------namespace: System.Web----------------
  DNHttpResponseBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E015DBE8-1605-5A94-A1E8-2AD93A7A6B0D}']
  end;

  [DNTypeName('System.Web.HttpResponseBase')]
  DNHttpResponseBase = interface(DDN.mscorlib.DNObject)
  ['{B843F574-D874-3B70-B091-03181E3E4FC0}']
  { getters & setters } 

    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_BufferOutput: Boolean;
    procedure set_BufferOutput(value: Boolean);
    function get_Cache: DNHttpCachePolicyBase;
    function get_CacheControl: string;
    procedure set_CacheControl(value: string);
    function get_Charset: string;
    procedure set_Charset(value: string);
    function get_ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Cookies: DNHttpCookieCollection;
    function get_Expires: Int32;
    procedure set_Expires(value: Int32);
    function get_ExpiresAbsolute: DDN.mscorlib.DNDateTime;
    procedure set_ExpiresAbsolute(value: DDN.mscorlib.DNDateTime);
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_HeadersWritten: Boolean;
    function get_HeaderEncoding: DDN.mscorlib.DNEncoding;
    procedure set_HeaderEncoding(value: DDN.mscorlib.DNEncoding);
    function get_IsClientConnected: Boolean;
    function get_IsRequestBeingRedirected: Boolean;
    function get_Output: DDN.mscorlib.DNTextWriter;
    procedure set_Output(value: DDN.mscorlib.DNTextWriter);
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_RedirectLocation: string;
    procedure set_RedirectLocation(value: string);
    function get_Status: string;
    procedure set_Status(value: string);
    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_StatusDescription: string;
    procedure set_StatusDescription(value: string);
    function get_SubStatusCode: Int32;
    procedure set_SubStatusCode(value: Int32);
    function get_SupportsAsyncFlush: Boolean;
    function get_SuppressContent: Boolean;
    procedure set_SuppressContent(value: Boolean);
    function get_SuppressDefaultCacheControlHeader: Boolean;
    procedure set_SuppressDefaultCacheControlHeader(value: Boolean);
    function get_SuppressFormsAuthenticationRedirect: Boolean;
    procedure set_SuppressFormsAuthenticationRedirect(value: Boolean);
    function get_TrySkipIisCustomErrors: Boolean;
    procedure set_TrySkipIisCustomErrors(value: Boolean);

  { methods } 

    procedure AddCacheItemDependency(cacheKey: string);
    procedure AddCacheItemDependencies(cacheKeys: DDN.mscorlib.DNArrayList); overload;
    procedure AddCacheItemDependencies(cacheKeys: TArray<string>); overload;
    procedure AddCacheDependency(dependencies: TArray<DNCacheDependency>);
    procedure AddFileDependency(filename: string);
    procedure AddFileDependencies(filenames: DDN.mscorlib.DNArrayList); overload;
    procedure AddFileDependencies(filenames: TArray<string>); overload;
    procedure AddHeader(name: string; value: string);
    function AddOnSendingHeaders(callback: DDN.mscorlib.DNAction<DNHttpContextBase>): DNISubscriptionToken;
    procedure AppendCookie(cookie: DNHttpCookie);
    procedure AppendHeader(name: string; value: string);
    procedure AppendToLog(param: string);
    function ApplyAppPathModifier(virtualPath: string): string;
    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure BinaryWrite(buffer: TArray<Byte>);
    procedure Clear;
    procedure ClearContent;
    procedure ClearHeaders;
    procedure Close;
    procedure DisableKernelCache;
    procedure DisableUserCache;
    procedure &End;
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    function FlushAsync: DDN.mscorlib.DNTask;
    procedure Pics(value: string);
    procedure Redirect(url: string); overload;
    procedure Redirect(url: string; endResponse: Boolean); overload;
    procedure RedirectToRoute(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoute(routeName: string); overload;
    procedure RedirectToRoute(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeName: string); overload;
    procedure RedirectToRoutePermanent(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RedirectPermanent(url: string); overload;
    procedure RedirectPermanent(url: string; endResponse: Boolean); overload;
    procedure RemoveOutputCacheItem(path: string); overload;
    procedure RemoveOutputCacheItem(path: string; providerName: string); overload;
    procedure SetCookie(cookie: DNHttpCookie);
    procedure TransmitFile(filename: string); overload;
    procedure TransmitFile(filename: string; offset: Int64; length: Int64); overload;
    procedure Write(ch: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(obj: DDN.mscorlib.DNObject); overload;
    procedure Write(s: string); overload;
    procedure WriteFile(filename: string); overload;
    procedure WriteFile(filename: string; readIntoMemory: Boolean); overload;
    procedure WriteFile(filename: string; offset: Int64; size: Int64); overload;
    procedure WriteFile(fileHandle: IntPtr; offset: Int64; size: Int64); overload;
    procedure WriteSubstitution(callback: DNHttpResponseSubstitutionCallback);
    procedure PushPromise(path: string); overload;
    procedure PushPromise(path: string; method: string; headers: DDN.System.DNNameValueCollection); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Buffer: Boolean read get_Buffer write set_Buffer;
    property BufferOutput: Boolean read get_BufferOutput write set_BufferOutput;
    property Cache: DNHttpCachePolicyBase read get_Cache;
    property CacheControl: string read get_CacheControl write set_CacheControl;
    property Charset: string read get_Charset write set_Charset;
    property ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken read get_ClientDisconnectedToken;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property ContentType: string read get_ContentType write set_ContentType;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Expires: Int32 read get_Expires write set_Expires;
    property ExpiresAbsolute: DDN.mscorlib.DNDateTime read get_ExpiresAbsolute write set_ExpiresAbsolute;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property HeadersWritten: Boolean read get_HeadersWritten;
    property HeaderEncoding: DDN.mscorlib.DNEncoding read get_HeaderEncoding write set_HeaderEncoding;
    property IsClientConnected: Boolean read get_IsClientConnected;
    property IsRequestBeingRedirected: Boolean read get_IsRequestBeingRedirected;
    property Output: DDN.mscorlib.DNTextWriter read get_Output write set_Output;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    property RedirectLocation: string read get_RedirectLocation write set_RedirectLocation;
    property Status: string read get_Status write set_Status;
    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    property StatusDescription: string read get_StatusDescription write set_StatusDescription;
    property SubStatusCode: Int32 read get_SubStatusCode write set_SubStatusCode;
    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    property SuppressContent: Boolean read get_SuppressContent write set_SuppressContent;
    property SuppressDefaultCacheControlHeader: Boolean read get_SuppressDefaultCacheControlHeader write set_SuppressDefaultCacheControlHeader;
    property SuppressFormsAuthenticationRedirect: Boolean read get_SuppressFormsAuthenticationRedirect write set_SuppressFormsAuthenticationRedirect;
    property TrySkipIisCustomErrors: Boolean read get_TrySkipIisCustomErrors write set_TrySkipIisCustomErrors;
  end;

  TDNHttpResponseBase = class(TDNGenericImport<DNHttpResponseBaseClass, DNHttpResponseBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpResponseWrapperClass = interface(DNHttpResponseBaseClass)
  ['{35D1D5E4-05FA-5D1D-BF73-F6BD97F5E212}']
  { constructors } 

    {class} function init(httpResponse: DNHttpResponse): DNHttpResponseWrapper;

  end;

  [DNTypeName('System.Web.HttpResponseWrapper')]
  DNHttpResponseWrapper = interface(DNHttpResponseBase)
  ['{264F5221-9429-31F9-92B4-0E1D002093C7}']
  { getters & setters } 

    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_BufferOutput: Boolean;
    procedure set_BufferOutput(value: Boolean);
    function get_Cache: DNHttpCachePolicyBase;
    function get_CacheControl: string;
    procedure set_CacheControl(value: string);
    function get_Charset: string;
    procedure set_Charset(value: string);
    function get_ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken;
    function get_ContentEncoding: DDN.mscorlib.DNEncoding;
    procedure set_ContentEncoding(value: DDN.mscorlib.DNEncoding);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_Cookies: DNHttpCookieCollection;
    function get_Expires: Int32;
    procedure set_Expires(value: Int32);
    function get_ExpiresAbsolute: DDN.mscorlib.DNDateTime;
    procedure set_ExpiresAbsolute(value: DDN.mscorlib.DNDateTime);
    function get_Filter: DDN.mscorlib.DNStream;
    procedure set_Filter(value: DDN.mscorlib.DNStream);
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_HeadersWritten: Boolean;
    function get_HeaderEncoding: DDN.mscorlib.DNEncoding;
    procedure set_HeaderEncoding(value: DDN.mscorlib.DNEncoding);
    function get_IsClientConnected: Boolean;
    function get_IsRequestBeingRedirected: Boolean;
    function get_Output: DDN.mscorlib.DNTextWriter;
    procedure set_Output(value: DDN.mscorlib.DNTextWriter);
    function get_OutputStream: DDN.mscorlib.DNStream;
    function get_RedirectLocation: string;
    procedure set_RedirectLocation(value: string);
    function get_Status: string;
    procedure set_Status(value: string);
    function get_StatusCode: Int32;
    procedure set_StatusCode(value: Int32);
    function get_StatusDescription: string;
    procedure set_StatusDescription(value: string);
    function get_SubStatusCode: Int32;
    procedure set_SubStatusCode(value: Int32);
    function get_SupportsAsyncFlush: Boolean;
    function get_SuppressContent: Boolean;
    procedure set_SuppressContent(value: Boolean);
    function get_SuppressDefaultCacheControlHeader: Boolean;
    procedure set_SuppressDefaultCacheControlHeader(value: Boolean);
    function get_SuppressFormsAuthenticationRedirect: Boolean;
    procedure set_SuppressFormsAuthenticationRedirect(value: Boolean);
    function get_TrySkipIisCustomErrors: Boolean;
    procedure set_TrySkipIisCustomErrors(value: Boolean);

  { methods } 

    procedure AddCacheDependency(dependencies: TArray<DNCacheDependency>);
    function AddOnSendingHeaders(callback: DDN.mscorlib.DNAction<DNHttpContextBase>): DNISubscriptionToken;
    procedure AddHeader(name: string; value: string);
    procedure AppendCookie(cookie: DNHttpCookie);
    procedure AppendHeader(name: string; value: string);
    procedure AppendToLog(param: string);
    function ApplyAppPathModifier(virtualPath: string): string;
    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure BinaryWrite(buffer: TArray<Byte>);
    procedure Clear;
    procedure ClearContent;
    procedure ClearHeaders;
    procedure Close;
    procedure DisableKernelCache;
    procedure DisableUserCache;
    procedure &End;
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    procedure Flush;
    function FlushAsync: DDN.mscorlib.DNTask;
    procedure Redirect(url: string); overload;
    procedure Redirect(url: string; endResponse: Boolean); overload;
    procedure RedirectPermanent(url: string); overload;
    procedure RedirectPermanent(url: string; endResponse: Boolean); overload;
    procedure RedirectToRoute(routeName: string); overload;
    procedure RedirectToRoute(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeName: string); overload;
    procedure RedirectToRoutePermanent(routeValues: DNRouteValueDictionary); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DNRouteValueDictionary); overload;
    procedure RemoveOutputCacheItem(path: string); overload;
    procedure RemoveOutputCacheItem(path: string; providerName: string); overload;
    procedure SetCookie(cookie: DNHttpCookie);
    procedure TransmitFile(filename: string); overload;
    procedure TransmitFile(filename: string; offset: Int64; length: Int64); overload;
    procedure Write(s: string); overload;
    procedure Write(ch: Char); overload;
    procedure Write(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    procedure Write(obj: DDN.mscorlib.DNObject); overload;
    procedure WriteFile(filename: string); overload;
    procedure WriteFile(filename: string; readIntoMemory: Boolean); overload;
    procedure WriteFile(filename: string; offset: Int64; size: Int64); overload;
    procedure WriteFile(fileHandle: IntPtr; offset: Int64; size: Int64); overload;
    procedure WriteSubstitution(callback: DNHttpResponseSubstitutionCallback);
    procedure PushPromise(path: string; method: string; headers: DDN.System.DNNameValueCollection); overload;
    procedure AddCacheItemDependency(cacheKey: string);
    procedure AddCacheItemDependencies(cacheKeys: DDN.mscorlib.DNArrayList); overload;
    procedure AddCacheItemDependencies(cacheKeys: TArray<string>); overload;
    procedure AddFileDependency(filename: string);
    procedure AddFileDependencies(filenames: DDN.mscorlib.DNArrayList); overload;
    procedure AddFileDependencies(filenames: TArray<string>); overload;
    procedure Pics(value: string);
    procedure RedirectToRoute(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoute(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeValues: DDN.mscorlib.DNObject); overload;
    procedure RedirectToRoutePermanent(routeName: string; routeValues: DDN.mscorlib.DNObject); overload;
    procedure PushPromise(path: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Buffer: Boolean read get_Buffer write set_Buffer;
    property BufferOutput: Boolean read get_BufferOutput write set_BufferOutput;
    property Cache: DNHttpCachePolicyBase read get_Cache;
    property CacheControl: string read get_CacheControl write set_CacheControl;
    property Charset: string read get_Charset write set_Charset;
    property ClientDisconnectedToken: DDN.mscorlib.DNCancellationToken read get_ClientDisconnectedToken;
    property ContentEncoding: DDN.mscorlib.DNEncoding read get_ContentEncoding write set_ContentEncoding;
    property ContentType: string read get_ContentType write set_ContentType;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Expires: Int32 read get_Expires write set_Expires;
    property ExpiresAbsolute: DDN.mscorlib.DNDateTime read get_ExpiresAbsolute write set_ExpiresAbsolute;
    property Filter: DDN.mscorlib.DNStream read get_Filter write set_Filter;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property HeadersWritten: Boolean read get_HeadersWritten;
    property HeaderEncoding: DDN.mscorlib.DNEncoding read get_HeaderEncoding write set_HeaderEncoding;
    property IsClientConnected: Boolean read get_IsClientConnected;
    property IsRequestBeingRedirected: Boolean read get_IsRequestBeingRedirected;
    property Output: DDN.mscorlib.DNTextWriter read get_Output write set_Output;
    property OutputStream: DDN.mscorlib.DNStream read get_OutputStream;
    property RedirectLocation: string read get_RedirectLocation write set_RedirectLocation;
    property Status: string read get_Status write set_Status;
    property StatusCode: Int32 read get_StatusCode write set_StatusCode;
    property StatusDescription: string read get_StatusDescription write set_StatusDescription;
    property SubStatusCode: Int32 read get_SubStatusCode write set_SubStatusCode;
    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    property SuppressContent: Boolean read get_SuppressContent write set_SuppressContent;
    property SuppressDefaultCacheControlHeader: Boolean read get_SuppressDefaultCacheControlHeader write set_SuppressDefaultCacheControlHeader;
    property SuppressFormsAuthenticationRedirect: Boolean read get_SuppressFormsAuthenticationRedirect write set_SuppressFormsAuthenticationRedirect;
    property TrySkipIisCustomErrors: Boolean read get_TrySkipIisCustomErrors write set_TrySkipIisCustomErrors;
  end;

  TDNHttpResponseWrapper = class(TDNGenericImport<DNHttpResponseWrapperClass, DNHttpResponseWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpRuntimeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{946B286C-1679-5A0A-9F03-801662ABF1E5}']
  { static getter & setter } 

    {class} function get_IISVersion: DDN.mscorlib.DNVersion;
    {class} function get_UsingIntegratedPipeline: Boolean;
    {class} function get_Cache: DNCache;
    {class} function get_AspInstallDirectory: string;
    {class} function get_AspClientScriptVirtualPath: string;
    {class} function get_AspClientScriptPhysicalPath: string;
    {class} function get_ClrInstallDirectory: string;
    {class} function get_MachineConfigurationDirectory: string;
    {class} function get_CodegenDir: string;
    {class} function get_AppDomainAppId: string;
    {class} function get_AppDomainAppPath: string;
    {class} function get_AppDomainAppVirtualPath: string;
    {class} function get_AppDomainId: string;
    {class} function get_BinDirectory: string;
    {class} function get_IsOnUNCShare: Boolean;
    {class} function get_TargetFramework: DDN.mscorlib.DNVersion;
    {class} function get_WebObjectActivator: DDN.mscorlib.DNIServiceProvider;
    {class} procedure set_WebObjectActivator(value: DDN.mscorlib.DNIServiceProvider);

  { constructors } 

    {class} function init: DNHttpRuntime;

  { static methods } 

    {class} function GetNamedPermissionSet: DDN.mscorlib.DNNamedPermissionSet;
    {class} procedure ProcessRequest(wr: DNHttpWorkerRequest);
    {class} procedure Close;
    {class} procedure UnloadAppDomain;

  { static propertys } 

    {class} property IISVersion: DDN.mscorlib.DNVersion read get_IISVersion;
    {class} property UsingIntegratedPipeline: Boolean read get_UsingIntegratedPipeline;
    {class} property Cache: DNCache read get_Cache;
    {class} property AspInstallDirectory: string read get_AspInstallDirectory;
    {class} property AspClientScriptVirtualPath: string read get_AspClientScriptVirtualPath;
    {class} property AspClientScriptPhysicalPath: string read get_AspClientScriptPhysicalPath;
    {class} property ClrInstallDirectory: string read get_ClrInstallDirectory;
    {class} property MachineConfigurationDirectory: string read get_MachineConfigurationDirectory;
    {class} property CodegenDir: string read get_CodegenDir;
    {class} property AppDomainAppId: string read get_AppDomainAppId;
    {class} property AppDomainAppPath: string read get_AppDomainAppPath;
    {class} property AppDomainAppVirtualPath: string read get_AppDomainAppVirtualPath;
    {class} property AppDomainId: string read get_AppDomainId;
    {class} property BinDirectory: string read get_BinDirectory;
    {class} property IsOnUNCShare: Boolean read get_IsOnUNCShare;
    {class} property TargetFramework: DDN.mscorlib.DNVersion read get_TargetFramework;
    {class} property WebObjectActivator: DDN.mscorlib.DNIServiceProvider read get_WebObjectActivator write set_WebObjectActivator;
  end;

  [DNTypeName('System.Web.HttpRuntime')]
  DNHttpRuntime = interface(DDN.mscorlib.DNObject)
  ['{D00BB95B-C03D-3FF0-9015-B6EA206948AC}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpRuntime = class(TDNGenericImport<DNHttpRuntimeClass, DNHttpRuntime>) end;

  //-------------namespace: System.Web----------------
  DNHttpServerUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76FDBD58-746E-5679-BD8C-D95FDCC46378}']
  { static methods } 

    {class} function UrlTokenEncode(input: TArray<Byte>): string;
    {class} function UrlTokenDecode(input: string): TArray<Byte>;

  end;

  [DNTypeName('System.Web.HttpServerUtility')]
  DNHttpServerUtility = interface(DDN.mscorlib.DNObject)
  ['{E41314DD-A814-3A66-9B33-8EA49646DC4D}']
  { getters & setters } 

    function get_MachineName: string;
    function get_ScriptTimeout: Int32;
    procedure set_ScriptTimeout(value: Int32);

  { methods } 

    function CreateObject(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function MapPath(path: string): string;
    function GetLastError: DDN.mscorlib.DNException;
    procedure ClearError;
    procedure Execute(path: string); overload;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Execute(path: string; preserveForm: Boolean); overload;
    procedure Execute(handler: DNIHttpHandler; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    procedure Transfer(path: string; preserveForm: Boolean); overload;
    procedure Transfer(path: string); overload;
    procedure Transfer(handler: DNIHttpHandler; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection); overload;
    function HtmlDecode(s: string): string; overload;
    procedure HtmlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function HtmlEncode(s: string): string; overload;
    procedure HtmlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlEncode(s: string): string; overload;
    function UrlPathEncode(s: string): string;
    procedure UrlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlDecode(s: string): string; overload;
    procedure UrlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function CreateObject(progID: string): DDN.mscorlib.DNObject; overload;
    function CreateObjectFromClsid(clsid: string): DDN.mscorlib.DNObject;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection; preserveUser: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineName: string read get_MachineName;
    property ScriptTimeout: Int32 read get_ScriptTimeout write set_ScriptTimeout;
  end;

  TDNHttpServerUtility = class(TDNGenericImport<DNHttpServerUtilityClass, DNHttpServerUtility>) end;

  //-------------namespace: System.Web----------------
  DNHttpServerUtilityBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8B7F13AD-3989-541B-B484-364828ACF0F1}']
  end;

  [DNTypeName('System.Web.HttpServerUtilityBase')]
  DNHttpServerUtilityBase = interface(DDN.mscorlib.DNObject)
  ['{16C38EB8-FA85-37FB-AD91-B5D2A668B5EF}']
  { getters & setters } 

    function get_MachineName: string;
    function get_ScriptTimeout: Int32;
    procedure set_ScriptTimeout(value: Int32);

  { methods } 

    procedure ClearError;
    function CreateObject(progID: string): DDN.mscorlib.DNObject; overload;
    function CreateObject(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateObjectFromClsid(clsid: string): DDN.mscorlib.DNObject;
    procedure Execute(path: string); overload;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Execute(path: string; preserveForm: Boolean); overload;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    procedure Execute(handler: DNIHttpHandler; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    function GetLastError: DDN.mscorlib.DNException;
    function HtmlDecode(s: string): string; overload;
    procedure HtmlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function HtmlEncode(s: string): string; overload;
    procedure HtmlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function MapPath(path: string): string;
    procedure Transfer(path: string; preserveForm: Boolean); overload;
    procedure Transfer(path: string); overload;
    procedure Transfer(handler: DNIHttpHandler; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection; preserveUser: Boolean); overload;
    function UrlDecode(s: string): string; overload;
    procedure UrlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlEncode(s: string): string; overload;
    procedure UrlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlPathEncode(s: string): string;
    function UrlTokenDecode(input: string): TArray<Byte>;
    function UrlTokenEncode(input: TArray<Byte>): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineName: string read get_MachineName;
    property ScriptTimeout: Int32 read get_ScriptTimeout write set_ScriptTimeout;
  end;

  TDNHttpServerUtilityBase = class(TDNGenericImport<DNHttpServerUtilityBaseClass, DNHttpServerUtilityBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpServerUtilityWrapperClass = interface(DNHttpServerUtilityBaseClass)
  ['{68D70583-0B59-595E-964B-3E1A2AAC250E}']
  { constructors } 

    {class} function init(httpServerUtility: DNHttpServerUtility): DNHttpServerUtilityWrapper;

  end;

  [DNTypeName('System.Web.HttpServerUtilityWrapper')]
  DNHttpServerUtilityWrapper = interface(DNHttpServerUtilityBase)
  ['{C837950B-7982-3E17-87AE-66EBAA57AF46}']
  { getters & setters } 

    function get_MachineName: string;
    function get_ScriptTimeout: Int32;
    procedure set_ScriptTimeout(value: Int32);

  { methods } 

    function GetLastError: DDN.mscorlib.DNException;
    procedure ClearError;
    function CreateObject(progID: string): DDN.mscorlib.DNObject; overload;
    function CreateObject(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function CreateObjectFromClsid(clsid: string): DDN.mscorlib.DNObject;
    procedure Execute(path: string); overload;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter); overload;
    procedure Execute(path: string; preserveForm: Boolean); overload;
    procedure Execute(path: string; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    procedure Execute(handler: DNIHttpHandler; writer: DDN.mscorlib.DNTextWriter; preserveForm: Boolean); overload;
    function HtmlDecode(s: string): string; overload;
    procedure HtmlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function HtmlEncode(s: string): string; overload;
    procedure HtmlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function MapPath(path: string): string;
    procedure Transfer(path: string; preserveForm: Boolean); overload;
    procedure Transfer(path: string); overload;
    procedure Transfer(handler: DNIHttpHandler; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection); overload;
    procedure TransferRequest(path: string; preserveForm: Boolean; method: string; headers: DDN.System.DNNameValueCollection; preserveUser: Boolean); overload;
    function UrlDecode(s: string): string; overload;
    procedure UrlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlEncode(s: string): string; overload;
    procedure UrlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    function UrlPathEncode(s: string): string;
    function UrlTokenDecode(input: string): TArray<Byte>;
    function UrlTokenEncode(input: TArray<Byte>): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineName: string read get_MachineName;
    property ScriptTimeout: Int32 read get_ScriptTimeout write set_ScriptTimeout;
  end;

  TDNHttpServerUtilityWrapper = class(TDNGenericImport<DNHttpServerUtilityWrapperClass, DNHttpServerUtilityWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpSessionStateBaseClass = interface(DNObjectClass)
  ['{5C6F3A04-A8A6-5F33-9CA7-6F48DAAA7BC2}']
  end;

  [DNTypeName('System.Web.HttpSessionStateBase')]
  DNHttpSessionStateBase = interface(DDN.mscorlib.DNICollection)
  ['{9854096B-861F-311D-AD15-8BE7921BCF46}']
  { getters & setters } 

    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_Contents: DNHttpSessionStateBase;
    function get_CookieMode: DNHttpCookieMode;
    function get_IsCookieless: Boolean;
    function get_IsNewSession: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Mode: DNSessionStateMode;
    function get_SessionID: string;
    function get_StaticObjects: DNHttpStaticObjectsCollectionBase;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Abandon;
    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Clear;
    procedure Remove(name: string);
    procedure RemoveAll;
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodePage: Int32 read get_CodePage write set_CodePage;
    property Contents: DNHttpSessionStateBase read get_Contents;
    property CookieMode: DNHttpCookieMode read get_CookieMode;
    property IsCookieless: Boolean read get_IsCookieless;
    property IsNewSession: Boolean read get_IsNewSession;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property LCID: Int32 read get_LCID write set_LCID;
    property Mode: DNSessionStateMode read get_Mode;
    property SessionID: string read get_SessionID;
    property StaticObjects: DNHttpStaticObjectsCollectionBase read get_StaticObjects;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNHttpSessionStateBase = class(TDNGenericImport<DNHttpSessionStateBaseClass, DNHttpSessionStateBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpSessionStateWrapperClass = interface(DNHttpSessionStateBaseClass)
  ['{51E870DB-6643-5E73-B447-DD77225B3205}']
  { constructors } 

    {class} function init(httpSessionState: DNHttpSessionState): DNHttpSessionStateWrapper;

  end;

  [DNTypeName('System.Web.HttpSessionStateWrapper')]
  DNHttpSessionStateWrapper = interface(DNHttpSessionStateBase)
  ['{8F229746-9FDC-3C96-9A8A-FF8E3695DF1E}']
  { getters & setters } 

    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_Contents: DNHttpSessionStateBase;
    function get_CookieMode: DNHttpCookieMode;
    function get_IsCookieless: Boolean;
    function get_IsNewSession: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_Mode: DNSessionStateMode;
    function get_SessionID: string;
    function get_StaticObjects: DNHttpStaticObjectsCollectionBase;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Abandon;
    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Clear;
    procedure Remove(name: string);
    procedure RemoveAll;
    procedure RemoveAt(index: Int32);
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CodePage: Int32 read get_CodePage write set_CodePage;
    property Contents: DNHttpSessionStateBase read get_Contents;
    property CookieMode: DNHttpCookieMode read get_CookieMode;
    property IsCookieless: Boolean read get_IsCookieless;
    property IsNewSession: Boolean read get_IsNewSession;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property LCID: Int32 read get_LCID write set_LCID;
    property Mode: DNSessionStateMode read get_Mode;
    property SessionID: string read get_SessionID;
    property StaticObjects: DNHttpStaticObjectsCollectionBase read get_StaticObjects;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNHttpSessionStateWrapper = class(TDNGenericImport<DNHttpSessionStateWrapperClass, DNHttpSessionStateWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpStaticObjectsCollectionClass = interface(DNObjectClass)
  ['{921CE55E-1EBF-5CAD-9A74-1650312D5CF6}']
  { constructors } 

    {class} function init: DNHttpStaticObjectsCollection;

  { static methods } 

    {class} function Deserialize(reader: DDN.mscorlib.DNBinaryReader): DNHttpStaticObjectsCollection;

  end;

  [DNTypeName('System.Web.HttpStaticObjectsCollection')]
  DNHttpStaticObjectsCollection = interface(DDN.mscorlib.DNICollection)
  ['{8A844177-93C5-3CC2-A47D-D79A6BE7C597}']
  { getters & setters } 

    function get_NeverAccessed: Boolean;
    function get_Item(name: string): DDN.mscorlib.DNObject;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function GetObject(name: string): DDN.mscorlib.DNObject;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Serialize(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NeverAccessed: Boolean read get_NeverAccessed;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNHttpStaticObjectsCollection = class(TDNGenericImport<DNHttpStaticObjectsCollectionClass, DNHttpStaticObjectsCollection>) end;

  //-------------namespace: System.Web----------------
  DNHttpStaticObjectsCollectionBaseClass = interface(DNObjectClass)
  ['{E73A0BC7-8E66-58DE-A44E-53147AF8C2BE}']
  end;

  [DNTypeName('System.Web.HttpStaticObjectsCollectionBase')]
  DNHttpStaticObjectsCollectionBase = interface(DDN.mscorlib.DNICollection)
  ['{70995AB9-345A-3021-9F39-BF33B2106391}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Item(name: string): DDN.mscorlib.DNObject;
    function get_NeverAccessed: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetObject(name: string): DDN.mscorlib.DNObject;
    procedure Serialize(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property NeverAccessed: Boolean read get_NeverAccessed;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNHttpStaticObjectsCollectionBase = class(TDNGenericImport<DNHttpStaticObjectsCollectionBaseClass, DNHttpStaticObjectsCollectionBase>) end;

  //-------------namespace: System.Web----------------
  DNHttpStaticObjectsCollectionWrapperClass = interface(DNHttpStaticObjectsCollectionBaseClass)
  ['{E111EE44-50C6-5BE0-B4F5-FD676975440A}']
  { constructors } 

    {class} function init(httpStaticObjectsCollection: DNHttpStaticObjectsCollection): DNHttpStaticObjectsCollectionWrapper;

  end;

  [DNTypeName('System.Web.HttpStaticObjectsCollectionWrapper')]
  DNHttpStaticObjectsCollectionWrapper = interface(DNHttpStaticObjectsCollectionBase)
  ['{BAD911A2-83AF-34DC-8D64-73A3F2726635}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Item(name: string): DDN.mscorlib.DNObject;
    function get_NeverAccessed: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetObject(name: string): DDN.mscorlib.DNObject;
    procedure Serialize(writer: DDN.mscorlib.DNBinaryWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property NeverAccessed: Boolean read get_NeverAccessed;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNHttpStaticObjectsCollectionWrapper = class(TDNGenericImport<DNHttpStaticObjectsCollectionWrapperClass, DNHttpStaticObjectsCollectionWrapper>) end;

  //-------------namespace: System.Web----------------
  DNHttpTaskAsyncHandlerClass = interface(DNObjectClass)
  ['{55E9D760-87EA-5ECB-9432-EC9E5B4C5715}']
  end;

  [DNTypeName('System.Web.HttpTaskAsyncHandler')]
  DNHttpTaskAsyncHandler = interface(DNIHttpAsyncHandler)
  ['{1FE56D4C-3768-3201-9A74-37AC918062D9}']
  { getters & setters } 

    function get_IsReusable: Boolean;

  { methods } 

    procedure ProcessRequest(context: DNHttpContext);
    function ProcessRequestAsync(context: DNHttpContext): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsReusable: Boolean read get_IsReusable;
  end;

  TDNHttpTaskAsyncHandler = class(TDNGenericImport<DNHttpTaskAsyncHandlerClass, DNHttpTaskAsyncHandler>) end;

  //-------------namespace: System.Web----------------
  DNHttpUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E27E9077-7B84-5BA8-9BDE-9603EA895093}']
  { constructors } 

    {class} function init: DNHttpUtility;

  { static methods } 

    {class} function HtmlDecode(s: string): string; overload;
    {class} procedure HtmlDecode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    {class} function HtmlEncode(s: string): string; overload;
    {class} function HtmlEncode(value: DDN.mscorlib.DNObject): string; overload;
    {class} procedure HtmlEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    {class} function HtmlAttributeEncode(s: string): string; overload;
    {class} procedure HtmlAttributeEncode(s: string; output: DDN.mscorlib.DNTextWriter); overload;
    {class} function ParseQueryString(query: string): DDN.System.DNNameValueCollection; overload;
    {class} function UrlEncode(str: string): string; overload;
    {class} function UrlPathEncode(str: string): string;
    {class} function UrlEncode(str: string; e: DDN.mscorlib.DNEncoding): string; overload;
    {class} function UrlEncodeToBytes(str: string): TArray<Byte>; overload;
    {class} function UrlEncodeToBytes(str: string; e: DDN.mscorlib.DNEncoding): TArray<Byte>; overload;
    {class} function UrlEncodeUnicode(str: string): string;
    {class} function UrlEncodeUnicodeToBytes(str: string): TArray<Byte>;
    {class} function UrlDecode(str: string): string; overload;
    {class} function UrlDecode(str: string; e: DDN.mscorlib.DNEncoding): string; overload;
    {class} function UrlDecode(bytes: TArray<Byte>; e: DDN.mscorlib.DNEncoding): string; overload;
    {class} function UrlDecode(bytes: TArray<Byte>; offset: Int32; count: Int32; e: DDN.mscorlib.DNEncoding): string; overload;
    {class} function UrlDecodeToBytes(str: string): TArray<Byte>; overload;
    {class} function UrlDecodeToBytes(str: string; e: DDN.mscorlib.DNEncoding): TArray<Byte>; overload;
    {class} function UrlDecodeToBytes(bytes: TArray<Byte>): TArray<Byte>; overload;
    {class} function UrlDecodeToBytes(bytes: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    {class} function JavaScriptStringEncode(value: string): string; overload;
    {class} function ParseQueryString(query: string; encoding: DDN.mscorlib.DNEncoding): DDN.System.DNNameValueCollection; overload;
    {class} function UrlEncode(bytes: TArray<Byte>): string; overload;
    {class} function UrlEncode(bytes: TArray<Byte>; offset: Int32; count: Int32): string; overload;
    {class} function UrlEncodeToBytes(bytes: TArray<Byte>): TArray<Byte>; overload;
    {class} function UrlEncodeToBytes(bytes: TArray<Byte>; offset: Int32; count: Int32): TArray<Byte>; overload;
    {class} function JavaScriptStringEncode(value: string; addDoubleQuotes: Boolean): string; overload;

  end;

  [DNTypeName('System.Web.HttpUtility')]
  DNHttpUtility = interface(DDN.mscorlib.DNObject)
  ['{894A0190-4617-3896-8422-2823E11CDBD3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpUtility = class(TDNGenericImport<DNHttpUtilityClass, DNHttpUtility>) end;

  //-------------namespace: System.Web----------------
  DNHttpWorkerRequestClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7E645496-03B6-5202-8C3A-26CE876520A7}']
  { static methods } 

    {class} function GetStatusDescription(code: Int32): string;
    {class} function GetKnownRequestHeaderIndex(header: string): Int32;
    {class} function GetKnownRequestHeaderName(index: Int32): string;
    {class} function GetKnownResponseHeaderIndex(header: string): Int32;
    {class} function GetKnownResponseHeaderName(index: Int32): string;

  end;

  [DNTypeName('System.Web.HttpWorkerRequest')]
  DNHttpWorkerRequest = interface(DDN.mscorlib.DNObject)
  ['{C562DF2B-A96B-3F48-A1C5-DB8CD9018AB1}']
  { getters & setters } 

    function get_SupportsAsyncFlush: Boolean;
    function get_SupportsAsyncRead: Boolean;
    function get_MachineConfigPath: string;
    function get_RootWebConfigPath: string;
    function get_MachineInstallDirectory: string;
    function get_RequestTraceIdentifier: DDN.mscorlib.DNGuid;

  { methods } 

    function IsSecure: Boolean;
    function GetKnownRequestHeader(index: Int32): string;
    function GetHttpVerbName: string;
    function GetProtocol: string;
    function HasEntityBody: Boolean;
    function GetQueryStringRawBytes: TArray<Byte>;
    function GetRemoteName: string;
    function GetServerName: string;
    function GetConnectionID: Int64;
    function GetUrlContextID: Int64;
    function GetAppPoolID: string;
    function GetRequestReason: Int32;
    function GetUserToken: IntPtr;
    function GetVirtualPathToken: IntPtr;
    function GetFilePath: string;
    function GetFilePathTranslated: string;
    function GetPathInfo: string;
    function GetAppPath: string;
    function GetAppPathTranslated: string;
    function GetPreloadedEntityBodyLength: Int32;
    function GetPreloadedEntityBody(buffer: TArray<Byte>; offset: Int32): Int32; overload;
    function GetPreloadedEntityBody: TArray<Byte>; overload;
    function IsEntireEntityBodyIsPreloaded: Boolean;
    function GetTotalEntityBodyLength: Int32;
    function ReadEntityBody(buffer: TArray<Byte>; size: Int32): Int32; overload;
    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function GetUnknownRequestHeader(name: string): string;
    function GetUnknownRequestHeaders: TArray<TArray<string>>;
    function GetServerVariable(name: string): string;
    function GetBytesRead: Int64;
    function MapPath(virtualPath: string): string;
    procedure SetEndOfSendNotification(callback: DNHttpWorkerRequest_EndOfSendNotification; extraData: DDN.mscorlib.DNObject);
    procedure SendCalculatedContentLength(contentLength: Int32); overload;
    procedure SendCalculatedContentLength(contentLength: Int64); overload;
    function HeadersSent: Boolean;
    function IsClientConnected: Boolean;
    procedure CloseConnection;
    function GetClientCertificateValidFrom: DDN.mscorlib.DNDateTime;
    function GetClientCertificateValidUntil: DDN.mscorlib.DNDateTime;
    function GetClientCertificateEncoding: Int32;
    function GetUriPath: string;
    function GetQueryString: string;
    function GetRawUrl: string;
    function GetHttpVersion: string;
    function GetRemoteAddress: string;
    function GetRemotePort: Int32;
    function GetLocalAddress: string;
    function GetLocalPort: Int32;
    function ReadEntityBody(buffer: TArray<Byte>; offset: Int32; size: Int32): Int32; overload;
    procedure SendStatus(statusCode: Int32; statusDescription: string);
    procedure SendKnownResponseHeader(index: Int32; value: string);
    procedure SendUnknownResponseHeader(name: string; value: string);
    procedure SendResponseFromMemory(data: TArray<Byte>; length: Int32); overload;
    procedure SendResponseFromMemory(data: IntPtr; length: Int32); overload;
    procedure SendResponseFromFile(filename: string; offset: Int64; length: Int64); overload;
    procedure SendResponseFromFile(handle: IntPtr; offset: Int64; length: Int64); overload;
    procedure FlushResponse(finalFlush: Boolean);
    procedure EndOfRequest;
    function GetClientCertificate: TArray<Byte>;
    function GetClientCertificateBinaryIssuer: TArray<Byte>;
    function GetClientCertificatePublicKey: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    property SupportsAsyncRead: Boolean read get_SupportsAsyncRead;
    property MachineConfigPath: string read get_MachineConfigPath;
    property RootWebConfigPath: string read get_RootWebConfigPath;
    property MachineInstallDirectory: string read get_MachineInstallDirectory;
    property RequestTraceIdentifier: DDN.mscorlib.DNGuid read get_RequestTraceIdentifier;
  end;

  TDNHttpWorkerRequest = class(TDNGenericImport<DNHttpWorkerRequestClass, DNHttpWorkerRequest>)
  public const
   HeaderCacheControl = 0;
   HeaderConnection = 1;
   HeaderDate = 2;
   HeaderKeepAlive = 3;
   HeaderPragma = 4;
   HeaderTrailer = 5;
   HeaderTransferEncoding = 6;
   HeaderUpgrade = 7;
   HeaderVia = 8;
   HeaderWarning = 9;
   HeaderAllow = 10;
   HeaderContentLength = 11;
   HeaderContentType = 12;
   HeaderContentEncoding = 13;
   HeaderContentLanguage = 14;
   HeaderContentLocation = 15;
   HeaderContentMd5 = 16;
   HeaderContentRange = 17;
   HeaderExpires = 18;
   HeaderLastModified = 19;
   HeaderAccept = 20;
   HeaderAcceptCharset = 21;
   HeaderAcceptEncoding = 22;
   HeaderAcceptLanguage = 23;
   HeaderAuthorization = 24;
   HeaderCookie = 25;
   HeaderExpect = 26;
   HeaderFrom = 27;
   HeaderHost = 28;
   HeaderIfMatch = 29;
   HeaderIfModifiedSince = 30;
   HeaderIfNoneMatch = 31;
   HeaderIfRange = 32;
   HeaderIfUnmodifiedSince = 33;
   HeaderMaxForwards = 34;
   HeaderProxyAuthorization = 35;
   HeaderReferer = 36;
   HeaderRange = 37;
   HeaderTe = 38;
   HeaderUserAgent = 39;
   RequestHeaderMaximum = 40;
   HeaderAcceptRanges = 20;
   HeaderAge = 21;
   HeaderEtag = 22;
   HeaderLocation = 23;
   HeaderProxyAuthenticate = 24;
   HeaderRetryAfter = 25;
   HeaderServer = 26;
   HeaderSetCookie = 27;
   HeaderVary = 28;
   HeaderWwwAuthenticate = 29;
   ResponseHeaderMaximum = 30;
   ReasonResponseCacheMiss = 0;
   ReasonFileHandleCacheMiss = 1;
   ReasonCachePolicy = 2;
   ReasonCacheSecurity = 3;
   ReasonClientDisconnect = 4;
   ReasonDefault = 0;
  end;

  //-------------namespace: System.Web.Hosting----------------
  DNSimpleWorkerRequestClass = interface(DNHttpWorkerRequestClass)
  ['{7D2C71F4-3838-5369-8106-28CD98FC799A}']
  { constructors } 

    {class} function init(page: string; query: string; output: DDN.mscorlib.DNTextWriter): DNSimpleWorkerRequest; overload;
    {class} function init(appVirtualDir: string; appPhysicalDir: string; page: string; query: string; output: DDN.mscorlib.DNTextWriter): DNSimpleWorkerRequest; overload;

  end;

  [DNTypeName('System.Web.Hosting.SimpleWorkerRequest')]
  DNSimpleWorkerRequest = interface(DNHttpWorkerRequest)
  ['{79E13B7B-3A4E-3FCD-9B24-E0BF25FA3F82}']
  { getters & setters } 

    function get_MachineConfigPath: string;
    function get_RootWebConfigPath: string;
    function get_MachineInstallDirectory: string;
    function get_SupportsAsyncFlush: Boolean;
    function get_SupportsAsyncRead: Boolean;
    function get_RequestTraceIdentifier: DDN.mscorlib.DNGuid;

  { methods } 

    function GetRawUrl: string;
    function GetUriPath: string;
    function GetQueryString: string;
    function GetRemotePort: Int32;
    function GetLocalPort: Int32;
    function GetUserToken: IntPtr;
    function GetFilePath: string;
    function GetFilePathTranslated: string;
    function GetPathInfo: string;
    function GetAppPath: string;
    function GetAppPathTranslated: string;
    function GetServerVariable(name: string): string;
    procedure SendStatus(statusCode: Int32; statusDescription: string);
    procedure SendKnownResponseHeader(index: Int32; value: string);
    procedure SendUnknownResponseHeader(name: string; value: string);
    procedure SendResponseFromMemory(data: TArray<Byte>; length: Int32); overload;
    procedure SendResponseFromFile(filename: string; offset: Int64; length: Int64); overload;
    procedure SendResponseFromFile(handle: IntPtr; offset: Int64; length: Int64); overload;
    procedure FlushResponse(finalFlush: Boolean);
    procedure EndOfRequest;
    function GetHttpVerbName: string;
    function GetHttpVersion: string;
    function GetRemoteAddress: string;
    function GetLocalAddress: string;
    function MapPath(path: string): string;
    function IsSecure: Boolean;
    function GetKnownRequestHeader(index: Int32): string;
    function GetProtocol: string;
    function HasEntityBody: Boolean;
    function GetQueryStringRawBytes: TArray<Byte>;
    function GetRemoteName: string;
    function GetServerName: string;
    function GetConnectionID: Int64;
    function GetUrlContextID: Int64;
    function GetAppPoolID: string;
    function GetRequestReason: Int32;
    function GetVirtualPathToken: IntPtr;
    function GetPreloadedEntityBodyLength: Int32;
    function GetPreloadedEntityBody(buffer: TArray<Byte>; offset: Int32): Int32; overload;
    function GetPreloadedEntityBody: TArray<Byte>; overload;
    function IsEntireEntityBodyIsPreloaded: Boolean;
    function GetTotalEntityBodyLength: Int32;
    function ReadEntityBody(buffer: TArray<Byte>; size: Int32): Int32; overload;
    function BeginFlush(callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    procedure EndFlush(asyncResult: DDN.mscorlib.DNIAsyncResult);
    function BeginRead(buffer: TArray<Byte>; offset: Int32; count: Int32; callback: DDN.mscorlib.DNAsyncCallback; state: DDN.mscorlib.DNObject): DDN.mscorlib.DNIAsyncResult;
    function EndRead(asyncResult: DDN.mscorlib.DNIAsyncResult): Int32;
    function GetUnknownRequestHeader(name: string): string;
    function GetUnknownRequestHeaders: TArray<TArray<string>>;
    function GetBytesRead: Int64;
    procedure SetEndOfSendNotification(callback: DNHttpWorkerRequest_EndOfSendNotification; extraData: DDN.mscorlib.DNObject);
    procedure SendCalculatedContentLength(contentLength: Int32); overload;
    procedure SendCalculatedContentLength(contentLength: Int64); overload;
    function HeadersSent: Boolean;
    function IsClientConnected: Boolean;
    procedure CloseConnection;
    function GetClientCertificateValidFrom: DDN.mscorlib.DNDateTime;
    function GetClientCertificateValidUntil: DDN.mscorlib.DNDateTime;
    function GetClientCertificateEncoding: Int32;
    function ReadEntityBody(buffer: TArray<Byte>; offset: Int32; size: Int32): Int32; overload;
    procedure SendResponseFromMemory(data: IntPtr; length: Int32); overload;
    function GetClientCertificate: TArray<Byte>;
    function GetClientCertificateBinaryIssuer: TArray<Byte>;
    function GetClientCertificatePublicKey: TArray<Byte>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MachineConfigPath: string read get_MachineConfigPath;
    property RootWebConfigPath: string read get_RootWebConfigPath;
    property MachineInstallDirectory: string read get_MachineInstallDirectory;
    property SupportsAsyncFlush: Boolean read get_SupportsAsyncFlush;
    property SupportsAsyncRead: Boolean read get_SupportsAsyncRead;
    property RequestTraceIdentifier: DDN.mscorlib.DNGuid read get_RequestTraceIdentifier;
  end;

  TDNSimpleWorkerRequest = class(TDNGenericImport<DNSimpleWorkerRequestClass, DNSimpleWorkerRequest>) end;

  //-------------namespace: System.Web.Instrumentation----------------
  DNPageExecutionContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F9131AB-F11C-5891-8199-8D6D6550FDA6}']
  { constructors } 

    {class} function init: DNPageExecutionContext;

  end;

  [DNTypeName('System.Web.Instrumentation.PageExecutionContext')]
  DNPageExecutionContext = interface(DDN.mscorlib.DNObject)
  ['{07D5A6D6-CD74-3207-9B02-DFF6256CD687}']
  { getters & setters } 

    function get_IsLiteral: Boolean;
    procedure set_IsLiteral(value: Boolean);
    function get_Length: Int32;
    procedure set_Length(value: Int32);
    function get_StartPosition: Int32;
    procedure set_StartPosition(value: Int32);
    function get_TextWriter: DDN.mscorlib.DNTextWriter;
    procedure set_TextWriter(value: DDN.mscorlib.DNTextWriter);
    function get_VirtualPath: string;
    procedure set_VirtualPath(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsLiteral: Boolean read get_IsLiteral write set_IsLiteral;
    property Length: Int32 read get_Length write set_Length;
    property StartPosition: Int32 read get_StartPosition write set_StartPosition;
    property TextWriter: DDN.mscorlib.DNTextWriter read get_TextWriter write set_TextWriter;
    property VirtualPath: string read get_VirtualPath write set_VirtualPath;
  end;

  TDNPageExecutionContext = class(TDNGenericImport<DNPageExecutionContextClass, DNPageExecutionContext>) end;

  //-------------namespace: System.Web.Instrumentation----------------
  DNPageExecutionListenerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60697120-EBE4-5AE2-AF21-11D29234AF00}']
  end;

  [DNTypeName('System.Web.Instrumentation.PageExecutionListener')]
  DNPageExecutionListener = interface(DDN.mscorlib.DNObject)
  ['{C92E8D5B-9369-3235-A6B1-EF8360B91C9A}']
  { methods } 

    procedure BeginContext(context: DNPageExecutionContext);
    procedure EndContext(context: DNPageExecutionContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageExecutionListener = class(TDNGenericImport<DNPageExecutionListenerClass, DNPageExecutionListener>) end;

  //-------------namespace: System.Web.Instrumentation----------------
  DNPageInstrumentationServiceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9C337E50-74F1-529F-805C-3806C4A93C67}']
  { static getter & setter } 

    {class} function get_IsEnabled: Boolean;
    {class} procedure set_IsEnabled(value: Boolean);

  { constructors } 

    {class} function init: DNPageInstrumentationService;

  { static propertys } 

    {class} property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
  end;

  [DNTypeName('System.Web.Instrumentation.PageInstrumentationService')]
  DNPageInstrumentationService = interface(DDN.mscorlib.DNObject)
  ['{85627561-58FF-3338-85D6-24F124ADBC22}']
  { getters & setters } 

    function get_ExecutionListeners: DDN.mscorlib.DNIList<DNPageExecutionListener>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ExecutionListeners: DDN.mscorlib.DNIList<DNPageExecutionListener> read get_ExecutionListeners;
  end;

  TDNPageInstrumentationService = class(TDNGenericImport<DNPageInstrumentationServiceClass, DNPageInstrumentationService>) end;

  //-------------namespace: System.Web.Mail----------------
  DNMailAttachmentClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B0975CEC-BCBC-5739-81AC-933CA769BEC0}']
  { constructors } 

    {class} function init(filename: string): DNMailAttachment; overload;
    {class} function init(filename: string; encoding: DNMailEncoding): DNMailAttachment; overload;

  end;

  [DNTypeName('System.Web.Mail.MailAttachment')]
  DNMailAttachment = interface(DDN.mscorlib.DNObject)
  ['{7AB836F4-6370-3156-811C-0C44DCEC6A90}']
  { getters & setters } 

    function get_Filename: string;
    function get_Encoding: DNMailEncoding;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Filename: string read get_Filename;
    property Encoding: DNMailEncoding read get_Encoding;
  end;

  TDNMailAttachment = class(TDNGenericImport<DNMailAttachmentClass, DNMailAttachment>) end;

  //-------------namespace: System.Web.Mail----------------
  DNMailMessageClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2B1AC77-DF8A-509B-AD25-0783C9018785}']
  { constructors } 

    {class} function init: DNMailMessage;

  end;

  [DNTypeName('System.Web.Mail.MailMessage')]
  DNMailMessage = interface(DDN.mscorlib.DNObject)
  ['{D90228A8-DF9B-3199-A389-C43BCF7CD241}']
  { getters & setters } 

    function get_From: string;
    procedure set_From(value: string);
    function get_To: string;
    procedure set_To(value: string);
    function get_Cc: string;
    procedure set_Cc(value: string);
    function get_Bcc: string;
    procedure set_Bcc(value: string);
    function get_Subject: string;
    procedure set_Subject(value: string);
    function get_Priority: DNMailPriority;
    procedure set_Priority(value: DNMailPriority);
    function get_UrlContentBase: string;
    procedure set_UrlContentBase(value: string);
    function get_UrlContentLocation: string;
    procedure set_UrlContentLocation(value: string);
    function get_Body: string;
    procedure set_Body(value: string);
    function get_BodyFormat: DNMailFormat;
    procedure set_BodyFormat(value: DNMailFormat);
    function get_BodyEncoding: DDN.mscorlib.DNEncoding;
    procedure set_BodyEncoding(value: DDN.mscorlib.DNEncoding);
    function get_Headers: DDN.mscorlib.DNIDictionary;
    function get_Fields: DDN.mscorlib.DNIDictionary;
    function get_Attachments: DDN.mscorlib.DNIList;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property From: string read get_From write set_From;
    property &To: string read get_To write set_To;
    property Cc: string read get_Cc write set_Cc;
    property Bcc: string read get_Bcc write set_Bcc;
    property Subject: string read get_Subject write set_Subject;
    property Priority: DNMailPriority read get_Priority write set_Priority;
    property UrlContentBase: string read get_UrlContentBase write set_UrlContentBase;
    property UrlContentLocation: string read get_UrlContentLocation write set_UrlContentLocation;
    property Body: string read get_Body write set_Body;
    property BodyFormat: DNMailFormat read get_BodyFormat write set_BodyFormat;
    property BodyEncoding: DDN.mscorlib.DNEncoding read get_BodyEncoding write set_BodyEncoding;
    property Headers: DDN.mscorlib.DNIDictionary read get_Headers;
    property Fields: DDN.mscorlib.DNIDictionary read get_Fields;
    property Attachments: DDN.mscorlib.DNIList read get_Attachments;
  end;

  TDNMailMessage = class(TDNGenericImport<DNMailMessageClass, DNMailMessage>) end;

  //-------------namespace: System.Web.Mail----------------
  DNSmtpMailClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AC9B4FA1-81FD-50E1-8473-1BEBC646DBB3}']
  { static getter & setter } 

    {class} function get_SmtpServer: string;
    {class} procedure set_SmtpServer(value: string);

  { static methods } 

    {class} procedure Send(from: string; &to: string; subject: string; messageText: string); overload;
    {class} procedure Send(message: DNMailMessage); overload;

  { static propertys } 

    {class} property SmtpServer: string read get_SmtpServer write set_SmtpServer;
  end;

  [DNTypeName('System.Web.Mail.SmtpMail')]
  DNSmtpMail = interface(DDN.mscorlib.DNObject)
  ['{86A1DC4A-2218-3AB4-B2F7-2B1EF90F76F5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSmtpMail = class(TDNGenericImport<DNSmtpMailClass, DNSmtpMail>) end;

  //-------------namespace: System.Web.Management----------------
  DNMailEventNotificationInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C6B6E961-DB41-59DF-8EF4-C283BE42A601}']
  end;

  [DNTypeName('System.Web.Management.MailEventNotificationInfo')]
  DNMailEventNotificationInfo = interface(DDN.mscorlib.DNObject)
  ['{60AC93B6-C661-371E-8C36-3CF5F96BDEAF}']
  { getters & setters } 

    function get_Events: DNWebBaseEventCollection;
    function get_NotificationType: DNEventNotificationType;
    function get_EventsInNotification: Int32;
    function get_EventsRemaining: Int32;
    function get_MessagesInNotification: Int32;
    function get_EventsInBuffer: Int32;
    function get_EventsDiscardedByBuffer: Int32;
    function get_EventsDiscardedDueToMessageLimit: Int32;
    function get_NotificationSequence: Int32;
    function get_MessageSequence: Int32;
    function get_LastNotificationUtc: DDN.mscorlib.DNDateTime;
    function get_Message: DDN.System.DNMailMessage;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Events: DNWebBaseEventCollection read get_Events;
    property NotificationType: DNEventNotificationType read get_NotificationType;
    property EventsInNotification: Int32 read get_EventsInNotification;
    property EventsRemaining: Int32 read get_EventsRemaining;
    property MessagesInNotification: Int32 read get_MessagesInNotification;
    property EventsInBuffer: Int32 read get_EventsInBuffer;
    property EventsDiscardedByBuffer: Int32 read get_EventsDiscardedByBuffer;
    property EventsDiscardedDueToMessageLimit: Int32 read get_EventsDiscardedDueToMessageLimit;
    property NotificationSequence: Int32 read get_NotificationSequence;
    property MessageSequence: Int32 read get_MessageSequence;
    property LastNotificationUtc: DDN.mscorlib.DNDateTime read get_LastNotificationUtc;
    property Message: DDN.System.DNMailMessage read get_Message;
  end;

  TDNMailEventNotificationInfo = class(TDNGenericImport<DNMailEventNotificationInfoClass, DNMailEventNotificationInfo>) end;

  //-------------namespace: System.Web.Management----------------
  DNRegiisUtilityClass = interface(DNObjectClass)
  ['{CBBDB78D-2186-5922-B3E3-0F5ECE997AB2}']
  { constructors } 

    {class} function init: DNRegiisUtility;

  end;

  [DNTypeName('System.Web.Management.RegiisUtility')]
  DNRegiisUtility = interface(DNIRegiisUtility)
  ['{9443689F-FF55-3B00-A22D-5E85ABF3E36C}']
  { methods } 

    procedure RemoveBrowserCaps(out exception: IntPtr);
    procedure RegisterSystemWebAssembly(doReg: Int32; out exception: IntPtr);
    procedure RegisterAsnetMmcAssembly(doReg: Int32; typeName: string; binaryDirectory: string; out exception: IntPtr);
    procedure ProtectedConfigAction(options: Int64; firstArgument: string; secondArgument: string; providerName: string; appPath: string; site: string; cspOrLocation: string; keySize: Int32; out exception: IntPtr);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRegiisUtility = class(TDNGenericImport<DNRegiisUtilityClass, DNRegiisUtility>) end;

  //-------------namespace: System.Web.Management----------------
  DNRuleFiringRecordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C83D710F-60E7-52A8-96DC-C90D20D17D89}']
  end;

  [DNTypeName('System.Web.Management.RuleFiringRecord')]
  DNRuleFiringRecord = interface(DDN.mscorlib.DNObject)
  ['{6C8A8F0A-EE4C-3EDC-9956-32961D387A38}']
  { getters & setters } 

    function get_LastFired: DDN.mscorlib.DNDateTime;
    function get_TimesRaised: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LastFired: DDN.mscorlib.DNDateTime read get_LastFired;
    property TimesRaised: Int32 read get_TimesRaised;
  end;

  TDNRuleFiringRecord = class(TDNGenericImport<DNRuleFiringRecordClass, DNRuleFiringRecord>) end;

  //-------------namespace: System.Web.Management----------------
  DNSqlServicesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8AD1416B-CB65-5874-9615-BB32B2EA4732}']
  { static methods } 

    {class} procedure Install(server: string; user: string; password: string; database: string; features: DNSqlFeatures); overload;
    {class} procedure Install(server: string; database: string; features: DNSqlFeatures); overload;
    {class} procedure Install(database: string; features: DNSqlFeatures; connectionString: string); overload;
    {class} procedure Uninstall(server: string; user: string; password: string; database: string; features: DNSqlFeatures); overload;
    {class} procedure Uninstall(server: string; database: string; features: DNSqlFeatures); overload;
    {class} procedure Uninstall(database: string; features: DNSqlFeatures; connectionString: string); overload;
    {class} procedure InstallSessionState(server: string; user: string; password: string; customDatabase: string; &type: DNSessionStateType); overload;
    {class} procedure InstallSessionState(server: string; customDatabase: string; &type: DNSessionStateType); overload;
    {class} procedure InstallSessionState(customDatabase: string; &type: DNSessionStateType; connectionString: string); overload;
    {class} procedure UninstallSessionState(server: string; user: string; password: string; customDatabase: string; &type: DNSessionStateType); overload;
    {class} procedure UninstallSessionState(server: string; customDatabase: string; &type: DNSessionStateType); overload;
    {class} procedure UninstallSessionState(customDatabase: string; &type: DNSessionStateType; connectionString: string); overload;
    {class} function GenerateSessionStateScripts(install: Boolean; &type: DNSessionStateType; customDatabase: string): string;
    {class} function GenerateApplicationServicesScripts(install: Boolean; features: DNSqlFeatures; database: string): string;

  end;

  [DNTypeName('System.Web.Management.SqlServices')]
  DNSqlServices = interface(DDN.mscorlib.DNObject)
  ['{5F799EC8-87B8-383D-83C1-4DBB97E3E598}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSqlServices = class(TDNGenericImport<DNSqlServicesClass, DNSqlServices>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebApplicationInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7B73BE86-8AEA-548A-9813-D32C3C14D082}']
  end;

  [DNTypeName('System.Web.Management.WebApplicationInformation')]
  DNWebApplicationInformation = interface(DDN.mscorlib.DNObject)
  ['{89D465EB-6908-33F8-94B5-2BE39286EF0A}']
  { getters & setters } 

    function get_ApplicationDomain: string;
    function get_TrustLevel: string;
    function get_ApplicationVirtualPath: string;
    function get_ApplicationPath: string;
    function get_MachineName: string;

  { methods } 

    function ToString: string;
    procedure FormatToString(formatter: DNWebEventFormatter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ApplicationDomain: string read get_ApplicationDomain;
    property TrustLevel: string read get_TrustLevel;
    property ApplicationVirtualPath: string read get_ApplicationVirtualPath;
    property ApplicationPath: string read get_ApplicationPath;
    property MachineName: string read get_MachineName;
  end;

  TDNWebApplicationInformation = class(TDNGenericImport<DNWebApplicationInformationClass, DNWebApplicationInformation>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebBaseEventClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C0801F86-8CBA-56D0-BCDE-C209E2D67550}']
  { static getter & setter } 

    {class} function get_ApplicationInformation: DNWebApplicationInformation;

  { static methods } 

    {class} procedure &Raise(eventRaised: DNWebBaseEvent); overload;

  { static propertys } 

    {class} property ApplicationInformation: DNWebApplicationInformation read get_ApplicationInformation;
  end;

  [DNTypeName('System.Web.Management.WebBaseEvent')]
  DNWebBaseEvent = interface(DDN.mscorlib.DNObject)
  ['{FAFDB006-EADD-3D89-92EB-5E85B27DC7E0}']
  { getters & setters } 

    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise; overload;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebBaseEvent = class(TDNGenericImport<DNWebBaseEventClass, DNWebBaseEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebManagementEventClass = interface(DNWebBaseEventClass)
  ['{A2DD3F89-6010-591E-9BA8-F03EB03EDC18}']
  end;

  [DNTypeName('System.Web.Management.WebManagementEvent')]
  DNWebManagementEvent = interface(DNWebBaseEvent)
  ['{E9C4B686-FC42-3B6B-9B60-20F7B39A3F10}']
  { getters & setters } 

    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebManagementEvent = class(TDNGenericImport<DNWebManagementEventClass, DNWebManagementEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebApplicationLifetimeEventClass = interface(DNWebManagementEventClass)
  ['{5F03F835-583B-5E69-85A9-41F8310CCEB3}']
  end;

  [DNTypeName('System.Web.Management.WebApplicationLifetimeEvent')]
  DNWebApplicationLifetimeEvent = interface(DNWebManagementEvent)
  ['{D52BACDA-6679-35B9-879D-6C3AE6858C54}']
  { getters & setters } 

    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebApplicationLifetimeEvent = class(TDNGenericImport<DNWebApplicationLifetimeEventClass, DNWebApplicationLifetimeEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebAuditEventClass = interface(DNWebManagementEventClass)
  ['{DCA70B45-6E74-5EB6-837F-5C71CAFB11BC}']
  end;

  [DNTypeName('System.Web.Management.WebAuditEvent')]
  DNWebAuditEvent = interface(DNWebManagementEvent)
  ['{F27A09D1-33E9-3A80-B6FA-D5A124E8ACB8}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebAuditEvent = class(TDNGenericImport<DNWebAuditEventClass, DNWebAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebFailureAuditEventClass = interface(DNWebAuditEventClass)
  ['{30C68B6C-894B-59C9-A29B-62E6E0F5561C}']
  end;

  [DNTypeName('System.Web.Management.WebFailureAuditEvent')]
  DNWebFailureAuditEvent = interface(DNWebAuditEvent)
  ['{4323E831-86C1-3771-8D34-D90784C839C2}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebFailureAuditEvent = class(TDNGenericImport<DNWebFailureAuditEventClass, DNWebFailureAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebAuthenticationFailureAuditEventClass = interface(DNWebFailureAuditEventClass)
  ['{70C999E1-162F-5A6D-9D46-A06F5385B763}']
  end;

  [DNTypeName('System.Web.Management.WebAuthenticationFailureAuditEvent')]
  DNWebAuthenticationFailureAuditEvent = interface(DNWebFailureAuditEvent)
  ['{99B82609-ABF1-3997-B634-1B7BA6427B45}']
  { getters & setters } 

    function get_NameToAuthenticate: string;
    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NameToAuthenticate: string read get_NameToAuthenticate;
    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebAuthenticationFailureAuditEvent = class(TDNGenericImport<DNWebAuthenticationFailureAuditEventClass, DNWebAuthenticationFailureAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebViewStateFailureAuditEventClass = interface(DNWebFailureAuditEventClass)
  ['{8044ADBE-336C-5E05-8E23-9DFA11EE97B8}']
  end;

  [DNTypeName('System.Web.Management.WebViewStateFailureAuditEvent')]
  DNWebViewStateFailureAuditEvent = interface(DNWebFailureAuditEvent)
  ['{E4F291C9-CD7A-368E-82CB-290C73630114}']
  { getters & setters } 

    function get_ViewStateException: DNViewStateException;
    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ViewStateException: DNViewStateException read get_ViewStateException;
    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebViewStateFailureAuditEvent = class(TDNGenericImport<DNWebViewStateFailureAuditEventClass, DNWebViewStateFailureAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebSuccessAuditEventClass = interface(DNWebAuditEventClass)
  ['{AE28E9DF-C95C-5CF8-BF74-7B84D71E7976}']
  end;

  [DNTypeName('System.Web.Management.WebSuccessAuditEvent')]
  DNWebSuccessAuditEvent = interface(DNWebAuditEvent)
  ['{B0F3762B-95D1-3965-9548-93D9A26D7EF2}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebSuccessAuditEvent = class(TDNGenericImport<DNWebSuccessAuditEventClass, DNWebSuccessAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebAuthenticationSuccessAuditEventClass = interface(DNWebSuccessAuditEventClass)
  ['{F8F41983-76D9-597C-9BFF-880F4226B3D1}']
  end;

  [DNTypeName('System.Web.Management.WebAuthenticationSuccessAuditEvent')]
  DNWebAuthenticationSuccessAuditEvent = interface(DNWebSuccessAuditEvent)
  ['{F663A184-F432-36CA-A1CC-D5B86F5E72AE}']
  { getters & setters } 

    function get_NameToAuthenticate: string;
    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property NameToAuthenticate: string read get_NameToAuthenticate;
    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebAuthenticationSuccessAuditEvent = class(TDNGenericImport<DNWebAuthenticationSuccessAuditEventClass, DNWebAuthenticationSuccessAuditEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebBaseErrorEventClass = interface(DNWebManagementEventClass)
  ['{B18D7156-9930-5261-967D-044BB3A4F5A0}']
  end;

  [DNTypeName('System.Web.Management.WebBaseErrorEvent')]
  DNWebBaseErrorEvent = interface(DNWebManagementEvent)
  ['{93949AC8-2E8C-3D6B-A7A8-91F29BEB6083}']
  { getters & setters } 

    function get_ErrorException: DDN.mscorlib.DNException;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ErrorException: DDN.mscorlib.DNException read get_ErrorException;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebBaseErrorEvent = class(TDNGenericImport<DNWebBaseErrorEventClass, DNWebBaseErrorEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebErrorEventClass = interface(DNWebBaseErrorEventClass)
  ['{9F7275BE-4CF3-55E8-B7C1-98309928DE77}']
  end;

  [DNTypeName('System.Web.Management.WebErrorEvent')]
  DNWebErrorEvent = interface(DNWebBaseErrorEvent)
  ['{87EA8752-133F-387B-A766-69E0A61BF3CD}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ThreadInformation: DNWebThreadInformation;
    function get_ErrorException: DDN.mscorlib.DNException;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ThreadInformation: DNWebThreadInformation read get_ThreadInformation;
    property ErrorException: DDN.mscorlib.DNException read get_ErrorException;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebErrorEvent = class(TDNGenericImport<DNWebErrorEventClass, DNWebErrorEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebRequestErrorEventClass = interface(DNWebBaseErrorEventClass)
  ['{1C62B576-20ED-51EE-9B7D-2B140E0F653A}']
  end;

  [DNTypeName('System.Web.Management.WebRequestErrorEvent')]
  DNWebRequestErrorEvent = interface(DNWebBaseErrorEvent)
  ['{6ABC1E0B-1C4D-317D-8B86-B205A3679DE9}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ThreadInformation: DNWebThreadInformation;
    function get_ErrorException: DDN.mscorlib.DNException;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ThreadInformation: DNWebThreadInformation read get_ThreadInformation;
    property ErrorException: DDN.mscorlib.DNException read get_ErrorException;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebRequestErrorEvent = class(TDNGenericImport<DNWebRequestErrorEventClass, DNWebRequestErrorEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebHeartbeatEventClass = interface(DNWebManagementEventClass)
  ['{5D360778-ED7B-50F6-983F-60F9C7EA48CE}']
  end;

  [DNTypeName('System.Web.Management.WebHeartbeatEvent')]
  DNWebHeartbeatEvent = interface(DNWebManagementEvent)
  ['{EC635182-0562-393A-9F5C-AE60740D925B}']
  { getters & setters } 

    function get_ProcessStatistics: DNWebProcessStatistics;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ProcessStatistics: DNWebProcessStatistics read get_ProcessStatistics;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebHeartbeatEvent = class(TDNGenericImport<DNWebHeartbeatEventClass, DNWebHeartbeatEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebRequestEventClass = interface(DNWebManagementEventClass)
  ['{BFBB2BE1-48EB-5CCD-80A1-3558E10B43C8}']
  end;

  [DNTypeName('System.Web.Management.WebRequestEvent')]
  DNWebRequestEvent = interface(DNWebManagementEvent)
  ['{0E885D68-2CAA-3A28-B278-A9B0C355F984}']
  { getters & setters } 

    function get_RequestInformation: DNWebRequestInformation;
    function get_ProcessInformation: DNWebProcessInformation;
    function get_EventTime: DDN.mscorlib.DNDateTime;
    function get_EventTimeUtc: DDN.mscorlib.DNDateTime;
    function get_Message: string;
    function get_EventSource: DDN.mscorlib.DNObject;
    function get_EventSequence: Int64;
    function get_EventOccurrence: Int64;
    function get_EventCode: Int32;
    function get_EventDetailCode: Int32;
    function get_EventID: DDN.mscorlib.DNGuid;

  { methods } 

    function ToString: string; overload;
    procedure FormatCustomEventDetails(formatter: DNWebEventFormatter);
    procedure &Raise;
    function ToString(includeAppInfo: Boolean; includeCustomEventDetails: Boolean): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RequestInformation: DNWebRequestInformation read get_RequestInformation;
    property ProcessInformation: DNWebProcessInformation read get_ProcessInformation;
    property EventTime: DDN.mscorlib.DNDateTime read get_EventTime;
    property EventTimeUtc: DDN.mscorlib.DNDateTime read get_EventTimeUtc;
    property Message: string read get_Message;
    property EventSource: DDN.mscorlib.DNObject read get_EventSource;
    property EventSequence: Int64 read get_EventSequence;
    property EventOccurrence: Int64 read get_EventOccurrence;
    property EventCode: Int32 read get_EventCode;
    property EventDetailCode: Int32 read get_EventDetailCode;
    property EventID: DDN.mscorlib.DNGuid read get_EventID;
  end;

  TDNWebRequestEvent = class(TDNGenericImport<DNWebRequestEventClass, DNWebRequestEvent>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebEventBufferFlushInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{605CC077-153F-5780-A2A8-92F3C29F0194}']
  end;

  [DNTypeName('System.Web.Management.WebEventBufferFlushInfo')]
  DNWebEventBufferFlushInfo = interface(DDN.mscorlib.DNObject)
  ['{4E72AFFF-64CF-3F81-90A4-E8D4FAABA13F}']
  { getters & setters } 

    function get_Events: DNWebBaseEventCollection;
    function get_LastNotificationUtc: DDN.mscorlib.DNDateTime;
    function get_EventsDiscardedSinceLastNotification: Int32;
    function get_EventsInBuffer: Int32;
    function get_NotificationSequence: Int32;
    function get_NotificationType: DNEventNotificationType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Events: DNWebBaseEventCollection read get_Events;
    property LastNotificationUtc: DDN.mscorlib.DNDateTime read get_LastNotificationUtc;
    property EventsDiscardedSinceLastNotification: Int32 read get_EventsDiscardedSinceLastNotification;
    property EventsInBuffer: Int32 read get_EventsInBuffer;
    property NotificationSequence: Int32 read get_NotificationSequence;
    property NotificationType: DNEventNotificationType read get_NotificationType;
  end;

  TDNWebEventBufferFlushInfo = class(TDNGenericImport<DNWebEventBufferFlushInfoClass, DNWebEventBufferFlushInfo>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebEventCodesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B69F4CF9-CCA9-538F-860E-2BEEC9C8133D}']
  end;

  [DNTypeName('System.Web.Management.WebEventCodes')]
  DNWebEventCodes = interface(DDN.mscorlib.DNObject)
  ['{491FEA7E-41E7-3A82-B103-3970962BEA8E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebEventCodes = class(TDNGenericImport<DNWebEventCodesClass, DNWebEventCodes>)
  public const
   InvalidEventCode = -1;
   UndefinedEventCode = 0;
   UndefinedEventDetailCode = 0;
   ApplicationCodeBase = 1000;
   ApplicationStart = 1001;
   ApplicationShutdown = 1002;
   ApplicationCompilationStart = 1003;
   ApplicationCompilationEnd = 1004;
   ApplicationHeartbeat = 1005;
   RequestCodeBase = 2000;
   RequestTransactionComplete = 2001;
   RequestTransactionAbort = 2002;
   ErrorCodeBase = 3000;
   RuntimeErrorRequestAbort = 3001;
   RuntimeErrorViewStateFailure = 3002;
   RuntimeErrorValidationFailure = 3003;
   RuntimeErrorPostTooLarge = 3004;
   RuntimeErrorUnhandledException = 3005;
   WebErrorParserError = 3006;
   WebErrorCompilationError = 3007;
   WebErrorConfigurationError = 3008;
   WebErrorOtherError = 3009;
   WebErrorPropertyDeserializationError = 3010;
   WebErrorObjectStateFormatterDeserializationError = 3011;
   RuntimeErrorWebResourceFailure = 3012;
   AuditCodeBase = 4000;
   AuditFormsAuthenticationSuccess = 4001;
   AuditMembershipAuthenticationSuccess = 4002;
   AuditUrlAuthorizationSuccess = 4003;
   AuditFileAuthorizationSuccess = 4004;
   AuditFormsAuthenticationFailure = 4005;
   AuditMembershipAuthenticationFailure = 4006;
   AuditUrlAuthorizationFailure = 4007;
   AuditFileAuthorizationFailure = 4008;
   AuditInvalidViewStateFailure = 4009;
   AuditUnhandledSecurityException = 4010;
   AuditUnhandledAccessException = 4011;
   MiscCodeBase = 6000;
   WebEventProviderInformation = 6001;
   ApplicationDetailCodeBase = 50000;
   ApplicationShutdownUnknown = 50001;
   ApplicationShutdownHostingEnvironment = 50002;
   ApplicationShutdownChangeInGlobalAsax = 50003;
   ApplicationShutdownConfigurationChange = 50004;
   ApplicationShutdownUnloadAppDomainCalled = 50005;
   ApplicationShutdownChangeInSecurityPolicyFile = 50006;
   ApplicationShutdownBinDirChangeOrDirectoryRename = 50007;
   ApplicationShutdownBrowsersDirChangeOrDirectoryRename = 50008;
   ApplicationShutdownCodeDirChangeOrDirectoryRename = 50009;
   ApplicationShutdownResourcesDirChangeOrDirectoryRename = 50010;
   ApplicationShutdownIdleTimeout = 50011;
   ApplicationShutdownPhysicalApplicationPathChanged = 50012;
   ApplicationShutdownHttpRuntimeClose = 50013;
   ApplicationShutdownInitializationError = 50014;
   ApplicationShutdownMaxRecompilationsReached = 50015;
   StateServerConnectionError = 50016;
   ApplicationShutdownBuildManagerChange = 50017;
   AuditDetailCodeBase = 50200;
   InvalidTicketFailure = 50201;
   ExpiredTicketFailure = 50202;
   InvalidViewStateMac = 50203;
   InvalidViewState = 50204;
   WebEventDetailCodeBase = 50300;
   SqlProviderEventsDropped = 50301;
   WebExtendedBase = 100000;
  end;

  //-------------namespace: System.Web.Management----------------
  DNWebEventFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{88C65160-2C5E-5C3A-BAC6-8DA7056003BD}']
  end;

  [DNTypeName('System.Web.Management.WebEventFormatter')]
  DNWebEventFormatter = interface(DDN.mscorlib.DNObject)
  ['{A3D85D37-196A-3A80-A226-226B809504FD}']
  { getters & setters } 

    function get_IndentationLevel: Int32;
    procedure set_IndentationLevel(value: Int32);
    function get_TabSize: Int32;
    procedure set_TabSize(value: Int32);

  { methods } 

    procedure AppendLine(s: string);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property IndentationLevel: Int32 read get_IndentationLevel write set_IndentationLevel;
    property TabSize: Int32 read get_TabSize write set_TabSize;
  end;

  TDNWebEventFormatter = class(TDNGenericImport<DNWebEventFormatterClass, DNWebEventFormatter>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebEventManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8B2498D-D210-55A2-B869-51BC0D317EA3}']
  { static methods } 

    {class} procedure Flush(providerName: string); overload;
    {class} procedure Flush; overload;

  end;

  [DNTypeName('System.Web.Management.WebEventManager')]
  DNWebEventManager = interface(DDN.mscorlib.DNObject)
  ['{6B95B813-016F-326D-8858-2D65752194C0}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebEventManager = class(TDNGenericImport<DNWebEventManagerClass, DNWebEventManager>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebProcessInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C35F7AA-5D29-533B-A438-F8E5D25C9B4F}']
  end;

  [DNTypeName('System.Web.Management.WebProcessInformation')]
  DNWebProcessInformation = interface(DDN.mscorlib.DNObject)
  ['{B7571CF0-1029-3CA8-B263-E93D22758C5F}']
  { getters & setters } 

    function get_ProcessID: Int32;
    function get_ProcessName: string;
    function get_AccountName: string;

  { methods } 

    procedure FormatToString(formatter: DNWebEventFormatter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProcessID: Int32 read get_ProcessID;
    property ProcessName: string read get_ProcessName;
    property AccountName: string read get_AccountName;
  end;

  TDNWebProcessInformation = class(TDNGenericImport<DNWebProcessInformationClass, DNWebProcessInformation>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebProcessStatisticsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3EC8DAE7-C8C5-50C3-9806-5236D075D29F}']
  { constructors } 

    {class} function init: DNWebProcessStatistics;

  end;

  [DNTypeName('System.Web.Management.WebProcessStatistics')]
  DNWebProcessStatistics = interface(DDN.mscorlib.DNObject)
  ['{5EB0025D-12FD-3F4A-BDE2-A668076CD525}']
  { getters & setters } 

    function get_ProcessStartTime: DDN.mscorlib.DNDateTime;
    function get_ThreadCount: Int32;
    function get_WorkingSet: Int64;
    function get_PeakWorkingSet: Int64;
    function get_ManagedHeapSize: Int64;
    function get_AppDomainCount: Int32;
    function get_RequestsExecuting: Int32;
    function get_RequestsQueued: Int32;
    function get_RequestsRejected: Int32;

  { methods } 

    procedure FormatToString(formatter: DNWebEventFormatter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ProcessStartTime: DDN.mscorlib.DNDateTime read get_ProcessStartTime;
    property ThreadCount: Int32 read get_ThreadCount;
    property WorkingSet: Int64 read get_WorkingSet;
    property PeakWorkingSet: Int64 read get_PeakWorkingSet;
    property ManagedHeapSize: Int64 read get_ManagedHeapSize;
    property AppDomainCount: Int32 read get_AppDomainCount;
    property RequestsExecuting: Int32 read get_RequestsExecuting;
    property RequestsQueued: Int32 read get_RequestsQueued;
    property RequestsRejected: Int32 read get_RequestsRejected;
  end;

  TDNWebProcessStatistics = class(TDNGenericImport<DNWebProcessStatisticsClass, DNWebProcessStatistics>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebRequestInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{665E70B8-FD31-599E-B7FC-9C9391823E0B}']
  end;

  [DNTypeName('System.Web.Management.WebRequestInformation')]
  DNWebRequestInformation = interface(DDN.mscorlib.DNObject)
  ['{77E7C2D1-0229-36AB-B4D2-96BE872DA8B0}']
  { getters & setters } 

    function get_RequestUrl: string;
    function get_RequestPath: string;
    function get_Principal: DDN.mscorlib.DNIPrincipal;
    function get_UserHostAddress: string;
    function get_ThreadAccountName: string;

  { methods } 

    procedure FormatToString(formatter: DNWebEventFormatter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequestUrl: string read get_RequestUrl;
    property RequestPath: string read get_RequestPath;
    property Principal: DDN.mscorlib.DNIPrincipal read get_Principal;
    property UserHostAddress: string read get_UserHostAddress;
    property ThreadAccountName: string read get_ThreadAccountName;
  end;

  TDNWebRequestInformation = class(TDNGenericImport<DNWebRequestInformationClass, DNWebRequestInformation>) end;

  //-------------namespace: System.Web.Management----------------
  DNWebThreadInformationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{2C117748-567E-5F41-B6E2-67FC72BEEBBE}']
  end;

  [DNTypeName('System.Web.Management.WebThreadInformation')]
  DNWebThreadInformation = interface(DDN.mscorlib.DNObject)
  ['{4BB04304-7DDC-36C2-944A-E4BE4F022641}']
  { getters & setters } 

    function get_ThreadID: Int32;
    function get_ThreadAccountName: string;
    function get_StackTrace: string;
    function get_IsImpersonating: Boolean;

  { methods } 

    procedure FormatToString(formatter: DNWebEventFormatter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ThreadID: Int32 read get_ThreadID;
    property ThreadAccountName: string read get_ThreadAccountName;
    property StackTrace: string read get_StackTrace;
    property IsImpersonating: Boolean read get_IsImpersonating;
  end;

  TDNWebThreadInformation = class(TDNGenericImport<DNWebThreadInformationClass, DNWebThreadInformation>) end;

  //-------------namespace: System.Web----------------
  DNMimeMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB8F4E89-D8A8-5BB1-BEE1-F714636A8C6F}']
  { static methods } 

    {class} function GetMimeMapping(fileName: string): string;

  end;

  [DNTypeName('System.Web.MimeMapping')]
  DNMimeMapping = interface(DDN.mscorlib.DNObject)
  ['{34945287-1085-3C02-90B6-AC26C1CEA602}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMimeMapping = class(TDNGenericImport<DNMimeMappingClass, DNMimeMapping>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNCollectionModelBinderClass<TElement> = interface(DNObjectClass)
  ['{42E45553-3F08-5178-A2AC-A884FD519FC5}']
  { constructors } 

    {class} function init: DNCollectionModelBinder<TElement>;

  end;

  [DNTypeName('System.Web.ModelBinding.CollectionModelBinder`1')]
  DNCollectionModelBinder<TElement> = interface(DNIModelBinder)
  ['{7369CDA8-CBF7-3375-B5F1-4F0A2D7ED331}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCollectionModelBinder<TElement> = class(TDNGenericImport<DNCollectionModelBinderClass<TElement>, DNCollectionModelBinder<TElement>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNArrayModelBinderClass<TElement> = interface(DNCollectionModelBinderClass<TElement>)
  ['{654467A0-16A0-57C0-985D-6D2FAA7EEE5A}']
  { constructors } 

    {class} function init: DNArrayModelBinder<TElement>;

  end;

  [DNTypeName('System.Web.ModelBinding.ArrayModelBinder`1')]
  DNArrayModelBinder<TElement> = interface(DNCollectionModelBinder<TElement>)
  ['{53AD17F8-6762-3976-8000-8F60028E72BF}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNArrayModelBinder<TElement> = class(TDNGenericImport<DNArrayModelBinderClass<TElement>, DNArrayModelBinder<TElement>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDictionaryModelBinderClass<TKey, TValue> = interface(DNCollectionModelBinderClass<DDN.mscorlib.DNKeyValuePair<TKey, TValue>>)
  ['{C77CC261-33A7-541F-AA6F-41B1C2C759D8}']
  { constructors } 

    {class} function init: DNDictionaryModelBinder<TKey, TValue>;

  end;

  [DNTypeName('System.Web.ModelBinding.DictionaryModelBinder`2')]
  DNDictionaryModelBinder<TKey, TValue> = interface(DNCollectionModelBinder<DDN.mscorlib.DNKeyValuePair<TKey, TValue>>)
  ['{F64B5E63-E457-3379-BC4E-A0EE2A079FE5}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDictionaryModelBinder<TKey, TValue> = class(TDNGenericImport<DNDictionaryModelBinderClass<TKey, TValue>, DNDictionaryModelBinder<TKey, TValue>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNComplexModelClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B396D45D-67BD-5A5A-9912-EB3FEA566979}']
  { constructors } 

    {class} function init(modelMetadata: DNModelMetadata; propertyMetadata: DDN.mscorlib.DNIEnumerable<DNModelMetadata>): DNComplexModel;

  end;

  [DNTypeName('System.Web.ModelBinding.ComplexModel')]
  DNComplexModel = interface(DDN.mscorlib.DNObject)
  ['{D8B32869-9A47-315C-82E3-D758CB27357D}']
  { getters & setters } 

    function get_ModelMetadata: DNModelMetadata;
    function get_PropertyMetadata: DDN.mscorlib.DNReadOnlyCollection<DNModelMetadata>;
    function get_Results: DDN.mscorlib.DNIDictionary<DNModelMetadata, DNComplexModelResult>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelMetadata: DNModelMetadata read get_ModelMetadata;
    property PropertyMetadata: DDN.mscorlib.DNReadOnlyCollection<DNModelMetadata> read get_PropertyMetadata;
    property Results: DDN.mscorlib.DNIDictionary<DNModelMetadata, DNComplexModelResult> read get_Results;
  end;

  TDNComplexModel = class(TDNGenericImport<DNComplexModelClass, DNComplexModel>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNComplexModelBinderClass = interface(DNObjectClass)
  ['{CBC39D6A-99A0-54DB-8742-DBFEAC4FC8FA}']
  { constructors } 

    {class} function init: DNComplexModelBinder;

  end;

  [DNTypeName('System.Web.ModelBinding.ComplexModelBinder')]
  DNComplexModelBinder = interface(DNIModelBinder)
  ['{C8D91CDE-37E8-306D-8FC2-BA1B46B26EC2}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComplexModelBinder = class(TDNGenericImport<DNComplexModelBinderClass, DNComplexModelBinder>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNComplexModelResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DF4A2582-E2AB-5593-8C33-F60AE651273D}']
  { constructors } 

    {class} function init(model: DDN.mscorlib.DNObject; validationNode: DNModelValidationNode): DNComplexModelResult;

  end;

  [DNTypeName('System.Web.ModelBinding.ComplexModelResult')]
  DNComplexModelResult = interface(DDN.mscorlib.DNObject)
  ['{C04BC085-31B2-3EC3-A43B-09A8CDB1E122}']
  { getters & setters } 

    function get_Model: DDN.mscorlib.DNObject;
    function get_ValidationNode: DNModelValidationNode;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Model: DDN.mscorlib.DNObject read get_Model;
    property ValidationNode: DNModelValidationNode read get_ValidationNode;
  end;

  TDNComplexModelResult = class(TDNGenericImport<DNComplexModelResultClass, DNComplexModelResult>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNCookieValueProviderClass = interface(DNObjectClass)
  ['{C90E3C1E-EED9-58C1-AD71-D7971104CC53}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNCookieValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.CookieValueProvider')]
  DNCookieValueProvider = interface(DNIValueProvider)
  ['{06D11968-896A-3580-A1E1-8C8809E0C784}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult; overload;
    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCookieValueProvider = class(TDNGenericImport<DNCookieValueProviderClass, DNCookieValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDefaultModelBinderClass = interface(DNObjectClass)
  ['{DCF9BE03-8165-5AAE-AF1A-E6E0F6A28719}']
  { constructors } 

    {class} function init: DNDefaultModelBinder;

  end;

  [DNTypeName('System.Web.ModelBinding.DefaultModelBinder')]
  DNDefaultModelBinder = interface(DNIModelBinder)
  ['{5FD7EE46-58A2-3F19-89B2-9686E0255A0C}']
  { getters & setters } 

    function get_Providers: DNModelBinderProviderCollection;

  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Providers: DNModelBinderProviderCollection read get_Providers;
  end;

  TDNDefaultModelBinder = class(TDNGenericImport<DNDefaultModelBinderClass, DNDefaultModelBinder>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNRouteDataValueProviderClass = interface(DNObjectClass)
  ['{0024DB7C-9CB5-5C97-BBED-FEA3D5034F29}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNRouteDataValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.RouteDataValueProvider')]
  DNRouteDataValueProvider = interface(DNObject)
  ['{AC74F4C1-E2CC-35BF-A68D-B882A8F36C76}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRouteDataValueProvider = class(TDNGenericImport<DNRouteDataValueProviderClass, DNRouteDataValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDictionaryValueProviderClass<TValue> = interface(DNObjectClass)
  ['{D5D4D79D-B267-57C4-8754-8425CAE0D034}']
  { constructors } 

    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<string, TValue>; culture: DDN.mscorlib.DNCultureInfo): DNDictionaryValueProvider<TValue>;

  end;

  [DNTypeName('System.Web.ModelBinding.DictionaryValueProvider`1')]
  DNDictionaryValueProvider<TValue> = interface(DNIValueProvider)
  ['{41213184-A26C-3639-86A0-3710DD72187D}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDictionaryValueProvider<TValue> = class(TDNGenericImport<DNDictionaryValueProviderClass<TValue>, DNDictionaryValueProvider<TValue>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNKeyValuePairModelBinderClass<TKey, TValue> = interface(DNObjectClass)
  ['{B51DD44F-2459-50C4-B776-5F7C37E3D63A}']
  { constructors } 

    {class} function init: DNKeyValuePairModelBinder<TKey, TValue>;

  end;

  [DNTypeName('System.Web.ModelBinding.KeyValuePairModelBinder`2')]
  DNKeyValuePairModelBinder<TKey, TValue> = interface(DNIModelBinder)
  ['{A1A70BFF-3211-3139-9D8F-2A19657E6D4C}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyValuePairModelBinder<TKey, TValue> = class(TDNGenericImport<DNKeyValuePairModelBinderClass<TKey, TValue>, DNKeyValuePairModelBinder<TKey, TValue>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4FEC0882-865B-51CB-965E-347A63CF3552}']
  { constructors } 

    {class} function init: DNModelBinderDictionary;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderDictionary')]
  DNModelBinderDictionary = interface(DDN.mscorlib.DNObject)
  ['{F02A6B0E-EB13-360B-90E3-1D4F7680015B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_DefaultBinder: DNIModelBinder;
    procedure set_DefaultBinder(value: DNIModelBinder);
    function get_IsReadOnly: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<DDN.mscorlib.DNType>;
    function get_Values: DDN.mscorlib.DNICollection<DNIModelBinder>;

  { methods } 

    function &Contains(item: DDN.mscorlib.DNKeyValuePair<DDN.mscorlib.DNType, DNIModelBinder>): Boolean;
    function ContainsKey(key: DDN.mscorlib.DNType): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<DDN.mscorlib.DNType, DNIModelBinder>>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<DDN.mscorlib.DNType, DNIModelBinder>>;
    function TryGetValue(key: DDN.mscorlib.DNType; out value: DNIModelBinder): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property DefaultBinder: DNIModelBinder read get_DefaultBinder write set_DefaultBinder;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Keys: DDN.mscorlib.DNICollection<DDN.mscorlib.DNType> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<DNIModelBinder> read get_Values;
  end;

  TDNModelBinderDictionary = class(TDNGenericImport<DNModelBinderDictionaryClass, DNModelBinderDictionary>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderErrorMessageProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{257B753E-F18C-58CE-BCE8-CF627CF71005}']
  { static getter & setter } 

    {class} function get_TypeConversionErrorMessageProvider: DNModelBinderErrorMessageProvider;
    {class} procedure set_TypeConversionErrorMessageProvider(value: DNModelBinderErrorMessageProvider);
    {class} function get_ValueRequiredErrorMessageProvider: DNModelBinderErrorMessageProvider;
    {class} procedure set_ValueRequiredErrorMessageProvider(value: DNModelBinderErrorMessageProvider);

  { static propertys } 

    {class} property TypeConversionErrorMessageProvider: DNModelBinderErrorMessageProvider read get_TypeConversionErrorMessageProvider write set_TypeConversionErrorMessageProvider;
    {class} property ValueRequiredErrorMessageProvider: DNModelBinderErrorMessageProvider read get_ValueRequiredErrorMessageProvider write set_ValueRequiredErrorMessageProvider;
  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderErrorMessageProviders')]
  DNModelBinderErrorMessageProviders = interface(DDN.mscorlib.DNObject)
  ['{6BCFBD5C-1820-3392-AC85-7D79F9DDB583}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelBinderErrorMessageProviders = class(TDNGenericImport<DNModelBinderErrorMessageProvidersClass, DNModelBinderErrorMessageProviders>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B7C396A4-36CD-57DC-86AF-777914B58566}']
  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderProvider')]
  DNModelBinderProvider = interface(DDN.mscorlib.DNObject)
  ['{C63C4935-0425-3ABC-A916-0AC223FE617C}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelBinderProvider = class(TDNGenericImport<DNModelBinderProviderClass, DNModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNArrayModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{44158BBF-84B4-5C10-B8A1-AF8F75C00CF8}']
  { constructors } 

    {class} function init: DNArrayModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.ArrayModelBinderProvider')]
  DNArrayModelBinderProvider = interface(DNModelBinderProvider)
  ['{B7266C2D-EF66-3D30-A4AE-613C92D90A16}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNArrayModelBinderProvider = class(TDNGenericImport<DNArrayModelBinderProviderClass, DNArrayModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNBinaryDataModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{12AE6F8C-8B39-562A-8B13-1F5A84F4DDDE}']
  { constructors } 

    {class} function init: DNBinaryDataModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.BinaryDataModelBinderProvider')]
  DNBinaryDataModelBinderProvider = interface(DNModelBinderProvider)
  ['{0B9D7923-90EF-3602-B58E-5FE8A5EB9119}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBinaryDataModelBinderProvider = class(TDNGenericImport<DNBinaryDataModelBinderProviderClass, DNBinaryDataModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNCollectionModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{E19EA893-D802-582A-B47D-CC1CDC52BF5D}']
  { constructors } 

    {class} function init: DNCollectionModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.CollectionModelBinderProvider')]
  DNCollectionModelBinderProvider = interface(DNModelBinderProvider)
  ['{79CEE1BB-C1D2-3D8C-832D-3238BDE9F474}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCollectionModelBinderProvider = class(TDNGenericImport<DNCollectionModelBinderProviderClass, DNCollectionModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNComplexModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{2640F711-507C-540F-A9A8-1954595CFB7B}']
  { constructors } 

    {class} function init: DNComplexModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.ComplexModelBinderProvider')]
  DNComplexModelBinderProvider = interface(DNModelBinderProvider)
  ['{1EDB11A7-22C7-37D9-94CA-22D6FEC4DD8F}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNComplexModelBinderProvider = class(TDNGenericImport<DNComplexModelBinderProviderClass, DNComplexModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDictionaryModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{F6D662CF-F558-515F-B1E7-8FCD56FD1330}']
  { constructors } 

    {class} function init: DNDictionaryModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.DictionaryModelBinderProvider')]
  DNDictionaryModelBinderProvider = interface(DNModelBinderProvider)
  ['{7B4ACACC-8F7D-34C8-B360-E29A0324ECCC}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDictionaryModelBinderProvider = class(TDNGenericImport<DNDictionaryModelBinderProviderClass, DNDictionaryModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNGenericModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{5B619662-1829-5D9E-8A5F-BBE5B97DD4D9}']
  { constructors } 

    {class} function init(modelType: DDN.mscorlib.DNType; modelBinder: DNIModelBinder): DNGenericModelBinderProvider; overload;
    {class} function init(modelType: DDN.mscorlib.DNType; modelBinderType: DDN.mscorlib.DNType): DNGenericModelBinderProvider; overload;
    {class} function init(modelType: DDN.mscorlib.DNType; modelBinderFactory: DDN.mscorlib.DNFunc<TArray<DDN.mscorlib.DNType>, DNIModelBinder>): DNGenericModelBinderProvider; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.GenericModelBinderProvider')]
  DNGenericModelBinderProvider = interface(DNModelBinderProvider)
  ['{634D9F76-0DC1-3CEF-96D8-A8502C509727}']
  { getters & setters } 

    function get_ModelType: DDN.mscorlib.DNType;
    function get_SuppressPrefixCheck: Boolean;
    procedure set_SuppressPrefixCheck(value: Boolean);

  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelType: DDN.mscorlib.DNType read get_ModelType;
    property SuppressPrefixCheck: Boolean read get_SuppressPrefixCheck write set_SuppressPrefixCheck;
  end;

  TDNGenericModelBinderProvider = class(TDNGenericImport<DNGenericModelBinderProviderClass, DNGenericModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNKeyValuePairModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{2414DD37-77D5-50E7-A584-C07A8EA4E715}']
  { constructors } 

    {class} function init: DNKeyValuePairModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.KeyValuePairModelBinderProvider')]
  DNKeyValuePairModelBinderProvider = interface(DNModelBinderProvider)
  ['{226D4BEA-24F1-3993-8ACE-8A8078A96263}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNKeyValuePairModelBinderProvider = class(TDNGenericImport<DNKeyValuePairModelBinderProviderClass, DNKeyValuePairModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNMutableObjectModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{B92B6E10-0D80-5CEC-9ED6-06BBA750BB78}']
  { constructors } 

    {class} function init: DNMutableObjectModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.MutableObjectModelBinderProvider')]
  DNMutableObjectModelBinderProvider = interface(DNModelBinderProvider)
  ['{71F81F3E-60EA-303C-81D5-84F109A5E370}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMutableObjectModelBinderProvider = class(TDNGenericImport<DNMutableObjectModelBinderProviderClass, DNMutableObjectModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNSimpleModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{5DBA8E04-D69E-5A00-9819-C0E2A2C1814A}']
  { constructors } 

    {class} function init(modelType: DDN.mscorlib.DNType; modelBinder: DNIModelBinder): DNSimpleModelBinderProvider; overload;
    {class} function init(modelType: DDN.mscorlib.DNType; modelBinderFactory: DDN.mscorlib.DNFunc<DNIModelBinder>): DNSimpleModelBinderProvider; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.SimpleModelBinderProvider')]
  DNSimpleModelBinderProvider = interface(DNModelBinderProvider)
  ['{3A7E186A-0DD5-3C58-BC94-DCD925B61637}']
  { getters & setters } 

    function get_ModelType: DDN.mscorlib.DNType;
    function get_SuppressPrefixCheck: Boolean;
    procedure set_SuppressPrefixCheck(value: Boolean);

  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelType: DDN.mscorlib.DNType read get_ModelType;
    property SuppressPrefixCheck: Boolean read get_SuppressPrefixCheck write set_SuppressPrefixCheck;
  end;

  TDNSimpleModelBinderProvider = class(TDNGenericImport<DNSimpleModelBinderProviderClass, DNSimpleModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNTypeConverterModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{6DE503E9-8AAF-5541-A9F0-1EFBA8C3D629}']
  { constructors } 

    {class} function init: DNTypeConverterModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.TypeConverterModelBinderProvider')]
  DNTypeConverterModelBinderProvider = interface(DNModelBinderProvider)
  ['{BC0A7898-F36F-3448-8761-E9EB04EC9E17}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeConverterModelBinderProvider = class(TDNGenericImport<DNTypeConverterModelBinderProviderClass, DNTypeConverterModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNTypeMatchModelBinderProviderClass = interface(DNModelBinderProviderClass)
  ['{7E8E1312-8145-5DB8-B2B8-36B389326F13}']
  { constructors } 

    {class} function init: DNTypeMatchModelBinderProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.TypeMatchModelBinderProvider')]
  DNTypeMatchModelBinderProvider = interface(DNModelBinderProvider)
  ['{C1497ACD-5C7F-301E-96A8-A57763D67183}']
  { methods } 

    function GetBinder(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): DNIModelBinder;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeMatchModelBinderProvider = class(TDNGenericImport<DNTypeMatchModelBinderProviderClass, DNTypeMatchModelBinderProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBinderProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{39AD8E79-FC2F-5DA3-95B8-07D42B9D79FF}']
  { static getter & setter } 

    {class} function get_Providers: DNModelBinderProviderCollection;

  { static propertys } 

    {class} property Providers: DNModelBinderProviderCollection read get_Providers;
  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinderProviders')]
  DNModelBinderProviders = interface(DDN.mscorlib.DNObject)
  ['{D7DF6948-32D0-3354-B844-038F09D23834}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelBinderProviders = class(TDNGenericImport<DNModelBinderProvidersClass, DNModelBinderProviders>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBindersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1507393-1F15-5713-801B-53F3D6DF15B6}']
  { static getter & setter } 

    {class} function get_Binders: DNModelBinderDictionary;

  { static propertys } 

    {class} property Binders: DNModelBinderDictionary read get_Binders;
  end;

  [DNTypeName('System.Web.ModelBinding.ModelBinders')]
  DNModelBinders = interface(DDN.mscorlib.DNObject)
  ['{5B7FDD4B-08A9-3609-B5DE-0BF52E3F2A3E}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelBinders = class(TDNGenericImport<DNModelBindersClass, DNModelBinders>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBindingContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{583CC943-FB7E-5B87-8998-FB885A94A8AC}']
  { constructors } 

    {class} function init: DNModelBindingContext; overload;
    {class} function init(bindingContext: DNModelBindingContext): DNModelBindingContext; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelBindingContext')]
  DNModelBindingContext = interface(DDN.mscorlib.DNObject)
  ['{741639D5-AE83-3194-98F0-0D66A713B47D}']
  { getters & setters } 

    function get_Model: DDN.mscorlib.DNObject;
    procedure set_Model(value: DDN.mscorlib.DNObject);
    function get_ModelBinderProviders: DNModelBinderProviderCollection;
    procedure set_ModelBinderProviders(value: DNModelBinderProviderCollection);
    function get_ModelMetadata: DNModelMetadata;
    procedure set_ModelMetadata(value: DNModelMetadata);
    function get_ModelName: string;
    procedure set_ModelName(value: string);
    function get_ValidateRequest: Boolean;
    procedure set_ValidateRequest(value: Boolean);
    function get_ModelState: DNModelStateDictionary;
    procedure set_ModelState(value: DNModelStateDictionary);
    function get_ModelType: DDN.mscorlib.DNType;
    function get_PropertyMetadata: DDN.mscorlib.DNIDictionary<string, DNModelMetadata>;
    function get_ValidationNode: DNModelValidationNode;
    procedure set_ValidationNode(value: DNModelValidationNode);
    function get_ValueProvider: DNIValueProvider;
    procedure set_ValueProvider(value: DNIValueProvider);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Model: DDN.mscorlib.DNObject read get_Model write set_Model;
    property ModelBinderProviders: DNModelBinderProviderCollection read get_ModelBinderProviders write set_ModelBinderProviders;
    property ModelMetadata: DNModelMetadata read get_ModelMetadata write set_ModelMetadata;
    property ModelName: string read get_ModelName write set_ModelName;
    property ValidateRequest: Boolean read get_ValidateRequest write set_ValidateRequest;
    property ModelState: DNModelStateDictionary read get_ModelState write set_ModelState;
    property ModelType: DDN.mscorlib.DNType read get_ModelType;
    property PropertyMetadata: DDN.mscorlib.DNIDictionary<string, DNModelMetadata> read get_PropertyMetadata;
    property ValidationNode: DNModelValidationNode read get_ValidationNode write set_ValidationNode;
    property ValueProvider: DNIValueProvider read get_ValueProvider write set_ValueProvider;
  end;

  TDNModelBindingContext = class(TDNGenericImport<DNModelBindingContextClass, DNModelBindingContext>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelBindingExecutionContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{61CCF3B8-9E15-5E1B-BAC7-7FAFA3EFAF52}']
  { constructors } 

    {class} function init(httpContext: DNHttpContextBase; modelState: DNModelStateDictionary): DNModelBindingExecutionContext;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelBindingExecutionContext')]
  DNModelBindingExecutionContext = interface(DDN.mscorlib.DNObject)
  ['{4A85CF4C-BC08-3F61-8DF3-F43F5ECB89CB}']
  { getters & setters } 

    function get_HttpContext: DNHttpContextBase;
    function get_ModelState: DNModelStateDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HttpContext: DNHttpContextBase read get_HttpContext;
    property ModelState: DNModelStateDictionary read get_ModelState;
  end;

  TDNModelBindingExecutionContext = class(TDNGenericImport<DNModelBindingExecutionContextClass, DNModelBindingExecutionContext>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F1FA8249-F524-56AF-86E2-30E40E23DA13}']
  { constructors } 

    {class} function init(exception: DDN.mscorlib.DNException): DNModelError; overload;
    {class} function init(exception: DDN.mscorlib.DNException; errorMessage: string): DNModelError; overload;
    {class} function init(errorMessage: string): DNModelError; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelError')]
  DNModelError = interface(DDN.mscorlib.DNObject)
  ['{14B33543-DF94-33C0-A6F6-CA76DBA0FB95}']
  { getters & setters } 

    function get_Exception: DDN.mscorlib.DNException;
    function get_ErrorMessage: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Exception: DDN.mscorlib.DNException read get_Exception;
    property ErrorMessage: string read get_ErrorMessage;
  end;

  TDNModelError = class(TDNGenericImport<DNModelErrorClass, DNModelError>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelMetadataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{36C33F5A-B7A8-5F5E-B69A-EAF816AA88DE}']
  { constructors } 

    {class} function init(provider: DNModelMetadataProvider; containerType: DDN.mscorlib.DNType; modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType; propertyName: string): DNModelMetadata;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelMetadata')]
  DNModelMetadata = interface(DDN.mscorlib.DNObject)
  ['{EDFD2171-1FBA-3F6F-AE1E-18C466F0F039}']
  { getters & setters } 

    function get_AdditionalValues: DDN.mscorlib.DNDictionary<string, DDN.mscorlib.DNObject>;
    function get_ContainerType: DDN.mscorlib.DNType;
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_DataTypeName: string;
    procedure set_DataTypeName(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DisplayFormatString: string;
    procedure set_DisplayFormatString(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_EditFormatString: string;
    procedure set_EditFormatString(value: string);
    function get_HideSurroundingHtml: Boolean;
    procedure set_HideSurroundingHtml(value: Boolean);
    function get_IsComplexType: Boolean;
    function get_IsNullableValueType: Boolean;
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_IsRequired: Boolean;
    procedure set_IsRequired(value: Boolean);
    function get_Model: DDN.mscorlib.DNObject;
    procedure set_Model(value: DDN.mscorlib.DNObject);
    function get_ModelType: DDN.mscorlib.DNType;
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Properties: DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function get_PropertyName: string;
    function get_RequestValidationEnabled: Boolean;
    procedure set_RequestValidationEnabled(value: Boolean);
    function get_ShortDisplayName: string;
    procedure set_ShortDisplayName(value: string);
    function get_ShowForDisplay: Boolean;
    procedure set_ShowForDisplay(value: Boolean);
    function get_ShowForEdit: Boolean;
    procedure set_ShowForEdit(value: Boolean);
    function get_SimpleDisplayText: string;
    procedure set_SimpleDisplayText(value: string);
    function get_TemplateHint: string;
    procedure set_TemplateHint(value: string);
    function get_Watermark: string;
    procedure set_Watermark(value: string);

  { methods } 

    function GetDisplayName: string;
    function GetValidators(context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AdditionalValues: DDN.mscorlib.DNDictionary<string, DDN.mscorlib.DNObject> read get_AdditionalValues;
    property ContainerType: DDN.mscorlib.DNType read get_ContainerType;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property DataTypeName: string read get_DataTypeName write set_DataTypeName;
    property Description: string read get_Description write set_Description;
    property DisplayFormatString: string read get_DisplayFormatString write set_DisplayFormatString;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property EditFormatString: string read get_EditFormatString write set_EditFormatString;
    property HideSurroundingHtml: Boolean read get_HideSurroundingHtml write set_HideSurroundingHtml;
    property IsComplexType: Boolean read get_IsComplexType;
    property IsNullableValueType: Boolean read get_IsNullableValueType;
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    property IsRequired: Boolean read get_IsRequired write set_IsRequired;
    property Model: DDN.mscorlib.DNObject read get_Model write set_Model;
    property ModelType: DDN.mscorlib.DNType read get_ModelType;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property Order: Int32 read get_Order write set_Order;
    property Properties: DDN.mscorlib.DNIEnumerable<DNModelMetadata> read get_Properties;
    property PropertyName: string read get_PropertyName;
    property RequestValidationEnabled: Boolean read get_RequestValidationEnabled write set_RequestValidationEnabled;
    property ShortDisplayName: string read get_ShortDisplayName write set_ShortDisplayName;
    property ShowForDisplay: Boolean read get_ShowForDisplay write set_ShowForDisplay;
    property ShowForEdit: Boolean read get_ShowForEdit write set_ShowForEdit;
    property SimpleDisplayText: string read get_SimpleDisplayText write set_SimpleDisplayText;
    property TemplateHint: string read get_TemplateHint write set_TemplateHint;
    property Watermark: string read get_Watermark write set_Watermark;
  end;

  TDNModelMetadata = class(TDNGenericImport<DNModelMetadataClass, DNModelMetadata>)
  public const
   DefaultOrder = 10000;
  end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDataAnnotationsModelMetadataClass = interface(DNModelMetadataClass)
  ['{E4D20AB7-6228-5E9E-9A5A-2C3901FCA478}']
  { constructors } 

    {class} function init(provider: DNDataAnnotationsModelMetadataProvider; containerType: DDN.mscorlib.DNType; modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType; propertyName: string; displayColumnAttribute: DDN.System.ComponentModel.DataAnnotations.DNDisplayColumnAttribute): DNDataAnnotationsModelMetadata;

  end;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelMetadata')]
  DNDataAnnotationsModelMetadata = interface(DNModelMetadata)
  ['{B97DF5DA-5C7B-3400-9393-3A0C73A6DB87}']
  { getters & setters } 

    function get_AdditionalValues: DDN.mscorlib.DNDictionary<string, DDN.mscorlib.DNObject>;
    function get_ContainerType: DDN.mscorlib.DNType;
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_DataTypeName: string;
    procedure set_DataTypeName(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_DisplayFormatString: string;
    procedure set_DisplayFormatString(value: string);
    function get_DisplayName: string;
    procedure set_DisplayName(value: string);
    function get_EditFormatString: string;
    procedure set_EditFormatString(value: string);
    function get_HideSurroundingHtml: Boolean;
    procedure set_HideSurroundingHtml(value: Boolean);
    function get_IsComplexType: Boolean;
    function get_IsNullableValueType: Boolean;
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_IsRequired: Boolean;
    procedure set_IsRequired(value: Boolean);
    function get_Model: DDN.mscorlib.DNObject;
    procedure set_Model(value: DDN.mscorlib.DNObject);
    function get_ModelType: DDN.mscorlib.DNType;
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_Properties: DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function get_PropertyName: string;
    function get_RequestValidationEnabled: Boolean;
    procedure set_RequestValidationEnabled(value: Boolean);
    function get_ShortDisplayName: string;
    procedure set_ShortDisplayName(value: string);
    function get_ShowForDisplay: Boolean;
    procedure set_ShowForDisplay(value: Boolean);
    function get_ShowForEdit: Boolean;
    procedure set_ShowForEdit(value: Boolean);
    function get_SimpleDisplayText: string;
    procedure set_SimpleDisplayText(value: string);
    function get_TemplateHint: string;
    procedure set_TemplateHint(value: string);
    function get_Watermark: string;
    procedure set_Watermark(value: string);

  { methods } 

    function GetDisplayName: string;
    function GetValidators(context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AdditionalValues: DDN.mscorlib.DNDictionary<string, DDN.mscorlib.DNObject> read get_AdditionalValues;
    property ContainerType: DDN.mscorlib.DNType read get_ContainerType;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property DataTypeName: string read get_DataTypeName write set_DataTypeName;
    property Description: string read get_Description write set_Description;
    property DisplayFormatString: string read get_DisplayFormatString write set_DisplayFormatString;
    property DisplayName: string read get_DisplayName write set_DisplayName;
    property EditFormatString: string read get_EditFormatString write set_EditFormatString;
    property HideSurroundingHtml: Boolean read get_HideSurroundingHtml write set_HideSurroundingHtml;
    property IsComplexType: Boolean read get_IsComplexType;
    property IsNullableValueType: Boolean read get_IsNullableValueType;
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    property IsRequired: Boolean read get_IsRequired write set_IsRequired;
    property Model: DDN.mscorlib.DNObject read get_Model write set_Model;
    property ModelType: DDN.mscorlib.DNType read get_ModelType;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property Order: Int32 read get_Order write set_Order;
    property Properties: DDN.mscorlib.DNIEnumerable<DNModelMetadata> read get_Properties;
    property PropertyName: string read get_PropertyName;
    property RequestValidationEnabled: Boolean read get_RequestValidationEnabled write set_RequestValidationEnabled;
    property ShortDisplayName: string read get_ShortDisplayName write set_ShortDisplayName;
    property ShowForDisplay: Boolean read get_ShowForDisplay write set_ShowForDisplay;
    property ShowForEdit: Boolean read get_ShowForEdit write set_ShowForEdit;
    property SimpleDisplayText: string read get_SimpleDisplayText write set_SimpleDisplayText;
    property TemplateHint: string read get_TemplateHint write set_TemplateHint;
    property Watermark: string read get_Watermark write set_Watermark;
  end;

  TDNDataAnnotationsModelMetadata = class(TDNGenericImport<DNDataAnnotationsModelMetadataClass, DNDataAnnotationsModelMetadata>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelMetadataProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDF80731-2E1D-5085-9C21-051F3B11D087}']
  end;

  [DNTypeName('System.Web.ModelBinding.ModelMetadataProvider')]
  DNModelMetadataProvider = interface(DDN.mscorlib.DNObject)
  ['{43AE8C19-362F-34F2-B0DE-48A76838E9B5}']
  { methods } 

    function GetMetadataForProperties(container: DDN.mscorlib.DNObject; containerType: DDN.mscorlib.DNType): DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function GetMetadataForProperty(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; containerType: DDN.mscorlib.DNType; propertyName: string): DNModelMetadata;
    function GetMetadataForType(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType): DNModelMetadata;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelMetadataProvider = class(TDNGenericImport<DNModelMetadataProviderClass, DNModelMetadataProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNAssociatedMetadataProviderClass = interface(DNModelMetadataProviderClass)
  ['{9DFA09B7-B4CA-5F87-BB4A-5FEB8A49E9BC}']
  end;

  [DNTypeName('System.Web.ModelBinding.AssociatedMetadataProvider')]
  DNAssociatedMetadataProvider = interface(DNModelMetadataProvider)
  ['{9CFDB211-0F15-38AE-98A5-BB5D557FE7EE}']
  { methods } 

    function GetMetadataForProperties(container: DDN.mscorlib.DNObject; containerType: DDN.mscorlib.DNType): DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function GetMetadataForProperty(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; containerType: DDN.mscorlib.DNType; propertyName: string): DNModelMetadata;
    function GetMetadataForType(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType): DNModelMetadata;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedMetadataProvider = class(TDNGenericImport<DNAssociatedMetadataProviderClass, DNAssociatedMetadataProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDataAnnotationsModelMetadataProviderClass = interface(DNAssociatedMetadataProviderClass)
  ['{C0A7EF5A-FB1B-569A-84B5-960B0D0014B1}']
  { constructors } 

    {class} function init: DNDataAnnotationsModelMetadataProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelMetadataProvider')]
  DNDataAnnotationsModelMetadataProvider = interface(DNAssociatedMetadataProvider)
  ['{3D66CA85-AB06-34CE-A949-484820DAC8AE}']
  { methods } 

    function GetMetadataForProperties(container: DDN.mscorlib.DNObject; containerType: DDN.mscorlib.DNType): DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function GetMetadataForProperty(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; containerType: DDN.mscorlib.DNType; propertyName: string): DNModelMetadata;
    function GetMetadataForType(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType): DNModelMetadata;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataAnnotationsModelMetadataProvider = class(TDNGenericImport<DNDataAnnotationsModelMetadataProviderClass, DNDataAnnotationsModelMetadataProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNEmptyModelMetadataProviderClass = interface(DNAssociatedMetadataProviderClass)
  ['{A6B7412A-DE09-54A8-BA69-78077D2C7B41}']
  { constructors } 

    {class} function init: DNEmptyModelMetadataProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.EmptyModelMetadataProvider')]
  DNEmptyModelMetadataProvider = interface(DNAssociatedMetadataProvider)
  ['{50511A9A-5695-3D42-A169-80EEACB74E25}']
  { methods } 

    function GetMetadataForProperties(container: DDN.mscorlib.DNObject; containerType: DDN.mscorlib.DNType): DDN.mscorlib.DNIEnumerable<DNModelMetadata>;
    function GetMetadataForProperty(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; containerType: DDN.mscorlib.DNType; propertyName: string): DNModelMetadata;
    function GetMetadataForType(modelAccessor: DDN.mscorlib.DNFunc<DDN.mscorlib.DNObject>; modelType: DDN.mscorlib.DNType): DNModelMetadata;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEmptyModelMetadataProvider = class(TDNGenericImport<DNEmptyModelMetadataProviderClass, DNEmptyModelMetadataProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelMetadataProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8949916-732F-5117-8334-D44CF74749A1}']
  { static getter & setter } 

    {class} function get_Current: DNModelMetadataProvider;
    {class} procedure set_Current(value: DNModelMetadataProvider);

  { static propertys } 

    {class} property Current: DNModelMetadataProvider read get_Current write set_Current;
  end;

  [DNTypeName('System.Web.ModelBinding.ModelMetadataProviders')]
  DNModelMetadataProviders = interface(DDN.mscorlib.DNObject)
  ['{100B3CA1-000F-3697-A0AC-D8957085689D}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelMetadataProviders = class(TDNGenericImport<DNModelMetadataProvidersClass, DNModelMetadataProviders>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73D9DA10-640E-53B1-9EB8-E9BF657CBF6C}']
  { constructors } 

    {class} function init: DNModelState;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelState')]
  DNModelState = interface(DDN.mscorlib.DNObject)
  ['{D397CF73-16E1-32C9-BC3F-8A47DB226FC1}']
  { getters & setters } 

    function get_Value: DNValueProviderResult;
    procedure set_Value(value: DNValueProviderResult);
    function get_Errors: DNModelErrorCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: DNValueProviderResult read get_Value write set_Value;
    property Errors: DNModelErrorCollection read get_Errors;
  end;

  TDNModelState = class(TDNGenericImport<DNModelStateClass, DNModelState>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelStateDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5367BDE0-915B-5AD2-951A-E16A56E5B7E5}']
  { constructors } 

    {class} function init: DNModelStateDictionary; overload;
    {class} function init(dictionary: DNModelStateDictionary): DNModelStateDictionary; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelStateDictionary')]
  DNModelStateDictionary = interface(DDN.mscorlib.DNObject)
  ['{2CED35D9-BA93-300D-8C30-F451E092E9CE}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsValid: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection<string>;
    function get_Values: DDN.mscorlib.DNICollection<DNModelState>;

  { methods } 

    procedure AddModelError(key: string; exception: DDN.mscorlib.DNException); overload;
    procedure AddModelError(key: string; errorMessage: string); overload;
    function &Contains(item: DDN.mscorlib.DNKeyValuePair<string, DNModelState>): Boolean;
    function ContainsKey(key: string): Boolean;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNKeyValuePair<string, DNModelState>>; arrayIndex: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator<DDN.mscorlib.DNKeyValuePair<string, DNModelState>>;
    function IsValidField(key: string): Boolean;
    procedure Merge(dictionary: DNModelStateDictionary);
    procedure SetModelValue(key: string; value: DNValueProviderResult);
    function TryGetValue(key: string; out value: DNModelState): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsValid: Boolean read get_IsValid;
    property Keys: DDN.mscorlib.DNICollection<string> read get_Keys;
    property Values: DDN.mscorlib.DNICollection<DNModelState> read get_Values;
  end;

  TDNModelStateDictionary = class(TDNGenericImport<DNModelStateDictionaryClass, DNModelStateDictionary>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidationNodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3082F8A3-C45D-562C-81CB-17053FE8E603}']
  { constructors } 

    {class} function init(modelMetadata: DNModelMetadata; modelStateKey: string): DNModelValidationNode; overload;
    {class} function init(modelMetadata: DNModelMetadata; modelStateKey: string; childNodes: DDN.mscorlib.DNIEnumerable<DNModelValidationNode>): DNModelValidationNode; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidationNode')]
  DNModelValidationNode = interface(DDN.mscorlib.DNObject)
  ['{0F46F224-BD5B-3A97-A7B6-FDF53B683D5D}']
  { getters & setters } 

    function get_ChildNodes: DDN.mscorlib.DNICollection<DNModelValidationNode>;
    function get_ModelMetadata: DNModelMetadata;
    function get_ModelStateKey: string;
    function get_ValidateAllProperties: Boolean;
    procedure set_ValidateAllProperties(value: Boolean);
    function get_SuppressValidation: Boolean;
    procedure set_SuppressValidation(value: Boolean);

  { events } 

    procedure add_Validated(value: DDN.mscorlib.DNEventHandler<DNModelValidatedEventArgs>);
    procedure remove_Validated(value: DDN.mscorlib.DNEventHandler<DNModelValidatedEventArgs>);
    procedure add_Validating(value: DDN.mscorlib.DNEventHandler<DNModelValidatingEventArgs>);
    procedure remove_Validating(value: DDN.mscorlib.DNEventHandler<DNModelValidatingEventArgs>);

  { methods } 

    procedure CombineWith(otherNode: DNModelValidationNode);
    procedure Validate(modelBindingExecutionContext: DNModelBindingExecutionContext); overload;
    procedure Validate(modelBindingExecutionContext: DNModelBindingExecutionContext; parentNode: DNModelValidationNode); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChildNodes: DDN.mscorlib.DNICollection<DNModelValidationNode> read get_ChildNodes;
    property ModelMetadata: DNModelMetadata read get_ModelMetadata;
    property ModelStateKey: string read get_ModelStateKey;
    property ValidateAllProperties: Boolean read get_ValidateAllProperties write set_ValidateAllProperties;
    property SuppressValidation: Boolean read get_SuppressValidation write set_SuppressValidation;
  end;

  TDNModelValidationNode = class(TDNGenericImport<DNModelValidationNodeClass, DNModelValidationNode>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidationResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6D7F8671-412E-593C-A0B8-657E56C63026}']
  { constructors } 

    {class} function init: DNModelValidationResult;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidationResult')]
  DNModelValidationResult = interface(DDN.mscorlib.DNObject)
  ['{27D0E499-5DC6-3EEE-90DD-924814BDC108}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_Message: string;
    procedure set_Message(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MemberName: string read get_MemberName write set_MemberName;
    property Message: string read get_Message write set_Message;
  end;

  TDNModelValidationResult = class(TDNGenericImport<DNModelValidationResultClass, DNModelValidationResult>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E3CECCC-8526-59AE-9797-3F87C7512F2D}']
  { static methods } 

    {class} function GetModelValidator(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DNModelValidator;

  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidator')]
  DNModelValidator = interface(DDN.mscorlib.DNObject)
  ['{E77C1A0A-194F-37AF-8F5C-8AC3982C0ADB}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNModelValidator = class(TDNGenericImport<DNModelValidatorClass, DNModelValidator>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDataAnnotationsModelValidatorClass = interface(DNModelValidatorClass)
  ['{CA111917-1CE5-56EC-807C-A897FFAEBC29}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNValidationAttribute): DNDataAnnotationsModelValidator;

  end;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelValidator')]
  DNDataAnnotationsModelValidator = interface(DNModelValidator)
  ['{701EB42E-4C5A-3ADE-B4C4-0F8BE873F419}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNDataAnnotationsModelValidator = class(TDNGenericImport<DNDataAnnotationsModelValidatorClass, DNDataAnnotationsModelValidator>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNMaxLengthAttributeAdapterClass = interface(DNObjectClass)
  ['{21D3B7A1-C1BC-58B3-A594-173E48D0E260}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNMaxLengthAttribute): DNMaxLengthAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.MaxLengthAttributeAdapter')]
  DNMaxLengthAttributeAdapter = interface(DNObject)
  ['{0CDAB561-EA05-3D95-9888-59FD114836CB}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNMaxLengthAttributeAdapter = class(TDNGenericImport<DNMaxLengthAttributeAdapterClass, DNMaxLengthAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNMinLengthAttributeAdapterClass = interface(DNObjectClass)
  ['{0485A49A-D1E9-55B8-8C3D-047EE28084A3}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNMinLengthAttribute): DNMinLengthAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.MinLengthAttributeAdapter')]
  DNMinLengthAttributeAdapter = interface(DNObject)
  ['{1CA1DE5D-56BA-3ADF-826B-4162F4460869}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNMinLengthAttributeAdapter = class(TDNGenericImport<DNMinLengthAttributeAdapterClass, DNMinLengthAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNRangeAttributeAdapterClass = interface(DNObjectClass)
  ['{0FAB7023-909F-5CFE-AAE8-EDF523BF917D}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNRangeAttribute): DNRangeAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.RangeAttributeAdapter')]
  DNRangeAttributeAdapter = interface(DNObject)
  ['{DF72E6F7-C401-3E9C-B483-E8AC76382FA9}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNRangeAttributeAdapter = class(TDNGenericImport<DNRangeAttributeAdapterClass, DNRangeAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNRegularExpressionAttributeAdapterClass = interface(DNObjectClass)
  ['{39D4ABC9-0B0B-54B3-86CF-06D60E1968A0}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNRegularExpressionAttribute): DNRegularExpressionAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.RegularExpressionAttributeAdapter')]
  DNRegularExpressionAttributeAdapter = interface(DNObject)
  ['{6880A1A9-1897-3AD1-8298-5BB489B2538D}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNRegularExpressionAttributeAdapter = class(TDNGenericImport<DNRegularExpressionAttributeAdapterClass, DNRegularExpressionAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNRequiredAttributeAdapterClass = interface(DNObjectClass)
  ['{31AD94C1-E48D-5AB2-9691-DD54960F5E2A}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNRequiredAttribute): DNRequiredAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.RequiredAttributeAdapter')]
  DNRequiredAttributeAdapter = interface(DNObject)
  ['{2632D627-55B4-3ADE-8D17-58DC60CCE3AC}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNRequiredAttributeAdapter = class(TDNGenericImport<DNRequiredAttributeAdapterClass, DNRequiredAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNStringLengthAttributeAdapterClass = interface(DNObjectClass)
  ['{22D74CC7-53B3-56C8-A057-9003FC5EB3FF}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: DDN.System.ComponentModel.DataAnnotations.DNStringLengthAttribute): DNStringLengthAttributeAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.StringLengthAttributeAdapter')]
  DNStringLengthAttributeAdapter = interface(DNObject)
  ['{A10DA963-F7B2-3547-832E-BBB0112AEA9A}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNStringLengthAttributeAdapter = class(TDNGenericImport<DNStringLengthAttributeAdapterClass, DNStringLengthAttributeAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDataAnnotationsModelValidatorClass<TAttribute> = interface(DNDataAnnotationsModelValidatorClass)
  ['{3F52C625-F68B-54DD-96A6-2F9C35C4778C}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext; attribute: TAttribute): DNDataAnnotationsModelValidator<TAttribute>;

  end;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelValidator`1')]
  DNDataAnnotationsModelValidator<TAttribute> = interface(DNDataAnnotationsModelValidator)
  ['{C6D2E887-6672-3742-9A23-53D37E102F15}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNDataAnnotationsModelValidator<TAttribute> = class(TDNGenericImport<DNDataAnnotationsModelValidatorClass<TAttribute>, DNDataAnnotationsModelValidator<TAttribute>>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNValidatableObjectAdapterClass = interface(DNModelValidatorClass)
  ['{27D6A7D7-4C32-5971-9D00-8AC9228FE6B2}']
  { constructors } 

    {class} function init(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DNValidatableObjectAdapter;

  end;

  [DNTypeName('System.Web.ModelBinding.ValidatableObjectAdapter')]
  DNValidatableObjectAdapter = interface(DNModelValidator)
  ['{03C6F32F-F1D3-34D8-8982-2E71DDCC8AB6}']
  { getters & setters } 

    function get_IsRequired: Boolean;

  { methods } 

    function Validate(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNIEnumerable<DNModelValidationResult>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsRequired: Boolean read get_IsRequired;
  end;

  TDNValidatableObjectAdapter = class(TDNGenericImport<DNValidatableObjectAdapterClass, DNValidatableObjectAdapter>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatorProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0CBF2F5D-39D3-5322-931A-D3D22A6886B8}']
  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidatorProvider')]
  DNModelValidatorProvider = interface(DDN.mscorlib.DNObject)
  ['{5A74DBB5-31F5-37F1-AA05-F785A06A451B}']
  { methods } 

    function GetValidators(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelValidatorProvider = class(TDNGenericImport<DNModelValidatorProviderClass, DNModelValidatorProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNAssociatedValidatorProviderClass = interface(DNModelValidatorProviderClass)
  ['{6EAFAF93-8762-5CF2-9458-BFC8830730AD}']
  end;

  [DNTypeName('System.Web.ModelBinding.AssociatedValidatorProvider')]
  DNAssociatedValidatorProvider = interface(DNModelValidatorProvider)
  ['{4954EBF2-8594-33C2-ABD5-C3B59A20BABD}']
  { methods } 

    function GetValidators(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAssociatedValidatorProvider = class(TDNGenericImport<DNAssociatedValidatorProviderClass, DNAssociatedValidatorProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNDataAnnotationsModelValidatorProviderClass = interface(DNAssociatedValidatorProviderClass)
  ['{E19FFA28-3B80-5F3F-A40B-80B178E38FC0}']
  { static getter & setter } 

    {class} function get_AddImplicitRequiredAttributeForValueTypes: Boolean;
    {class} procedure set_AddImplicitRequiredAttributeForValueTypes(value: Boolean);

  { constructors } 

    {class} function init: DNDataAnnotationsModelValidatorProvider;

  { static methods } 

    {class} procedure RegisterAdapterFactory(attributeType: DDN.mscorlib.DNType; factory: DNDataAnnotationsModelValidationFactory);
    {class} procedure RegisterDefaultAdapterFactory(factory: DNDataAnnotationsModelValidationFactory);
    {class} procedure RegisterValidatableObjectAdapterFactory(modelType: DDN.mscorlib.DNType; factory: DNDataAnnotationsValidatableObjectAdapterFactory);
    {class} procedure RegisterDefaultValidatableObjectAdapterFactory(factory: DNDataAnnotationsValidatableObjectAdapterFactory);
    {class} procedure RegisterAdapter(attributeType: DDN.mscorlib.DNType; adapterType: DDN.mscorlib.DNType);
    {class} procedure RegisterDefaultAdapter(adapterType: DDN.mscorlib.DNType);
    {class} procedure RegisterValidatableObjectAdapter(modelType: DDN.mscorlib.DNType; adapterType: DDN.mscorlib.DNType);
    {class} procedure RegisterDefaultValidatableObjectAdapter(adapterType: DDN.mscorlib.DNType);

  { static propertys } 

    {class} property AddImplicitRequiredAttributeForValueTypes: Boolean read get_AddImplicitRequiredAttributeForValueTypes write set_AddImplicitRequiredAttributeForValueTypes;
  end;

  [DNTypeName('System.Web.ModelBinding.DataAnnotationsModelValidatorProvider')]
  DNDataAnnotationsModelValidatorProvider = interface(DNAssociatedValidatorProvider)
  ['{623D5864-EA0F-3C4D-B9CB-C281E6373CA2}']
  { methods } 

    function GetValidators(metadata: DNModelMetadata; context: DNModelBindingExecutionContext): DDN.mscorlib.DNIEnumerable<DNModelValidator>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataAnnotationsModelValidatorProvider = class(TDNGenericImport<DNDataAnnotationsModelValidatorProviderClass, DNDataAnnotationsModelValidatorProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNModelValidatorProvidersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{73FD9622-222C-55A2-86B8-36C4B76E055F}']
  { static getter & setter } 

    {class} function get_Providers: DNModelValidatorProviderCollection;

  { static propertys } 

    {class} property Providers: DNModelValidatorProviderCollection read get_Providers;
  end;

  [DNTypeName('System.Web.ModelBinding.ModelValidatorProviders')]
  DNModelValidatorProviders = interface(DDN.mscorlib.DNObject)
  ['{0931B3B4-F40A-3BB2-A8E7-5AF0C7F55B84}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNModelValidatorProviders = class(TDNGenericImport<DNModelValidatorProvidersClass, DNModelValidatorProviders>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNMutableObjectModelBinderClass = interface(DNObjectClass)
  ['{7FB6A06E-2926-5E2C-AE92-024865DBACB6}']
  { constructors } 

    {class} function init: DNMutableObjectModelBinder;

  end;

  [DNTypeName('System.Web.ModelBinding.MutableObjectModelBinder')]
  DNMutableObjectModelBinder = interface(DNIModelBinder)
  ['{1BD6A282-B32F-3A84-8A71-4E9904230D36}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMutableObjectModelBinder = class(TDNGenericImport<DNMutableObjectModelBinderClass, DNMutableObjectModelBinder>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNNameValueCollectionValueProviderClass = interface(DNObjectClass)
  ['{84D941DE-BCAB-5345-B835-8C18AFBE0362}']
  { constructors } 

    {class} function init(collection: DDN.System.DNNameValueCollection; culture: DDN.mscorlib.DNCultureInfo): DNNameValueCollectionValueProvider; overload;
    {class} function init(collection: DDN.System.DNNameValueCollection; unvalidatedCollection: DDN.System.DNNameValueCollection; culture: DDN.mscorlib.DNCultureInfo): DNNameValueCollectionValueProvider; overload;

  end;

  [DNTypeName('System.Web.ModelBinding.NameValueCollectionValueProvider')]
  DNNameValueCollectionValueProvider = interface(DNIValueProvider)
  ['{A3549131-6FC1-3417-BDB0-858F7025609E}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult; overload;
    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameValueCollectionValueProvider = class(TDNGenericImport<DNNameValueCollectionValueProviderClass, DNNameValueCollectionValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNFormValueProviderClass = interface(DNNameValueCollectionValueProviderClass)
  ['{CEB5EE86-245E-5917-9EB7-92F721FB8A87}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNFormValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.FormValueProvider')]
  DNFormValueProvider = interface(DNNameValueCollectionValueProvider)
  ['{165C6771-E9D2-3F92-A516-70B8B2FC17E3}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult; overload;
    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFormValueProvider = class(TDNGenericImport<DNFormValueProviderClass, DNFormValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNQueryStringValueProviderClass = interface(DNNameValueCollectionValueProviderClass)
  ['{9F23C6A9-D636-513D-B8CC-160A1D174B05}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNQueryStringValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.QueryStringValueProvider')]
  DNQueryStringValueProvider = interface(DNNameValueCollectionValueProvider)
  ['{CC5227AD-6BCF-39FF-BD5C-475C6353E11F}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult; overload;
    function GetValue(key: string; skipValidation: Boolean): DNValueProviderResult; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQueryStringValueProvider = class(TDNGenericImport<DNQueryStringValueProviderClass, DNQueryStringValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNSimpleValueProviderClass = interface(DNObjectClass)
  ['{96F27AB1-CB8A-5F1F-B3A6-7A6600C33A7F}']
  end;

  [DNTypeName('System.Web.ModelBinding.SimpleValueProvider')]
  DNSimpleValueProvider = interface(DNIValueProvider)
  ['{3DCBADF1-1AA9-3857-9B07-558A1D27C6EC}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSimpleValueProvider = class(TDNGenericImport<DNSimpleValueProviderClass, DNSimpleValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNControlValueProviderClass = interface(DNSimpleValueProviderClass)
  ['{79E8F0DA-A795-5FD4-926F-D49D44FA413F}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext; propertyName: string): DNControlValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.ControlValueProvider')]
  DNControlValueProvider = interface(DNSimpleValueProvider)
  ['{A6B65CF1-3EF2-352F-AC6D-D70608F0E654}']
  { getters & setters } 

    function get_PropertyName: string;

  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PropertyName: string read get_PropertyName;
  end;

  TDNControlValueProvider = class(TDNGenericImport<DNControlValueProviderClass, DNControlValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNProfileValueProviderClass = interface(DNSimpleValueProviderClass)
  ['{BACB9D3C-18F2-5008-A9B8-6689CAC422D5}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNProfileValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.ProfileValueProvider')]
  DNProfileValueProvider = interface(DNSimpleValueProvider)
  ['{54B4AE90-DCE0-384B-9884-38E42463EA53}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProfileValueProvider = class(TDNGenericImport<DNProfileValueProviderClass, DNProfileValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNUserProfileValueProviderClass = interface(DNSimpleValueProviderClass)
  ['{0ED05956-AC7B-58BF-A7EE-F6F5CDADDACE}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNUserProfileValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.UserProfileValueProvider')]
  DNUserProfileValueProvider = interface(DNSimpleValueProvider)
  ['{BFEB8E6F-7744-3632-87BD-E34B1EA39272}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUserProfileValueProvider = class(TDNGenericImport<DNUserProfileValueProviderClass, DNUserProfileValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNViewStateValueProviderClass = interface(DNSimpleValueProviderClass)
  ['{DE384945-2413-5EC6-8D43-3EFF4F764C0D}']
  { constructors } 

    {class} function init(modelBindingExecutionContext: DNModelBindingExecutionContext): DNViewStateValueProvider;

  end;

  [DNTypeName('System.Web.ModelBinding.ViewStateValueProvider')]
  DNViewStateValueProvider = interface(DNSimpleValueProvider)
  ['{1DF98550-E12D-3A87-971D-15EFFB7E5339}']
  { methods } 

    function ContainsPrefix(prefix: string): Boolean;
    function GetValue(key: string): DNValueProviderResult;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNViewStateValueProvider = class(TDNGenericImport<DNViewStateValueProviderClass, DNViewStateValueProvider>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNTypeConverterModelBinderClass = interface(DNObjectClass)
  ['{069EC9F7-748C-5592-B5A2-1A7F648A87F0}']
  { constructors } 

    {class} function init: DNTypeConverterModelBinder;

  end;

  [DNTypeName('System.Web.ModelBinding.TypeConverterModelBinder')]
  DNTypeConverterModelBinder = interface(DNIModelBinder)
  ['{C357D9BE-D28F-3226-B9A8-6FA4355FD4A5}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeConverterModelBinder = class(TDNGenericImport<DNTypeConverterModelBinderClass, DNTypeConverterModelBinder>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNTypeMatchModelBinderClass = interface(DNObjectClass)
  ['{1B641639-08B0-51D4-A6A1-6295E5AF3BBF}']
  { constructors } 

    {class} function init: DNTypeMatchModelBinder;

  end;

  [DNTypeName('System.Web.ModelBinding.TypeMatchModelBinder')]
  DNTypeMatchModelBinder = interface(DNIModelBinder)
  ['{8392150C-3815-33DB-B0E1-B2C84478F093}']
  { methods } 

    function BindModel(modelBindingExecutionContext: DNModelBindingExecutionContext; bindingContext: DNModelBindingContext): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTypeMatchModelBinder = class(TDNGenericImport<DNTypeMatchModelBinderClass, DNTypeMatchModelBinder>) end;

  //-------------namespace: System.Web.ModelBinding----------------
  DNValueProviderResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A07BF28-5AF8-536E-B778-E07DA8244D82}']
  { constructors } 

    {class} function init(rawValue: DDN.mscorlib.DNObject; attemptedValue: string; culture: DDN.mscorlib.DNCultureInfo): DNValueProviderResult;

  end;

  [DNTypeName('System.Web.ModelBinding.ValueProviderResult')]
  DNValueProviderResult = interface(DDN.mscorlib.DNObject)
  ['{3CF3ADE0-C788-3939-AB44-1B27929FC0D6}']
  { getters & setters } 

    function get_AttemptedValue: string;
    function get_Culture: DDN.mscorlib.DNCultureInfo;
    function get_RawValue: DDN.mscorlib.DNObject;

  { methods } 

    function ConvertTo(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function ConvertTo(&type: DDN.mscorlib.DNType; culture: DDN.mscorlib.DNCultureInfo): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AttemptedValue: string read get_AttemptedValue;
    property Culture: DDN.mscorlib.DNCultureInfo read get_Culture;
    property RawValue: DDN.mscorlib.DNObject read get_RawValue;
  end;

  TDNValueProviderResult = class(TDNGenericImport<DNValueProviderResultClass, DNValueProviderResult>) end;

  //-------------namespace: System.Web----------------
  DNParserErrorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B8F23B6E-89CF-5B74-B046-C6CC8290F8A3}']
  { constructors } 

    {class} function init: DNParserError; overload;
    {class} function init(errorText: string; virtualPath: string; line: Int32): DNParserError; overload;

  end;

  [DNTypeName('System.Web.ParserError')]
  DNParserError = interface(DDN.mscorlib.DNObject)
  ['{B4C4625D-7FC4-38A4-8757-F41D7B30D86B}']
  { getters & setters } 

    function get_VirtualPath: string;
    procedure set_VirtualPath(value: string);
    function get_ErrorText: string;
    procedure set_ErrorText(value: string);
    function get_Line: Int32;
    procedure set_Line(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VirtualPath: string read get_VirtualPath write set_VirtualPath;
    property ErrorText: string read get_ErrorText write set_ErrorText;
    property Line: Int32 read get_Line write set_Line;
  end;

  TDNParserError = class(TDNGenericImport<DNParserErrorClass, DNParserError>) end;

  //-------------namespace: System.Web----------------
  DNProcessInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{99A03752-E31B-5C15-B5E1-0C61547DEA6D}']
  { constructors } 

    {class} function init(startTime: DDN.mscorlib.DNDateTime; age: DDN.mscorlib.DNTimeSpan; processID: Int32; requestCount: Int32; status: DNProcessStatus; shutdownReason: DNProcessShutdownReason; peakMemoryUsed: Int32): DNProcessInfo; overload;
    {class} function init: DNProcessInfo; overload;

  end;

  [DNTypeName('System.Web.ProcessInfo')]
  DNProcessInfo = interface(DDN.mscorlib.DNObject)
  ['{3AB2DE37-3AB3-3CFB-9BF2-716701E52D6A}']
  { getters & setters } 

    function get_StartTime: DDN.mscorlib.DNDateTime;
    function get_Age: DDN.mscorlib.DNTimeSpan;
    function get_ProcessID: Int32;
    function get_RequestCount: Int32;
    function get_Status: DNProcessStatus;
    function get_ShutdownReason: DNProcessShutdownReason;
    function get_PeakMemoryUsed: Int32;

  { methods } 

    procedure SetAll(startTime: DDN.mscorlib.DNDateTime; age: DDN.mscorlib.DNTimeSpan; processID: Int32; requestCount: Int32; status: DNProcessStatus; shutdownReason: DNProcessShutdownReason; peakMemoryUsed: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StartTime: DDN.mscorlib.DNDateTime read get_StartTime;
    property Age: DDN.mscorlib.DNTimeSpan read get_Age;
    property ProcessID: Int32 read get_ProcessID;
    property RequestCount: Int32 read get_RequestCount;
    property Status: DNProcessStatus read get_Status;
    property ShutdownReason: DNProcessShutdownReason read get_ShutdownReason;
    property PeakMemoryUsed: Int32 read get_PeakMemoryUsed;
  end;

  TDNProcessInfo = class(TDNGenericImport<DNProcessInfoClass, DNProcessInfo>) end;

  //-------------namespace: System.Web----------------
  DNProcessModelInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{58CCF8BB-2488-54DF-A668-9FD7B3B30573}']
  { constructors } 

    {class} function init: DNProcessModelInfo;

  { static methods } 

    {class} function GetCurrentProcessInfo: DNProcessInfo;
    {class} function GetHistory(numRecords: Int32): TArray<DNProcessInfo>;

  end;

  [DNTypeName('System.Web.ProcessModelInfo')]
  DNProcessModelInfo = interface(DDN.mscorlib.DNObject)
  ['{C1DBA5B6-CC4C-33DD-8B9B-5AAC84663153}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProcessModelInfo = class(TDNGenericImport<DNProcessModelInfoClass, DNProcessModelInfo>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileGroupBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{13780E25-223E-56E5-914E-77AAFCDC1999}']
  { constructors } 

    {class} function init: DNProfileGroupBase;

  end;

  [DNTypeName('System.Web.Profile.ProfileGroupBase')]
  DNProfileGroupBase = interface(DDN.mscorlib.DNObject)
  ['{B879266D-111E-309C-B48C-19E9EB640FE6}']
  { getters & setters } 

    function get_Item(propertyName: string): DDN.mscorlib.DNObject;
    procedure set_Item(propertyName: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function GetPropertyValue(propertyName: string): DDN.mscorlib.DNObject;
    procedure SetPropertyValue(propertyName: string; propertyValue: DDN.mscorlib.DNObject);
    procedure Init(parent: DNProfileBase; myName: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[propertyName: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  TDNProfileGroupBase = class(TDNGenericImport<DNProfileGroupBaseClass, DNProfileGroupBase>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{115DA150-69E0-50EB-8A8F-B653D55071E8}']
  { constructors } 

    {class} function init(username: string; isAnonymous: Boolean; lastActivityDate: DDN.mscorlib.DNDateTime; lastUpdatedDate: DDN.mscorlib.DNDateTime; size: Int32): DNProfileInfo;

  end;

  [DNTypeName('System.Web.Profile.ProfileInfo')]
  DNProfileInfo = interface(DDN.mscorlib.DNObject)
  ['{361DDA21-06DF-361E-871C-82ED8CE2FF09}']
  { getters & setters } 

    function get_UserName: string;
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_IsAnonymous: Boolean;
    function get_Size: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UserName: string read get_UserName;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property IsAnonymous: Boolean read get_IsAnonymous;
    property Size: Int32 read get_Size;
  end;

  TDNProfileInfo = class(TDNGenericImport<DNProfileInfoClass, DNProfileInfo>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileInfoCollectionClass = interface(DNObjectClass)
  ['{2AC755E7-1232-5750-B861-2EB2470835D6}']
  { constructors } 

    {class} function init: DNProfileInfoCollection;

  end;

  [DNTypeName('System.Web.Profile.ProfileInfoCollection')]
  DNProfileInfoCollection = interface(DDN.mscorlib.DNIEnumerable)
  ['{391ABDDC-7535-3B0E-9872-B17FF25ACE80}']
  { getters & setters } 

    function get_Item(name: string): DNProfileInfo;
    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(profileInfo: DNProfileInfo);
    procedure Remove(name: string);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNProfileInfo>; index: Int32); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[name: string]: DNProfileInfo read get_Item; default;
    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNProfileInfoCollection = class(TDNGenericImport<DNProfileInfoCollectionClass, DNProfileInfoCollection>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{458FAB0C-51A3-59A9-8965-B72EE3501511}']
  { static getter & setter } 

    {class} function get_Enabled: Boolean;
    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);
    {class} function get_AutomaticSaveEnabled: Boolean;
    {class} function get_Provider: DNProfileProvider;
    {class} function get_Providers: DNProfileProviderCollection;

  { static methods } 

    {class} procedure AddDynamicProfileProperty(&property: DNProfilePropertySettings);
    {class} function DeleteProfile(username: string): Boolean;
    {class} function DeleteProfiles(profiles: DNProfileInfoCollection): Int32; overload;
    {class} function DeleteProfiles(usernames: TArray<string>): Int32; overload;
    {class} function DeleteInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    {class} function GetNumberOfProfiles(authenticationOption: DNProfileAuthenticationOption): Int32;
    {class} function GetNumberOfInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32;
    {class} function GetAllProfiles(authenticationOption: DNProfileAuthenticationOption): DNProfileInfoCollection; overload;
    {class} function GetAllProfiles(authenticationOption: DNProfileAuthenticationOption; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection; overload;
    {class} function GetAllInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime): DNProfileInfoCollection; overload;
    {class} function GetAllInactiveProfiles(authenticationOption: DNProfileAuthenticationOption; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection; overload;
    {class} function FindProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string): DNProfileInfoCollection; overload;
    {class} function FindProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection; overload;
    {class} function FindInactiveProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): DNProfileInfoCollection; overload;
    {class} function FindInactiveProfilesByUserName(authenticationOption: DNProfileAuthenticationOption; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNProfileInfoCollection; overload;

  { static propertys } 

    {class} property Enabled: Boolean read get_Enabled;
    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    {class} property AutomaticSaveEnabled: Boolean read get_AutomaticSaveEnabled;
    {class} property Provider: DNProfileProvider read get_Provider;
    {class} property Providers: DNProfileProviderCollection read get_Providers;
  end;

  [DNTypeName('System.Web.Profile.ProfileManager')]
  DNProfileManager = interface(DDN.mscorlib.DNObject)
  ['{B37D6150-2A94-3F39-998D-FF514D47A436}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProfileManager = class(TDNGenericImport<DNProfileManagerClass, DNProfileManager>) end;

  //-------------namespace: System.Web.Profile----------------
  DNProfileModuleClass = interface(DNObjectClass)
  ['{96A50ED3-5145-5BD6-8EF0-53E8F900B47A}']
  { constructors } 

    {class} function init: DNProfileModule;

  end;

  [DNTypeName('System.Web.Profile.ProfileModule')]
  DNProfileModule = interface(DNIHttpModule)
  ['{3C02E8AE-CB73-3AAF-85AA-38577ED1D3ED}']
  { events } 

    procedure add_Personalize(value: DNProfileEventHandler);
    procedure remove_Personalize(value: DNProfileEventHandler);
    procedure add_MigrateAnonymous(value: DNProfileMigrateEventHandler);
    procedure remove_MigrateAnonymous(value: DNProfileMigrateEventHandler);
    procedure add_ProfileAutoSaving(value: DNProfileAutoSaveEventHandler);
    procedure remove_ProfileAutoSaving(value: DNProfileAutoSaveEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNProfileModule = class(TDNGenericImport<DNProfileModuleClass, DNProfileModule>) end;

  //-------------namespace: System.Web.Routing----------------
  DNHttpMethodConstraintClass = interface(DNObjectClass)
  ['{D40C708D-FEBD-5D8C-9482-0DA06F8927D6}']
  { constructors } 

    {class} function init(allowedMethods: TArray<string>): DNHttpMethodConstraint;

  end;

  [DNTypeName('System.Web.Routing.HttpMethodConstraint')]
  DNHttpMethodConstraint = interface(DNIRouteConstraint)
  ['{9EED6DA1-2243-3316-B483-CA643B96D7C9}']
  { getters & setters } 

    function get_AllowedMethods: DDN.mscorlib.DNICollection<string>;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowedMethods: DDN.mscorlib.DNICollection<string> read get_AllowedMethods;
  end;

  TDNHttpMethodConstraint = class(TDNGenericImport<DNHttpMethodConstraintClass, DNHttpMethodConstraint>) end;

  //-------------namespace: System.Web.Routing----------------
  DNPageRouteHandlerClass = interface(DNObjectClass)
  ['{B378A656-C698-5B04-A310-2354E715454B}']
  { constructors } 

    {class} function init(virtualPath: string): DNPageRouteHandler; overload;
    {class} function init(virtualPath: string; checkPhysicalUrlAccess: Boolean): DNPageRouteHandler; overload;

  end;

  [DNTypeName('System.Web.Routing.PageRouteHandler')]
  DNPageRouteHandler = interface(DNIRouteHandler)
  ['{B8E1ECE2-6151-3271-9519-0E6FF6EFEA1E}']
  { getters & setters } 

    function get_VirtualPath: string;
    function get_CheckPhysicalUrlAccess: Boolean;

  { methods } 

    function GetHttpHandler(requestContext: DNRequestContext): DNIHttpHandler;
    function GetSubstitutedVirtualPath(requestContext: DNRequestContext): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property VirtualPath: string read get_VirtualPath;
    property CheckPhysicalUrlAccess: Boolean read get_CheckPhysicalUrlAccess;
  end;

  TDNPageRouteHandler = class(TDNGenericImport<DNPageRouteHandlerClass, DNPageRouteHandler>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRequestContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0BFBA80F-C721-56C8-BED5-F3799F88F6CD}']
  { constructors } 

    {class} function init: DNRequestContext; overload;
    {class} function init(httpContext: DNHttpContextBase; routeData: DNRouteData): DNRequestContext; overload;

  end;

  [DNTypeName('System.Web.Routing.RequestContext')]
  DNRequestContext = interface(DDN.mscorlib.DNObject)
  ['{9CEDF4BC-03D5-30BC-A283-9F04469B3D84}']
  { getters & setters } 

    function get_HttpContext: DNHttpContextBase;
    procedure set_HttpContext(value: DNHttpContextBase);
    function get_RouteData: DNRouteData;
    procedure set_RouteData(value: DNRouteData);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HttpContext: DNHttpContextBase read get_HttpContext write set_HttpContext;
    property RouteData: DNRouteData read get_RouteData write set_RouteData;
  end;

  TDNRequestContext = class(TDNGenericImport<DNRequestContextClass, DNRequestContext>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8668BF2B-952A-50E7-BDEC-CCC3366791D9}']
  end;

  [DNTypeName('System.Web.Routing.RouteBase')]
  DNRouteBase = interface(DDN.mscorlib.DNObject)
  ['{A9E91DDC-850D-3A31-AF8E-B84FE2F43662}']
  { getters & setters } 

    function get_RouteExistingFiles: Boolean;
    procedure set_RouteExistingFiles(value: Boolean);

  { methods } 

    function GetRouteData(httpContext: DNHttpContextBase): DNRouteData;
    function GetVirtualPath(requestContext: DNRequestContext; values: DNRouteValueDictionary): DNVirtualPathData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RouteExistingFiles: Boolean read get_RouteExistingFiles write set_RouteExistingFiles;
  end;

  TDNRouteBase = class(TDNGenericImport<DNRouteBaseClass, DNRouteBase>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteClass = interface(DNRouteBaseClass)
  ['{F2546556-5AB6-58D7-9B98-F31A2BFDEC2C}']
  { constructors } 

    {class} function init(url: string; routeHandler: DNIRouteHandler): DNRoute; overload;
    {class} function init(url: string; defaults: DNRouteValueDictionary; routeHandler: DNIRouteHandler): DNRoute; overload;
    {class} function init(url: string; defaults: DNRouteValueDictionary; constraints: DNRouteValueDictionary; routeHandler: DNIRouteHandler): DNRoute; overload;
    {class} function init(url: string; defaults: DNRouteValueDictionary; constraints: DNRouteValueDictionary; dataTokens: DNRouteValueDictionary; routeHandler: DNIRouteHandler): DNRoute; overload;

  end;

  [DNTypeName('System.Web.Routing.Route')]
  DNRoute = interface(DNRouteBase)
  ['{066DF590-F68A-370B-AEE7-30667D839220}']
  { getters & setters } 

    function get_Constraints: DNRouteValueDictionary;
    procedure set_Constraints(value: DNRouteValueDictionary);
    function get_DataTokens: DNRouteValueDictionary;
    procedure set_DataTokens(value: DNRouteValueDictionary);
    function get_Defaults: DNRouteValueDictionary;
    procedure set_Defaults(value: DNRouteValueDictionary);
    function get_RouteHandler: DNIRouteHandler;
    procedure set_RouteHandler(value: DNIRouteHandler);
    function get_Url: string;
    procedure set_Url(value: string);
    function get_RouteExistingFiles: Boolean;
    procedure set_RouteExistingFiles(value: Boolean);

  { methods } 

    function GetRouteData(httpContext: DNHttpContextBase): DNRouteData;
    function GetVirtualPath(requestContext: DNRequestContext; values: DNRouteValueDictionary): DNVirtualPathData;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Constraints: DNRouteValueDictionary read get_Constraints write set_Constraints;
    property DataTokens: DNRouteValueDictionary read get_DataTokens write set_DataTokens;
    property Defaults: DNRouteValueDictionary read get_Defaults write set_Defaults;
    property RouteHandler: DNIRouteHandler read get_RouteHandler write set_RouteHandler;
    property Url: string read get_Url write set_Url;
    property RouteExistingFiles: Boolean read get_RouteExistingFiles write set_RouteExistingFiles;
  end;

  TDNRoute = class(TDNGenericImport<DNRouteClass, DNRoute>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{95640BC3-2998-5780-AAEF-535AFD34E5E5}']
  { constructors } 

    {class} function init: DNRouteData; overload;
    {class} function init(route: DNRouteBase; routeHandler: DNIRouteHandler): DNRouteData; overload;

  end;

  [DNTypeName('System.Web.Routing.RouteData')]
  DNRouteData = interface(DDN.mscorlib.DNObject)
  ['{B8C36697-7A12-31B7-BA0C-623DF1929DBA}']
  { getters & setters } 

    function get_DataTokens: DNRouteValueDictionary;
    function get_Route: DNRouteBase;
    procedure set_Route(value: DNRouteBase);
    function get_RouteHandler: DNIRouteHandler;
    procedure set_RouteHandler(value: DNIRouteHandler);
    function get_Values: DNRouteValueDictionary;

  { methods } 

    function GetRequiredString(valueName: string): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataTokens: DNRouteValueDictionary read get_DataTokens;
    property Route: DNRouteBase read get_Route write set_Route;
    property RouteHandler: DNIRouteHandler read get_RouteHandler write set_RouteHandler;
    property Values: DNRouteValueDictionary read get_Values;
  end;

  TDNRouteData = class(TDNGenericImport<DNRouteDataClass, DNRouteData>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{471B0E09-0729-58C3-B83E-962A897CAD26}']
  { static getter & setter } 

    {class} function get_Routes: DNRouteCollection;

  { constructors } 

    {class} function init: DNRouteTable;

  { static propertys } 

    {class} property Routes: DNRouteCollection read get_Routes;
  end;

  [DNTypeName('System.Web.Routing.RouteTable')]
  DNRouteTable = interface(DDN.mscorlib.DNObject)
  ['{79F49472-9FDF-3894-A6EF-42A0D3398A46}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRouteTable = class(TDNGenericImport<DNRouteTableClass, DNRouteTable>) end;

  //-------------namespace: System.Web.Routing----------------
  DNRouteValueDictionaryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A31D8D24-3CAB-5E80-B035-F49AC28F8BFF}']
  { constructors } 

    {class} function init: DNRouteValueDictionary; overload;
    {class} function init(values: DDN.mscorlib.DNObject): DNRouteValueDictionary; overload;
    {class} function init(dictionary: DDN.mscorlib.DNIDictionary<string, DDN.mscorlib.DNObject>): DNRouteValueDictionary; overload;

  end;

  [DNTypeName('System.Web.Routing.RouteValueDictionary')]
  DNRouteValueDictionary = interface(DDN.mscorlib.DNObject)
  ['{C836065B-DCBC-327A-80AE-02D1995D259F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNDictionary_KeyCollection<string, DDN.mscorlib.DNObject>;
    function get_Values: DDN.mscorlib.DNDictionary_ValueCollection<string, DDN.mscorlib.DNObject>;

  { methods } 

    function ContainsKey(key: string): Boolean;
    function ContainsValue(value: DDN.mscorlib.DNObject): Boolean;
    function GetEnumerator: DDN.mscorlib.DNDictionary_Enumerator<string, DDN.mscorlib.DNObject>;
    function TryGetValue(key: string; out value: DDN.mscorlib.DNObject): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNDictionary_KeyCollection<string, DDN.mscorlib.DNObject> read get_Keys;
    property Values: DDN.mscorlib.DNDictionary_ValueCollection<string, DDN.mscorlib.DNObject> read get_Values;
  end;

  TDNRouteValueDictionary = class(TDNGenericImport<DNRouteValueDictionaryClass, DNRouteValueDictionary>) end;

  //-------------namespace: System.Web.Routing----------------
  DNStopRoutingHandlerClass = interface(DNObjectClass)
  ['{FC9494E3-A4C4-5889-9620-D1D23BA81417}']
  { constructors } 

    {class} function init: DNStopRoutingHandler;

  end;

  [DNTypeName('System.Web.Routing.StopRoutingHandler')]
  DNStopRoutingHandler = interface(DNIRouteHandler)
  ['{0CB3BA50-9FF2-3773-B208-ADC6103FA340}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStopRoutingHandler = class(TDNGenericImport<DNStopRoutingHandlerClass, DNStopRoutingHandler>) end;

  //-------------namespace: System.Web.Routing----------------
  DNUrlRoutingHandlerClass = interface(DNObjectClass)
  ['{372565E8-9908-537D-A9E2-94279E991DD5}']
  end;

  [DNTypeName('System.Web.Routing.UrlRoutingHandler')]
  DNUrlRoutingHandler = interface(DNIHttpHandler)
  ['{21D4B425-CB80-34D9-A5EC-8E21C910345C}']
  { getters & setters } 

    function get_RouteCollection: DNRouteCollection;
    procedure set_RouteCollection(value: DNRouteCollection);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RouteCollection: DNRouteCollection read get_RouteCollection write set_RouteCollection;
  end;

  TDNUrlRoutingHandler = class(TDNGenericImport<DNUrlRoutingHandlerClass, DNUrlRoutingHandler>) end;

  //-------------namespace: System.Web.Routing----------------
  DNUrlRoutingModuleClass = interface(DNObjectClass)
  ['{E099770A-5A33-536B-BDBC-C595372391F6}']
  { constructors } 

    {class} function init: DNUrlRoutingModule;

  end;

  [DNTypeName('System.Web.Routing.UrlRoutingModule')]
  DNUrlRoutingModule = interface(DNIHttpModule)
  ['{EB9E7E4F-3FB0-3C14-9E59-B93B11E88ED6}']
  { getters & setters } 

    function get_RouteCollection: DNRouteCollection;
    procedure set_RouteCollection(value: DNRouteCollection);

  { methods } 

    procedure PostMapRequestHandler(context: DNHttpContextBase);
    procedure PostResolveRequestCache(context: DNHttpContextBase);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RouteCollection: DNRouteCollection read get_RouteCollection write set_RouteCollection;
  end;

  TDNUrlRoutingModule = class(TDNGenericImport<DNUrlRoutingModuleClass, DNUrlRoutingModule>) end;

  //-------------namespace: System.Web.Routing----------------
  DNVirtualPathDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{604AFBA5-2A85-5157-9B0D-8C872F708585}']
  { constructors } 

    {class} function init(route: DNRouteBase; virtualPath: string): DNVirtualPathData;

  end;

  [DNTypeName('System.Web.Routing.VirtualPathData')]
  DNVirtualPathData = interface(DDN.mscorlib.DNObject)
  ['{3C23A06D-04D8-3E1C-90CD-0B9FBFA79079}']
  { getters & setters } 

    function get_DataTokens: DNRouteValueDictionary;
    function get_Route: DNRouteBase;
    procedure set_Route(value: DNRouteBase);
    function get_VirtualPath: string;
    procedure set_VirtualPath(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataTokens: DNRouteValueDictionary read get_DataTokens;
    property Route: DNRouteBase read get_Route write set_Route;
    property VirtualPath: string read get_VirtualPath write set_VirtualPath;
  end;

  TDNVirtualPathData = class(TDNGenericImport<DNVirtualPathDataClass, DNVirtualPathData>) end;

  //-------------namespace: System.Web.Security----------------
  DNAnonymousIdentificationModuleClass = interface(DNObjectClass)
  ['{E6E90221-6074-528A-8AC7-25553A5CFF61}']
  { static getter & setter } 

    {class} function get_Enabled: Boolean;

  { constructors } 

    {class} function init: DNAnonymousIdentificationModule;

  { static methods } 

    {class} procedure ClearAnonymousIdentifier;

  { static propertys } 

    {class} property Enabled: Boolean read get_Enabled;
  end;

  [DNTypeName('System.Web.Security.AnonymousIdentificationModule')]
  DNAnonymousIdentificationModule = interface(DNIHttpModule)
  ['{4A4C227C-4BD0-336E-8FBA-415616A34DE5}']
  { events } 

    procedure add_Creating(value: DNAnonymousIdentificationEventHandler);
    procedure remove_Creating(value: DNAnonymousIdentificationEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAnonymousIdentificationModule = class(TDNGenericImport<DNAnonymousIdentificationModuleClass, DNAnonymousIdentificationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNDefaultAuthenticationModuleClass = interface(DNObjectClass)
  ['{2120B322-BD3D-5490-9DE1-4999643EA718}']
  { constructors } 

    {class} function init: DNDefaultAuthenticationModule;

  end;

  [DNTypeName('System.Web.Security.DefaultAuthenticationModule')]
  DNDefaultAuthenticationModule = interface(DNIHttpModule)
  ['{D39116DA-9012-3717-BCF5-6D3BEA8694D7}']
  { events } 

    procedure add_Authenticate(value: DNDefaultAuthenticationEventHandler);
    procedure remove_Authenticate(value: DNDefaultAuthenticationEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDefaultAuthenticationModule = class(TDNGenericImport<DNDefaultAuthenticationModuleClass, DNDefaultAuthenticationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNFileAuthorizationModuleClass = interface(DNObjectClass)
  ['{6DE10455-1167-5BEC-8BF5-062ECA3969A5}']
  { constructors } 

    {class} function init: DNFileAuthorizationModule;

  { static methods } 

    {class} function CheckFileAccessForUser(virtualPath: string; token: IntPtr; verb: string): Boolean;

  end;

  [DNTypeName('System.Web.Security.FileAuthorizationModule')]
  DNFileAuthorizationModule = interface(DNIHttpModule)
  ['{07E82E01-A501-34A6-B04A-5DC004DF57AB}']
  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFileAuthorizationModule = class(TDNGenericImport<DNFileAuthorizationModuleClass, DNFileAuthorizationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNFormsAuthenticationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBECD7FA-8282-5534-866D-D96573715A22}']
  { static getter & setter } 

    {class} function get_IsEnabled: Boolean;
    {class} function get_FormsCookieName: string;
    {class} function get_FormsCookiePath: string;
    {class} function get_RequireSSL: Boolean;
    {class} function get_Timeout: DDN.mscorlib.DNTimeSpan;
    {class} function get_SlidingExpiration: Boolean;
    {class} function get_CookieMode: DNHttpCookieMode;
    {class} function get_CookieDomain: string;
    {class} function get_EnableCrossAppRedirects: Boolean;
    {class} function get_TicketCompatibilityMode: DNTicketCompatibilityMode;
    {class} function get_CookieSameSite: DNSameSiteMode;
    {class} function get_CookiesSupported: Boolean;
    {class} function get_LoginUrl: string;
    {class} function get_DefaultUrl: string;

  { constructors } 

    {class} function init: DNFormsAuthentication;

  { static methods } 

    {class} function Encrypt(ticket: DNFormsAuthenticationTicket): string;
    {class} function Authenticate(name: string; password: string): Boolean;
    {class} procedure SetAuthCookie(userName: string; createPersistentCookie: Boolean); overload;
    {class} function GetAuthCookie(userName: string; createPersistentCookie: Boolean): DNHttpCookie; overload;
    {class} function GetAuthCookie(userName: string; createPersistentCookie: Boolean; strCookiePath: string): DNHttpCookie; overload;
    {class} function GetRedirectUrl(userName: string; createPersistentCookie: Boolean): string;
    {class} procedure RedirectFromLoginPage(userName: string; createPersistentCookie: Boolean); overload;
    {class} function RenewTicketIfOld(tOld: DNFormsAuthenticationTicket): DNFormsAuthenticationTicket;
    {class} procedure RedirectToLoginPage; overload;
    {class} procedure RedirectToLoginPage(extraQueryString: string); overload;
    {class} function HashPasswordForStoringInConfigFile(password: string; passwordFormat: string): string;
    {class} procedure RedirectFromLoginPage(userName: string; createPersistentCookie: Boolean; strCookiePath: string); overload;
    {class} procedure EnableFormsAuthentication(configurationData: DDN.System.DNNameValueCollection);
    {class} procedure Initialize;
    {class} function Decrypt(encryptedTicket: string): DNFormsAuthenticationTicket;
    {class} procedure SignOut;
    {class} procedure SetAuthCookie(userName: string; createPersistentCookie: Boolean; strCookiePath: string); overload;

  { static propertys } 

    {class} property IsEnabled: Boolean read get_IsEnabled;
    {class} property FormsCookieName: string read get_FormsCookieName;
    {class} property FormsCookiePath: string read get_FormsCookiePath;
    {class} property RequireSSL: Boolean read get_RequireSSL;
    {class} property Timeout: DDN.mscorlib.DNTimeSpan read get_Timeout;
    {class} property SlidingExpiration: Boolean read get_SlidingExpiration;
    {class} property CookieMode: DNHttpCookieMode read get_CookieMode;
    {class} property CookieDomain: string read get_CookieDomain;
    {class} property EnableCrossAppRedirects: Boolean read get_EnableCrossAppRedirects;
    {class} property TicketCompatibilityMode: DNTicketCompatibilityMode read get_TicketCompatibilityMode;
    {class} property CookieSameSite: DNSameSiteMode read get_CookieSameSite;
    {class} property CookiesSupported: Boolean read get_CookiesSupported;
    {class} property LoginUrl: string read get_LoginUrl;
    {class} property DefaultUrl: string read get_DefaultUrl;
  end;

  [DNTypeName('System.Web.Security.FormsAuthentication')]
  DNFormsAuthentication = interface(DDN.mscorlib.DNObject)
  ['{75906D82-81CD-3078-BF94-44A8E4A7E0CA}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFormsAuthentication = class(TDNGenericImport<DNFormsAuthenticationClass, DNFormsAuthentication>) end;

  //-------------namespace: System.Web.Security----------------
  DNFormsAuthenticationModuleClass = interface(DNObjectClass)
  ['{08B0C30A-0A66-5817-AD98-1C4BD6C2043B}']
  { constructors } 

    {class} function init: DNFormsAuthenticationModule;

  end;

  [DNTypeName('System.Web.Security.FormsAuthenticationModule')]
  DNFormsAuthenticationModule = interface(DNIHttpModule)
  ['{BE8A1614-0818-3AB1-8E0F-112BCD91A76D}']
  { events } 

    procedure add_Authenticate(value: DNFormsAuthenticationEventHandler);
    procedure remove_Authenticate(value: DNFormsAuthenticationEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNFormsAuthenticationModule = class(TDNGenericImport<DNFormsAuthenticationModuleClass, DNFormsAuthenticationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNFormsAuthenticationTicketClass = interface(DDN.mscorlib.DNObjectClass)
  ['{ADB6F25E-A756-55CE-9900-3BBEDC26B2EF}']
  { constructors } 

    {class} function init(version: Int32; name: string; issueDate: DDN.mscorlib.DNDateTime; expiration: DDN.mscorlib.DNDateTime; isPersistent: Boolean; userData: string): DNFormsAuthenticationTicket; overload;
    {class} function init(version: Int32; name: string; issueDate: DDN.mscorlib.DNDateTime; expiration: DDN.mscorlib.DNDateTime; isPersistent: Boolean; userData: string; cookiePath: string): DNFormsAuthenticationTicket; overload;
    {class} function init(name: string; isPersistent: Boolean; timeout: Int32): DNFormsAuthenticationTicket; overload;

  end;

  [DNTypeName('System.Web.Security.FormsAuthenticationTicket')]
  DNFormsAuthenticationTicket = interface(DDN.mscorlib.DNObject)
  ['{B9B4B778-9019-3308-B49A-C41C9DCB5FF9}']
  { getters & setters } 

    function get_Version: Int32;
    function get_Name: string;
    function get_Expiration: DDN.mscorlib.DNDateTime;
    function get_IssueDate: DDN.mscorlib.DNDateTime;
    function get_IsPersistent: Boolean;
    function get_Expired: Boolean;
    function get_UserData: string;
    function get_CookiePath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Version: Int32 read get_Version;
    property Name: string read get_Name;
    property Expiration: DDN.mscorlib.DNDateTime read get_Expiration;
    property IssueDate: DDN.mscorlib.DNDateTime read get_IssueDate;
    property IsPersistent: Boolean read get_IsPersistent;
    property Expired: Boolean read get_Expired;
    property UserData: string read get_UserData;
    property CookiePath: string read get_CookiePath;
  end;

  TDNFormsAuthenticationTicket = class(TDNGenericImport<DNFormsAuthenticationTicketClass, DNFormsAuthenticationTicket>) end;

  //-------------namespace: System.Web.Security----------------
  DNMachineKeyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5FAFF0A8-0EDE-5D48-BD85-1EF9A8B4485E}']
  { static methods } 

    {class} function Encode(data: TArray<Byte>; protectionOption: DNMachineKeyProtection): string;
    {class} function Decode(encodedData: string; protectionOption: DNMachineKeyProtection): TArray<Byte>;
    {class} function Protect(userData: TArray<Byte>; purposes: TArray<string>): TArray<Byte>;
    {class} function Unprotect(protectedData: TArray<Byte>; purposes: TArray<string>): TArray<Byte>;

  end;

  [DNTypeName('System.Web.Security.MachineKey')]
  DNMachineKey = interface(DDN.mscorlib.DNObject)
  ['{3B030737-32A4-3353-9414-40F11012B0A4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMachineKey = class(TDNGenericImport<DNMachineKeyClass, DNMachineKey>) end;

  //-------------namespace: System.Web.Security----------------
  DNMembershipClass = interface(DDN.mscorlib.DNObjectClass)
  ['{68BC6787-8FF0-5678-AA9F-14E91E0F309C}']
  { static getter & setter } 

    {class} function get_EnablePasswordRetrieval: Boolean;
    {class} function get_EnablePasswordReset: Boolean;
    {class} function get_RequiresQuestionAndAnswer: Boolean;
    {class} function get_UserIsOnlineTimeWindow: Int32;
    {class} function get_Providers: DDN.System.Web.ApplicationServices.DNMembershipProviderCollection;
    {class} function get_Provider: DDN.System.Web.ApplicationServices.DNMembershipProvider;
    {class} function get_HashAlgorithmType: string;
    {class} function get_MaxInvalidPasswordAttempts: Int32;
    {class} function get_PasswordAttemptWindow: Int32;
    {class} function get_MinRequiredPasswordLength: Int32;
    {class} function get_MinRequiredNonAlphanumericCharacters: Int32;
    {class} function get_PasswordStrengthRegularExpression: string;
    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);

  { static methods } 

    {class} function CreateUser(username: string; password: string): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; out status: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUser: DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUser(userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUser(username: string): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUser(providerUserKey: DDN.mscorlib.DNObject): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetAllUsers: DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;
    {class} function CreateUser(username: string; password: string; email: string): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function CreateUser(username: string; password: string; email: string; passwordQuestion: string; passwordAnswer: string; isApproved: Boolean; providerUserKey: DDN.mscorlib.DNObject; out status: DDN.System.Web.ApplicationServices.DNMembershipCreateStatus): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function ValidateUser(username: string; password: string): Boolean;
    {class} function GetUser(username: string; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUser(providerUserKey: DDN.mscorlib.DNObject; userIsOnline: Boolean): DDN.System.Web.ApplicationServices.DNMembershipUser; overload;
    {class} function GetUserNameByEmail(emailToMatch: string): string;
    {class} function DeleteUser(username: string): Boolean; overload;
    {class} function DeleteUser(username: string; deleteAllRelatedData: Boolean): Boolean; overload;
    {class} procedure UpdateUser(user: DDN.System.Web.ApplicationServices.DNMembershipUser);
    {class} function GetAllUsers(pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;
    {class} function GetNumberOfUsersOnline: Int32;
    {class} function GeneratePassword(length: Int32; numberOfNonAlphanumericCharacters: Int32): string;
    {class} function FindUsersByName(usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;
    {class} function FindUsersByName(usernameToMatch: string): DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;
    {class} function FindUsersByEmail(emailToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;
    {class} function FindUsersByEmail(emailToMatch: string): DDN.System.Web.ApplicationServices.DNMembershipUserCollection; overload;

  { static propertys } 

    {class} property EnablePasswordRetrieval: Boolean read get_EnablePasswordRetrieval;
    {class} property EnablePasswordReset: Boolean read get_EnablePasswordReset;
    {class} property RequiresQuestionAndAnswer: Boolean read get_RequiresQuestionAndAnswer;
    {class} property UserIsOnlineTimeWindow: Int32 read get_UserIsOnlineTimeWindow;
    {class} property Providers: DDN.System.Web.ApplicationServices.DNMembershipProviderCollection read get_Providers;
    {class} property Provider: DDN.System.Web.ApplicationServices.DNMembershipProvider read get_Provider;
    {class} property HashAlgorithmType: string read get_HashAlgorithmType;
    {class} property MaxInvalidPasswordAttempts: Int32 read get_MaxInvalidPasswordAttempts;
    {class} property PasswordAttemptWindow: Int32 read get_PasswordAttemptWindow;
    {class} property MinRequiredPasswordLength: Int32 read get_MinRequiredPasswordLength;
    {class} property MinRequiredNonAlphanumericCharacters: Int32 read get_MinRequiredNonAlphanumericCharacters;
    {class} property PasswordStrengthRegularExpression: string read get_PasswordStrengthRegularExpression;
    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
  end;

  [DNTypeName('System.Web.Security.Membership')]
  DNMembership = interface(DDN.mscorlib.DNObject)
  ['{4BD57D71-7CDE-3D08-B65A-879E24381DB5}']
  { events } 

    {class} procedure add_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);
    {class} procedure remove_ValidatingPassword(value: DDN.System.Web.ApplicationServices.DNMembershipValidatePasswordEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMembership = class(TDNGenericImport<DNMembershipClass, DNMembership>) end;

  //-------------namespace: System.Web.Security----------------
  DNActiveDirectoryMembershipUserClass = interface(DNObjectClass)
  ['{68FDB012-99B9-5527-8309-33329F16AFE8}']
  { constructors } 

    {class} function init(providerName: string; name: string; providerUserKey: DDN.mscorlib.DNObject; email: string; passwordQuestion: string; comment: string; isApproved: Boolean; isLockedOut: Boolean; creationDate: DDN.mscorlib.DNDateTime; lastLoginDate: DDN.mscorlib.DNDateTime; lastActivityDate: DDN.mscorlib.DNDateTime; lastPasswordChangedDate: DDN.mscorlib.DNDateTime; lastLockoutDate: DDN.mscorlib.DNDateTime): DNActiveDirectoryMembershipUser;

  end;

  [DNTypeName('System.Web.Security.ActiveDirectoryMembershipUser')]
  DNActiveDirectoryMembershipUser = interface(DNObject)
  ['{48AE9DCE-BBE5-34CF-9FF1-8A3BF9CE71D7}']
  { getters & setters } 

    function get_LastLoginDate: DDN.mscorlib.DNDateTime;
    procedure set_LastLoginDate(value: DDN.mscorlib.DNDateTime);
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    procedure set_LastActivityDate(value: DDN.mscorlib.DNDateTime);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_Comment: string;
    procedure set_Comment(value: string);
    function get_IsApproved: Boolean;
    procedure set_IsApproved(value: Boolean);
    function get_ProviderUserKey: DDN.mscorlib.DNObject;
    function get_UserName: string;
    function get_PasswordQuestion: string;
    function get_IsLockedOut: Boolean;
    function get_LastLockoutDate: DDN.mscorlib.DNDateTime;
    function get_CreationDate: DDN.mscorlib.DNDateTime;
    function get_LastPasswordChangedDate: DDN.mscorlib.DNDateTime;
    function get_IsOnline: Boolean;
    function get_ProviderName: string;

  { methods } 

    function ToString: string;
    function ResetPassword: string; overload;
    function GetPassword: string; overload;
    function GetPassword(passwordAnswer: string): string; overload;
    function ChangePassword(oldPassword: string; newPassword: string): Boolean;
    function ChangePasswordQuestionAndAnswer(password: string; newPasswordQuestion: string; newPasswordAnswer: string): Boolean;
    function ResetPassword(passwordAnswer: string): string; overload;
    function UnlockUser: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property LastLoginDate: DDN.mscorlib.DNDateTime read get_LastLoginDate write set_LastLoginDate;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate write set_LastActivityDate;
    property Email: string read get_Email write set_Email;
    property Comment: string read get_Comment write set_Comment;
    property IsApproved: Boolean read get_IsApproved write set_IsApproved;
    property ProviderUserKey: DDN.mscorlib.DNObject read get_ProviderUserKey;
    property UserName: string read get_UserName;
    property PasswordQuestion: string read get_PasswordQuestion;
    property IsLockedOut: Boolean read get_IsLockedOut;
    property LastLockoutDate: DDN.mscorlib.DNDateTime read get_LastLockoutDate;
    property CreationDate: DDN.mscorlib.DNDateTime read get_CreationDate;
    property LastPasswordChangedDate: DDN.mscorlib.DNDateTime read get_LastPasswordChangedDate;
    property IsOnline: Boolean read get_IsOnline;
    property ProviderName: string read get_ProviderName;
  end;

  TDNActiveDirectoryMembershipUser = class(TDNGenericImport<DNActiveDirectoryMembershipUserClass, DNActiveDirectoryMembershipUser>) end;

  //-------------namespace: System.Web.Security----------------
  DNPassportAuthenticationModuleClass = interface(DNObjectClass)
  ['{C573F168-97E0-58FB-9D82-BE7A026CCDFC}']
  { constructors } 

    {class} function init: DNPassportAuthenticationModule;

  end;

  [DNTypeName('System.Web.Security.PassportAuthenticationModule')]
  DNPassportAuthenticationModule = interface(DNIHttpModule)
  ['{5EB0B5FA-A31F-3BAC-8DB5-F1E8D4EE221F}']
  { events } 

    procedure add_Authenticate(value: DNPassportAuthenticationEventHandler);
    procedure remove_Authenticate(value: DNPassportAuthenticationEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPassportAuthenticationModule = class(TDNGenericImport<DNPassportAuthenticationModuleClass, DNPassportAuthenticationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNPassportIdentityClass = interface(DNObjectClass)
  ['{1C14B3CA-8071-56A0-87AB-2422279E76AC}']
  { constructors } 

    {class} function init: DNPassportIdentity;

  { static methods } 

    {class} function Encrypt(strData: string): string;
    {class} function Decrypt(strData: string): string;
    {class} function Compress(strData: string): string;
    {class} function Decompress(strData: string): string;
    {class} function CryptPutHost(strHost: string): Int32;
    {class} function CryptPutSite(strSite: string): Int32;
    {class} function CryptIsValid: Boolean;
    {class} procedure SignOut(strSignOutDotGifFileName: string);

  end;

  [DNTypeName('System.Web.Security.PassportIdentity')]
  DNPassportIdentity = interface(DDN.mscorlib.DNIIdentity)
  ['{1B7B88B4-994F-30F2-8964-508364A0279B}']
  { getters & setters } 

    function get_Name: string;
    function get_AuthenticationType: string;
    function get_IsAuthenticated: Boolean;
    function get_Item(strProfileName: string): string;
    function get_Error: Int32;
    function get_GetFromNetworkServer: Boolean;
    function get_HasSavedPassword: Boolean;
    function get_HasTicket: Boolean;
    function get_TicketAge: Int32;
    function get_TimeSinceSignIn: Int32;
    function get_HexPUID: string;

  { methods } 

    function GetIsAuthenticated(iTimeWindow: Int32; bForceLogin: Boolean; bCheckSecure: Boolean): Boolean; overload;
    function GetIsAuthenticated(iTimeWindow: Int32; iForceLogin: Int32; iCheckSecure: Int32): Boolean; overload;
    function GetProfileObject(strProfileName: string): DDN.mscorlib.DNObject;
    function GetDomainFromMemberName(strMemberName: string): string;
    function HasProfile(strProfile: string): Boolean;
    function HasFlag(iFlagMask: Int32): Boolean;
    function HaveConsent(bNeedFullConsent: Boolean; bNeedBirthdate: Boolean): Boolean;
    function GetOption(strOpt: string): DDN.mscorlib.DNObject;
    procedure SetOption(strOpt: string; vOpt: DDN.mscorlib.DNObject);
    function LogoutURL: string; overload;
    function LogoutURL(szReturnURL: string; szCOBrandArgs: string; iLangID: Int32; strDomain: string; iUseSecureAuth: Int32): string; overload;
    function LogoTag: string; overload;
    function LogoTag(strReturnUrl: string): string; overload;
    function LogoTag2: string; overload;
    function LogoTag2(strReturnUrl: string): string; overload;
    function LogoTag(strReturnUrl: string; iTimeWindow: Int32; fForceLogin: Boolean; strCoBrandedArgs: string; iLangID: Int32; fSecure: Boolean; strNameSpace: string; iKPP: Int32; bUseSecureAuth: Boolean): string; overload;
    function LogoTag(strReturnUrl: string; iTimeWindow: Int32; iForceLogin: Int32; strCoBrandedArgs: string; iLangID: Int32; iSecure: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32): string; overload;
    function LogoTag2(strReturnUrl: string; iTimeWindow: Int32; fForceLogin: Boolean; strCoBrandedArgs: string; iLangID: Int32; fSecure: Boolean; strNameSpace: string; iKPP: Int32; bUseSecureAuth: Boolean): string; overload;
    function LogoTag2(strReturnUrl: string; iTimeWindow: Int32; iForceLogin: Int32; strCoBrandedArgs: string; iLangID: Int32; iSecure: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32): string; overload;
    function AuthUrl: string; overload;
    function AuthUrl(strReturnUrl: string): string; overload;
    function AuthUrl2: string; overload;
    function AuthUrl2(strReturnUrl: string): string; overload;
    function AuthUrl(strReturnUrl: string; iTimeWindow: Int32; fForceLogin: Boolean; strCoBrandedArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; bUseSecureAuth: Boolean): string; overload;
    function AuthUrl2(strReturnUrl: string; iTimeWindow: Int32; fForceLogin: Boolean; strCoBrandedArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; bUseSecureAuth: Boolean): string; overload;
    function AuthUrl(strReturnUrl: string; iTimeWindow: Int32; iForceLogin: Int32; strCoBrandedArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32): string; overload;
    function AuthUrl2(strReturnUrl: string; iTimeWindow: Int32; iForceLogin: Int32; strCoBrandedArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32): string; overload;
    function LoginUser(szRetURL: string; iTimeWindow: Int32; fForceLogin: Boolean; szCOBrandArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; fUseSecureAuth: Boolean; oExtraParams: DDN.mscorlib.DNObject): Int32; overload;
    function LoginUser: Int32; overload;
    function LoginUser(strReturnUrl: string): Int32; overload;
    function GetLoginChallenge: string; overload;
    function GetLoginChallenge(strReturnUrl: string): string; overload;
    function GetDomainAttribute(strAttribute: string; iLCID: Int32; strDomain: string): string;
    function Ticket(strAttribute: string): DDN.mscorlib.DNObject;
    function GetCurrentConfig(strAttribute: string): DDN.mscorlib.DNObject;
    function LoginUser(szRetURL: string; iTimeWindow: Int32; fForceLogin: Int32; szCOBrandArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32; oExtraParams: DDN.mscorlib.DNObject): Int32; overload;
    function GetLoginChallenge(szRetURL: string; iTimeWindow: Int32; fForceLogin: Int32; szCOBrandArgs: string; iLangID: Int32; strNameSpace: string; iKPP: Int32; iUseSecureAuth: Int32; oExtraParams: DDN.mscorlib.DNObject): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
    property AuthenticationType: string read get_AuthenticationType;
    property IsAuthenticated: Boolean read get_IsAuthenticated;
    property Item[strProfileName: string]: string read get_Item; default;
    property Error: Int32 read get_Error;
    property GetFromNetworkServer: Boolean read get_GetFromNetworkServer;
    property HasSavedPassword: Boolean read get_HasSavedPassword;
    property HasTicket: Boolean read get_HasTicket;
    property TicketAge: Int32 read get_TicketAge;
    property TimeSinceSignIn: Int32 read get_TimeSinceSignIn;
    property HexPUID: string read get_HexPUID;
  end;

  TDNPassportIdentity = class(TDNGenericImport<DNPassportIdentityClass, DNPassportIdentity>) end;

  //-------------namespace: System.Web.Security----------------
  DNRoleManagerModuleClass = interface(DNObjectClass)
  ['{0502F76F-7A2A-5599-8FF0-82848AB4A038}']
  { constructors } 

    {class} function init: DNRoleManagerModule;

  end;

  [DNTypeName('System.Web.Security.RoleManagerModule')]
  DNRoleManagerModule = interface(DNIHttpModule)
  ['{AD12F878-996C-3957-97B6-0368A24B357E}']
  { events } 

    procedure add_GetRoles(value: DNRoleManagerEventHandler);
    procedure remove_GetRoles(value: DNRoleManagerEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRoleManagerModule = class(TDNGenericImport<DNRoleManagerModuleClass, DNRoleManagerModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNRolesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{780ADD36-620E-5AE0-A97A-AE5968344263}']
  { static getter & setter } 

    {class} function get_Provider: DDN.System.Web.ApplicationServices.DNRoleProvider;
    {class} function get_Providers: DNRoleProviderCollection;
    {class} function get_CookieName: string;
    {class} function get_CacheRolesInCookie: Boolean;
    {class} function get_CookieTimeout: Int32;
    {class} function get_CookiePath: string;
    {class} function get_CookieRequireSSL: Boolean;
    {class} function get_CookieSlidingExpiration: Boolean;
    {class} function get_CookieProtectionValue: DNCookieProtection;
    {class} function get_CreatePersistentCookie: Boolean;
    {class} function get_Domain: string;
    {class} function get_MaxCachedResults: Int32;
    {class} function get_Enabled: Boolean;
    {class} procedure set_Enabled(value: Boolean);
    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);

  { static methods } 

    {class} function IsUserInRole(roleName: string): Boolean; overload;
    {class} function GetRolesForUser: TArray<string>; overload;
    {class} function DeleteRole(roleName: string): Boolean; overload;
    {class} function GetRolesForUser(username: string): TArray<string>; overload;
    {class} function GetUsersInRole(roleName: string): TArray<string>;
    {class} procedure CreateRole(roleName: string);
    {class} function DeleteRole(roleName: string; throwOnPopulatedRole: Boolean): Boolean; overload;
    {class} function RoleExists(roleName: string): Boolean;
    {class} procedure AddUserToRole(username: string; roleName: string);
    {class} procedure AddUserToRoles(username: string; roleNames: TArray<string>);
    {class} procedure AddUsersToRole(usernames: TArray<string>; roleName: string);
    {class} procedure AddUsersToRoles(usernames: TArray<string>; roleNames: TArray<string>);
    {class} procedure RemoveUserFromRole(username: string; roleName: string);
    {class} procedure RemoveUserFromRoles(username: string; roleNames: TArray<string>);
    {class} procedure RemoveUsersFromRole(usernames: TArray<string>; roleName: string);
    {class} procedure RemoveUsersFromRoles(usernames: TArray<string>; roleNames: TArray<string>);
    {class} function GetAllRoles: TArray<string>;
    {class} procedure DeleteCookie;
    {class} function FindUsersInRole(roleName: string; usernameToMatch: string): TArray<string>;
    {class} function IsUserInRole(username: string; roleName: string): Boolean; overload;

  { static propertys } 

    {class} property Provider: DDN.System.Web.ApplicationServices.DNRoleProvider read get_Provider;
    {class} property Providers: DNRoleProviderCollection read get_Providers;
    {class} property CookieName: string read get_CookieName;
    {class} property CacheRolesInCookie: Boolean read get_CacheRolesInCookie;
    {class} property CookieTimeout: Int32 read get_CookieTimeout;
    {class} property CookiePath: string read get_CookiePath;
    {class} property CookieRequireSSL: Boolean read get_CookieRequireSSL;
    {class} property CookieSlidingExpiration: Boolean read get_CookieSlidingExpiration;
    {class} property CookieProtectionValue: DNCookieProtection read get_CookieProtectionValue;
    {class} property CreatePersistentCookie: Boolean read get_CreatePersistentCookie;
    {class} property Domain: string read get_Domain;
    {class} property MaxCachedResults: Int32 read get_MaxCachedResults;
    {class} property Enabled: Boolean read get_Enabled write set_Enabled;
    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
  end;

  [DNTypeName('System.Web.Security.Roles')]
  DNRoles = interface(DDN.mscorlib.DNObject)
  ['{81C3D25D-7B6B-3FE5-9F92-DF8F03DA821C}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRoles = class(TDNGenericImport<DNRolesClass, DNRoles>) end;

  //-------------namespace: System.Web.Security----------------
  DNUrlAuthorizationModuleClass = interface(DNObjectClass)
  ['{390125D7-5511-5503-9CEC-D808A17CB554}']
  { constructors } 

    {class} function init: DNUrlAuthorizationModule;

  { static methods } 

    {class} function CheckUrlAccessForPrincipal(virtualPath: string; user: DDN.mscorlib.DNIPrincipal; verb: string): Boolean;

  end;

  [DNTypeName('System.Web.Security.UrlAuthorizationModule')]
  DNUrlAuthorizationModule = interface(DNIHttpModule)
  ['{315717CE-FAD2-37B9-97C4-5FD062F36816}']
  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNUrlAuthorizationModule = class(TDNGenericImport<DNUrlAuthorizationModuleClass, DNUrlAuthorizationModule>) end;

  //-------------namespace: System.Web.Security----------------
  DNWindowsAuthenticationModuleClass = interface(DNObjectClass)
  ['{113D6937-9663-57E6-8993-477DC47A8788}']
  { constructors } 

    {class} function init: DNWindowsAuthenticationModule;

  end;

  [DNTypeName('System.Web.Security.WindowsAuthenticationModule')]
  DNWindowsAuthenticationModule = interface(DNIHttpModule)
  ['{5D9D9546-B0A9-3B35-8028-15073C364FC6}']
  { events } 

    procedure add_Authenticate(value: DNWindowsAuthenticationEventHandler);
    procedure remove_Authenticate(value: DNWindowsAuthenticationEventHandler);

  { methods } 

    procedure Dispose;
    procedure Init(app: DNHttpApplication);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWindowsAuthenticationModule = class(TDNGenericImport<DNWindowsAuthenticationModuleClass, DNWindowsAuthenticationModule>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNHttpSessionStateClass = interface(DNObjectClass)
  ['{CA7C2A60-5FF2-5418-864F-CDC7698F0D7D}']
  end;

  [DNTypeName('System.Web.SessionState.HttpSessionState')]
  DNHttpSessionState = interface(DDN.mscorlib.DNICollection)
  ['{69FDEC85-15F7-396B-816B-88DEC53A7C28}']
  { getters & setters } 

    function get_SessionID: string;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_IsNewSession: Boolean;
    function get_Mode: DNSessionStateMode;
    function get_IsCookieless: Boolean;
    function get_CookieMode: DNHttpCookieMode;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_Contents: DNHttpSessionState;
    function get_StaticObjects: DNHttpStaticObjectsCollection;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    procedure set_Item(name: string; value: DDN.mscorlib.DNObject); overload;
    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    procedure set_Item(index: Int32; value: DDN.mscorlib.DNObject); overload;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Abandon;
    procedure Add(name: string; value: DDN.mscorlib.DNObject);
    procedure Remove(name: string);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure RemoveAll;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SessionID: string read get_SessionID;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property IsNewSession: Boolean read get_IsNewSession;
    property Mode: DNSessionStateMode read get_Mode;
    property IsCookieless: Boolean read get_IsCookieless;
    property CookieMode: DNHttpCookieMode read get_CookieMode;
    property LCID: Int32 read get_LCID write set_LCID;
    property CodePage: Int32 read get_CodePage write set_CodePage;
    property Contents: DNHttpSessionState read get_Contents;
    property StaticObjects: DNHttpStaticObjectsCollection read get_StaticObjects;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNHttpSessionState = class(TDNGenericImport<DNHttpSessionStateClass, DNHttpSessionState>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNHttpSessionStateContainerClass = interface(DNObjectClass)
  ['{DE705512-57D6-5889-82D8-052CC3F0B652}']
  { constructors } 

    {class} function init(id: string; sessionItems: DNISessionStateItemCollection; staticObjects: DNHttpStaticObjectsCollection; timeout: Int32; newSession: Boolean; cookieMode: DNHttpCookieMode; mode: DNSessionStateMode; isReadonly: Boolean): DNHttpSessionStateContainer;

  end;

  [DNTypeName('System.Web.SessionState.HttpSessionStateContainer')]
  DNHttpSessionStateContainer = interface(DNIHttpSessionState)
  ['{38F5534C-6A3C-3516-86BD-C4987FA328E5}']
  { getters & setters } 

    function get_SessionID: string;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);
    function get_IsNewSession: Boolean;
    function get_Mode: DNSessionStateMode;
    function get_IsCookieless: Boolean;
    function get_CookieMode: DNHttpCookieMode;
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_IsAbandoned: Boolean;
    function get_StaticObjects: DNHttpStaticObjectsCollection;
    function get_Count: Int32;
    function get_Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Abandon;
    procedure RemoveAt(index: Int32);
    procedure RemoveAll;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SessionID: string read get_SessionID;
    property Timeout: Int32 read get_Timeout write set_Timeout;
    property IsNewSession: Boolean read get_IsNewSession;
    property Mode: DNSessionStateMode read get_Mode;
    property IsCookieless: Boolean read get_IsCookieless;
    property CookieMode: DNHttpCookieMode read get_CookieMode;
    property LCID: Int32 read get_LCID write set_LCID;
    property CodePage: Int32 read get_CodePage write set_CodePage;
    property IsAbandoned: Boolean read get_IsAbandoned;
    property StaticObjects: DNHttpStaticObjectsCollection read get_StaticObjects;
    property Count: Int32 read get_Count;
    property Keys: DDN.System.DNNameObjectCollectionBase_KeysCollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNHttpSessionStateContainer = class(TDNGenericImport<DNHttpSessionStateContainerClass, DNHttpSessionStateContainer>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionIDManagerClass = interface(DNObjectClass)
  ['{47BEEAF2-4707-5BFF-9344-E8251357BACB}']
  { static getter & setter } 

    {class} function get_SessionIDMaxLength: Int32;

  { constructors } 

    {class} function init: DNSessionIDManager;

  { static propertys } 

    {class} property SessionIDMaxLength: Int32 read get_SessionIDMaxLength;
  end;

  [DNTypeName('System.Web.SessionState.SessionIDManager')]
  DNSessionIDManager = interface(DNISessionIDManager)
  ['{03CAD430-7E66-3E20-BD43-617022C480CF}']
  { methods } 

    function InitializeRequest(context: DNHttpContext; suppressAutoDetectRedirect: Boolean; out supportSessionIDReissue: Boolean): Boolean;
    procedure Initialize;
    function Validate(id: string): Boolean;
    function Encode(id: string): string;
    function Decode(id: string): string;
    function CreateSessionID(context: DNHttpContext): string;
    function GetSessionID(context: DNHttpContext): string;
    procedure SaveSessionID(context: DNHttpContext; id: string; out redirected: Boolean; out cookieAdded: Boolean);
    procedure RemoveSessionID(context: DNHttpContext);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSessionIDManager = class(TDNGenericImport<DNSessionIDManagerClass, DNSessionIDManager>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionStateModuleClass = interface(DNObjectClass)
  ['{59C85156-84DD-5C3C-9B83-3A8AAC56CC41}']
  { constructors } 

    {class} function init: DNSessionStateModule;

  end;

  [DNTypeName('System.Web.SessionState.SessionStateModule')]
  DNSessionStateModule = interface(DNISessionStateModule)
  ['{0C21D4F1-9D4E-34F3-9010-85C3F3A8B9E7}']
  { events } 

    procedure add_Start(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Start(value: DDN.mscorlib.DNEventHandler);
    procedure add_End(value: DDN.mscorlib.DNEventHandler);
    procedure remove_End(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ReleaseSessionState(context: DNHttpContext);
    function ReleaseSessionStateAsync(context: DNHttpContext): DDN.mscorlib.DNTask;
    procedure Init(app: DNHttpApplication);
    procedure Dispose;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSessionStateModule = class(TDNGenericImport<DNSessionStateModuleClass, DNSessionStateModule>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionStateStoreDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CF145031-19EC-557E-89A0-91CF6EF93A79}']
  { constructors } 

    {class} function init(sessionItems: DNISessionStateItemCollection; staticObjects: DNHttpStaticObjectsCollection; timeout: Int32): DNSessionStateStoreData;

  end;

  [DNTypeName('System.Web.SessionState.SessionStateStoreData')]
  DNSessionStateStoreData = interface(DDN.mscorlib.DNObject)
  ['{F05863AA-B9E4-3309-B44E-AFBE1783CC28}']
  { getters & setters } 

    function get_Items: DNISessionStateItemCollection;
    function get_StaticObjects: DNHttpStaticObjectsCollection;
    function get_Timeout: Int32;
    procedure set_Timeout(value: Int32);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Items: DNISessionStateItemCollection read get_Items;
    property StaticObjects: DNHttpStaticObjectsCollection read get_StaticObjects;
    property Timeout: Int32 read get_Timeout write set_Timeout;
  end;

  TDNSessionStateStoreData = class(TDNGenericImport<DNSessionStateStoreDataClass, DNSessionStateStoreData>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNSessionStateUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4C95B1EE-4ACC-5E89-B2F4-898F5C777889}']
  { static getter & setter } 

    {class} function get_SerializationSurrogateSelector: DDN.mscorlib.DNISurrogateSelector;
    {class} procedure set_SerializationSurrogateSelector(value: DDN.mscorlib.DNISurrogateSelector);

  { static methods } 

    {class} procedure RaiseSessionEnd(session: DNIHttpSessionState; eventSource: DDN.mscorlib.DNObject; eventArgs: DDN.mscorlib.DNEventArgs);
    {class} function GetHttpSessionStateFromContext(context: DNHttpContext): DNIHttpSessionState;
    {class} function GetSessionStaticObjects(context: DNHttpContext): DNHttpStaticObjectsCollection;
    {class} function IsSessionStateRequired(context: DNHttpContext): Boolean;
    {class} function IsSessionStateReadOnly(context: DNHttpContext): Boolean;
    {class} procedure AddHttpSessionStateToContext(context: DNHttpContext; container: DNIHttpSessionState);
    {class} procedure RemoveHttpSessionStateFromContext(context: DNHttpContext);

  { static propertys } 

    {class} property SerializationSurrogateSelector: DDN.mscorlib.DNISurrogateSelector read get_SerializationSurrogateSelector write set_SerializationSurrogateSelector;
  end;

  [DNTypeName('System.Web.SessionState.SessionStateUtility')]
  DNSessionStateUtility = interface(DDN.mscorlib.DNObject)
  ['{787D8704-B3AB-37F3-8F9D-3ED81FF7AFBB}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSessionStateUtility = class(TDNGenericImport<DNSessionStateUtilityClass, DNSessionStateUtility>) end;

  //-------------namespace: System.Web.SessionState----------------
  DNStateRuntimeClass = interface(DNObjectClass)
  ['{37BDFA14-815D-5A36-AAC6-E4DC6A77194E}']
  { constructors } 

    {class} function init: DNStateRuntime;

  end;

  [DNTypeName('System.Web.SessionState.StateRuntime')]
  DNStateRuntime = interface(DNIStateRuntime)
  ['{FD2B0268-019A-3EBE-BF81-35D8111FA012}']
  { methods } 

    procedure StopProcessing;
    procedure ProcessRequest(tracker: IntPtr; verb: Int32; uri: string; exclusive: Int32; timeout: Int32; lockCookieExists: Int32; lockCookie: Int32; contentLength: Int32; content: IntPtr); overload;
    procedure ProcessRequest(tracker: IntPtr; verb: Int32; uri: string; exclusive: Int32; extraFlags: Int32; timeout: Int32; lockCookieExists: Int32; lockCookie: Int32; contentLength: Int32; content: IntPtr); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNStateRuntime = class(TDNGenericImport<DNStateRuntimeClass, DNStateRuntime>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapClass = interface(DDN.mscorlib.DNObjectClass)
  ['{96F31CBC-163B-5548-B780-DEC9A1DB8C78}']
  { static getter & setter } 

    {class} function get_CurrentNode: DNSiteMapNode;
    {class} function get_Enabled: Boolean;
    {class} function get_Provider: DNSiteMapProvider;
    {class} function get_Providers: DNSiteMapProviderCollection;
    {class} function get_RootNode: DNSiteMapNode;

  { static propertys } 

    {class} property CurrentNode: DNSiteMapNode read get_CurrentNode;
    {class} property Enabled: Boolean read get_Enabled;
    {class} property Provider: DNSiteMapProvider read get_Provider;
    {class} property Providers: DNSiteMapProviderCollection read get_Providers;
    {class} property RootNode: DNSiteMapNode read get_RootNode;
  end;

  [DNTypeName('System.Web.SiteMap')]
  DNSiteMap = interface(DDN.mscorlib.DNObject)
  ['{AC2CC9DE-B4A0-3879-9F11-DA6004793BD8}']
  { events } 

    {class} procedure add_SiteMapResolve(value: DNSiteMapResolveEventHandler);
    {class} procedure remove_SiteMapResolve(value: DNSiteMapResolveEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSiteMap = class(TDNGenericImport<DNSiteMapClass, DNSiteMap>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapNodeClass = interface(DNObjectClass)
  ['{8BDC91F4-333C-5F1A-8B53-7814861131DA}']
  { constructors } 

    {class} function init(provider: DNSiteMapProvider; key: string): DNSiteMapNode; overload;
    {class} function init(provider: DNSiteMapProvider; key: string; url: string): DNSiteMapNode; overload;
    {class} function init(provider: DNSiteMapProvider; key: string; url: string; title: string): DNSiteMapNode; overload;
    {class} function init(provider: DNSiteMapProvider; key: string; url: string; title: string; description: string): DNSiteMapNode; overload;
    {class} function init(provider: DNSiteMapProvider; key: string; url: string; title: string; description: string; roles: DDN.mscorlib.DNIList; attributes: DDN.System.DNNameValueCollection; explicitResourceKeys: DDN.System.DNNameValueCollection; implicitResourceKey: string): DNSiteMapNode; overload;

  end;

  [DNTypeName('System.Web.SiteMapNode')]
  DNSiteMapNode = interface(DDN.mscorlib.DNICloneable)
  ['{D63AFFEE-0468-3F84-8B4F-D64012F357B8}']
  { getters & setters } 

    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_ChildNodes: DNSiteMapNodeCollection;
    procedure set_ChildNodes(value: DNSiteMapNodeCollection);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Key: string;
    function get_HasChildNodes: Boolean;
    function get_NextSibling: DNSiteMapNode;
    function get_ParentNode: DNSiteMapNode;
    procedure set_ParentNode(value: DNSiteMapNode);
    function get_PreviousSibling: DNSiteMapNode;
    function get_Provider: DNSiteMapProvider;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_ResourceKey: string;
    procedure set_ResourceKey(value: string);
    function get_Roles: DDN.mscorlib.DNIList;
    procedure set_Roles(value: DDN.mscorlib.DNIList);
    function get_RootNode: DNSiteMapNode;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Url: string;
    procedure set_Url(value: string);

  { methods } 

    function Clone(cloneParentNodes: Boolean): DNSiteMapNode; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetAllNodes: DNSiteMapNodeCollection;
    function GetDataSourceView(owner: DNSiteMapDataSource; viewName: string): DNSiteMapDataSourceView;
    function GetHierarchicalDataSourceView: DNSiteMapHierarchicalDataSourceView;
    function GetHashCode: Int32;
    function IsDescendantOf(node: DNSiteMapNode): Boolean;
    function ToString: string;
    function Clone: DNSiteMapNode; overload;
    function IsAccessibleToUser(context: DNHttpContext): Boolean;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    property ChildNodes: DNSiteMapNodeCollection read get_ChildNodes write set_ChildNodes;
    property Description: string read get_Description write set_Description;
    property Key: string read get_Key;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NextSibling: DNSiteMapNode read get_NextSibling;
    property ParentNode: DNSiteMapNode read get_ParentNode write set_ParentNode;
    property PreviousSibling: DNSiteMapNode read get_PreviousSibling;
    property Provider: DNSiteMapProvider read get_Provider;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property ResourceKey: string read get_ResourceKey write set_ResourceKey;
    property Roles: DDN.mscorlib.DNIList read get_Roles write set_Roles;
    property RootNode: DNSiteMapNode read get_RootNode;
    property Title: string read get_Title write set_Title;
    property Url: string read get_Url write set_Url;
  end;

  TDNSiteMapNode = class(TDNGenericImport<DNSiteMapNodeClass, DNSiteMapNode>) end;

  //-------------namespace: System.Web----------------
  DNSiteMapNodeCollectionClass = interface(DNObjectClass)
  ['{979C9C90-FE7E-5A4A-B1CF-9D0ABF0BBEDC}']
  { constructors } 

    {class} function init: DNSiteMapNodeCollection; overload;
    {class} function init(capacity: Int32): DNSiteMapNodeCollection; overload;
    {class} function init(value: DNSiteMapNode): DNSiteMapNodeCollection; overload;
    {class} function init(value: TArray<DNSiteMapNode>): DNSiteMapNodeCollection; overload;
    {class} function init(value: DNSiteMapNodeCollection): DNSiteMapNodeCollection; overload;

  { static methods } 

    {class} function ReadOnly(collection: DNSiteMapNodeCollection): DNSiteMapNodeCollection;

  end;

  [DNTypeName('System.Web.SiteMapNodeCollection')]
  DNSiteMapNodeCollection = interface(DNIHierarchicalEnumerable)
  ['{56177103-582F-3FD1-BA57-06B258A972EC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_Item(index: Int32): DNSiteMapNode;
    procedure set_Item(index: Int32; value: DNSiteMapNode);

  { methods } 

    function Add(value: DNSiteMapNode): Int32;
    procedure AddRange(value: TArray<DNSiteMapNode>); overload;
    procedure AddRange(value: DNSiteMapNodeCollection); overload;
    procedure Clear;
    function &Contains(value: DNSiteMapNode): Boolean;
    procedure CopyTo(&array: TArray<DNSiteMapNode>; index: Int32);
    function GetDataSourceView(owner: DNSiteMapDataSource; viewName: string): DNSiteMapDataSourceView;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetHierarchicalDataSourceView: DNSiteMapHierarchicalDataSourceView;
    function GetHierarchyData(enumeratedItem: DDN.mscorlib.DNObject): DNIHierarchyData;
    function IndexOf(value: DNSiteMapNode): Int32;
    procedure Insert(index: Int32; value: DNSiteMapNode);
    procedure Remove(value: DNSiteMapNode);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property Item[index: Int32]: DNSiteMapNode read get_Item write set_Item; default;
  end;

  TDNSiteMapNodeCollection = class(TDNGenericImport<DNSiteMapNodeCollectionClass, DNSiteMapNodeCollection>) end;

  //-------------namespace: System.Web----------------
  DNTraceContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F33926C0-A624-5CA4-9AE1-592A90588AF4}']
  { constructors } 

    {class} function init(context: DNHttpContext): DNTraceContext;

  end;

  [DNTypeName('System.Web.TraceContext')]
  DNTraceContext = interface(DDN.mscorlib.DNObject)
  ['{D46B6571-5FC9-3C74-ABFE-5386615598D0}']
  { getters & setters } 

    function get_TraceMode: DNTraceMode;
    procedure set_TraceMode(value: DNTraceMode);
    function get_IsEnabled: Boolean;
    procedure set_IsEnabled(value: Boolean);

  { events } 

    procedure add_TraceFinished(value: DNTraceContextEventHandler);
    procedure remove_TraceFinished(value: DNTraceContextEventHandler);

  { methods } 

    procedure Write(message: string); overload;
    procedure Write(category: string; message: string); overload;
    procedure Write(category: string; message: string; errorInfo: DDN.mscorlib.DNException); overload;
    procedure Warn(message: string); overload;
    procedure Warn(category: string; message: string); overload;
    procedure Warn(category: string; message: string; errorInfo: DDN.mscorlib.DNException); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TraceMode: DNTraceMode read get_TraceMode write set_TraceMode;
    property IsEnabled: Boolean read get_IsEnabled write set_IsEnabled;
  end;

  TDNTraceContext = class(TDNGenericImport<DNTraceContextClass, DNTraceContext>) end;

  //-------------namespace: System.Web----------------
  DNTraceContextRecordClass = interface(DDN.mscorlib.DNObjectClass)
  ['{71E9573B-2277-5F77-B056-8C6CEF37B65C}']
  { constructors } 

    {class} function init(category: string; msg: string; isWarning: Boolean; errorInfo: DDN.mscorlib.DNException): DNTraceContextRecord;

  end;

  [DNTypeName('System.Web.TraceContextRecord')]
  DNTraceContextRecord = interface(DDN.mscorlib.DNObject)
  ['{5692D0F4-D8A2-312E-961C-BAC45DF7B46B}']
  { getters & setters } 

    function get_Category: string;
    function get_ErrorInfo: DDN.mscorlib.DNException;
    function get_Message: string;
    function get_IsWarning: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Category: string read get_Category;
    property ErrorInfo: DDN.mscorlib.DNException read get_ErrorInfo;
    property Message: string read get_Message;
    property IsWarning: Boolean read get_IsWarning;
  end;

  TDNTraceContextRecord = class(TDNGenericImport<DNTraceContextRecordClass, DNTraceContextRecord>) end;

  //-------------namespace: System.Web.UI.Adapters----------------
  DNControlAdapterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AD95DB27-9695-581C-9293-3F27CE28386F}']
  end;

  [DNTypeName('System.Web.UI.Adapters.ControlAdapter')]
  DNControlAdapter = interface(DDN.mscorlib.DNObject)
  ['{B6399544-9C70-36B3-A5AE-ED8BA242B820}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNControlAdapter = class(TDNGenericImport<DNControlAdapterClass, DNControlAdapter>) end;

  //-------------namespace: System.Web.UI.Adapters----------------
  DNPageAdapterClass = interface(DNControlAdapterClass)
  ['{582119CC-1414-56AB-8848-EB5C3BEAC587}']
  end;

  [DNTypeName('System.Web.UI.Adapters.PageAdapter')]
  DNPageAdapter = interface(DNControlAdapter)
  ['{CFC75338-240B-35BE-B503-F829FB982AAD}']
  { getters & setters } 

    function get_CacheVaryByHeaders: DDN.System.DNStringCollection;
    function get_CacheVaryByParams: DDN.System.DNStringCollection;

  { methods } 

    function DeterminePostBackMode: DDN.System.DNNameValueCollection;
    function DeterminePostBackModeUnvalidated: DDN.System.DNNameValueCollection;
    function GetRadioButtonsByGroup(groupName: string): DDN.mscorlib.DNICollection;
    function GetStatePersister: DNPageStatePersister;
    procedure RegisterRadioButton(radioButton: DNRadioButton);
    procedure RenderBeginHyperlink(writer: DNHtmlTextWriter; targetUrl: string; encodeUrl: Boolean; softkeyLabel: string); overload;
    procedure RenderPostBackEvent(writer: DNHtmlTextWriter; target: string; argument: string; softkeyLabel: string; text: string); overload;
    procedure RenderPostBackEvent(writer: DNHtmlTextWriter; target: string; argument: string; softkeyLabel: string; text: string; postUrl: string; accessKey: string); overload;
    function TransformText(text: string): string;
    procedure RenderBeginHyperlink(writer: DNHtmlTextWriter; targetUrl: string; encodeUrl: Boolean; softkeyLabel: string; accessKey: string); overload;
    procedure RenderEndHyperlink(writer: DNHtmlTextWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CacheVaryByHeaders: DDN.System.DNStringCollection read get_CacheVaryByHeaders;
    property CacheVaryByParams: DDN.System.DNStringCollection read get_CacheVaryByParams;
  end;

  TDNPageAdapter = class(TDNGenericImport<DNPageAdapterClass, DNPageAdapter>) end;

  //-------------namespace: System.Web.UI.WebControls.Adapters----------------
  DNWebControlAdapterClass = interface(DNControlAdapterClass)
  ['{C7467DB8-1CD4-59C3-AE97-188686331AE3}']
  { constructors } 

    {class} function init: DNWebControlAdapter;

  end;

  [DNTypeName('System.Web.UI.WebControls.Adapters.WebControlAdapter')]
  DNWebControlAdapter = interface(DNControlAdapter)
  ['{5DC10EB8-E523-33CF-B570-FD2AB5DA042F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebControlAdapter = class(TDNGenericImport<DNWebControlAdapterClass, DNWebControlAdapter>) end;

  //-------------namespace: System.Web.UI.WebControls.Adapters----------------
  DNDataBoundControlAdapterClass = interface(DNWebControlAdapterClass)
  ['{3D17FFF5-6188-5AB5-8C2F-CFB71CA34763}']
  { constructors } 

    {class} function init: DNDataBoundControlAdapter;

  end;

  [DNTypeName('System.Web.UI.WebControls.Adapters.DataBoundControlAdapter')]
  DNDataBoundControlAdapter = interface(DNWebControlAdapter)
  ['{A147A012-DD97-3B69-BDD2-82BD40FFCEA4}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataBoundControlAdapter = class(TDNGenericImport<DNDataBoundControlAdapterClass, DNDataBoundControlAdapter>) end;

  //-------------namespace: System.Web.UI.WebControls.Adapters----------------
  DNHideDisabledControlAdapterClass = interface(DNWebControlAdapterClass)
  ['{7B0DB55F-056B-507E-AD8F-8170D3ADE14D}']
  { constructors } 

    {class} function init: DNHideDisabledControlAdapter;

  end;

  [DNTypeName('System.Web.UI.WebControls.Adapters.HideDisabledControlAdapter')]
  DNHideDisabledControlAdapter = interface(DNWebControlAdapter)
  ['{32D09A27-400F-3717-8D20-5EDC9A8C96E9}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHideDisabledControlAdapter = class(TDNGenericImport<DNHideDisabledControlAdapterClass, DNHideDisabledControlAdapter>) end;

  //-------------namespace: System.Web.UI.WebControls.Adapters----------------
  DNHierarchicalDataBoundControlAdapterClass = interface(DNWebControlAdapterClass)
  ['{D658B3C4-B37C-59FF-8946-09C8101EE583}']
  { constructors } 

    {class} function init: DNHierarchicalDataBoundControlAdapter;

  end;

  [DNTypeName('System.Web.UI.WebControls.Adapters.HierarchicalDataBoundControlAdapter')]
  DNHierarchicalDataBoundControlAdapter = interface(DNWebControlAdapter)
  ['{FA17450B-C32F-3FBE-AA57-882A967197CE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHierarchicalDataBoundControlAdapter = class(TDNGenericImport<DNHierarchicalDataBoundControlAdapterClass, DNHierarchicalDataBoundControlAdapter>) end;

  //-------------namespace: System.Web.UI.WebControls.Adapters----------------
  DNMenuAdapterClass = interface(DNWebControlAdapterClass)
  ['{62857CCB-416B-581F-9CF3-4556375D3B2B}']
  { constructors } 

    {class} function init: DNMenuAdapter;

  end;

  [DNTypeName('System.Web.UI.WebControls.Adapters.MenuAdapter')]
  DNMenuAdapter = interface(DNWebControlAdapter)
  ['{5A2CCA6A-177A-3473-89C7-44FD3BE55F70}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNMenuAdapter = class(TDNGenericImport<DNMenuAdapterClass, DNMenuAdapter>) end;

  //-------------namespace: System.Web.UI----------------
  DNAttributeCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3F5A4A22-1B80-578F-9982-0BE4C3DE65B0}']
  { constructors } 

    {class} function init(bag: DNStateBag): DNAttributeCollection;

  end;

  [DNTypeName('System.Web.UI.AttributeCollection')]
  DNAttributeCollection = interface(DDN.mscorlib.DNObject)
  ['{1D2ED0A7-B7B9-34A6-9B42-B740C6FF6347}']
  { getters & setters } 

    function get_Item(key: string): string;
    procedure set_Item(key: string; value: string);
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Count: Int32;
    function get_CssStyle: DNCssStyleCollection;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    procedure Clear;
    procedure Render(writer: DNHtmlTextWriter);
    procedure AddAttributes(writer: DNHtmlTextWriter);
    procedure Add(key: string; value: string);
    procedure Remove(key: string);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Count: Int32 read get_Count;
    property CssStyle: DNCssStyleCollection read get_CssStyle;
  end;

  TDNAttributeCollection = class(TDNGenericImport<DNAttributeCollectionClass, DNAttributeCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNBaseParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6F6A3D2D-B915-5B8E-B7B7-4F40E4224262}']
  { constructors } 

    {class} function init: DNBaseParser;

  end;

  [DNTypeName('System.Web.UI.BaseParser')]
  DNBaseParser = interface(DDN.mscorlib.DNObject)
  ['{56629263-DC1C-3E92-A2CA-D9DF7360104A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNBaseParser = class(TDNGenericImport<DNBaseParserClass, DNBaseParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateParserClass = interface(DNBaseParserClass)
  ['{3DB6DA1E-4012-53C0-9525-2D9FC17057FD}']
  { static methods } 

    {class} function ParseTemplate(content: string; virtualPath: string; ignoreFilter: Boolean): DNITemplate;

  end;

  [DNTypeName('System.Web.UI.TemplateParser')]
  DNTemplateParser = interface(DNBaseParser)
  ['{53BF0994-2C2E-3438-B885-E1ABEE93B301}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNTemplateParser = class(TDNGenericImport<DNTemplateParserClass, DNTemplateParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNBaseTemplateParserClass = interface(DNTemplateParserClass)
  ['{9BAE93D9-317F-5D93-B53B-68F3DF9C36F8}']
  end;

  [DNTypeName('System.Web.UI.BaseTemplateParser')]
  DNBaseTemplateParser = interface(DNTemplateParser)
  ['{FC54DB44-FE71-3FD6-A588-765D416A9D5D}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNBaseTemplateParser = class(TDNGenericImport<DNBaseTemplateParserClass, DNBaseTemplateParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateControlParserClass = interface(DNBaseTemplateParserClass)
  ['{FB8E4C68-5B9B-52AD-80AD-E69E6ECF5DB3}']
  end;

  [DNTypeName('System.Web.UI.TemplateControlParser')]
  DNTemplateControlParser = interface(DNBaseTemplateParser)
  ['{00E7109A-2B52-3040-AE7E-7A37D9ED31E8}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNTemplateControlParser = class(TDNGenericImport<DNTemplateControlParserClass, DNTemplateControlParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageParserClass = interface(DNTemplateControlParserClass)
  ['{594EB723-48E6-56C6-B479-26D332541419}']
  { static getter & setter } 

    {class} function get_DefaultPageBaseType: DDN.mscorlib.DNType;
    {class} procedure set_DefaultPageBaseType(value: DDN.mscorlib.DNType);
    {class} function get_DefaultUserControlBaseType: DDN.mscorlib.DNType;
    {class} procedure set_DefaultUserControlBaseType(value: DDN.mscorlib.DNType);
    {class} function get_DefaultApplicationBaseType: DDN.mscorlib.DNType;
    {class} procedure set_DefaultApplicationBaseType(value: DDN.mscorlib.DNType);
    {class} function get_DefaultPageParserFilterType: DDN.mscorlib.DNType;
    {class} procedure set_DefaultPageParserFilterType(value: DDN.mscorlib.DNType);
    {class} function get_EnableLongStringsAsResources: Boolean;
    {class} procedure set_EnableLongStringsAsResources(value: Boolean);

  { constructors } 

    {class} function init: DNPageParser;

  { static methods } 

    {class} function GetCompiledPageInstance(virtualPath: string; inputFile: string; context: DNHttpContext): DNIHttpHandler;

  { static propertys } 

    {class} property DefaultPageBaseType: DDN.mscorlib.DNType read get_DefaultPageBaseType write set_DefaultPageBaseType;
    {class} property DefaultUserControlBaseType: DDN.mscorlib.DNType read get_DefaultUserControlBaseType write set_DefaultUserControlBaseType;
    {class} property DefaultApplicationBaseType: DDN.mscorlib.DNType read get_DefaultApplicationBaseType write set_DefaultApplicationBaseType;
    {class} property DefaultPageParserFilterType: DDN.mscorlib.DNType read get_DefaultPageParserFilterType write set_DefaultPageParserFilterType;
    {class} property EnableLongStringsAsResources: Boolean read get_EnableLongStringsAsResources write set_EnableLongStringsAsResources;
  end;

  [DNTypeName('System.Web.UI.PageParser')]
  DNPageParser = interface(DNTemplateControlParser)
  ['{5AB2C02E-A84A-3002-9C6F-05C63787AB4F}']
  { getters & setters } 

    function get_Text: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
  end;

  TDNPageParser = class(TDNGenericImport<DNPageParserClass, DNPageParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNClientScriptManagerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EE176E77-D3CD-5274-9D15-2ECC13FB020E}']
  end;

  [DNTypeName('System.Web.UI.ClientScriptManager')]
  DNClientScriptManager = interface(DDN.mscorlib.DNObject)
  ['{FA739BA9-5921-33E7-A3DA-FBD55FFF68AA}']
  { methods } 

    procedure RegisterForEventValidation(options: DNPostBackOptions); overload;
    procedure RegisterForEventValidation(uniqueId: string); overload;
    procedure RegisterForEventValidation(uniqueId: string; argument: string); overload;
    procedure ValidateEvent(uniqueId: string); overload;
    function GetCallbackEventReference(control: DNControl; argument: string; clientCallback: string; context: string): string; overload;
    function GetCallbackEventReference(control: DNControl; argument: string; clientCallback: string; context: string; useAsync: Boolean): string; overload;
    function GetPostBackEventReference(control: DNControl; argument: string): string; overload;
    function GetPostBackEventReference(control: DNControl; argument: string; registerForEventValidation: Boolean): string; overload;
    function GetPostBackEventReference(options: DNPostBackOptions): string; overload;
    function GetWebResourceUrl(&type: DDN.mscorlib.DNType; resourceName: string): string;
    function IsClientScriptBlockRegistered(key: string): Boolean; overload;
    function IsClientScriptBlockRegistered(&type: DDN.mscorlib.DNType; key: string): Boolean; overload;
    function IsClientScriptIncludeRegistered(key: string): Boolean; overload;
    function IsClientScriptIncludeRegistered(&type: DDN.mscorlib.DNType; key: string): Boolean; overload;
    function IsStartupScriptRegistered(key: string): Boolean; overload;
    function IsStartupScriptRegistered(&type: DDN.mscorlib.DNType; key: string): Boolean; overload;
    function IsOnSubmitStatementRegistered(key: string): Boolean; overload;
    function IsOnSubmitStatementRegistered(&type: DDN.mscorlib.DNType; key: string): Boolean; overload;
    procedure RegisterArrayDeclaration(arrayName: string; arrayValue: string);
    procedure RegisterExpandoAttribute(controlId: string; attributeName: string; attributeValue: string); overload;
    procedure RegisterClientScriptBlock(&type: DDN.mscorlib.DNType; key: string; script: string); overload;
    procedure RegisterClientScriptBlock(&type: DDN.mscorlib.DNType; key: string; script: string; addScriptTags: Boolean); overload;
    procedure RegisterClientScriptInclude(key: string; url: string); overload;
    procedure RegisterClientScriptInclude(&type: DDN.mscorlib.DNType; key: string; url: string); overload;
    procedure RegisterClientScriptResource(&type: DDN.mscorlib.DNType; resourceName: string);
    procedure RegisterOnSubmitStatement(&type: DDN.mscorlib.DNType; key: string; script: string);
    procedure RegisterStartupScript(&type: DDN.mscorlib.DNType; key: string; script: string); overload;
    procedure RegisterStartupScript(&type: DDN.mscorlib.DNType; key: string; script: string; addScriptTags: Boolean); overload;
    function GetPostBackClientHyperlink(control: DNControl; argument: string): string; overload;
    function GetPostBackClientHyperlink(control: DNControl; argument: string; registerForEventValidation: Boolean): string; overload;
    procedure ValidateEvent(uniqueId: string; argument: string); overload;
    function GetCallbackEventReference(control: DNControl; argument: string; clientCallback: string; context: string; clientErrorCallback: string; useAsync: Boolean): string; overload;
    function GetCallbackEventReference(target: string; argument: string; clientCallback: string; context: string; clientErrorCallback: string; useAsync: Boolean): string; overload;
    function GetPostBackEventReference(options: DNPostBackOptions; registerForEventValidation: Boolean): string; overload;
    procedure RegisterExpandoAttribute(controlId: string; attributeName: string; attributeValue: string; encode: Boolean); overload;
    procedure RegisterHiddenField(hiddenFieldName: string; hiddenFieldInitialValue: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNClientScriptManager = class(TDNGenericImport<DNClientScriptManagerClass, DNClientScriptManager>) end;

  //-------------namespace: System.Web.UI----------------
  DNCompiledBindableTemplateBuilderClass = interface(DNObjectClass)
  ['{F0A5936E-9077-5E44-AC47-877BE5825817}']
  { constructors } 

    {class} function init(buildTemplateMethod: DNBuildTemplateMethod; extractTemplateValuesMethod: DNExtractTemplateValuesMethod): DNCompiledBindableTemplateBuilder;

  end;

  [DNTypeName('System.Web.UI.CompiledBindableTemplateBuilder')]
  DNCompiledBindableTemplateBuilder = interface(DNIBindableTemplate)
  ['{85F7C0D9-0565-32F1-8816-6CC14F6A5DE0}']
  { methods } 

    function ExtractValues(container: DNControl): DDN.System.DNIOrderedDictionary;
    procedure InstantiateIn(container: DNControl);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCompiledBindableTemplateBuilder = class(TDNGenericImport<DNCompiledBindableTemplateBuilderClass, DNCompiledBindableTemplateBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNCompiledTemplateBuilderClass = interface(DNObjectClass)
  ['{4B97E07F-645B-50AD-948A-673F10430A00}']
  { constructors } 

    {class} function init(buildTemplateMethod: DNBuildTemplateMethod): DNCompiledTemplateBuilder;

  end;

  [DNTypeName('System.Web.UI.CompiledTemplateBuilder')]
  DNCompiledTemplateBuilder = interface(DNITemplate)
  ['{551E504D-131A-3BDE-B96B-FA2335CF17C7}']
  { methods } 

    procedure InstantiateIn(container: DNControl);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCompiledTemplateBuilder = class(TDNGenericImport<DNCompiledTemplateBuilderClass, DNCompiledTemplateBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlClass = interface(DNObjectClass)
  ['{96BEFB69-B902-5300-AFDF-3319823A1430}']
  { constructors } 

    {class} function init: DNControl;

  end;

  [DNTypeName('System.Web.UI.Control')]
  DNControl = interface(DDN.System.DNIComponent)
  ['{DA038958-9C9F-39E2-B803-AEAF33629A0B}']
  { getters & setters } 

    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNControl = class(TDNGenericImport<DNControlClass, DNControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNBasePartialCachingControlClass = interface(DNControlClass)
  ['{45FAE6C8-7E5B-50F3-94B9-016B67F7DC9E}']
  end;

  [DNTypeName('System.Web.UI.BasePartialCachingControl')]
  DNBasePartialCachingControl = interface(DNControl)
  ['{527483C9-3821-3DC9-AA99-C5B70CF9804B}']
  { getters & setters } 

    function get_Dependency: DNCacheDependency;
    procedure set_Dependency(value: DNCacheDependency);
    function get_CachePolicy: DNControlCachePolicy;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dependency: DNCacheDependency read get_Dependency write set_Dependency;
    property CachePolicy: DNControlCachePolicy read get_CachePolicy;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBasePartialCachingControl = class(TDNGenericImport<DNBasePartialCachingControlClass, DNBasePartialCachingControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNPartialCachingControlClass = interface(DNBasePartialCachingControlClass)
  ['{1B4A4C27-05F6-580D-85D2-8F3EA5F18F4F}']
  end;

  [DNTypeName('System.Web.UI.PartialCachingControl')]
  DNPartialCachingControl = interface(DNBasePartialCachingControl)
  ['{C2AE4232-0E4C-316F-A953-9D387E54E3EA}']
  { getters & setters } 

    function get_CachedControl: DNControl;
    function get_Dependency: DNCacheDependency;
    procedure set_Dependency(value: DNCacheDependency);
    function get_CachePolicy: DNControlCachePolicy;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CachedControl: DNControl read get_CachedControl;
    property Dependency: DNCacheDependency read get_Dependency write set_Dependency;
    property CachePolicy: DNControlCachePolicy read get_CachePolicy;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPartialCachingControl = class(TDNGenericImport<DNPartialCachingControlClass, DNPartialCachingControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNStaticPartialCachingControlClass = interface(DNBasePartialCachingControlClass)
  ['{68E8E63F-30FD-5F94-87E5-2FD544B86AF7}']
  { constructors } 

    {class} function init(ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; buildMethod: DNBuildMethod): DNStaticPartialCachingControl; overload;
    {class} function init(ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; sqlDependency: string; buildMethod: DNBuildMethod): DNStaticPartialCachingControl; overload;
    {class} function init(ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; sqlDependency: string; buildMethod: DNBuildMethod; providerName: string): DNStaticPartialCachingControl; overload;

  { static methods } 

    {class} procedure BuildCachedControl(parent: DNControl; ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; buildMethod: DNBuildMethod); overload;
    {class} procedure BuildCachedControl(parent: DNControl; ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; sqlDependency: string; buildMethod: DNBuildMethod); overload;
    {class} procedure BuildCachedControl(parent: DNControl; ctrlID: string; guid: string; duration: Int32; varyByParams: string; varyByControls: string; varyByCustom: string; sqlDependency: string; buildMethod: DNBuildMethod; providerName: string); overload;

  end;

  [DNTypeName('System.Web.UI.StaticPartialCachingControl')]
  DNStaticPartialCachingControl = interface(DNBasePartialCachingControl)
  ['{0050E899-E7C3-3706-91B0-837069610590}']
  { getters & setters } 

    function get_Dependency: DNCacheDependency;
    procedure set_Dependency(value: DNCacheDependency);
    function get_CachePolicy: DNControlCachePolicy;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Dispose;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Dependency: DNCacheDependency read get_Dependency write set_Dependency;
    property CachePolicy: DNControlCachePolicy read get_CachePolicy;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNStaticPartialCachingControl = class(TDNGenericImport<DNStaticPartialCachingControlClass, DNStaticPartialCachingControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataBoundLiteralControlClass = interface(DNControlClass)
  ['{C85C0572-1700-5DC2-9BFA-BA2B612CE922}']
  { constructors } 

    {class} function init(staticLiteralsCount: Int32; dataBoundLiteralCount: Int32): DNDataBoundLiteralControl;

  end;

  [DNTypeName('System.Web.UI.DataBoundLiteralControl')]
  DNDataBoundLiteralControl = interface(DNControl)
  ['{59651C32-B907-3ED9-B81D-4A2C847640C9}']
  { getters & setters } 

    function get_Text: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SetStaticString(index: Int32; s: string);
    procedure SetDataBoundString(index: Int32; s: string);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataBoundLiteralControl = class(TDNGenericImport<DNDataBoundLiteralControlClass, DNDataBoundLiteralControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataSourceControlClass = interface(DNControlClass)
  ['{BA471B18-ABD5-5D4A-8AF0-7CCD2DB0A7BB}']
  end;

  [DNTypeName('System.Web.UI.DataSourceControl')]
  DNDataSourceControl = interface(DNControl)
  ['{DEB6DD91-FC28-3B6C-A0BA-0C82092E7B10}']
  { getters & setters } 

    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataSourceControl = class(TDNGenericImport<DNDataSourceControlClass, DNDataSourceControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceClass = interface(DNDataSourceControlClass)
  ['{9BAC0371-B060-5B2D-9FF9-CED0E03840EA}']
  { constructors } 

    {class} function init: DNObjectDataSource; overload;
    {class} function init(typeName: string; selectMethod: string): DNObjectDataSource; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSource')]
  DNObjectDataSource = interface(DNDataSourceControl)
  ['{59ED222A-A4CC-3DE0-BAC4-F0143A19D449}']
  { getters & setters } 

    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_CacheExpirationPolicy: DNDataSourceCacheExpiry;
    procedure set_CacheExpirationPolicy(value: DNDataSourceCacheExpiry);
    function get_CacheKeyDependency: string;
    procedure set_CacheKeyDependency(value: string);
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_ConvertNullToDBNull: Boolean;
    procedure set_ConvertNullToDBNull(value: Boolean);
    function get_DataObjectTypeName: string;
    procedure set_DataObjectTypeName(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_DeleteParameters: DNParameterCollection;
    function get_EnableCaching: Boolean;
    procedure set_EnableCaching(value: Boolean);
    function get_EnablePaging: Boolean;
    procedure set_EnablePaging(value: Boolean);
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertMethod: string;
    procedure set_InsertMethod(value: string);
    function get_InsertParameters: DNParameterCollection;
    function get_MaximumRowsParameterName: string;
    procedure set_MaximumRowsParameterName(value: string);
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_SelectCountMethod: string;
    procedure set_SelectCountMethod(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_SqlCacheDependency: string;
    procedure set_SqlCacheDependency(value: string);
    function get_StartRowIndexParameterName: string;
    procedure set_StartRowIndexParameterName(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_UpdateParameters: DNParameterCollection;
    function get_ParsingCulture: DNParsingCulture;
    procedure set_ParsingCulture(value: DNParsingCulture);
    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Deleted(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Deleting(value: DNObjectDataSourceMethodEventHandler);
    procedure add_Filtering(value: DNObjectDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNObjectDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Inserting(value: DNObjectDataSourceMethodEventHandler);
    procedure add_ObjectCreated(value: DNObjectDataSourceObjectEventHandler);
    procedure remove_ObjectCreated(value: DNObjectDataSourceObjectEventHandler);
    procedure add_ObjectCreating(value: DNObjectDataSourceObjectEventHandler);
    procedure remove_ObjectCreating(value: DNObjectDataSourceObjectEventHandler);
    procedure add_ObjectDisposing(value: DNObjectDataSourceDisposingEventHandler);
    procedure remove_ObjectDisposing(value: DNObjectDataSourceDisposingEventHandler);
    procedure add_Selected(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNObjectDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNObjectDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Updating(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Updating(value: DNObjectDataSourceMethodEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete: Int32;
    function Insert: Int32;
    function Select: DDN.mscorlib.DNIEnumerable;
    function Update: Int32;
    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    property CacheExpirationPolicy: DNDataSourceCacheExpiry read get_CacheExpirationPolicy write set_CacheExpirationPolicy;
    property CacheKeyDependency: string read get_CacheKeyDependency write set_CacheKeyDependency;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property ConvertNullToDBNull: Boolean read get_ConvertNullToDBNull write set_ConvertNullToDBNull;
    property DataObjectTypeName: string read get_DataObjectTypeName write set_DataObjectTypeName;
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property EnableCaching: Boolean read get_EnableCaching write set_EnableCaching;
    property EnablePaging: Boolean read get_EnablePaging write set_EnablePaging;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertMethod: string read get_InsertMethod write set_InsertMethod;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property MaximumRowsParameterName: string read get_MaximumRowsParameterName write set_MaximumRowsParameterName;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property SelectCountMethod: string read get_SelectCountMethod write set_SelectCountMethod;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property SqlCacheDependency: string read get_SqlCacheDependency write set_SqlCacheDependency;
    property StartRowIndexParameterName: string read get_StartRowIndexParameterName write set_StartRowIndexParameterName;
    property TypeName: string read get_TypeName write set_TypeName;
    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property ParsingCulture: DNParsingCulture read get_ParsingCulture write set_ParsingCulture;
    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNObjectDataSource = class(TDNGenericImport<DNObjectDataSourceClass, DNObjectDataSource>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceClass = interface(DNDataSourceControlClass)
  ['{D2DCC575-E39A-5E81-B3E2-1D90CBBADA1D}']
  { constructors } 

    {class} function init: DNSqlDataSource; overload;
    {class} function init(connectionString: string; selectCommand: string): DNSqlDataSource; overload;
    {class} function init(providerName: string; connectionString: string; selectCommand: string): DNSqlDataSource; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSource')]
  DNSqlDataSource = interface(DNDataSourceControl)
  ['{EC977841-B008-3220-A8E1-BD0BC33DC4F4}']
  { getters & setters } 

    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_CacheExpirationPolicy: DNDataSourceCacheExpiry;
    procedure set_CacheExpirationPolicy(value: DNDataSourceCacheExpiry);
    function get_CacheKeyDependency: string;
    procedure set_CacheKeyDependency(value: string);
    function get_CancelSelectOnNullParameter: Boolean;
    procedure set_CancelSelectOnNullParameter(value: Boolean);
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_DataSourceMode: DNSqlDataSourceMode;
    procedure set_DataSourceMode(value: DNSqlDataSourceMode);
    function get_DeleteCommand: string;
    procedure set_DeleteCommand(value: string);
    function get_DeleteCommandType: DNSqlDataSourceCommandType;
    procedure set_DeleteCommandType(value: DNSqlDataSourceCommandType);
    function get_DeleteParameters: DNParameterCollection;
    function get_EnableCaching: Boolean;
    procedure set_EnableCaching(value: Boolean);
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertCommand: string;
    procedure set_InsertCommand(value: string);
    function get_InsertCommandType: DNSqlDataSourceCommandType;
    procedure set_InsertCommandType(value: DNSqlDataSourceCommandType);
    function get_InsertParameters: DNParameterCollection;
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_SelectCommand: string;
    procedure set_SelectCommand(value: string);
    function get_SelectCommandType: DNSqlDataSourceCommandType;
    procedure set_SelectCommandType(value: DNSqlDataSourceCommandType);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_SqlCacheDependency: string;
    procedure set_SqlCacheDependency(value: string);
    function get_UpdateCommand: string;
    procedure set_UpdateCommand(value: string);
    function get_UpdateCommandType: DNSqlDataSourceCommandType;
    procedure set_UpdateCommandType(value: DNSqlDataSourceCommandType);
    function get_UpdateParameters: DNParameterCollection;
    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete: Int32;
    function Insert: Int32;
    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable;
    function Update: Int32;
    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    property CacheExpirationPolicy: DNDataSourceCacheExpiry read get_CacheExpirationPolicy write set_CacheExpirationPolicy;
    property CacheKeyDependency: string read get_CacheKeyDependency write set_CacheKeyDependency;
    property CancelSelectOnNullParameter: Boolean read get_CancelSelectOnNullParameter write set_CancelSelectOnNullParameter;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property DataSourceMode: DNSqlDataSourceMode read get_DataSourceMode write set_DataSourceMode;
    property DeleteCommand: string read get_DeleteCommand write set_DeleteCommand;
    property DeleteCommandType: DNSqlDataSourceCommandType read get_DeleteCommandType write set_DeleteCommandType;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property EnableCaching: Boolean read get_EnableCaching write set_EnableCaching;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertCommand: string read get_InsertCommand write set_InsertCommand;
    property InsertCommandType: DNSqlDataSourceCommandType read get_InsertCommandType write set_InsertCommandType;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property SelectCommand: string read get_SelectCommand write set_SelectCommand;
    property SelectCommandType: DNSqlDataSourceCommandType read get_SelectCommandType write set_SelectCommandType;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property SqlCacheDependency: string read get_SqlCacheDependency write set_SqlCacheDependency;
    property UpdateCommand: string read get_UpdateCommand write set_UpdateCommand;
    property UpdateCommandType: DNSqlDataSourceCommandType read get_UpdateCommandType write set_UpdateCommandType;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNSqlDataSource = class(TDNGenericImport<DNSqlDataSourceClass, DNSqlDataSource>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAccessDataSourceClass = interface(DNSqlDataSourceClass)
  ['{48E8B5CD-AC02-5CCD-ABE6-C46C3680809A}']
  { constructors } 

    {class} function init: DNAccessDataSource; overload;
    {class} function init(dataFile: string; selectCommand: string): DNAccessDataSource; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.AccessDataSource')]
  DNAccessDataSource = interface(DNSqlDataSource)
  ['{941711B7-B8E3-3DD8-B312-45750C3FCDCF}']
  { getters & setters } 

    function get_ConnectionString: string;
    procedure set_ConnectionString(value: string);
    function get_DataFile: string;
    procedure set_DataFile(value: string);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_SqlCacheDependency: string;
    procedure set_SqlCacheDependency(value: string);
    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_CacheExpirationPolicy: DNDataSourceCacheExpiry;
    procedure set_CacheExpirationPolicy(value: DNDataSourceCacheExpiry);
    function get_CacheKeyDependency: string;
    procedure set_CacheKeyDependency(value: string);
    function get_CancelSelectOnNullParameter: Boolean;
    procedure set_CancelSelectOnNullParameter(value: Boolean);
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_DataSourceMode: DNSqlDataSourceMode;
    procedure set_DataSourceMode(value: DNSqlDataSourceMode);
    function get_DeleteCommand: string;
    procedure set_DeleteCommand(value: string);
    function get_DeleteCommandType: DNSqlDataSourceCommandType;
    procedure set_DeleteCommandType(value: DNSqlDataSourceCommandType);
    function get_DeleteParameters: DNParameterCollection;
    function get_EnableCaching: Boolean;
    procedure set_EnableCaching(value: Boolean);
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertCommand: string;
    procedure set_InsertCommand(value: string);
    function get_InsertCommandType: DNSqlDataSourceCommandType;
    procedure set_InsertCommandType(value: DNSqlDataSourceCommandType);
    function get_InsertParameters: DNParameterCollection;
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_SelectCommand: string;
    procedure set_SelectCommand(value: string);
    function get_SelectCommandType: DNSqlDataSourceCommandType;
    procedure set_SelectCommandType(value: DNSqlDataSourceCommandType);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_UpdateCommand: string;
    procedure set_UpdateCommand(value: string);
    function get_UpdateCommandType: DNSqlDataSourceCommandType;
    procedure set_UpdateCommandType(value: DNSqlDataSourceCommandType);
    function get_UpdateParameters: DNParameterCollection;
    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete: Int32;
    function Insert: Int32;
    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable;
    function Update: Int32;
    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConnectionString: string read get_ConnectionString write set_ConnectionString;
    property DataFile: string read get_DataFile write set_DataFile;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property SqlCacheDependency: string read get_SqlCacheDependency write set_SqlCacheDependency;
    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    property CacheExpirationPolicy: DNDataSourceCacheExpiry read get_CacheExpirationPolicy write set_CacheExpirationPolicy;
    property CacheKeyDependency: string read get_CacheKeyDependency write set_CacheKeyDependency;
    property CancelSelectOnNullParameter: Boolean read get_CancelSelectOnNullParameter write set_CancelSelectOnNullParameter;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property DataSourceMode: DNSqlDataSourceMode read get_DataSourceMode write set_DataSourceMode;
    property DeleteCommand: string read get_DeleteCommand write set_DeleteCommand;
    property DeleteCommandType: DNSqlDataSourceCommandType read get_DeleteCommandType write set_DeleteCommandType;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property EnableCaching: Boolean read get_EnableCaching write set_EnableCaching;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertCommand: string read get_InsertCommand write set_InsertCommand;
    property InsertCommandType: DNSqlDataSourceCommandType read get_InsertCommandType write set_InsertCommandType;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property SelectCommand: string read get_SelectCommand write set_SelectCommand;
    property SelectCommandType: DNSqlDataSourceCommandType read get_SelectCommandType write set_SelectCommandType;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property UpdateCommand: string read get_UpdateCommand write set_UpdateCommand;
    property UpdateCommandType: DNSqlDataSourceCommandType read get_UpdateCommandType write set_UpdateCommandType;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNAccessDataSource = class(TDNGenericImport<DNAccessDataSourceClass, DNAccessDataSource>) end;

  //-------------namespace: System.Web.UI----------------
  DNDesignerDataBoundLiteralControlClass = interface(DNControlClass)
  ['{F795381A-5476-5FC5-AD78-03BC4E944F88}']
  { constructors } 

    {class} function init: DNDesignerDataBoundLiteralControl;

  end;

  [DNTypeName('System.Web.UI.DesignerDataBoundLiteralControl')]
  DNDesignerDataBoundLiteralControl = interface(DNControl)
  ['{E0DC75F4-67F7-3577-B9B0-8D7B0D12921B}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDesignerDataBoundLiteralControl = class(TDNGenericImport<DNDesignerDataBoundLiteralControlClass, DNDesignerDataBoundLiteralControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNHierarchicalDataSourceControlClass = interface(DNControlClass)
  ['{700503F0-0739-5730-93EF-7A601CA069DF}']
  end;

  [DNTypeName('System.Web.UI.HierarchicalDataSourceControl')]
  DNHierarchicalDataSourceControl = interface(DNControl)
  ['{8F142B8B-9607-32AE-B59D-B64C1D27FB53}']
  { getters & setters } 

    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHierarchicalDataSourceControl = class(TDNGenericImport<DNHierarchicalDataSourceControlClass, DNHierarchicalDataSourceControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapDataSourceClass = interface(DNHierarchicalDataSourceControlClass)
  ['{FE2E4A71-CCA4-5C9D-84A8-48BF13A7A9ED}']
  { constructors } 

    {class} function init: DNSiteMapDataSource;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapDataSource')]
  DNSiteMapDataSource = interface(DNHierarchicalDataSourceControl)
  ['{56B85DC2-544A-3277-8909-E11FF88E495E}']
  { getters & setters } 

    function get_ContainsListCollection: Boolean;
    function get_Provider: DNSiteMapProvider;
    procedure set_Provider(value: DNSiteMapProvider);
    function get_ShowStartingNode: Boolean;
    procedure set_ShowStartingNode(value: Boolean);
    function get_SiteMapProvider: string;
    procedure set_SiteMapProvider(value: string);
    function get_StartingNodeOffset: Int32;
    procedure set_StartingNodeOffset(value: Int32);
    function get_StartFromCurrentNode: Boolean;
    procedure set_StartFromCurrentNode(value: Boolean);
    function get_StartingNodeUrl: string;
    procedure set_StartingNodeUrl(value: string);
    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetList: DDN.mscorlib.DNIList;
    function GetView(viewName: string): DNDataSourceView;
    function GetViewNames: DDN.mscorlib.DNICollection;
    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContainsListCollection: Boolean read get_ContainsListCollection;
    property Provider: DNSiteMapProvider read get_Provider write set_Provider;
    property ShowStartingNode: Boolean read get_ShowStartingNode write set_ShowStartingNode;
    property SiteMapProvider: string read get_SiteMapProvider write set_SiteMapProvider;
    property StartingNodeOffset: Int32 read get_StartingNodeOffset write set_StartingNodeOffset;
    property StartFromCurrentNode: Boolean read get_StartFromCurrentNode write set_StartFromCurrentNode;
    property StartingNodeUrl: string read get_StartingNodeUrl write set_StartingNodeUrl;
    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNSiteMapDataSource = class(TDNGenericImport<DNSiteMapDataSourceClass, DNSiteMapDataSource>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNXmlDataSourceClass = interface(DNHierarchicalDataSourceControlClass)
  ['{EBFAB99D-1BB3-515A-B1CB-B8CEB52BD49E}']
  { constructors } 

    {class} function init: DNXmlDataSource;

  end;

  [DNTypeName('System.Web.UI.WebControls.XmlDataSource')]
  DNXmlDataSource = interface(DNHierarchicalDataSourceControl)
  ['{546CD2E9-99BB-398D-916D-A3D0134C28E3}']
  { getters & setters } 

    function get_CacheDuration: Int32;
    procedure set_CacheDuration(value: Int32);
    function get_CacheExpirationPolicy: DNDataSourceCacheExpiry;
    procedure set_CacheExpirationPolicy(value: DNDataSourceCacheExpiry);
    function get_CacheKeyDependency: string;
    procedure set_CacheKeyDependency(value: string);
    function get_CacheKeyContext: string;
    procedure set_CacheKeyContext(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_DataFile: string;
    procedure set_DataFile(value: string);
    function get_EnableCaching: Boolean;
    procedure set_EnableCaching(value: Boolean);
    function get_Transform: string;
    procedure set_Transform(value: string);
    function get_TransformArgumentList: DDN.System.Xml.DNXsltArgumentList;
    procedure set_TransformArgumentList(value: DDN.System.Xml.DNXsltArgumentList);
    function get_TransformFile: string;
    procedure set_TransformFile(value: string);
    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_ClientID: string;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Transforming(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Transforming(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetXmlDocument: DDN.System.Xml.DNXmlDocument;
    procedure Save;
    procedure ApplyStyleSheetSkin(page: DNPage);
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure DataBind;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CacheDuration: Int32 read get_CacheDuration write set_CacheDuration;
    property CacheExpirationPolicy: DNDataSourceCacheExpiry read get_CacheExpirationPolicy write set_CacheExpirationPolicy;
    property CacheKeyDependency: string read get_CacheKeyDependency write set_CacheKeyDependency;
    property CacheKeyContext: string read get_CacheKeyContext write set_CacheKeyContext;
    property Data: string read get_Data write set_Data;
    property DataFile: string read get_DataFile write set_DataFile;
    property EnableCaching: Boolean read get_EnableCaching write set_EnableCaching;
    property Transform: string read get_Transform write set_Transform;
    property TransformArgumentList: DDN.System.Xml.DNXsltArgumentList read get_TransformArgumentList write set_TransformArgumentList;
    property TransformFile: string read get_TransformFile write set_TransformFile;
    property XPath: string read get_XPath write set_XPath;
    property ClientID: string read get_ClientID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Visible: Boolean read get_Visible write set_Visible;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNXmlDataSource = class(TDNGenericImport<DNXmlDataSourceClass, DNXmlDataSource>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlControlClass = interface(DNControlClass)
  ['{E8DA0EF1-D4A9-5D69-A273-6F964ABDB609}']
  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlControl')]
  DNHtmlControl = interface(DNControl)
  ['{3907809A-B0D7-314D-9F04-DB3F1D5E3261}']
  { getters & setters } 

    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlControl = class(TDNGenericImport<DNHtmlControlClass, DNHtmlControl>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlAreaClass = interface(DNHtmlControlClass)
  ['{7037A07F-1C7F-5BC0-9F88-54E619B1927D}']
  { constructors } 

    {class} function init: DNHtmlArea;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlArea')]
  DNHtmlArea = interface(DNHtmlControl)
  ['{49FED41C-18E8-3287-B279-62305C9C2431}']
  { getters & setters } 

    function get_Href: string;
    procedure set_Href(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Href: string read get_Href write set_Href;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlArea = class(TDNGenericImport<DNHtmlAreaClass, DNHtmlArea>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlContainerControlClass = interface(DNHtmlControlClass)
  ['{6760D7FC-4305-5EB6-BAB5-99CBB7DF9C91}']
  { constructors } 

    {class} function init(tag: string): DNHtmlContainerControl;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlContainerControl')]
  DNHtmlContainerControl = interface(DNHtmlControl)
  ['{C06E457E-EDDB-37E5-B62D-1978FF4F3FF5}']
  { getters & setters } 

    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlContainerControl = class(TDNGenericImport<DNHtmlContainerControlClass, DNHtmlContainerControl>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlAnchorClass = interface(DNHtmlContainerControlClass)
  ['{A89B59F5-93B4-5719-A91B-F71A87CA7328}']
  { constructors } 

    {class} function init: DNHtmlAnchor;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlAnchor')]
  DNHtmlAnchor = interface(DNHtmlContainerControl)
  ['{DBBF5CD7-A5A0-3FA0-B5F8-35BAA5A3672F}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_HRef: string;
    procedure set_HRef(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property HRef: string read get_HRef write set_HRef;
    property Name: string read get_Name write set_Name;
    property Target: string read get_Target write set_Target;
    property Title: string read get_Title write set_Title;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlAnchor = class(TDNGenericImport<DNHtmlAnchorClass, DNHtmlAnchor>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlAudioClass = interface(DNHtmlContainerControlClass)
  ['{19AE3F69-E682-562F-8B6C-D58306EEA946}']
  { constructors } 

    {class} function init: DNHtmlAudio;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlAudio')]
  DNHtmlAudio = interface(DNHtmlContainerControl)
  ['{E40A0F27-3D04-3D3B-835B-CECB9869D1E7}']
  { getters & setters } 

    function get_Src: string;
    procedure set_Src(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Src: string read get_Src write set_Src;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlAudio = class(TDNGenericImport<DNHtmlAudioClass, DNHtmlAudio>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlButtonClass = interface(DNHtmlContainerControlClass)
  ['{2F79EA72-DF68-5707-9B87-CA9D3FB6BDDC}']
  { constructors } 

    {class} function init: DNHtmlButton;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlButton')]
  DNHtmlButton = interface(DNHtmlContainerControl)
  ['{F55BEB45-73D0-3F84-A8B5-759CB36650D3}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlButton = class(TDNGenericImport<DNHtmlButtonClass, DNHtmlButton>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlElementClass = interface(DNHtmlContainerControlClass)
  ['{2F3C065F-ADA6-5EB6-9BF8-89EEB02C5219}']
  { constructors } 

    {class} function init: DNHtmlElement;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlElement')]
  DNHtmlElement = interface(DNHtmlContainerControl)
  ['{81CA51DE-BE1D-3E75-B188-FA3E045528D8}']
  { getters & setters } 

    function get_Manifest: string;
    procedure set_Manifest(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Manifest: string read get_Manifest write set_Manifest;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlElement = class(TDNGenericImport<DNHtmlElementClass, DNHtmlElement>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlEmbedClass = interface(DNHtmlContainerControlClass)
  ['{4578445D-846F-50F4-B5DD-EAAB3CA113BC}']
  { constructors } 

    {class} function init: DNHtmlEmbed;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlEmbed')]
  DNHtmlEmbed = interface(DNHtmlContainerControl)
  ['{2E78D9A7-284B-3248-8CD9-9D314895C535}']
  { getters & setters } 

    function get_Src: string;
    procedure set_Src(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Src: string read get_Src write set_Src;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlEmbed = class(TDNGenericImport<DNHtmlEmbedClass, DNHtmlEmbed>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlFormClass = interface(DNHtmlContainerControlClass)
  ['{13B2F2A3-F2E0-5120-B689-4806CED9D249}']
  { constructors } 

    {class} function init: DNHtmlForm;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlForm')]
  DNHtmlForm = interface(DNHtmlContainerControl)
  ['{6ED9F580-20E8-3D99-B8B8-B79001E9AC44}']
  { getters & setters } 

    function get_Action: string;
    procedure set_Action(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_DefaultFocus: string;
    procedure set_DefaultFocus(value: string);
    function get_Enctype: string;
    procedure set_Enctype(value: string);
    function get_Method: string;
    procedure set_Method(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SubmitDisabledControls: Boolean;
    procedure set_SubmitDisabledControls(value: Boolean);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_UniqueID: string;
    function get_ClientID: string;
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RenderControl(writer: DNHtmlTextWriter);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Action: string read get_Action write set_Action;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property DefaultFocus: string read get_DefaultFocus write set_DefaultFocus;
    property Enctype: string read get_Enctype write set_Enctype;
    property Method: string read get_Method write set_Method;
    property Name: string read get_Name write set_Name;
    property SubmitDisabledControls: Boolean read get_SubmitDisabledControls write set_SubmitDisabledControls;
    property Target: string read get_Target write set_Target;
    property UniqueID: string read get_UniqueID;
    property ClientID: string read get_ClientID;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlForm = class(TDNGenericImport<DNHtmlFormClass, DNHtmlForm>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlGenericControlClass = interface(DNHtmlContainerControlClass)
  ['{36CB144A-0E52-5988-A98C-6EE13D5EA1CE}']
  { constructors } 

    {class} function init: DNHtmlGenericControl; overload;
    {class} function init(tag: string): DNHtmlGenericControl; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlGenericControl')]
  DNHtmlGenericControl = interface(DNHtmlContainerControl)
  ['{1C24DABA-C169-3B57-AA9B-01C6EC988046}']
  { getters & setters } 

    function get_TagName: string;
    procedure set_TagName(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TagName: string read get_TagName write set_TagName;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlGenericControl = class(TDNGenericImport<DNHtmlGenericControlClass, DNHtmlGenericControl>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlHeadClass = interface(DNHtmlGenericControlClass)
  ['{7D3019BA-768D-578E-8B90-22360C3B4BAE}']
  { constructors } 

    {class} function init: DNHtmlHead; overload;
    {class} function init(tag: string): DNHtmlHead; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlHead')]
  DNHtmlHead = interface(DNHtmlGenericControl)
  ['{4D771FE2-F688-3D7D-9111-618FEEB5B663}']
  { getters & setters } 

    function get_StyleSheet: DNIStyleSheet;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Keywords: string;
    procedure set_Keywords(value: string);
    function get_TagName: string;
    procedure set_TagName(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StyleSheet: DNIStyleSheet read get_StyleSheet;
    property Title: string read get_Title write set_Title;
    property Description: string read get_Description write set_Description;
    property Keywords: string read get_Keywords write set_Keywords;
    property TagName: string read get_TagName write set_TagName;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlHead = class(TDNGenericImport<DNHtmlHeadClass, DNHtmlHead>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlIframeClass = interface(DNHtmlContainerControlClass)
  ['{DFACC137-FDF1-5C02-BD93-82EE1286C0C6}']
  { constructors } 

    {class} function init: DNHtmlIframe;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlIframe')]
  DNHtmlIframe = interface(DNHtmlContainerControl)
  ['{CF1BF4C7-BB82-3B65-8A4C-4D46E456F94E}']
  { getters & setters } 

    function get_Src: string;
    procedure set_Src(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Src: string read get_Src write set_Src;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlIframe = class(TDNGenericImport<DNHtmlIframeClass, DNHtmlIframe>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlSelectClass = interface(DNHtmlContainerControlClass)
  ['{1B060A57-7125-5193-90D6-9B9E8291DB0B}']
  { constructors } 

    {class} function init: DNHtmlSelect;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlSelect')]
  DNHtmlSelect = interface(DNHtmlContainerControl)
  ['{EF57886C-6829-38C7-87D1-6B54F6020CA6}']
  { getters & setters } 

    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Items: DNListItemCollection;
    function get_Multiple: Boolean;
    procedure set_Multiple(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataMember: string read get_DataMember write set_DataMember;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Items: DNListItemCollection read get_Items;
    property Multiple: Boolean read get_Multiple write set_Multiple;
    property Name: string read get_Name write set_Name;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property Size: Int32 read get_Size write set_Size;
    property Value: string read get_Value write set_Value;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlSelect = class(TDNGenericImport<DNHtmlSelectClass, DNHtmlSelect>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTableClass = interface(DNHtmlContainerControlClass)
  ['{18524842-8F46-503F-8314-BF3A17402AAB}']
  { constructors } 

    {class} function init: DNHtmlTable;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTable')]
  DNHtmlTable = interface(DNHtmlContainerControl)
  ['{9701675C-A42E-3B10-906F-7343122F3621}']
  { getters & setters } 

    function get_Align: string;
    procedure set_Align(value: string);
    function get_BgColor: string;
    procedure set_BgColor(value: string);
    function get_Border: Int32;
    procedure set_Border(value: Int32);
    function get_BorderColor: string;
    procedure set_BorderColor(value: string);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Height: string;
    procedure set_Height(value: string);
    function get_Width: string;
    procedure set_Width(value: string);
    function get_Rows: DNHtmlTableRowCollection;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Align: string read get_Align write set_Align;
    property BgColor: string read get_BgColor write set_BgColor;
    property Border: Int32 read get_Border write set_Border;
    property BorderColor: string read get_BorderColor write set_BorderColor;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Height: string read get_Height write set_Height;
    property Width: string read get_Width write set_Width;
    property Rows: DNHtmlTableRowCollection read get_Rows;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTable = class(TDNGenericImport<DNHtmlTableClass, DNHtmlTable>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTableCellClass = interface(DNHtmlContainerControlClass)
  ['{37F73B76-E6E6-5DA1-9EEF-C2561447FDC6}']
  { constructors } 

    {class} function init: DNHtmlTableCell; overload;
    {class} function init(tagName: string): DNHtmlTableCell; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTableCell')]
  DNHtmlTableCell = interface(DNHtmlContainerControl)
  ['{0508AC59-6B8E-35EE-8CC6-69DC0CE396D7}']
  { getters & setters } 

    function get_Align: string;
    procedure set_Align(value: string);
    function get_BgColor: string;
    procedure set_BgColor(value: string);
    function get_BorderColor: string;
    procedure set_BorderColor(value: string);
    function get_ColSpan: Int32;
    procedure set_ColSpan(value: Int32);
    function get_Height: string;
    procedure set_Height(value: string);
    function get_NoWrap: Boolean;
    procedure set_NoWrap(value: Boolean);
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_VAlign: string;
    procedure set_VAlign(value: string);
    function get_Width: string;
    procedure set_Width(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Align: string read get_Align write set_Align;
    property BgColor: string read get_BgColor write set_BgColor;
    property BorderColor: string read get_BorderColor write set_BorderColor;
    property ColSpan: Int32 read get_ColSpan write set_ColSpan;
    property Height: string read get_Height write set_Height;
    property NoWrap: Boolean read get_NoWrap write set_NoWrap;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property VAlign: string read get_VAlign write set_VAlign;
    property Width: string read get_Width write set_Width;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTableCell = class(TDNGenericImport<DNHtmlTableCellClass, DNHtmlTableCell>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTableRowClass = interface(DNHtmlContainerControlClass)
  ['{01E677C5-DBBB-5D75-A093-FE5E8C717449}']
  { constructors } 

    {class} function init: DNHtmlTableRow;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTableRow')]
  DNHtmlTableRow = interface(DNHtmlContainerControl)
  ['{A68C7FC6-7111-3F78-9854-40606D209A03}']
  { getters & setters } 

    function get_Align: string;
    procedure set_Align(value: string);
    function get_Cells: DNHtmlTableCellCollection;
    function get_BgColor: string;
    procedure set_BgColor(value: string);
    function get_BorderColor: string;
    procedure set_BorderColor(value: string);
    function get_Height: string;
    procedure set_Height(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_VAlign: string;
    procedure set_VAlign(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Align: string read get_Align write set_Align;
    property Cells: DNHtmlTableCellCollection read get_Cells;
    property BgColor: string read get_BgColor write set_BgColor;
    property BorderColor: string read get_BorderColor write set_BorderColor;
    property Height: string read get_Height write set_Height;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property VAlign: string read get_VAlign write set_VAlign;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTableRow = class(TDNGenericImport<DNHtmlTableRowClass, DNHtmlTableRow>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTextAreaClass = interface(DNHtmlContainerControlClass)
  ['{955B0301-6C11-5249-9494-57B52869AA6B}']
  { constructors } 

    {class} function init: DNHtmlTextArea;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTextArea')]
  DNHtmlTextArea = interface(DNHtmlContainerControl)
  ['{C1625610-C264-358D-B1C1-77F569ED136F}']
  { getters & setters } 

    function get_Cols: Int32;
    procedure set_Cols(value: Int32);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Rows: Int32;
    procedure set_Rows(value: Int32);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cols: Int32 read get_Cols write set_Cols;
    property Name: string read get_Name write set_Name;
    property Rows: Int32 read get_Rows write set_Rows;
    property Value: string read get_Value write set_Value;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTextArea = class(TDNGenericImport<DNHtmlTextAreaClass, DNHtmlTextArea>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlVideoClass = interface(DNHtmlContainerControlClass)
  ['{643192A3-9F27-5CFA-934A-49661C943504}']
  { constructors } 

    {class} function init: DNHtmlVideo;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlVideo')]
  DNHtmlVideo = interface(DNHtmlContainerControl)
  ['{2FD6E4C8-8A89-3C54-9EE2-80DB027BDDF0}']
  { getters & setters } 

    function get_Poster: string;
    procedure set_Poster(value: string);
    function get_Src: string;
    procedure set_Src(value: string);
    function get_InnerHtml: string;
    procedure set_InnerHtml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Poster: string read get_Poster write set_Poster;
    property Src: string read get_Src write set_Src;
    property InnerHtml: string read get_InnerHtml write set_InnerHtml;
    property InnerText: string read get_InnerText write set_InnerText;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlVideo = class(TDNGenericImport<DNHtmlVideoClass, DNHtmlVideo>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlImageClass = interface(DNHtmlControlClass)
  ['{4A3C51BD-AFDD-558B-9E2E-4EE74A6CC375}']
  { constructors } 

    {class} function init: DNHtmlImage;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlImage')]
  DNHtmlImage = interface(DNHtmlControl)
  ['{B8048299-08C9-3B74-921D-44B49FF6A085}']
  { getters & setters } 

    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_Align: string;
    procedure set_Align(value: string);
    function get_Border: Int32;
    procedure set_Border(value: Int32);
    function get_Height: Int32;
    procedure set_Height(value: Int32);
    function get_Src: string;
    procedure set_Src(value: string);
    function get_Width: Int32;
    procedure set_Width(value: Int32);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Alt: string read get_Alt write set_Alt;
    property Align: string read get_Align write set_Align;
    property Border: Int32 read get_Border write set_Border;
    property Height: Int32 read get_Height write set_Height;
    property Src: string read get_Src write set_Src;
    property Width: Int32 read get_Width write set_Width;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlImage = class(TDNGenericImport<DNHtmlImageClass, DNHtmlImage>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputControlClass = interface(DNHtmlControlClass)
  ['{5579B18F-80A9-5D94-8598-541FC76F1CFB}']
  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputControl')]
  DNHtmlInputControl = interface(DNHtmlControl)
  ['{567106BB-A69E-3419-B50D-798699BC8E86}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputControl = class(TDNGenericImport<DNHtmlInputControlClass, DNHtmlInputControl>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputButtonClass = interface(DNHtmlInputControlClass)
  ['{DCD4B7F4-49BC-591B-B42F-6BA926D7E6FB}']
  { constructors } 

    {class} function init: DNHtmlInputButton; overload;
    {class} function init(&type: string): DNHtmlInputButton; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputButton')]
  DNHtmlInputButton = interface(DNHtmlInputControl)
  ['{408679B7-36A9-392C-A81E-143C54BAE64C}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputButton = class(TDNGenericImport<DNHtmlInputButtonClass, DNHtmlInputButton>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputResetClass = interface(DNHtmlInputButtonClass)
  ['{3CD5B654-E05A-5BDF-9DD9-AE75BCB47B1B}']
  { constructors } 

    {class} function init: DNHtmlInputReset; overload;
    {class} function init(&type: string): DNHtmlInputReset; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputReset')]
  DNHtmlInputReset = interface(DNHtmlInputButton)
  ['{C816B5AA-90B1-3F9E-957B-C9F81EC6161B}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputReset = class(TDNGenericImport<DNHtmlInputResetClass, DNHtmlInputReset>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputSubmitClass = interface(DNHtmlInputButtonClass)
  ['{C2A7122B-0437-5051-9912-05CB2475C477}']
  { constructors } 

    {class} function init: DNHtmlInputSubmit; overload;
    {class} function init(&type: string): DNHtmlInputSubmit; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputSubmit')]
  DNHtmlInputSubmit = interface(DNHtmlInputButton)
  ['{977FBCAE-C118-37D1-9153-3C62BCCF7D9D}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputSubmit = class(TDNGenericImport<DNHtmlInputSubmitClass, DNHtmlInputSubmit>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputCheckBoxClass = interface(DNHtmlInputControlClass)
  ['{81446DFA-291F-5EDD-8021-90471E2EBB08}']
  { constructors } 

    {class} function init: DNHtmlInputCheckBox;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputCheckBox')]
  DNHtmlInputCheckBox = interface(DNHtmlInputControl)
  ['{EA86DADC-138D-3118-BCF7-68825BD31233}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputCheckBox = class(TDNGenericImport<DNHtmlInputCheckBoxClass, DNHtmlInputCheckBox>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputFileClass = interface(DNHtmlInputControlClass)
  ['{8BA7EAE2-19A5-5D77-B259-5CFFCFDDB0EB}']
  { constructors } 

    {class} function init: DNHtmlInputFile;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputFile')]
  DNHtmlInputFile = interface(DNHtmlInputControl)
  ['{15914B7F-5033-370A-BD53-07E63BC1694A}']
  { getters & setters } 

    function get_Accept: string;
    procedure set_Accept(value: string);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_PostedFile: DNHttpPostedFile;
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Accept: string read get_Accept write set_Accept;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property PostedFile: DNHttpPostedFile read get_PostedFile;
    property Size: Int32 read get_Size write set_Size;
    property Value: string read get_Value write set_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputFile = class(TDNGenericImport<DNHtmlInputFileClass, DNHtmlInputFile>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputGenericControlClass = interface(DNHtmlInputControlClass)
  ['{AEBBF4A4-5997-55CB-9D05-F11FEF9D587C}']
  { constructors } 

    {class} function init: DNHtmlInputGenericControl; overload;
    {class} function init(&type: string): DNHtmlInputGenericControl; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputGenericControl')]
  DNHtmlInputGenericControl = interface(DNHtmlInputControl)
  ['{499445ED-2503-30D3-9426-D715FC62F7A2}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputGenericControl = class(TDNGenericImport<DNHtmlInputGenericControlClass, DNHtmlInputGenericControl>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputHiddenClass = interface(DNHtmlInputControlClass)
  ['{B16ECA42-D917-53FD-B698-7D544D064D52}']
  { constructors } 

    {class} function init: DNHtmlInputHidden;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputHidden')]
  DNHtmlInputHidden = interface(DNHtmlInputControl)
  ['{D7917C56-5724-3EBC-BDD0-C35C00428205}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputHidden = class(TDNGenericImport<DNHtmlInputHiddenClass, DNHtmlInputHidden>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputImageClass = interface(DNHtmlInputControlClass)
  ['{E078D527-0CB7-5AF0-9B1A-D12B1E8D1827}']
  { constructors } 

    {class} function init: DNHtmlInputImage;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputImage')]
  DNHtmlInputImage = interface(DNHtmlInputControl)
  ['{35798D56-A7A8-3572-8FE6-CF1FADB27630}']
  { getters & setters } 

    function get_Align: string;
    procedure set_Align(value: string);
    function get_Alt: string;
    procedure set_Alt(value: string);
    function get_Border: Int32;
    procedure set_Border(value: Int32);
    function get_Src: string;
    procedure set_Src(value: string);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerClick(value: DNImageClickEventHandler);
    procedure remove_ServerClick(value: DNImageClickEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Align: string read get_Align write set_Align;
    property Alt: string read get_Alt write set_Alt;
    property Border: Int32 read get_Border write set_Border;
    property Src: string read get_Src write set_Src;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputImage = class(TDNGenericImport<DNHtmlInputImageClass, DNHtmlInputImage>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputRadioButtonClass = interface(DNHtmlInputControlClass)
  ['{879A2522-B275-51DA-A526-BDE9987D9317}']
  { constructors } 

    {class} function init: DNHtmlInputRadioButton;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputRadioButton')]
  DNHtmlInputRadioButton = interface(DNHtmlInputControl)
  ['{7472CAEF-E6A1-3FE7-847B-66BB7E25407F}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property Name: string read get_Name write set_Name;
    property Value: string read get_Value write set_Value;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputRadioButton = class(TDNGenericImport<DNHtmlInputRadioButtonClass, DNHtmlInputRadioButton>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputTextClass = interface(DNHtmlInputControlClass)
  ['{F102EB0F-8861-5635-8133-37817C3BB3B8}']
  { constructors } 

    {class} function init: DNHtmlInputText; overload;
    {class} function init(&type: string): DNHtmlInputText; overload;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputText')]
  DNHtmlInputText = interface(DNHtmlInputControl)
  ['{A416AB6C-A00B-3AD0-A4D4-7294BAE1F4F7}']
  { getters & setters } 

    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property Size: Int32 read get_Size write set_Size;
    property Value: string read get_Value write set_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputText = class(TDNGenericImport<DNHtmlInputTextClass, DNHtmlInputText>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlInputPasswordClass = interface(DNHtmlInputTextClass)
  ['{7912CD32-9CCB-5129-A919-7577206BF674}']
  { constructors } 

    {class} function init: DNHtmlInputPassword;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlInputPassword')]
  DNHtmlInputPassword = interface(DNHtmlInputText)
  ['{1A305762-0286-39B5-9F9B-34A6A3A96E95}']
  { getters & setters } 

    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: string;
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ServerChange(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property Size: Int32 read get_Size write set_Size;
    property Value: string read get_Value write set_Value;
    property Name: string read get_Name write set_Name;
    property &Type: string read get_Type;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlInputPassword = class(TDNGenericImport<DNHtmlInputPasswordClass, DNHtmlInputPassword>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlLinkClass = interface(DNHtmlControlClass)
  ['{C89AAD65-9724-58FD-B629-72F7F295EEB7}']
  { constructors } 

    {class} function init: DNHtmlLink;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlLink')]
  DNHtmlLink = interface(DNHtmlControl)
  ['{12C34035-318B-3320-B9A7-6C9D318441EE}']
  { getters & setters } 

    function get_Href: string;
    procedure set_Href(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Href: string read get_Href write set_Href;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlLink = class(TDNGenericImport<DNHtmlLinkClass, DNHtmlLink>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlMetaClass = interface(DNHtmlControlClass)
  ['{9C766A2B-0A3E-5D94-84AC-255D446E060E}']
  { constructors } 

    {class} function init: DNHtmlMeta;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlMeta')]
  DNHtmlMeta = interface(DNHtmlControl)
  ['{6A53A80F-7323-3514-A11F-91842A663006}']
  { getters & setters } 

    function get_Content: string;
    procedure set_Content(value: string);
    function get_HttpEquiv: string;
    procedure set_HttpEquiv(value: string);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Scheme: string;
    procedure set_Scheme(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Content: string read get_Content write set_Content;
    property HttpEquiv: string read get_HttpEquiv write set_HttpEquiv;
    property Name: string read get_Name write set_Name;
    property Scheme: string read get_Scheme write set_Scheme;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlMeta = class(TDNGenericImport<DNHtmlMetaClass, DNHtmlMeta>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlSourceClass = interface(DNHtmlControlClass)
  ['{E10B3119-80AA-5035-A5FB-0E416C89F08F}']
  { constructors } 

    {class} function init: DNHtmlSource;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlSource')]
  DNHtmlSource = interface(DNHtmlControl)
  ['{654F9EB3-0DB5-3B76-A3F0-2BFFDDBE9157}']
  { getters & setters } 

    function get_Src: string;
    procedure set_Src(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Src: string read get_Src write set_Src;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlSource = class(TDNGenericImport<DNHtmlSourceClass, DNHtmlSource>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTitleClass = interface(DNHtmlControlClass)
  ['{CB3077B3-EC9B-576E-865E-63CDD0C8E5C0}']
  { constructors } 

    {class} function init: DNHtmlTitle;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTitle')]
  DNHtmlTitle = interface(DNHtmlControl)
  ['{0173EEF7-FD7A-388D-A93A-6817F49380F0}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTitle = class(TDNGenericImport<DNHtmlTitleClass, DNHtmlTitle>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTrackClass = interface(DNHtmlControlClass)
  ['{2E95399A-BE23-556C-8A43-AEAC72668210}']
  { constructors } 

    {class} function init: DNHtmlTrack;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTrack')]
  DNHtmlTrack = interface(DNHtmlControl)
  ['{9489AA6F-8D29-38DD-A643-11CFFCF3887A}']
  { getters & setters } 

    function get_Src: string;
    procedure set_Src(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Style: DNCssStyleCollection;
    function get_TagName: string;
    function get_Disabled: Boolean;
    procedure set_Disabled(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Src: string read get_Src write set_Src;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Style: DNCssStyleCollection read get_Style;
    property TagName: string read get_TagName;
    property Disabled: Boolean read get_Disabled write set_Disabled;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHtmlTrack = class(TDNGenericImport<DNHtmlTrackClass, DNHtmlTrack>) end;

  //-------------namespace: System.Web.UI----------------
  DNLiteralControlClass = interface(DNControlClass)
  ['{07D7A01D-5BD8-59E2-8EA5-C99587363346}']
  { constructors } 

    {class} function init: DNLiteralControl; overload;
    {class} function init(text: string): DNLiteralControl; overload;

  end;

  [DNTypeName('System.Web.UI.LiteralControl')]
  DNLiteralControl = interface(DNControl)
  ['{3AAECF95-937F-38BF-BDC2-B5674254BF3C}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLiteralControl = class(TDNGenericImport<DNLiteralControlClass, DNLiteralControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateControlClass = interface(DNControlClass)
  ['{E884837D-C252-551A-92FF-4EB2A30B1ABB}']
  { static methods } 

    {class} function ReadStringResource(t: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;

  end;

  [DNTypeName('System.Web.UI.TemplateControl')]
  DNTemplateControl = interface(DNControl)
  ['{41E5507A-1EB6-3017-8620-7A186E7AFC76}']
  { getters & setters } 

    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ReadStringResource: DDN.mscorlib.DNObject; overload;
    function TestDeviceFilter(filterName: string): Boolean;
    function LoadControl(virtualPath: string): DNControl; overload;
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    function LoadTemplate(virtualPath: string): DNITemplate;
    function ParseControl(content: string): DNControl; overload;
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTemplateControl = class(TDNGenericImport<DNTemplateControlClass, DNTemplateControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageClass = interface(DNTemplateControlClass)
  ['{FC24C493-A050-5D67-84E3-96E4731469D1}']
  { constructors } 

    {class} function init: DNPage;

  { static methods } 

    {class} function CreateHtmlTextWriterFromType(tw: DDN.mscorlib.DNTextWriter; writerType: DDN.mscorlib.DNType): DNHtmlTextWriter;

  end;

  [DNTypeName('System.Web.UI.Page')]
  DNPage = interface(DNTemplateControl)
  ['{DA600DD7-B5BB-3793-810A-22AD45DBEE78}']
  { getters & setters } 

    function get_ModelState: DNModelStateDictionary;
    function get_ModelBindingExecutionContext: DNModelBindingExecutionContext;
    function get_UnobtrusiveValidationMode: DNUnobtrusiveValidationMode;
    procedure set_UnobtrusiveValidationMode(value: DNUnobtrusiveValidationMode);
    function get_Application: DNHttpApplicationState;
    function get_ClientScript: DNClientScriptManager;
    function get_ClientTarget: string;
    procedure set_ClientTarget(value: string);
    function get_ClientQueryString: string;
    function get_ErrorPage: string;
    procedure set_ErrorPage(value: string);
    function get_IsCallback: Boolean;
    function get_IsReusable: Boolean;
    function get_AutoPostBackControl: DNControl;
    procedure set_AutoPostBackControl(value: DNControl);
    function get_Header: DNHtmlHead;
    function get_IdSeparator: Char;
    function get_MaintainScrollPositionOnPostBack: Boolean;
    procedure set_MaintainScrollPositionOnPostBack(value: Boolean);
    function get_Master: DNMasterPage;
    function get_MasterPageFile: string;
    procedure set_MasterPageFile(value: string);
    function get_MaxPageStateFieldLength: Int32;
    procedure set_MaxPageStateFieldLength(value: Int32);
    function get_Trace: DNTraceContext;
    function get_Request: DNHttpRequest;
    function get_Response: DNHttpResponse;
    function get_RouteData: DNRouteData;
    function get_Server: DNHttpServerUtility;
    function get_Cache: DNCache;
    function get_Session: DNHttpSessionState;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_MetaDescription: string;
    procedure set_MetaDescription(value: string);
    function get_MetaKeywords: string;
    procedure set_MetaKeywords(value: string);
    function get_Theme: string;
    procedure set_Theme(value: string);
    function get_StyleSheetTheme: string;
    procedure set_StyleSheetTheme(value: string);
    function get_User: DDN.mscorlib.DNIPrincipal;
    function get_IsCrossPagePostBack: Boolean;
    function get_IsPostBack: Boolean;
    function get_EnableEventValidation: Boolean;
    procedure set_EnableEventValidation(value: Boolean);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateEncryptionMode: DNViewStateEncryptionMode;
    procedure set_ViewStateEncryptionMode(value: DNViewStateEncryptionMode);
    function get_ViewStateUserKey: string;
    procedure set_ViewStateUserKey(value: string);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_SkipFormActionValidation: Boolean;
    procedure set_SkipFormActionValidation(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_IsPostBackEventControlRegistered: Boolean;
    function get_IsValid: Boolean;
    function get_Validators: DNValidatorCollection;
    function get_PreviousPage: DNPage;
    function get_Buffer: Boolean;
    procedure set_Buffer(value: Boolean);
    function get_ContentType: string;
    procedure set_ContentType(value: string);
    function get_CodePage: Int32;
    procedure set_CodePage(value: Int32);
    function get_ResponseEncoding: string;
    procedure set_ResponseEncoding(value: string);
    function get_Culture: string;
    procedure set_Culture(value: string);
    function get_LCID: Int32;
    procedure set_LCID(value: Int32);
    function get_UICulture: string;
    procedure set_UICulture(value: string);
    function get_AsyncTimeout: DDN.mscorlib.DNTimeSpan;
    procedure set_AsyncTimeout(value: DDN.mscorlib.DNTimeSpan);
    function get_TraceEnabled: Boolean;
    procedure set_TraceEnabled(value: Boolean);
    function get_TraceModeValue: DNTraceMode;
    procedure set_TraceModeValue(value: DNTraceMode);
    function get_EnableViewStateMac: Boolean;
    procedure set_EnableViewStateMac(value: Boolean);
    function get_SmartNavigation: Boolean;
    procedure set_SmartNavigation(value: Boolean);
    function get_IsAsync: Boolean;
    function get_Form: DNHtmlForm;
    function get_PageAdapter: DNPageAdapter;
    function get_Items: DDN.mscorlib.DNIDictionary;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;

  { events } 

    procedure add_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoadComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreInit(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreInit(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreLoad(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreLoad(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRenderComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRenderComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_InitComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_InitComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_SaveStateComplete(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SaveStateComplete(value: DDN.mscorlib.DNEventHandler);
    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetTypeHashCode: Int32;
    procedure DesignerInitialize;
    function GetPostBackEventReference(control: DNControl): string; overload;
    function GetPostBackEventReference(control: DNControl; argument: string): string; overload;
    function GetPostBackClientEvent(control: DNControl; argument: string): string;
    function IsClientScriptBlockRegistered(key: string): Boolean;
    function IsStartupScriptRegistered(key: string): Boolean;
    procedure RegisterArrayDeclaration(arrayName: string; arrayValue: string);
    procedure RegisterHiddenField(hiddenFieldName: string; hiddenFieldInitialValue: string);
    procedure RegisterClientScriptBlock(key: string; script: string);
    procedure RegisterStartupScript(key: string; script: string);
    procedure RegisterOnSubmitStatement(key: string; script: string);
    function RequiresControlState(control: DNControl): Boolean;
    procedure UnregisterRequiresControlState(control: DNControl);
    procedure RegisterRequiresPostBack(control: DNControl);
    procedure RegisterRequiresRaiseEvent(control: DNIPostBackEventHandler);
    function MapPath(virtualPath: string): string;
    procedure RegisterRequiresViewStateEncryption;
    procedure ProcessRequest(context: DNHttpContext);
    procedure RegisterViewStateHandler;
    procedure ExecuteRegisteredAsyncTasks;
    procedure RegisterAsyncTask(task: DNPageAsyncTask);
    procedure AddOnPreRenderCompleteAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler); overload;
    procedure AddOnPreRenderCompleteAsync(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject); overload;
    procedure Validate; overload;
    procedure Validate(validationGroup: string); overload;
    function GetValidators(validationGroup: string): DNValidatorCollection;
    function GetDataItem: DDN.mscorlib.DNObject;
    function FindControl(id: string): DNControl;
    procedure SetFocus(clientID: string); overload;
    function GetPostBackClientHyperlink(control: DNControl; argument: string): string;
    procedure VerifyRenderingInServerForm(control: DNControl);
    procedure SetFocus(control: DNControl); overload;
    procedure RegisterRequiresControlState(control: DNControl);
    function ReadStringResource: DDN.mscorlib.DNObject;
    function TestDeviceFilter(filterName: string): Boolean;
    function LoadControl(virtualPath: string): DNControl; overload;
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    function LoadTemplate(virtualPath: string): DNITemplate;
    function ParseControl(content: string): DNControl; overload;
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelState: DNModelStateDictionary read get_ModelState;
    property ModelBindingExecutionContext: DNModelBindingExecutionContext read get_ModelBindingExecutionContext;
    property UnobtrusiveValidationMode: DNUnobtrusiveValidationMode read get_UnobtrusiveValidationMode write set_UnobtrusiveValidationMode;
    property Application: DNHttpApplicationState read get_Application;
    property ClientScript: DNClientScriptManager read get_ClientScript;
    property ClientTarget: string read get_ClientTarget write set_ClientTarget;
    property ClientQueryString: string read get_ClientQueryString;
    property ErrorPage: string read get_ErrorPage write set_ErrorPage;
    property IsCallback: Boolean read get_IsCallback;
    property IsReusable: Boolean read get_IsReusable;
    property AutoPostBackControl: DNControl read get_AutoPostBackControl write set_AutoPostBackControl;
    property Header: DNHtmlHead read get_Header;
    property IdSeparator: Char read get_IdSeparator;
    property MaintainScrollPositionOnPostBack: Boolean read get_MaintainScrollPositionOnPostBack write set_MaintainScrollPositionOnPostBack;
    property Master: DNMasterPage read get_Master;
    property MasterPageFile: string read get_MasterPageFile write set_MasterPageFile;
    property MaxPageStateFieldLength: Int32 read get_MaxPageStateFieldLength write set_MaxPageStateFieldLength;
    property Trace: DNTraceContext read get_Trace;
    property Request: DNHttpRequest read get_Request;
    property Response: DNHttpResponse read get_Response;
    property RouteData: DNRouteData read get_RouteData;
    property Server: DNHttpServerUtility read get_Server;
    property Cache: DNCache read get_Cache;
    property Session: DNHttpSessionState read get_Session;
    property Title: string read get_Title write set_Title;
    property MetaDescription: string read get_MetaDescription write set_MetaDescription;
    property MetaKeywords: string read get_MetaKeywords write set_MetaKeywords;
    property Theme: string read get_Theme write set_Theme;
    property StyleSheetTheme: string read get_StyleSheetTheme write set_StyleSheetTheme;
    property User: DDN.mscorlib.DNIPrincipal read get_User;
    property IsCrossPagePostBack: Boolean read get_IsCrossPagePostBack;
    property IsPostBack: Boolean read get_IsPostBack;
    property EnableEventValidation: Boolean read get_EnableEventValidation write set_EnableEventValidation;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateEncryptionMode: DNViewStateEncryptionMode read get_ViewStateEncryptionMode write set_ViewStateEncryptionMode;
    property ViewStateUserKey: string read get_ViewStateUserKey write set_ViewStateUserKey;
    property ID: string read get_ID write set_ID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property SkipFormActionValidation: Boolean read get_SkipFormActionValidation write set_SkipFormActionValidation;
    property Visible: Boolean read get_Visible write set_Visible;
    property IsPostBackEventControlRegistered: Boolean read get_IsPostBackEventControlRegistered;
    property IsValid: Boolean read get_IsValid;
    property Validators: DNValidatorCollection read get_Validators;
    property PreviousPage: DNPage read get_PreviousPage;
    property Buffer: Boolean read get_Buffer write set_Buffer;
    property ContentType: string read get_ContentType write set_ContentType;
    property CodePage: Int32 read get_CodePage write set_CodePage;
    property ResponseEncoding: string read get_ResponseEncoding write set_ResponseEncoding;
    property Culture: string read get_Culture write set_Culture;
    property LCID: Int32 read get_LCID write set_LCID;
    property UICulture: string read get_UICulture write set_UICulture;
    property AsyncTimeout: DDN.mscorlib.DNTimeSpan read get_AsyncTimeout write set_AsyncTimeout;
    property TraceEnabled: Boolean read get_TraceEnabled write set_TraceEnabled;
    property TraceModeValue: DNTraceMode read get_TraceModeValue write set_TraceModeValue;
    property EnableViewStateMac: Boolean read get_EnableViewStateMac write set_EnableViewStateMac;
    property SmartNavigation: Boolean read get_SmartNavigation write set_SmartNavigation;
    property IsAsync: Boolean read get_IsAsync;
    property Form: DNHtmlForm read get_Form;
    property PageAdapter: DNPageAdapter read get_PageAdapter;
    property Items: DDN.mscorlib.DNIDictionary read get_Items;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property SkinID: string read get_SkinID write set_SkinID;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
  end;

  TDNPage = class(TDNGenericImport<DNPageClass, DNPage>)
  public const
   postEventSourceID = '__EVENTTARGET';
   postEventArgumentID = '__EVENTARGUMENT';
  end;

  //-------------namespace: System.Web.UI----------------
  DNUserControlClass = interface(DNTemplateControlClass)
  ['{0DDABB58-172D-599F-A182-2BBCE9566594}']
  { constructors } 

    {class} function init: DNUserControl;

  end;

  [DNTypeName('System.Web.UI.UserControl')]
  DNUserControl = interface(DNTemplateControl)
  ['{A619673F-A273-35F8-9357-6798836CD81D}']
  { getters & setters } 

    function get_Attributes: DNAttributeCollection;
    function get_Application: DNHttpApplicationState;
    function get_Trace: DNTraceContext;
    function get_Request: DNHttpRequest;
    function get_Response: DNHttpResponse;
    function get_Server: DNHttpServerUtility;
    function get_Cache: DNCache;
    function get_CachePolicy: DNControlCachePolicy;
    function get_IsPostBack: Boolean;
    function get_Session: DNHttpSessionState;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DesignerInitialize;
    procedure InitializeAsUserControl(page: DNPage);
    function MapPath(virtualPath: string): string;
    function ReadStringResource: DDN.mscorlib.DNObject;
    function TestDeviceFilter(filterName: string): Boolean;
    function LoadControl(virtualPath: string): DNControl; overload;
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    function LoadTemplate(virtualPath: string): DNITemplate;
    function ParseControl(content: string): DNControl; overload;
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Attributes: DNAttributeCollection read get_Attributes;
    property Application: DNHttpApplicationState read get_Application;
    property Trace: DNTraceContext read get_Trace;
    property Request: DNHttpRequest read get_Request;
    property Response: DNHttpResponse read get_Response;
    property Server: DNHttpServerUtility read get_Server;
    property Cache: DNCache read get_Cache;
    property CachePolicy: DNControlCachePolicy read get_CachePolicy;
    property IsPostBack: Boolean read get_IsPostBack;
    property Session: DNHttpSessionState read get_Session;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNUserControl = class(TDNGenericImport<DNUserControlClass, DNUserControl>) end;

  //-------------namespace: System.Web.UI----------------
  DNMasterPageClass = interface(DNUserControlClass)
  ['{1FB77AEE-5C66-51EA-925D-49FB25FC4754}']
  { constructors } 

    {class} function init: DNMasterPage;

  end;

  [DNTypeName('System.Web.UI.MasterPage')]
  DNMasterPage = interface(DNUserControl)
  ['{8662DF6A-EFCA-3C19-9B95-700A736E5E7E}']
  { getters & setters } 

    function get_Master: DNMasterPage;
    function get_MasterPageFile: string;
    procedure set_MasterPageFile(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_Application: DNHttpApplicationState;
    function get_Trace: DNTraceContext;
    function get_Request: DNHttpRequest;
    function get_Response: DNHttpResponse;
    function get_Server: DNHttpServerUtility;
    function get_Cache: DNCache;
    function get_CachePolicy: DNControlCachePolicy;
    function get_IsPostBack: Boolean;
    function get_Session: DNHttpSessionState;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_AppRelativeVirtualPath: string;
    procedure set_AppRelativeVirtualPath(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CommitTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AbortTransaction(value: DDN.mscorlib.DNEventHandler);
    procedure add_Error(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Error(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure InstantiateInContentPlaceHolder(contentPlaceHolder: DNControl; template: DNITemplate);
    procedure DesignerInitialize;
    procedure InitializeAsUserControl(page: DNPage);
    function MapPath(virtualPath: string): string;
    function ReadStringResource: DDN.mscorlib.DNObject;
    function TestDeviceFilter(filterName: string): Boolean;
    function LoadControl(virtualPath: string): DNControl; overload;
    function LoadControl(t: DDN.mscorlib.DNType; parameters: TArray<DDN.mscorlib.DNObject>): DNControl; overload;
    function LoadTemplate(virtualPath: string): DNITemplate;
    function ParseControl(content: string): DNControl; overload;
    function ParseControl(content: string; ignoreParserFilter: Boolean): DNControl; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Master: DNMasterPage read get_Master;
    property MasterPageFile: string read get_MasterPageFile write set_MasterPageFile;
    property Attributes: DNAttributeCollection read get_Attributes;
    property Application: DNHttpApplicationState read get_Application;
    property Trace: DNTraceContext read get_Trace;
    property Request: DNHttpRequest read get_Request;
    property Response: DNHttpResponse read get_Response;
    property Server: DNHttpServerUtility read get_Server;
    property Cache: DNCache read get_Cache;
    property CachePolicy: DNControlCachePolicy read get_CachePolicy;
    property IsPostBack: Boolean read get_IsPostBack;
    property Session: DNHttpSessionState read get_Session;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property AppRelativeVirtualPath: string read get_AppRelativeVirtualPath write set_AppRelativeVirtualPath;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNMasterPage = class(TDNGenericImport<DNMasterPageClass, DNMasterPage>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNContentClass = interface(DNControlClass)
  ['{DFA18DF7-B793-5446-AAFB-732DC48791B7}']
  { constructors } 

    {class} function init: DNContent;

  end;

  [DNTypeName('System.Web.UI.WebControls.Content')]
  DNContent = interface(DNControl)
  ['{08738CBB-00AC-3CE0-8833-820C9E5BA153}']
  { getters & setters } 

    function get_ContentPlaceHolderID: string;
    procedure set_ContentPlaceHolderID(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentPlaceHolderID: string read get_ContentPlaceHolderID write set_ContentPlaceHolderID;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNContent = class(TDNGenericImport<DNContentClass, DNContent>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNContentPlaceHolderClass = interface(DNControlClass)
  ['{9F925217-E884-5C21-9FB3-EC15372824CB}']
  { constructors } 

    {class} function init: DNContentPlaceHolder;

  end;

  [DNTypeName('System.Web.UI.WebControls.ContentPlaceHolder')]
  DNContentPlaceHolder = interface(DNControl)
  ['{D0A00E6A-878F-3F24-92C7-968CCEF2F82F}']
  { getters & setters } 

    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNContentPlaceHolder = class(TDNGenericImport<DNContentPlaceHolderClass, DNContentPlaceHolder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHiddenFieldClass = interface(DNControlClass)
  ['{0E596CFC-0984-5E8C-B09F-8FED56F7BE4F}']
  { constructors } 

    {class} function init: DNHiddenField;

  end;

  [DNTypeName('System.Web.UI.WebControls.HiddenField')]
  DNHiddenField = interface(DNControl)
  ['{D3CEB7D9-7D9C-355B-BD39-EE6844169F1D}']
  { getters & setters } 

    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ValueChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ValueChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Value: string read get_Value write set_Value;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHiddenField = class(TDNGenericImport<DNHiddenFieldClass, DNHiddenField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLiteralClass = interface(DNControlClass)
  ['{5763210E-1585-5B57-92A4-68054313C77B}']
  { constructors } 

    {class} function init: DNLiteral;

  end;

  [DNTypeName('System.Web.UI.WebControls.Literal')]
  DNLiteral = interface(DNControl)
  ['{BC8A819B-0A40-37B4-8D39-900D71FE7245}']
  { getters & setters } 

    function get_Mode: DNLiteralMode;
    procedure set_Mode(value: DNLiteralMode);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNLiteralMode read get_Mode write set_Mode;
    property Text: string read get_Text write set_Text;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLiteral = class(TDNGenericImport<DNLiteralClass, DNLiteral>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLocalizeClass = interface(DNLiteralClass)
  ['{9A14CC28-1A37-5868-8F81-00EE0A442771}']
  { constructors } 

    {class} function init: DNLocalize;

  end;

  [DNTypeName('System.Web.UI.WebControls.Localize')]
  DNLocalize = interface(DNLiteral)
  ['{142D68B0-F111-3EDC-B6A0-FDF9A39EEE57}']
  { getters & setters } 

    function get_Mode: DNLiteralMode;
    procedure set_Mode(value: DNLiteralMode);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Mode: DNLiteralMode read get_Mode write set_Mode;
    property Text: string read get_Text write set_Text;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLocalize = class(TDNGenericImport<DNLocalizeClass, DNLocalize>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLoginViewClass = interface(DNControlClass)
  ['{A9ABCA87-C264-51DB-8D7F-0E6463334597}']
  { constructors } 

    {class} function init: DNLoginView;

  end;

  [DNTypeName('System.Web.UI.WebControls.LoginView')]
  DNLoginView = interface(DNControl)
  ['{B7E7BD08-C8AE-3B8C-8D20-E218795E89F4}']
  { getters & setters } 

    function get_AnonymousTemplate: DNITemplate;
    procedure set_AnonymousTemplate(value: DNITemplate);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Controls: DNControlCollection;
    function get_LoggedInTemplate: DNITemplate;
    procedure set_LoggedInTemplate(value: DNITemplate);
    function get_RoleGroups: DNRoleGroupCollection;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_ViewChanging(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ViewChanging(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AnonymousTemplate: DNITemplate read get_AnonymousTemplate write set_AnonymousTemplate;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Controls: DNControlCollection read get_Controls;
    property LoggedInTemplate: DNITemplate read get_LoggedInTemplate write set_LoggedInTemplate;
    property RoleGroups: DNRoleGroupCollection read get_RoleGroups;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLoginView = class(TDNGenericImport<DNLoginViewClass, DNLoginView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemTemplateContainerClass = interface(DNControlClass)
  ['{727210FF-BFF7-58C8-9B67-4D52B2EB2B0A}']
  { constructors } 

    {class} function init(itemIndex: Int32; dataItem: DNMenuItem): DNMenuItemTemplateContainer;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemTemplateContainer')]
  DNMenuItemTemplateContainer = interface(DNControl)
  ['{F1E9806A-95D1-3F59-9874-9C4A84911690}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_ItemIndex: Int32;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    property ItemIndex: Int32 read get_ItemIndex;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNMenuItemTemplateContainer = class(TDNGenericImport<DNMenuItemTemplateContainerClass, DNMenuItemTemplateContainer>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMultiViewClass = interface(DNControlClass)
  ['{BC1AB176-F662-587B-ADEC-3B7436FB3BD3}']
  { constructors } 

    {class} function init: DNMultiView;

  { static fields getter & setter } 

   function __fakeFieldGet_NextViewCommandName: string;
   function __fakeFieldGet_PreviousViewCommandName: string;
   function __fakeFieldGet_SwitchViewByIDCommandName: string;
   function __fakeFieldGet_SwitchViewByIndexCommandName: string;

  { static fields } 

    {class} property NextViewCommandName: string read __fakeFieldGet_NextViewCommandName;
    {class} property PreviousViewCommandName: string read __fakeFieldGet_PreviousViewCommandName;
    {class} property SwitchViewByIDCommandName: string read __fakeFieldGet_SwitchViewByIDCommandName;
    {class} property SwitchViewByIndexCommandName: string read __fakeFieldGet_SwitchViewByIndexCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.MultiView')]
  DNMultiView = interface(DNControl)
  ['{576D5140-E33E-37A3-87C6-5E03D7FE3C94}']
  { getters & setters } 

    function get_ActiveViewIndex: Int32;
    procedure set_ActiveViewIndex(value: Int32);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Views: DNViewCollection;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ActiveViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ActiveViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetActiveView: DNView;
    procedure SetActiveView(view: DNView);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveViewIndex: Int32 read get_ActiveViewIndex write set_ActiveViewIndex;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Views: DNViewCollection read get_Views;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNMultiView = class(TDNGenericImport<DNMultiViewClass, DNMultiView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPlaceHolderClass = interface(DNControlClass)
  ['{603772B6-7E7E-50E0-A186-199A47B58D70}']
  { constructors } 

    {class} function init: DNPlaceHolder;

  end;

  [DNTypeName('System.Web.UI.WebControls.PlaceHolder')]
  DNPlaceHolder = interface(DNControl)
  ['{71C06EB7-1755-37A8-B988-98CB221A3AD7}']
  { getters & setters } 

    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPlaceHolder = class(TDNGenericImport<DNPlaceHolderClass, DNPlaceHolder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeaterClass = interface(DNControlClass)
  ['{A7636E95-15E5-5B0E-9912-3AA1372A59D4}']
  { constructors } 

    {class} function init: DNRepeater;

  end;

  [DNTypeName('System.Web.UI.WebControls.Repeater')]
  DNRepeater = interface(DNControl)
  ['{99B770F0-2053-3E1B-AB91-6F4B20E1C3A5}']
  { getters & setters } 

    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_AlternatingItemTemplate: DNITemplate;
    procedure set_AlternatingItemTemplate(value: DNITemplate);
    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_Items: DNRepeaterItemCollection;
    function get_ItemTemplate: DNITemplate;
    procedure set_ItemTemplate(value: DNITemplate);
    function get_SeparatorTemplate: DNITemplate;
    procedure set_SeparatorTemplate(value: DNITemplate);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_ItemCommand(value: DNRepeaterCommandEventHandler);
    procedure remove_ItemCommand(value: DNRepeaterCommandEventHandler);
    procedure add_ItemCreated(value: DNRepeaterItemEventHandler);
    procedure remove_ItemCreated(value: DNRepeaterItemEventHandler);
    procedure add_ItemDataBound(value: DNRepeaterItemEventHandler);
    procedure remove_ItemDataBound(value: DNRepeaterItemEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property AlternatingItemTemplate: DNITemplate read get_AlternatingItemTemplate write set_AlternatingItemTemplate;
    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property Items: DNRepeaterItemCollection read get_Items;
    property ItemTemplate: DNITemplate read get_ItemTemplate write set_ItemTemplate;
    property SeparatorTemplate: DNITemplate read get_SeparatorTemplate write set_SeparatorTemplate;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRepeater = class(TDNGenericImport<DNRepeaterClass, DNRepeater>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeaterItemClass = interface(DNControlClass)
  ['{C63C1AEF-D000-57CF-B6BC-68B429B45617}']
  { constructors } 

    {class} function init(itemIndex: Int32; itemType: DNListItemType): DNRepeaterItem;

  end;

  [DNTypeName('System.Web.UI.WebControls.RepeaterItem')]
  DNRepeaterItem = interface(DNControl)
  ['{44B71FD4-06C4-3661-AFD7-CD28AC871093}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_ItemIndex: Int32;
    function get_ItemType: DNListItemType;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    property ItemIndex: Int32 read get_ItemIndex;
    property ItemType: DNListItemType read get_ItemType;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRepeaterItem = class(TDNGenericImport<DNRepeaterItemClass, DNRepeaterItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSubstitutionClass = interface(DNControlClass)
  ['{86A6F512-764A-5FAF-BD83-81340DFFC1A4}']
  { constructors } 

    {class} function init: DNSubstitution;

  end;

  [DNTypeName('System.Web.UI.WebControls.Substitution')]
  DNSubstitution = interface(DNControl)
  ['{A27909E8-AE52-390C-9C56-42E5325CB323}']
  { getters & setters } 

    function get_MethodName: string;
    procedure set_MethodName(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MethodName: string read get_MethodName write set_MethodName;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNSubstitution = class(TDNGenericImport<DNSubstitutionClass, DNSubstitution>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNViewClass = interface(DNControlClass)
  ['{A0B259D0-D60D-5A6B-A7C9-C1DCAABD23D9}']
  { constructors } 

    {class} function init: DNView;

  end;

  [DNTypeName('System.Web.UI.WebControls.View')]
  DNView = interface(DNControl)
  ['{F0A88D06-CBEE-36A8-9A6A-029333A06548}']
  { getters & setters } 

    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNView = class(TDNGenericImport<DNViewClass, DNView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardStepBaseClass = interface(DNViewClass)
  ['{FBEF4290-C781-51FC-9930-4263DB05131E}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WizardStepBase')]
  DNWizardStepBase = interface(DNView)
  ['{0B2A45E2-A1AF-3DD5-9D7D-C434D42AAEFE}']
  { getters & setters } 

    function get_AllowReturn: Boolean;
    procedure set_AllowReturn(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Name: string;
    function get_StepType: DNWizardStepType;
    procedure set_StepType(value: DNWizardStepType);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Wizard: DNWizard;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowReturn: Boolean read get_AllowReturn write set_AllowReturn;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ID: string read get_ID write set_ID;
    property Name: string read get_Name;
    property StepType: DNWizardStepType read get_StepType write set_StepType;
    property Title: string read get_Title write set_Title;
    property Wizard: DNWizard read get_Wizard;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWizardStepBase = class(TDNGenericImport<DNWizardStepBaseClass, DNWizardStepBase>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTemplatedWizardStepClass = interface(DNWizardStepBaseClass)
  ['{8B4737F8-ECC7-501F-AF7A-BCDD9CB4DC29}']
  { constructors } 

    {class} function init: DNTemplatedWizardStep;

  end;

  [DNTypeName('System.Web.UI.WebControls.TemplatedWizardStep')]
  DNTemplatedWizardStep = interface(DNWizardStepBase)
  ['{AC827179-0814-344B-8A22-DF7C17301068}']
  { getters & setters } 

    function get_ContentTemplate: DNITemplate;
    procedure set_ContentTemplate(value: DNITemplate);
    function get_ContentTemplateContainer: DNControl;
    function get_CustomNavigationTemplate: DNITemplate;
    procedure set_CustomNavigationTemplate(value: DNITemplate);
    function get_CustomNavigationTemplateContainer: DNControl;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_AllowReturn: Boolean;
    procedure set_AllowReturn(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Name: string;
    function get_StepType: DNWizardStepType;
    procedure set_StepType(value: DNWizardStepType);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Wizard: DNWizard;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentTemplate: DNITemplate read get_ContentTemplate write set_ContentTemplate;
    property ContentTemplateContainer: DNControl read get_ContentTemplateContainer;
    property CustomNavigationTemplate: DNITemplate read get_CustomNavigationTemplate write set_CustomNavigationTemplate;
    property CustomNavigationTemplateContainer: DNControl read get_CustomNavigationTemplateContainer;
    property SkinID: string read get_SkinID write set_SkinID;
    property AllowReturn: Boolean read get_AllowReturn write set_AllowReturn;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ID: string read get_ID write set_ID;
    property Name: string read get_Name;
    property StepType: DNWizardStepType read get_StepType write set_StepType;
    property Title: string read get_Title write set_Title;
    property Wizard: DNWizard read get_Wizard;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTemplatedWizardStep = class(TDNGenericImport<DNTemplatedWizardStepClass, DNTemplatedWizardStep>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCompleteWizardStepClass = interface(DNTemplatedWizardStepClass)
  ['{99700298-D22C-52F4-BFE7-910143667A5C}']
  { constructors } 

    {class} function init: DNCompleteWizardStep;

  end;

  [DNTypeName('System.Web.UI.WebControls.CompleteWizardStep')]
  DNCompleteWizardStep = interface(DNTemplatedWizardStep)
  ['{5D70E190-9758-31A2-877E-A4DB1C1D7118}']
  { getters & setters } 

    function get_StepType: DNWizardStepType;
    procedure set_StepType(value: DNWizardStepType);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_ContentTemplate: DNITemplate;
    procedure set_ContentTemplate(value: DNITemplate);
    function get_ContentTemplateContainer: DNControl;
    function get_CustomNavigationTemplate: DNITemplate;
    procedure set_CustomNavigationTemplate(value: DNITemplate);
    function get_CustomNavigationTemplateContainer: DNControl;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_AllowReturn: Boolean;
    procedure set_AllowReturn(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Name: string;
    function get_Wizard: DNWizard;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property StepType: DNWizardStepType read get_StepType write set_StepType;
    property Title: string read get_Title write set_Title;
    property ContentTemplate: DNITemplate read get_ContentTemplate write set_ContentTemplate;
    property ContentTemplateContainer: DNControl read get_ContentTemplateContainer;
    property CustomNavigationTemplate: DNITemplate read get_CustomNavigationTemplate write set_CustomNavigationTemplate;
    property CustomNavigationTemplateContainer: DNControl read get_CustomNavigationTemplateContainer;
    property SkinID: string read get_SkinID write set_SkinID;
    property AllowReturn: Boolean read get_AllowReturn write set_AllowReturn;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ID: string read get_ID write set_ID;
    property Name: string read get_Name;
    property Wizard: DNWizard read get_Wizard;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCompleteWizardStep = class(TDNGenericImport<DNCompleteWizardStepClass, DNCompleteWizardStep>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCreateUserWizardStepClass = interface(DNTemplatedWizardStepClass)
  ['{D7363F1B-FDEF-5AC6-A9FC-610801CC659A}']
  { constructors } 

    {class} function init: DNCreateUserWizardStep;

  end;

  [DNTypeName('System.Web.UI.WebControls.CreateUserWizardStep')]
  DNCreateUserWizardStep = interface(DNTemplatedWizardStep)
  ['{A0111278-01CD-38C1-9E87-76CC53DA4C50}']
  { getters & setters } 

    function get_AllowReturn: Boolean;
    procedure set_AllowReturn(value: Boolean);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_StepType: DNWizardStepType;
    procedure set_StepType(value: DNWizardStepType);
    function get_ContentTemplate: DNITemplate;
    procedure set_ContentTemplate(value: DNITemplate);
    function get_ContentTemplateContainer: DNControl;
    function get_CustomNavigationTemplate: DNITemplate;
    procedure set_CustomNavigationTemplate(value: DNITemplate);
    function get_CustomNavigationTemplateContainer: DNControl;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Name: string;
    function get_Wizard: DNWizard;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowReturn: Boolean read get_AllowReturn write set_AllowReturn;
    property Title: string read get_Title write set_Title;
    property StepType: DNWizardStepType read get_StepType write set_StepType;
    property ContentTemplate: DNITemplate read get_ContentTemplate write set_ContentTemplate;
    property ContentTemplateContainer: DNControl read get_ContentTemplateContainer;
    property CustomNavigationTemplate: DNITemplate read get_CustomNavigationTemplate write set_CustomNavigationTemplate;
    property CustomNavigationTemplateContainer: DNControl read get_CustomNavigationTemplateContainer;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ID: string read get_ID write set_ID;
    property Name: string read get_Name;
    property Wizard: DNWizard read get_Wizard;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCreateUserWizardStep = class(TDNGenericImport<DNCreateUserWizardStepClass, DNCreateUserWizardStep>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardStepClass = interface(DNWizardStepBaseClass)
  ['{EAB61D19-6C31-5BBF-8DF0-B3D544D0F25B}']
  { constructors } 

    {class} function init: DNWizardStep;

  end;

  [DNTypeName('System.Web.UI.WebControls.WizardStep')]
  DNWizardStep = interface(DNWizardStepBase)
  ['{6A6407A7-2CD7-3D8E-A1AD-C5CCACC5E7BA}']
  { getters & setters } 

    function get_AllowReturn: Boolean;
    procedure set_AllowReturn(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Name: string;
    function get_StepType: DNWizardStepType;
    procedure set_StepType(value: DNWizardStepType);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Wizard: DNWizard;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Activate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Deactivate(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowReturn: Boolean read get_AllowReturn write set_AllowReturn;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ID: string read get_ID write set_ID;
    property Name: string read get_Name;
    property StepType: DNWizardStepType read get_StepType write set_StepType;
    property Title: string read get_Title write set_Title;
    property Wizard: DNWizard read get_Wizard;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property SkinID: string read get_SkinID write set_SkinID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWizardStep = class(TDNGenericImport<DNWizardStepClass, DNWizardStep>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWebControlClass = interface(DNControlClass)
  ['{0B7A41BE-76F4-5CAC-930E-062AB9E8401E}']
  { static getter & setter } 

    {class} function get_DisabledCssClass: string;
    {class} procedure set_DisabledCssClass(value: string);

  { constructors } 

    {class} function init(tag: DNHtmlTextWriterTag): DNWebControl;

  { static propertys } 

    {class} property DisabledCssClass: string read get_DisabledCssClass write set_DisabledCssClass;
  end;

  [DNTypeName('System.Web.UI.WebControls.WebControl')]
  DNWebControl = interface(DNControl)
  ['{23CE0D50-B8F7-303F-80A1-398DDC049C99}']
  { getters & setters } 

    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebControl = class(TDNGenericImport<DNWebControlClass, DNWebControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBaseDataBoundControlClass = interface(DNWebControlClass)
  ['{A7DB630F-A063-5F5B-A1DE-8977F9B6CCDE}']
  end;

  [DNTypeName('System.Web.UI.WebControls.BaseDataBoundControl')]
  DNBaseDataBoundControl = interface(DNWebControl)
  ['{67BB1BB2-0F08-3E49-ADC2-DC79F07686C0}']
  { getters & setters } 

    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBaseDataBoundControl = class(TDNGenericImport<DNBaseDataBoundControlClass, DNBaseDataBoundControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataBoundControlClass = interface(DNBaseDataBoundControlClass)
  ['{D63C6F93-9907-5482-8A95-12401B7FB526}']
  end;

  [DNTypeName('System.Web.UI.WebControls.DataBoundControl')]
  DNDataBoundControl = interface(DNBaseDataBoundControl)
  ['{5E77904E-F70E-38F6-B3A0-FFF59DA128F2}']
  { getters & setters } 

    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataBoundControl = class(TDNGenericImport<DNDataBoundControlClass, DNDataBoundControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAdRotatorClass = interface(DNDataBoundControlClass)
  ['{8A3DE91D-AD07-5384-8DDF-B293266E31C2}']
  { constructors } 

    {class} function init: DNAdRotator;

  end;

  [DNTypeName('System.Web.UI.WebControls.AdRotator')]
  DNAdRotator = interface(DNDataBoundControl)
  ['{95A8320C-1BB9-3ADA-B810-116DA8D45D63}']
  { getters & setters } 

    function get_AdvertisementFile: string;
    procedure set_AdvertisementFile(value: string);
    function get_AlternateTextField: string;
    procedure set_AlternateTextField(value: string);
    function get_Font: DNFontInfo;
    function get_ImageUrlField: string;
    procedure set_ImageUrlField(value: string);
    function get_KeywordFilter: string;
    procedure set_KeywordFilter(value: string);
    function get_NavigateUrlField: string;
    procedure set_NavigateUrlField(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_UniqueID: string;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_AdCreated(value: DNAdCreatedEventHandler);
    procedure remove_AdCreated(value: DNAdCreatedEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AdvertisementFile: string read get_AdvertisementFile write set_AdvertisementFile;
    property AlternateTextField: string read get_AlternateTextField write set_AlternateTextField;
    property Font: DNFontInfo read get_Font;
    property ImageUrlField: string read get_ImageUrlField write set_ImageUrlField;
    property KeywordFilter: string read get_KeywordFilter write set_KeywordFilter;
    property NavigateUrlField: string read get_NavigateUrlField write set_NavigateUrlField;
    property Target: string read get_Target write set_Target;
    property UniqueID: string read get_UniqueID;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNAdRotator = class(TDNGenericImport<DNAdRotatorClass, DNAdRotator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCompositeDataBoundControlClass = interface(DNDataBoundControlClass)
  ['{6B08D2FE-8EED-5F2E-99C2-0F3A59A856E1}']
  end;

  [DNTypeName('System.Web.UI.WebControls.CompositeDataBoundControl')]
  DNCompositeDataBoundControl = interface(DNDataBoundControl)
  ['{99A55378-1F86-30F4-A2EE-9130E1A6796E}']
  { getters & setters } 

    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCompositeDataBoundControl = class(TDNGenericImport<DNCompositeDataBoundControlClass, DNCompositeDataBoundControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewClass = interface(DNCompositeDataBoundControlClass)
  ['{1FD28EA0-D689-5EE8-9F40-1F072E2EFC39}']
  { constructors } 

    {class} function init: DNDetailsView;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsView')]
  DNDetailsView = interface(DNCompositeDataBoundControl)
  ['{A240F01D-EDBD-3092-8FA2-A2AA85DB19F8}']
  { getters & setters } 

    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_InsertMethod: string;
    procedure set_InsertMethod(value: string);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AlternatingRowStyle: DNTableItemStyle;
    function get_AutoGenerateDeleteButton: Boolean;
    procedure set_AutoGenerateDeleteButton(value: Boolean);
    function get_AutoGenerateEditButton: Boolean;
    procedure set_AutoGenerateEditButton(value: Boolean);
    function get_AutoGenerateInsertButton: Boolean;
    procedure set_AutoGenerateInsertButton(value: Boolean);
    function get_AutoGenerateRows: Boolean;
    procedure set_AutoGenerateRows(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BottomPagerRow: DNDetailsViewRow;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_CommandRowStyle: DNTableItemStyle;
    function get_CurrentMode: DNDetailsViewMode;
    function get_DataItem: DDN.mscorlib.DNObject;
    function get_DataItemCount: Int32;
    function get_DataItemIndex: Int32;
    function get_DataKeyNames: TArray<string>;
    procedure set_DataKeyNames(value: TArray<string>);
    function get_DataKey: DNDataKey;
    function get_DefaultMode: DNDetailsViewMode;
    procedure set_DefaultMode(value: DNDetailsViewMode);
    function get_EditRowStyle: DNTableItemStyle;
    function get_EmptyDataRowStyle: DNTableItemStyle;
    function get_EmptyDataTemplate: DNITemplate;
    procedure set_EmptyDataTemplate(value: DNITemplate);
    function get_EmptyDataText: string;
    procedure set_EmptyDataText(value: string);
    function get_EnableModelValidation: Boolean;
    procedure set_EnableModelValidation(value: Boolean);
    function get_EnablePagingCallbacks: Boolean;
    procedure set_EnablePagingCallbacks(value: Boolean);
    function get_FieldHeaderStyle: DNTableItemStyle;
    function get_Fields: DNDataControlFieldCollection;
    function get_FooterRow: DNDetailsViewRow;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HeaderRow: DNDetailsViewRow;
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_InsertRowStyle: DNTableItemStyle;
    function get_PageCount: Int32;
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PagerSettings: DNPagerSettings;
    function get_PagerStyle: DNTableItemStyle;
    function get_PagerTemplate: DNITemplate;
    procedure set_PagerTemplate(value: DNITemplate);
    function get_Rows: DNDetailsViewRowCollection;
    function get_RowsGenerator: DNIAutoFieldGenerator;
    procedure set_RowsGenerator(value: DNIAutoFieldGenerator);
    function get_RowStyle: DNTableItemStyle;
    function get_SelectedValue: DDN.mscorlib.DNObject;
    function get_TopPagerRow: DNDetailsViewRow;
    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ItemCommand(value: DNDetailsViewCommandEventHandler);
    procedure remove_ItemCommand(value: DNDetailsViewCommandEventHandler);
    procedure add_ItemCreated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ItemCreated(value: DDN.mscorlib.DNEventHandler);
    procedure add_ItemDeleted(value: DNDetailsViewDeletedEventHandler);
    procedure remove_ItemDeleted(value: DNDetailsViewDeletedEventHandler);
    procedure add_ItemDeleting(value: DNDetailsViewDeleteEventHandler);
    procedure remove_ItemDeleting(value: DNDetailsViewDeleteEventHandler);
    procedure add_ItemInserted(value: DNDetailsViewInsertedEventHandler);
    procedure remove_ItemInserted(value: DNDetailsViewInsertedEventHandler);
    procedure add_ItemInserting(value: DNDetailsViewInsertEventHandler);
    procedure remove_ItemInserting(value: DNDetailsViewInsertEventHandler);
    procedure add_ItemUpdated(value: DNDetailsViewUpdatedEventHandler);
    procedure remove_ItemUpdated(value: DNDetailsViewUpdatedEventHandler);
    procedure add_ItemUpdating(value: DNDetailsViewUpdateEventHandler);
    procedure remove_ItemUpdating(value: DNDetailsViewUpdateEventHandler);
    procedure add_ModeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ModeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_ModeChanging(value: DNDetailsViewModeEventHandler);
    procedure remove_ModeChanging(value: DNDetailsViewModeEventHandler);
    procedure add_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PageIndexChanging(value: DNDetailsViewPageEventHandler);
    procedure remove_PageIndexChanging(value: DNDetailsViewPageEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ChangeMode(newMode: DNDetailsViewMode);
    procedure DataBind;
    procedure DeleteItem;
    procedure InsertItem(causesValidation: Boolean);
    function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;
    procedure SetPageIndex(index: Int32);
    procedure UpdateItem(causesValidation: Boolean);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    property InsertMethod: string read get_InsertMethod write set_InsertMethod;
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    property AlternatingRowStyle: DNTableItemStyle read get_AlternatingRowStyle;
    property AutoGenerateDeleteButton: Boolean read get_AutoGenerateDeleteButton write set_AutoGenerateDeleteButton;
    property AutoGenerateEditButton: Boolean read get_AutoGenerateEditButton write set_AutoGenerateEditButton;
    property AutoGenerateInsertButton: Boolean read get_AutoGenerateInsertButton write set_AutoGenerateInsertButton;
    property AutoGenerateRows: Boolean read get_AutoGenerateRows write set_AutoGenerateRows;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property BottomPagerRow: DNDetailsViewRow read get_BottomPagerRow;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property CommandRowStyle: DNTableItemStyle read get_CommandRowStyle;
    property CurrentMode: DNDetailsViewMode read get_CurrentMode;
    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property DataItemCount: Int32 read get_DataItemCount;
    property DataItemIndex: Int32 read get_DataItemIndex;
    property DataKeyNames: TArray<string> read get_DataKeyNames write set_DataKeyNames;
    property DataKey: DNDataKey read get_DataKey;
    property DefaultMode: DNDetailsViewMode read get_DefaultMode write set_DefaultMode;
    property EditRowStyle: DNTableItemStyle read get_EditRowStyle;
    property EmptyDataRowStyle: DNTableItemStyle read get_EmptyDataRowStyle;
    property EmptyDataTemplate: DNITemplate read get_EmptyDataTemplate write set_EmptyDataTemplate;
    property EmptyDataText: string read get_EmptyDataText write set_EmptyDataText;
    property EnableModelValidation: Boolean read get_EnableModelValidation write set_EnableModelValidation;
    property EnablePagingCallbacks: Boolean read get_EnablePagingCallbacks write set_EnablePagingCallbacks;
    property FieldHeaderStyle: DNTableItemStyle read get_FieldHeaderStyle;
    property Fields: DNDataControlFieldCollection read get_Fields;
    property FooterRow: DNDetailsViewRow read get_FooterRow;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property FooterText: string read get_FooterText write set_FooterText;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HeaderRow: DNDetailsViewRow read get_HeaderRow;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property InsertRowStyle: DNTableItemStyle read get_InsertRowStyle;
    property PageCount: Int32 read get_PageCount;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PagerSettings: DNPagerSettings read get_PagerSettings;
    property PagerStyle: DNTableItemStyle read get_PagerStyle;
    property PagerTemplate: DNITemplate read get_PagerTemplate write set_PagerTemplate;
    property Rows: DNDetailsViewRowCollection read get_Rows;
    property RowsGenerator: DNIAutoFieldGenerator read get_RowsGenerator write set_RowsGenerator;
    property RowStyle: DNTableItemStyle read get_RowStyle;
    property SelectedValue: DDN.mscorlib.DNObject read get_SelectedValue;
    property TopPagerRow: DNDetailsViewRow read get_TopPagerRow;
    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDetailsView = class(TDNGenericImport<DNDetailsViewClass, DNDetailsView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewClass = interface(DNCompositeDataBoundControlClass)
  ['{709DAE7B-A382-581F-BCC5-BC7E11790C1A}']
  { constructors } 

    {class} function init: DNFormView;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormView')]
  DNFormView = interface(DNCompositeDataBoundControl)
  ['{CE0D1000-94AC-372C-B9A1-514E8B565B40}']
  { getters & setters } 

    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_InsertMethod: string;
    procedure set_InsertMethod(value: string);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BottomPagerRow: DNFormViewRow;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_CurrentMode: DNFormViewMode;
    function get_DataItem: DDN.mscorlib.DNObject;
    function get_DataItemCount: Int32;
    function get_DataItemIndex: Int32;
    function get_DataKeyNames: TArray<string>;
    procedure set_DataKeyNames(value: TArray<string>);
    function get_DataKey: DNDataKey;
    function get_DefaultMode: DNFormViewMode;
    procedure set_DefaultMode(value: DNFormViewMode);
    function get_EditItemTemplate: DNITemplate;
    procedure set_EditItemTemplate(value: DNITemplate);
    function get_EditRowStyle: DNTableItemStyle;
    function get_EmptyDataRowStyle: DNTableItemStyle;
    function get_EmptyDataTemplate: DNITemplate;
    procedure set_EmptyDataTemplate(value: DNITemplate);
    function get_EmptyDataText: string;
    procedure set_EmptyDataText(value: string);
    function get_EnableModelValidation: Boolean;
    procedure set_EnableModelValidation(value: Boolean);
    function get_RenderOuterTable: Boolean;
    procedure set_RenderOuterTable(value: Boolean);
    function get_FooterRow: DNFormViewRow;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HeaderRow: DNFormViewRow;
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_InsertItemTemplate: DNITemplate;
    procedure set_InsertItemTemplate(value: DNITemplate);
    function get_InsertRowStyle: DNTableItemStyle;
    function get_ItemTemplate: DNITemplate;
    procedure set_ItemTemplate(value: DNITemplate);
    function get_PageCount: Int32;
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PagerSettings: DNPagerSettings;
    function get_PagerStyle: DNTableItemStyle;
    function get_PagerTemplate: DNITemplate;
    procedure set_PagerTemplate(value: DNITemplate);
    function get_Row: DNFormViewRow;
    function get_RowStyle: DNTableItemStyle;
    function get_SelectedValue: DDN.mscorlib.DNObject;
    function get_TopPagerRow: DNFormViewRow;
    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PageIndexChanging(value: DNFormViewPageEventHandler);
    procedure remove_PageIndexChanging(value: DNFormViewPageEventHandler);
    procedure add_ItemCommand(value: DNFormViewCommandEventHandler);
    procedure remove_ItemCommand(value: DNFormViewCommandEventHandler);
    procedure add_ItemCreated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ItemCreated(value: DDN.mscorlib.DNEventHandler);
    procedure add_ItemDeleted(value: DNFormViewDeletedEventHandler);
    procedure remove_ItemDeleted(value: DNFormViewDeletedEventHandler);
    procedure add_ItemDeleting(value: DNFormViewDeleteEventHandler);
    procedure remove_ItemDeleting(value: DNFormViewDeleteEventHandler);
    procedure add_ItemInserted(value: DNFormViewInsertedEventHandler);
    procedure remove_ItemInserted(value: DNFormViewInsertedEventHandler);
    procedure add_ItemInserting(value: DNFormViewInsertEventHandler);
    procedure remove_ItemInserting(value: DNFormViewInsertEventHandler);
    procedure add_ItemUpdated(value: DNFormViewUpdatedEventHandler);
    procedure remove_ItemUpdated(value: DNFormViewUpdatedEventHandler);
    procedure add_ItemUpdating(value: DNFormViewUpdateEventHandler);
    procedure remove_ItemUpdating(value: DNFormViewUpdateEventHandler);
    procedure add_ModeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ModeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_ModeChanging(value: DNFormViewModeEventHandler);
    procedure remove_ModeChanging(value: DNFormViewModeEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ChangeMode(newMode: DNFormViewMode);
    procedure DataBind;
    procedure DeleteItem;
    procedure InsertItem(causesValidation: Boolean);
    function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;
    procedure SetPageIndex(index: Int32);
    procedure UpdateItem(causesValidation: Boolean);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    property InsertMethod: string read get_InsertMethod write set_InsertMethod;
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property BottomPagerRow: DNFormViewRow read get_BottomPagerRow;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property CurrentMode: DNFormViewMode read get_CurrentMode;
    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property DataItemCount: Int32 read get_DataItemCount;
    property DataItemIndex: Int32 read get_DataItemIndex;
    property DataKeyNames: TArray<string> read get_DataKeyNames write set_DataKeyNames;
    property DataKey: DNDataKey read get_DataKey;
    property DefaultMode: DNFormViewMode read get_DefaultMode write set_DefaultMode;
    property EditItemTemplate: DNITemplate read get_EditItemTemplate write set_EditItemTemplate;
    property EditRowStyle: DNTableItemStyle read get_EditRowStyle;
    property EmptyDataRowStyle: DNTableItemStyle read get_EmptyDataRowStyle;
    property EmptyDataTemplate: DNITemplate read get_EmptyDataTemplate write set_EmptyDataTemplate;
    property EmptyDataText: string read get_EmptyDataText write set_EmptyDataText;
    property EnableModelValidation: Boolean read get_EnableModelValidation write set_EnableModelValidation;
    property RenderOuterTable: Boolean read get_RenderOuterTable write set_RenderOuterTable;
    property FooterRow: DNFormViewRow read get_FooterRow;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property FooterText: string read get_FooterText write set_FooterText;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HeaderRow: DNFormViewRow read get_HeaderRow;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property InsertItemTemplate: DNITemplate read get_InsertItemTemplate write set_InsertItemTemplate;
    property InsertRowStyle: DNTableItemStyle read get_InsertRowStyle;
    property ItemTemplate: DNITemplate read get_ItemTemplate write set_ItemTemplate;
    property PageCount: Int32 read get_PageCount;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PagerSettings: DNPagerSettings read get_PagerSettings;
    property PagerStyle: DNTableItemStyle read get_PagerStyle;
    property PagerTemplate: DNITemplate read get_PagerTemplate write set_PagerTemplate;
    property Row: DNFormViewRow read get_Row;
    property RowStyle: DNTableItemStyle read get_RowStyle;
    property SelectedValue: DDN.mscorlib.DNObject read get_SelectedValue;
    property TopPagerRow: DNFormViewRow read get_TopPagerRow;
    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNFormView = class(TDNGenericImport<DNFormViewClass, DNFormView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewClass = interface(DNCompositeDataBoundControlClass)
  ['{7309E895-6495-56B1-84FF-4C95A22C24E4}']
  { constructors } 

    {class} function init: DNGridView;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridView')]
  DNGridView = interface(DNCompositeDataBoundControl)
  ['{3BC755C6-B407-3C17-8B3F-FF64763C3AAE}']
  { getters & setters } 

    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_AllowCustomPaging: Boolean;
    procedure set_AllowCustomPaging(value: Boolean);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_AlternatingRowStyle: DNTableItemStyle;
    function get_AutoGenerateDeleteButton: Boolean;
    procedure set_AutoGenerateDeleteButton(value: Boolean);
    function get_AutoGenerateEditButton: Boolean;
    procedure set_AutoGenerateEditButton(value: Boolean);
    function get_AutoGenerateSelectButton: Boolean;
    procedure set_AutoGenerateSelectButton(value: Boolean);
    function get_AutoGenerateColumns: Boolean;
    procedure set_AutoGenerateColumns(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BottomPagerRow: DNGridViewRow;
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Columns: DNDataControlFieldCollection;
    function get_ColumnsGenerator: DNIAutoFieldGenerator;
    procedure set_ColumnsGenerator(value: DNIAutoFieldGenerator);
    function get_DataKeys: DNDataKeyArray;
    function get_ClientIDRowSuffixDataKeys: DNDataKeyArray;
    function get_DataKeyNames: TArray<string>;
    procedure set_DataKeyNames(value: TArray<string>);
    function get_EditIndex: Int32;
    procedure set_EditIndex(value: Int32);
    function get_EditRowStyle: DNTableItemStyle;
    function get_EnableModelValidation: Boolean;
    procedure set_EnableModelValidation(value: Boolean);
    function get_EnablePersistedSelection: Boolean;
    procedure set_EnablePersistedSelection(value: Boolean);
    function get_EnableSortingAndPagingCallbacks: Boolean;
    procedure set_EnableSortingAndPagingCallbacks(value: Boolean);
    function get_EmptyDataRowStyle: DNTableItemStyle;
    function get_EmptyDataTemplate: DNITemplate;
    procedure set_EmptyDataTemplate(value: DNITemplate);
    function get_EmptyDataText: string;
    procedure set_EmptyDataText(value: string);
    function get_FooterRow: DNGridViewRow;
    function get_FooterStyle: DNTableItemStyle;
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HeaderRow: DNGridViewRow;
    function get_HeaderStyle: DNTableItemStyle;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_PageCount: Int32;
    function get_PageIndex: Int32;
    procedure set_PageIndex(value: Int32);
    function get_PagerSettings: DNPagerSettings;
    function get_PagerStyle: DNTableItemStyle;
    function get_PagerTemplate: DNITemplate;
    procedure set_PagerTemplate(value: DNITemplate);
    function get_PageSize: Int32;
    procedure set_PageSize(value: Int32);
    function get_ClientIDRowSuffix: TArray<string>;
    procedure set_ClientIDRowSuffix(value: TArray<string>);
    function get_RowHeaderColumn: string;
    procedure set_RowHeaderColumn(value: string);
    function get_Rows: DNGridViewRowCollection;
    function get_RowStyle: DNTableItemStyle;
    function get_SelectedDataKey: DNDataKey;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedValue: DDN.mscorlib.DNObject;
    function get_SelectedRow: DNGridViewRow;
    function get_SelectedRowStyle: DNTableItemStyle;
    function get_ShowFooter: Boolean;
    procedure set_ShowFooter(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_ShowHeaderWhenEmpty: Boolean;
    procedure set_ShowHeaderWhenEmpty(value: Boolean);
    function get_SortDirection: DNSortDirection;
    function get_SortExpression: string;
    function get_SortedAscendingCellStyle: DNTableItemStyle;
    function get_SortedAscendingHeaderStyle: DNTableItemStyle;
    function get_SortedDescendingCellStyle: DNTableItemStyle;
    function get_SortedDescendingHeaderStyle: DNTableItemStyle;
    function get_TopPagerRow: DNGridViewRow;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_VirtualItemCount: Int32;
    procedure set_VirtualItemCount(value: Int32);
    function get_SelectedPersistedDataKey: DNDataKey;
    procedure set_SelectedPersistedDataKey(value: DNDataKey);
    function get_Controls: DNControlCollection;
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_RowDeleted(value: DNGridViewDeletedEventHandler);
    procedure remove_RowDeleted(value: DNGridViewDeletedEventHandler);
    procedure add_RowUpdated(value: DNGridViewUpdatedEventHandler);
    procedure remove_RowUpdated(value: DNGridViewUpdatedEventHandler);
    procedure add_RowCancelingEdit(value: DNGridViewCancelEditEventHandler);
    procedure remove_RowCancelingEdit(value: DNGridViewCancelEditEventHandler);
    procedure add_RowDeleting(value: DNGridViewDeleteEventHandler);
    procedure remove_RowDeleting(value: DNGridViewDeleteEventHandler);
    procedure add_RowEditing(value: DNGridViewEditEventHandler);
    procedure remove_RowEditing(value: DNGridViewEditEventHandler);
    procedure add_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PageIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_PageIndexChanging(value: DNGridViewPageEventHandler);
    procedure remove_PageIndexChanging(value: DNGridViewPageEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_SelectedIndexChanging(value: DNGridViewSelectEventHandler);
    procedure remove_SelectedIndexChanging(value: DNGridViewSelectEventHandler);
    procedure add_Sorted(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Sorted(value: DDN.mscorlib.DNEventHandler);
    procedure add_Sorting(value: DNGridViewSortEventHandler);
    procedure remove_Sorting(value: DNGridViewSortEventHandler);
    procedure add_RowUpdating(value: DNGridViewUpdateEventHandler);
    procedure remove_RowUpdating(value: DNGridViewUpdateEventHandler);
    procedure add_RowCommand(value: DNGridViewCommandEventHandler);
    procedure remove_RowCommand(value: DNGridViewCommandEventHandler);
    procedure add_RowCreated(value: DNGridViewRowEventHandler);
    procedure remove_RowCreated(value: DNGridViewRowEventHandler);
    procedure add_RowDataBound(value: DNGridViewRowEventHandler);
    procedure remove_RowDataBound(value: DNGridViewRowEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;
    procedure DataBind;
    procedure DeleteRow(rowIndex: Int32);
    procedure SetPageIndex(rowIndex: Int32);
    procedure SelectRow(rowIndex: Int32);
    procedure SetEditRow(rowIndex: Int32);
    procedure Sort(sortExpression: string; sortDirection: DNSortDirection);
    procedure UpdateRow(rowIndex: Int32; causesValidation: Boolean);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    property AllowCustomPaging: Boolean read get_AllowCustomPaging write set_AllowCustomPaging;
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    property AlternatingRowStyle: DNTableItemStyle read get_AlternatingRowStyle;
    property AutoGenerateDeleteButton: Boolean read get_AutoGenerateDeleteButton write set_AutoGenerateDeleteButton;
    property AutoGenerateEditButton: Boolean read get_AutoGenerateEditButton write set_AutoGenerateEditButton;
    property AutoGenerateSelectButton: Boolean read get_AutoGenerateSelectButton write set_AutoGenerateSelectButton;
    property AutoGenerateColumns: Boolean read get_AutoGenerateColumns write set_AutoGenerateColumns;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property BottomPagerRow: DNGridViewRow read get_BottomPagerRow;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property Columns: DNDataControlFieldCollection read get_Columns;
    property ColumnsGenerator: DNIAutoFieldGenerator read get_ColumnsGenerator write set_ColumnsGenerator;
    property DataKeys: DNDataKeyArray read get_DataKeys;
    property ClientIDRowSuffixDataKeys: DNDataKeyArray read get_ClientIDRowSuffixDataKeys;
    property DataKeyNames: TArray<string> read get_DataKeyNames write set_DataKeyNames;
    property EditIndex: Int32 read get_EditIndex write set_EditIndex;
    property EditRowStyle: DNTableItemStyle read get_EditRowStyle;
    property EnableModelValidation: Boolean read get_EnableModelValidation write set_EnableModelValidation;
    property EnablePersistedSelection: Boolean read get_EnablePersistedSelection write set_EnablePersistedSelection;
    property EnableSortingAndPagingCallbacks: Boolean read get_EnableSortingAndPagingCallbacks write set_EnableSortingAndPagingCallbacks;
    property EmptyDataRowStyle: DNTableItemStyle read get_EmptyDataRowStyle;
    property EmptyDataTemplate: DNITemplate read get_EmptyDataTemplate write set_EmptyDataTemplate;
    property EmptyDataText: string read get_EmptyDataText write set_EmptyDataText;
    property FooterRow: DNGridViewRow read get_FooterRow;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HeaderRow: DNGridViewRow read get_HeaderRow;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property PageCount: Int32 read get_PageCount;
    property PageIndex: Int32 read get_PageIndex write set_PageIndex;
    property PagerSettings: DNPagerSettings read get_PagerSettings;
    property PagerStyle: DNTableItemStyle read get_PagerStyle;
    property PagerTemplate: DNITemplate read get_PagerTemplate write set_PagerTemplate;
    property PageSize: Int32 read get_PageSize write set_PageSize;
    property ClientIDRowSuffix: TArray<string> read get_ClientIDRowSuffix write set_ClientIDRowSuffix;
    property RowHeaderColumn: string read get_RowHeaderColumn write set_RowHeaderColumn;
    property Rows: DNGridViewRowCollection read get_Rows;
    property RowStyle: DNTableItemStyle read get_RowStyle;
    property SelectedDataKey: DNDataKey read get_SelectedDataKey;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedValue: DDN.mscorlib.DNObject read get_SelectedValue;
    property SelectedRow: DNGridViewRow read get_SelectedRow;
    property SelectedRowStyle: DNTableItemStyle read get_SelectedRowStyle;
    property ShowFooter: Boolean read get_ShowFooter write set_ShowFooter;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property ShowHeaderWhenEmpty: Boolean read get_ShowHeaderWhenEmpty write set_ShowHeaderWhenEmpty;
    property SortDirection: DNSortDirection read get_SortDirection;
    property SortExpression: string read get_SortExpression;
    property SortedAscendingCellStyle: DNTableItemStyle read get_SortedAscendingCellStyle;
    property SortedAscendingHeaderStyle: DNTableItemStyle read get_SortedAscendingHeaderStyle;
    property SortedDescendingCellStyle: DNTableItemStyle read get_SortedDescendingCellStyle;
    property SortedDescendingHeaderStyle: DNTableItemStyle read get_SortedDescendingHeaderStyle;
    property TopPagerRow: DNGridViewRow read get_TopPagerRow;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property VirtualItemCount: Int32 read get_VirtualItemCount write set_VirtualItemCount;
    property SelectedPersistedDataKey: DNDataKey read get_SelectedPersistedDataKey write set_SelectedPersistedDataKey;
    property Controls: DNControlCollection read get_Controls;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNGridView = class(TDNGenericImport<DNGridViewClass, DNGridView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNListControlClass = interface(DNDataBoundControlClass)
  ['{92C50492-F348-54D5-BA0F-43D52D7AE040}']
  { constructors } 

    {class} function init: DNListControl;

  end;

  [DNTypeName('System.Web.UI.WebControls.ListControl')]
  DNListControl = interface(DNDataBoundControl)
  ['{8DC013B4-2290-3933-948F-6FE287045DB2}']
  { getters & setters } 

    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNListControl = class(TDNGenericImport<DNListControlClass, DNListControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBulletedListClass = interface(DNListControlClass)
  ['{C5AA0FDD-E544-5A88-9AF1-B045B7E87A90}']
  { constructors } 

    {class} function init: DNBulletedList;

  end;

  [DNTypeName('System.Web.UI.WebControls.BulletedList')]
  DNBulletedList = interface(DNListControl)
  ['{9D5ADB2D-E494-3610-AF92-718D12F895AA}']
  { getters & setters } 

    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_BulletStyle: DNBulletStyle;
    procedure set_BulletStyle(value: DNBulletStyle);
    function get_BulletImageUrl: string;
    procedure set_BulletImageUrl(value: string);
    function get_Controls: DNControlCollection;
    function get_DisplayMode: DNBulletedListDisplayMode;
    procedure set_DisplayMode(value: DNBulletedListDisplayMode);
    function get_FirstBulletNumber: Int32;
    procedure set_FirstBulletNumber(value: Int32);
    function get_RenderWhenDataEmpty: Boolean;
    procedure set_RenderWhenDataEmpty(value: Boolean);
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Click(value: DNBulletedListEventHandler);
    procedure remove_Click(value: DNBulletedListEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property BulletStyle: DNBulletStyle read get_BulletStyle write set_BulletStyle;
    property BulletImageUrl: string read get_BulletImageUrl write set_BulletImageUrl;
    property Controls: DNControlCollection read get_Controls;
    property DisplayMode: DNBulletedListDisplayMode read get_DisplayMode write set_DisplayMode;
    property FirstBulletNumber: Int32 read get_FirstBulletNumber write set_FirstBulletNumber;
    property RenderWhenDataEmpty: Boolean read get_RenderWhenDataEmpty write set_RenderWhenDataEmpty;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBulletedList = class(TDNGenericImport<DNBulletedListClass, DNBulletedList>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCheckBoxListClass = interface(DNListControlClass)
  ['{3E427358-C68E-5B1B-9500-DD3A370E27A3}']
  { constructors } 

    {class} function init: DNCheckBoxList;

  end;

  [DNTypeName('System.Web.UI.WebControls.CheckBoxList')]
  DNCheckBoxList = interface(DNListControl)
  ['{7169128F-6A18-3F11-BC7B-54082AA7C52F}']
  { getters & setters } 

    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_RenderWhenDataEmpty: Boolean;
    procedure set_RenderWhenDataEmpty(value: Boolean);
    function get_RepeatColumns: Int32;
    procedure set_RepeatColumns(value: Int32);
    function get_RepeatDirection: DNRepeatDirection;
    procedure set_RepeatDirection(value: DNRepeatDirection);
    function get_RepeatLayout: DNRepeatLayout;
    procedure set_RepeatLayout(value: DNRepeatLayout);
    function get_TextAlign: DNTextAlign;
    procedure set_TextAlign(value: DNTextAlign);
    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property RenderWhenDataEmpty: Boolean read get_RenderWhenDataEmpty write set_RenderWhenDataEmpty;
    property RepeatColumns: Int32 read get_RepeatColumns write set_RepeatColumns;
    property RepeatDirection: DNRepeatDirection read get_RepeatDirection write set_RepeatDirection;
    property RepeatLayout: DNRepeatLayout read get_RepeatLayout write set_RepeatLayout;
    property TextAlign: DNTextAlign read get_TextAlign write set_TextAlign;
    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCheckBoxList = class(TDNGenericImport<DNCheckBoxListClass, DNCheckBoxList>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDropDownListClass = interface(DNListControlClass)
  ['{A53C814F-7D7E-595C-B97B-0E2E7107AA9B}']
  { constructors } 

    {class} function init: DNDropDownList;

  end;

  [DNTypeName('System.Web.UI.WebControls.DropDownList')]
  DNDropDownList = interface(DNListControl)
  ['{9FD88CBA-5E26-366B-9F22-981AFA64E7BE}']
  { getters & setters } 

    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDropDownList = class(TDNGenericImport<DNDropDownListClass, DNDropDownList>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNListBoxClass = interface(DNListControlClass)
  ['{9008F5F0-2BA4-57DE-9401-DF294509021D}']
  { constructors } 

    {class} function init: DNListBox;

  end;

  [DNTypeName('System.Web.UI.WebControls.ListBox')]
  DNListBox = interface(DNListControl)
  ['{6AFDAD8B-37E3-3D48-A126-F7374EC32A2D}']
  { getters & setters } 

    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_Rows: Int32;
    procedure set_Rows(value: Int32);
    function get_SelectionMode: DNListSelectionMode;
    procedure set_SelectionMode(value: DNListSelectionMode);
    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetSelectedIndices: TArray<Int32>;
    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property Rows: Int32 read get_Rows write set_Rows;
    property SelectionMode: DNListSelectionMode read get_SelectionMode write set_SelectionMode;
    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNListBox = class(TDNGenericImport<DNListBoxClass, DNListBox>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRadioButtonListClass = interface(DNListControlClass)
  ['{E77DF39B-AFF5-5565-96B7-3696796E2D03}']
  { constructors } 

    {class} function init: DNRadioButtonList;

  end;

  [DNTypeName('System.Web.UI.WebControls.RadioButtonList')]
  DNRadioButtonList = interface(DNListControl)
  ['{31D97817-9DFF-3391-AA0B-BF48B57B1E33}']
  { getters & setters } 

    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_RenderWhenDataEmpty: Boolean;
    procedure set_RenderWhenDataEmpty(value: Boolean);
    function get_RepeatColumns: Int32;
    procedure set_RepeatColumns(value: Int32);
    function get_RepeatDirection: DNRepeatDirection;
    procedure set_RepeatDirection(value: DNRepeatDirection);
    function get_RepeatLayout: DNRepeatLayout;
    procedure set_RepeatLayout(value: DNRepeatLayout);
    function get_TextAlign: DNTextAlign;
    procedure set_TextAlign(value: DNTextAlign);
    function get_AppendDataBoundItems: Boolean;
    procedure set_AppendDataBoundItems(value: Boolean);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_DataValueField: string;
    procedure set_DataValueField(value: string);
    function get_Items: DNListItemCollection;
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNListItem;
    function get_SelectedValue: string;
    procedure set_SelectedValue(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_ItemType: string;
    procedure set_ItemType(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSourceObject: DNIDataSource;
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure remove_CreatingModelDataSource(value: DNCreatingModelDataSourceEventHandler);
    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ClearSelection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property RenderWhenDataEmpty: Boolean read get_RenderWhenDataEmpty write set_RenderWhenDataEmpty;
    property RepeatColumns: Int32 read get_RepeatColumns write set_RepeatColumns;
    property RepeatDirection: DNRepeatDirection read get_RepeatDirection write set_RepeatDirection;
    property RepeatLayout: DNRepeatLayout read get_RepeatLayout write set_RepeatLayout;
    property TextAlign: DNTextAlign read get_TextAlign write set_TextAlign;
    property AppendDataBoundItems: Boolean read get_AppendDataBoundItems write set_AppendDataBoundItems;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property DataValueField: string read get_DataValueField write set_DataValueField;
    property Items: DNListItemCollection read get_Items;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNListItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue write set_SelectedValue;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property DataMember: string read get_DataMember write set_DataMember;
    property ItemType: string read get_ItemType write set_ItemType;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSourceObject: DNIDataSource read get_DataSourceObject;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRadioButtonList = class(TDNGenericImport<DNRadioButtonListClass, DNRadioButtonList>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHierarchicalDataBoundControlClass = interface(DNBaseDataBoundControlClass)
  ['{0F52D48A-A362-591E-9099-01BAA33EA785}']
  end;

  [DNTypeName('System.Web.UI.WebControls.HierarchicalDataBoundControl')]
  DNHierarchicalDataBoundControl = interface(DNBaseDataBoundControl)
  ['{E78B1EBC-2BCB-3CFE-B186-F4BAD96A7773}']
  { getters & setters } 

    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHierarchicalDataBoundControl = class(TDNGenericImport<DNHierarchicalDataBoundControlClass, DNHierarchicalDataBoundControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuClass = interface(DNHierarchicalDataBoundControlClass)
  ['{0E6806D1-E6E3-5C2B-9A61-07379384199B}']
  { constructors } 

    {class} function init: DNMenu;

  { static fields getter & setter } 

   function __fakeFieldGet_MenuItemClickCommandName: string;

  { static fields } 

    {class} property MenuItemClickCommandName: string read __fakeFieldGet_MenuItemClickCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.Menu')]
  DNMenu = interface(DNHierarchicalDataBoundControl)
  ['{E9EB1A78-3799-3665-B91A-F45F2DC3135E}']
  { getters & setters } 

    function get_Controls: DNControlCollection;
    function get_DataBindings: DNMenuItemBindingCollection;
    function get_DisappearAfter: Int32;
    procedure set_DisappearAfter(value: Int32);
    function get_DynamicBottomSeparatorImageUrl: string;
    procedure set_DynamicBottomSeparatorImageUrl(value: string);
    function get_DynamicEnableDefaultPopOutImage: Boolean;
    procedure set_DynamicEnableDefaultPopOutImage(value: Boolean);
    function get_DynamicHorizontalOffset: Int32;
    procedure set_DynamicHorizontalOffset(value: Int32);
    function get_DynamicHoverStyle: DNStyle;
    function get_DynamicItemFormatString: string;
    procedure set_DynamicItemFormatString(value: string);
    function get_DynamicMenuItemStyle: DNMenuItemStyle;
    function get_DynamicMenuStyle: DNSubMenuStyle;
    function get_DynamicPopOutImageUrl: string;
    procedure set_DynamicPopOutImageUrl(value: string);
    function get_DynamicPopOutImageTextFormatString: string;
    procedure set_DynamicPopOutImageTextFormatString(value: string);
    function get_DynamicSelectedStyle: DNMenuItemStyle;
    function get_DynamicItemTemplate: DNITemplate;
    procedure set_DynamicItemTemplate(value: DNITemplate);
    function get_DynamicTopSeparatorImageUrl: string;
    procedure set_DynamicTopSeparatorImageUrl(value: string);
    function get_DynamicVerticalOffset: Int32;
    procedure set_DynamicVerticalOffset(value: Int32);
    function get_IncludeStyleBlock: Boolean;
    procedure set_IncludeStyleBlock(value: Boolean);
    function get_Items: DNMenuItemCollection;
    function get_ItemWrap: Boolean;
    procedure set_ItemWrap(value: Boolean);
    function get_LevelMenuItemStyles: DNMenuItemStyleCollection;
    function get_LevelSelectedStyles: DNMenuItemStyleCollection;
    function get_LevelSubMenuStyles: DNSubMenuStyleCollection;
    function get_MaximumDynamicDisplayLevels: Int32;
    procedure set_MaximumDynamicDisplayLevels(value: Int32);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_PathSeparator: Char;
    procedure set_PathSeparator(value: Char);
    function get_RenderingMode: DNMenuRenderingMode;
    procedure set_RenderingMode(value: DNMenuRenderingMode);
    function get_ScrollDownImageUrl: string;
    procedure set_ScrollDownImageUrl(value: string);
    function get_ScrollDownText: string;
    procedure set_ScrollDownText(value: string);
    function get_ScrollUpImageUrl: string;
    procedure set_ScrollUpImageUrl(value: string);
    function get_ScrollUpText: string;
    procedure set_ScrollUpText(value: string);
    function get_SelectedItem: DNMenuItem;
    function get_SelectedValue: string;
    function get_SkipLinkText: string;
    procedure set_SkipLinkText(value: string);
    function get_StaticBottomSeparatorImageUrl: string;
    procedure set_StaticBottomSeparatorImageUrl(value: string);
    function get_StaticDisplayLevels: Int32;
    procedure set_StaticDisplayLevels(value: Int32);
    function get_StaticEnableDefaultPopOutImage: Boolean;
    procedure set_StaticEnableDefaultPopOutImage(value: Boolean);
    function get_StaticHoverStyle: DNStyle;
    function get_StaticItemFormatString: string;
    procedure set_StaticItemFormatString(value: string);
    function get_StaticMenuItemStyle: DNMenuItemStyle;
    function get_StaticMenuStyle: DNSubMenuStyle;
    function get_StaticPopOutImageUrl: string;
    procedure set_StaticPopOutImageUrl(value: string);
    function get_StaticPopOutImageTextFormatString: string;
    procedure set_StaticPopOutImageTextFormatString(value: string);
    function get_StaticSelectedStyle: DNMenuItemStyle;
    function get_StaticSubMenuIndent: DNUnit;
    procedure set_StaticSubMenuIndent(value: DNUnit);
    function get_StaticItemTemplate: DNITemplate;
    procedure set_StaticItemTemplate(value: DNITemplate);
    function get_StaticTopSeparatorImageUrl: string;
    procedure set_StaticTopSeparatorImageUrl(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_MenuItemClick(value: DNMenuEventHandler);
    procedure remove_MenuItemClick(value: DNMenuEventHandler);
    procedure add_MenuItemDataBound(value: DNMenuEventHandler);
    procedure remove_MenuItemDataBound(value: DNMenuEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    function FindItem(valuePath: string): DNMenuItem;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Controls: DNControlCollection read get_Controls;
    property DataBindings: DNMenuItemBindingCollection read get_DataBindings;
    property DisappearAfter: Int32 read get_DisappearAfter write set_DisappearAfter;
    property DynamicBottomSeparatorImageUrl: string read get_DynamicBottomSeparatorImageUrl write set_DynamicBottomSeparatorImageUrl;
    property DynamicEnableDefaultPopOutImage: Boolean read get_DynamicEnableDefaultPopOutImage write set_DynamicEnableDefaultPopOutImage;
    property DynamicHorizontalOffset: Int32 read get_DynamicHorizontalOffset write set_DynamicHorizontalOffset;
    property DynamicHoverStyle: DNStyle read get_DynamicHoverStyle;
    property DynamicItemFormatString: string read get_DynamicItemFormatString write set_DynamicItemFormatString;
    property DynamicMenuItemStyle: DNMenuItemStyle read get_DynamicMenuItemStyle;
    property DynamicMenuStyle: DNSubMenuStyle read get_DynamicMenuStyle;
    property DynamicPopOutImageUrl: string read get_DynamicPopOutImageUrl write set_DynamicPopOutImageUrl;
    property DynamicPopOutImageTextFormatString: string read get_DynamicPopOutImageTextFormatString write set_DynamicPopOutImageTextFormatString;
    property DynamicSelectedStyle: DNMenuItemStyle read get_DynamicSelectedStyle;
    property DynamicItemTemplate: DNITemplate read get_DynamicItemTemplate write set_DynamicItemTemplate;
    property DynamicTopSeparatorImageUrl: string read get_DynamicTopSeparatorImageUrl write set_DynamicTopSeparatorImageUrl;
    property DynamicVerticalOffset: Int32 read get_DynamicVerticalOffset write set_DynamicVerticalOffset;
    property IncludeStyleBlock: Boolean read get_IncludeStyleBlock write set_IncludeStyleBlock;
    property Items: DNMenuItemCollection read get_Items;
    property ItemWrap: Boolean read get_ItemWrap write set_ItemWrap;
    property LevelMenuItemStyles: DNMenuItemStyleCollection read get_LevelMenuItemStyles;
    property LevelSelectedStyles: DNMenuItemStyleCollection read get_LevelSelectedStyles;
    property LevelSubMenuStyles: DNSubMenuStyleCollection read get_LevelSubMenuStyles;
    property MaximumDynamicDisplayLevels: Int32 read get_MaximumDynamicDisplayLevels write set_MaximumDynamicDisplayLevels;
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    property PathSeparator: Char read get_PathSeparator write set_PathSeparator;
    property RenderingMode: DNMenuRenderingMode read get_RenderingMode write set_RenderingMode;
    property ScrollDownImageUrl: string read get_ScrollDownImageUrl write set_ScrollDownImageUrl;
    property ScrollDownText: string read get_ScrollDownText write set_ScrollDownText;
    property ScrollUpImageUrl: string read get_ScrollUpImageUrl write set_ScrollUpImageUrl;
    property ScrollUpText: string read get_ScrollUpText write set_ScrollUpText;
    property SelectedItem: DNMenuItem read get_SelectedItem;
    property SelectedValue: string read get_SelectedValue;
    property SkipLinkText: string read get_SkipLinkText write set_SkipLinkText;
    property StaticBottomSeparatorImageUrl: string read get_StaticBottomSeparatorImageUrl write set_StaticBottomSeparatorImageUrl;
    property StaticDisplayLevels: Int32 read get_StaticDisplayLevels write set_StaticDisplayLevels;
    property StaticEnableDefaultPopOutImage: Boolean read get_StaticEnableDefaultPopOutImage write set_StaticEnableDefaultPopOutImage;
    property StaticHoverStyle: DNStyle read get_StaticHoverStyle;
    property StaticItemFormatString: string read get_StaticItemFormatString write set_StaticItemFormatString;
    property StaticMenuItemStyle: DNMenuItemStyle read get_StaticMenuItemStyle;
    property StaticMenuStyle: DNSubMenuStyle read get_StaticMenuStyle;
    property StaticPopOutImageUrl: string read get_StaticPopOutImageUrl write set_StaticPopOutImageUrl;
    property StaticPopOutImageTextFormatString: string read get_StaticPopOutImageTextFormatString write set_StaticPopOutImageTextFormatString;
    property StaticSelectedStyle: DNMenuItemStyle read get_StaticSelectedStyle;
    property StaticSubMenuIndent: DNUnit read get_StaticSubMenuIndent write set_StaticSubMenuIndent;
    property StaticItemTemplate: DNITemplate read get_StaticItemTemplate write set_StaticItemTemplate;
    property StaticTopSeparatorImageUrl: string read get_StaticTopSeparatorImageUrl write set_StaticTopSeparatorImageUrl;
    property Target: string read get_Target write set_Target;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNMenu = class(TDNGenericImport<DNMenuClass, DNMenu>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeViewClass = interface(DNHierarchicalDataBoundControlClass)
  ['{2A0D2E63-8E90-5C27-BD82-F2D058E343F5}']
  { constructors } 

    {class} function init: DNTreeView;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeView')]
  DNTreeView = interface(DNHierarchicalDataBoundControl)
  ['{866F34FF-D232-3B48-9385-7E07CE3B6562}']
  { getters & setters } 

    function get_AutoGenerateDataBindings: Boolean;
    procedure set_AutoGenerateDataBindings(value: Boolean);
    function get_DataBindings: DNTreeNodeBindingCollection;
    function get_CheckedNodes: DNTreeNodeCollection;
    function get_CollapseImageToolTip: string;
    procedure set_CollapseImageToolTip(value: string);
    function get_CollapseImageUrl: string;
    procedure set_CollapseImageUrl(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_ExpandDepth: Int32;
    procedure set_ExpandDepth(value: Int32);
    function get_ExpandImageToolTip: string;
    procedure set_ExpandImageToolTip(value: string);
    function get_ExpandImageUrl: string;
    procedure set_ExpandImageUrl(value: string);
    function get_HoverNodeStyle: DNStyle;
    function get_ImageSet: DNTreeViewImageSet;
    procedure set_ImageSet(value: DNTreeViewImageSet);
    function get_LeafNodeStyle: DNTreeNodeStyle;
    function get_LevelStyles: DNTreeNodeStyleCollection;
    function get_LineImagesFolder: string;
    procedure set_LineImagesFolder(value: string);
    function get_MaxDataBindDepth: Int32;
    procedure set_MaxDataBindDepth(value: Int32);
    function get_NoExpandImageUrl: string;
    procedure set_NoExpandImageUrl(value: string);
    function get_NodeIndent: Int32;
    procedure set_NodeIndent(value: Int32);
    function get_NodeWrap: Boolean;
    procedure set_NodeWrap(value: Boolean);
    function get_Nodes: DNTreeNodeCollection;
    function get_NodeStyle: DNTreeNodeStyle;
    function get_ParentNodeStyle: DNTreeNodeStyle;
    function get_PathSeparator: Char;
    procedure set_PathSeparator(value: Char);
    function get_PopulateNodesFromClient: Boolean;
    procedure set_PopulateNodesFromClient(value: Boolean);
    function get_RootNodeStyle: DNTreeNodeStyle;
    function get_SelectedNode: DNTreeNode;
    function get_SelectedNodeStyle: DNTreeNodeStyle;
    function get_SelectedValue: string;
    function get_ShowCheckBoxes: DNTreeNodeTypes;
    procedure set_ShowCheckBoxes(value: DNTreeNodeTypes);
    function get_ShowExpandCollapse: Boolean;
    procedure set_ShowExpandCollapse(value: Boolean);
    function get_ShowLines: Boolean;
    procedure set_ShowLines(value: Boolean);
    function get_SkipLinkText: string;
    procedure set_SkipLinkText(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_TreeNodeCheckChanged(value: DNTreeNodeEventHandler);
    procedure remove_TreeNodeCheckChanged(value: DNTreeNodeEventHandler);
    procedure add_SelectedNodeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedNodeChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_TreeNodeCollapsed(value: DNTreeNodeEventHandler);
    procedure remove_TreeNodeCollapsed(value: DNTreeNodeEventHandler);
    procedure add_TreeNodeDataBound(value: DNTreeNodeEventHandler);
    procedure remove_TreeNodeDataBound(value: DNTreeNodeEventHandler);
    procedure add_TreeNodeExpanded(value: DNTreeNodeEventHandler);
    procedure remove_TreeNodeExpanded(value: DNTreeNodeEventHandler);
    procedure add_TreeNodePopulate(value: DNTreeNodeEventHandler);
    procedure remove_TreeNodePopulate(value: DNTreeNodeEventHandler);
    procedure add_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBound(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure CollapseAll;
    procedure DataBind;
    procedure ExpandAll;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    function FindNode(valuePath: string): DNTreeNode;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoGenerateDataBindings: Boolean read get_AutoGenerateDataBindings write set_AutoGenerateDataBindings;
    property DataBindings: DNTreeNodeBindingCollection read get_DataBindings;
    property CheckedNodes: DNTreeNodeCollection read get_CheckedNodes;
    property CollapseImageToolTip: string read get_CollapseImageToolTip write set_CollapseImageToolTip;
    property CollapseImageUrl: string read get_CollapseImageUrl write set_CollapseImageUrl;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property ExpandDepth: Int32 read get_ExpandDepth write set_ExpandDepth;
    property ExpandImageToolTip: string read get_ExpandImageToolTip write set_ExpandImageToolTip;
    property ExpandImageUrl: string read get_ExpandImageUrl write set_ExpandImageUrl;
    property HoverNodeStyle: DNStyle read get_HoverNodeStyle;
    property ImageSet: DNTreeViewImageSet read get_ImageSet write set_ImageSet;
    property LeafNodeStyle: DNTreeNodeStyle read get_LeafNodeStyle;
    property LevelStyles: DNTreeNodeStyleCollection read get_LevelStyles;
    property LineImagesFolder: string read get_LineImagesFolder write set_LineImagesFolder;
    property MaxDataBindDepth: Int32 read get_MaxDataBindDepth write set_MaxDataBindDepth;
    property NoExpandImageUrl: string read get_NoExpandImageUrl write set_NoExpandImageUrl;
    property NodeIndent: Int32 read get_NodeIndent write set_NodeIndent;
    property NodeWrap: Boolean read get_NodeWrap write set_NodeWrap;
    property Nodes: DNTreeNodeCollection read get_Nodes;
    property NodeStyle: DNTreeNodeStyle read get_NodeStyle;
    property ParentNodeStyle: DNTreeNodeStyle read get_ParentNodeStyle;
    property PathSeparator: Char read get_PathSeparator write set_PathSeparator;
    property PopulateNodesFromClient: Boolean read get_PopulateNodesFromClient write set_PopulateNodesFromClient;
    property RootNodeStyle: DNTreeNodeStyle read get_RootNodeStyle;
    property SelectedNode: DNTreeNode read get_SelectedNode;
    property SelectedNodeStyle: DNTreeNodeStyle read get_SelectedNodeStyle;
    property SelectedValue: string read get_SelectedValue;
    property ShowCheckBoxes: DNTreeNodeTypes read get_ShowCheckBoxes write set_ShowCheckBoxes;
    property ShowExpandCollapse: Boolean read get_ShowExpandCollapse write set_ShowExpandCollapse;
    property ShowLines: Boolean read get_ShowLines write set_ShowLines;
    property SkipLinkText: string read get_SkipLinkText write set_SkipLinkText;
    property Target: string read get_Target write set_Target;
    property Visible: Boolean read get_Visible write set_Visible;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTreeView = class(TDNGenericImport<DNTreeViewClass, DNTreeView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBaseDataListClass = interface(DNWebControlClass)
  ['{F8DE34E3-0F7F-5130-B426-CB22FAE8755A}']
  { static methods } 

    {class} function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;

  end;

  [DNTypeName('System.Web.UI.WebControls.BaseDataList')]
  DNBaseDataList = interface(DNWebControl)
  ['{F80FA5C0-A95E-3163-BC45-C9A79EC043D4}']
  { getters & setters } 

    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Controls: DNControlCollection;
    function get_DataKeys: DNDataKeyCollection;
    function get_DataKeyField: string;
    procedure set_DataKeyField(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property Controls: DNControlCollection read get_Controls;
    property DataKeys: DNDataKeyCollection read get_DataKeys;
    property DataKeyField: string read get_DataKeyField write set_DataKeyField;
    property DataMember: string read get_DataMember write set_DataMember;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBaseDataList = class(TDNGenericImport<DNBaseDataListClass, DNBaseDataList>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridClass = interface(DNBaseDataListClass)
  ['{F972DAD5-48A7-51B7-AD04-B934BCDD299B}']
  { constructors } 

    {class} function init: DNDataGrid;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGrid')]
  DNDataGrid = interface(DNBaseDataList)
  ['{CFC4A982-7465-340C-9642-BF1FB2B0057A}']
  { getters & setters } 

    function get_AllowCustomPaging: Boolean;
    procedure set_AllowCustomPaging(value: Boolean);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AllowSorting: Boolean;
    procedure set_AllowSorting(value: Boolean);
    function get_AlternatingItemStyle: DNTableItemStyle;
    function get_AutoGenerateColumns: Boolean;
    procedure set_AutoGenerateColumns(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_CurrentPageIndex: Int32;
    procedure set_CurrentPageIndex(value: Int32);
    function get_Columns: DNDataGridColumnCollection;
    function get_EditItemIndex: Int32;
    procedure set_EditItemIndex(value: Int32);
    function get_EditItemStyle: DNTableItemStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_HeaderStyle: DNTableItemStyle;
    function get_Items: DNDataGridItemCollection;
    function get_ItemStyle: DNTableItemStyle;
    function get_PageCount: Int32;
    function get_PagerStyle: DNDataGridPagerStyle;
    function get_PageSize: Int32;
    procedure set_PageSize(value: Int32);
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNDataGridItem;
    function get_SelectedItemStyle: DNTableItemStyle;
    function get_ShowFooter: Boolean;
    procedure set_ShowFooter(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_VirtualItemCount: Int32;
    procedure set_VirtualItemCount(value: Int32);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Controls: DNControlCollection;
    function get_DataKeys: DNDataKeyCollection;
    function get_DataKeyField: string;
    procedure set_DataKeyField(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CancelCommand(value: DNDataGridCommandEventHandler);
    procedure remove_CancelCommand(value: DNDataGridCommandEventHandler);
    procedure add_DeleteCommand(value: DNDataGridCommandEventHandler);
    procedure remove_DeleteCommand(value: DNDataGridCommandEventHandler);
    procedure add_EditCommand(value: DNDataGridCommandEventHandler);
    procedure remove_EditCommand(value: DNDataGridCommandEventHandler);
    procedure add_ItemCommand(value: DNDataGridCommandEventHandler);
    procedure remove_ItemCommand(value: DNDataGridCommandEventHandler);
    procedure add_ItemCreated(value: DNDataGridItemEventHandler);
    procedure remove_ItemCreated(value: DNDataGridItemEventHandler);
    procedure add_ItemDataBound(value: DNDataGridItemEventHandler);
    procedure remove_ItemDataBound(value: DNDataGridItemEventHandler);
    procedure add_PageIndexChanged(value: DNDataGridPageChangedEventHandler);
    procedure remove_PageIndexChanged(value: DNDataGridPageChangedEventHandler);
    procedure add_SortCommand(value: DNDataGridSortCommandEventHandler);
    procedure remove_SortCommand(value: DNDataGridSortCommandEventHandler);
    procedure add_UpdateCommand(value: DNDataGridCommandEventHandler);
    procedure remove_UpdateCommand(value: DNDataGridCommandEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowCustomPaging: Boolean read get_AllowCustomPaging write set_AllowCustomPaging;
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    property AllowSorting: Boolean read get_AllowSorting write set_AllowSorting;
    property AlternatingItemStyle: DNTableItemStyle read get_AlternatingItemStyle;
    property AutoGenerateColumns: Boolean read get_AutoGenerateColumns write set_AutoGenerateColumns;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property CurrentPageIndex: Int32 read get_CurrentPageIndex write set_CurrentPageIndex;
    property Columns: DNDataGridColumnCollection read get_Columns;
    property EditItemIndex: Int32 read get_EditItemIndex write set_EditItemIndex;
    property EditItemStyle: DNTableItemStyle read get_EditItemStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property Items: DNDataGridItemCollection read get_Items;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property PageCount: Int32 read get_PageCount;
    property PagerStyle: DNDataGridPagerStyle read get_PagerStyle;
    property PageSize: Int32 read get_PageSize write set_PageSize;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNDataGridItem read get_SelectedItem;
    property SelectedItemStyle: DNTableItemStyle read get_SelectedItemStyle;
    property ShowFooter: Boolean read get_ShowFooter write set_ShowFooter;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property VirtualItemCount: Int32 read get_VirtualItemCount write set_VirtualItemCount;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property Controls: DNControlCollection read get_Controls;
    property DataKeys: DNDataKeyCollection read get_DataKeys;
    property DataKeyField: string read get_DataKeyField write set_DataKeyField;
    property DataMember: string read get_DataMember write set_DataMember;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataGrid = class(TDNGenericImport<DNDataGridClass, DNDataGrid>)
  public const
   SortCommandName = 'Sort';
   SelectCommandName = 'Select';
   EditCommandName = 'Edit';
   DeleteCommandName = 'Delete';
   UpdateCommandName = 'Update';
   CancelCommandName = 'Cancel';
   PageCommandName = 'Page';
   NextPageCommandArgument = 'Next';
   PrevPageCommandArgument = 'Prev';
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataListClass = interface(DNBaseDataListClass)
  ['{285F82F5-C7DA-5BEA-9DFB-6AD71224668F}']
  { constructors } 

    {class} function init: DNDataList;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataList')]
  DNDataList = interface(DNBaseDataList)
  ['{89EF8157-B4DA-3C00-B9C6-57B2BB9DBF53}']
  { getters & setters } 

    function get_AlternatingItemStyle: DNTableItemStyle;
    function get_AlternatingItemTemplate: DNITemplate;
    procedure set_AlternatingItemTemplate(value: DNITemplate);
    function get_EditItemIndex: Int32;
    procedure set_EditItemIndex(value: Int32);
    function get_EditItemStyle: DNTableItemStyle;
    function get_EditItemTemplate: DNITemplate;
    procedure set_EditItemTemplate(value: DNITemplate);
    function get_ExtractTemplateRows: Boolean;
    procedure set_ExtractTemplateRows(value: Boolean);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_Items: DNDataListItemCollection;
    function get_ItemStyle: DNTableItemStyle;
    function get_ItemTemplate: DNITemplate;
    procedure set_ItemTemplate(value: DNITemplate);
    function get_RepeatColumns: Int32;
    procedure set_RepeatColumns(value: Int32);
    function get_RepeatDirection: DNRepeatDirection;
    procedure set_RepeatDirection(value: DNRepeatDirection);
    function get_RepeatLayout: DNRepeatLayout;
    procedure set_RepeatLayout(value: DNRepeatLayout);
    function get_SelectedIndex: Int32;
    procedure set_SelectedIndex(value: Int32);
    function get_SelectedItem: DNDataListItem;
    function get_SelectedItemStyle: DNTableItemStyle;
    function get_SelectedItemTemplate: DNITemplate;
    procedure set_SelectedItemTemplate(value: DNITemplate);
    function get_SelectedValue: DDN.mscorlib.DNObject;
    function get_SeparatorStyle: DNTableItemStyle;
    function get_SeparatorTemplate: DNITemplate;
    procedure set_SeparatorTemplate(value: DNITemplate);
    function get_ShowFooter: Boolean;
    procedure set_ShowFooter(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_Controls: DNControlCollection;
    function get_DataKeys: DNDataKeyCollection;
    function get_DataKeyField: string;
    procedure set_DataKeyField(value: string);
    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_DataSource: DDN.mscorlib.DNObject;
    procedure set_DataSource(value: DDN.mscorlib.DNObject);
    function get_DataSourceID: string;
    procedure set_DataSourceID(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CancelCommand(value: DNDataListCommandEventHandler);
    procedure remove_CancelCommand(value: DNDataListCommandEventHandler);
    procedure add_DeleteCommand(value: DNDataListCommandEventHandler);
    procedure remove_DeleteCommand(value: DNDataListCommandEventHandler);
    procedure add_EditCommand(value: DNDataListCommandEventHandler);
    procedure remove_EditCommand(value: DNDataListCommandEventHandler);
    procedure add_ItemCommand(value: DNDataListCommandEventHandler);
    procedure remove_ItemCommand(value: DNDataListCommandEventHandler);
    procedure add_ItemCreated(value: DNDataListItemEventHandler);
    procedure remove_ItemCreated(value: DNDataListItemEventHandler);
    procedure add_ItemDataBound(value: DNDataListItemEventHandler);
    procedure remove_ItemDataBound(value: DNDataListItemEventHandler);
    procedure add_UpdateCommand(value: DNDataListCommandEventHandler);
    procedure remove_UpdateCommand(value: DNDataListCommandEventHandler);
    procedure add_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectedIndexChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlternatingItemStyle: DNTableItemStyle read get_AlternatingItemStyle;
    property AlternatingItemTemplate: DNITemplate read get_AlternatingItemTemplate write set_AlternatingItemTemplate;
    property EditItemIndex: Int32 read get_EditItemIndex write set_EditItemIndex;
    property EditItemStyle: DNTableItemStyle read get_EditItemStyle;
    property EditItemTemplate: DNITemplate read get_EditItemTemplate write set_EditItemTemplate;
    property ExtractTemplateRows: Boolean read get_ExtractTemplateRows write set_ExtractTemplateRows;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property Items: DNDataListItemCollection read get_Items;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ItemTemplate: DNITemplate read get_ItemTemplate write set_ItemTemplate;
    property RepeatColumns: Int32 read get_RepeatColumns write set_RepeatColumns;
    property RepeatDirection: DNRepeatDirection read get_RepeatDirection write set_RepeatDirection;
    property RepeatLayout: DNRepeatLayout read get_RepeatLayout write set_RepeatLayout;
    property SelectedIndex: Int32 read get_SelectedIndex write set_SelectedIndex;
    property SelectedItem: DNDataListItem read get_SelectedItem;
    property SelectedItemStyle: DNTableItemStyle read get_SelectedItemStyle;
    property SelectedItemTemplate: DNITemplate read get_SelectedItemTemplate write set_SelectedItemTemplate;
    property SelectedValue: DDN.mscorlib.DNObject read get_SelectedValue;
    property SeparatorStyle: DNTableItemStyle read get_SeparatorStyle;
    property SeparatorTemplate: DNITemplate read get_SeparatorTemplate write set_SeparatorTemplate;
    property ShowFooter: Boolean read get_ShowFooter write set_ShowFooter;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property Controls: DNControlCollection read get_Controls;
    property DataKeys: DNDataKeyCollection read get_DataKeys;
    property DataKeyField: string read get_DataKeyField write set_DataKeyField;
    property DataMember: string read get_DataMember write set_DataMember;
    property DataSource: DDN.mscorlib.DNObject read get_DataSource write set_DataSource;
    property DataSourceID: string read get_DataSourceID write set_DataSourceID;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataList = class(TDNGenericImport<DNDataListClass, DNDataList>)
  public const
   SelectCommandName = 'Select';
   EditCommandName = 'Edit';
   UpdateCommandName = 'Update';
   CancelCommandName = 'Cancel';
   DeleteCommandName = 'Delete';
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNButtonClass = interface(DNWebControlClass)
  ['{573EFA06-2CEC-5D03-A2FF-4E98AE44A7DA}']
  { constructors } 

    {class} function init: DNButton;

  end;

  [DNTypeName('System.Web.UI.WebControls.Button')]
  DNButton = interface(DNWebControl)
  ['{93EAAE43-C6C9-3068-8F69-94E34AF4E237}']
  { getters & setters } 

    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_CommandArgument: string;
    procedure set_CommandArgument(value: string);
    function get_OnClientClick: string;
    procedure set_OnClientClick(value: string);
    function get_PostBackUrl: string;
    procedure set_PostBackUrl(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_UseSubmitBehavior: Boolean;
    procedure set_UseSubmitBehavior(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Click(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Click(value: DDN.mscorlib.DNEventHandler);
    procedure add_Command(value: DNCommandEventHandler);
    procedure remove_Command(value: DNCommandEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property CommandName: string read get_CommandName write set_CommandName;
    property CommandArgument: string read get_CommandArgument write set_CommandArgument;
    property OnClientClick: string read get_OnClientClick write set_OnClientClick;
    property PostBackUrl: string read get_PostBackUrl write set_PostBackUrl;
    property Text: string read get_Text write set_Text;
    property UseSubmitBehavior: Boolean read get_UseSubmitBehavior write set_UseSubmitBehavior;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNButton = class(TDNGenericImport<DNButtonClass, DNButton>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCalendarClass = interface(DNWebControlClass)
  ['{5FB0EF98-D557-58A2-9905-3137C0E4C150}']
  { constructors } 

    {class} function init: DNCalendar;

  end;

  [DNTypeName('System.Web.UI.WebControls.Calendar')]
  DNCalendar = interface(DNWebControl)
  ['{F1C3826F-F1CC-3DA8-985B-04F72E8C06DC}']
  { getters & setters } 

    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_DayHeaderStyle: DNTableItemStyle;
    function get_DayNameFormat: DNDayNameFormat;
    procedure set_DayNameFormat(value: DNDayNameFormat);
    function get_DayStyle: DNTableItemStyle;
    function get_FirstDayOfWeek: DNFirstDayOfWeek;
    procedure set_FirstDayOfWeek(value: DNFirstDayOfWeek);
    function get_NextMonthText: string;
    procedure set_NextMonthText(value: string);
    function get_NextPrevFormat: DNNextPrevFormat;
    procedure set_NextPrevFormat(value: DNNextPrevFormat);
    function get_NextPrevStyle: DNTableItemStyle;
    function get_OtherMonthDayStyle: DNTableItemStyle;
    function get_PrevMonthText: string;
    procedure set_PrevMonthText(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SelectedDate: DDN.mscorlib.DNDateTime;
    procedure set_SelectedDate(value: DDN.mscorlib.DNDateTime);
    function get_SelectedDates: DNSelectedDatesCollection;
    function get_SelectedDayStyle: DNTableItemStyle;
    function get_SelectionMode: DNCalendarSelectionMode;
    procedure set_SelectionMode(value: DNCalendarSelectionMode);
    function get_SelectMonthText: string;
    procedure set_SelectMonthText(value: string);
    function get_SelectorStyle: DNTableItemStyle;
    function get_SelectWeekText: string;
    procedure set_SelectWeekText(value: string);
    function get_ShowDayHeader: Boolean;
    procedure set_ShowDayHeader(value: Boolean);
    function get_ShowGridLines: Boolean;
    procedure set_ShowGridLines(value: Boolean);
    function get_ShowNextPrevMonth: Boolean;
    procedure set_ShowNextPrevMonth(value: Boolean);
    function get_ShowTitle: Boolean;
    procedure set_ShowTitle(value: Boolean);
    function get_TitleFormat: DNTitleFormat;
    procedure set_TitleFormat(value: DNTitleFormat);
    function get_TitleStyle: DNTableItemStyle;
    function get_TodayDayStyle: DNTableItemStyle;
    function get_TodaysDate: DDN.mscorlib.DNDateTime;
    procedure set_TodaysDate(value: DDN.mscorlib.DNDateTime);
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);
    function get_VisibleDate: DDN.mscorlib.DNDateTime;
    procedure set_VisibleDate(value: DDN.mscorlib.DNDateTime);
    function get_WeekendDayStyle: DNTableItemStyle;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_DayRender(value: DNDayRenderEventHandler);
    procedure remove_DayRender(value: DNDayRenderEventHandler);
    procedure add_SelectionChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_SelectionChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_VisibleMonthChanged(value: DNMonthChangedEventHandler);
    procedure remove_VisibleMonthChanged(value: DNMonthChangedEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property DayHeaderStyle: DNTableItemStyle read get_DayHeaderStyle;
    property DayNameFormat: DNDayNameFormat read get_DayNameFormat write set_DayNameFormat;
    property DayStyle: DNTableItemStyle read get_DayStyle;
    property FirstDayOfWeek: DNFirstDayOfWeek read get_FirstDayOfWeek write set_FirstDayOfWeek;
    property NextMonthText: string read get_NextMonthText write set_NextMonthText;
    property NextPrevFormat: DNNextPrevFormat read get_NextPrevFormat write set_NextPrevFormat;
    property NextPrevStyle: DNTableItemStyle read get_NextPrevStyle;
    property OtherMonthDayStyle: DNTableItemStyle read get_OtherMonthDayStyle;
    property PrevMonthText: string read get_PrevMonthText write set_PrevMonthText;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SelectedDate: DDN.mscorlib.DNDateTime read get_SelectedDate write set_SelectedDate;
    property SelectedDates: DNSelectedDatesCollection read get_SelectedDates;
    property SelectedDayStyle: DNTableItemStyle read get_SelectedDayStyle;
    property SelectionMode: DNCalendarSelectionMode read get_SelectionMode write set_SelectionMode;
    property SelectMonthText: string read get_SelectMonthText write set_SelectMonthText;
    property SelectorStyle: DNTableItemStyle read get_SelectorStyle;
    property SelectWeekText: string read get_SelectWeekText write set_SelectWeekText;
    property ShowDayHeader: Boolean read get_ShowDayHeader write set_ShowDayHeader;
    property ShowGridLines: Boolean read get_ShowGridLines write set_ShowGridLines;
    property ShowNextPrevMonth: Boolean read get_ShowNextPrevMonth write set_ShowNextPrevMonth;
    property ShowTitle: Boolean read get_ShowTitle write set_ShowTitle;
    property TitleFormat: DNTitleFormat read get_TitleFormat write set_TitleFormat;
    property TitleStyle: DNTableItemStyle read get_TitleStyle;
    property TodayDayStyle: DNTableItemStyle read get_TodayDayStyle;
    property TodaysDate: DDN.mscorlib.DNDateTime read get_TodaysDate write set_TodaysDate;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
    property VisibleDate: DDN.mscorlib.DNDateTime read get_VisibleDate write set_VisibleDate;
    property WeekendDayStyle: DNTableItemStyle read get_WeekendDayStyle;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCalendar = class(TDNGenericImport<DNCalendarClass, DNCalendar>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCheckBoxClass = interface(DNWebControlClass)
  ['{4F0DE023-0B84-5027-9BA6-E56D6FF63C02}']
  { constructors } 

    {class} function init: DNCheckBox;

  end;

  [DNTypeName('System.Web.UI.WebControls.CheckBox')]
  DNCheckBox = interface(DNWebControl)
  ['{A6245539-E751-366C-A834-4E2953F5FDFF}']
  { getters & setters } 

    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_InputAttributes: DNAttributeCollection;
    function get_LabelAttributes: DNAttributeCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextAlign: DNTextAlign;
    procedure set_TextAlign(value: DNTextAlign);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CheckedChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CheckedChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property Checked: Boolean read get_Checked write set_Checked;
    property InputAttributes: DNAttributeCollection read get_InputAttributes;
    property LabelAttributes: DNAttributeCollection read get_LabelAttributes;
    property Text: string read get_Text write set_Text;
    property TextAlign: DNTextAlign read get_TextAlign write set_TextAlign;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCheckBox = class(TDNGenericImport<DNCheckBoxClass, DNCheckBox>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRadioButtonClass = interface(DNCheckBoxClass)
  ['{662DEA2F-3D71-5081-A143-1930DF540F70}']
  { constructors } 

    {class} function init: DNRadioButton;

  end;

  [DNTypeName('System.Web.UI.WebControls.RadioButton')]
  DNRadioButton = interface(DNCheckBox)
  ['{1C1D43AF-22F4-3821-93D8-63EE468011EC}']
  { getters & setters } 

    function get_GroupName: string;
    procedure set_GroupName(value: string);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_InputAttributes: DNAttributeCollection;
    function get_LabelAttributes: DNAttributeCollection;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextAlign: DNTextAlign;
    procedure set_TextAlign(value: DNTextAlign);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CheckedChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CheckedChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GroupName: string read get_GroupName write set_GroupName;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property Checked: Boolean read get_Checked write set_Checked;
    property InputAttributes: DNAttributeCollection read get_InputAttributes;
    property LabelAttributes: DNAttributeCollection read get_LabelAttributes;
    property Text: string read get_Text write set_Text;
    property TextAlign: DNTextAlign read get_TextAlign write set_TextAlign;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRadioButton = class(TDNGenericImport<DNRadioButtonClass, DNRadioButton>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCompositeControlClass = interface(DNWebControlClass)
  ['{35739A58-B61D-5284-8895-87CE90E83933}']
  end;

  [DNTypeName('System.Web.UI.WebControls.CompositeControl')]
  DNCompositeControl = interface(DNWebControl)
  ['{08718564-6B52-34AF-9154-0723026ACFBB}']
  { getters & setters } 

    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCompositeControl = class(TDNGenericImport<DNCompositeControlClass, DNCompositeControl>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNChangePasswordClass = interface(DNCompositeControlClass)
  ['{6E6180BD-7DEA-570F-82C5-045A549232F4}']
  { constructors } 

    {class} function init: DNChangePassword;

  { static fields getter & setter } 

   function __fakeFieldGet_ChangePasswordButtonCommandName: string;
   function __fakeFieldGet_CancelButtonCommandName: string;
   function __fakeFieldGet_ContinueButtonCommandName: string;

  { static fields } 

    {class} property ChangePasswordButtonCommandName: string read __fakeFieldGet_ChangePasswordButtonCommandName;
    {class} property CancelButtonCommandName: string read __fakeFieldGet_CancelButtonCommandName;
    {class} property ContinueButtonCommandName: string read __fakeFieldGet_ContinueButtonCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.ChangePassword')]
  DNChangePassword = interface(DNCompositeControl)
  ['{8F0F27C0-FF33-3287-9260-AF0682E1076E}']
  { getters & setters } 

    function get_BorderPadding: Int32;
    procedure set_BorderPadding(value: Int32);
    function get_CancelButtonImageUrl: string;
    procedure set_CancelButtonImageUrl(value: string);
    function get_CancelButtonStyle: DNStyle;
    function get_CancelButtonText: string;
    procedure set_CancelButtonText(value: string);
    function get_CancelButtonType: DNButtonType;
    procedure set_CancelButtonType(value: DNButtonType);
    function get_CancelDestinationPageUrl: string;
    procedure set_CancelDestinationPageUrl(value: string);
    function get_ChangePasswordButtonImageUrl: string;
    procedure set_ChangePasswordButtonImageUrl(value: string);
    function get_ChangePasswordButtonStyle: DNStyle;
    function get_ChangePasswordButtonText: string;
    procedure set_ChangePasswordButtonText(value: string);
    function get_ChangePasswordButtonType: DNButtonType;
    procedure set_ChangePasswordButtonType(value: DNButtonType);
    function get_ChangePasswordFailureText: string;
    procedure set_ChangePasswordFailureText(value: string);
    function get_ChangePasswordTemplate: DNITemplate;
    procedure set_ChangePasswordTemplate(value: DNITemplate);
    function get_ChangePasswordTemplateContainer: DNControl;
    function get_ChangePasswordTitleText: string;
    procedure set_ChangePasswordTitleText(value: string);
    function get_ConfirmNewPassword: string;
    function get_ConfirmNewPasswordLabelText: string;
    procedure set_ConfirmNewPasswordLabelText(value: string);
    function get_ConfirmPasswordCompareErrorMessage: string;
    procedure set_ConfirmPasswordCompareErrorMessage(value: string);
    function get_ConfirmPasswordRequiredErrorMessage: string;
    procedure set_ConfirmPasswordRequiredErrorMessage(value: string);
    function get_ContinueButtonImageUrl: string;
    procedure set_ContinueButtonImageUrl(value: string);
    function get_ContinueButtonStyle: DNStyle;
    function get_ContinueButtonText: string;
    procedure set_ContinueButtonText(value: string);
    function get_ContinueButtonType: DNButtonType;
    procedure set_ContinueButtonType(value: DNButtonType);
    function get_ContinueDestinationPageUrl: string;
    procedure set_ContinueDestinationPageUrl(value: string);
    function get_CreateUserIconUrl: string;
    procedure set_CreateUserIconUrl(value: string);
    function get_CreateUserText: string;
    procedure set_CreateUserText(value: string);
    function get_CreateUserUrl: string;
    procedure set_CreateUserUrl(value: string);
    function get_CurrentPassword: string;
    function get_DisplayUserName: Boolean;
    procedure set_DisplayUserName(value: Boolean);
    function get_EditProfileIconUrl: string;
    procedure set_EditProfileIconUrl(value: string);
    function get_EditProfileText: string;
    procedure set_EditProfileText(value: string);
    function get_EditProfileUrl: string;
    procedure set_EditProfileUrl(value: string);
    function get_FailureTextStyle: DNTableItemStyle;
    function get_HelpPageIconUrl: string;
    procedure set_HelpPageIconUrl(value: string);
    function get_HelpPageText: string;
    procedure set_HelpPageText(value: string);
    function get_HelpPageUrl: string;
    procedure set_HelpPageUrl(value: string);
    function get_HyperLinkStyle: DNTableItemStyle;
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_InstructionTextStyle: DNTableItemStyle;
    function get_LabelStyle: DNTableItemStyle;
    function get_MembershipProvider: string;
    procedure set_MembershipProvider(value: string);
    function get_NewPassword: string;
    function get_NewPasswordRegularExpressionErrorMessage: string;
    procedure set_NewPasswordRegularExpressionErrorMessage(value: string);
    function get_NewPasswordLabelText: string;
    procedure set_NewPasswordLabelText(value: string);
    function get_NewPasswordRegularExpression: string;
    procedure set_NewPasswordRegularExpression(value: string);
    function get_NewPasswordRequiredErrorMessage: string;
    procedure set_NewPasswordRequiredErrorMessage(value: string);
    function get_PasswordHintStyle: DNTableItemStyle;
    function get_PasswordHintText: string;
    procedure set_PasswordHintText(value: string);
    function get_PasswordLabelText: string;
    procedure set_PasswordLabelText(value: string);
    function get_PasswordRecoveryIconUrl: string;
    procedure set_PasswordRecoveryIconUrl(value: string);
    function get_PasswordRecoveryText: string;
    procedure set_PasswordRecoveryText(value: string);
    function get_PasswordRecoveryUrl: string;
    procedure set_PasswordRecoveryUrl(value: string);
    function get_PasswordRequiredErrorMessage: string;
    procedure set_PasswordRequiredErrorMessage(value: string);
    function get_MailDefinition: DNMailDefinition;
    function get_RenderOuterTable: Boolean;
    procedure set_RenderOuterTable(value: Boolean);
    function get_SuccessPageUrl: string;
    procedure set_SuccessPageUrl(value: string);
    function get_SuccessTemplate: DNITemplate;
    procedure set_SuccessTemplate(value: DNITemplate);
    function get_SuccessTemplateContainer: DNControl;
    function get_SuccessText: string;
    procedure set_SuccessText(value: string);
    function get_SuccessTextStyle: DNTableItemStyle;
    function get_SuccessTitleText: string;
    procedure set_SuccessTitleText(value: string);
    function get_TextBoxStyle: DNStyle;
    function get_TitleTextStyle: DNTableItemStyle;
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_UserNameLabelText: string;
    procedure set_UserNameLabelText(value: string);
    function get_UserNameRequiredErrorMessage: string;
    procedure set_UserNameRequiredErrorMessage(value: string);
    function get_ValidatorTextStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_ChangedPassword(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ChangedPassword(value: DDN.mscorlib.DNEventHandler);
    procedure add_ChangePasswordError(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ChangePasswordError(value: DDN.mscorlib.DNEventHandler);
    procedure add_ChangingPassword(value: DNLoginCancelEventHandler);
    procedure remove_ChangingPassword(value: DNLoginCancelEventHandler);
    procedure add_ContinueButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ContinueButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_SendingMail(value: DNMailMessageEventHandler);
    procedure remove_SendingMail(value: DNMailMessageEventHandler);
    procedure add_SendMailError(value: DNSendMailErrorEventHandler);
    procedure remove_SendMailError(value: DNSendMailErrorEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderPadding: Int32 read get_BorderPadding write set_BorderPadding;
    property CancelButtonImageUrl: string read get_CancelButtonImageUrl write set_CancelButtonImageUrl;
    property CancelButtonStyle: DNStyle read get_CancelButtonStyle;
    property CancelButtonText: string read get_CancelButtonText write set_CancelButtonText;
    property CancelButtonType: DNButtonType read get_CancelButtonType write set_CancelButtonType;
    property CancelDestinationPageUrl: string read get_CancelDestinationPageUrl write set_CancelDestinationPageUrl;
    property ChangePasswordButtonImageUrl: string read get_ChangePasswordButtonImageUrl write set_ChangePasswordButtonImageUrl;
    property ChangePasswordButtonStyle: DNStyle read get_ChangePasswordButtonStyle;
    property ChangePasswordButtonText: string read get_ChangePasswordButtonText write set_ChangePasswordButtonText;
    property ChangePasswordButtonType: DNButtonType read get_ChangePasswordButtonType write set_ChangePasswordButtonType;
    property ChangePasswordFailureText: string read get_ChangePasswordFailureText write set_ChangePasswordFailureText;
    property ChangePasswordTemplate: DNITemplate read get_ChangePasswordTemplate write set_ChangePasswordTemplate;
    property ChangePasswordTemplateContainer: DNControl read get_ChangePasswordTemplateContainer;
    property ChangePasswordTitleText: string read get_ChangePasswordTitleText write set_ChangePasswordTitleText;
    property ConfirmNewPassword: string read get_ConfirmNewPassword;
    property ConfirmNewPasswordLabelText: string read get_ConfirmNewPasswordLabelText write set_ConfirmNewPasswordLabelText;
    property ConfirmPasswordCompareErrorMessage: string read get_ConfirmPasswordCompareErrorMessage write set_ConfirmPasswordCompareErrorMessage;
    property ConfirmPasswordRequiredErrorMessage: string read get_ConfirmPasswordRequiredErrorMessage write set_ConfirmPasswordRequiredErrorMessage;
    property ContinueButtonImageUrl: string read get_ContinueButtonImageUrl write set_ContinueButtonImageUrl;
    property ContinueButtonStyle: DNStyle read get_ContinueButtonStyle;
    property ContinueButtonText: string read get_ContinueButtonText write set_ContinueButtonText;
    property ContinueButtonType: DNButtonType read get_ContinueButtonType write set_ContinueButtonType;
    property ContinueDestinationPageUrl: string read get_ContinueDestinationPageUrl write set_ContinueDestinationPageUrl;
    property CreateUserIconUrl: string read get_CreateUserIconUrl write set_CreateUserIconUrl;
    property CreateUserText: string read get_CreateUserText write set_CreateUserText;
    property CreateUserUrl: string read get_CreateUserUrl write set_CreateUserUrl;
    property CurrentPassword: string read get_CurrentPassword;
    property DisplayUserName: Boolean read get_DisplayUserName write set_DisplayUserName;
    property EditProfileIconUrl: string read get_EditProfileIconUrl write set_EditProfileIconUrl;
    property EditProfileText: string read get_EditProfileText write set_EditProfileText;
    property EditProfileUrl: string read get_EditProfileUrl write set_EditProfileUrl;
    property FailureTextStyle: DNTableItemStyle read get_FailureTextStyle;
    property HelpPageIconUrl: string read get_HelpPageIconUrl write set_HelpPageIconUrl;
    property HelpPageText: string read get_HelpPageText write set_HelpPageText;
    property HelpPageUrl: string read get_HelpPageUrl write set_HelpPageUrl;
    property HyperLinkStyle: DNTableItemStyle read get_HyperLinkStyle;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property InstructionTextStyle: DNTableItemStyle read get_InstructionTextStyle;
    property LabelStyle: DNTableItemStyle read get_LabelStyle;
    property MembershipProvider: string read get_MembershipProvider write set_MembershipProvider;
    property NewPassword: string read get_NewPassword;
    property NewPasswordRegularExpressionErrorMessage: string read get_NewPasswordRegularExpressionErrorMessage write set_NewPasswordRegularExpressionErrorMessage;
    property NewPasswordLabelText: string read get_NewPasswordLabelText write set_NewPasswordLabelText;
    property NewPasswordRegularExpression: string read get_NewPasswordRegularExpression write set_NewPasswordRegularExpression;
    property NewPasswordRequiredErrorMessage: string read get_NewPasswordRequiredErrorMessage write set_NewPasswordRequiredErrorMessage;
    property PasswordHintStyle: DNTableItemStyle read get_PasswordHintStyle;
    property PasswordHintText: string read get_PasswordHintText write set_PasswordHintText;
    property PasswordLabelText: string read get_PasswordLabelText write set_PasswordLabelText;
    property PasswordRecoveryIconUrl: string read get_PasswordRecoveryIconUrl write set_PasswordRecoveryIconUrl;
    property PasswordRecoveryText: string read get_PasswordRecoveryText write set_PasswordRecoveryText;
    property PasswordRecoveryUrl: string read get_PasswordRecoveryUrl write set_PasswordRecoveryUrl;
    property PasswordRequiredErrorMessage: string read get_PasswordRequiredErrorMessage write set_PasswordRequiredErrorMessage;
    property MailDefinition: DNMailDefinition read get_MailDefinition;
    property RenderOuterTable: Boolean read get_RenderOuterTable write set_RenderOuterTable;
    property SuccessPageUrl: string read get_SuccessPageUrl write set_SuccessPageUrl;
    property SuccessTemplate: DNITemplate read get_SuccessTemplate write set_SuccessTemplate;
    property SuccessTemplateContainer: DNControl read get_SuccessTemplateContainer;
    property SuccessText: string read get_SuccessText write set_SuccessText;
    property SuccessTextStyle: DNTableItemStyle read get_SuccessTextStyle;
    property SuccessTitleText: string read get_SuccessTitleText write set_SuccessTitleText;
    property TextBoxStyle: DNStyle read get_TextBoxStyle;
    property TitleTextStyle: DNTableItemStyle read get_TitleTextStyle;
    property UserName: string read get_UserName write set_UserName;
    property UserNameLabelText: string read get_UserNameLabelText write set_UserNameLabelText;
    property UserNameRequiredErrorMessage: string read get_UserNameRequiredErrorMessage write set_UserNameRequiredErrorMessage;
    property ValidatorTextStyle: DNStyle read get_ValidatorTextStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNChangePassword = class(TDNGenericImport<DNChangePasswordClass, DNChangePassword>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLoginClass = interface(DNCompositeControlClass)
  ['{D76AFBF1-CCF6-5A8A-B958-80944F0C623A}']
  { constructors } 

    {class} function init: DNLogin;

  { static fields getter & setter } 

   function __fakeFieldGet_LoginButtonCommandName: string;

  { static fields } 

    {class} property LoginButtonCommandName: string read __fakeFieldGet_LoginButtonCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.Login')]
  DNLogin = interface(DNCompositeControl)
  ['{470FB3DF-2287-342A-B323-4D6367A608BA}']
  { getters & setters } 

    function get_BorderPadding: Int32;
    procedure set_BorderPadding(value: Int32);
    function get_CheckBoxStyle: DNTableItemStyle;
    function get_CreateUserText: string;
    procedure set_CreateUserText(value: string);
    function get_CreateUserUrl: string;
    procedure set_CreateUserUrl(value: string);
    function get_DestinationPageUrl: string;
    procedure set_DestinationPageUrl(value: string);
    function get_DisplayRememberMe: Boolean;
    procedure set_DisplayRememberMe(value: Boolean);
    function get_HelpPageText: string;
    procedure set_HelpPageText(value: string);
    function get_HelpPageUrl: string;
    procedure set_HelpPageUrl(value: string);
    function get_CreateUserIconUrl: string;
    procedure set_CreateUserIconUrl(value: string);
    function get_HelpPageIconUrl: string;
    procedure set_HelpPageIconUrl(value: string);
    function get_HyperLinkStyle: DNTableItemStyle;
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_InstructionTextStyle: DNTableItemStyle;
    function get_LabelStyle: DNTableItemStyle;
    function get_LayoutTemplate: DNITemplate;
    procedure set_LayoutTemplate(value: DNITemplate);
    function get_FailureAction: DNLoginFailureAction;
    procedure set_FailureAction(value: DNLoginFailureAction);
    function get_FailureText: string;
    procedure set_FailureText(value: string);
    function get_FailureTextStyle: DNTableItemStyle;
    function get_LoginButtonImageUrl: string;
    procedure set_LoginButtonImageUrl(value: string);
    function get_LoginButtonStyle: DNStyle;
    function get_LoginButtonText: string;
    procedure set_LoginButtonText(value: string);
    function get_LoginButtonType: DNButtonType;
    procedure set_LoginButtonType(value: DNButtonType);
    function get_Orientation: DNOrientation;
    procedure set_Orientation(value: DNOrientation);
    function get_MembershipProvider: string;
    procedure set_MembershipProvider(value: string);
    function get_Password: string;
    function get_PasswordLabelText: string;
    procedure set_PasswordLabelText(value: string);
    function get_PasswordRecoveryText: string;
    procedure set_PasswordRecoveryText(value: string);
    function get_PasswordRecoveryUrl: string;
    procedure set_PasswordRecoveryUrl(value: string);
    function get_PasswordRecoveryIconUrl: string;
    procedure set_PasswordRecoveryIconUrl(value: string);
    function get_PasswordRequiredErrorMessage: string;
    procedure set_PasswordRequiredErrorMessage(value: string);
    function get_RememberMeSet: Boolean;
    procedure set_RememberMeSet(value: Boolean);
    function get_RememberMeText: string;
    procedure set_RememberMeText(value: string);
    function get_RenderOuterTable: Boolean;
    procedure set_RenderOuterTable(value: Boolean);
    function get_TextBoxStyle: DNStyle;
    function get_TextLayout: DNLoginTextLayout;
    procedure set_TextLayout(value: DNLoginTextLayout);
    function get_TitleText: string;
    procedure set_TitleText(value: string);
    function get_TitleTextStyle: DNTableItemStyle;
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_UserNameLabelText: string;
    procedure set_UserNameLabelText(value: string);
    function get_UserNameRequiredErrorMessage: string;
    procedure set_UserNameRequiredErrorMessage(value: string);
    function get_ValidatorTextStyle: DNStyle;
    function get_VisibleWhenLoggedIn: Boolean;
    procedure set_VisibleWhenLoggedIn(value: Boolean);
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_LoggedIn(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoggedIn(value: DDN.mscorlib.DNEventHandler);
    procedure add_Authenticate(value: DNAuthenticateEventHandler);
    procedure remove_Authenticate(value: DNAuthenticateEventHandler);
    procedure add_LoggingIn(value: DNLoginCancelEventHandler);
    procedure remove_LoggingIn(value: DNLoginCancelEventHandler);
    procedure add_LoginError(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoginError(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BorderPadding: Int32 read get_BorderPadding write set_BorderPadding;
    property CheckBoxStyle: DNTableItemStyle read get_CheckBoxStyle;
    property CreateUserText: string read get_CreateUserText write set_CreateUserText;
    property CreateUserUrl: string read get_CreateUserUrl write set_CreateUserUrl;
    property DestinationPageUrl: string read get_DestinationPageUrl write set_DestinationPageUrl;
    property DisplayRememberMe: Boolean read get_DisplayRememberMe write set_DisplayRememberMe;
    property HelpPageText: string read get_HelpPageText write set_HelpPageText;
    property HelpPageUrl: string read get_HelpPageUrl write set_HelpPageUrl;
    property CreateUserIconUrl: string read get_CreateUserIconUrl write set_CreateUserIconUrl;
    property HelpPageIconUrl: string read get_HelpPageIconUrl write set_HelpPageIconUrl;
    property HyperLinkStyle: DNTableItemStyle read get_HyperLinkStyle;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property InstructionTextStyle: DNTableItemStyle read get_InstructionTextStyle;
    property LabelStyle: DNTableItemStyle read get_LabelStyle;
    property LayoutTemplate: DNITemplate read get_LayoutTemplate write set_LayoutTemplate;
    property FailureAction: DNLoginFailureAction read get_FailureAction write set_FailureAction;
    property FailureText: string read get_FailureText write set_FailureText;
    property FailureTextStyle: DNTableItemStyle read get_FailureTextStyle;
    property LoginButtonImageUrl: string read get_LoginButtonImageUrl write set_LoginButtonImageUrl;
    property LoginButtonStyle: DNStyle read get_LoginButtonStyle;
    property LoginButtonText: string read get_LoginButtonText write set_LoginButtonText;
    property LoginButtonType: DNButtonType read get_LoginButtonType write set_LoginButtonType;
    property Orientation: DNOrientation read get_Orientation write set_Orientation;
    property MembershipProvider: string read get_MembershipProvider write set_MembershipProvider;
    property Password: string read get_Password;
    property PasswordLabelText: string read get_PasswordLabelText write set_PasswordLabelText;
    property PasswordRecoveryText: string read get_PasswordRecoveryText write set_PasswordRecoveryText;
    property PasswordRecoveryUrl: string read get_PasswordRecoveryUrl write set_PasswordRecoveryUrl;
    property PasswordRecoveryIconUrl: string read get_PasswordRecoveryIconUrl write set_PasswordRecoveryIconUrl;
    property PasswordRequiredErrorMessage: string read get_PasswordRequiredErrorMessage write set_PasswordRequiredErrorMessage;
    property RememberMeSet: Boolean read get_RememberMeSet write set_RememberMeSet;
    property RememberMeText: string read get_RememberMeText write set_RememberMeText;
    property RenderOuterTable: Boolean read get_RenderOuterTable write set_RenderOuterTable;
    property TextBoxStyle: DNStyle read get_TextBoxStyle;
    property TextLayout: DNLoginTextLayout read get_TextLayout write set_TextLayout;
    property TitleText: string read get_TitleText write set_TitleText;
    property TitleTextStyle: DNTableItemStyle read get_TitleTextStyle;
    property UserName: string read get_UserName write set_UserName;
    property UserNameLabelText: string read get_UserNameLabelText write set_UserNameLabelText;
    property UserNameRequiredErrorMessage: string read get_UserNameRequiredErrorMessage write set_UserNameRequiredErrorMessage;
    property ValidatorTextStyle: DNStyle read get_ValidatorTextStyle;
    property VisibleWhenLoggedIn: Boolean read get_VisibleWhenLoggedIn write set_VisibleWhenLoggedIn;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLogin = class(TDNGenericImport<DNLoginClass, DNLogin>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLoginStatusClass = interface(DNCompositeControlClass)
  ['{508BC2A7-19CC-556E-B9B6-5B317140E4DC}']
  { constructors } 

    {class} function init: DNLoginStatus;

  end;

  [DNTypeName('System.Web.UI.WebControls.LoginStatus')]
  DNLoginStatus = interface(DNCompositeControl)
  ['{9199B7BC-EA96-38D8-A8CD-B92FA02C8F36}']
  { getters & setters } 

    function get_LoginImageUrl: string;
    procedure set_LoginImageUrl(value: string);
    function get_LoginText: string;
    procedure set_LoginText(value: string);
    function get_LogoutAction: DNLogoutAction;
    procedure set_LogoutAction(value: DNLogoutAction);
    function get_LogoutImageUrl: string;
    procedure set_LogoutImageUrl(value: string);
    function get_LogoutPageUrl: string;
    procedure set_LogoutPageUrl(value: string);
    function get_LogoutText: string;
    procedure set_LogoutText(value: string);
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_LoggedOut(value: DDN.mscorlib.DNEventHandler);
    procedure remove_LoggedOut(value: DDN.mscorlib.DNEventHandler);
    procedure add_LoggingOut(value: DNLoginCancelEventHandler);
    procedure remove_LoggingOut(value: DNLoginCancelEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property LoginImageUrl: string read get_LoginImageUrl write set_LoginImageUrl;
    property LoginText: string read get_LoginText write set_LoginText;
    property LogoutAction: DNLogoutAction read get_LogoutAction write set_LogoutAction;
    property LogoutImageUrl: string read get_LogoutImageUrl write set_LogoutImageUrl;
    property LogoutPageUrl: string read get_LogoutPageUrl write set_LogoutPageUrl;
    property LogoutText: string read get_LogoutText write set_LogoutText;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLoginStatus = class(TDNGenericImport<DNLoginStatusClass, DNLoginStatus>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPasswordRecoveryClass = interface(DNCompositeControlClass)
  ['{E0B9C797-6A78-5EA6-B2AF-38095225FE4C}']
  { constructors } 

    {class} function init: DNPasswordRecovery;

  { static fields getter & setter } 

   function __fakeFieldGet_SubmitButtonCommandName: string;

  { static fields } 

    {class} property SubmitButtonCommandName: string read __fakeFieldGet_SubmitButtonCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.PasswordRecovery')]
  DNPasswordRecovery = interface(DNCompositeControl)
  ['{929FAF07-6B6C-3A97-93D0-DDFFBE1575B1}']
  { getters & setters } 

    function get_Answer: string;
    function get_AnswerLabelText: string;
    procedure set_AnswerLabelText(value: string);
    function get_AnswerRequiredErrorMessage: string;
    procedure set_AnswerRequiredErrorMessage(value: string);
    function get_BorderPadding: Int32;
    procedure set_BorderPadding(value: Int32);
    function get_SubmitButtonStyle: DNStyle;
    function get_SubmitButtonType: DNButtonType;
    procedure set_SubmitButtonType(value: DNButtonType);
    function get_FailureTextStyle: DNTableItemStyle;
    function get_GeneralFailureText: string;
    procedure set_GeneralFailureText(value: string);
    function get_HelpPageText: string;
    procedure set_HelpPageText(value: string);
    function get_HelpPageIconUrl: string;
    procedure set_HelpPageIconUrl(value: string);
    function get_HelpPageUrl: string;
    procedure set_HelpPageUrl(value: string);
    function get_HyperLinkStyle: DNTableItemStyle;
    function get_InstructionTextStyle: DNTableItemStyle;
    function get_LabelStyle: DNTableItemStyle;
    function get_MailDefinition: DNMailDefinition;
    function get_MembershipProvider: string;
    procedure set_MembershipProvider(value: string);
    function get_Question: string;
    function get_QuestionFailureText: string;
    procedure set_QuestionFailureText(value: string);
    function get_QuestionInstructionText: string;
    procedure set_QuestionInstructionText(value: string);
    function get_QuestionLabelText: string;
    procedure set_QuestionLabelText(value: string);
    function get_QuestionTitleText: string;
    procedure set_QuestionTitleText(value: string);
    function get_QuestionTemplate: DNITemplate;
    procedure set_QuestionTemplate(value: DNITemplate);
    function get_QuestionTemplateContainer: DNControl;
    function get_SubmitButtonImageUrl: string;
    procedure set_SubmitButtonImageUrl(value: string);
    function get_SubmitButtonText: string;
    procedure set_SubmitButtonText(value: string);
    function get_SuccessPageUrl: string;
    procedure set_SuccessPageUrl(value: string);
    function get_SuccessTemplate: DNITemplate;
    procedure set_SuccessTemplate(value: DNITemplate);
    function get_SuccessTemplateContainer: DNControl;
    function get_SuccessText: string;
    procedure set_SuccessText(value: string);
    function get_SuccessTextStyle: DNTableItemStyle;
    function get_RenderOuterTable: Boolean;
    procedure set_RenderOuterTable(value: Boolean);
    function get_TextBoxStyle: DNStyle;
    function get_TextLayout: DNLoginTextLayout;
    procedure set_TextLayout(value: DNLoginTextLayout);
    function get_TitleTextStyle: DNTableItemStyle;
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_UserNameFailureText: string;
    procedure set_UserNameFailureText(value: string);
    function get_UserNameInstructionText: string;
    procedure set_UserNameInstructionText(value: string);
    function get_UserNameLabelText: string;
    procedure set_UserNameLabelText(value: string);
    function get_UserNameRequiredErrorMessage: string;
    procedure set_UserNameRequiredErrorMessage(value: string);
    function get_UserNameTemplate: DNITemplate;
    procedure set_UserNameTemplate(value: DNITemplate);
    function get_UserNameTemplateContainer: DNControl;
    function get_UserNameTitleText: string;
    procedure set_UserNameTitleText(value: string);
    function get_ValidatorTextStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_AnswerLookupError(value: DDN.mscorlib.DNEventHandler);
    procedure remove_AnswerLookupError(value: DDN.mscorlib.DNEventHandler);
    procedure add_VerifyingAnswer(value: DNLoginCancelEventHandler);
    procedure remove_VerifyingAnswer(value: DNLoginCancelEventHandler);
    procedure add_SendingMail(value: DNMailMessageEventHandler);
    procedure remove_SendingMail(value: DNMailMessageEventHandler);
    procedure add_SendMailError(value: DNSendMailErrorEventHandler);
    procedure remove_SendMailError(value: DNSendMailErrorEventHandler);
    procedure add_VerifyingUser(value: DNLoginCancelEventHandler);
    procedure remove_VerifyingUser(value: DNLoginCancelEventHandler);
    procedure add_UserLookupError(value: DDN.mscorlib.DNEventHandler);
    procedure remove_UserLookupError(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Answer: string read get_Answer;
    property AnswerLabelText: string read get_AnswerLabelText write set_AnswerLabelText;
    property AnswerRequiredErrorMessage: string read get_AnswerRequiredErrorMessage write set_AnswerRequiredErrorMessage;
    property BorderPadding: Int32 read get_BorderPadding write set_BorderPadding;
    property SubmitButtonStyle: DNStyle read get_SubmitButtonStyle;
    property SubmitButtonType: DNButtonType read get_SubmitButtonType write set_SubmitButtonType;
    property FailureTextStyle: DNTableItemStyle read get_FailureTextStyle;
    property GeneralFailureText: string read get_GeneralFailureText write set_GeneralFailureText;
    property HelpPageText: string read get_HelpPageText write set_HelpPageText;
    property HelpPageIconUrl: string read get_HelpPageIconUrl write set_HelpPageIconUrl;
    property HelpPageUrl: string read get_HelpPageUrl write set_HelpPageUrl;
    property HyperLinkStyle: DNTableItemStyle read get_HyperLinkStyle;
    property InstructionTextStyle: DNTableItemStyle read get_InstructionTextStyle;
    property LabelStyle: DNTableItemStyle read get_LabelStyle;
    property MailDefinition: DNMailDefinition read get_MailDefinition;
    property MembershipProvider: string read get_MembershipProvider write set_MembershipProvider;
    property Question: string read get_Question;
    property QuestionFailureText: string read get_QuestionFailureText write set_QuestionFailureText;
    property QuestionInstructionText: string read get_QuestionInstructionText write set_QuestionInstructionText;
    property QuestionLabelText: string read get_QuestionLabelText write set_QuestionLabelText;
    property QuestionTitleText: string read get_QuestionTitleText write set_QuestionTitleText;
    property QuestionTemplate: DNITemplate read get_QuestionTemplate write set_QuestionTemplate;
    property QuestionTemplateContainer: DNControl read get_QuestionTemplateContainer;
    property SubmitButtonImageUrl: string read get_SubmitButtonImageUrl write set_SubmitButtonImageUrl;
    property SubmitButtonText: string read get_SubmitButtonText write set_SubmitButtonText;
    property SuccessPageUrl: string read get_SuccessPageUrl write set_SuccessPageUrl;
    property SuccessTemplate: DNITemplate read get_SuccessTemplate write set_SuccessTemplate;
    property SuccessTemplateContainer: DNControl read get_SuccessTemplateContainer;
    property SuccessText: string read get_SuccessText write set_SuccessText;
    property SuccessTextStyle: DNTableItemStyle read get_SuccessTextStyle;
    property RenderOuterTable: Boolean read get_RenderOuterTable write set_RenderOuterTable;
    property TextBoxStyle: DNStyle read get_TextBoxStyle;
    property TextLayout: DNLoginTextLayout read get_TextLayout write set_TextLayout;
    property TitleTextStyle: DNTableItemStyle read get_TitleTextStyle;
    property UserName: string read get_UserName write set_UserName;
    property UserNameFailureText: string read get_UserNameFailureText write set_UserNameFailureText;
    property UserNameInstructionText: string read get_UserNameInstructionText write set_UserNameInstructionText;
    property UserNameLabelText: string read get_UserNameLabelText write set_UserNameLabelText;
    property UserNameRequiredErrorMessage: string read get_UserNameRequiredErrorMessage write set_UserNameRequiredErrorMessage;
    property UserNameTemplate: DNITemplate read get_UserNameTemplate write set_UserNameTemplate;
    property UserNameTemplateContainer: DNControl read get_UserNameTemplateContainer;
    property UserNameTitleText: string read get_UserNameTitleText write set_UserNameTitleText;
    property ValidatorTextStyle: DNStyle read get_ValidatorTextStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPasswordRecovery = class(TDNGenericImport<DNPasswordRecoveryClass, DNPasswordRecovery>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapPathClass = interface(DNCompositeControlClass)
  ['{0BFAED19-7209-5B92-B197-2552E61F0C1C}']
  { constructors } 

    {class} function init: DNSiteMapPath;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapPath')]
  DNSiteMapPath = interface(DNCompositeControl)
  ['{70DD1761-BDE4-3FB5-A601-1A66DE1EA8C5}']
  { getters & setters } 

    function get_CurrentNodeStyle: DNStyle;
    function get_CurrentNodeTemplate: DNITemplate;
    procedure set_CurrentNodeTemplate(value: DNITemplate);
    function get_NodeStyle: DNStyle;
    function get_NodeTemplate: DNITemplate;
    procedure set_NodeTemplate(value: DNITemplate);
    function get_ParentLevelsDisplayed: Int32;
    procedure set_ParentLevelsDisplayed(value: Int32);
    function get_PathDirection: DNPathDirection;
    procedure set_PathDirection(value: DNPathDirection);
    function get_PathSeparator: string;
    procedure set_PathSeparator(value: string);
    function get_PathSeparatorStyle: DNStyle;
    function get_PathSeparatorTemplate: DNITemplate;
    procedure set_PathSeparatorTemplate(value: DNITemplate);
    function get_Provider: DNSiteMapProvider;
    procedure set_Provider(value: DNSiteMapProvider);
    function get_RenderCurrentNodeAsLink: Boolean;
    procedure set_RenderCurrentNodeAsLink(value: Boolean);
    function get_RootNodeStyle: DNStyle;
    function get_RootNodeTemplate: DNITemplate;
    procedure set_RootNodeTemplate(value: DNITemplate);
    function get_SkipLinkText: string;
    procedure set_SkipLinkText(value: string);
    function get_ShowToolTips: Boolean;
    procedure set_ShowToolTips(value: Boolean);
    function get_SiteMapProvider: string;
    procedure set_SiteMapProvider(value: string);
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ItemCreated(value: DNSiteMapNodeItemEventHandler);
    procedure remove_ItemCreated(value: DNSiteMapNodeItemEventHandler);
    procedure add_ItemDataBound(value: DNSiteMapNodeItemEventHandler);
    procedure remove_ItemDataBound(value: DNSiteMapNodeItemEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CurrentNodeStyle: DNStyle read get_CurrentNodeStyle;
    property CurrentNodeTemplate: DNITemplate read get_CurrentNodeTemplate write set_CurrentNodeTemplate;
    property NodeStyle: DNStyle read get_NodeStyle;
    property NodeTemplate: DNITemplate read get_NodeTemplate write set_NodeTemplate;
    property ParentLevelsDisplayed: Int32 read get_ParentLevelsDisplayed write set_ParentLevelsDisplayed;
    property PathDirection: DNPathDirection read get_PathDirection write set_PathDirection;
    property PathSeparator: string read get_PathSeparator write set_PathSeparator;
    property PathSeparatorStyle: DNStyle read get_PathSeparatorStyle;
    property PathSeparatorTemplate: DNITemplate read get_PathSeparatorTemplate write set_PathSeparatorTemplate;
    property Provider: DNSiteMapProvider read get_Provider write set_Provider;
    property RenderCurrentNodeAsLink: Boolean read get_RenderCurrentNodeAsLink write set_RenderCurrentNodeAsLink;
    property RootNodeStyle: DNStyle read get_RootNodeStyle;
    property RootNodeTemplate: DNITemplate read get_RootNodeTemplate write set_RootNodeTemplate;
    property SkipLinkText: string read get_SkipLinkText write set_SkipLinkText;
    property ShowToolTips: Boolean read get_ShowToolTips write set_ShowToolTips;
    property SiteMapProvider: string read get_SiteMapProvider write set_SiteMapProvider;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNSiteMapPath = class(TDNGenericImport<DNSiteMapPathClass, DNSiteMapPath>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebZoneClass = interface(DNCompositeControlClass)
  ['{472E813B-3129-51A2-B69C-98E71546130C}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebZone')]
  DNWebZone = interface(DNCompositeControl)
  ['{E4392BEB-9108-327D-AD4E-85B902D18266}']
  { getters & setters } 

    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebZone = class(TDNGenericImport<DNWebZoneClass, DNWebZone>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNToolZoneClass = interface(DNWebZoneClass)
  ['{3B42141A-CA3C-58C9-ABFD-80141A2D3095}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ToolZone')]
  DNToolZone = interface(DNWebZone)
  ['{076E6DA0-ED84-34F4-84EC-89D94E9277C7}']
  { getters & setters } 

    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNToolZone = class(TDNGenericImport<DNToolZoneClass, DNToolZone>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNCatalogZoneBaseClass = interface(DNToolZoneClass)
  ['{B2944B9A-8F57-586A-92F2-2FE13FB28908}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.CatalogZoneBase')]
  DNCatalogZoneBase = interface(DNToolZone)
  ['{BD761E11-DE4E-385D-B85C-C9E7A166949E}']
  { getters & setters } 

    function get_AddVerb: DNWebPartVerb;
    function get_CatalogPartChrome: DNCatalogPartChrome;
    function get_CatalogParts: DNCatalogPartCollection;
    function get_CloseVerb: DNWebPartVerb;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_PartLinkStyle: DNStyle;
    function get_SelectedCatalogPartID: string;
    procedure set_SelectedCatalogPartID(value: string);
    function get_SelectTargetZoneText: string;
    procedure set_SelectTargetZoneText(value: string);
    function get_SelectedPartLinkStyle: DNStyle;
    function get_ShowCatalogIcons: Boolean;
    procedure set_ShowCatalogIcons(value: Boolean);
    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AddVerb: DNWebPartVerb read get_AddVerb;
    property CatalogPartChrome: DNCatalogPartChrome read get_CatalogPartChrome;
    property CatalogParts: DNCatalogPartCollection read get_CatalogParts;
    property CloseVerb: DNWebPartVerb read get_CloseVerb;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property PartLinkStyle: DNStyle read get_PartLinkStyle;
    property SelectedCatalogPartID: string read get_SelectedCatalogPartID write set_SelectedCatalogPartID;
    property SelectTargetZoneText: string read get_SelectTargetZoneText write set_SelectTargetZoneText;
    property SelectedPartLinkStyle: DNStyle read get_SelectedPartLinkStyle;
    property ShowCatalogIcons: Boolean read get_ShowCatalogIcons write set_ShowCatalogIcons;
    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCatalogZoneBase = class(TDNGenericImport<DNCatalogZoneBaseClass, DNCatalogZoneBase>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNCatalogZoneClass = interface(DNCatalogZoneBaseClass)
  ['{E971FF91-8EA2-5AD6-AADB-7A2B49796EC8}']
  { constructors } 

    {class} function init: DNCatalogZone;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.CatalogZone')]
  DNCatalogZone = interface(DNCatalogZoneBase)
  ['{BCAF71FE-A93C-33EE-A14C-D91C4B761C17}']
  { getters & setters } 

    function get_ZoneTemplate: DNITemplate;
    procedure set_ZoneTemplate(value: DNITemplate);
    function get_AddVerb: DNWebPartVerb;
    function get_CatalogPartChrome: DNCatalogPartChrome;
    function get_CatalogParts: DNCatalogPartCollection;
    function get_CloseVerb: DNWebPartVerb;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_PartLinkStyle: DNStyle;
    function get_SelectedCatalogPartID: string;
    procedure set_SelectedCatalogPartID(value: string);
    function get_SelectTargetZoneText: string;
    procedure set_SelectTargetZoneText(value: string);
    function get_SelectedPartLinkStyle: DNStyle;
    function get_ShowCatalogIcons: Boolean;
    procedure set_ShowCatalogIcons(value: Boolean);
    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ZoneTemplate: DNITemplate read get_ZoneTemplate write set_ZoneTemplate;
    property AddVerb: DNWebPartVerb read get_AddVerb;
    property CatalogPartChrome: DNCatalogPartChrome read get_CatalogPartChrome;
    property CatalogParts: DNCatalogPartCollection read get_CatalogParts;
    property CloseVerb: DNWebPartVerb read get_CloseVerb;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property PartLinkStyle: DNStyle read get_PartLinkStyle;
    property SelectedCatalogPartID: string read get_SelectedCatalogPartID write set_SelectedCatalogPartID;
    property SelectTargetZoneText: string read get_SelectTargetZoneText write set_SelectTargetZoneText;
    property SelectedPartLinkStyle: DNStyle read get_SelectedPartLinkStyle;
    property ShowCatalogIcons: Boolean read get_ShowCatalogIcons write set_ShowCatalogIcons;
    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCatalogZone = class(TDNGenericImport<DNCatalogZoneClass, DNCatalogZone>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConnectionsZoneClass = interface(DNToolZoneClass)
  ['{FD612659-8E1F-544E-BFC6-BD153CE7F1E4}']
  { constructors } 

    {class} function init: DNConnectionsZone;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConnectionsZone')]
  DNConnectionsZone = interface(DNToolZone)
  ['{9CA457B7-BAC9-3856-BC00-3D33AF5C6393}']
  { getters & setters } 

    function get_CancelVerb: DNWebPartVerb;
    function get_CloseVerb: DNWebPartVerb;
    function get_ConfigureConnectionTitle: string;
    procedure set_ConfigureConnectionTitle(value: string);
    function get_ConfigureVerb: DNWebPartVerb;
    function get_ConnectToConsumerInstructionText: string;
    procedure set_ConnectToConsumerInstructionText(value: string);
    function get_ConnectToConsumerText: string;
    procedure set_ConnectToConsumerText(value: string);
    function get_ConnectToConsumerTitle: string;
    procedure set_ConnectToConsumerTitle(value: string);
    function get_ConnectToProviderInstructionText: string;
    procedure set_ConnectToProviderInstructionText(value: string);
    function get_ConnectToProviderText: string;
    procedure set_ConnectToProviderText(value: string);
    function get_ConnectToProviderTitle: string;
    procedure set_ConnectToProviderTitle(value: string);
    function get_ConnectVerb: DNWebPartVerb;
    function get_ConsumersTitle: string;
    procedure set_ConsumersTitle(value: string);
    function get_ConsumersInstructionText: string;
    procedure set_ConsumersInstructionText(value: string);
    function get_DisconnectVerb: DNWebPartVerb;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_ExistingConnectionErrorMessage: string;
    procedure set_ExistingConnectionErrorMessage(value: string);
    function get_GetText: string;
    procedure set_GetText(value: string);
    function get_GetFromText: string;
    procedure set_GetFromText(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_InstructionTitle: string;
    procedure set_InstructionTitle(value: string);
    function get_NewConnectionErrorMessage: string;
    procedure set_NewConnectionErrorMessage(value: string);
    function get_NoExistingConnectionInstructionText: string;
    procedure set_NoExistingConnectionInstructionText(value: string);
    function get_NoExistingConnectionTitle: string;
    procedure set_NoExistingConnectionTitle(value: string);
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_ProvidersTitle: string;
    procedure set_ProvidersTitle(value: string);
    function get_ProvidersInstructionText: string;
    procedure set_ProvidersInstructionText(value: string);
    function get_SendText: string;
    procedure set_SendText(value: string);
    function get_SendToText: string;
    procedure set_SendToText(value: string);
    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CancelVerb: DNWebPartVerb read get_CancelVerb;
    property CloseVerb: DNWebPartVerb read get_CloseVerb;
    property ConfigureConnectionTitle: string read get_ConfigureConnectionTitle write set_ConfigureConnectionTitle;
    property ConfigureVerb: DNWebPartVerb read get_ConfigureVerb;
    property ConnectToConsumerInstructionText: string read get_ConnectToConsumerInstructionText write set_ConnectToConsumerInstructionText;
    property ConnectToConsumerText: string read get_ConnectToConsumerText write set_ConnectToConsumerText;
    property ConnectToConsumerTitle: string read get_ConnectToConsumerTitle write set_ConnectToConsumerTitle;
    property ConnectToProviderInstructionText: string read get_ConnectToProviderInstructionText write set_ConnectToProviderInstructionText;
    property ConnectToProviderText: string read get_ConnectToProviderText write set_ConnectToProviderText;
    property ConnectToProviderTitle: string read get_ConnectToProviderTitle write set_ConnectToProviderTitle;
    property ConnectVerb: DNWebPartVerb read get_ConnectVerb;
    property ConsumersTitle: string read get_ConsumersTitle write set_ConsumersTitle;
    property ConsumersInstructionText: string read get_ConsumersInstructionText write set_ConsumersInstructionText;
    property DisconnectVerb: DNWebPartVerb read get_DisconnectVerb;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property ExistingConnectionErrorMessage: string read get_ExistingConnectionErrorMessage write set_ExistingConnectionErrorMessage;
    property GetText: string read get_GetText write set_GetText;
    property GetFromText: string read get_GetFromText write set_GetFromText;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property InstructionTitle: string read get_InstructionTitle write set_InstructionTitle;
    property NewConnectionErrorMessage: string read get_NewConnectionErrorMessage write set_NewConnectionErrorMessage;
    property NoExistingConnectionInstructionText: string read get_NoExistingConnectionInstructionText write set_NoExistingConnectionInstructionText;
    property NoExistingConnectionTitle: string read get_NoExistingConnectionTitle write set_NoExistingConnectionTitle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property ProvidersTitle: string read get_ProvidersTitle write set_ProvidersTitle;
    property ProvidersInstructionText: string read get_ProvidersInstructionText write set_ProvidersInstructionText;
    property SendText: string read get_SendText write set_SendText;
    property SendToText: string read get_SendToText write set_SendToText;
    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNConnectionsZone = class(TDNGenericImport<DNConnectionsZoneClass, DNConnectionsZone>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNEditorZoneBaseClass = interface(DNToolZoneClass)
  ['{41068B3A-9001-5C84-AC75-26BB7ADFEA53}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.EditorZoneBase')]
  DNEditorZoneBase = interface(DNToolZone)
  ['{72237205-8FD6-3FA5-AB72-6287C2CE9D58}']
  { getters & setters } 

    function get_ApplyVerb: DNWebPartVerb;
    function get_CancelVerb: DNWebPartVerb;
    function get_EditorPartChrome: DNEditorPartChrome;
    function get_EditorParts: DNEditorPartCollection;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_ErrorText: string;
    procedure set_ErrorText(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_OKVerb: DNWebPartVerb;
    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ApplyVerb: DNWebPartVerb read get_ApplyVerb;
    property CancelVerb: DNWebPartVerb read get_CancelVerb;
    property EditorPartChrome: DNEditorPartChrome read get_EditorPartChrome;
    property EditorParts: DNEditorPartCollection read get_EditorParts;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property ErrorText: string read get_ErrorText write set_ErrorText;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property OKVerb: DNWebPartVerb read get_OKVerb;
    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNEditorZoneBase = class(TDNGenericImport<DNEditorZoneBaseClass, DNEditorZoneBase>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNEditorZoneClass = interface(DNEditorZoneBaseClass)
  ['{0160448F-A452-5F8B-98CA-00CF54424C8D}']
  { constructors } 

    {class} function init: DNEditorZone;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.EditorZone')]
  DNEditorZone = interface(DNEditorZoneBase)
  ['{6ED7742F-6B00-35B7-9935-801225791E0A}']
  { getters & setters } 

    function get_ZoneTemplate: DNITemplate;
    procedure set_ZoneTemplate(value: DNITemplate);
    function get_ApplyVerb: DNWebPartVerb;
    function get_CancelVerb: DNWebPartVerb;
    function get_EditorPartChrome: DNEditorPartChrome;
    function get_EditorParts: DNEditorPartCollection;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_ErrorText: string;
    procedure set_ErrorText(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_OKVerb: DNWebPartVerb;
    function get_AssociatedDisplayModes: DNWebPartDisplayModeCollection;
    function get_EditUIStyle: DNStyle;
    function get_HeaderCloseVerb: DNWebPartVerb;
    function get_HeaderVerbStyle: DNStyle;
    function get_InstructionTextStyle: DNStyle;
    function get_LabelStyle: DNStyle;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ZoneTemplate: DNITemplate read get_ZoneTemplate write set_ZoneTemplate;
    property ApplyVerb: DNWebPartVerb read get_ApplyVerb;
    property CancelVerb: DNWebPartVerb read get_CancelVerb;
    property EditorPartChrome: DNEditorPartChrome read get_EditorPartChrome;
    property EditorParts: DNEditorPartCollection read get_EditorParts;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property ErrorText: string read get_ErrorText write set_ErrorText;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property OKVerb: DNWebPartVerb read get_OKVerb;
    property AssociatedDisplayModes: DNWebPartDisplayModeCollection read get_AssociatedDisplayModes;
    property EditUIStyle: DNStyle read get_EditUIStyle;
    property HeaderCloseVerb: DNWebPartVerb read get_HeaderCloseVerb;
    property HeaderVerbStyle: DNStyle read get_HeaderVerbStyle;
    property InstructionTextStyle: DNStyle read get_InstructionTextStyle;
    property LabelStyle: DNStyle read get_LabelStyle;
    property Visible: Boolean read get_Visible write set_Visible;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNEditorZone = class(TDNGenericImport<DNEditorZoneClass, DNEditorZone>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartZoneBaseClass = interface(DNWebZoneClass)
  ['{185CF731-A0F5-50CE-86A5-1A5C758B3CFD}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartZoneBase')]
  DNWebPartZoneBase = interface(DNWebZone)
  ['{3F6A44E9-FD91-3232-B51F-5628C15CEF2F}']
  { getters & setters } 

    function get_AllowLayoutChange: Boolean;
    procedure set_AllowLayoutChange(value: Boolean);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_CloseVerb: DNWebPartVerb;
    function get_ConnectVerb: DNWebPartVerb;
    function get_DeleteVerb: DNWebPartVerb;
    function get_DisplayTitle: string;
    function get_DragHighlightColor: DDN.System.Drawing.DNColor;
    procedure set_DragHighlightColor(value: DDN.System.Drawing.DNColor);
    function get_EditVerb: DNWebPartVerb;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_ExportVerb: DNWebPartVerb;
    function get_HelpVerb: DNWebPartVerb;
    function get_MenuCheckImageStyle: DNStyle;
    function get_MenuCheckImageUrl: string;
    procedure set_MenuCheckImageUrl(value: string);
    function get_MenuLabelHoverStyle: DNStyle;
    function get_MenuLabelStyle: DNStyle;
    function get_MenuLabelText: string;
    procedure set_MenuLabelText(value: string);
    function get_MenuPopupImageUrl: string;
    procedure set_MenuPopupImageUrl(value: string);
    function get_MenuPopupStyle: DNWebPartMenuStyle;
    function get_MenuVerbHoverStyle: DNStyle;
    function get_MenuVerbStyle: DNStyle;
    function get_MinimizeVerb: DNWebPartVerb;
    function get_LayoutOrientation: DNOrientation;
    procedure set_LayoutOrientation(value: DNOrientation);
    function get_RestoreVerb: DNWebPartVerb;
    function get_SelectedPartChromeStyle: DNStyle;
    function get_ShowTitleIcons: Boolean;
    procedure set_ShowTitleIcons(value: Boolean);
    function get_TitleBarVerbButtonType: DNButtonType;
    procedure set_TitleBarVerbButtonType(value: DNButtonType);
    function get_TitleBarVerbStyle: DNStyle;
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_WebPartChrome: DNWebPartChrome;
    function get_WebParts: DNWebPartCollection;
    function get_WebPartVerbRenderMode: DNWebPartVerbRenderMode;
    procedure set_WebPartVerbRenderMode(value: DNWebPartVerbRenderMode);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CreateVerbs(value: DNWebPartVerbsEventHandler);
    procedure remove_CreateVerbs(value: DNWebPartVerbsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowLayoutChange: Boolean read get_AllowLayoutChange write set_AllowLayoutChange;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property CloseVerb: DNWebPartVerb read get_CloseVerb;
    property ConnectVerb: DNWebPartVerb read get_ConnectVerb;
    property DeleteVerb: DNWebPartVerb read get_DeleteVerb;
    property DisplayTitle: string read get_DisplayTitle;
    property DragHighlightColor: DDN.System.Drawing.DNColor read get_DragHighlightColor write set_DragHighlightColor;
    property EditVerb: DNWebPartVerb read get_EditVerb;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property ExportVerb: DNWebPartVerb read get_ExportVerb;
    property HelpVerb: DNWebPartVerb read get_HelpVerb;
    property MenuCheckImageStyle: DNStyle read get_MenuCheckImageStyle;
    property MenuCheckImageUrl: string read get_MenuCheckImageUrl write set_MenuCheckImageUrl;
    property MenuLabelHoverStyle: DNStyle read get_MenuLabelHoverStyle;
    property MenuLabelStyle: DNStyle read get_MenuLabelStyle;
    property MenuLabelText: string read get_MenuLabelText write set_MenuLabelText;
    property MenuPopupImageUrl: string read get_MenuPopupImageUrl write set_MenuPopupImageUrl;
    property MenuPopupStyle: DNWebPartMenuStyle read get_MenuPopupStyle;
    property MenuVerbHoverStyle: DNStyle read get_MenuVerbHoverStyle;
    property MenuVerbStyle: DNStyle read get_MenuVerbStyle;
    property MinimizeVerb: DNWebPartVerb read get_MinimizeVerb;
    property LayoutOrientation: DNOrientation read get_LayoutOrientation write set_LayoutOrientation;
    property RestoreVerb: DNWebPartVerb read get_RestoreVerb;
    property SelectedPartChromeStyle: DNStyle read get_SelectedPartChromeStyle;
    property ShowTitleIcons: Boolean read get_ShowTitleIcons write set_ShowTitleIcons;
    property TitleBarVerbButtonType: DNButtonType read get_TitleBarVerbButtonType write set_TitleBarVerbButtonType;
    property TitleBarVerbStyle: DNStyle read get_TitleBarVerbStyle;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property WebPartChrome: DNWebPartChrome read get_WebPartChrome;
    property WebParts: DNWebPartCollection read get_WebParts;
    property WebPartVerbRenderMode: DNWebPartVerbRenderMode read get_WebPartVerbRenderMode write set_WebPartVerbRenderMode;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebPartZoneBase = class(TDNGenericImport<DNWebPartZoneBaseClass, DNWebPartZoneBase>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartZoneClass = interface(DNWebPartZoneBaseClass)
  ['{824076D3-87E1-58F6-AF2C-FDBB8613522E}']
  { constructors } 

    {class} function init: DNWebPartZone;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartZone')]
  DNWebPartZone = interface(DNWebPartZoneBase)
  ['{E4CA7B0D-CB4D-3CBE-B705-ACB2880A5E6A}']
  { getters & setters } 

    function get_ZoneTemplate: DNITemplate;
    procedure set_ZoneTemplate(value: DNITemplate);
    function get_AllowLayoutChange: Boolean;
    procedure set_AllowLayoutChange(value: Boolean);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_CloseVerb: DNWebPartVerb;
    function get_ConnectVerb: DNWebPartVerb;
    function get_DeleteVerb: DNWebPartVerb;
    function get_DisplayTitle: string;
    function get_DragHighlightColor: DDN.System.Drawing.DNColor;
    procedure set_DragHighlightColor(value: DDN.System.Drawing.DNColor);
    function get_EditVerb: DNWebPartVerb;
    function get_EmptyZoneText: string;
    procedure set_EmptyZoneText(value: string);
    function get_ExportVerb: DNWebPartVerb;
    function get_HelpVerb: DNWebPartVerb;
    function get_MenuCheckImageStyle: DNStyle;
    function get_MenuCheckImageUrl: string;
    procedure set_MenuCheckImageUrl(value: string);
    function get_MenuLabelHoverStyle: DNStyle;
    function get_MenuLabelStyle: DNStyle;
    function get_MenuLabelText: string;
    procedure set_MenuLabelText(value: string);
    function get_MenuPopupImageUrl: string;
    procedure set_MenuPopupImageUrl(value: string);
    function get_MenuPopupStyle: DNWebPartMenuStyle;
    function get_MenuVerbHoverStyle: DNStyle;
    function get_MenuVerbStyle: DNStyle;
    function get_MinimizeVerb: DNWebPartVerb;
    function get_LayoutOrientation: DNOrientation;
    procedure set_LayoutOrientation(value: DNOrientation);
    function get_RestoreVerb: DNWebPartVerb;
    function get_SelectedPartChromeStyle: DNStyle;
    function get_ShowTitleIcons: Boolean;
    procedure set_ShowTitleIcons(value: Boolean);
    function get_TitleBarVerbButtonType: DNButtonType;
    procedure set_TitleBarVerbButtonType(value: DNButtonType);
    function get_TitleBarVerbStyle: DNStyle;
    function get_VerbButtonType: DNButtonType;
    procedure set_VerbButtonType(value: DNButtonType);
    function get_WebPartChrome: DNWebPartChrome;
    function get_WebParts: DNWebPartCollection;
    function get_WebPartVerbRenderMode: DNWebPartVerbRenderMode;
    procedure set_WebPartVerbRenderMode(value: DNWebPartVerbRenderMode);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_EmptyZoneTextStyle: DNStyle;
    function get_ErrorStyle: DNStyle;
    function get_FooterStyle: DNTitleStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HeaderStyle: DNTitleStyle;
    function get_PartChromePadding: DNUnit;
    procedure set_PartChromePadding(value: DNUnit);
    function get_PartChromeStyle: DNStyle;
    function get_PartChromeType: DNPartChromeType;
    procedure set_PartChromeType(value: DNPartChromeType);
    function get_PartStyle: DNTableStyle;
    function get_PartTitleStyle: DNTitleStyle;
    function get_Padding: Int32;
    procedure set_Padding(value: Int32);
    function get_VerbStyle: DNStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_CreateVerbs(value: DNWebPartVerbsEventHandler);
    procedure remove_CreateVerbs(value: DNWebPartVerbsEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetEffectiveChromeType(part: DNPart): DNPartChromeType;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ZoneTemplate: DNITemplate read get_ZoneTemplate write set_ZoneTemplate;
    property AllowLayoutChange: Boolean read get_AllowLayoutChange write set_AllowLayoutChange;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property CloseVerb: DNWebPartVerb read get_CloseVerb;
    property ConnectVerb: DNWebPartVerb read get_ConnectVerb;
    property DeleteVerb: DNWebPartVerb read get_DeleteVerb;
    property DisplayTitle: string read get_DisplayTitle;
    property DragHighlightColor: DDN.System.Drawing.DNColor read get_DragHighlightColor write set_DragHighlightColor;
    property EditVerb: DNWebPartVerb read get_EditVerb;
    property EmptyZoneText: string read get_EmptyZoneText write set_EmptyZoneText;
    property ExportVerb: DNWebPartVerb read get_ExportVerb;
    property HelpVerb: DNWebPartVerb read get_HelpVerb;
    property MenuCheckImageStyle: DNStyle read get_MenuCheckImageStyle;
    property MenuCheckImageUrl: string read get_MenuCheckImageUrl write set_MenuCheckImageUrl;
    property MenuLabelHoverStyle: DNStyle read get_MenuLabelHoverStyle;
    property MenuLabelStyle: DNStyle read get_MenuLabelStyle;
    property MenuLabelText: string read get_MenuLabelText write set_MenuLabelText;
    property MenuPopupImageUrl: string read get_MenuPopupImageUrl write set_MenuPopupImageUrl;
    property MenuPopupStyle: DNWebPartMenuStyle read get_MenuPopupStyle;
    property MenuVerbHoverStyle: DNStyle read get_MenuVerbHoverStyle;
    property MenuVerbStyle: DNStyle read get_MenuVerbStyle;
    property MinimizeVerb: DNWebPartVerb read get_MinimizeVerb;
    property LayoutOrientation: DNOrientation read get_LayoutOrientation write set_LayoutOrientation;
    property RestoreVerb: DNWebPartVerb read get_RestoreVerb;
    property SelectedPartChromeStyle: DNStyle read get_SelectedPartChromeStyle;
    property ShowTitleIcons: Boolean read get_ShowTitleIcons write set_ShowTitleIcons;
    property TitleBarVerbButtonType: DNButtonType read get_TitleBarVerbButtonType write set_TitleBarVerbButtonType;
    property TitleBarVerbStyle: DNStyle read get_TitleBarVerbStyle;
    property VerbButtonType: DNButtonType read get_VerbButtonType write set_VerbButtonType;
    property WebPartChrome: DNWebPartChrome read get_WebPartChrome;
    property WebParts: DNWebPartCollection read get_WebParts;
    property WebPartVerbRenderMode: DNWebPartVerbRenderMode read get_WebPartVerbRenderMode write set_WebPartVerbRenderMode;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property EmptyZoneTextStyle: DNStyle read get_EmptyZoneTextStyle;
    property ErrorStyle: DNStyle read get_ErrorStyle;
    property FooterStyle: DNTitleStyle read get_FooterStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HeaderStyle: DNTitleStyle read get_HeaderStyle;
    property PartChromePadding: DNUnit read get_PartChromePadding write set_PartChromePadding;
    property PartChromeStyle: DNStyle read get_PartChromeStyle;
    property PartChromeType: DNPartChromeType read get_PartChromeType write set_PartChromeType;
    property PartStyle: DNTableStyle read get_PartStyle;
    property PartTitleStyle: DNTitleStyle read get_PartTitleStyle;
    property Padding: Int32 read get_Padding write set_Padding;
    property VerbStyle: DNStyle read get_VerbStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebPartZone = class(TDNGenericImport<DNWebPartZoneClass, DNWebPartZone>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardClass = interface(DNCompositeControlClass)
  ['{EF18989F-ED78-50DE-9986-569B3B96FCB2}']
  { constructors } 

    {class} function init: DNWizard;

  { static fields getter & setter } 

   function __fakeFieldGet_HeaderPlaceholderId: string;
   function __fakeFieldGet_NavigationPlaceholderId: string;
   function __fakeFieldGet_SideBarPlaceholderId: string;
   function __fakeFieldGet_WizardStepPlaceholderId: string;
   function __fakeFieldGet_CancelCommandName: string;
   function __fakeFieldGet_MoveNextCommandName: string;
   function __fakeFieldGet_MovePreviousCommandName: string;
   function __fakeFieldGet_MoveToCommandName: string;
   function __fakeFieldGet_MoveCompleteCommandName: string;

  { static fields } 

    {class} property HeaderPlaceholderId: string read __fakeFieldGet_HeaderPlaceholderId;
    {class} property NavigationPlaceholderId: string read __fakeFieldGet_NavigationPlaceholderId;
    {class} property SideBarPlaceholderId: string read __fakeFieldGet_SideBarPlaceholderId;
    {class} property WizardStepPlaceholderId: string read __fakeFieldGet_WizardStepPlaceholderId;
    {class} property CancelCommandName: string read __fakeFieldGet_CancelCommandName;
    {class} property MoveNextCommandName: string read __fakeFieldGet_MoveNextCommandName;
    {class} property MovePreviousCommandName: string read __fakeFieldGet_MovePreviousCommandName;
    {class} property MoveToCommandName: string read __fakeFieldGet_MoveToCommandName;
    {class} property MoveCompleteCommandName: string read __fakeFieldGet_MoveCompleteCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.Wizard')]
  DNWizard = interface(DNCompositeControl)
  ['{B3304E97-B84B-300F-BD0B-DBEACDD03915}']
  { getters & setters } 

    function get_ActiveStep: DNWizardStepBase;
    function get_ActiveStepIndex: Int32;
    procedure set_ActiveStepIndex(value: Int32);
    function get_CancelButtonImageUrl: string;
    procedure set_CancelButtonImageUrl(value: string);
    function get_CancelButtonStyle: DNStyle;
    function get_CancelButtonText: string;
    procedure set_CancelButtonText(value: string);
    function get_CancelButtonType: DNButtonType;
    procedure set_CancelButtonType(value: DNButtonType);
    function get_CancelDestinationPageUrl: string;
    procedure set_CancelDestinationPageUrl(value: string);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_DisplayCancelButton: Boolean;
    procedure set_DisplayCancelButton(value: Boolean);
    function get_DisplaySideBar: Boolean;
    procedure set_DisplaySideBar(value: Boolean);
    function get_FinishCompleteButtonImageUrl: string;
    procedure set_FinishCompleteButtonImageUrl(value: string);
    function get_FinishCompleteButtonStyle: DNStyle;
    function get_FinishCompleteButtonText: string;
    procedure set_FinishCompleteButtonText(value: string);
    function get_FinishCompleteButtonType: DNButtonType;
    procedure set_FinishCompleteButtonType(value: DNButtonType);
    function get_FinishDestinationPageUrl: string;
    procedure set_FinishDestinationPageUrl(value: string);
    function get_FinishPreviousButtonImageUrl: string;
    procedure set_FinishPreviousButtonImageUrl(value: string);
    function get_FinishPreviousButtonStyle: DNStyle;
    function get_FinishPreviousButtonText: string;
    procedure set_FinishPreviousButtonText(value: string);
    function get_FinishPreviousButtonType: DNButtonType;
    procedure set_FinishPreviousButtonType(value: DNButtonType);
    function get_FinishNavigationTemplate: DNITemplate;
    procedure set_FinishNavigationTemplate(value: DNITemplate);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_LayoutTemplate: DNITemplate;
    procedure set_LayoutTemplate(value: DNITemplate);
    function get_NavigationButtonStyle: DNStyle;
    function get_NavigationStyle: DNTableItemStyle;
    function get_StartNextButtonImageUrl: string;
    procedure set_StartNextButtonImageUrl(value: string);
    function get_StartNextButtonStyle: DNStyle;
    function get_StartNextButtonText: string;
    procedure set_StartNextButtonText(value: string);
    function get_StartNextButtonType: DNButtonType;
    procedure set_StartNextButtonType(value: DNButtonType);
    function get_StepNextButtonImageUrl: string;
    procedure set_StepNextButtonImageUrl(value: string);
    function get_StepNextButtonStyle: DNStyle;
    function get_StepNextButtonText: string;
    procedure set_StepNextButtonText(value: string);
    function get_StepNextButtonType: DNButtonType;
    procedure set_StepNextButtonType(value: DNButtonType);
    function get_StepPreviousButtonImageUrl: string;
    procedure set_StepPreviousButtonImageUrl(value: string);
    function get_StepPreviousButtonStyle: DNStyle;
    function get_StepPreviousButtonText: string;
    procedure set_StepPreviousButtonText(value: string);
    function get_StepPreviousButtonType: DNButtonType;
    procedure set_StepPreviousButtonType(value: DNButtonType);
    function get_SideBarButtonStyle: DNStyle;
    function get_SideBarStyle: DNTableItemStyle;
    function get_SideBarTemplate: DNITemplate;
    procedure set_SideBarTemplate(value: DNITemplate);
    function get_SkipLinkText: string;
    procedure set_SkipLinkText(value: string);
    function get_StartNavigationTemplate: DNITemplate;
    procedure set_StartNavigationTemplate(value: DNITemplate);
    function get_StepNavigationTemplate: DNITemplate;
    procedure set_StepNavigationTemplate(value: DNITemplate);
    function get_StepStyle: DNTableItemStyle;
    function get_WizardSteps: DNWizardStepCollection;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ActiveStepChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ActiveStepChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_FinishButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_FinishButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_NextButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_NextButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_PreviousButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_PreviousButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_SideBarButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_SideBarButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetStepType(wizardStep: DNWizardStepBase; index: Int32): DNWizardStepType;
    procedure MoveTo(wizardStep: DNWizardStepBase);
    function GetHistory: DDN.mscorlib.DNICollection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveStep: DNWizardStepBase read get_ActiveStep;
    property ActiveStepIndex: Int32 read get_ActiveStepIndex write set_ActiveStepIndex;
    property CancelButtonImageUrl: string read get_CancelButtonImageUrl write set_CancelButtonImageUrl;
    property CancelButtonStyle: DNStyle read get_CancelButtonStyle;
    property CancelButtonText: string read get_CancelButtonText write set_CancelButtonText;
    property CancelButtonType: DNButtonType read get_CancelButtonType write set_CancelButtonType;
    property CancelDestinationPageUrl: string read get_CancelDestinationPageUrl write set_CancelDestinationPageUrl;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property DisplayCancelButton: Boolean read get_DisplayCancelButton write set_DisplayCancelButton;
    property DisplaySideBar: Boolean read get_DisplaySideBar write set_DisplaySideBar;
    property FinishCompleteButtonImageUrl: string read get_FinishCompleteButtonImageUrl write set_FinishCompleteButtonImageUrl;
    property FinishCompleteButtonStyle: DNStyle read get_FinishCompleteButtonStyle;
    property FinishCompleteButtonText: string read get_FinishCompleteButtonText write set_FinishCompleteButtonText;
    property FinishCompleteButtonType: DNButtonType read get_FinishCompleteButtonType write set_FinishCompleteButtonType;
    property FinishDestinationPageUrl: string read get_FinishDestinationPageUrl write set_FinishDestinationPageUrl;
    property FinishPreviousButtonImageUrl: string read get_FinishPreviousButtonImageUrl write set_FinishPreviousButtonImageUrl;
    property FinishPreviousButtonStyle: DNStyle read get_FinishPreviousButtonStyle;
    property FinishPreviousButtonText: string read get_FinishPreviousButtonText write set_FinishPreviousButtonText;
    property FinishPreviousButtonType: DNButtonType read get_FinishPreviousButtonType write set_FinishPreviousButtonType;
    property FinishNavigationTemplate: DNITemplate read get_FinishNavigationTemplate write set_FinishNavigationTemplate;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property LayoutTemplate: DNITemplate read get_LayoutTemplate write set_LayoutTemplate;
    property NavigationButtonStyle: DNStyle read get_NavigationButtonStyle;
    property NavigationStyle: DNTableItemStyle read get_NavigationStyle;
    property StartNextButtonImageUrl: string read get_StartNextButtonImageUrl write set_StartNextButtonImageUrl;
    property StartNextButtonStyle: DNStyle read get_StartNextButtonStyle;
    property StartNextButtonText: string read get_StartNextButtonText write set_StartNextButtonText;
    property StartNextButtonType: DNButtonType read get_StartNextButtonType write set_StartNextButtonType;
    property StepNextButtonImageUrl: string read get_StepNextButtonImageUrl write set_StepNextButtonImageUrl;
    property StepNextButtonStyle: DNStyle read get_StepNextButtonStyle;
    property StepNextButtonText: string read get_StepNextButtonText write set_StepNextButtonText;
    property StepNextButtonType: DNButtonType read get_StepNextButtonType write set_StepNextButtonType;
    property StepPreviousButtonImageUrl: string read get_StepPreviousButtonImageUrl write set_StepPreviousButtonImageUrl;
    property StepPreviousButtonStyle: DNStyle read get_StepPreviousButtonStyle;
    property StepPreviousButtonText: string read get_StepPreviousButtonText write set_StepPreviousButtonText;
    property StepPreviousButtonType: DNButtonType read get_StepPreviousButtonType write set_StepPreviousButtonType;
    property SideBarButtonStyle: DNStyle read get_SideBarButtonStyle;
    property SideBarStyle: DNTableItemStyle read get_SideBarStyle;
    property SideBarTemplate: DNITemplate read get_SideBarTemplate write set_SideBarTemplate;
    property SkipLinkText: string read get_SkipLinkText write set_SkipLinkText;
    property StartNavigationTemplate: DNITemplate read get_StartNavigationTemplate write set_StartNavigationTemplate;
    property StepNavigationTemplate: DNITemplate read get_StepNavigationTemplate write set_StepNavigationTemplate;
    property StepStyle: DNTableItemStyle read get_StepStyle;
    property WizardSteps: DNWizardStepCollection read get_WizardSteps;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWizard = class(TDNGenericImport<DNWizardClass, DNWizard>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCreateUserWizardClass = interface(DNWizardClass)
  ['{0FA86E93-059F-545B-9708-B41B83EDDC81}']
  { constructors } 

    {class} function init: DNCreateUserWizard;

  { static fields getter & setter } 

   function __fakeFieldGet_ContinueButtonCommandName: string;

  { static fields } 

    {class} property ContinueButtonCommandName: string read __fakeFieldGet_ContinueButtonCommandName;

  end;

  [DNTypeName('System.Web.UI.WebControls.CreateUserWizard')]
  DNCreateUserWizard = interface(DNWizard)
  ['{88FC5748-9693-3309-BDC9-4D4F4FD9F7AF}']
  { getters & setters } 

    function get_ActiveStepIndex: Int32;
    procedure set_ActiveStepIndex(value: Int32);
    function get_Answer: string;
    procedure set_Answer(value: string);
    function get_AnswerLabelText: string;
    procedure set_AnswerLabelText(value: string);
    function get_AnswerRequiredErrorMessage: string;
    procedure set_AnswerRequiredErrorMessage(value: string);
    function get_AutoGeneratePassword: Boolean;
    procedure set_AutoGeneratePassword(value: Boolean);
    function get_CompleteStep: DNCompleteWizardStep;
    function get_CompleteSuccessText: string;
    procedure set_CompleteSuccessText(value: string);
    function get_CompleteSuccessTextStyle: DNTableItemStyle;
    function get_ConfirmPassword: string;
    function get_ConfirmPasswordCompareErrorMessage: string;
    procedure set_ConfirmPasswordCompareErrorMessage(value: string);
    function get_ConfirmPasswordLabelText: string;
    procedure set_ConfirmPasswordLabelText(value: string);
    function get_ConfirmPasswordRequiredErrorMessage: string;
    procedure set_ConfirmPasswordRequiredErrorMessage(value: string);
    function get_ContinueButtonImageUrl: string;
    procedure set_ContinueButtonImageUrl(value: string);
    function get_ContinueButtonStyle: DNStyle;
    function get_ContinueButtonText: string;
    procedure set_ContinueButtonText(value: string);
    function get_ContinueButtonType: DNButtonType;
    procedure set_ContinueButtonType(value: DNButtonType);
    function get_ContinueDestinationPageUrl: string;
    procedure set_ContinueDestinationPageUrl(value: string);
    function get_CreateUserStep: DNCreateUserWizardStep;
    function get_CreateUserButtonImageUrl: string;
    procedure set_CreateUserButtonImageUrl(value: string);
    function get_CreateUserButtonStyle: DNStyle;
    function get_CreateUserButtonText: string;
    procedure set_CreateUserButtonText(value: string);
    function get_CreateUserButtonType: DNButtonType;
    procedure set_CreateUserButtonType(value: DNButtonType);
    function get_DisableCreatedUser: Boolean;
    procedure set_DisableCreatedUser(value: Boolean);
    function get_DisplaySideBar: Boolean;
    procedure set_DisplaySideBar(value: Boolean);
    function get_DuplicateEmailErrorMessage: string;
    procedure set_DuplicateEmailErrorMessage(value: string);
    function get_DuplicateUserNameErrorMessage: string;
    procedure set_DuplicateUserNameErrorMessage(value: string);
    function get_EditProfileIconUrl: string;
    procedure set_EditProfileIconUrl(value: string);
    function get_EditProfileText: string;
    procedure set_EditProfileText(value: string);
    function get_EditProfileUrl: string;
    procedure set_EditProfileUrl(value: string);
    function get_Email: string;
    procedure set_Email(value: string);
    function get_EmailLabelText: string;
    procedure set_EmailLabelText(value: string);
    function get_EmailRegularExpression: string;
    procedure set_EmailRegularExpression(value: string);
    function get_EmailRegularExpressionErrorMessage: string;
    procedure set_EmailRegularExpressionErrorMessage(value: string);
    function get_EmailRequiredErrorMessage: string;
    procedure set_EmailRequiredErrorMessage(value: string);
    function get_UnknownErrorMessage: string;
    procedure set_UnknownErrorMessage(value: string);
    function get_ErrorMessageStyle: DNTableItemStyle;
    function get_HelpPageIconUrl: string;
    procedure set_HelpPageIconUrl(value: string);
    function get_HelpPageText: string;
    procedure set_HelpPageText(value: string);
    function get_HelpPageUrl: string;
    procedure set_HelpPageUrl(value: string);
    function get_HyperLinkStyle: DNTableItemStyle;
    function get_InstructionText: string;
    procedure set_InstructionText(value: string);
    function get_InstructionTextStyle: DNTableItemStyle;
    function get_InvalidAnswerErrorMessage: string;
    procedure set_InvalidAnswerErrorMessage(value: string);
    function get_InvalidEmailErrorMessage: string;
    procedure set_InvalidEmailErrorMessage(value: string);
    function get_InvalidPasswordErrorMessage: string;
    procedure set_InvalidPasswordErrorMessage(value: string);
    function get_InvalidQuestionErrorMessage: string;
    procedure set_InvalidQuestionErrorMessage(value: string);
    function get_LabelStyle: DNTableItemStyle;
    function get_LoginCreatedUser: Boolean;
    procedure set_LoginCreatedUser(value: Boolean);
    function get_MailDefinition: DNMailDefinition;
    function get_MembershipProvider: string;
    procedure set_MembershipProvider(value: string);
    function get_Password: string;
    function get_PasswordHintStyle: DNTableItemStyle;
    function get_PasswordHintText: string;
    procedure set_PasswordHintText(value: string);
    function get_PasswordLabelText: string;
    procedure set_PasswordLabelText(value: string);
    function get_PasswordRegularExpression: string;
    procedure set_PasswordRegularExpression(value: string);
    function get_PasswordRegularExpressionErrorMessage: string;
    procedure set_PasswordRegularExpressionErrorMessage(value: string);
    function get_PasswordRequiredErrorMessage: string;
    procedure set_PasswordRequiredErrorMessage(value: string);
    function get_Question: string;
    procedure set_Question(value: string);
    function get_QuestionLabelText: string;
    procedure set_QuestionLabelText(value: string);
    function get_QuestionRequiredErrorMessage: string;
    procedure set_QuestionRequiredErrorMessage(value: string);
    function get_RequireEmail: Boolean;
    procedure set_RequireEmail(value: Boolean);
    function get_SkipLinkText: string;
    procedure set_SkipLinkText(value: string);
    function get_TextBoxStyle: DNStyle;
    function get_TitleTextStyle: DNTableItemStyle;
    function get_UserName: string;
    procedure set_UserName(value: string);
    function get_UserNameLabelText: string;
    procedure set_UserNameLabelText(value: string);
    function get_UserNameRequiredErrorMessage: string;
    procedure set_UserNameRequiredErrorMessage(value: string);
    function get_ValidatorTextStyle: DNStyle;
    function get_WizardSteps: DNWizardStepCollection;
    function get_ActiveStep: DNWizardStepBase;
    function get_CancelButtonImageUrl: string;
    procedure set_CancelButtonImageUrl(value: string);
    function get_CancelButtonStyle: DNStyle;
    function get_CancelButtonText: string;
    procedure set_CancelButtonText(value: string);
    function get_CancelButtonType: DNButtonType;
    procedure set_CancelButtonType(value: DNButtonType);
    function get_CancelDestinationPageUrl: string;
    procedure set_CancelDestinationPageUrl(value: string);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_DisplayCancelButton: Boolean;
    procedure set_DisplayCancelButton(value: Boolean);
    function get_FinishCompleteButtonImageUrl: string;
    procedure set_FinishCompleteButtonImageUrl(value: string);
    function get_FinishCompleteButtonStyle: DNStyle;
    function get_FinishCompleteButtonText: string;
    procedure set_FinishCompleteButtonText(value: string);
    function get_FinishCompleteButtonType: DNButtonType;
    procedure set_FinishCompleteButtonType(value: DNButtonType);
    function get_FinishDestinationPageUrl: string;
    procedure set_FinishDestinationPageUrl(value: string);
    function get_FinishPreviousButtonImageUrl: string;
    procedure set_FinishPreviousButtonImageUrl(value: string);
    function get_FinishPreviousButtonStyle: DNStyle;
    function get_FinishPreviousButtonText: string;
    procedure set_FinishPreviousButtonText(value: string);
    function get_FinishPreviousButtonType: DNButtonType;
    procedure set_FinishPreviousButtonType(value: DNButtonType);
    function get_FinishNavigationTemplate: DNITemplate;
    procedure set_FinishNavigationTemplate(value: DNITemplate);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_LayoutTemplate: DNITemplate;
    procedure set_LayoutTemplate(value: DNITemplate);
    function get_NavigationButtonStyle: DNStyle;
    function get_NavigationStyle: DNTableItemStyle;
    function get_StartNextButtonImageUrl: string;
    procedure set_StartNextButtonImageUrl(value: string);
    function get_StartNextButtonStyle: DNStyle;
    function get_StartNextButtonText: string;
    procedure set_StartNextButtonText(value: string);
    function get_StartNextButtonType: DNButtonType;
    procedure set_StartNextButtonType(value: DNButtonType);
    function get_StepNextButtonImageUrl: string;
    procedure set_StepNextButtonImageUrl(value: string);
    function get_StepNextButtonStyle: DNStyle;
    function get_StepNextButtonText: string;
    procedure set_StepNextButtonText(value: string);
    function get_StepNextButtonType: DNButtonType;
    procedure set_StepNextButtonType(value: DNButtonType);
    function get_StepPreviousButtonImageUrl: string;
    procedure set_StepPreviousButtonImageUrl(value: string);
    function get_StepPreviousButtonStyle: DNStyle;
    function get_StepPreviousButtonText: string;
    procedure set_StepPreviousButtonText(value: string);
    function get_StepPreviousButtonType: DNButtonType;
    procedure set_StepPreviousButtonType(value: DNButtonType);
    function get_SideBarButtonStyle: DNStyle;
    function get_SideBarStyle: DNTableItemStyle;
    function get_SideBarTemplate: DNITemplate;
    procedure set_SideBarTemplate(value: DNITemplate);
    function get_StartNavigationTemplate: DNITemplate;
    procedure set_StartNavigationTemplate(value: DNITemplate);
    function get_StepNavigationTemplate: DNITemplate;
    procedure set_StepNavigationTemplate(value: DNITemplate);
    function get_StepStyle: DNTableItemStyle;
    function get_Controls: DNControlCollection;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ContinueButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ContinueButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreatingUser(value: DNLoginCancelEventHandler);
    procedure remove_CreatingUser(value: DNLoginCancelEventHandler);
    procedure add_CreatedUser(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CreatedUser(value: DDN.mscorlib.DNEventHandler);
    procedure add_CreateUserError(value: DNCreateUserErrorEventHandler);
    procedure remove_CreateUserError(value: DNCreateUserErrorEventHandler);
    procedure add_SendingMail(value: DNMailMessageEventHandler);
    procedure remove_SendingMail(value: DNMailMessageEventHandler);
    procedure add_SendMailError(value: DNSendMailErrorEventHandler);
    procedure remove_SendMailError(value: DNSendMailErrorEventHandler);
    procedure add_ActiveStepChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ActiveStepChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure remove_CancelButtonClick(value: DDN.mscorlib.DNEventHandler);
    procedure add_FinishButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_FinishButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_NextButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_NextButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_PreviousButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_PreviousButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_SideBarButtonClick(value: DNWizardNavigationEventHandler);
    procedure remove_SideBarButtonClick(value: DNWizardNavigationEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetStepType(wizardStep: DNWizardStepBase; index: Int32): DNWizardStepType;
    procedure MoveTo(wizardStep: DNWizardStepBase);
    function GetHistory: DDN.mscorlib.DNICollection;
    procedure DataBind;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActiveStepIndex: Int32 read get_ActiveStepIndex write set_ActiveStepIndex;
    property Answer: string read get_Answer write set_Answer;
    property AnswerLabelText: string read get_AnswerLabelText write set_AnswerLabelText;
    property AnswerRequiredErrorMessage: string read get_AnswerRequiredErrorMessage write set_AnswerRequiredErrorMessage;
    property AutoGeneratePassword: Boolean read get_AutoGeneratePassword write set_AutoGeneratePassword;
    property CompleteStep: DNCompleteWizardStep read get_CompleteStep;
    property CompleteSuccessText: string read get_CompleteSuccessText write set_CompleteSuccessText;
    property CompleteSuccessTextStyle: DNTableItemStyle read get_CompleteSuccessTextStyle;
    property ConfirmPassword: string read get_ConfirmPassword;
    property ConfirmPasswordCompareErrorMessage: string read get_ConfirmPasswordCompareErrorMessage write set_ConfirmPasswordCompareErrorMessage;
    property ConfirmPasswordLabelText: string read get_ConfirmPasswordLabelText write set_ConfirmPasswordLabelText;
    property ConfirmPasswordRequiredErrorMessage: string read get_ConfirmPasswordRequiredErrorMessage write set_ConfirmPasswordRequiredErrorMessage;
    property ContinueButtonImageUrl: string read get_ContinueButtonImageUrl write set_ContinueButtonImageUrl;
    property ContinueButtonStyle: DNStyle read get_ContinueButtonStyle;
    property ContinueButtonText: string read get_ContinueButtonText write set_ContinueButtonText;
    property ContinueButtonType: DNButtonType read get_ContinueButtonType write set_ContinueButtonType;
    property ContinueDestinationPageUrl: string read get_ContinueDestinationPageUrl write set_ContinueDestinationPageUrl;
    property CreateUserStep: DNCreateUserWizardStep read get_CreateUserStep;
    property CreateUserButtonImageUrl: string read get_CreateUserButtonImageUrl write set_CreateUserButtonImageUrl;
    property CreateUserButtonStyle: DNStyle read get_CreateUserButtonStyle;
    property CreateUserButtonText: string read get_CreateUserButtonText write set_CreateUserButtonText;
    property CreateUserButtonType: DNButtonType read get_CreateUserButtonType write set_CreateUserButtonType;
    property DisableCreatedUser: Boolean read get_DisableCreatedUser write set_DisableCreatedUser;
    property DisplaySideBar: Boolean read get_DisplaySideBar write set_DisplaySideBar;
    property DuplicateEmailErrorMessage: string read get_DuplicateEmailErrorMessage write set_DuplicateEmailErrorMessage;
    property DuplicateUserNameErrorMessage: string read get_DuplicateUserNameErrorMessage write set_DuplicateUserNameErrorMessage;
    property EditProfileIconUrl: string read get_EditProfileIconUrl write set_EditProfileIconUrl;
    property EditProfileText: string read get_EditProfileText write set_EditProfileText;
    property EditProfileUrl: string read get_EditProfileUrl write set_EditProfileUrl;
    property Email: string read get_Email write set_Email;
    property EmailLabelText: string read get_EmailLabelText write set_EmailLabelText;
    property EmailRegularExpression: string read get_EmailRegularExpression write set_EmailRegularExpression;
    property EmailRegularExpressionErrorMessage: string read get_EmailRegularExpressionErrorMessage write set_EmailRegularExpressionErrorMessage;
    property EmailRequiredErrorMessage: string read get_EmailRequiredErrorMessage write set_EmailRequiredErrorMessage;
    property UnknownErrorMessage: string read get_UnknownErrorMessage write set_UnknownErrorMessage;
    property ErrorMessageStyle: DNTableItemStyle read get_ErrorMessageStyle;
    property HelpPageIconUrl: string read get_HelpPageIconUrl write set_HelpPageIconUrl;
    property HelpPageText: string read get_HelpPageText write set_HelpPageText;
    property HelpPageUrl: string read get_HelpPageUrl write set_HelpPageUrl;
    property HyperLinkStyle: DNTableItemStyle read get_HyperLinkStyle;
    property InstructionText: string read get_InstructionText write set_InstructionText;
    property InstructionTextStyle: DNTableItemStyle read get_InstructionTextStyle;
    property InvalidAnswerErrorMessage: string read get_InvalidAnswerErrorMessage write set_InvalidAnswerErrorMessage;
    property InvalidEmailErrorMessage: string read get_InvalidEmailErrorMessage write set_InvalidEmailErrorMessage;
    property InvalidPasswordErrorMessage: string read get_InvalidPasswordErrorMessage write set_InvalidPasswordErrorMessage;
    property InvalidQuestionErrorMessage: string read get_InvalidQuestionErrorMessage write set_InvalidQuestionErrorMessage;
    property LabelStyle: DNTableItemStyle read get_LabelStyle;
    property LoginCreatedUser: Boolean read get_LoginCreatedUser write set_LoginCreatedUser;
    property MailDefinition: DNMailDefinition read get_MailDefinition;
    property MembershipProvider: string read get_MembershipProvider write set_MembershipProvider;
    property Password: string read get_Password;
    property PasswordHintStyle: DNTableItemStyle read get_PasswordHintStyle;
    property PasswordHintText: string read get_PasswordHintText write set_PasswordHintText;
    property PasswordLabelText: string read get_PasswordLabelText write set_PasswordLabelText;
    property PasswordRegularExpression: string read get_PasswordRegularExpression write set_PasswordRegularExpression;
    property PasswordRegularExpressionErrorMessage: string read get_PasswordRegularExpressionErrorMessage write set_PasswordRegularExpressionErrorMessage;
    property PasswordRequiredErrorMessage: string read get_PasswordRequiredErrorMessage write set_PasswordRequiredErrorMessage;
    property Question: string read get_Question write set_Question;
    property QuestionLabelText: string read get_QuestionLabelText write set_QuestionLabelText;
    property QuestionRequiredErrorMessage: string read get_QuestionRequiredErrorMessage write set_QuestionRequiredErrorMessage;
    property RequireEmail: Boolean read get_RequireEmail write set_RequireEmail;
    property SkipLinkText: string read get_SkipLinkText write set_SkipLinkText;
    property TextBoxStyle: DNStyle read get_TextBoxStyle;
    property TitleTextStyle: DNTableItemStyle read get_TitleTextStyle;
    property UserName: string read get_UserName write set_UserName;
    property UserNameLabelText: string read get_UserNameLabelText write set_UserNameLabelText;
    property UserNameRequiredErrorMessage: string read get_UserNameRequiredErrorMessage write set_UserNameRequiredErrorMessage;
    property ValidatorTextStyle: DNStyle read get_ValidatorTextStyle;
    property WizardSteps: DNWizardStepCollection read get_WizardSteps;
    property ActiveStep: DNWizardStepBase read get_ActiveStep;
    property CancelButtonImageUrl: string read get_CancelButtonImageUrl write set_CancelButtonImageUrl;
    property CancelButtonStyle: DNStyle read get_CancelButtonStyle;
    property CancelButtonText: string read get_CancelButtonText write set_CancelButtonText;
    property CancelButtonType: DNButtonType read get_CancelButtonType write set_CancelButtonType;
    property CancelDestinationPageUrl: string read get_CancelDestinationPageUrl write set_CancelDestinationPageUrl;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property DisplayCancelButton: Boolean read get_DisplayCancelButton write set_DisplayCancelButton;
    property FinishCompleteButtonImageUrl: string read get_FinishCompleteButtonImageUrl write set_FinishCompleteButtonImageUrl;
    property FinishCompleteButtonStyle: DNStyle read get_FinishCompleteButtonStyle;
    property FinishCompleteButtonText: string read get_FinishCompleteButtonText write set_FinishCompleteButtonText;
    property FinishCompleteButtonType: DNButtonType read get_FinishCompleteButtonType write set_FinishCompleteButtonType;
    property FinishDestinationPageUrl: string read get_FinishDestinationPageUrl write set_FinishDestinationPageUrl;
    property FinishPreviousButtonImageUrl: string read get_FinishPreviousButtonImageUrl write set_FinishPreviousButtonImageUrl;
    property FinishPreviousButtonStyle: DNStyle read get_FinishPreviousButtonStyle;
    property FinishPreviousButtonText: string read get_FinishPreviousButtonText write set_FinishPreviousButtonText;
    property FinishPreviousButtonType: DNButtonType read get_FinishPreviousButtonType write set_FinishPreviousButtonType;
    property FinishNavigationTemplate: DNITemplate read get_FinishNavigationTemplate write set_FinishNavigationTemplate;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property LayoutTemplate: DNITemplate read get_LayoutTemplate write set_LayoutTemplate;
    property NavigationButtonStyle: DNStyle read get_NavigationButtonStyle;
    property NavigationStyle: DNTableItemStyle read get_NavigationStyle;
    property StartNextButtonImageUrl: string read get_StartNextButtonImageUrl write set_StartNextButtonImageUrl;
    property StartNextButtonStyle: DNStyle read get_StartNextButtonStyle;
    property StartNextButtonText: string read get_StartNextButtonText write set_StartNextButtonText;
    property StartNextButtonType: DNButtonType read get_StartNextButtonType write set_StartNextButtonType;
    property StepNextButtonImageUrl: string read get_StepNextButtonImageUrl write set_StepNextButtonImageUrl;
    property StepNextButtonStyle: DNStyle read get_StepNextButtonStyle;
    property StepNextButtonText: string read get_StepNextButtonText write set_StepNextButtonText;
    property StepNextButtonType: DNButtonType read get_StepNextButtonType write set_StepNextButtonType;
    property StepPreviousButtonImageUrl: string read get_StepPreviousButtonImageUrl write set_StepPreviousButtonImageUrl;
    property StepPreviousButtonStyle: DNStyle read get_StepPreviousButtonStyle;
    property StepPreviousButtonText: string read get_StepPreviousButtonText write set_StepPreviousButtonText;
    property StepPreviousButtonType: DNButtonType read get_StepPreviousButtonType write set_StepPreviousButtonType;
    property SideBarButtonStyle: DNStyle read get_SideBarButtonStyle;
    property SideBarStyle: DNTableItemStyle read get_SideBarStyle;
    property SideBarTemplate: DNITemplate read get_SideBarTemplate write set_SideBarTemplate;
    property StartNavigationTemplate: DNITemplate read get_StartNavigationTemplate write set_StartNavigationTemplate;
    property StepNavigationTemplate: DNITemplate read get_StepNavigationTemplate write set_StepNavigationTemplate;
    property StepStyle: DNTableItemStyle read get_StepStyle;
    property Controls: DNControlCollection read get_Controls;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCreateUserWizard = class(TDNGenericImport<DNCreateUserWizardClass, DNCreateUserWizard>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataListItemClass = interface(DNWebControlClass)
  ['{5A7BC615-EC12-5DF1-8639-5E28C292F8A4}']
  { constructors } 

    {class} function init(itemIndex: Int32; itemType: DNListItemType): DNDataListItem;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataListItem')]
  DNDataListItem = interface(DNWebControl)
  ['{9EA9090E-7D92-3DF7-8FA3-5A0D4A60A6B0}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_ItemIndex: Int32;
    function get_ItemType: DNListItemType;
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RenderItem(writer: DNHtmlTextWriter; extractRows: Boolean; tableLayout: Boolean);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    property ItemIndex: Int32 read get_ItemIndex;
    property ItemType: DNListItemType read get_ItemType;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataListItem = class(TDNGenericImport<DNDataListItemClass, DNDataListItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFileUploadClass = interface(DNWebControlClass)
  ['{8F7887CF-6941-55DD-83A9-0F243F165166}']
  { constructors } 

    {class} function init: DNFileUpload;

  end;

  [DNTypeName('System.Web.UI.WebControls.FileUpload')]
  DNFileUpload = interface(DNWebControl)
  ['{2E5483F7-3950-3D54-809A-8B345F5C7571}']
  { getters & setters } 

    function get_AllowMultiple: Boolean;
    procedure set_AllowMultiple(value: Boolean);
    function get_FileBytes: TArray<Byte>;
    function get_FileContent: DDN.mscorlib.DNStream;
    function get_FileName: string;
    function get_HasFile: Boolean;
    function get_HasFiles: Boolean;
    function get_PostedFile: DNHttpPostedFile;
    function get_PostedFiles: DDN.mscorlib.DNIList<DNHttpPostedFile>;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SaveAs(filename: string);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowMultiple: Boolean read get_AllowMultiple write set_AllowMultiple;
    property FileBytes: TArray<Byte> read get_FileBytes;
    property FileContent: DDN.mscorlib.DNStream read get_FileContent;
    property FileName: string read get_FileName;
    property HasFile: Boolean read get_HasFile;
    property HasFiles: Boolean read get_HasFiles;
    property PostedFile: DNHttpPostedFile read get_PostedFile;
    property PostedFiles: DDN.mscorlib.DNIList<DNHttpPostedFile> read get_PostedFiles;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNFileUpload = class(TDNGenericImport<DNFileUploadClass, DNFileUpload>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHyperLinkClass = interface(DNWebControlClass)
  ['{07FEA91C-AE35-5727-BC22-CD560D85E71C}']
  { constructors } 

    {class} function init: DNHyperLink;

  end;

  [DNTypeName('System.Web.UI.WebControls.HyperLink')]
  DNHyperLink = interface(DNWebControl)
  ['{FD5788CA-F513-3A3D-9C0C-C3EEC0AFFF62}']
  { getters & setters } 

    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_ImageHeight: DNUnit;
    procedure set_ImageHeight(value: DNUnit);
    function get_ImageWidth: DNUnit;
    procedure set_ImageWidth(value: DNUnit);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property ImageHeight: DNUnit read get_ImageHeight write set_ImageHeight;
    property ImageWidth: DNUnit read get_ImageWidth write set_ImageWidth;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNHyperLink = class(TDNGenericImport<DNHyperLinkClass, DNHyperLink>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNImageClass = interface(DNWebControlClass)
  ['{279A2E1C-AF5A-5F6A-AE0C-96479A0EB1A3}']
  { constructors } 

    {class} function init: DNImage;

  end;

  [DNTypeName('System.Web.UI.WebControls.Image')]
  DNImage = interface(DNWebControl)
  ['{576302CB-747F-3579-A9C6-46E32120E06A}']
  { getters & setters } 

    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_DescriptionUrl: string;
    procedure set_DescriptionUrl(value: string);
    function get_Font: DNFontInfo;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_GenerateEmptyAlternateText: Boolean;
    procedure set_GenerateEmptyAlternateText(value: Boolean);
    function get_ImageAlign: DNImageAlign;
    procedure set_ImageAlign(value: DNImageAlign);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AlternateText: string read get_AlternateText write set_AlternateText;
    property DescriptionUrl: string read get_DescriptionUrl write set_DescriptionUrl;
    property Font: DNFontInfo read get_Font;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property GenerateEmptyAlternateText: Boolean read get_GenerateEmptyAlternateText write set_GenerateEmptyAlternateText;
    property ImageAlign: DNImageAlign read get_ImageAlign write set_ImageAlign;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNImage = class(TDNGenericImport<DNImageClass, DNImage>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNImageButtonClass = interface(DNImageClass)
  ['{EFAFE077-7C72-57BB-BFAB-F1334966880C}']
  { constructors } 

    {class} function init: DNImageButton;

  end;

  [DNTypeName('System.Web.UI.WebControls.ImageButton')]
  DNImageButton = interface(DNImage)
  ['{6CA174C8-1333-3BA7-B0B8-33063CAE6B60}']
  { getters & setters } 

    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_CommandArgument: string;
    procedure set_CommandArgument(value: string);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_GenerateEmptyAlternateText: Boolean;
    procedure set_GenerateEmptyAlternateText(value: Boolean);
    function get_OnClientClick: string;
    procedure set_OnClientClick(value: string);
    function get_PostBackUrl: string;
    procedure set_PostBackUrl(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_DescriptionUrl: string;
    procedure set_DescriptionUrl(value: string);
    function get_Font: DNFontInfo;
    function get_ImageAlign: DNImageAlign;
    procedure set_ImageAlign(value: DNImageAlign);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Click(value: DNImageClickEventHandler);
    procedure remove_Click(value: DNImageClickEventHandler);
    procedure add_Command(value: DNCommandEventHandler);
    procedure remove_Command(value: DNCommandEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandName: string read get_CommandName write set_CommandName;
    property CommandArgument: string read get_CommandArgument write set_CommandArgument;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property GenerateEmptyAlternateText: Boolean read get_GenerateEmptyAlternateText write set_GenerateEmptyAlternateText;
    property OnClientClick: string read get_OnClientClick write set_OnClientClick;
    property PostBackUrl: string read get_PostBackUrl write set_PostBackUrl;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property DescriptionUrl: string read get_DescriptionUrl write set_DescriptionUrl;
    property Font: DNFontInfo read get_Font;
    property ImageAlign: DNImageAlign read get_ImageAlign write set_ImageAlign;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNImageButton = class(TDNGenericImport<DNImageButtonClass, DNImageButton>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNImageMapClass = interface(DNImageClass)
  ['{7108241D-AEE7-5073-859C-FCAE1E493A94}']
  { constructors } 

    {class} function init: DNImageMap;

  end;

  [DNTypeName('System.Web.UI.WebControls.ImageMap')]
  DNImageMap = interface(DNImage)
  ['{4B37B264-2CF9-3356-A029-96B8DB5328BC}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_HotSpots: DNHotSpotCollection;
    function get_HotSpotMode: DNHotSpotMode;
    procedure set_HotSpotMode(value: DNHotSpotMode);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_DescriptionUrl: string;
    procedure set_DescriptionUrl(value: string);
    function get_Font: DNFontInfo;
    function get_GenerateEmptyAlternateText: Boolean;
    procedure set_GenerateEmptyAlternateText(value: Boolean);
    function get_ImageAlign: DNImageAlign;
    procedure set_ImageAlign(value: DNImageAlign);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Click(value: DNImageMapEventHandler);
    procedure remove_Click(value: DNImageMapEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property HotSpots: DNHotSpotCollection read get_HotSpots;
    property HotSpotMode: DNHotSpotMode read get_HotSpotMode write set_HotSpotMode;
    property Target: string read get_Target write set_Target;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property DescriptionUrl: string read get_DescriptionUrl write set_DescriptionUrl;
    property Font: DNFontInfo read get_Font;
    property GenerateEmptyAlternateText: Boolean read get_GenerateEmptyAlternateText write set_GenerateEmptyAlternateText;
    property ImageAlign: DNImageAlign read get_ImageAlign write set_ImageAlign;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNImageMap = class(TDNGenericImport<DNImageMapClass, DNImageMap>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLabelClass = interface(DNWebControlClass)
  ['{469A96B3-D0E5-5A18-BE6F-EA2A7C9E5FEA}']
  { constructors } 

    {class} function init: DNLabel;

  end;

  [DNTypeName('System.Web.UI.WebControls.Label')]
  DNLabel = interface(DNWebControl)
  ['{FA820AEE-2311-3259-85F1-6C6A5533632D}']
  { getters & setters } 

    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Text: string read get_Text write set_Text;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLabel = class(TDNGenericImport<DNLabelClass, DNLabel>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBaseValidatorClass = interface(DNLabelClass)
  ['{85AFF0FD-FDA8-599C-BA49-38A3B3DC080E}']
  { static methods } 

    {class} function GetValidationProperty(component: DDN.mscorlib.DNObject): DDN.System.DNPropertyDescriptor;

  end;

  [DNTypeName('System.Web.UI.WebControls.BaseValidator')]
  DNBaseValidator = interface(DNLabel)
  ['{633CAD0A-83FE-300A-8ADC-362483C364EB}']
  { getters & setters } 

    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBaseValidator = class(TDNGenericImport<DNBaseValidatorClass, DNBaseValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBaseCompareValidatorClass = interface(DNBaseValidatorClass)
  ['{5E06FA0C-174B-5827-AC7A-A77D6ECB0643}']
  { static methods } 

    {class} function CanConvert(text: string; &type: DNValidationDataType): Boolean; overload;
    {class} function CanConvert(text: string; &type: DNValidationDataType; cultureInvariant: Boolean): Boolean; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.BaseCompareValidator')]
  DNBaseCompareValidator = interface(DNBaseValidator)
  ['{B99D98C3-0CAF-3A2F-BA8B-21315096C6D9}']
  { getters & setters } 

    function get_Type: DNValidationDataType;
    procedure set_Type(value: DNValidationDataType);
    function get_CultureInvariantValues: Boolean;
    procedure set_CultureInvariantValues(value: Boolean);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property &Type: DNValidationDataType read get_Type write set_Type;
    property CultureInvariantValues: Boolean read get_CultureInvariantValues write set_CultureInvariantValues;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBaseCompareValidator = class(TDNGenericImport<DNBaseCompareValidatorClass, DNBaseCompareValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCompareValidatorClass = interface(DNBaseCompareValidatorClass)
  ['{EB28EDB1-6EFF-57BC-86E4-FAA3B9B59762}']
  { constructors } 

    {class} function init: DNCompareValidator;

  end;

  [DNTypeName('System.Web.UI.WebControls.CompareValidator')]
  DNCompareValidator = interface(DNBaseCompareValidator)
  ['{8BB92F42-1AD6-3C22-81E4-12A82EA49F1C}']
  { getters & setters } 

    function get_ControlToCompare: string;
    procedure set_ControlToCompare(value: string);
    function get_Operator: DNValidationCompareOperator;
    procedure set_Operator(value: DNValidationCompareOperator);
    function get_ValueToCompare: string;
    procedure set_ValueToCompare(value: string);
    function get_Type: DNValidationDataType;
    procedure set_Type(value: DNValidationDataType);
    function get_CultureInvariantValues: Boolean;
    procedure set_CultureInvariantValues(value: Boolean);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlToCompare: string read get_ControlToCompare write set_ControlToCompare;
    property Operator: DNValidationCompareOperator read get_Operator write set_Operator;
    property ValueToCompare: string read get_ValueToCompare write set_ValueToCompare;
    property &Type: DNValidationDataType read get_Type write set_Type;
    property CultureInvariantValues: Boolean read get_CultureInvariantValues write set_CultureInvariantValues;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCompareValidator = class(TDNGenericImport<DNCompareValidatorClass, DNCompareValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRangeValidatorClass = interface(DNBaseCompareValidatorClass)
  ['{8F653E10-6E5D-5930-9488-D2876D6C8DD1}']
  { constructors } 

    {class} function init: DNRangeValidator;

  end;

  [DNTypeName('System.Web.UI.WebControls.RangeValidator')]
  DNRangeValidator = interface(DNBaseCompareValidator)
  ['{FB0C869B-7E58-3250-A587-A7178A864C2B}']
  { getters & setters } 

    function get_MaximumValue: string;
    procedure set_MaximumValue(value: string);
    function get_MinimumValue: string;
    procedure set_MinimumValue(value: string);
    function get_Type: DNValidationDataType;
    procedure set_Type(value: DNValidationDataType);
    function get_CultureInvariantValues: Boolean;
    procedure set_CultureInvariantValues(value: Boolean);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumValue: string read get_MaximumValue write set_MaximumValue;
    property MinimumValue: string read get_MinimumValue write set_MinimumValue;
    property &Type: DNValidationDataType read get_Type write set_Type;
    property CultureInvariantValues: Boolean read get_CultureInvariantValues write set_CultureInvariantValues;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRangeValidator = class(TDNGenericImport<DNRangeValidatorClass, DNRangeValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCustomValidatorClass = interface(DNBaseValidatorClass)
  ['{40650CFE-7232-546E-9ED5-1C845C39145A}']
  { constructors } 

    {class} function init: DNCustomValidator;

  end;

  [DNTypeName('System.Web.UI.WebControls.CustomValidator')]
  DNCustomValidator = interface(DNBaseValidator)
  ['{519415C8-15A9-3434-A731-01DC665DFEB7}']
  { getters & setters } 

    function get_ClientValidationFunction: string;
    procedure set_ClientValidationFunction(value: string);
    function get_ValidateEmptyText: Boolean;
    procedure set_ValidateEmptyText(value: Boolean);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_ServerValidate(value: DNServerValidateEventHandler);
    procedure remove_ServerValidate(value: DNServerValidateEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientValidationFunction: string read get_ClientValidationFunction write set_ClientValidationFunction;
    property ValidateEmptyText: Boolean read get_ValidateEmptyText write set_ValidateEmptyText;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCustomValidator = class(TDNGenericImport<DNCustomValidatorClass, DNCustomValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRegularExpressionValidatorClass = interface(DNBaseValidatorClass)
  ['{8F2AC468-A5E2-5BC9-9376-4AD56EAB9F72}']
  { constructors } 

    {class} function init: DNRegularExpressionValidator;

  end;

  [DNTypeName('System.Web.UI.WebControls.RegularExpressionValidator')]
  DNRegularExpressionValidator = interface(DNBaseValidator)
  ['{1E13B21D-3C59-3BA0-A040-2C40E0AC3545}']
  { getters & setters } 

    function get_ValidationExpression: string;
    procedure set_ValidationExpression(value: string);
    function get_MatchTimeout: DDN.mscorlib.DNNullable<Int32>;
    procedure set_MatchTimeout(value: DDN.mscorlib.DNNullable<Int32>);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ValidationExpression: string read get_ValidationExpression write set_ValidationExpression;
    property MatchTimeout: DDN.mscorlib.DNNullable<Int32> read get_MatchTimeout write set_MatchTimeout;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRegularExpressionValidator = class(TDNGenericImport<DNRegularExpressionValidatorClass, DNRegularExpressionValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRequiredFieldValidatorClass = interface(DNBaseValidatorClass)
  ['{09A82861-E8B2-54C5-992A-0BC38E501078}']
  { constructors } 

    {class} function init: DNRequiredFieldValidator;

  end;

  [DNTypeName('System.Web.UI.WebControls.RequiredFieldValidator')]
  DNRequiredFieldValidator = interface(DNBaseValidator)
  ['{896641CA-5C46-3A99-8D32-DC4EFD674624}']
  { getters & setters } 

    function get_InitialValue: string;
    procedure set_InitialValue(value: string);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_ControlToValidate: string;
    procedure set_ControlToValidate(value: string);
    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_IsValid: Boolean;
    procedure set_IsValid(value: Boolean);
    function get_Display: DNValidatorDisplay;
    procedure set_Display(value: DNValidatorDisplay);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Validate;
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property InitialValue: string read get_InitialValue write set_InitialValue;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property ControlToValidate: string read get_ControlToValidate write set_ControlToValidate;
    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property IsValid: Boolean read get_IsValid write set_IsValid;
    property Display: DNValidatorDisplay read get_Display write set_Display;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNRequiredFieldValidator = class(TDNGenericImport<DNRequiredFieldValidatorClass, DNRequiredFieldValidator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelErrorMessageClass = interface(DNLabelClass)
  ['{81E9ECC3-EEB2-5120-B491-7CEC4DE8233E}']
  { constructors } 

    {class} function init: DNModelErrorMessage;

  end;

  [DNTypeName('System.Web.UI.WebControls.ModelErrorMessage')]
  DNModelErrorMessage = interface(DNLabel)
  ['{EB204907-CC43-3793-BB66-349457CC951A}']
  { getters & setters } 

    function get_ModelStateKey: string;
    procedure set_ModelStateKey(value: string);
    function get_AssociatedControlID: string;
    procedure set_AssociatedControlID(value: string);
    function get_SetFocusOnError: Boolean;
    procedure set_SetFocusOnError(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelStateKey: string read get_ModelStateKey write set_ModelStateKey;
    property AssociatedControlID: string read get_AssociatedControlID write set_AssociatedControlID;
    property SetFocusOnError: Boolean read get_SetFocusOnError write set_SetFocusOnError;
    property Text: string read get_Text write set_Text;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNModelErrorMessage = class(TDNGenericImport<DNModelErrorMessageClass, DNModelErrorMessage>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLinkButtonClass = interface(DNWebControlClass)
  ['{E08B0183-4164-59F9-A97C-58502148B0DF}']
  { constructors } 

    {class} function init: DNLinkButton;

  end;

  [DNTypeName('System.Web.UI.WebControls.LinkButton')]
  DNLinkButton = interface(DNWebControl)
  ['{07A177D4-8B50-34AE-BC68-65AC9FC24D6C}']
  { getters & setters } 

    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_CommandArgument: string;
    procedure set_CommandArgument(value: string);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_OnClientClick: string;
    procedure set_OnClientClick(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_PostBackUrl: string;
    procedure set_PostBackUrl(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Click(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Click(value: DDN.mscorlib.DNEventHandler);
    procedure add_Command(value: DNCommandEventHandler);
    procedure remove_Command(value: DNCommandEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CommandName: string read get_CommandName write set_CommandName;
    property CommandArgument: string read get_CommandArgument write set_CommandArgument;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property OnClientClick: string read get_OnClientClick write set_OnClientClick;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Text: string read get_Text write set_Text;
    property PostBackUrl: string read get_PostBackUrl write set_PostBackUrl;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLinkButton = class(TDNGenericImport<DNLinkButtonClass, DNLinkButton>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLoginNameClass = interface(DNWebControlClass)
  ['{C14A8CE1-BD14-51F6-8619-8B1E40405CF1}']
  { constructors } 

    {class} function init: DNLoginName;

  end;

  [DNTypeName('System.Web.UI.WebControls.LoginName')]
  DNLoginName = interface(DNWebControl)
  ['{CC666A4D-6C1B-34C7-9F76-C2D304BAC5E1}']
  { getters & setters } 

    function get_FormatString: string;
    procedure set_FormatString(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FormatString: string read get_FormatString write set_FormatString;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLoginName = class(TDNGenericImport<DNLoginNameClass, DNLoginName>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPanelClass = interface(DNWebControlClass)
  ['{5546B0A3-785F-5A12-B338-50E7E954E777}']
  { constructors } 

    {class} function init: DNPanel;

  end;

  [DNTypeName('System.Web.UI.WebControls.Panel')]
  DNPanel = interface(DNWebControl)
  ['{B4FE4B7C-3F4A-3A98-B6E6-192BCA159652}']
  { getters & setters } 

    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPanel = class(TDNGenericImport<DNPanelClass, DNPanel>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPartClass = interface(DNPanelClass)
  ['{346C2B75-5109-5E43-826A-E27F77CE29BC}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.Part')]
  DNPart = interface(DNPanel)
  ['{3847BB8C-9962-364A-9626-1DAFEB09D1E8}']
  { getters & setters } 

    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property Title: string read get_Title write set_Title;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPart = class(TDNGenericImport<DNPartClass, DNPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNCatalogPartClass = interface(DNPartClass)
  ['{8FC1FF34-70E9-5458-B0F7-02EF302ABE97}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.CatalogPart')]
  DNCatalogPart = interface(DNPart)
  ['{4FBC64FC-2D84-34E8-9073-0F0191EC80F8}']
  { getters & setters } 

    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetAvailableWebPartDescriptions: DNWebPartDescriptionCollection;
    function GetWebPart(description: DNWebPartDescription): DNWebPart;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property Title: string read get_Title write set_Title;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNCatalogPart = class(TDNGenericImport<DNCatalogPartClass, DNCatalogPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNDeclarativeCatalogPartClass = interface(DNCatalogPartClass)
  ['{48223916-4A60-5B7F-99AF-8A923F50DBAE}']
  { constructors } 

    {class} function init: DNDeclarativeCatalogPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.DeclarativeCatalogPart')]
  DNDeclarativeCatalogPart = interface(DNCatalogPart)
  ['{B04DB33B-1CC7-3E17-98CF-1377FC11BD2B}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_WebPartsListUserControlPath: string;
    procedure set_WebPartsListUserControlPath(value: string);
    function get_WebPartsTemplate: DNITemplate;
    procedure set_WebPartsTemplate(value: DNITemplate);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_Style: DNCssStyleCollection;
    function get_HasAttributes: Boolean;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetAvailableWebPartDescriptions: DNWebPartDescriptionCollection;
    function GetWebPart(description: DNWebPartDescription): DNWebPart;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property WebPartsListUserControlPath: string read get_WebPartsListUserControlPath write set_WebPartsListUserControlPath;
    property WebPartsTemplate: DNITemplate read get_WebPartsTemplate write set_WebPartsTemplate;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property CssClass: string read get_CssClass write set_CssClass;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property Height: DNUnit read get_Height write set_Height;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Visible: Boolean read get_Visible write set_Visible;
    property Width: DNUnit read get_Width write set_Width;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Attributes: DNAttributeCollection read get_Attributes;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property Style: DNCssStyleCollection read get_Style;
    property HasAttributes: Boolean read get_HasAttributes;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDeclarativeCatalogPart = class(TDNGenericImport<DNDeclarativeCatalogPartClass, DNDeclarativeCatalogPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNImportCatalogPartClass = interface(DNCatalogPartClass)
  ['{1F2C5753-27EF-54E4-88EC-A23581E5FEFC}']
  { constructors } 

    {class} function init: DNImportCatalogPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ImportCatalogPart')]
  DNImportCatalogPart = interface(DNCatalogPart)
  ['{25FB519F-538C-3FE3-B1A0-94FF70E2AF0B}']
  { getters & setters } 

    function get_BrowseHelpText: string;
    procedure set_BrowseHelpText(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_ImportedPartLabelText: string;
    procedure set_ImportedPartLabelText(value: string);
    function get_PartImportErrorLabelText: string;
    procedure set_PartImportErrorLabelText(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_UploadButtonText: string;
    procedure set_UploadButtonText(value: string);
    function get_UploadHelpText: string;
    procedure set_UploadHelpText(value: string);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetAvailableWebPartDescriptions: DNWebPartDescriptionCollection;
    function GetWebPart(description: DNWebPartDescription): DNWebPart;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BrowseHelpText: string read get_BrowseHelpText write set_BrowseHelpText;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property ImportedPartLabelText: string read get_ImportedPartLabelText write set_ImportedPartLabelText;
    property PartImportErrorLabelText: string read get_PartImportErrorLabelText write set_PartImportErrorLabelText;
    property Title: string read get_Title write set_Title;
    property UploadButtonText: string read get_UploadButtonText write set_UploadButtonText;
    property UploadHelpText: string read get_UploadHelpText write set_UploadHelpText;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNImportCatalogPart = class(TDNGenericImport<DNImportCatalogPartClass, DNImportCatalogPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPageCatalogPartClass = interface(DNCatalogPartClass)
  ['{E51944BB-DA19-538B-A94D-AA16657B36D5}']
  { constructors } 

    {class} function init: DNPageCatalogPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PageCatalogPart')]
  DNPageCatalogPart = interface(DNCatalogPart)
  ['{66CAEEEC-8442-3427-AD08-27391EC2FC73}']
  { getters & setters } 

    function get_Title: string;
    procedure set_Title(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Attributes: DNAttributeCollection;
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_Style: DNCssStyleCollection;
    function get_HasAttributes: Boolean;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function GetAvailableWebPartDescriptions: DNWebPartDescriptionCollection;
    function GetWebPart(description: DNWebPartDescription): DNWebPart;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Title: string read get_Title write set_Title;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property CssClass: string read get_CssClass write set_CssClass;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property Height: DNUnit read get_Height write set_Height;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Visible: Boolean read get_Visible write set_Visible;
    property Width: DNUnit read get_Width write set_Width;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Attributes: DNAttributeCollection read get_Attributes;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property Style: DNCssStyleCollection read get_Style;
    property HasAttributes: Boolean read get_HasAttributes;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPageCatalogPart = class(TDNGenericImport<DNPageCatalogPartClass, DNPageCatalogPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNEditorPartClass = interface(DNPartClass)
  ['{5B66E74B-BC3E-5216-B5AF-EFB9BFDA2A3B}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.EditorPart')]
  DNEditorPart = interface(DNPart)
  ['{BC7ACE50-D7D1-3451-88C7-C6B04CB9572C}']
  { getters & setters } 

    function get_Display: Boolean;
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ApplyChanges: Boolean;
    procedure SyncChanges;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Display: Boolean read get_Display;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property Title: string read get_Title write set_Title;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNEditorPart = class(TDNGenericImport<DNEditorPartClass, DNEditorPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNAppearanceEditorPartClass = interface(DNEditorPartClass)
  ['{0AB97368-B2B5-51D4-B4CD-E4B502401D97}']
  { constructors } 

    {class} function init: DNAppearanceEditorPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.AppearanceEditorPart')]
  DNAppearanceEditorPart = interface(DNEditorPart)
  ['{6E7A508D-C29C-3EC3-8547-F7C6EA9B210B}']
  { getters & setters } 

    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Title: string;
    procedure set_Title(value: string);
    function get_Display: Boolean;
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SyncChanges;
    function ApplyChanges: Boolean;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Title: string read get_Title write set_Title;
    property Display: Boolean read get_Display;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNAppearanceEditorPart = class(TDNGenericImport<DNAppearanceEditorPartClass, DNAppearanceEditorPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNBehaviorEditorPartClass = interface(DNEditorPartClass)
  ['{9DB37B63-2822-5A6E-8D43-0C3EF98E7952}']
  { constructors } 

    {class} function init: DNBehaviorEditorPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.BehaviorEditorPart')]
  DNBehaviorEditorPart = interface(DNEditorPart)
  ['{852E0962-164A-36DF-AA50-F7CD101D1B51}']
  { getters & setters } 

    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Display: Boolean;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SyncChanges;
    function ApplyChanges: Boolean;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Display: Boolean read get_Display;
    property Title: string read get_Title write set_Title;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNBehaviorEditorPart = class(TDNGenericImport<DNBehaviorEditorPartClass, DNBehaviorEditorPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNLayoutEditorPartClass = interface(DNEditorPartClass)
  ['{C8D5A00E-E253-5FB1-A30E-93E31CB6215F}']
  { constructors } 

    {class} function init: DNLayoutEditorPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.LayoutEditorPart')]
  DNLayoutEditorPart = interface(DNEditorPart)
  ['{87D7717C-E4F0-3E92-ACE7-D99A6C814579}']
  { getters & setters } 

    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Display: Boolean;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SyncChanges;
    function ApplyChanges: Boolean;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Display: Boolean read get_Display;
    property Title: string read get_Title write set_Title;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNLayoutEditorPart = class(TDNGenericImport<DNLayoutEditorPartClass, DNLayoutEditorPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPropertyGridEditorPartClass = interface(DNEditorPartClass)
  ['{8576B1D8-D3B9-5878-88E0-9ABF4EF58109}']
  { constructors } 

    {class} function init: DNPropertyGridEditorPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PropertyGridEditorPart')]
  DNPropertyGridEditorPart = interface(DNEditorPart)
  ['{2D2A6199-88D9-3CF2-B749-1BBD22E6E2B2}']
  { getters & setters } 

    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_Display: Boolean;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_DisplayTitle: string;
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_Controls: DNControlCollection;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure SyncChanges;
    function ApplyChanges: Boolean;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property Display: Boolean read get_Display;
    property Title: string read get_Title write set_Title;
    property DisplayTitle: string read get_DisplayTitle;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property Controls: DNControlCollection read get_Controls;
    property Description: string read get_Description write set_Description;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNPropertyGridEditorPart = class(TDNGenericImport<DNPropertyGridEditorPartClass, DNPropertyGridEditorPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartClass = interface(DNPartClass)
  ['{02671B10-5A4A-53AB-B20B-0473D5A4E59D}']
  { static methods } 

    {class} procedure SetPersonalizationDirty(control: DNControl);

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPart')]
  DNWebPart = interface(DNPart)
  ['{D1F47B37-0783-36E2-89B9-46EFBCB49F53}']
  { getters & setters } 

    function get_AllowClose: Boolean;
    procedure set_AllowClose(value: Boolean);
    function get_AllowConnect: Boolean;
    procedure set_AllowConnect(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowHide: Boolean;
    procedure set_AllowHide(value: Boolean);
    function get_AllowMinimize: Boolean;
    procedure set_AllowMinimize(value: Boolean);
    function get_AllowZoneChange: Boolean;
    procedure set_AllowZoneChange(value: Boolean);
    function get_AuthorizationFilter: string;
    procedure set_AuthorizationFilter(value: string);
    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_ConnectErrorMessage: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_DisplayTitle: string;
    function get_ExportMode: DNWebPartExportMode;
    procedure set_ExportMode(value: DNWebPartExportMode);
    function get_HasUserData: Boolean;
    function get_HasSharedData: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HelpMode: DNWebPartHelpMode;
    procedure set_HelpMode(value: DNWebPartHelpMode);
    function get_HelpUrl: string;
    procedure set_HelpUrl(value: string);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_IsClosed: Boolean;
    function get_ImportErrorMessage: string;
    procedure set_ImportErrorMessage(value: string);
    function get_IsShared: Boolean;
    function get_IsStandalone: Boolean;
    function get_IsStatic: Boolean;
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);
    function get_Verbs: DNWebPartVerbCollection;
    function get_WebBrowsableObject: DDN.mscorlib.DNObject;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Zone: DNWebPartZoneBase;
    function get_ZoneIndex: Int32;
    function get_Controls: DNControlCollection;
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowClose: Boolean read get_AllowClose write set_AllowClose;
    property AllowConnect: Boolean read get_AllowConnect write set_AllowConnect;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowHide: Boolean read get_AllowHide write set_AllowHide;
    property AllowMinimize: Boolean read get_AllowMinimize write set_AllowMinimize;
    property AllowZoneChange: Boolean read get_AllowZoneChange write set_AllowZoneChange;
    property AuthorizationFilter: string read get_AuthorizationFilter write set_AuthorizationFilter;
    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property ConnectErrorMessage: string read get_ConnectErrorMessage;
    property Description: string read get_Description write set_Description;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property DisplayTitle: string read get_DisplayTitle;
    property ExportMode: DNWebPartExportMode read get_ExportMode write set_ExportMode;
    property HasUserData: Boolean read get_HasUserData;
    property HasSharedData: Boolean read get_HasSharedData;
    property Height: DNUnit read get_Height write set_Height;
    property HelpMode: DNWebPartHelpMode read get_HelpMode write set_HelpMode;
    property HelpUrl: string read get_HelpUrl write set_HelpUrl;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property IsClosed: Boolean read get_IsClosed;
    property ImportErrorMessage: string read get_ImportErrorMessage write set_ImportErrorMessage;
    property IsShared: Boolean read get_IsShared;
    property IsStandalone: Boolean read get_IsStandalone;
    property IsStatic: Boolean read get_IsStatic;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
    property Verbs: DNWebPartVerbCollection read get_Verbs;
    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
    property Width: DNUnit read get_Width write set_Width;
    property Zone: DNWebPartZoneBase read get_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex;
    property Controls: DNControlCollection read get_Controls;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebPart = class(TDNGenericImport<DNWebPartClass, DNWebPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNGenericWebPartClass = interface(DNWebPartClass)
  ['{53ABF9B2-9847-51FC-83D9-E9BC2606B393}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.GenericWebPart')]
  DNGenericWebPart = interface(DNWebPart)
  ['{4113A6C4-3E3E-34F9-92FC-740D61C80C0D}']
  { getters & setters } 

    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_ChildControl: DNControl;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);
    function get_Verbs: DNWebPartVerbCollection;
    function get_WebBrowsableObject: DDN.mscorlib.DNObject;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_AllowClose: Boolean;
    procedure set_AllowClose(value: Boolean);
    function get_AllowConnect: Boolean;
    procedure set_AllowConnect(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowHide: Boolean;
    procedure set_AllowHide(value: Boolean);
    function get_AllowMinimize: Boolean;
    procedure set_AllowMinimize(value: Boolean);
    function get_AllowZoneChange: Boolean;
    procedure set_AllowZoneChange(value: Boolean);
    function get_AuthorizationFilter: string;
    procedure set_AuthorizationFilter(value: string);
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_ConnectErrorMessage: string;
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_DisplayTitle: string;
    function get_ExportMode: DNWebPartExportMode;
    procedure set_ExportMode(value: DNWebPartExportMode);
    function get_HasUserData: Boolean;
    function get_HasSharedData: Boolean;
    function get_HelpMode: DNWebPartHelpMode;
    procedure set_HelpMode(value: DNWebPartHelpMode);
    function get_HelpUrl: string;
    procedure set_HelpUrl(value: string);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_IsClosed: Boolean;
    function get_ImportErrorMessage: string;
    procedure set_ImportErrorMessage(value: string);
    function get_IsShared: Boolean;
    function get_IsStandalone: Boolean;
    function get_IsStatic: Boolean;
    function get_Zone: DNWebPartZoneBase;
    function get_ZoneIndex: Int32;
    function get_Controls: DNControlCollection;
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property ChildControl: DNControl read get_ChildControl;
    property Description: string read get_Description write set_Description;
    property Height: DNUnit read get_Height write set_Height;
    property ID: string read get_ID write set_ID;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
    property Verbs: DNWebPartVerbCollection read get_Verbs;
    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
    property Width: DNUnit read get_Width write set_Width;
    property AllowClose: Boolean read get_AllowClose write set_AllowClose;
    property AllowConnect: Boolean read get_AllowConnect write set_AllowConnect;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowHide: Boolean read get_AllowHide write set_AllowHide;
    property AllowMinimize: Boolean read get_AllowMinimize write set_AllowMinimize;
    property AllowZoneChange: Boolean read get_AllowZoneChange write set_AllowZoneChange;
    property AuthorizationFilter: string read get_AuthorizationFilter write set_AuthorizationFilter;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property ConnectErrorMessage: string read get_ConnectErrorMessage;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property DisplayTitle: string read get_DisplayTitle;
    property ExportMode: DNWebPartExportMode read get_ExportMode write set_ExportMode;
    property HasUserData: Boolean read get_HasUserData;
    property HasSharedData: Boolean read get_HasSharedData;
    property HelpMode: DNWebPartHelpMode read get_HelpMode write set_HelpMode;
    property HelpUrl: string read get_HelpUrl write set_HelpUrl;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property IsClosed: Boolean read get_IsClosed;
    property ImportErrorMessage: string read get_ImportErrorMessage write set_ImportErrorMessage;
    property IsShared: Boolean read get_IsShared;
    property IsStandalone: Boolean read get_IsStandalone;
    property IsStatic: Boolean read get_IsStatic;
    property Zone: DNWebPartZoneBase read get_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex;
    property Controls: DNControlCollection read get_Controls;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNGenericWebPart = class(TDNGenericImport<DNGenericWebPartClass, DNGenericWebPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNProxyWebPartClass = interface(DNWebPartClass)
  ['{A801BC59-5244-5832-9137-285D81079537}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ProxyWebPart')]
  DNProxyWebPart = interface(DNWebPart)
  ['{3312001B-49A1-3A24-A42E-D9DDC3ACC152}']
  { getters & setters } 

    function get_GenericWebPartID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_OriginalID: string;
    function get_OriginalTypeName: string;
    function get_OriginalPath: string;
    function get_AllowClose: Boolean;
    procedure set_AllowClose(value: Boolean);
    function get_AllowConnect: Boolean;
    procedure set_AllowConnect(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowHide: Boolean;
    procedure set_AllowHide(value: Boolean);
    function get_AllowMinimize: Boolean;
    procedure set_AllowMinimize(value: Boolean);
    function get_AllowZoneChange: Boolean;
    procedure set_AllowZoneChange(value: Boolean);
    function get_AuthorizationFilter: string;
    procedure set_AuthorizationFilter(value: string);
    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_ConnectErrorMessage: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_DisplayTitle: string;
    function get_ExportMode: DNWebPartExportMode;
    procedure set_ExportMode(value: DNWebPartExportMode);
    function get_HasUserData: Boolean;
    function get_HasSharedData: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HelpMode: DNWebPartHelpMode;
    procedure set_HelpMode(value: DNWebPartHelpMode);
    function get_HelpUrl: string;
    procedure set_HelpUrl(value: string);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_IsClosed: Boolean;
    function get_ImportErrorMessage: string;
    procedure set_ImportErrorMessage(value: string);
    function get_IsShared: Boolean;
    function get_IsStandalone: Boolean;
    function get_IsStatic: Boolean;
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);
    function get_Verbs: DNWebPartVerbCollection;
    function get_WebBrowsableObject: DDN.mscorlib.DNObject;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Zone: DNWebPartZoneBase;
    function get_ZoneIndex: Int32;
    function get_Controls: DNControlCollection;
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GenericWebPartID: string read get_GenericWebPartID;
    property ID: string read get_ID write set_ID;
    property OriginalID: string read get_OriginalID;
    property OriginalTypeName: string read get_OriginalTypeName;
    property OriginalPath: string read get_OriginalPath;
    property AllowClose: Boolean read get_AllowClose write set_AllowClose;
    property AllowConnect: Boolean read get_AllowConnect write set_AllowConnect;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowHide: Boolean read get_AllowHide write set_AllowHide;
    property AllowMinimize: Boolean read get_AllowMinimize write set_AllowMinimize;
    property AllowZoneChange: Boolean read get_AllowZoneChange write set_AllowZoneChange;
    property AuthorizationFilter: string read get_AuthorizationFilter write set_AuthorizationFilter;
    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property ConnectErrorMessage: string read get_ConnectErrorMessage;
    property Description: string read get_Description write set_Description;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property DisplayTitle: string read get_DisplayTitle;
    property ExportMode: DNWebPartExportMode read get_ExportMode write set_ExportMode;
    property HasUserData: Boolean read get_HasUserData;
    property HasSharedData: Boolean read get_HasSharedData;
    property Height: DNUnit read get_Height write set_Height;
    property HelpMode: DNWebPartHelpMode read get_HelpMode write set_HelpMode;
    property HelpUrl: string read get_HelpUrl write set_HelpUrl;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property IsClosed: Boolean read get_IsClosed;
    property ImportErrorMessage: string read get_ImportErrorMessage write set_ImportErrorMessage;
    property IsShared: Boolean read get_IsShared;
    property IsStandalone: Boolean read get_IsStandalone;
    property IsStatic: Boolean read get_IsStatic;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
    property Verbs: DNWebPartVerbCollection read get_Verbs;
    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
    property Width: DNUnit read get_Width write set_Width;
    property Zone: DNWebPartZoneBase read get_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex;
    property Controls: DNControlCollection read get_Controls;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNProxyWebPart = class(TDNGenericImport<DNProxyWebPartClass, DNProxyWebPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNErrorWebPartClass = interface(DNProxyWebPartClass)
  ['{B73140DA-EBDD-508F-82B0-D00425329EFD}']
  { constructors } 

    {class} function init(originalID: string; originalTypeName: string; originalPath: string; genericWebPartID: string): DNErrorWebPart;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ErrorWebPart')]
  DNErrorWebPart = interface(DNProxyWebPart)
  ['{C7770938-F13E-3C2B-9A27-1F11A52586E4}']
  { getters & setters } 

    function get_ErrorMessage: string;
    procedure set_ErrorMessage(value: string);
    function get_GenericWebPartID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_OriginalID: string;
    function get_OriginalTypeName: string;
    function get_OriginalPath: string;
    function get_AllowClose: Boolean;
    procedure set_AllowClose(value: Boolean);
    function get_AllowConnect: Boolean;
    procedure set_AllowConnect(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowHide: Boolean;
    procedure set_AllowHide(value: Boolean);
    function get_AllowMinimize: Boolean;
    procedure set_AllowMinimize(value: Boolean);
    function get_AllowZoneChange: Boolean;
    procedure set_AllowZoneChange(value: Boolean);
    function get_AuthorizationFilter: string;
    procedure set_AuthorizationFilter(value: string);
    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_ConnectErrorMessage: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_DisplayTitle: string;
    function get_ExportMode: DNWebPartExportMode;
    procedure set_ExportMode(value: DNWebPartExportMode);
    function get_HasUserData: Boolean;
    function get_HasSharedData: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HelpMode: DNWebPartHelpMode;
    procedure set_HelpMode(value: DNWebPartHelpMode);
    function get_HelpUrl: string;
    procedure set_HelpUrl(value: string);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_IsClosed: Boolean;
    function get_ImportErrorMessage: string;
    procedure set_ImportErrorMessage(value: string);
    function get_IsShared: Boolean;
    function get_IsStandalone: Boolean;
    function get_IsStatic: Boolean;
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);
    function get_Verbs: DNWebPartVerbCollection;
    function get_WebBrowsableObject: DDN.mscorlib.DNObject;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Zone: DNWebPartZoneBase;
    function get_ZoneIndex: Int32;
    function get_Controls: DNControlCollection;
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ErrorMessage: string read get_ErrorMessage write set_ErrorMessage;
    property GenericWebPartID: string read get_GenericWebPartID;
    property ID: string read get_ID write set_ID;
    property OriginalID: string read get_OriginalID;
    property OriginalTypeName: string read get_OriginalTypeName;
    property OriginalPath: string read get_OriginalPath;
    property AllowClose: Boolean read get_AllowClose write set_AllowClose;
    property AllowConnect: Boolean read get_AllowConnect write set_AllowConnect;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowHide: Boolean read get_AllowHide write set_AllowHide;
    property AllowMinimize: Boolean read get_AllowMinimize write set_AllowMinimize;
    property AllowZoneChange: Boolean read get_AllowZoneChange write set_AllowZoneChange;
    property AuthorizationFilter: string read get_AuthorizationFilter write set_AuthorizationFilter;
    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property ConnectErrorMessage: string read get_ConnectErrorMessage;
    property Description: string read get_Description write set_Description;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property DisplayTitle: string read get_DisplayTitle;
    property ExportMode: DNWebPartExportMode read get_ExportMode write set_ExportMode;
    property HasUserData: Boolean read get_HasUserData;
    property HasSharedData: Boolean read get_HasSharedData;
    property Height: DNUnit read get_Height write set_Height;
    property HelpMode: DNWebPartHelpMode read get_HelpMode write set_HelpMode;
    property HelpUrl: string read get_HelpUrl write set_HelpUrl;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property IsClosed: Boolean read get_IsClosed;
    property ImportErrorMessage: string read get_ImportErrorMessage write set_ImportErrorMessage;
    property IsShared: Boolean read get_IsShared;
    property IsStandalone: Boolean read get_IsStandalone;
    property IsStatic: Boolean read get_IsStatic;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
    property Verbs: DNWebPartVerbCollection read get_Verbs;
    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
    property Width: DNUnit read get_Width write set_Width;
    property Zone: DNWebPartZoneBase read get_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex;
    property Controls: DNControlCollection read get_Controls;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNErrorWebPart = class(TDNGenericImport<DNErrorWebPartClass, DNErrorWebPart>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNUnauthorizedWebPartClass = interface(DNProxyWebPartClass)
  ['{363675C0-66A2-54AD-839B-B6A502B8511D}']
  { constructors } 

    {class} function init(webPart: DNWebPart): DNUnauthorizedWebPart; overload;
    {class} function init(originalID: string; originalTypeName: string; originalPath: string; genericWebPartID: string): DNUnauthorizedWebPart; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.UnauthorizedWebPart')]
  DNUnauthorizedWebPart = interface(DNProxyWebPart)
  ['{8C457494-8325-3692-8DF9-D98387D6293D}']
  { getters & setters } 

    function get_GenericWebPartID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_OriginalID: string;
    function get_OriginalTypeName: string;
    function get_OriginalPath: string;
    function get_AllowClose: Boolean;
    procedure set_AllowClose(value: Boolean);
    function get_AllowConnect: Boolean;
    procedure set_AllowConnect(value: Boolean);
    function get_AllowEdit: Boolean;
    procedure set_AllowEdit(value: Boolean);
    function get_AllowHide: Boolean;
    procedure set_AllowHide(value: Boolean);
    function get_AllowMinimize: Boolean;
    procedure set_AllowMinimize(value: Boolean);
    function get_AllowZoneChange: Boolean;
    procedure set_AllowZoneChange(value: Boolean);
    function get_AuthorizationFilter: string;
    procedure set_AuthorizationFilter(value: string);
    function get_CatalogIconImageUrl: string;
    procedure set_CatalogIconImageUrl(value: string);
    function get_ChromeState: DNPartChromeState;
    procedure set_ChromeState(value: DNPartChromeState);
    function get_ChromeType: DNPartChromeType;
    procedure set_ChromeType(value: DNPartChromeType);
    function get_ConnectErrorMessage: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Direction: DNContentDirection;
    procedure set_Direction(value: DNContentDirection);
    function get_DisplayTitle: string;
    function get_ExportMode: DNWebPartExportMode;
    procedure set_ExportMode(value: DNWebPartExportMode);
    function get_HasUserData: Boolean;
    function get_HasSharedData: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_HelpMode: DNWebPartHelpMode;
    procedure set_HelpMode(value: DNWebPartHelpMode);
    function get_HelpUrl: string;
    procedure set_HelpUrl(value: string);
    function get_Hidden: Boolean;
    procedure set_Hidden(value: Boolean);
    function get_IsClosed: Boolean;
    function get_ImportErrorMessage: string;
    procedure set_ImportErrorMessage(value: string);
    function get_IsShared: Boolean;
    function get_IsStandalone: Boolean;
    function get_IsStatic: Boolean;
    function get_Subtitle: string;
    function get_Title: string;
    procedure set_Title(value: string);
    function get_TitleIconImageUrl: string;
    procedure set_TitleIconImageUrl(value: string);
    function get_TitleUrl: string;
    procedure set_TitleUrl(value: string);
    function get_Verbs: DNWebPartVerbCollection;
    function get_WebBrowsableObject: DDN.mscorlib.DNObject;
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_Zone: DNWebPartZoneBase;
    function get_ZoneIndex: Int32;
    function get_Controls: DNControlCollection;
    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_DefaultButton: string;
    procedure set_DefaultButton(value: string);
    function get_GroupingText: string;
    procedure set_GroupingText(value: string);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ScrollBars: DNScrollBars;
    procedure set_ScrollBars(value: DNScrollBars);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CreateEditorParts: DNEditorPartCollection;
    procedure DataBind;
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property GenericWebPartID: string read get_GenericWebPartID;
    property ID: string read get_ID write set_ID;
    property OriginalID: string read get_OriginalID;
    property OriginalTypeName: string read get_OriginalTypeName;
    property OriginalPath: string read get_OriginalPath;
    property AllowClose: Boolean read get_AllowClose write set_AllowClose;
    property AllowConnect: Boolean read get_AllowConnect write set_AllowConnect;
    property AllowEdit: Boolean read get_AllowEdit write set_AllowEdit;
    property AllowHide: Boolean read get_AllowHide write set_AllowHide;
    property AllowMinimize: Boolean read get_AllowMinimize write set_AllowMinimize;
    property AllowZoneChange: Boolean read get_AllowZoneChange write set_AllowZoneChange;
    property AuthorizationFilter: string read get_AuthorizationFilter write set_AuthorizationFilter;
    property CatalogIconImageUrl: string read get_CatalogIconImageUrl write set_CatalogIconImageUrl;
    property ChromeState: DNPartChromeState read get_ChromeState write set_ChromeState;
    property ChromeType: DNPartChromeType read get_ChromeType write set_ChromeType;
    property ConnectErrorMessage: string read get_ConnectErrorMessage;
    property Description: string read get_Description write set_Description;
    property Direction: DNContentDirection read get_Direction write set_Direction;
    property DisplayTitle: string read get_DisplayTitle;
    property ExportMode: DNWebPartExportMode read get_ExportMode write set_ExportMode;
    property HasUserData: Boolean read get_HasUserData;
    property HasSharedData: Boolean read get_HasSharedData;
    property Height: DNUnit read get_Height write set_Height;
    property HelpMode: DNWebPartHelpMode read get_HelpMode write set_HelpMode;
    property HelpUrl: string read get_HelpUrl write set_HelpUrl;
    property Hidden: Boolean read get_Hidden write set_Hidden;
    property IsClosed: Boolean read get_IsClosed;
    property ImportErrorMessage: string read get_ImportErrorMessage write set_ImportErrorMessage;
    property IsShared: Boolean read get_IsShared;
    property IsStandalone: Boolean read get_IsStandalone;
    property IsStatic: Boolean read get_IsStatic;
    property Subtitle: string read get_Subtitle;
    property Title: string read get_Title write set_Title;
    property TitleIconImageUrl: string read get_TitleIconImageUrl write set_TitleIconImageUrl;
    property TitleUrl: string read get_TitleUrl write set_TitleUrl;
    property Verbs: DNWebPartVerbCollection read get_Verbs;
    property WebBrowsableObject: DDN.mscorlib.DNObject read get_WebBrowsableObject;
    property Width: DNUnit read get_Width write set_Width;
    property Zone: DNWebPartZoneBase read get_Zone;
    property ZoneIndex: Int32 read get_ZoneIndex;
    property Controls: DNControlCollection read get_Controls;
    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property DefaultButton: string read get_DefaultButton write set_DefaultButton;
    property GroupingText: string read get_GroupingText write set_GroupingText;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ScrollBars: DNScrollBars read get_ScrollBars write set_ScrollBars;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNUnauthorizedWebPart = class(TDNGenericImport<DNUnauthorizedWebPartClass, DNUnauthorizedWebPart>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapNodeItemClass = interface(DNWebControlClass)
  ['{22A8DECE-EBA9-5880-9231-8BAAABE918A5}']
  { constructors } 

    {class} function init(itemIndex: Int32; itemType: DNSiteMapNodeItemType): DNSiteMapNodeItem;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapNodeItem')]
  DNSiteMapNodeItem = interface(DNWebControl)
  ['{D7AF626B-54C5-3E8D-9C02-4B604D146F32}']
  { getters & setters } 

    function get_SiteMapNode: DNSiteMapNode;
    procedure set_SiteMapNode(value: DNSiteMapNode);
    function get_ItemIndex: Int32;
    function get_ItemType: DNSiteMapNodeItemType;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SiteMapNode: DNSiteMapNode read get_SiteMapNode write set_SiteMapNode;
    property ItemIndex: Int32 read get_ItemIndex;
    property ItemType: DNSiteMapNodeItemType read get_ItemType;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNSiteMapNodeItem = class(TDNGenericImport<DNSiteMapNodeItemClass, DNSiteMapNodeItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableClass = interface(DNWebControlClass)
  ['{96B8C93E-17B0-5FC6-96F4-D378056ED048}']
  { constructors } 

    {class} function init: DNTable;

  end;

  [DNTypeName('System.Web.UI.WebControls.Table')]
  DNTable = interface(DNWebControl)
  ['{9FFADC9B-16A3-3A34-9585-12A527FC1470}']
  { getters & setters } 

    function get_BackImageUrl: string;
    procedure set_BackImageUrl(value: string);
    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_CellPadding: Int32;
    procedure set_CellPadding(value: Int32);
    function get_CellSpacing: Int32;
    procedure set_CellSpacing(value: Int32);
    function get_GridLines: DNGridLines;
    procedure set_GridLines(value: DNGridLines);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_Rows: DNTableRowCollection;
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BackImageUrl: string read get_BackImageUrl write set_BackImageUrl;
    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property CellPadding: Int32 read get_CellPadding write set_CellPadding;
    property CellSpacing: Int32 read get_CellSpacing write set_CellSpacing;
    property GridLines: DNGridLines read get_GridLines write set_GridLines;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property Rows: DNTableRowCollection read get_Rows;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTable = class(TDNGenericImport<DNTableClass, DNTable>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableCellClass = interface(DNWebControlClass)
  ['{8EB6E355-C4BE-5A5E-BBDA-6400C8A18C7D}']
  { constructors } 

    {class} function init: DNTableCell;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableCell')]
  DNTableCell = interface(DNWebControl)
  ['{7CD86D9B-AB1A-3870-A100-F3F2F134ED97}']
  { getters & setters } 

    function get_AssociatedHeaderCellID: TArray<string>;
    procedure set_AssociatedHeaderCellID(value: TArray<string>);
    function get_ColumnSpan: Int32;
    procedure set_ColumnSpan(value: Int32);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AssociatedHeaderCellID: TArray<string> read get_AssociatedHeaderCellID write set_AssociatedHeaderCellID;
    property ColumnSpan: Int32 read get_ColumnSpan write set_ColumnSpan;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property Text: string read get_Text write set_Text;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTableCell = class(TDNGenericImport<DNTableCellClass, DNTableCell>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlFieldCellClass = interface(DNTableCellClass)
  ['{CCDDA041-AF3E-5C05-A417-E074DA06E35F}']
  { constructors } 

    {class} function init(containingField: DNDataControlField): DNDataControlFieldCell;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataControlFieldCell')]
  DNDataControlFieldCell = interface(DNTableCell)
  ['{9D0CFD0B-1D97-3D2C-8BDF-3A8E312BBB38}']
  { getters & setters } 

    function get_ContainingField: DNDataControlField;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_AssociatedHeaderCellID: TArray<string>;
    procedure set_AssociatedHeaderCellID(value: TArray<string>);
    function get_ColumnSpan: Int32;
    procedure set_ColumnSpan(value: Int32);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContainingField: DNDataControlField read get_ContainingField;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property AssociatedHeaderCellID: TArray<string> read get_AssociatedHeaderCellID write set_AssociatedHeaderCellID;
    property ColumnSpan: Int32 read get_ColumnSpan write set_ColumnSpan;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property Text: string read get_Text write set_Text;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
  end;

  TDNDataControlFieldCell = class(TDNGenericImport<DNDataControlFieldCellClass, DNDataControlFieldCell>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlFieldHeaderCellClass = interface(DNDataControlFieldCellClass)
  ['{AEF1A21D-A710-5E07-AC44-0ED929A9A1F1}']
  { constructors } 

    {class} function init(containingField: DNDataControlField): DNDataControlFieldHeaderCell;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataControlFieldHeaderCell')]
  DNDataControlFieldHeaderCell = interface(DNDataControlFieldCell)
  ['{D57BCB9E-6388-3C51-8BBE-0A1E1FE6AD42}']
  { getters & setters } 

    function get_AbbreviatedText: string;
    procedure set_AbbreviatedText(value: string);
    function get_Scope: DNTableHeaderScope;
    procedure set_Scope(value: DNTableHeaderScope);
    function get_ContainingField: DNDataControlField;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_AssociatedHeaderCellID: TArray<string>;
    procedure set_AssociatedHeaderCellID(value: TArray<string>);
    function get_ColumnSpan: Int32;
    procedure set_ColumnSpan(value: Int32);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AbbreviatedText: string read get_AbbreviatedText write set_AbbreviatedText;
    property Scope: DNTableHeaderScope read get_Scope write set_Scope;
    property ContainingField: DNDataControlField read get_ContainingField;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property AssociatedHeaderCellID: TArray<string> read get_AssociatedHeaderCellID write set_AssociatedHeaderCellID;
    property ColumnSpan: Int32 read get_ColumnSpan write set_ColumnSpan;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property Text: string read get_Text write set_Text;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
  end;

  TDNDataControlFieldHeaderCell = class(TDNGenericImport<DNDataControlFieldHeaderCellClass, DNDataControlFieldHeaderCell>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableHeaderCellClass = interface(DNTableCellClass)
  ['{5B8FAFF9-3148-5373-B908-2023C15C4BA8}']
  { constructors } 

    {class} function init: DNTableHeaderCell;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableHeaderCell')]
  DNTableHeaderCell = interface(DNTableCell)
  ['{5586FAEA-0114-3853-80CB-6BB922CC30B9}']
  { getters & setters } 

    function get_AbbreviatedText: string;
    procedure set_AbbreviatedText(value: string);
    function get_Scope: DNTableHeaderScope;
    procedure set_Scope(value: DNTableHeaderScope);
    function get_CategoryText: TArray<string>;
    procedure set_CategoryText(value: TArray<string>);
    function get_AssociatedHeaderCellID: TArray<string>;
    procedure set_AssociatedHeaderCellID(value: TArray<string>);
    function get_ColumnSpan: Int32;
    procedure set_ColumnSpan(value: Int32);
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_RowSpan: Int32;
    procedure set_RowSpan(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AbbreviatedText: string read get_AbbreviatedText write set_AbbreviatedText;
    property Scope: DNTableHeaderScope read get_Scope write set_Scope;
    property CategoryText: TArray<string> read get_CategoryText write set_CategoryText;
    property AssociatedHeaderCellID: TArray<string> read get_AssociatedHeaderCellID write set_AssociatedHeaderCellID;
    property ColumnSpan: Int32 read get_ColumnSpan write set_ColumnSpan;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property RowSpan: Int32 read get_RowSpan write set_RowSpan;
    property Text: string read get_Text write set_Text;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTableHeaderCell = class(TDNGenericImport<DNTableHeaderCellClass, DNTableHeaderCell>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableRowClass = interface(DNWebControlClass)
  ['{BE4FFB59-4370-58C3-8C86-5FC229F39CD3}']
  { constructors } 

    {class} function init: DNTableRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableRow')]
  DNTableRow = interface(DNWebControl)
  ['{29DF00BF-C569-3BC1-9CEE-7B93985345D0}']
  { getters & setters } 

    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTableRow = class(TDNGenericImport<DNTableRowClass, DNTableRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemClass = interface(DNTableRowClass)
  ['{8D826786-8ACA-552E-919D-E1D76D5FC96B}']
  { constructors } 

    {class} function init(itemIndex: Int32; dataSetIndex: Int32; itemType: DNListItemType): DNDataGridItem;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridItem')]
  DNDataGridItem = interface(DNTableRow)
  ['{5DEE6689-DC5A-38B7-9629-60C57D26519C}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_DataSetIndex: Int32;
    function get_ItemIndex: Int32;
    function get_ItemType: DNListItemType;
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    property DataSetIndex: Int32 read get_DataSetIndex;
    property ItemIndex: Int32 read get_ItemIndex;
    property ItemType: DNListItemType read get_ItemType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDataGridItem = class(TDNGenericImport<DNDataGridItemClass, DNDataGridItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewRowClass = interface(DNTableRowClass)
  ['{B66216DD-7E46-559C-8C34-B85277049797}']
  { constructors } 

    {class} function init(rowIndex: Int32; rowType: DNDataControlRowType; rowState: DNDataControlRowState): DNDetailsViewRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewRow')]
  DNDetailsViewRow = interface(DNTableRow)
  ['{F61B8696-2499-31EA-916D-29555D20F071}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_RowState: DNDataControlRowState;
    function get_RowType: DNDataControlRowType;
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property RowState: DNDataControlRowState read get_RowState;
    property RowType: DNDataControlRowType read get_RowType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDetailsViewRow = class(TDNGenericImport<DNDetailsViewRowClass, DNDetailsViewRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewPagerRowClass = interface(DNDetailsViewRowClass)
  ['{A0DAA638-B294-5148-AA96-F2F1DFB5AE7B}']
  { constructors } 

    {class} function init(rowIndex: Int32; rowType: DNDataControlRowType; rowState: DNDataControlRowState): DNDetailsViewPagerRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewPagerRow')]
  DNDetailsViewPagerRow = interface(DNDetailsViewRow)
  ['{5BF71730-1698-3E54-B093-1719048BEAAE}']
  { getters & setters } 

    function get_RowIndex: Int32;
    function get_RowState: DNDataControlRowState;
    function get_RowType: DNDataControlRowType;
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RowIndex: Int32 read get_RowIndex;
    property RowState: DNDataControlRowState read get_RowState;
    property RowType: DNDataControlRowType read get_RowType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNDetailsViewPagerRow = class(TDNGenericImport<DNDetailsViewPagerRowClass, DNDetailsViewPagerRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewRowClass = interface(DNTableRowClass)
  ['{10C36840-1808-58A3-943E-A7A687473288}']
  { constructors } 

    {class} function init(itemIndex: Int32; rowType: DNDataControlRowType; rowState: DNDataControlRowState): DNFormViewRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewRow')]
  DNFormViewRow = interface(DNTableRow)
  ['{F285D0B1-1849-33DF-ADFA-99609833FCEE}']
  { getters & setters } 

    function get_ItemIndex: Int32;
    function get_RowState: DNDataControlRowState;
    function get_RowType: DNDataControlRowType;
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemIndex: Int32 read get_ItemIndex;
    property RowState: DNDataControlRowState read get_RowState;
    property RowType: DNDataControlRowType read get_RowType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNFormViewRow = class(TDNGenericImport<DNFormViewRowClass, DNFormViewRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormViewPagerRowClass = interface(DNFormViewRowClass)
  ['{C63ED5E6-FFC6-5D03-8071-B72A93C93B7A}']
  { constructors } 

    {class} function init(rowIndex: Int32; rowType: DNDataControlRowType; rowState: DNDataControlRowState): DNFormViewPagerRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormViewPagerRow')]
  DNFormViewPagerRow = interface(DNFormViewRow)
  ['{BF750D09-23A5-38C4-8DC3-B75F4C0D1A38}']
  { getters & setters } 

    function get_ItemIndex: Int32;
    function get_RowState: DNDataControlRowState;
    function get_RowType: DNDataControlRowType;
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemIndex: Int32 read get_ItemIndex;
    property RowState: DNDataControlRowState read get_RowState;
    property RowType: DNDataControlRowType read get_RowType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNFormViewPagerRow = class(TDNGenericImport<DNFormViewPagerRowClass, DNFormViewPagerRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowClass = interface(DNTableRowClass)
  ['{E251F404-0558-5E1B-9464-7CA4DCB8ACD8}']
  { constructors } 

    {class} function init(rowIndex: Int32; dataItemIndex: Int32; rowType: DNDataControlRowType; rowState: DNDataControlRowState): DNGridViewRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewRow')]
  DNGridViewRow = interface(DNTableRow)
  ['{9901CAF6-AA2A-3CFF-857B-370C8255CB04}']
  { getters & setters } 

    function get_DataItem: DDN.mscorlib.DNObject;
    procedure set_DataItem(value: DDN.mscorlib.DNObject);
    function get_DataItemIndex: Int32;
    function get_RowIndex: Int32;
    function get_RowState: DNDataControlRowState;
    procedure set_RowState(value: DNDataControlRowState);
    function get_RowType: DNDataControlRowType;
    procedure set_RowType(value: DNDataControlRowType);
    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataItem: DDN.mscorlib.DNObject read get_DataItem write set_DataItem;
    property DataItemIndex: Int32 read get_DataItemIndex;
    property RowIndex: Int32 read get_RowIndex;
    property RowState: DNDataControlRowState read get_RowState write set_RowState;
    property RowType: DNDataControlRowType read get_RowType write set_RowType;
    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNGridViewRow = class(TDNGenericImport<DNGridViewRowClass, DNGridViewRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableFooterRowClass = interface(DNTableRowClass)
  ['{69DAC03D-A664-5B72-A7BF-CC83F587E085}']
  { constructors } 

    {class} function init: DNTableFooterRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableFooterRow')]
  DNTableFooterRow = interface(DNTableRow)
  ['{BD5F8C53-0492-3044-85D0-BE6F8E3FA00D}']
  { getters & setters } 

    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTableFooterRow = class(TDNGenericImport<DNTableFooterRowClass, DNTableFooterRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableHeaderRowClass = interface(DNTableRowClass)
  ['{41249063-7BAA-5E96-87AC-026FFDFE2779}']
  { constructors } 

    {class} function init: DNTableHeaderRow;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableHeaderRow')]
  DNTableHeaderRow = interface(DNTableRow)
  ['{04D072B3-2F86-3886-B214-31F0729CFB3E}']
  { getters & setters } 

    function get_Cells: DNTableCellCollection;
    function get_HorizontalAlign: DNHorizontalAlign;
    procedure set_HorizontalAlign(value: DNHorizontalAlign);
    function get_SupportsDisabledAttribute: Boolean;
    function get_TableSection: DNTableRowSection;
    procedure set_TableSection(value: DNTableRowSection);
    function get_VerticalAlign: DNVerticalAlign;
    procedure set_VerticalAlign(value: DNVerticalAlign);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cells: DNTableCellCollection read get_Cells;
    property HorizontalAlign: DNHorizontalAlign read get_HorizontalAlign write set_HorizontalAlign;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property TableSection: DNTableRowSection read get_TableSection write set_TableSection;
    property VerticalAlign: DNVerticalAlign read get_VerticalAlign write set_VerticalAlign;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTableHeaderRow = class(TDNGenericImport<DNTableHeaderRowClass, DNTableHeaderRow>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTextBoxClass = interface(DNWebControlClass)
  ['{99DA43F9-1FCF-5BD0-A4E1-7DBF05AC3367}']
  { constructors } 

    {class} function init: DNTextBox;

  end;

  [DNTypeName('System.Web.UI.WebControls.TextBox')]
  DNTextBox = interface(DNWebControl)
  ['{83322B12-88FC-39C7-B2B4-5BE13693AF6B}']
  { getters & setters } 

    function get_AutoCompleteType: DNAutoCompleteType;
    procedure set_AutoCompleteType(value: DNAutoCompleteType);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_Columns: Int32;
    procedure set_Columns(value: Int32);
    function get_MaxLength: Int32;
    procedure set_MaxLength(value: Int32);
    function get_TextMode: DNTextBoxMode;
    procedure set_TextMode(value: DNTextBoxMode);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Rows: Int32;
    procedure set_Rows(value: Int32);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_Wrap: Boolean;
    procedure set_Wrap(value: Boolean);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SupportsDisabledAttribute: Boolean;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_TextChanged(value: DDN.mscorlib.DNEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoCompleteType: DNAutoCompleteType read get_AutoCompleteType write set_AutoCompleteType;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property Columns: Int32 read get_Columns write set_Columns;
    property MaxLength: Int32 read get_MaxLength write set_MaxLength;
    property TextMode: DNTextBoxMode read get_TextMode write set_TextMode;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Rows: Int32 read get_Rows write set_Rows;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property Wrap: Boolean read get_Wrap write set_Wrap;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNTextBox = class(TDNGenericImport<DNTextBoxClass, DNTextBox>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNValidationSummaryClass = interface(DNWebControlClass)
  ['{4FDF65F5-F157-5872-A6E0-0CEA28B86CAB}']
  { constructors } 

    {class} function init: DNValidationSummary;

  end;

  [DNTypeName('System.Web.UI.WebControls.ValidationSummary')]
  DNValidationSummary = interface(DNWebControl)
  ['{036C4784-89D4-3967-A8FF-8404946CDA30}']
  { getters & setters } 

    function get_DisplayMode: DNValidationSummaryDisplayMode;
    procedure set_DisplayMode(value: DNValidationSummaryDisplayMode);
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_ShowValidationErrors: Boolean;
    procedure set_ShowValidationErrors(value: Boolean);
    function get_ShowModelStateErrors: Boolean;
    procedure set_ShowModelStateErrors(value: Boolean);
    function get_ForeColor: DDN.System.Drawing.DNColor;
    procedure set_ForeColor(value: DDN.System.Drawing.DNColor);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_SupportsDisabledAttribute: Boolean;
    function get_ShowMessageBox: Boolean;
    procedure set_ShowMessageBox(value: Boolean);
    function get_ShowSummary: Boolean;
    procedure set_ShowSummary(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_Attributes: DNAttributeCollection;
    function get_BackColor: DDN.System.Drawing.DNColor;
    procedure set_BackColor(value: DDN.System.Drawing.DNColor);
    function get_BorderColor: DDN.System.Drawing.DNColor;
    procedure set_BorderColor(value: DDN.System.Drawing.DNColor);
    function get_BorderWidth: DNUnit;
    procedure set_BorderWidth(value: DNUnit);
    function get_BorderStyle: DNBorderStyle;
    procedure set_BorderStyle(value: DNBorderStyle);
    function get_ControlStyle: DNStyle;
    function get_ControlStyleCreated: Boolean;
    function get_CssClass: string;
    procedure set_CssClass(value: string);
    function get_Style: DNCssStyleCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_Font: DNFontInfo;
    function get_HasAttributes: Boolean;
    function get_Height: DNUnit;
    procedure set_Height(value: DNUnit);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Width: DNUnit;
    procedure set_Width(value: DNUnit);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_Controls: DNControlCollection;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure ApplyStyle(s: DNStyle);
    procedure MergeStyle(s: DNStyle);
    procedure RenderBeginTag(writer: DNHtmlTextWriter);
    procedure RenderEndTag(writer: DNHtmlTextWriter);
    procedure CopyBaseAttributes(controlSrc: DNWebControl);
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure Focus;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DisplayMode: DNValidationSummaryDisplayMode read get_DisplayMode write set_DisplayMode;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property ShowValidationErrors: Boolean read get_ShowValidationErrors write set_ShowValidationErrors;
    property ShowModelStateErrors: Boolean read get_ShowModelStateErrors write set_ShowModelStateErrors;
    property ForeColor: DDN.System.Drawing.DNColor read get_ForeColor write set_ForeColor;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property SupportsDisabledAttribute: Boolean read get_SupportsDisabledAttribute;
    property ShowMessageBox: Boolean read get_ShowMessageBox write set_ShowMessageBox;
    property ShowSummary: Boolean read get_ShowSummary write set_ShowSummary;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property Attributes: DNAttributeCollection read get_Attributes;
    property BackColor: DDN.System.Drawing.DNColor read get_BackColor write set_BackColor;
    property BorderColor: DDN.System.Drawing.DNColor read get_BorderColor write set_BorderColor;
    property BorderWidth: DNUnit read get_BorderWidth write set_BorderWidth;
    property BorderStyle: DNBorderStyle read get_BorderStyle write set_BorderStyle;
    property ControlStyle: DNStyle read get_ControlStyle;
    property ControlStyleCreated: Boolean read get_ControlStyleCreated;
    property CssClass: string read get_CssClass write set_CssClass;
    property Style: DNCssStyleCollection read get_Style;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property Font: DNFontInfo read get_Font;
    property HasAttributes: Boolean read get_HasAttributes;
    property Height: DNUnit read get_Height write set_Height;
    property SkinID: string read get_SkinID write set_SkinID;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Width: DNUnit read get_Width write set_Width;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property Controls: DNControlCollection read get_Controls;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNValidationSummary = class(TDNGenericImport<DNValidationSummaryClass, DNValidationSummary>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNProxyWebPartManagerClass = interface(DNControlClass)
  ['{7850FC55-8530-5FF3-9A20-81B7E15A9CBC}']
  { constructors } 

    {class} function init: DNProxyWebPartManager;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ProxyWebPartManager')]
  DNProxyWebPartManager = interface(DNControl)
  ['{FD1E26FD-39F4-3AA5-AB10-6752D8223645}']
  { getters & setters } 

    function get_ClientID: string;
    function get_Controls: DNControlCollection;
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_StaticConnections: DNProxyWebPartConnectionCollection;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientID: string read get_ClientID;
    property Controls: DNControlCollection read get_Controls;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property StaticConnections: DNProxyWebPartConnectionCollection read get_StaticConnections;
    property Visible: Boolean read get_Visible write set_Visible;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNProxyWebPartManager = class(TDNGenericImport<DNProxyWebPartManagerClass, DNProxyWebPartManager>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartManagerClass = interface(DNControlClass)
  ['{B1D4D8E8-4429-53EA-AD34-B4FFD2C30F60}']
  { constructors } 

    {class} function init: DNWebPartManager;

  { static fields getter & setter } 

   function __fakeFieldGet_CatalogDisplayMode: DNWebPartDisplayMode;
   function __fakeFieldGet_ConnectDisplayMode: DNWebPartDisplayMode;
   function __fakeFieldGet_DesignDisplayMode: DNWebPartDisplayMode;
   function __fakeFieldGet_EditDisplayMode: DNWebPartDisplayMode;
   function __fakeFieldGet_BrowseDisplayMode: DNWebPartDisplayMode;

  { static fields } 

    {class} property CatalogDisplayMode: DNWebPartDisplayMode read __fakeFieldGet_CatalogDisplayMode;
    {class} property ConnectDisplayMode: DNWebPartDisplayMode read __fakeFieldGet_ConnectDisplayMode;
    {class} property DesignDisplayMode: DNWebPartDisplayMode read __fakeFieldGet_DesignDisplayMode;
    {class} property EditDisplayMode: DNWebPartDisplayMode read __fakeFieldGet_EditDisplayMode;
    {class} property BrowseDisplayMode: DNWebPartDisplayMode read __fakeFieldGet_BrowseDisplayMode;

  { static methods } 

    {class} function GetCurrentWebPartManager(page: DNPage): DNWebPartManager;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartManager')]
  DNWebPartManager = interface(DNControl)
  ['{0C3607CF-01EA-36D4-B634-26CA44C5EE77}']
  { getters & setters } 

    function get_AvailableTransformers: DNTransformerTypeCollection;
    function get_CloseProviderWarning: string;
    procedure set_CloseProviderWarning(value: string);
    function get_Connections: DNWebPartConnectionCollection;
    function get_Controls: DNControlCollection;
    function get_DeleteWarning: string;
    procedure set_DeleteWarning(value: string);
    function get_DisplayMode: DNWebPartDisplayMode;
    procedure set_DisplayMode(value: DNWebPartDisplayMode);
    function get_DisplayModes: DNWebPartDisplayModeCollection;
    function get_EnableClientScript: Boolean;
    procedure set_EnableClientScript(value: Boolean);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_ExportSensitiveDataWarning: string;
    procedure set_ExportSensitiveDataWarning(value: string);
    function get_Personalization: DNWebPartPersonalization;
    function get_SelectedWebPart: DNWebPart;
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_StaticConnections: DNWebPartConnectionCollection;
    function get_SupportedDisplayModes: DNWebPartDisplayModeCollection;
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_WebParts: DNWebPartCollection;
    function get_Zones: DNWebPartZoneCollection;
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ClientID: string;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_AuthorizeWebPart(value: DNWebPartAuthorizationEventHandler);
    procedure remove_AuthorizeWebPart(value: DNWebPartAuthorizationEventHandler);
    procedure add_ConnectionsActivated(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ConnectionsActivated(value: DDN.mscorlib.DNEventHandler);
    procedure add_ConnectionsActivating(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ConnectionsActivating(value: DDN.mscorlib.DNEventHandler);
    procedure add_DisplayModeChanged(value: DNWebPartDisplayModeEventHandler);
    procedure remove_DisplayModeChanged(value: DNWebPartDisplayModeEventHandler);
    procedure add_DisplayModeChanging(value: DNWebPartDisplayModeCancelEventHandler);
    procedure remove_DisplayModeChanging(value: DNWebPartDisplayModeCancelEventHandler);
    procedure add_SelectedWebPartChanged(value: DNWebPartEventHandler);
    procedure remove_SelectedWebPartChanged(value: DNWebPartEventHandler);
    procedure add_SelectedWebPartChanging(value: DNWebPartCancelEventHandler);
    procedure remove_SelectedWebPartChanging(value: DNWebPartCancelEventHandler);
    procedure add_WebPartAdded(value: DNWebPartEventHandler);
    procedure remove_WebPartAdded(value: DNWebPartEventHandler);
    procedure add_WebPartAdding(value: DNWebPartAddingEventHandler);
    procedure remove_WebPartAdding(value: DNWebPartAddingEventHandler);
    procedure add_WebPartClosed(value: DNWebPartEventHandler);
    procedure remove_WebPartClosed(value: DNWebPartEventHandler);
    procedure add_WebPartClosing(value: DNWebPartCancelEventHandler);
    procedure remove_WebPartClosing(value: DNWebPartCancelEventHandler);
    procedure add_WebPartDeleted(value: DNWebPartEventHandler);
    procedure remove_WebPartDeleted(value: DNWebPartEventHandler);
    procedure add_WebPartDeleting(value: DNWebPartCancelEventHandler);
    procedure remove_WebPartDeleting(value: DNWebPartCancelEventHandler);
    procedure add_WebPartMoved(value: DNWebPartEventHandler);
    procedure remove_WebPartMoved(value: DNWebPartEventHandler);
    procedure add_WebPartMoving(value: DNWebPartMovingEventHandler);
    procedure remove_WebPartMoving(value: DNWebPartMovingEventHandler);
    procedure add_WebPartsConnected(value: DNWebPartConnectionsEventHandler);
    procedure remove_WebPartsConnected(value: DNWebPartConnectionsEventHandler);
    procedure add_WebPartsConnecting(value: DNWebPartConnectionsCancelEventHandler);
    procedure remove_WebPartsConnecting(value: DNWebPartConnectionsCancelEventHandler);
    procedure add_WebPartsDisconnected(value: DNWebPartConnectionsEventHandler);
    procedure remove_WebPartsDisconnected(value: DNWebPartConnectionsEventHandler);
    procedure add_WebPartsDisconnecting(value: DNWebPartConnectionsCancelEventHandler);
    procedure remove_WebPartsDisconnecting(value: DNWebPartConnectionsCancelEventHandler);
    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function AddWebPart(webPart: DNWebPart; zone: DNWebPartZoneBase; zoneIndex: Int32): DNWebPart;
    procedure BeginWebPartConnecting(webPart: DNWebPart);
    procedure BeginWebPartEditing(webPart: DNWebPart);
    function CanConnectWebParts(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint): Boolean; overload;
    function CanConnectWebParts(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint; transformer: DNWebPartTransformer): Boolean; overload;
    procedure CloseWebPart(webPart: DNWebPart);
    function ConnectWebParts(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint): DNWebPartConnection; overload;
    function ConnectWebParts(provider: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint; consumer: DNWebPart; consumerConnectionPoint: DNConsumerConnectionPoint; transformer: DNWebPartTransformer): DNWebPartConnection; overload;
    function CreateWebPart(control: DNControl): DNGenericWebPart;
    procedure DeleteWebPart(webPart: DNWebPart);
    procedure DisconnectWebParts(connection: DNWebPartConnection);
    procedure EndWebPartConnecting;
    procedure EndWebPartEditing;
    function GetConsumerConnectionPoints(webPart: DNWebPart): DNConsumerConnectionPointCollection;
    function GetGenericWebPart(control: DNControl): DNGenericWebPart;
    function GetProviderConnectionPoints(webPart: DNWebPart): DNProviderConnectionPointCollection;
    function IsAuthorized(webPart: DNWebPart): Boolean; overload;
    procedure MoveWebPart(webPart: DNWebPart; zone: DNWebPartZoneBase; zoneIndex: Int32);
    procedure ExportWebPart(webPart: DNWebPart; writer: DDN.System.Xml.DNXmlWriter);
    procedure Focus;
    function GetExportUrl(webPart: DNWebPart): string;
    function ImportWebPart(reader: DDN.System.Xml.DNXmlReader; out errorMessage: string): DNWebPart;
    function IsAuthorized(&type: DDN.mscorlib.DNType; path: string; authorizationFilter: string; isShared: Boolean): Boolean; overload;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AvailableTransformers: DNTransformerTypeCollection read get_AvailableTransformers;
    property CloseProviderWarning: string read get_CloseProviderWarning write set_CloseProviderWarning;
    property Connections: DNWebPartConnectionCollection read get_Connections;
    property Controls: DNControlCollection read get_Controls;
    property DeleteWarning: string read get_DeleteWarning write set_DeleteWarning;
    property DisplayMode: DNWebPartDisplayMode read get_DisplayMode write set_DisplayMode;
    property DisplayModes: DNWebPartDisplayModeCollection read get_DisplayModes;
    property EnableClientScript: Boolean read get_EnableClientScript write set_EnableClientScript;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property ExportSensitiveDataWarning: string read get_ExportSensitiveDataWarning write set_ExportSensitiveDataWarning;
    property Personalization: DNWebPartPersonalization read get_Personalization;
    property SelectedWebPart: DNWebPart read get_SelectedWebPart;
    property SkinID: string read get_SkinID write set_SkinID;
    property StaticConnections: DNWebPartConnectionCollection read get_StaticConnections;
    property SupportedDisplayModes: DNWebPartDisplayModeCollection read get_SupportedDisplayModes;
    property Visible: Boolean read get_Visible write set_Visible;
    property WebParts: DNWebPartCollection read get_WebParts;
    property Zones: DNWebPartZoneCollection read get_Zones;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ClientID: string read get_ClientID;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNWebPartManager = class(TDNGenericImport<DNWebPartManagerClass, DNWebPartManager>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNXmlClass = interface(DNControlClass)
  ['{BBED1AD7-F22C-50B2-8BD9-F03C73434131}']
  { constructors } 

    {class} function init: DNXml;

  end;

  [DNTypeName('System.Web.UI.WebControls.Xml')]
  DNXml = interface(DNControl)
  ['{13FE6F8F-5B66-37FB-AC7C-8DAC65C801F6}']
  { getters & setters } 

    function get_ClientID: string;
    function get_Controls: DNControlCollection;
    function get_Document: DDN.System.Xml.DNXmlDocument;
    procedure set_Document(value: DDN.System.Xml.DNXmlDocument);
    function get_DocumentContent: string;
    procedure set_DocumentContent(value: string);
    function get_DocumentSource: string;
    procedure set_DocumentSource(value: string);
    function get_EnableTheming: Boolean;
    procedure set_EnableTheming(value: Boolean);
    function get_SkinID: string;
    procedure set_SkinID(value: string);
    function get_Transform: DDN.System.Xml.DNXslTransform;
    procedure set_Transform(value: DDN.System.Xml.DNXslTransform);
    function get_TransformArgumentList: DDN.System.Xml.DNXsltArgumentList;
    procedure set_TransformArgumentList(value: DDN.System.Xml.DNXsltArgumentList);
    function get_TransformSource: string;
    procedure set_TransformSource(value: string);
    function get_XPathNavigator: DDN.System.Xml.DNXPathNavigator;
    procedure set_XPathNavigator(value: DDN.System.Xml.DNXPathNavigator);
    function get_ClientIDMode: DNClientIDMode;
    procedure set_ClientIDMode(value: DNClientIDMode);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_EnableViewState: Boolean;
    procedure set_EnableViewState(value: Boolean);
    function get_ViewStateMode: DNViewStateMode;
    procedure set_ViewStateMode(value: DNViewStateMode);
    function get_NamingContainer: DNControl;
    function get_BindingContainer: DNControl;
    function get_DataItemContainer: DNControl;
    function get_DataKeysContainer: DNControl;
    function get_Page: DNPage;
    procedure set_Page(value: DNPage);
    function get_RenderingCompatibility: DDN.mscorlib.DNVersion;
    procedure set_RenderingCompatibility(value: DDN.mscorlib.DNVersion);
    function get_TemplateControl: DNTemplateControl;
    procedure set_TemplateControl(value: DNTemplateControl);
    function get_Parent: DNControl;
    function get_TemplateSourceDirectory: string;
    function get_AppRelativeTemplateSourceDirectory: string;
    procedure set_AppRelativeTemplateSourceDirectory(value: string);
    function get_Site: DDN.System.DNISite;
    procedure set_Site(value: DDN.System.DNISite);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);
    function get_UniqueID: string;
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);

  { events } 

    procedure add_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Disposed(value: DDN.mscorlib.DNEventHandler);
    procedure add_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataBinding(value: DDN.mscorlib.DNEventHandler);
    procedure add_Init(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Init(value: DDN.mscorlib.DNEventHandler);
    procedure add_Load(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Load(value: DDN.mscorlib.DNEventHandler);
    procedure add_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PreRender(value: DDN.mscorlib.DNEventHandler);
    procedure add_Unload(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Unload(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function FindControl(id: string): DNControl;
    function HasControls: Boolean;
    procedure Focus;
    function GetRouteUrl(routeParameters: DNRouteValueDictionary): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DNRouteValueDictionary): string; overload;
    procedure ApplyStyleSheetSkin(page: DNPage);
    procedure DataBind;
    procedure RenderControl(writer: DNHtmlTextWriter);
    procedure Dispose;
    function ResolveUrl(relativeUrl: string): string;
    function ResolveClientUrl(relativeUrl: string): string;
    procedure SetTraceData(traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject); overload;
    function GetRouteUrl(routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetRouteUrl(routeName: string; routeParameters: DDN.mscorlib.DNObject): string; overload;
    function GetUniqueIDRelativeTo(control: DNControl): string;
    procedure SetRenderMethodDelegate(renderMethod: DNRenderMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ClientID: string read get_ClientID;
    property Controls: DNControlCollection read get_Controls;
    property Document: DDN.System.Xml.DNXmlDocument read get_Document write set_Document;
    property DocumentContent: string read get_DocumentContent write set_DocumentContent;
    property DocumentSource: string read get_DocumentSource write set_DocumentSource;
    property EnableTheming: Boolean read get_EnableTheming write set_EnableTheming;
    property SkinID: string read get_SkinID write set_SkinID;
    property Transform: DDN.System.Xml.DNXslTransform read get_Transform write set_Transform;
    property TransformArgumentList: DDN.System.Xml.DNXsltArgumentList read get_TransformArgumentList write set_TransformArgumentList;
    property TransformSource: string read get_TransformSource write set_TransformSource;
    property XPathNavigator: DDN.System.Xml.DNXPathNavigator read get_XPathNavigator write set_XPathNavigator;
    property ClientIDMode: DNClientIDMode read get_ClientIDMode write set_ClientIDMode;
    property ID: string read get_ID write set_ID;
    property EnableViewState: Boolean read get_EnableViewState write set_EnableViewState;
    property ViewStateMode: DNViewStateMode read get_ViewStateMode write set_ViewStateMode;
    property NamingContainer: DNControl read get_NamingContainer;
    property BindingContainer: DNControl read get_BindingContainer;
    property DataItemContainer: DNControl read get_DataItemContainer;
    property DataKeysContainer: DNControl read get_DataKeysContainer;
    property Page: DNPage read get_Page write set_Page;
    property RenderingCompatibility: DDN.mscorlib.DNVersion read get_RenderingCompatibility write set_RenderingCompatibility;
    property TemplateControl: DNTemplateControl read get_TemplateControl write set_TemplateControl;
    property Parent: DNControl read get_Parent;
    property TemplateSourceDirectory: string read get_TemplateSourceDirectory;
    property AppRelativeTemplateSourceDirectory: string read get_AppRelativeTemplateSourceDirectory write set_AppRelativeTemplateSourceDirectory;
    property Site: DDN.System.DNISite read get_Site write set_Site;
    property Visible: Boolean read get_Visible write set_Visible;
    property UniqueID: string read get_UniqueID;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
  end;

  TDNXml = class(TDNGenericImport<DNXmlClass, DNXml>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlBuilderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C92BDDCF-B526-5D26-ACC8-39F6E766AF72}']
  { constructors } 

    {class} function init: DNControlBuilder;

  { static fields getter & setter } 

   function __fakeFieldGet_DesignerFilter: string;

  { static fields } 

    {class} property DesignerFilter: string read __fakeFieldGet_DesignerFilter;

  { static methods } 

    {class} function CreateBuilderFromType(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary; line: Int32; sourceFileName: string): DNControlBuilder;

  end;

  [DNTypeName('System.Web.UI.ControlBuilder')]
  DNControlBuilder = interface(DDN.mscorlib.DNObject)
  ['{2027C8E5-C0D4-3F12-B06F-314608CE4939}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNControlBuilder = class(TDNGenericImport<DNControlBuilderClass, DNControlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNCodeStatementBuilderClass = interface(DNControlBuilderClass)
  ['{442D2A8D-EC21-5D72-AC8D-853F4EE8C72E}']
  end;

  [DNTypeName('System.Web.UI.CodeStatementBuilder')]
  DNCodeStatementBuilder = interface(DNControlBuilder)
  ['{28FA811F-C65C-36C3-9ECB-3AB83EF9BCF3}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function BuildStatement(writerReferenceExpression: DDN.System.DNCodeArgumentReferenceExpression): DDN.System.DNCodeStatement;
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNCodeStatementBuilder = class(TDNGenericImport<DNCodeStatementBuilderClass, DNCodeStatementBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataSourceControlBuilderClass = interface(DNControlBuilderClass)
  ['{88603E35-E4C2-56D8-AA29-D55F0F4F549D}']
  { constructors } 

    {class} function init: DNDataSourceControlBuilder;

  end;

  [DNTypeName('System.Web.UI.DataSourceControlBuilder')]
  DNDataSourceControlBuilder = interface(DNControlBuilder)
  ['{2F60BC46-D9A8-3E59-B78A-552E3E3B817F}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNDataSourceControlBuilder = class(TDNGenericImport<DNDataSourceControlBuilderClass, DNDataSourceControlBuilder>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlEmptyTagControlBuilderClass = interface(DNControlBuilderClass)
  ['{164058E5-CEB8-57DD-A92B-515EE7F4AFE7}']
  { constructors } 

    {class} function init: DNHtmlEmptyTagControlBuilder;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlEmptyTagControlBuilder')]
  DNHtmlEmptyTagControlBuilder = interface(DNControlBuilder)
  ['{982638DD-EFF5-3A80-A342-504ED32DFE0A}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function HasBody: Boolean;
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNHtmlEmptyTagControlBuilder = class(TDNGenericImport<DNHtmlEmptyTagControlBuilderClass, DNHtmlEmptyTagControlBuilder>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlHeadBuilderClass = interface(DNControlBuilderClass)
  ['{A97A9D03-1F2A-53CA-81AF-B548A2860D92}']
  { constructors } 

    {class} function init: DNHtmlHeadBuilder;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlHeadBuilder')]
  DNHtmlHeadBuilder = interface(DNControlBuilder)
  ['{AEB13E76-CE69-34C7-9171-90AA82167C28}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNHtmlHeadBuilder = class(TDNGenericImport<DNHtmlHeadBuilderClass, DNHtmlHeadBuilder>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlSelectBuilderClass = interface(DNControlBuilderClass)
  ['{172FBD14-4066-5512-BDE5-359C96582B96}']
  { constructors } 

    {class} function init: DNHtmlSelectBuilder;

  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlSelectBuilder')]
  DNHtmlSelectBuilder = interface(DNControlBuilder)
  ['{F5AB62E7-02AE-36A3-A2EF-A3BA6A44670A}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNHtmlSelectBuilder = class(TDNGenericImport<DNHtmlSelectBuilderClass, DNHtmlSelectBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNObjectTagBuilderClass = interface(DNControlBuilderClass)
  ['{D5FCFA24-1329-5FB6-99B0-1F29A525BD4E}']
  { constructors } 

    {class} function init: DNObjectTagBuilder;

  end;

  [DNTypeName('System.Web.UI.ObjectTagBuilder')]
  DNObjectTagBuilder = interface(DNControlBuilder)
  ['{B07CDEE7-703F-3D8D-8D11-9B90E8FCB0CF}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure AppendLiteralString(s: string);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNObjectTagBuilder = class(TDNGenericImport<DNObjectTagBuilderClass, DNObjectTagBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNSkinBuilderClass = interface(DNControlBuilderClass)
  ['{EAECD696-53B8-5D91-BC5C-60B24A1D46CD}']
  { constructors } 

    {class} function init(provider: DNThemeProvider; control: DNControl; skinBuilder: DNControlBuilder; themePath: string): DNSkinBuilder;

  end;

  [DNTypeName('System.Web.UI.SkinBuilder')]
  DNSkinBuilder = interface(DNControlBuilder)
  ['{0B1A5B7F-8A4E-3E3C-9436-AC91A2C13DB2}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function ApplyTheme: DNControl;
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNSkinBuilder = class(TDNGenericImport<DNSkinBuilderClass, DNSkinBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplateBuilderClass = interface(DNControlBuilderClass)
  ['{224A2641-DCC9-543A-9E81-134BAE856089}']
  { constructors } 

    {class} function init: DNTemplateBuilder;

  end;

  [DNTypeName('System.Web.UI.TemplateBuilder')]
  DNTemplateBuilder = interface(DNControlBuilder)
  ['{911E2F6E-BD26-3BC2-B2A9-E5A2E055B24A}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNTemplateBuilder = class(TDNGenericImport<DNTemplateBuilderClass, DNTemplateBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNBindableTemplateBuilderClass = interface(DNTemplateBuilderClass)
  ['{356164F8-94D7-5C08-8128-842E0FD51DAD}']
  { constructors } 

    {class} function init: DNBindableTemplateBuilder;

  end;

  [DNTypeName('System.Web.UI.BindableTemplateBuilder')]
  DNBindableTemplateBuilder = interface(DNTemplateBuilder)
  ['{B5801CF4-788F-3C1A-BF94-71D340AB21C9}']
  { getters & setters } 

    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function ExtractValues(container: DNControl): DDN.System.DNIOrderedDictionary;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNBindableTemplateBuilder = class(TDNGenericImport<DNBindableTemplateBuilderClass, DNBindableTemplateBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNRootBuilderClass = interface(DNTemplateBuilderClass)
  ['{0096B884-3D97-5989-B24A-6B9B06EF6C45}']
  { constructors } 

    {class} function init: DNRootBuilder; overload;
    {class} function init(parser: DNTemplateParser): DNRootBuilder; overload;

  end;

  [DNTypeName('System.Web.UI.RootBuilder')]
  DNRootBuilder = interface(DNTemplateBuilder)
  ['{06532E53-29D2-3C62-A58D-0DD4DD7DFB98}']
  { getters & setters } 

    function get_BuiltObjects: DDN.mscorlib.DNIDictionary;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuiltObjects: DDN.mscorlib.DNIDictionary read get_BuiltObjects;
    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNRootBuilder = class(TDNGenericImport<DNRootBuilderClass, DNRootBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNFileLevelPageControlBuilderClass = interface(DNRootBuilderClass)
  ['{35EFA409-054A-5CEF-A604-33D60230BE89}']
  { constructors } 

    {class} function init: DNFileLevelPageControlBuilder;

  end;

  [DNTypeName('System.Web.UI.FileLevelPageControlBuilder')]
  DNFileLevelPageControlBuilder = interface(DNRootBuilder)
  ['{8042F758-44DF-3C98-B544-4BB815A1EBBA}']
  { getters & setters } 

    function get_BuiltObjects: DDN.mscorlib.DNIDictionary;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure AppendLiteralString(text: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuiltObjects: DDN.mscorlib.DNIDictionary read get_BuiltObjects;
    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNFileLevelPageControlBuilder = class(TDNGenericImport<DNFileLevelPageControlBuilderClass, DNFileLevelPageControlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNFileLevelMasterPageControlBuilderClass = interface(DNFileLevelPageControlBuilderClass)
  ['{57705792-C4DE-5188-ABAB-8A514A50E50B}']
  { constructors } 

    {class} function init: DNFileLevelMasterPageControlBuilder;

  end;

  [DNTypeName('System.Web.UI.FileLevelMasterPageControlBuilder')]
  DNFileLevelMasterPageControlBuilder = interface(DNFileLevelPageControlBuilder)
  ['{1023D231-4528-33CA-9189-BBC96A3443AF}']
  { getters & setters } 

    function get_BuiltObjects: DDN.mscorlib.DNIDictionary;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure AppendLiteralString(text: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuiltObjects: DDN.mscorlib.DNIDictionary read get_BuiltObjects;
    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNFileLevelMasterPageControlBuilder = class(TDNGenericImport<DNFileLevelMasterPageControlBuilderClass, DNFileLevelMasterPageControlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNFileLevelUserControlBuilderClass = interface(DNRootBuilderClass)
  ['{BB220FA5-6062-521A-B2BA-3701DCB6DD68}']
  { constructors } 

    {class} function init: DNFileLevelUserControlBuilder;

  end;

  [DNTypeName('System.Web.UI.FileLevelUserControlBuilder')]
  DNFileLevelUserControlBuilder = interface(DNRootBuilder)
  ['{96931D9F-099C-380E-B3F1-D95230F74DCC}']
  { getters & setters } 

    function get_BuiltObjects: DDN.mscorlib.DNIDictionary;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; ID: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure CloseControl;
    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    procedure InstantiateIn(container: DNControl);
    function AllowWhitespaceLiterals: Boolean;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BuiltObjects: DDN.mscorlib.DNIDictionary read get_BuiltObjects;
    property Text: string read get_Text write set_Text;
    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNFileLevelUserControlBuilder = class(TDNGenericImport<DNFileLevelUserControlBuilderClass, DNFileLevelUserControlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNUserControlControlBuilderClass = interface(DNControlBuilderClass)
  ['{2BFA9326-C22F-5E4E-8F02-D1A34B5F78C9}']
  { constructors } 

    {class} function init: DNUserControlControlBuilder;

  end;

  [DNTypeName('System.Web.UI.UserControlControlBuilder')]
  DNUserControlControlBuilder = interface(DNControlBuilder)
  ['{1F86BD4E-EF7F-32CA-BBDF-1919F754795A}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    function AllowWhitespaceLiterals: Boolean;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNUserControlControlBuilder = class(TDNGenericImport<DNUserControlControlBuilderClass, DNUserControlControlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNMasterPageControlBuilderClass = interface(DNUserControlControlBuilderClass)
  ['{963175B6-DFDE-5064-B9C1-214473A7503F}']
  { constructors } 

    {class} function init: DNMasterPageControlBuilder;

  end;

  [DNTypeName('System.Web.UI.MasterPageControlBuilder')]
  DNMasterPageControlBuilder = interface(DNUserControlControlBuilder)
  ['{AB3226F7-2CCF-36FD-AFD8-E623013D42EA}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function BuildObject: DDN.mscorlib.DNObject;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    function AllowWhitespaceLiterals: Boolean;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNMasterPageControlBuilder = class(TDNGenericImport<DNMasterPageControlBuilderClass, DNMasterPageControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHyperLinkControlBuilderClass = interface(DNControlBuilderClass)
  ['{6A4B4365-5512-5EB7-9F4B-D721BEA9A1DD}']
  { constructors } 

    {class} function init: DNHyperLinkControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.HyperLinkControlBuilder')]
  DNHyperLinkControlBuilder = interface(DNControlBuilder)
  ['{E1034764-D993-3032-9CD0-6274E82650F1}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNHyperLinkControlBuilder = class(TDNGenericImport<DNHyperLinkControlBuilderClass, DNHyperLinkControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLabelControlBuilderClass = interface(DNControlBuilderClass)
  ['{81D41BAA-9A1B-5A75-BBA5-38CC35CEB92A}']
  { constructors } 

    {class} function init: DNLabelControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.LabelControlBuilder')]
  DNLabelControlBuilder = interface(DNControlBuilder)
  ['{2794F0B8-E716-3DD9-B76C-018CB6F75CED}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNLabelControlBuilder = class(TDNGenericImport<DNLabelControlBuilderClass, DNLabelControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLinkButtonControlBuilderClass = interface(DNControlBuilderClass)
  ['{9516AC56-2DC5-5F63-ACDD-D03A2C06A47D}']
  { constructors } 

    {class} function init: DNLinkButtonControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.LinkButtonControlBuilder')]
  DNLinkButtonControlBuilder = interface(DNControlBuilder)
  ['{F44784C4-AF24-360B-B67C-7CEDCC30B3E2}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNLinkButtonControlBuilder = class(TDNGenericImport<DNLinkButtonControlBuilderClass, DNLinkButtonControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNListItemControlBuilderClass = interface(DNControlBuilderClass)
  ['{41926AB8-7B21-5104-898A-5E8AC1B487AE}']
  { constructors } 

    {class} function init: DNListItemControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.ListItemControlBuilder')]
  DNListItemControlBuilder = interface(DNControlBuilder)
  ['{B645248A-5B17-3F39-B39D-0CBFBA3D5D37}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNListItemControlBuilder = class(TDNGenericImport<DNListItemControlBuilderClass, DNListItemControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNLiteralControlBuilderClass = interface(DNControlBuilderClass)
  ['{47F3237B-B5A8-536E-A943-1B5114488761}']
  { constructors } 

    {class} function init: DNLiteralControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.LiteralControlBuilder')]
  DNLiteralControlBuilder = interface(DNControlBuilder)
  ['{B78F1A8A-08B4-3E5A-81AC-61F319C6B87A}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNLiteralControlBuilder = class(TDNGenericImport<DNLiteralControlBuilderClass, DNLiteralControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMultiViewControlBuilderClass = interface(DNControlBuilderClass)
  ['{EEDF9823-CB33-5280-A0E0-DE600167D809}']
  { constructors } 

    {class} function init: DNMultiViewControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.MultiViewControlBuilder')]
  DNMultiViewControlBuilder = interface(DNControlBuilder)
  ['{3BB3BA98-2F66-3BBE-A8EF-087181E5BD9C}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNMultiViewControlBuilder = class(TDNGenericImport<DNMultiViewControlBuilderClass, DNMultiViewControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPlaceHolderControlBuilderClass = interface(DNControlBuilderClass)
  ['{DDB2AB14-7CCD-5B2C-B132-5EA750A78C49}']
  { constructors } 

    {class} function init: DNPlaceHolderControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.PlaceHolderControlBuilder')]
  DNPlaceHolderControlBuilder = interface(DNControlBuilder)
  ['{3C7AA550-C230-3355-9F95-709DCC3C89D7}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNPlaceHolderControlBuilder = class(TDNGenericImport<DNPlaceHolderControlBuilderClass, DNPlaceHolderControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableCellControlBuilderClass = interface(DNControlBuilderClass)
  ['{ED897453-E18E-5700-A307-A7474C6EF247}']
  { constructors } 

    {class} function init: DNTableCellControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.TableCellControlBuilder')]
  DNTableCellControlBuilder = interface(DNControlBuilder)
  ['{B299B138-2BFC-3CEA-B91F-9C04D9C55E76}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNTableCellControlBuilder = class(TDNGenericImport<DNTableCellControlBuilderClass, DNTableCellControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTextBoxControlBuilderClass = interface(DNControlBuilderClass)
  ['{8B05B14F-B75E-53F7-9861-AAA9D65E040F}']
  { constructors } 

    {class} function init: DNTextBoxControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.TextBoxControlBuilder')]
  DNTextBoxControlBuilder = interface(DNControlBuilder)
  ['{8873F3C2-9176-33B9-83AE-FA87796356D8}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNTextBoxControlBuilder = class(TDNGenericImport<DNTextBoxControlBuilderClass, DNTextBoxControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardStepControlBuilderClass = interface(DNControlBuilderClass)
  ['{8AA6FC71-F491-5B8D-8CE7-37FFCE4FE459}']
  { constructors } 

    {class} function init: DNWizardStepControlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.WizardStepControlBuilder')]
  DNWizardStepControlBuilder = interface(DNControlBuilder)
  ['{CAE1986D-D0AA-32D9-A0AE-F6536AD400A0}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    function NeedsTagInnerText: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure SetTagInnerText(text: string);
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendLiteralString(s: string);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNWizardStepControlBuilder = class(TDNGenericImport<DNWizardStepControlBuilderClass, DNWizardStepControlBuilder>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNXmlBuilderClass = interface(DNControlBuilderClass)
  ['{DF873D98-ECEE-57EC-9252-7DA73BB26FB9}']
  { constructors } 

    {class} function init: DNXmlBuilder;

  end;

  [DNTypeName('System.Web.UI.WebControls.XmlBuilder')]
  DNXmlBuilder = interface(DNControlBuilder)
  ['{35C0D35F-7221-3C15-9D7C-F623BA8D3CCE}']
  { getters & setters } 

    function get_BindingContainerType: DDN.mscorlib.DNType;
    function get_BindingContainerBuilder: DNControlBuilder;
    function get_ItemType: string;
    function get_ComplexPropertyEntries: DDN.mscorlib.DNICollection;
    function get_TemplatePropertyEntries: DDN.mscorlib.DNICollection;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_CurrentFilterResolutionService: DNIFilterResolutionService;
    function get_DeclareType: DDN.mscorlib.DNType;
    function get_ThemeResolutionService: DNIThemeResolutionService;
    function get_HasAspCode: Boolean;
    function get_ID: string;
    procedure set_ID(value: string);
    function get_Localize: Boolean;
    function get_NamingContainerType: DDN.mscorlib.DNType;
    function get_SubBuilders: DDN.mscorlib.DNArrayList;
    function get_ServiceProvider: DDN.mscorlib.DNIServiceProvider;
    function get_TagName: string;
    function get_PageVirtualPath: string;

  { methods } 

    procedure AppendLiteralString(s: string);
    function GetChildControlType(tagName: string; attribs: DDN.mscorlib.DNIDictionary): DDN.mscorlib.DNType;
    function NeedsTagInnerText: Boolean;
    procedure SetTagInnerText(text: string);
    function AllowWhitespaceLiterals: Boolean;
    function BuildObject: DDN.mscorlib.DNObject;
    procedure CloseControl;
    function GetObjectPersistData: DNObjectPersistData;
    function HasBody: Boolean;
    function HtmlDecodeLiterals: Boolean;
    procedure OnAppendToParentBuilder(parentBuilder: DNControlBuilder);
    procedure SetServiceProvider(serviceProvider: DDN.mscorlib.DNIServiceProvider);
    function GetResourceKey: string;
    procedure ProcessGeneratedCode(codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    procedure AppendSubBuilder(subBuilder: DNControlBuilder);
    procedure Init(parser: DNTemplateParser; parentBuilder: DNControlBuilder; &type: DDN.mscorlib.DNType; tagName: string; id: string; attribs: DDN.mscorlib.DNIDictionary);
    procedure SetResourceKey(resourceKey: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindingContainerType: DDN.mscorlib.DNType read get_BindingContainerType;
    property BindingContainerBuilder: DNControlBuilder read get_BindingContainerBuilder;
    property ItemType: string read get_ItemType;
    property ComplexPropertyEntries: DDN.mscorlib.DNICollection read get_ComplexPropertyEntries;
    property TemplatePropertyEntries: DDN.mscorlib.DNICollection read get_TemplatePropertyEntries;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property CurrentFilterResolutionService: DNIFilterResolutionService read get_CurrentFilterResolutionService;
    property DeclareType: DDN.mscorlib.DNType read get_DeclareType;
    property ThemeResolutionService: DNIThemeResolutionService read get_ThemeResolutionService;
    property HasAspCode: Boolean read get_HasAspCode;
    property ID: string read get_ID write set_ID;
    property Localize: Boolean read get_Localize;
    property NamingContainerType: DDN.mscorlib.DNType read get_NamingContainerType;
    property SubBuilders: DDN.mscorlib.DNArrayList read get_SubBuilders;
    property ServiceProvider: DDN.mscorlib.DNIServiceProvider read get_ServiceProvider;
    property TagName: string read get_TagName;
    property PageVirtualPath: string read get_PageVirtualPath;
  end;

  TDNXmlBuilder = class(TDNGenericImport<DNXmlBuilderClass, DNXmlBuilder>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlCachePolicyClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BF80A49C-39A1-5F86-A457-8418E47EA048}']
  end;

  [DNTypeName('System.Web.UI.ControlCachePolicy')]
  DNControlCachePolicy = interface(DDN.mscorlib.DNObject)
  ['{DBF5A2B5-3EAF-3C63-BCCE-6D8FAF8335F2}']
  { getters & setters } 

    function get_SupportsCaching: Boolean;
    function get_Cached: Boolean;
    procedure set_Cached(value: Boolean);
    function get_Duration: DDN.mscorlib.DNTimeSpan;
    procedure set_Duration(value: DDN.mscorlib.DNTimeSpan);
    function get_VaryByParams: DNHttpCacheVaryByParams;
    function get_VaryByControl: string;
    procedure set_VaryByControl(value: string);
    function get_Dependency: DNCacheDependency;
    procedure set_Dependency(value: DNCacheDependency);
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);

  { methods } 

    procedure SetVaryByCustom(varyByCustom: string);
    procedure SetSlidingExpiration(useSlidingExpiration: Boolean);
    procedure SetExpires(expirationTime: DDN.mscorlib.DNDateTime);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SupportsCaching: Boolean read get_SupportsCaching;
    property Cached: Boolean read get_Cached write set_Cached;
    property Duration: DDN.mscorlib.DNTimeSpan read get_Duration write set_Duration;
    property VaryByParams: DNHttpCacheVaryByParams read get_VaryByParams;
    property VaryByControl: string read get_VaryByControl write set_VaryByControl;
    property Dependency: DNCacheDependency read get_Dependency write set_Dependency;
    property ProviderName: string read get_ProviderName write set_ProviderName;
  end;

  TDNControlCachePolicy = class(TDNGenericImport<DNControlCachePolicyClass, DNControlCachePolicy>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlCollectionClass = interface(DNObjectClass)
  ['{9A01C16B-2E12-5DA9-8FB0-64367EDCDF4E}']
  { constructors } 

    {class} function init(owner: DNControl): DNControlCollection;

  end;

  [DNTypeName('System.Web.UI.ControlCollection')]
  DNControlCollection = interface(DDN.mscorlib.DNICollection)
  ['{2338289E-1546-320D-A95F-43B6D619A3B1}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNControl;

  { methods } 

    procedure Clear;
    function &Contains(c: DNControl): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAt(index: Int32);
    procedure Remove(value: DNControl);
    procedure Add(child: DNControl);
    procedure AddAt(index: Int32; child: DNControl);
    function IndexOf(value: DNControl): Int32;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNControl read get_Item; default;
  end;

  TDNControlCollection = class(TDNGenericImport<DNControlCollectionClass, DNControlCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNEmptyControlCollectionClass = interface(DNControlCollectionClass)
  ['{6EA23F2C-2E5F-5630-A193-4C0F101518FD}']
  { constructors } 

    {class} function init(owner: DNControl): DNEmptyControlCollection;

  end;

  [DNTypeName('System.Web.UI.EmptyControlCollection')]
  DNEmptyControlCollection = interface(DNControlCollection)
  ['{8E34F1C2-8019-3AFA-9075-2CF21EE01225}']
  { getters & setters } 

    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Item(index: Int32): DNControl;

  { methods } 

    procedure Add(child: DNControl);
    procedure AddAt(index: Int32; child: DNControl);
    procedure Clear;
    function &Contains(c: DNControl): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAt(index: Int32);
    procedure Remove(value: DNControl);
    function IndexOf(value: DNControl): Int32;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Item[index: Int32]: DNControl read get_Item; default;
  end;

  TDNEmptyControlCollection = class(TDNGenericImport<DNEmptyControlCollectionClass, DNEmptyControlCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNViewCollectionClass = interface(DNControlCollectionClass)
  ['{9C4CB461-A9AF-5447-9B69-60EBA395DFD8}']
  { constructors } 

    {class} function init(owner: DNControl): DNViewCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.ViewCollection')]
  DNViewCollection = interface(DNControlCollection)
  ['{E3A652AA-9DA6-3E15-90CC-385A672CE9B3}']
  { getters & setters } 

    function get_Item(i: Int32): DNView;
    function get_Count: Int32;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Add(v: DNControl);
    procedure AddAt(index: Int32; v: DNControl);
    procedure Clear;
    function &Contains(c: DNControl): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAt(index: Int32);
    procedure Remove(value: DNControl);
    function IndexOf(value: DNControl): Int32;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNView read get_Item; default;
    property Count: Int32 read get_Count;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNViewCollection = class(TDNGenericImport<DNViewCollectionClass, DNViewCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNControlSkinClass = interface(DDN.mscorlib.DNObjectClass)
  ['{823F3754-A906-5813-BBCE-E6FDDED511D2}']
  { constructors } 

    {class} function init(controlType: DDN.mscorlib.DNType; themeDelegate: DNControlSkinDelegate): DNControlSkin;

  end;

  [DNTypeName('System.Web.UI.ControlSkin')]
  DNControlSkin = interface(DDN.mscorlib.DNObject)
  ['{B4A4747E-6F50-3BEA-9C06-81D588362CC2}']
  { getters & setters } 

    function get_ControlType: DDN.mscorlib.DNType;

  { methods } 

    procedure ApplySkin(control: DNControl);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlType: DDN.mscorlib.DNType read get_ControlType;
  end;

  TDNControlSkin = class(TDNGenericImport<DNControlSkinClass, DNControlSkin>) end;

  //-------------namespace: System.Web.UI----------------
  DNCssStyleCollectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8B7F321E-013B-5CD4-9C92-57336678A678}']
  end;

  [DNTypeName('System.Web.UI.CssStyleCollection')]
  DNCssStyleCollection = interface(DDN.mscorlib.DNObject)
  ['{86506D05-F003-37B9-A2BA-5ED2CE357343}']
  { getters & setters } 

    function get_Item(key: string): string; overload;
    procedure set_Item(key: string; value: string); overload;
    function get_Item(key: DNHtmlTextWriterStyle): string; overload;
    procedure set_Item(key: DNHtmlTextWriterStyle; value: string); overload;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Count: Int32;
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    procedure Add(key: string; value: string); overload;
    procedure Add(key: DNHtmlTextWriterStyle; value: string); overload;
    procedure Remove(key: string); overload;
    procedure Remove(key: DNHtmlTextWriterStyle); overload;
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[key: string]: string read get_Item write set_Item; default;
    property Item[key: DNHtmlTextWriterStyle]: string read get_Item write set_Item; default;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Count: Int32 read get_Count;
    property Value: string read get_Value write set_Value;
  end;

  TDNCssStyleCollection = class(TDNGenericImport<DNCssStyleCollectionClass, DNCssStyleCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataBinderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{79BE261F-F2B7-5994-BB9F-363992E6046F}']
  { static getter & setter } 

    {class} function get_EnableCaching: Boolean;
    {class} procedure set_EnableCaching(value: Boolean);

  { constructors } 

    {class} function init: DNDataBinder;

  { static methods } 

    {class} function Eval(container: DDN.mscorlib.DNObject; expression: string): DDN.mscorlib.DNObject; overload;
    {class} function Eval(container: DDN.mscorlib.DNObject; expression: string; format: string): string; overload;
    {class} function GetPropertyValue(container: DDN.mscorlib.DNObject; propName: string; format: string): string; overload;
    {class} function GetIndexedPropertyValue(container: DDN.mscorlib.DNObject; propName: string; format: string): string; overload;
    {class} function GetDataItem(container: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    {class} function IsBindableType(&type: DDN.mscorlib.DNType): Boolean;
    {class} function GetPropertyValue(container: DDN.mscorlib.DNObject; propName: string): DDN.mscorlib.DNObject; overload;
    {class} function GetIndexedPropertyValue(container: DDN.mscorlib.DNObject; expr: string): DDN.mscorlib.DNObject; overload;
    {class} function GetDataItem(container: DDN.mscorlib.DNObject; out foundDataItem: Boolean): DDN.mscorlib.DNObject; overload;

  { static propertys } 

    {class} property EnableCaching: Boolean read get_EnableCaching write set_EnableCaching;
  end;

  [DNTypeName('System.Web.UI.DataBinder')]
  DNDataBinder = interface(DDN.mscorlib.DNObject)
  ['{7E527D71-FA3C-3101-872F-BB54AAAD75BE}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataBinder = class(TDNGenericImport<DNDataBinderClass, DNDataBinder>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6D8E172D-7D46-5CD4-8ADF-3F1D3A88C905}']
  { constructors } 

    {class} function init(propertyName: string; propertyType: DDN.mscorlib.DNType; expression: string): DNDataBinding;

  end;

  [DNTypeName('System.Web.UI.DataBinding')]
  DNDataBinding = interface(DDN.mscorlib.DNObject)
  ['{CFA7B125-5E5F-3D4F-AECE-DB5E95B247C5}']
  { getters & setters } 

    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_PropertyName: string;
    function get_PropertyType: DDN.mscorlib.DNType;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: string read get_Expression write set_Expression;
    property PropertyName: string read get_PropertyName;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
  end;

  TDNDataBinding = class(TDNGenericImport<DNDataBindingClass, DNDataBinding>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataBindingCollectionClass = interface(DNObjectClass)
  ['{5F4F13F9-A1F6-53D9-9F09-EF7387FDD2AD}']
  { constructors } 

    {class} function init: DNDataBindingCollection;

  end;

  [DNTypeName('System.Web.UI.DataBindingCollection')]
  DNDataBindingCollection = interface(DDN.mscorlib.DNICollection)
  ['{7191BE6B-3729-3B68-B201-F0FF6263280B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_RemovedBindings: TArray<string>;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(propertyName: string): DNDataBinding;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(binding: DNDataBinding);
    function &Contains(propertyName: string): Boolean;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Remove(propertyName: string); overload;
    procedure Remove(binding: DNDataBinding); overload;
    procedure Remove(propertyName: string; addToRemovedList: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property RemovedBindings: TArray<string> read get_RemovedBindings;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[propertyName: string]: DNDataBinding read get_Item; default;
  end;

  TDNDataBindingCollection = class(TDNGenericImport<DNDataBindingCollectionClass, DNDataBindingCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataSourceSelectArgumentsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{85080660-4A01-5E40-A012-D7773EDB68F1}']
  { static getter & setter } 

    {class} function get_Empty: DNDataSourceSelectArguments;

  { constructors } 

    {class} function init: DNDataSourceSelectArguments; overload;
    {class} function init(sortExpression: string): DNDataSourceSelectArguments; overload;
    {class} function init(startRowIndex: Int32; maximumRows: Int32): DNDataSourceSelectArguments; overload;
    {class} function init(sortExpression: string; startRowIndex: Int32; maximumRows: Int32): DNDataSourceSelectArguments; overload;

  { static propertys } 

    {class} property Empty: DNDataSourceSelectArguments read get_Empty;
  end;

  [DNTypeName('System.Web.UI.DataSourceSelectArguments')]
  DNDataSourceSelectArguments = interface(DDN.mscorlib.DNObject)
  ['{AAEDFE64-E218-3808-9A99-E74BFE4960F1}']
  { getters & setters } 

    function get_MaximumRows: Int32;
    procedure set_MaximumRows(value: Int32);
    function get_RetrieveTotalRowCount: Boolean;
    procedure set_RetrieveTotalRowCount(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_StartRowIndex: Int32;
    procedure set_StartRowIndex(value: Int32);
    function get_TotalRowCount: Int32;
    procedure set_TotalRowCount(value: Int32);

  { methods } 

    procedure AddSupportedCapabilities(capabilities: DNDataSourceCapabilities);
    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    procedure RaiseUnsupportedCapabilitiesError(view: DNDataSourceView);
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property MaximumRows: Int32 read get_MaximumRows write set_MaximumRows;
    property RetrieveTotalRowCount: Boolean read get_RetrieveTotalRowCount write set_RetrieveTotalRowCount;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property StartRowIndex: Int32 read get_StartRowIndex write set_StartRowIndex;
    property TotalRowCount: Int32 read get_TotalRowCount write set_TotalRowCount;
  end;

  TDNDataSourceSelectArguments = class(TDNGenericImport<DNDataSourceSelectArgumentsClass, DNDataSourceSelectArguments>) end;

  //-------------namespace: System.Web.UI----------------
  DNDataSourceViewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E136F078-1464-5FD1-A7AC-2593E026AEC1}']
  end;

  [DNTypeName('System.Web.UI.DataSourceView')]
  DNDataSourceView = interface(DDN.mscorlib.DNObject)
  ['{AF3B4AFA-311B-35C9-A6DF-3127CA898D4F}']
  { getters & setters } 

    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_Name: string;

  { events } 

    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback);
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property Name: string read get_Name;
  end;

  TDNDataSourceView = class(TDNGenericImport<DNDataSourceViewClass, DNDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelDataSourceViewClass = interface(DNDataSourceViewClass)
  ['{EDC764D5-45EA-5221-B98A-25E17BB2132F}']
  { constructors } 

    {class} function init(owner: DNModelDataSource): DNModelDataSourceView;

  end;

  [DNTypeName('System.Web.UI.WebControls.ModelDataSourceView')]
  DNModelDataSourceView = interface(DNDataSourceView)
  ['{24AF28D1-5CF2-3205-80AF-9C81547A48D4}']
  { getters & setters } 

    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanSort: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanUpdate: Boolean;
    function get_ModelTypeName: string;
    function get_DeleteMethod: string;
    function get_InsertMethod: string;
    function get_SelectMethod: string;
    function get_UpdateMethod: string;
    function get_DataKeyName: string;
    function get_Name: string;

  { events } 

    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure UpdateProperties(modelTypeName: string; selectMethod: string; updateMethod: string; insertMethod: string; deleteMethod: string; dataKeyName: string);
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    function CanExecute(commandName: string): Boolean;
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanSort: Boolean read get_CanSort;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanUpdate: Boolean read get_CanUpdate;
    property ModelTypeName: string read get_ModelTypeName;
    property DeleteMethod: string read get_DeleteMethod;
    property InsertMethod: string read get_InsertMethod;
    property SelectMethod: string read get_SelectMethod;
    property UpdateMethod: string read get_UpdateMethod;
    property DataKeyName: string read get_DataKeyName;
    property Name: string read get_Name;
  end;

  TDNModelDataSourceView = class(TDNGenericImport<DNModelDataSourceViewClass, DNModelDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNObjectDataSourceViewClass = interface(DNDataSourceViewClass)
  ['{3C24D776-438D-573E-AE9E-4DE745ED3951}']
  { constructors } 

    {class} function init(owner: DNObjectDataSource; name: string; context: DNHttpContext): DNObjectDataSourceView;

  end;

  [DNTypeName('System.Web.UI.WebControls.ObjectDataSourceView')]
  DNObjectDataSourceView = interface(DNDataSourceView)
  ['{EF9BB0AF-0A1B-3F80-BF4F-3B8C2015893D}']
  { getters & setters } 

    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_ConvertNullToDBNull: Boolean;
    procedure set_ConvertNullToDBNull(value: Boolean);
    function get_DataObjectTypeName: string;
    procedure set_DataObjectTypeName(value: string);
    function get_DeleteMethod: string;
    procedure set_DeleteMethod(value: string);
    function get_DeleteParameters: DNParameterCollection;
    function get_EnablePaging: Boolean;
    procedure set_EnablePaging(value: Boolean);
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertMethod: string;
    procedure set_InsertMethod(value: string);
    function get_InsertParameters: DNParameterCollection;
    function get_MaximumRowsParameterName: string;
    procedure set_MaximumRowsParameterName(value: string);
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_SelectCountMethod: string;
    procedure set_SelectCountMethod(value: string);
    function get_SelectMethod: string;
    procedure set_SelectMethod(value: string);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_StartRowIndexParameterName: string;
    procedure set_StartRowIndexParameterName(value: string);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_UpdateMethod: string;
    procedure set_UpdateMethod(value: string);
    function get_UpdateParameters: DNParameterCollection;
    function get_ParsingCulture: DNParsingCulture;
    procedure set_ParsingCulture(value: DNParsingCulture);
    function get_Name: string;

  { events } 

    procedure add_Deleted(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Deleting(value: DNObjectDataSourceMethodEventHandler);
    procedure add_Filtering(value: DNObjectDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNObjectDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Inserting(value: DNObjectDataSourceMethodEventHandler);
    procedure add_ObjectCreated(value: DNObjectDataSourceObjectEventHandler);
    procedure remove_ObjectCreated(value: DNObjectDataSourceObjectEventHandler);
    procedure add_ObjectCreating(value: DNObjectDataSourceObjectEventHandler);
    procedure remove_ObjectCreating(value: DNObjectDataSourceObjectEventHandler);
    procedure add_ObjectDisposing(value: DNObjectDataSourceDisposingEventHandler);
    procedure remove_ObjectDisposing(value: DNObjectDataSourceDisposingEventHandler);
    procedure add_Selected(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNObjectDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNObjectDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNObjectDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNObjectDataSourceStatusEventHandler);
    procedure add_Updating(value: DNObjectDataSourceMethodEventHandler);
    procedure remove_Updating(value: DNObjectDataSourceMethodEventHandler);
    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Insert(values: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable; overload;
    function Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback); overload;
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property ConvertNullToDBNull: Boolean read get_ConvertNullToDBNull write set_ConvertNullToDBNull;
    property DataObjectTypeName: string read get_DataObjectTypeName write set_DataObjectTypeName;
    property DeleteMethod: string read get_DeleteMethod write set_DeleteMethod;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property EnablePaging: Boolean read get_EnablePaging write set_EnablePaging;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertMethod: string read get_InsertMethod write set_InsertMethod;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property MaximumRowsParameterName: string read get_MaximumRowsParameterName write set_MaximumRowsParameterName;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property SelectCountMethod: string read get_SelectCountMethod write set_SelectCountMethod;
    property SelectMethod: string read get_SelectMethod write set_SelectMethod;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property StartRowIndexParameterName: string read get_StartRowIndexParameterName write set_StartRowIndexParameterName;
    property TypeName: string read get_TypeName write set_TypeName;
    property UpdateMethod: string read get_UpdateMethod write set_UpdateMethod;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property ParsingCulture: DNParsingCulture read get_ParsingCulture write set_ParsingCulture;
    property Name: string read get_Name;
  end;

  TDNObjectDataSourceView = class(TDNGenericImport<DNObjectDataSourceViewClass, DNObjectDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapDataSourceViewClass = interface(DNDataSourceViewClass)
  ['{953A0C2B-1EBE-50BE-83AE-FC9D5CAEF7E4}']
  { constructors } 

    {class} function init(owner: DNSiteMapDataSource; name: string; node: DNSiteMapNode): DNSiteMapDataSourceView; overload;
    {class} function init(owner: DNSiteMapDataSource; name: string; collection: DNSiteMapNodeCollection): DNSiteMapDataSourceView; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapDataSourceView')]
  DNSiteMapDataSourceView = interface(DNDataSourceView)
  ['{1DD6A3CD-FCA8-3457-957D-C7A762AE6362}']
  { getters & setters } 

    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_Name: string;

  { events } 

    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable; overload;
    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback); overload;
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property Name: string read get_Name;
  end;

  TDNSiteMapDataSourceView = class(TDNGenericImport<DNSiteMapDataSourceViewClass, DNSiteMapDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSqlDataSourceViewClass = interface(DNDataSourceViewClass)
  ['{6E0D8682-8CF5-5375-8F22-A0CD6DDB609A}']
  { constructors } 

    {class} function init(owner: DNSqlDataSource; name: string; context: DNHttpContext): DNSqlDataSourceView;

  end;

  [DNTypeName('System.Web.UI.WebControls.SqlDataSourceView')]
  DNSqlDataSourceView = interface(DNDataSourceView)
  ['{A1643E64-BA62-3B5B-9AD9-EC7EA7DAA50B}']
  { getters & setters } 

    function get_CancelSelectOnNullParameter: Boolean;
    procedure set_CancelSelectOnNullParameter(value: Boolean);
    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_DeleteCommand: string;
    procedure set_DeleteCommand(value: string);
    function get_DeleteCommandType: DNSqlDataSourceCommandType;
    procedure set_DeleteCommandType(value: DNSqlDataSourceCommandType);
    function get_DeleteParameters: DNParameterCollection;
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertCommand: string;
    procedure set_InsertCommand(value: string);
    function get_InsertCommandType: DNSqlDataSourceCommandType;
    procedure set_InsertCommandType(value: DNSqlDataSourceCommandType);
    function get_InsertParameters: DNParameterCollection;
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_SelectCommand: string;
    procedure set_SelectCommand(value: string);
    function get_SelectCommandType: DNSqlDataSourceCommandType;
    procedure set_SelectCommandType(value: DNSqlDataSourceCommandType);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_UpdateCommand: string;
    procedure set_UpdateCommand(value: string);
    function get_UpdateCommandType: DNSqlDataSourceCommandType;
    procedure set_UpdateCommandType(value: DNSqlDataSourceCommandType);
    function get_UpdateParameters: DNParameterCollection;
    function get_Name: string;

  { events } 

    procedure add_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Insert(values: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable; overload;
    function Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback); overload;
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CancelSelectOnNullParameter: Boolean read get_CancelSelectOnNullParameter write set_CancelSelectOnNullParameter;
    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property DeleteCommand: string read get_DeleteCommand write set_DeleteCommand;
    property DeleteCommandType: DNSqlDataSourceCommandType read get_DeleteCommandType write set_DeleteCommandType;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertCommand: string read get_InsertCommand write set_InsertCommand;
    property InsertCommandType: DNSqlDataSourceCommandType read get_InsertCommandType write set_InsertCommandType;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property SelectCommand: string read get_SelectCommand write set_SelectCommand;
    property SelectCommandType: DNSqlDataSourceCommandType read get_SelectCommandType write set_SelectCommandType;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property UpdateCommand: string read get_UpdateCommand write set_UpdateCommand;
    property UpdateCommandType: DNSqlDataSourceCommandType read get_UpdateCommandType write set_UpdateCommandType;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property Name: string read get_Name;
  end;

  TDNSqlDataSourceView = class(TDNGenericImport<DNSqlDataSourceViewClass, DNSqlDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAccessDataSourceViewClass = interface(DNSqlDataSourceViewClass)
  ['{8342F0FA-BB8D-5931-85BC-C358A21BE459}']
  { constructors } 

    {class} function init(owner: DNAccessDataSource; name: string; context: DNHttpContext): DNAccessDataSourceView;

  end;

  [DNTypeName('System.Web.UI.WebControls.AccessDataSourceView')]
  DNAccessDataSourceView = interface(DNSqlDataSourceView)
  ['{23FC050E-7F92-3261-966C-53A22C58DCDC}']
  { getters & setters } 

    function get_CancelSelectOnNullParameter: Boolean;
    procedure set_CancelSelectOnNullParameter(value: Boolean);
    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_ConflictDetection: DNConflictOptions;
    procedure set_ConflictDetection(value: DNConflictOptions);
    function get_DeleteCommand: string;
    procedure set_DeleteCommand(value: string);
    function get_DeleteCommandType: DNSqlDataSourceCommandType;
    procedure set_DeleteCommandType(value: DNSqlDataSourceCommandType);
    function get_DeleteParameters: DNParameterCollection;
    function get_FilterExpression: string;
    procedure set_FilterExpression(value: string);
    function get_FilterParameters: DNParameterCollection;
    function get_InsertCommand: string;
    procedure set_InsertCommand(value: string);
    function get_InsertCommandType: DNSqlDataSourceCommandType;
    procedure set_InsertCommandType(value: DNSqlDataSourceCommandType);
    function get_InsertParameters: DNParameterCollection;
    function get_OldValuesParameterFormatString: string;
    procedure set_OldValuesParameterFormatString(value: string);
    function get_SelectCommand: string;
    procedure set_SelectCommand(value: string);
    function get_SelectCommandType: DNSqlDataSourceCommandType;
    procedure set_SelectCommandType(value: DNSqlDataSourceCommandType);
    function get_SelectParameters: DNParameterCollection;
    function get_SortParameterName: string;
    procedure set_SortParameterName(value: string);
    function get_UpdateCommand: string;
    procedure set_UpdateCommand(value: string);
    function get_UpdateCommandType: DNSqlDataSourceCommandType;
    procedure set_UpdateCommandType(value: DNSqlDataSourceCommandType);
    function get_UpdateParameters: DNParameterCollection;
    function get_Name: string;

  { events } 

    procedure add_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Deleted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Deleting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure remove_Filtering(value: DNSqlDataSourceFilteringEventHandler);
    procedure add_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Inserted(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Inserting(value: DNSqlDataSourceCommandEventHandler);
    procedure add_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Selected(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure remove_Selecting(value: DNSqlDataSourceSelectingEventHandler);
    procedure add_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure remove_Updated(value: DNSqlDataSourceStatusEventHandler);
    procedure add_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure remove_Updating(value: DNSqlDataSourceCommandEventHandler);
    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Insert(values: DDN.mscorlib.DNIDictionary): Int32; overload;
    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable; overload;
    function Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary): Int32; overload;
    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback); overload;
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CancelSelectOnNullParameter: Boolean read get_CancelSelectOnNullParameter write set_CancelSelectOnNullParameter;
    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property ConflictDetection: DNConflictOptions read get_ConflictDetection write set_ConflictDetection;
    property DeleteCommand: string read get_DeleteCommand write set_DeleteCommand;
    property DeleteCommandType: DNSqlDataSourceCommandType read get_DeleteCommandType write set_DeleteCommandType;
    property DeleteParameters: DNParameterCollection read get_DeleteParameters;
    property FilterExpression: string read get_FilterExpression write set_FilterExpression;
    property FilterParameters: DNParameterCollection read get_FilterParameters;
    property InsertCommand: string read get_InsertCommand write set_InsertCommand;
    property InsertCommandType: DNSqlDataSourceCommandType read get_InsertCommandType write set_InsertCommandType;
    property InsertParameters: DNParameterCollection read get_InsertParameters;
    property OldValuesParameterFormatString: string read get_OldValuesParameterFormatString write set_OldValuesParameterFormatString;
    property SelectCommand: string read get_SelectCommand write set_SelectCommand;
    property SelectCommandType: DNSqlDataSourceCommandType read get_SelectCommandType write set_SelectCommandType;
    property SelectParameters: DNParameterCollection read get_SelectParameters;
    property SortParameterName: string read get_SortParameterName write set_SortParameterName;
    property UpdateCommand: string read get_UpdateCommand write set_UpdateCommand;
    property UpdateCommandType: DNSqlDataSourceCommandType read get_UpdateCommandType write set_UpdateCommandType;
    property UpdateParameters: DNParameterCollection read get_UpdateParameters;
    property Name: string read get_Name;
  end;

  TDNAccessDataSourceView = class(TDNGenericImport<DNAccessDataSourceViewClass, DNAccessDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNXmlDataSourceViewClass = interface(DNDataSourceViewClass)
  ['{EDADAC40-509C-50E6-889E-E2EBA0730FC8}']
  { constructors } 

    {class} function init(owner: DNXmlDataSource; name: string): DNXmlDataSourceView;

  end;

  [DNTypeName('System.Web.UI.WebControls.XmlDataSourceView')]
  DNXmlDataSourceView = interface(DNDataSourceView)
  ['{D336A7AE-3B06-3822-92D9-10CA225CF053}']
  { getters & setters } 

    function get_CanDelete: Boolean;
    function get_CanInsert: Boolean;
    function get_CanPage: Boolean;
    function get_CanRetrieveTotalRowCount: Boolean;
    function get_CanSort: Boolean;
    function get_CanUpdate: Boolean;
    function get_Name: string;

  { events } 

    procedure add_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_DataSourceViewChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Select(arguments: DNDataSourceSelectArguments): DDN.mscorlib.DNIEnumerable; overload;
    function CanExecute(commandName: string): Boolean;
    procedure Delete(keys: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure ExecuteCommand(commandName: string; keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Insert(values: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    procedure Select(arguments: DNDataSourceSelectArguments; callback: DNDataSourceViewSelectCallback); overload;
    procedure Update(keys: DDN.mscorlib.DNIDictionary; values: DDN.mscorlib.DNIDictionary; oldValues: DDN.mscorlib.DNIDictionary; callback: DNDataSourceViewOperationCallback);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanDelete: Boolean read get_CanDelete;
    property CanInsert: Boolean read get_CanInsert;
    property CanPage: Boolean read get_CanPage;
    property CanRetrieveTotalRowCount: Boolean read get_CanRetrieveTotalRowCount;
    property CanSort: Boolean read get_CanSort;
    property CanUpdate: Boolean read get_CanUpdate;
    property Name: string read get_Name;
  end;

  TDNXmlDataSourceView = class(TDNGenericImport<DNXmlDataSourceViewClass, DNXmlDataSourceView>) end;

  //-------------namespace: System.Web.UI----------------
  DNDesignTimeParseDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{93EB5827-E1F3-566A-84EE-70B086B0C40D}']
  { constructors } 

    {class} function init(designerHost: DDN.System.DNIDesignerHost; parseText: string): DNDesignTimeParseData; overload;
    {class} function init(designerHost: DDN.System.DNIDesignerHost; parseText: string; filter: string): DNDesignTimeParseData; overload;

  end;

  [DNTypeName('System.Web.UI.DesignTimeParseData')]
  DNDesignTimeParseData = interface(DDN.mscorlib.DNObject)
  ['{7A5D7A53-93F8-30CC-95F6-3211D6B0F3D2}']
  { getters & setters } 

    function get_ShouldApplyTheme: Boolean;
    procedure set_ShouldApplyTheme(value: Boolean);
    function get_DataBindingHandler: DDN.mscorlib.DNEventHandler;
    procedure set_DataBindingHandler(value: DDN.mscorlib.DNEventHandler);
    function get_DesignerHost: DDN.System.DNIDesignerHost;
    function get_DocumentUrl: string;
    procedure set_DocumentUrl(value: string);
    function get_Filter: string;
    function get_ParseText: string;
    function get_UserControlRegisterEntries: DDN.mscorlib.DNICollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ShouldApplyTheme: Boolean read get_ShouldApplyTheme write set_ShouldApplyTheme;
    property DataBindingHandler: DDN.mscorlib.DNEventHandler read get_DataBindingHandler write set_DataBindingHandler;
    property DesignerHost: DDN.System.DNIDesignerHost read get_DesignerHost;
    property DocumentUrl: string read get_DocumentUrl write set_DocumentUrl;
    property Filter: string read get_Filter;
    property ParseText: string read get_ParseText;
    property UserControlRegisterEntries: DDN.mscorlib.DNICollection read get_UserControlRegisterEntries;
  end;

  TDNDesignTimeParseData = class(TDNGenericImport<DNDesignTimeParseDataClass, DNDesignTimeParseData>) end;

  //-------------namespace: System.Web.UI----------------
  DNDesignTimeTemplateParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{40E6DA5A-10C8-5158-AAB6-3231C70373EF}']
  { static methods } 

    {class} function ParseControl(data: DNDesignTimeParseData): DNControl;
    {class} function ParseControls(data: DNDesignTimeParseData): TArray<DNControl>;
    {class} function ParseTemplate(data: DNDesignTimeParseData): DNITemplate;
    {class} function ParseTheme(host: DDN.System.DNIDesignerHost; theme: string; themePath: string): DNControlBuilder;

  end;

  [DNTypeName('System.Web.UI.DesignTimeTemplateParser')]
  DNDesignTimeTemplateParser = interface(DDN.mscorlib.DNObject)
  ['{7C2FB162-B643-3FF8-B618-07E8F1BC5C5F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDesignTimeTemplateParser = class(TDNGenericImport<DNDesignTimeTemplateParserClass, DNDesignTimeTemplateParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNEventEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E67D9F65-EE0F-53BC-8B9A-B85B5E2F6A80}']
  { constructors } 

    {class} function init: DNEventEntry;

  end;

  [DNTypeName('System.Web.UI.EventEntry')]
  DNEventEntry = interface(DDN.mscorlib.DNObject)
  ['{B8D1529B-B031-30F2-A42C-41D9B1710C06}']
  { getters & setters } 

    function get_HandlerMethodName: string;
    procedure set_HandlerMethodName(value: string);
    function get_HandlerType: DDN.mscorlib.DNType;
    procedure set_HandlerType(value: DDN.mscorlib.DNType);
    function get_Name: string;
    procedure set_Name(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property HandlerMethodName: string read get_HandlerMethodName write set_HandlerMethodName;
    property HandlerType: DDN.mscorlib.DNType read get_HandlerType write set_HandlerType;
    property Name: string read get_Name write set_Name;
  end;

  TDNEventEntry = class(TDNGenericImport<DNEventEntryClass, DNEventEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNExpressionBindingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C66952C-55DD-52DA-8DE5-A07452560028}']
  { constructors } 

    {class} function init(propertyName: string; propertyType: DDN.mscorlib.DNType; expressionPrefix: string; expression: string): DNExpressionBinding;

  end;

  [DNTypeName('System.Web.UI.ExpressionBinding')]
  DNExpressionBinding = interface(DDN.mscorlib.DNObject)
  ['{99508DCE-9F12-306E-90FC-795D703CB290}']
  { getters & setters } 

    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExpressionPrefix: string;
    procedure set_ExpressionPrefix(value: string);
    function get_Generated: Boolean;
    function get_ParsedExpressionData: DDN.mscorlib.DNObject;
    function get_PropertyName: string;
    function get_PropertyType: DDN.mscorlib.DNType;

  { methods } 

    function GetHashCode: Int32;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Expression: string read get_Expression write set_Expression;
    property ExpressionPrefix: string read get_ExpressionPrefix write set_ExpressionPrefix;
    property Generated: Boolean read get_Generated;
    property ParsedExpressionData: DDN.mscorlib.DNObject read get_ParsedExpressionData;
    property PropertyName: string read get_PropertyName;
    property PropertyType: DDN.mscorlib.DNType read get_PropertyType;
  end;

  TDNExpressionBinding = class(TDNGenericImport<DNExpressionBindingClass, DNExpressionBinding>) end;

  //-------------namespace: System.Web.UI----------------
  DNExpressionBindingCollectionClass = interface(DNObjectClass)
  ['{DC07FFAC-72AF-513C-BCE4-7A58D3911104}']
  { constructors } 

    {class} function init: DNExpressionBindingCollection;

  end;

  [DNTypeName('System.Web.UI.ExpressionBindingCollection')]
  DNExpressionBindingCollection = interface(DDN.mscorlib.DNICollection)
  ['{B1FDF4A1-C2EF-3EB4-845A-F3655A068691}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_RemovedBindings: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(propertyName: string): DNExpressionBinding;

  { events } 

    procedure add_Changed(value: DDN.mscorlib.DNEventHandler);
    procedure remove_Changed(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(binding: DNExpressionBinding);
    function &Contains(propName: string): Boolean;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNExpressionBinding>; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Remove(propertyName: string); overload;
    procedure Remove(binding: DNExpressionBinding); overload;
    procedure Remove(propertyName: string; addToRemovedList: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property RemovedBindings: DDN.mscorlib.DNICollection read get_RemovedBindings;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[propertyName: string]: DNExpressionBinding read get_Item; default;
  end;

  TDNExpressionBindingCollection = class(TDNGenericImport<DNExpressionBindingCollectionClass, DNExpressionBindingCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNHierarchicalDataSourceViewClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6BD083BE-C2B4-52E9-9D72-77508D0DF202}']
  end;

  [DNTypeName('System.Web.UI.HierarchicalDataSourceView')]
  DNHierarchicalDataSourceView = interface(DDN.mscorlib.DNObject)
  ['{60BBB1F2-90FC-35CD-91E8-2B9AF769BCBD}']
  { methods } 

    function Select: DNIHierarchicalEnumerable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHierarchicalDataSourceView = class(TDNGenericImport<DNHierarchicalDataSourceViewClass, DNHierarchicalDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSiteMapHierarchicalDataSourceViewClass = interface(DNHierarchicalDataSourceViewClass)
  ['{A6ECA7F5-3736-58BE-A204-9F6365FFF72A}']
  { constructors } 

    {class} function init(node: DNSiteMapNode): DNSiteMapHierarchicalDataSourceView; overload;
    {class} function init(collection: DNSiteMapNodeCollection): DNSiteMapHierarchicalDataSourceView; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.SiteMapHierarchicalDataSourceView')]
  DNSiteMapHierarchicalDataSourceView = interface(DNHierarchicalDataSourceView)
  ['{3DE95943-A60B-3A75-ADF7-E6E05EDBB79D}']
  { methods } 

    function Select: DNIHierarchicalEnumerable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSiteMapHierarchicalDataSourceView = class(TDNGenericImport<DNSiteMapHierarchicalDataSourceViewClass, DNSiteMapHierarchicalDataSourceView>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNXmlHierarchicalDataSourceViewClass = interface(DNHierarchicalDataSourceViewClass)
  ['{9F31FA5C-666A-5741-9DFB-CC9884C3F728}']
  end;

  [DNTypeName('System.Web.UI.WebControls.XmlHierarchicalDataSourceView')]
  DNXmlHierarchicalDataSourceView = interface(DNHierarchicalDataSourceView)
  ['{5DC89C25-3EDF-3D1F-9D4C-EB524A017A5C}']
  { methods } 

    function Select: DNIHierarchicalEnumerable;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlHierarchicalDataSourceView = class(TDNGenericImport<DNXmlHierarchicalDataSourceViewClass, DNXmlHierarchicalDataSourceView>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTableCellCollectionClass = interface(DNObjectClass)
  ['{0C3A0DF5-6471-56AA-9925-D400CE320B0D}']
  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTableCellCollection')]
  DNHtmlTableCellCollection = interface(DDN.mscorlib.DNICollection)
  ['{B6F02D4F-1CAF-30A6-B3F0-5B272AC61967}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNHtmlTableCell;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Add(cell: DNHtmlTableCell);
    procedure Insert(index: Int32; cell: DNHtmlTableCell);
    procedure Clear;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Remove(cell: DNHtmlTableCell);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNHtmlTableCell read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNHtmlTableCellCollection = class(TDNGenericImport<DNHtmlTableCellCollectionClass, DNHtmlTableCellCollection>) end;

  //-------------namespace: System.Web.UI.HtmlControls----------------
  DNHtmlTableRowCollectionClass = interface(DNObjectClass)
  ['{3AE9F348-A262-5C0D-9190-21462F61C24B}']
  end;

  [DNTypeName('System.Web.UI.HtmlControls.HtmlTableRowCollection')]
  DNHtmlTableRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{40EDFD80-FC74-3F55-90C7-5D2C25CA1D7F}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNHtmlTableRow;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Add(row: DNHtmlTableRow);
    procedure Insert(index: Int32; row: DNHtmlTableRow);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure Remove(row: DNHtmlTableRow);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNHtmlTableRow read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNHtmlTableRowCollection = class(TDNGenericImport<DNHtmlTableRowCollectionClass, DNHtmlTableRowCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNIndexedStringClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E5EB3C9C-6E0D-5210-AE26-81F0D067C33B}']
  { constructors } 

    {class} function init(s: string): DNIndexedString;

  end;

  [DNTypeName('System.Web.UI.IndexedString')]
  DNIndexedString = interface(DDN.mscorlib.DNObject)
  ['{FE512B84-ECC6-367E-9479-82FEF9D7F7CD}']
  { getters & setters } 

    function get_Value: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value;
  end;

  TDNIndexedString = class(TDNGenericImport<DNIndexedStringClass, DNIndexedString>) end;

  //-------------namespace: System.Web.UI----------------
  DNListSourceHelperClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76A02AAC-E868-5517-B99F-44A0DCB786F5}']
  { static methods } 

    {class} function ContainsListCollection(dataSource: DNIDataSource): Boolean;
    {class} function GetList(dataSource: DNIDataSource): DDN.mscorlib.DNIList;

  end;

  [DNTypeName('System.Web.UI.ListSourceHelper')]
  DNListSourceHelper = interface(DDN.mscorlib.DNObject)
  ['{74BC60AF-9209-3F6B-9B83-AF55F9252D40}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNListSourceHelper = class(TDNGenericImport<DNListSourceHelperClass, DNListSourceHelper>) end;

  //-------------namespace: System.Web.UI----------------
  DNLosFormatterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5ED88123-CADE-5583-BAF3-96372CDAD6ED}']
  { constructors } 

    {class} function init: DNLosFormatter; overload;
    {class} function init(enableMac: Boolean; macKeyModifier: string): DNLosFormatter; overload;
    {class} function init(enableMac: Boolean; macKeyModifier: TArray<Byte>): DNLosFormatter; overload;

  end;

  [DNTypeName('System.Web.UI.LosFormatter')]
  DNLosFormatter = interface(DDN.mscorlib.DNObject)
  ['{DE3DEBCA-13AA-304A-ABAF-CB7671E535BA}']
  { methods } 

    function Deserialize(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    function Deserialize(input: string): DDN.mscorlib.DNObject; overload;
    procedure Serialize(stream: DDN.mscorlib.DNStream; value: DDN.mscorlib.DNObject); overload;
    procedure Serialize(output: DDN.mscorlib.DNTextWriter; value: DDN.mscorlib.DNObject); overload;
    function Deserialize(input: DDN.mscorlib.DNTextReader): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNLosFormatter = class(TDNGenericImport<DNLosFormatterClass, DNLosFormatter>) end;

  //-------------namespace: System.Web.UI----------------
  DNObjectConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{682DA2A4-8288-54A5-9450-B2151870D80E}']
  { constructors } 

    {class} function init: DNObjectConverter;

  { static methods } 

    {class} function ConvertValue(value: DDN.mscorlib.DNObject; toType: DDN.mscorlib.DNType; formatString: string): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Web.UI.ObjectConverter')]
  DNObjectConverter = interface(DDN.mscorlib.DNObject)
  ['{4301C100-C0F8-3B83-84BF-2B45F38A1B79}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNObjectConverter = class(TDNGenericImport<DNObjectConverterClass, DNObjectConverter>) end;

  //-------------namespace: System.Web.UI----------------
  DNObjectPersistDataClass = interface(DDN.mscorlib.DNObjectClass)
  ['{76CD7025-7CAF-55EE-94D5-B3B550924D21}']
  { constructors } 

    {class} function init(builder: DNControlBuilder; builtObjects: DDN.mscorlib.DNIDictionary): DNObjectPersistData;

  end;

  [DNTypeName('System.Web.UI.ObjectPersistData')]
  DNObjectPersistData = interface(DDN.mscorlib.DNObject)
  ['{8657B7BB-EBF7-3189-9B92-64F4B557B5CF}']
  { getters & setters } 

    function get_AllPropertyEntries: DDN.mscorlib.DNICollection;
    function get_BuiltObjects: DDN.mscorlib.DNIDictionary;
    function get_CollectionItems: DDN.mscorlib.DNICollection;
    function get_EventEntries: DDN.mscorlib.DNICollection;
    function get_IsCollection: Boolean;
    function get_Localize: Boolean;
    function get_ObjectType: DDN.mscorlib.DNType;
    function get_ResourceKey: string;

  { methods } 

    procedure AddToObjectControlBuilderTable(table: DDN.mscorlib.DNIDictionary);
    function GetFilteredProperty(filter: string; name: string): DNPropertyEntry;
    function GetFilteredProperties(filter: string): DDN.mscorlib.DNIDictionary;
    function GetPropertyAllFilters(name: string): DDN.mscorlib.DNICollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllPropertyEntries: DDN.mscorlib.DNICollection read get_AllPropertyEntries;
    property BuiltObjects: DDN.mscorlib.DNIDictionary read get_BuiltObjects;
    property CollectionItems: DDN.mscorlib.DNICollection read get_CollectionItems;
    property EventEntries: DDN.mscorlib.DNICollection read get_EventEntries;
    property IsCollection: Boolean read get_IsCollection;
    property Localize: Boolean read get_Localize;
    property ObjectType: DDN.mscorlib.DNType read get_ObjectType;
    property ResourceKey: string read get_ResourceKey;
  end;

  TDNObjectPersistData = class(TDNGenericImport<DNObjectPersistDataClass, DNObjectPersistData>) end;

  //-------------namespace: System.Web.UI----------------
  DNObjectStateFormatterClass = interface(DNObjectClass)
  ['{042FBA9E-2098-5B74-A146-EF40830B6720}']
  { constructors } 

    {class} function init: DNObjectStateFormatter;

  end;

  [DNTypeName('System.Web.UI.ObjectStateFormatter')]
  DNObjectStateFormatter = interface(DNIStateFormatter)
  ['{E264B655-9CA8-3FB9-AC45-30A38530E6F8}']
  { methods } 

    function Deserialize(inputStream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    function Deserialize(inputString: string): DDN.mscorlib.DNObject; overload;
    function Serialize(stateGraph: DDN.mscorlib.DNObject): string; overload;
    procedure Serialize(outputStream: DDN.mscorlib.DNStream; stateGraph: DDN.mscorlib.DNObject); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNObjectStateFormatter = class(TDNGenericImport<DNObjectStateFormatterClass, DNObjectStateFormatter>) end;

  //-------------namespace: System.Web.UI----------------
  DNOutputCacheParametersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BB008F08-E7D6-5646-BB92-A1633E055B76}']
  { constructors } 

    {class} function init: DNOutputCacheParameters;

  end;

  [DNTypeName('System.Web.UI.OutputCacheParameters')]
  DNOutputCacheParameters = interface(DDN.mscorlib.DNObject)
  ['{CF7E3885-6BC7-3DA7-AC14-C8B8D4B60A27}']
  { getters & setters } 

    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Duration: Int32;
    procedure set_Duration(value: Int32);
    function get_Location: DNOutputCacheLocation;
    procedure set_Location(value: DNOutputCacheLocation);
    function get_VaryByCustom: string;
    procedure set_VaryByCustom(value: string);
    function get_VaryByParam: string;
    procedure set_VaryByParam(value: string);
    function get_VaryByContentEncoding: string;
    procedure set_VaryByContentEncoding(value: string);
    function get_VaryByHeader: string;
    procedure set_VaryByHeader(value: string);
    function get_NoStore: Boolean;
    procedure set_NoStore(value: Boolean);
    function get_SqlDependency: string;
    procedure set_SqlDependency(value: string);
    function get_VaryByControl: string;
    procedure set_VaryByControl(value: string);
    function get_CacheProfile: string;
    procedure set_CacheProfile(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Duration: Int32 read get_Duration write set_Duration;
    property Location: DNOutputCacheLocation read get_Location write set_Location;
    property VaryByCustom: string read get_VaryByCustom write set_VaryByCustom;
    property VaryByParam: string read get_VaryByParam write set_VaryByParam;
    property VaryByContentEncoding: string read get_VaryByContentEncoding write set_VaryByContentEncoding;
    property VaryByHeader: string read get_VaryByHeader write set_VaryByHeader;
    property NoStore: Boolean read get_NoStore write set_NoStore;
    property SqlDependency: string read get_SqlDependency write set_SqlDependency;
    property VaryByControl: string read get_VaryByControl write set_VaryByControl;
    property CacheProfile: string read get_CacheProfile write set_CacheProfile;
  end;

  TDNOutputCacheParameters = class(TDNGenericImport<DNOutputCacheParametersClass, DNOutputCacheParameters>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageAsyncTaskClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4A7980B1-E1B9-5915-918B-8B8B80CBF402}']
  { constructors } 

    {class} function init(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; timeoutHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject): DNPageAsyncTask; overload;
    {class} function init(beginHandler: DNBeginEventHandler; endHandler: DNEndEventHandler; timeoutHandler: DNEndEventHandler; state: DDN.mscorlib.DNObject; executeInParallel: Boolean): DNPageAsyncTask; overload;
    {class} function init(handler: DDN.mscorlib.DNFunc<DDN.mscorlib.DNTask>): DNPageAsyncTask; overload;
    {class} function init(handler: DDN.mscorlib.DNFunc<DDN.mscorlib.DNCancellationToken, DDN.mscorlib.DNTask>): DNPageAsyncTask; overload;

  end;

  [DNTypeName('System.Web.UI.PageAsyncTask')]
  DNPageAsyncTask = interface(DDN.mscorlib.DNObject)
  ['{3578273E-1CCA-3D80-AB2F-5D8BFB4D5DAE}']
  { getters & setters } 

    function get_BeginHandler: DNBeginEventHandler;
    function get_EndHandler: DNEndEventHandler;
    function get_ExecuteInParallel: Boolean;
    function get_State: DDN.mscorlib.DNObject;
    function get_TimeoutHandler: DNEndEventHandler;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BeginHandler: DNBeginEventHandler read get_BeginHandler;
    property EndHandler: DNEndEventHandler read get_EndHandler;
    property ExecuteInParallel: Boolean read get_ExecuteInParallel;
    property State: DDN.mscorlib.DNObject read get_State;
    property TimeoutHandler: DNEndEventHandler read get_TimeoutHandler;
  end;

  TDNPageAsyncTask = class(TDNGenericImport<DNPageAsyncTaskClass, DNPageAsyncTask>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageHandlerFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C14BE14-0B50-55B5-8CAE-1E0E501A4EE5}']
  end;

  [DNTypeName('System.Web.UI.PageHandlerFactory')]
  DNPageHandlerFactory = interface(DDN.mscorlib.DNObject)
  ['{76BA5F66-5E5A-3A49-82FB-34517325A478}']
  { methods } 

    function GetHandler(context: DNHttpContext; requestType: string; virtualPath: string; path: string): DNIHttpHandler;
    procedure ReleaseHandler(handler: DNIHttpHandler);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageHandlerFactory = class(TDNGenericImport<DNPageHandlerFactoryClass, DNPageHandlerFactory>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageParserFilterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E38E47DD-0797-5C9E-B4B4-C578C4810F4B}']
  end;

  [DNTypeName('System.Web.UI.PageParserFilter')]
  DNPageParserFilter = interface(DDN.mscorlib.DNObject)
  ['{E2E2097D-7D8B-3D69-80B5-9A691C1F138D}']
  { getters & setters } 

    function get_AllowCode: Boolean;
    function get_NumberOfControlsAllowed: Int32;
    function get_TotalNumberOfDependenciesAllowed: Int32;
    function get_NumberOfDirectDependenciesAllowed: Int32;

  { methods } 

    procedure ParseComplete(rootBuilder: DNControlBuilder);
    function GetCompilationMode(current: DNCompilationMode): DNCompilationMode;
    function AllowControl(controlType: DDN.mscorlib.DNType; builder: DNControlBuilder): Boolean;
    function AllowBaseType(baseType: DDN.mscorlib.DNType): Boolean;
    function AllowVirtualReference(referenceVirtualPath: string; referenceType: DNVirtualReferenceType): Boolean;
    function AllowServerSideInclude(includeVirtualPath: string): Boolean;
    procedure PreprocessDirective(directiveName: string; attributes: DDN.mscorlib.DNIDictionary);
    function ProcessCodeConstruct(codeType: DNCodeConstructType; code: string): Boolean;
    function ProcessDataBindingAttribute(controlId: string; name: string; value: string): Boolean;
    function ProcessEventHookup(controlId: string; eventName: string; handlerName: string): Boolean;
    function GetNoCompileUserControlType: DDN.mscorlib.DNType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowCode: Boolean read get_AllowCode;
    property NumberOfControlsAllowed: Int32 read get_NumberOfControlsAllowed;
    property TotalNumberOfDependenciesAllowed: Int32 read get_TotalNumberOfDependenciesAllowed;
    property NumberOfDirectDependenciesAllowed: Int32 read get_NumberOfDirectDependenciesAllowed;
  end;

  TDNPageParserFilter = class(TDNGenericImport<DNPageParserFilterClass, DNPageParserFilter>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageStatePersisterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A882FECF-A2EB-5861-96E6-025FDD2BFB72}']
  end;

  [DNTypeName('System.Web.UI.PageStatePersister')]
  DNPageStatePersister = interface(DDN.mscorlib.DNObject)
  ['{54B42204-F898-3E12-8459-C4E65B372BC4}']
  { getters & setters } 

    function get_ControlState: DDN.mscorlib.DNObject;
    procedure set_ControlState(value: DDN.mscorlib.DNObject);
    function get_ViewState: DDN.mscorlib.DNObject;
    procedure set_ViewState(value: DDN.mscorlib.DNObject);

  { methods } 

    procedure Load;
    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlState: DDN.mscorlib.DNObject read get_ControlState write set_ControlState;
    property ViewState: DDN.mscorlib.DNObject read get_ViewState write set_ViewState;
  end;

  TDNPageStatePersister = class(TDNGenericImport<DNPageStatePersisterClass, DNPageStatePersister>) end;

  //-------------namespace: System.Web.UI----------------
  DNHiddenFieldPageStatePersisterClass = interface(DNPageStatePersisterClass)
  ['{87DA6D0C-9A51-5A2E-98E1-F11A64847B6E}']
  { constructors } 

    {class} function init(page: DNPage): DNHiddenFieldPageStatePersister;

  end;

  [DNTypeName('System.Web.UI.HiddenFieldPageStatePersister')]
  DNHiddenFieldPageStatePersister = interface(DNPageStatePersister)
  ['{C903CD97-2D78-3D4A-B74D-47C937ABB002}']
  { getters & setters } 

    function get_ControlState: DDN.mscorlib.DNObject;
    procedure set_ControlState(value: DDN.mscorlib.DNObject);
    function get_ViewState: DDN.mscorlib.DNObject;
    procedure set_ViewState(value: DDN.mscorlib.DNObject);

  { methods } 

    procedure Load;
    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlState: DDN.mscorlib.DNObject read get_ControlState write set_ControlState;
    property ViewState: DDN.mscorlib.DNObject read get_ViewState write set_ViewState;
  end;

  TDNHiddenFieldPageStatePersister = class(TDNGenericImport<DNHiddenFieldPageStatePersisterClass, DNHiddenFieldPageStatePersister>) end;

  //-------------namespace: System.Web.UI----------------
  DNSessionPageStatePersisterClass = interface(DNPageStatePersisterClass)
  ['{2C47D7CE-EA59-5542-8670-EBCB8DA72F1F}']
  { constructors } 

    {class} function init(page: DNPage): DNSessionPageStatePersister;

  end;

  [DNTypeName('System.Web.UI.SessionPageStatePersister')]
  DNSessionPageStatePersister = interface(DNPageStatePersister)
  ['{15C6DD55-851D-320E-8B89-1A8F497864D5}']
  { getters & setters } 

    function get_ControlState: DDN.mscorlib.DNObject;
    procedure set_ControlState(value: DDN.mscorlib.DNObject);
    function get_ViewState: DDN.mscorlib.DNObject;
    procedure set_ViewState(value: DDN.mscorlib.DNObject);

  { methods } 

    procedure Load;
    procedure Save;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlState: DDN.mscorlib.DNObject read get_ControlState write set_ControlState;
    property ViewState: DDN.mscorlib.DNObject read get_ViewState write set_ViewState;
  end;

  TDNSessionPageStatePersister = class(TDNGenericImport<DNSessionPageStatePersisterClass, DNSessionPageStatePersister>) end;

  //-------------namespace: System.Web.UI----------------
  DNPageThemeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{300F2410-CD87-57B8-8676-71FD1EB678DE}']
  { static methods } 

    {class} function CreateSkinKey(controlType: DDN.mscorlib.DNType; skinID: string): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Web.UI.PageTheme')]
  DNPageTheme = interface(DDN.mscorlib.DNObject)
  ['{128AB6E7-427A-34DD-ABB2-B7C57E552FE7}']
  { methods } 

    function TestDeviceFilter(deviceFilterName: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPageTheme = class(TDNGenericImport<DNPageThemeClass, DNPageTheme>) end;

  //-------------namespace: System.Web.UI----------------
  DNPairClass = interface(DDN.mscorlib.DNObjectClass)
  ['{98C309C1-9A79-549C-B012-6D392CA02627}']
  { constructors } 

    {class} function init: DNPair; overload;
    {class} function init(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject): DNPair; overload;

  end;

  [DNTypeName('System.Web.UI.Pair')]
  DNPair = interface(DDN.mscorlib.DNObject)
  ['{C31FDE24-8F00-3EDE-975D-D101EDBF37CC}']
  { fields getter & setter } 

   function __fakeFieldGet_First: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_First(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_Second: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_Second(value: DDN.mscorlib.DNObject);

  { fields } 

   property First: DDN.mscorlib.DNObject read __fakeFieldGet_First write __fakeFieldSet_First;
   property Second: DDN.mscorlib.DNObject read __fakeFieldGet_Second write __fakeFieldSet_Second;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPair = class(TDNGenericImport<DNPairClass, DNPair>) end;

  //-------------namespace: System.Web.UI----------------
  DNParseRecorderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{517EAF5B-F0E8-568E-8B57-67AC9D8F41C1}']
  { static getter & setter } 

    {class} function get_RecorderFactories: DDN.mscorlib.DNIList<DDN.mscorlib.DNFunc<DNParseRecorder>>;

  { static propertys } 

    {class} property RecorderFactories: DDN.mscorlib.DNIList<DDN.mscorlib.DNFunc<DNParseRecorder>> read get_RecorderFactories;
  end;

  [DNTypeName('System.Web.UI.ParseRecorder')]
  DNParseRecorder = interface(DDN.mscorlib.DNObject)
  ['{02A17167-C360-37B2-9A51-C95410D61A19}']
  { methods } 

    procedure Initialize(parser: DNTemplateParser);
    procedure RecordBeginTag(builder: DNControlBuilder; tag: DDN.System.DNMatch);
    procedure RecordEndTag(builder: DNControlBuilder; tag: DDN.System.DNMatch);
    procedure RecordEmptyTag(builder: DNControlBuilder; tag: DDN.System.DNMatch);
    procedure RecordCodeBlock(builder: DNControlBuilder; codeBlock: DDN.System.DNMatch);
    procedure ParseComplete(root: DNControlBuilder);
    procedure ProcessGeneratedCode(builder: DNControlBuilder; codeCompileUnit: DDN.System.DNCodeCompileUnit; baseType: DDN.System.DNCodeTypeDeclaration; derivedType: DDN.System.DNCodeTypeDeclaration; buildMethod: DDN.System.DNCodeMemberMethod; dataBindingMethod: DDN.System.DNCodeMemberMethod);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNParseRecorder = class(TDNGenericImport<DNParseRecorderClass, DNParseRecorder>) end;

  //-------------namespace: System.Web.UI----------------
  DNPostBackOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5ACF0C72-A7DD-52AC-8C92-11CC9ABB20D4}']
  { constructors } 

    {class} function init(targetControl: DNControl): DNPostBackOptions; overload;
    {class} function init(targetControl: DNControl; argument: string): DNPostBackOptions; overload;
    {class} function init(targetControl: DNControl; argument: string; actionUrl: string; autoPostBack: Boolean; requiresJavaScriptProtocol: Boolean; trackFocus: Boolean; clientSubmit: Boolean; performValidation: Boolean; validationGroup: string): DNPostBackOptions; overload;

  end;

  [DNTypeName('System.Web.UI.PostBackOptions')]
  DNPostBackOptions = interface(DDN.mscorlib.DNObject)
  ['{4FF59E45-4B85-3AE6-AA3D-36B12CDE86CF}']
  { getters & setters } 

    function get_ActionUrl: string;
    procedure set_ActionUrl(value: string);
    function get_Argument: string;
    procedure set_Argument(value: string);
    function get_AutoPostBack: Boolean;
    procedure set_AutoPostBack(value: Boolean);
    function get_ClientSubmit: Boolean;
    procedure set_ClientSubmit(value: Boolean);
    function get_RequiresJavaScriptProtocol: Boolean;
    procedure set_RequiresJavaScriptProtocol(value: Boolean);
    function get_PerformValidation: Boolean;
    procedure set_PerformValidation(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_TargetControl: DNControl;
    function get_TrackFocus: Boolean;
    procedure set_TrackFocus(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ActionUrl: string read get_ActionUrl write set_ActionUrl;
    property Argument: string read get_Argument write set_Argument;
    property AutoPostBack: Boolean read get_AutoPostBack write set_AutoPostBack;
    property ClientSubmit: Boolean read get_ClientSubmit write set_ClientSubmit;
    property RequiresJavaScriptProtocol: Boolean read get_RequiresJavaScriptProtocol write set_RequiresJavaScriptProtocol;
    property PerformValidation: Boolean read get_PerformValidation write set_PerformValidation;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property TargetControl: DNControl read get_TargetControl;
    property TrackFocus: Boolean read get_TrackFocus write set_TrackFocus;
  end;

  TDNPostBackOptions = class(TDNGenericImport<DNPostBackOptionsClass, DNPostBackOptions>) end;

  //-------------namespace: System.Web.UI----------------
  DNPropertyConverterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D2975F14-A2C7-527A-88A8-F51D8D72A3C0}']
  { static methods } 

    {class} function EnumFromString(enumType: DDN.mscorlib.DNType; value: string): DDN.mscorlib.DNObject;
    {class} function EnumToString(enumType: DDN.mscorlib.DNType; enumValue: DDN.mscorlib.DNObject): string;
    {class} function ObjectFromString(objType: DDN.mscorlib.DNType; propertyInfo: DDN.mscorlib.DNMemberInfo; value: string): DDN.mscorlib.DNObject;

  end;

  [DNTypeName('System.Web.UI.PropertyConverter')]
  DNPropertyConverter = interface(DDN.mscorlib.DNObject)
  ['{D1000CB9-8C38-3508-AFA4-DBF6E102448A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPropertyConverter = class(TDNGenericImport<DNPropertyConverterClass, DNPropertyConverter>) end;

  //-------------namespace: System.Web.UI----------------
  DNPropertyEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E7FE436D-82E4-5F81-96E7-A7A45422CF7F}']
  end;

  [DNTypeName('System.Web.UI.PropertyEntry')]
  DNPropertyEntry = interface(DDN.mscorlib.DNObject)
  ['{00B64C37-5DE4-360C-B46C-876A2604C168}']
  { getters & setters } 

    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNPropertyEntry = class(TDNGenericImport<DNPropertyEntryClass, DNPropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNBoundPropertyEntryClass = interface(DNPropertyEntryClass)
  ['{6EF28091-B9F8-56D1-9594-2870FD5B2296}']
  end;

  [DNTypeName('System.Web.UI.BoundPropertyEntry')]
  DNBoundPropertyEntry = interface(DNPropertyEntry)
  ['{2B9B7E8F-47FC-316A-8865-01A7A1680DEF}']
  { getters & setters } 

    function get_ControlID: string;
    procedure set_ControlID(value: string);
    function get_ControlType: DDN.mscorlib.DNType;
    procedure set_ControlType(value: DDN.mscorlib.DNType);
    function get_Expression: string;
    procedure set_Expression(value: string);
    function get_ExpressionBuilder: DNCompilation_ExpressionBuilder;
    procedure set_ExpressionBuilder(value: DNCompilation_ExpressionBuilder);
    function get_ExpressionPrefix: string;
    procedure set_ExpressionPrefix(value: string);
    function get_FieldName: string;
    procedure set_FieldName(value: string);
    function get_FormatString: string;
    procedure set_FormatString(value: string);
    function get_Generated: Boolean;
    procedure set_Generated(value: Boolean);
    function get_ParsedExpressionData: DDN.mscorlib.DNObject;
    procedure set_ParsedExpressionData(value: DDN.mscorlib.DNObject);
    function get_ReadOnlyProperty: Boolean;
    procedure set_ReadOnlyProperty(value: Boolean);
    function get_TwoWayBound: Boolean;
    procedure set_TwoWayBound(value: Boolean);
    function get_UseSetAttribute: Boolean;
    procedure set_UseSetAttribute(value: Boolean);
    function get_IsEncoded: Boolean;
    procedure set_IsEncoded(value: Boolean);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ControlID: string read get_ControlID write set_ControlID;
    property ControlType: DDN.mscorlib.DNType read get_ControlType write set_ControlType;
    property Expression: string read get_Expression write set_Expression;
    property ExpressionBuilder: DNCompilation_ExpressionBuilder read get_ExpressionBuilder write set_ExpressionBuilder;
    property ExpressionPrefix: string read get_ExpressionPrefix write set_ExpressionPrefix;
    property FieldName: string read get_FieldName write set_FieldName;
    property FormatString: string read get_FormatString write set_FormatString;
    property Generated: Boolean read get_Generated write set_Generated;
    property ParsedExpressionData: DDN.mscorlib.DNObject read get_ParsedExpressionData write set_ParsedExpressionData;
    property ReadOnlyProperty: Boolean read get_ReadOnlyProperty write set_ReadOnlyProperty;
    property TwoWayBound: Boolean read get_TwoWayBound write set_TwoWayBound;
    property UseSetAttribute: Boolean read get_UseSetAttribute write set_UseSetAttribute;
    property IsEncoded: Boolean read get_IsEncoded write set_IsEncoded;
    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNBoundPropertyEntry = class(TDNGenericImport<DNBoundPropertyEntryClass, DNBoundPropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNBuilderPropertyEntryClass = interface(DNPropertyEntryClass)
  ['{4CE1A310-9FD4-5630-B52F-564E807AAAB6}']
  end;

  [DNTypeName('System.Web.UI.BuilderPropertyEntry')]
  DNBuilderPropertyEntry = interface(DNPropertyEntry)
  ['{672E3E79-8B90-3333-8D54-75F66F27240B}']
  { getters & setters } 

    function get_Builder: DNControlBuilder;
    procedure set_Builder(value: DNControlBuilder);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Builder: DNControlBuilder read get_Builder write set_Builder;
    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNBuilderPropertyEntry = class(TDNGenericImport<DNBuilderPropertyEntryClass, DNBuilderPropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNComplexPropertyEntryClass = interface(DNBuilderPropertyEntryClass)
  ['{2BC7AE8E-D6E6-507B-B50C-5A16B109DDE9}']
  end;

  [DNTypeName('System.Web.UI.ComplexPropertyEntry')]
  DNComplexPropertyEntry = interface(DNBuilderPropertyEntry)
  ['{88B61A12-CFB7-3A6C-A60B-7EAA6997C18F}']
  { getters & setters } 

    function get_IsCollectionItem: Boolean;
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_Builder: DNControlBuilder;
    procedure set_Builder(value: DNControlBuilder);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsCollectionItem: Boolean read get_IsCollectionItem;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property Builder: DNControlBuilder read get_Builder write set_Builder;
    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNComplexPropertyEntry = class(TDNGenericImport<DNComplexPropertyEntryClass, DNComplexPropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNTemplatePropertyEntryClass = interface(DNBuilderPropertyEntryClass)
  ['{00DF6832-518A-51F8-9A3D-2142118C274F}']
  end;

  [DNTypeName('System.Web.UI.TemplatePropertyEntry')]
  DNTemplatePropertyEntry = interface(DNBuilderPropertyEntry)
  ['{52DA9E25-AF72-37D8-82ED-EB8DF6844124}']
  { getters & setters } 

    function get_BindableTemplate: Boolean;
    function get_Builder: DNControlBuilder;
    procedure set_Builder(value: DNControlBuilder);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BindableTemplate: Boolean read get_BindableTemplate;
    property Builder: DNControlBuilder read get_Builder write set_Builder;
    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNTemplatePropertyEntry = class(TDNGenericImport<DNTemplatePropertyEntryClass, DNTemplatePropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNSimplePropertyEntryClass = interface(DNPropertyEntryClass)
  ['{094A41BC-5804-5229-81CA-9F6C027D97F9}']
  end;

  [DNTypeName('System.Web.UI.SimplePropertyEntry')]
  DNSimplePropertyEntry = interface(DNPropertyEntry)
  ['{AA9B1D90-03BF-35BA-AA43-40FB7756EB22}']
  { getters & setters } 

    function get_PersistedValue: string;
    procedure set_PersistedValue(value: string);
    function get_UseSetAttribute: Boolean;
    procedure set_UseSetAttribute(value: Boolean);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_Filter: string;
    procedure set_Filter(value: string);
    function get_PropertyInfo: DDN.mscorlib.DNPropertyInfo;
    procedure set_PropertyInfo(value: DDN.mscorlib.DNPropertyInfo);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DeclaringType: DDN.mscorlib.DNType;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PersistedValue: string read get_PersistedValue write set_PersistedValue;
    property UseSetAttribute: Boolean read get_UseSetAttribute write set_UseSetAttribute;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property Filter: string read get_Filter write set_Filter;
    property PropertyInfo: DDN.mscorlib.DNPropertyInfo read get_PropertyInfo write set_PropertyInfo;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property DeclaringType: DDN.mscorlib.DNType read get_DeclaringType;
  end;

  TDNSimplePropertyEntry = class(TDNGenericImport<DNSimplePropertyEntryClass, DNSimplePropertyEntry>) end;

  //-------------namespace: System.Web.UI----------------
  DNRenderTraceListenerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4B69913B-9D1A-5831-9105-D6D539F48E8A}']
  { static getter & setter } 

    {class} function get_ListenerFactories: DDN.mscorlib.DNIList<DDN.mscorlib.DNFunc<DNRenderTraceListener>>;

  { static propertys } 

    {class} property ListenerFactories: DDN.mscorlib.DNIList<DDN.mscorlib.DNFunc<DNRenderTraceListener>> read get_ListenerFactories;
  end;

  [DNTypeName('System.Web.UI.RenderTraceListener')]
  DNRenderTraceListener = interface(DDN.mscorlib.DNObject)
  ['{F8592D8C-5271-3845-BA88-F8A671C0E33A}']
  { methods } 

    procedure Initialize(context: DNHttpContext);
    procedure SetTraceData(tracedObject: DDN.mscorlib.DNObject; traceDataKey: DDN.mscorlib.DNObject; traceDataValue: DDN.mscorlib.DNObject);
    procedure ShareTraceData(source: DDN.mscorlib.DNObject; destination: DDN.mscorlib.DNObject);
    procedure BeginRendering(writer: DDN.mscorlib.DNTextWriter; renderedObject: DDN.mscorlib.DNObject);
    procedure EndRendering(writer: DDN.mscorlib.DNTextWriter; renderedObject: DDN.mscorlib.DNObject);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRenderTraceListener = class(TDNGenericImport<DNRenderTraceListenerClass, DNRenderTraceListener>) end;

  //-------------namespace: System.Web.UI----------------
  DNSimpleWebHandlerParserClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3A99FB9D-2DC0-5BCE-A85D-1EAF80A07109}']
  end;

  [DNTypeName('System.Web.UI.SimpleWebHandlerParser')]
  DNSimpleWebHandlerParser = interface(DDN.mscorlib.DNObject)
  ['{F48487CB-94A6-33DE-985C-A2F78F5A09A3}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSimpleWebHandlerParser = class(TDNGenericImport<DNSimpleWebHandlerParserClass, DNSimpleWebHandlerParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNWebServiceParserClass = interface(DNSimpleWebHandlerParserClass)
  ['{5A457FAB-5BCE-5C13-AF96-9D1B3988BB3F}']
  { static methods } 

    {class} function GetCompiledType(inputFile: string; context: DNHttpContext): DDN.mscorlib.DNType;

  end;

  [DNTypeName('System.Web.UI.WebServiceParser')]
  DNWebServiceParser = interface(DNSimpleWebHandlerParser)
  ['{41E0A305-70C5-3D94-8947-68A1071B0E71}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebServiceParser = class(TDNGenericImport<DNWebServiceParserClass, DNWebServiceParser>) end;

  //-------------namespace: System.Web.UI----------------
  DNStateBagClass = interface(DNObjectClass)
  ['{0B984C9B-EC17-5B89-96C0-6B85A09B0AD1}']
  { constructors } 

    {class} function init: DNStateBag; overload;
    {class} function init(ignoreCase: Boolean): DNStateBag; overload;

  end;

  [DNTypeName('System.Web.UI.StateBag')]
  DNStateBag = interface(DNIStateManager)
  ['{285CF50D-EC3F-3ED8-999D-18EEBEC20EE6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Item(key: string): DDN.mscorlib.DNObject;
    procedure set_Item(key: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function Add(key: string; value: DDN.mscorlib.DNObject): DNStateItem;
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function IsItemDirty(key: string): Boolean;
    procedure Remove(key: string);
    procedure SetDirty(dirty: Boolean);
    procedure SetItemDirty(key: string; dirty: Boolean);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Item[key: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  TDNStateBag = class(TDNGenericImport<DNStateBagClass, DNStateBag>) end;

  //-------------namespace: System.Web.UI----------------
  DNStateItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EF1394F6-AE16-59E2-B5C4-0C282F317658}']
  end;

  [DNTypeName('System.Web.UI.StateItem')]
  DNStateItem = interface(DDN.mscorlib.DNObject)
  ['{E7BA7E9A-88D9-3C55-B952-D3F81F3D87CC}']
  { getters & setters } 

    function get_IsDirty: Boolean;
    procedure set_IsDirty(value: Boolean);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDirty: Boolean read get_IsDirty write set_IsDirty;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
  end;

  TDNStateItem = class(TDNGenericImport<DNStateItemClass, DNStateItem>) end;

  //-------------namespace: System.Web.UI----------------
  DNStateManagedCollectionClass = interface(DNObjectClass)
  ['{6DB5050A-ED2C-5CDF-81EB-ED0357990C8F}']
  end;

  [DNTypeName('System.Web.UI.StateManagedCollection')]
  DNStateManagedCollection = interface(DDN.mscorlib.DNIList)
  ['{0403E6ED-E745-39DE-87C4-66B07A864E1F}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
  end;

  TDNStateManagedCollection = class(TDNGenericImport<DNStateManagedCollectionClass, DNStateManagedCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlFieldCollectionClass = interface(DNStateManagedCollectionClass)
  ['{6B3BE306-D836-5FCB-945A-ABF980A2C743}']
  { constructors } 

    {class} function init: DNDataControlFieldCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataControlFieldCollection')]
  DNDataControlFieldCollection = interface(DNStateManagedCollection)
  ['{C05ED606-0AFF-3C3C-A195-F71E2B737B9B}']
  { getters & setters } 

    function get_Item(index: Int32): DNDataControlField;
    function get_Count: Int32;

  { events } 

    procedure add_FieldsChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_FieldsChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    procedure Add(field: DNDataControlField);
    function CloneFields: DNDataControlFieldCollection;
    function &Contains(field: DNDataControlField): Boolean;
    procedure CopyTo(&array: TArray<DNDataControlField>; index: Int32); overload;
    function IndexOf(field: DNDataControlField): Int32;
    procedure Insert(index: Int32; field: DNDataControlField);
    procedure RemoveAt(index: Int32);
    procedure Remove(field: DNDataControlField);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNDataControlField read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNDataControlFieldCollection = class(TDNGenericImport<DNDataControlFieldCollectionClass, DNDataControlFieldCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHotSpotCollectionClass = interface(DNStateManagedCollectionClass)
  ['{B29BB7FD-7119-5084-A91F-8A5AEBBFFF98}']
  { constructors } 

    {class} function init: DNHotSpotCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.HotSpotCollection')]
  DNHotSpotCollection = interface(DNStateManagedCollection)
  ['{E0EDAC5B-190A-3A8D-96E0-941B26F390B2}']
  { getters & setters } 

    function get_Item(index: Int32): DNHotSpot;
    function get_Count: Int32;

  { methods } 

    function Add(spot: DNHotSpot): Int32;
    procedure Insert(index: Int32; spot: DNHotSpot);
    procedure Remove(spot: DNHotSpot);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNHotSpot read get_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNHotSpotCollection = class(TDNGenericImport<DNHotSpotCollectionClass, DNHotSpotCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemBindingCollectionClass = interface(DNStateManagedCollectionClass)
  ['{1C6C1795-8126-56F6-9687-76E2A01931D0}']
  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemBindingCollection')]
  DNMenuItemBindingCollection = interface(DNStateManagedCollection)
  ['{26056C62-3E29-32BB-ADE0-182F183C2B43}']
  { getters & setters } 

    function get_Item(i: Int32): DNMenuItemBinding;
    procedure set_Item(i: Int32; value: DNMenuItemBinding);
    function get_Count: Int32;

  { methods } 

    function Add(binding: DNMenuItemBinding): Int32;
    function &Contains(binding: DNMenuItemBinding): Boolean;
    procedure CopyTo(&array: TArray<DNMenuItemBinding>; index: Int32); overload;
    function IndexOf(value: DNMenuItemBinding): Int32;
    procedure Insert(index: Int32; binding: DNMenuItemBinding);
    procedure Remove(binding: DNMenuItemBinding);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNMenuItemBinding read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNMenuItemBindingCollection = class(TDNGenericImport<DNMenuItemBindingCollectionClass, DNMenuItemBindingCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemStyleCollectionClass = interface(DNStateManagedCollectionClass)
  ['{BCFFA8AA-ED4E-53E4-B16B-81A5C46C5195}']
  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemStyleCollection')]
  DNMenuItemStyleCollection = interface(DNStateManagedCollection)
  ['{7D768AE5-4BFC-3CDC-B806-47A080C6C71D}']
  { getters & setters } 

    function get_Item(i: Int32): DNMenuItemStyle;
    procedure set_Item(i: Int32; value: DNMenuItemStyle);
    function get_Count: Int32;

  { methods } 

    function Add(style: DNMenuItemStyle): Int32;
    function &Contains(style: DNMenuItemStyle): Boolean;
    procedure CopyTo(styleArray: TArray<DNMenuItemStyle>; index: Int32); overload;
    function IndexOf(style: DNMenuItemStyle): Int32;
    procedure Insert(index: Int32; style: DNMenuItemStyle);
    procedure Remove(style: DNMenuItemStyle);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNMenuItemStyle read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNMenuItemStyleCollection = class(TDNGenericImport<DNMenuItemStyleCollectionClass, DNMenuItemStyleCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNParameterCollectionClass = interface(DNStateManagedCollectionClass)
  ['{914CF827-E05A-51CC-81B7-30777F9AF9C8}']
  { constructors } 

    {class} function init: DNParameterCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.ParameterCollection')]
  DNParameterCollection = interface(DNStateManagedCollection)
  ['{3724C5C3-1458-344D-BF87-A3FBDAB016EF}']
  { getters & setters } 

    function get_Item(index: Int32): DNParameter; overload;
    procedure set_Item(index: Int32; value: DNParameter); overload;
    function get_Item(name: string): DNParameter; overload;
    procedure set_Item(name: string; value: DNParameter); overload;
    function get_Count: Int32;

  { events } 

    procedure add_ParametersChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_ParametersChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function Add(parameter: DNParameter): Int32; overload;
    function Add(name: string; value: string): Int32; overload;
    function Add(name: string; &type: DDN.mscorlib.DNTypeCode; value: string): Int32; overload;
    function &Contains(parameter: DNParameter): Boolean;
    procedure CopyTo(parameterArray: TArray<DNParameter>; index: Int32); overload;
    function GetValues(context: DNHttpContext; control: DNControl): DDN.System.DNIOrderedDictionary;
    function IndexOf(parameter: DNParameter): Int32;
    procedure Insert(index: Int32; parameter: DNParameter);
    procedure Remove(parameter: DNParameter);
    procedure RemoveAt(index: Int32);
    procedure UpdateValues(context: DNHttpContext; control: DNControl);
    function Add(name: string; dbType: DDN.System.Data.DNDbType; value: string): Int32; overload;
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNParameter read get_Item write set_Item; default;
    property Item[name: string]: DNParameter read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNParameterCollection = class(TDNGenericImport<DNParameterCollectionClass, DNParameterCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNStyleCollectionClass = interface(DNStateManagedCollectionClass)
  ['{A60D7D6A-C485-5821-806F-279A0C2E22D9}']
  end;

  [DNTypeName('System.Web.UI.WebControls.StyleCollection')]
  DNStyleCollection = interface(DNStateManagedCollection)
  ['{F26FC50D-CD91-3D32-9F79-5AA19997BC6D}']
  { getters & setters } 

    function get_Item(i: Int32): DNStyle;
    procedure set_Item(i: Int32; value: DNStyle);
    function get_Count: Int32;

  { methods } 

    function Add(style: DNStyle): Int32;
    function &Contains(style: DNStyle): Boolean;
    procedure CopyTo(styleArray: TArray<DNStyle>; index: Int32); overload;
    function IndexOf(style: DNStyle): Int32;
    procedure Insert(index: Int32; style: DNStyle);
    procedure Remove(style: DNStyle);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNStyle read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNStyleCollection = class(TDNGenericImport<DNStyleCollectionClass, DNStyleCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSubMenuStyleCollectionClass = interface(DNStateManagedCollectionClass)
  ['{F51D8108-01D6-5FFC-9631-8DBE6AB6B7E4}']
  end;

  [DNTypeName('System.Web.UI.WebControls.SubMenuStyleCollection')]
  DNSubMenuStyleCollection = interface(DNStateManagedCollection)
  ['{5A52D7EC-5EC4-37A3-9C79-CDDA561D39CD}']
  { getters & setters } 

    function get_Item(i: Int32): DNSubMenuStyle;
    procedure set_Item(i: Int32; value: DNSubMenuStyle);
    function get_Count: Int32;

  { methods } 

    function Add(style: DNSubMenuStyle): Int32;
    function &Contains(style: DNSubMenuStyle): Boolean;
    procedure CopyTo(styleArray: TArray<DNSubMenuStyle>; index: Int32); overload;
    function IndexOf(style: DNSubMenuStyle): Int32;
    procedure Insert(index: Int32; style: DNSubMenuStyle);
    procedure Remove(style: DNSubMenuStyle);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNSubMenuStyle read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNSubMenuStyleCollection = class(TDNGenericImport<DNSubMenuStyleCollectionClass, DNSubMenuStyleCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeBindingCollectionClass = interface(DNStateManagedCollectionClass)
  ['{B2A8DF37-CF8B-562F-913D-47C209B3BB25}']
  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeBindingCollection')]
  DNTreeNodeBindingCollection = interface(DNStateManagedCollection)
  ['{29869133-97E7-36A6-9BB4-3336E82FF83B}']
  { getters & setters } 

    function get_Item(i: Int32): DNTreeNodeBinding;
    procedure set_Item(i: Int32; value: DNTreeNodeBinding);
    function get_Count: Int32;

  { methods } 

    function Add(binding: DNTreeNodeBinding): Int32;
    function &Contains(binding: DNTreeNodeBinding): Boolean;
    procedure CopyTo(bindingArray: TArray<DNTreeNodeBinding>; index: Int32); overload;
    function IndexOf(binding: DNTreeNodeBinding): Int32;
    procedure Insert(index: Int32; binding: DNTreeNodeBinding);
    procedure Remove(binding: DNTreeNodeBinding);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNTreeNodeBinding read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTreeNodeBindingCollection = class(TDNGenericImport<DNTreeNodeBindingCollectionClass, DNTreeNodeBindingCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeStyleCollectionClass = interface(DNStateManagedCollectionClass)
  ['{1E032680-E461-5F59-AD10-A9D88BE22001}']
  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeStyleCollection')]
  DNTreeNodeStyleCollection = interface(DNStateManagedCollection)
  ['{5BCBECB8-7EEE-3DA5-B414-284613B755EA}']
  { getters & setters } 

    function get_Item(i: Int32): DNTreeNodeStyle;
    procedure set_Item(i: Int32; value: DNTreeNodeStyle);
    function get_Count: Int32;

  { methods } 

    function Add(style: DNTreeNodeStyle): Int32;
    function &Contains(style: DNTreeNodeStyle): Boolean;
    procedure CopyTo(styleArray: TArray<DNTreeNodeStyle>; index: Int32); overload;
    function IndexOf(style: DNTreeNodeStyle): Int32;
    procedure Insert(index: Int32; style: DNTreeNodeStyle);
    procedure Remove(style: DNTreeNodeStyle);
    procedure RemoveAt(index: Int32);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[i: Int32]: DNTreeNodeStyle read get_Item write set_Item; default;
    property Count: Int32 read get_Count;
  end;

  TDNTreeNodeStyleCollection = class(TDNGenericImport<DNTreeNodeStyleCollectionClass, DNTreeNodeStyleCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNThemeProviderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D1BE0D15-ECD3-549D-8FEC-614A85B14F32}']
  { constructors } 

    {class} function init(host: DDN.System.DNIDesignerHost; name: string; themeDefinition: string; cssFiles: TArray<string>; themePath: string): DNThemeProvider;

  end;

  [DNTypeName('System.Web.UI.ThemeProvider')]
  DNThemeProvider = interface(DDN.mscorlib.DNObject)
  ['{E7998B2B-56B4-3124-BD8D-33256958A7B6}']
  { getters & setters } 

    function get_ContentHashCode: Int32;
    function get_CssFiles: DDN.mscorlib.DNICollection;
    function get_DesignerHost: DDN.System.DNIDesignerHost;
    function get_ThemeName: string;

  { methods } 

    function GetSkinsForControl(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNICollection;
    function GetSkinBuilder(control: DNControl): DNSkinBuilder;
    function GetSkinControlBuildersForControlType(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNIDictionary;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ContentHashCode: Int32 read get_ContentHashCode;
    property CssFiles: DDN.mscorlib.DNICollection read get_CssFiles;
    property DesignerHost: DDN.System.DNIDesignerHost read get_DesignerHost;
    property ThemeName: string read get_ThemeName;
  end;

  TDNThemeProvider = class(TDNGenericImport<DNThemeProviderClass, DNThemeProvider>) end;

  //-------------namespace: System.Web.UI----------------
  DNTripletClass = interface(DDN.mscorlib.DNObjectClass)
  ['{208C2470-6086-5A33-B187-EA023A1C9377}']
  { constructors } 

    {class} function init: DNTriplet; overload;
    {class} function init(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject): DNTriplet; overload;
    {class} function init(x: DDN.mscorlib.DNObject; y: DDN.mscorlib.DNObject; z: DDN.mscorlib.DNObject): DNTriplet; overload;

  end;

  [DNTypeName('System.Web.UI.Triplet')]
  DNTriplet = interface(DDN.mscorlib.DNObject)
  ['{886E0500-3EBB-3AF5-A6ED-5AED12EBE148}']
  { fields getter & setter } 

   function __fakeFieldGet_First: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_First(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_Second: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_Second(value: DDN.mscorlib.DNObject);
   function __fakeFieldGet_Third: DDN.mscorlib.DNObject;
   procedure __fakeFieldSet_Third(value: DDN.mscorlib.DNObject);

  { fields } 

   property First: DDN.mscorlib.DNObject read __fakeFieldGet_First write __fakeFieldSet_First;
   property Second: DDN.mscorlib.DNObject read __fakeFieldGet_Second write __fakeFieldSet_Second;
   property Third: DDN.mscorlib.DNObject read __fakeFieldGet_Third write __fakeFieldSet_Third;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTriplet = class(TDNGenericImport<DNTripletClass, DNTriplet>) end;

  //-------------namespace: System.Web.UI----------------
  DNValidationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8E0518A4-B2DD-5823-8CC9-52C573E6B34C}']
  { static getter & setter } 

    {class} function get_UnobtrusiveValidationMode: DNUnobtrusiveValidationMode;
    {class} procedure set_UnobtrusiveValidationMode(value: DNUnobtrusiveValidationMode);

  { static propertys } 

    {class} property UnobtrusiveValidationMode: DNUnobtrusiveValidationMode read get_UnobtrusiveValidationMode write set_UnobtrusiveValidationMode;
  end;

  [DNTypeName('System.Web.UI.ValidationSettings')]
  DNValidationSettings = interface(DDN.mscorlib.DNObject)
  ['{FEE3B708-7288-37C8-ACFC-709C04B01B92}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNValidationSettings = class(TDNGenericImport<DNValidationSettingsClass, DNValidationSettings>) end;

  //-------------namespace: System.Web.UI----------------
  DNValidatorCollectionClass = interface(DNObjectClass)
  ['{21214B47-4C07-57DF-BE80-F24B0814785E}']
  { constructors } 

    {class} function init: DNValidatorCollection;

  end;

  [DNTypeName('System.Web.UI.ValidatorCollection')]
  DNValidatorCollection = interface(DDN.mscorlib.DNICollection)
  ['{8D10BF4F-A432-3D7D-B755-3521D764C617}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNIValidator;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Add(validator: DNIValidator);
    function &Contains(validator: DNIValidator): Boolean;
    procedure Remove(validator: DNIValidator);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNIValidator read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNValidatorCollection = class(TDNGenericImport<DNValidatorCollectionClass, DNValidatorCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAutoFieldsGeneratorClass = interface(DNObjectClass)
  ['{11A5F9BB-E370-5DC7-9620-76E469ACE6C1}']
  end;

  [DNTypeName('System.Web.UI.WebControls.AutoFieldsGenerator')]
  DNAutoFieldsGenerator = interface(DNIAutoFieldGenerator)
  ['{1EB4383D-626D-3C81-8854-4B473E7BC8B9}']
  { getters & setters } 

    function get_AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_AutoGenerateEnumFields(value: DDN.mscorlib.DNNullable<Boolean>);

  { methods } 

    function GenerateFields(control: DNControl): DDN.mscorlib.DNICollection;
    function CreateAutoGeneratedFields(dataItem: DDN.mscorlib.DNObject; control: DNControl): DDN.mscorlib.DNList<DNAutoGeneratedField>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean> read get_AutoGenerateEnumFields write set_AutoGenerateEnumFields;
  end;

  TDNAutoFieldsGenerator = class(TDNGenericImport<DNAutoFieldsGeneratorClass, DNAutoFieldsGenerator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewRowsGeneratorClass = interface(DNAutoFieldsGeneratorClass)
  ['{192A4610-F78B-5C94-9595-D09F69B52C0C}']
  { constructors } 

    {class} function init: DNDetailsViewRowsGenerator;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewRowsGenerator')]
  DNDetailsViewRowsGenerator = interface(DNAutoFieldsGenerator)
  ['{536BF2F6-2C66-3174-AABE-9416FAF07C73}']
  { getters & setters } 

    function get_AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_AutoGenerateEnumFields(value: DDN.mscorlib.DNNullable<Boolean>);

  { methods } 

    function CreateAutoGeneratedFields(dataItem: DDN.mscorlib.DNObject; control: DNControl): DDN.mscorlib.DNList<DNAutoGeneratedField>;
    function GenerateFields(control: DNControl): DDN.mscorlib.DNICollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean> read get_AutoGenerateEnumFields write set_AutoGenerateEnumFields;
  end;

  TDNDetailsViewRowsGenerator = class(TDNGenericImport<DNDetailsViewRowsGeneratorClass, DNDetailsViewRowsGenerator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewColumnsGeneratorClass = interface(DNAutoFieldsGeneratorClass)
  ['{EAA9032E-7C4B-5974-B46B-DC73935F2532}']
  { constructors } 

    {class} function init: DNGridViewColumnsGenerator;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewColumnsGenerator')]
  DNGridViewColumnsGenerator = interface(DNAutoFieldsGenerator)
  ['{981DBC2E-8D9B-3E1D-A330-9B98DE9FFC2F}']
  { getters & setters } 

    function get_AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_AutoGenerateEnumFields(value: DDN.mscorlib.DNNullable<Boolean>);

  { methods } 

    function CreateAutoGeneratedFields(dataObject: DDN.mscorlib.DNObject; control: DNControl): DDN.mscorlib.DNList<DNAutoGeneratedField>;
    function GenerateFields(control: DNControl): DDN.mscorlib.DNICollection;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoGenerateEnumFields: DDN.mscorlib.DNNullable<Boolean> read get_AutoGenerateEnumFields write set_AutoGenerateEnumFields;
  end;

  TDNGridViewColumnsGenerator = class(TDNGenericImport<DNGridViewColumnsGeneratorClass, DNGridViewColumnsGenerator>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAutoGeneratedFieldPropertiesClass = interface(DNObjectClass)
  ['{E8A226E6-0C80-55FF-B97B-D6CD1C447BB3}']
  { constructors } 

    {class} function init: DNAutoGeneratedFieldProperties;

  end;

  [DNTypeName('System.Web.UI.WebControls.AutoGeneratedFieldProperties')]
  DNAutoGeneratedFieldProperties = interface(DNIStateManager)
  ['{6C1C24EA-C84B-34C5-ABEE-9367F1531DC3}']
  { getters & setters } 

    function get_DataField: string;
    procedure set_DataField(value: string);
    function get_IsReadOnly: Boolean;
    procedure set_IsReadOnly(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataField: string read get_DataField write set_DataField;
    property IsReadOnly: Boolean read get_IsReadOnly write set_IsReadOnly;
    property Name: string read get_Name write set_Name;
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
  end;

  TDNAutoGeneratedFieldProperties = class(TDNGenericImport<DNAutoGeneratedFieldPropertiesClass, DNAutoGeneratedFieldProperties>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCalendarDayClass = interface(DDN.mscorlib.DNObjectClass)
  ['{57A0CB61-57F0-54A1-97D9-13FADF10C3DB}']
  { constructors } 

    {class} function init(date: DDN.mscorlib.DNDateTime; isWeekend: Boolean; isToday: Boolean; isSelected: Boolean; isOtherMonth: Boolean; dayNumberText: string): DNCalendarDay;

  end;

  [DNTypeName('System.Web.UI.WebControls.CalendarDay')]
  DNCalendarDay = interface(DDN.mscorlib.DNObject)
  ['{20A1CCC8-9929-35C5-8C03-3C6B5D0A9070}']
  { getters & setters } 

    function get_Date: DDN.mscorlib.DNDateTime;
    function get_DayNumberText: string;
    function get_IsOtherMonth: Boolean;
    function get_IsSelectable: Boolean;
    procedure set_IsSelectable(value: Boolean);
    function get_IsSelected: Boolean;
    function get_IsToday: Boolean;
    function get_IsWeekend: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Date: DDN.mscorlib.DNDateTime read get_Date;
    property DayNumberText: string read get_DayNumberText;
    property IsOtherMonth: Boolean read get_IsOtherMonth;
    property IsSelectable: Boolean read get_IsSelectable write set_IsSelectable;
    property IsSelected: Boolean read get_IsSelected;
    property IsToday: Boolean read get_IsToday;
    property IsWeekend: Boolean read get_IsWeekend;
  end;

  TDNCalendarDay = class(TDNGenericImport<DNCalendarDayClass, DNCalendarDay>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlCommandsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{716B71D0-E17F-5420-87A3-7C62E8C59641}']
  end;

  [DNTypeName('System.Web.UI.WebControls.DataControlCommands')]
  DNDataControlCommands = interface(DDN.mscorlib.DNObject)
  ['{01179BA0-AE1C-3BB9-8A56-388455507761}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNDataControlCommands = class(TDNGenericImport<DNDataControlCommandsClass, DNDataControlCommands>)
  public const
   SortCommandName = 'Sort';
   SelectCommandName = 'Select';
   EditCommandName = 'Edit';
   DeleteCommandName = 'Delete';
   UpdateCommandName = 'Update';
   CancelCommandName = 'Cancel';
   PageCommandName = 'Page';
   NextPageCommandArgument = 'Next';
   PreviousPageCommandArgument = 'Prev';
   FirstPageCommandArgument = 'First';
   LastPageCommandArgument = 'Last';
   InsertCommandName = 'Insert';
   NewCommandName = 'New';
  end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataControlFieldClass = interface(DNObjectClass)
  ['{0C67E810-CBC6-5765-8A71-55B9E54D5160}']
  end;

  [DNTypeName('System.Web.UI.WebControls.DataControlField')]
  DNDataControlField = interface(DNIStateManager)
  ['{CF91B387-0F8E-3497-A09D-40963B9C4619}']
  { getters & setters } 

    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function Initialize(sortingEnabled: Boolean; control: DNControl): Boolean;
    function ToString: string;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNDataControlField = class(TDNGenericImport<DNDataControlFieldClass, DNDataControlField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBoundFieldClass = interface(DNDataControlFieldClass)
  ['{2E8A19CF-B1C3-5C8A-B567-897E58741C01}']
  { constructors } 

    {class} function init: DNBoundField;

  { static fields getter & setter } 

   function __fakeFieldGet_ThisExpression: string;

  { static fields } 

    {class} property ThisExpression: string read __fakeFieldGet_ThisExpression;

  end;

  [DNTypeName('System.Web.UI.WebControls.BoundField')]
  DNBoundField = interface(DNDataControlField)
  ['{79D633CE-AA2A-3F20-AEB9-B03854FD0254}']
  { getters & setters } 

    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_DataField: string;
    procedure set_DataField(value: string);
    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_HtmlEncodeFormatString: Boolean;
    procedure set_HtmlEncodeFormatString(value: Boolean);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    function Initialize(enableSorting: Boolean; control: DNControl): Boolean;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property DataField: string read get_DataField write set_DataField;
    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property HtmlEncodeFormatString: Boolean read get_HtmlEncodeFormatString write set_HtmlEncodeFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNBoundField = class(TDNGenericImport<DNBoundFieldClass, DNBoundField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNAutoGeneratedFieldClass = interface(DNBoundFieldClass)
  ['{231BC649-77C3-5F36-8509-F5F26A839538}']
  { constructors } 

    {class} function init(dataField: string): DNAutoGeneratedField;

  end;

  [DNTypeName('System.Web.UI.WebControls.AutoGeneratedField')]
  DNAutoGeneratedField = interface(DNBoundField)
  ['{B3600840-F677-339C-A3A9-030AABE641FE}']
  { getters & setters } 

    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_DataType: DDN.mscorlib.DNType;
    procedure set_DataType(value: DDN.mscorlib.DNType);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_DataField: string;
    procedure set_DataField(value: string);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_HtmlEncodeFormatString: Boolean;
    procedure set_HtmlEncodeFormatString(value: Boolean);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    procedure ValidateSupportsCallback;
    function Initialize(enableSorting: Boolean; control: DNControl): Boolean;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property DataType: DDN.mscorlib.DNType read get_DataType write set_DataType;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property DataField: string read get_DataField write set_DataField;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property HtmlEncodeFormatString: Boolean read get_HtmlEncodeFormatString write set_HtmlEncodeFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNAutoGeneratedField = class(TDNGenericImport<DNAutoGeneratedFieldClass, DNAutoGeneratedField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCheckBoxFieldClass = interface(DNBoundFieldClass)
  ['{437274AE-BB0B-5B7C-BEFE-3EC32004965B}']
  { constructors } 

    {class} function init: DNCheckBoxField;

  end;

  [DNTypeName('System.Web.UI.WebControls.CheckBoxField')]
  DNCheckBoxField = interface(DNBoundField)
  ['{5B15841A-C0AD-3CC8-B63D-3AE02CBC70C5}']
  { getters & setters } 

    function get_ApplyFormatInEditMode: Boolean;
    procedure set_ApplyFormatInEditMode(value: Boolean);
    function get_DataField: string;
    procedure set_DataField(value: string);
    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_HtmlEncode: Boolean;
    procedure set_HtmlEncode(value: Boolean);
    function get_HtmlEncodeFormatString: Boolean;
    procedure set_HtmlEncodeFormatString(value: Boolean);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    procedure ValidateSupportsCallback;
    function Initialize(enableSorting: Boolean; control: DNControl): Boolean;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ApplyFormatInEditMode: Boolean read get_ApplyFormatInEditMode write set_ApplyFormatInEditMode;
    property DataField: string read get_DataField write set_DataField;
    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property HtmlEncode: Boolean read get_HtmlEncode write set_HtmlEncode;
    property HtmlEncodeFormatString: Boolean read get_HtmlEncodeFormatString write set_HtmlEncodeFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property Text: string read get_Text write set_Text;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNCheckBoxField = class(TDNGenericImport<DNCheckBoxFieldClass, DNCheckBoxField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNButtonFieldBaseClass = interface(DNDataControlFieldClass)
  ['{4417156D-5284-53B1-97E7-0508F6503C2E}']
  end;

  [DNTypeName('System.Web.UI.WebControls.ButtonFieldBase')]
  DNButtonFieldBase = interface(DNDataControlField)
  ['{FF7618B0-7883-309B-8A0E-9BC77A9DE205}']
  { getters & setters } 

    function get_ButtonType: DNButtonType;
    procedure set_ButtonType(value: DNButtonType);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function Initialize(sortingEnabled: Boolean; control: DNControl): Boolean;
    function ToString: string;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ButtonType: DNButtonType read get_ButtonType write set_ButtonType;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNButtonFieldBase = class(TDNGenericImport<DNButtonFieldBaseClass, DNButtonFieldBase>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNButtonFieldClass = interface(DNButtonFieldBaseClass)
  ['{C31E0439-C2F3-51C9-B696-BC90AB88A82E}']
  { constructors } 

    {class} function init: DNButtonField;

  end;

  [DNTypeName('System.Web.UI.WebControls.ButtonField')]
  DNButtonField = interface(DNButtonFieldBase)
  ['{B4B007EC-350A-3FEE-8264-8AEBFCE1702C}']
  { getters & setters } 

    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ButtonType: DNButtonType;
    procedure set_ButtonType(value: DNButtonType);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    function Initialize(sortingEnabled: Boolean; control: DNControl): Boolean;
    procedure ValidateSupportsCallback;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CommandName: string read get_CommandName write set_CommandName;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property Text: string read get_Text write set_Text;
    property ButtonType: DNButtonType read get_ButtonType write set_ButtonType;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNButtonField = class(TDNGenericImport<DNButtonFieldClass, DNButtonField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCommandFieldClass = interface(DNButtonFieldBaseClass)
  ['{FBCCF4D0-2403-549E-87A0-CC9F1AF75CF7}']
  { constructors } 

    {class} function init: DNCommandField;

  end;

  [DNTypeName('System.Web.UI.WebControls.CommandField')]
  DNCommandField = interface(DNButtonFieldBase)
  ['{CA91BC59-581A-387B-BF3F-7A1F737182FC}']
  { getters & setters } 

    function get_CancelImageUrl: string;
    procedure set_CancelImageUrl(value: string);
    function get_CancelText: string;
    procedure set_CancelText(value: string);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_DeleteImageUrl: string;
    procedure set_DeleteImageUrl(value: string);
    function get_DeleteText: string;
    procedure set_DeleteText(value: string);
    function get_EditImageUrl: string;
    procedure set_EditImageUrl(value: string);
    function get_EditText: string;
    procedure set_EditText(value: string);
    function get_InsertImageUrl: string;
    procedure set_InsertImageUrl(value: string);
    function get_InsertText: string;
    procedure set_InsertText(value: string);
    function get_NewImageUrl: string;
    procedure set_NewImageUrl(value: string);
    function get_NewText: string;
    procedure set_NewText(value: string);
    function get_SelectImageUrl: string;
    procedure set_SelectImageUrl(value: string);
    function get_SelectText: string;
    procedure set_SelectText(value: string);
    function get_ShowCancelButton: Boolean;
    procedure set_ShowCancelButton(value: Boolean);
    function get_ShowDeleteButton: Boolean;
    procedure set_ShowDeleteButton(value: Boolean);
    function get_ShowEditButton: Boolean;
    procedure set_ShowEditButton(value: Boolean);
    function get_ShowSelectButton: Boolean;
    procedure set_ShowSelectButton(value: Boolean);
    function get_ShowInsertButton: Boolean;
    procedure set_ShowInsertButton(value: Boolean);
    function get_UpdateImageUrl: string;
    procedure set_UpdateImageUrl(value: string);
    function get_UpdateText: string;
    procedure set_UpdateText(value: string);
    function get_ButtonType: DNButtonType;
    procedure set_ButtonType(value: DNButtonType);
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function Initialize(sortingEnabled: Boolean; control: DNControl): Boolean;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CancelImageUrl: string read get_CancelImageUrl write set_CancelImageUrl;
    property CancelText: string read get_CancelText write set_CancelText;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property DeleteImageUrl: string read get_DeleteImageUrl write set_DeleteImageUrl;
    property DeleteText: string read get_DeleteText write set_DeleteText;
    property EditImageUrl: string read get_EditImageUrl write set_EditImageUrl;
    property EditText: string read get_EditText write set_EditText;
    property InsertImageUrl: string read get_InsertImageUrl write set_InsertImageUrl;
    property InsertText: string read get_InsertText write set_InsertText;
    property NewImageUrl: string read get_NewImageUrl write set_NewImageUrl;
    property NewText: string read get_NewText write set_NewText;
    property SelectImageUrl: string read get_SelectImageUrl write set_SelectImageUrl;
    property SelectText: string read get_SelectText write set_SelectText;
    property ShowCancelButton: Boolean read get_ShowCancelButton write set_ShowCancelButton;
    property ShowDeleteButton: Boolean read get_ShowDeleteButton write set_ShowDeleteButton;
    property ShowEditButton: Boolean read get_ShowEditButton write set_ShowEditButton;
    property ShowSelectButton: Boolean read get_ShowSelectButton write set_ShowSelectButton;
    property ShowInsertButton: Boolean read get_ShowInsertButton write set_ShowInsertButton;
    property UpdateImageUrl: string read get_UpdateImageUrl write set_UpdateImageUrl;
    property UpdateText: string read get_UpdateText write set_UpdateText;
    property ButtonType: DNButtonType read get_ButtonType write set_ButtonType;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNCommandField = class(TDNGenericImport<DNCommandFieldClass, DNCommandField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHyperLinkFieldClass = interface(DNDataControlFieldClass)
  ['{7222DE44-AF90-5B9E-AAF5-6D0A43E516F7}']
  { constructors } 

    {class} function init: DNHyperLinkField;

  end;

  [DNTypeName('System.Web.UI.WebControls.HyperLinkField')]
  DNHyperLinkField = interface(DNDataControlField)
  ['{38B45C32-3524-3783-A78B-01851B5F436C}']
  { getters & setters } 

    function get_DataNavigateUrlFields: TArray<string>;
    procedure set_DataNavigateUrlFields(value: TArray<string>);
    function get_DataNavigateUrlFormatString: string;
    procedure set_DataNavigateUrlFormatString(value: string);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    function Initialize(enableSorting: Boolean; control: DNControl): Boolean;
    procedure ValidateSupportsCallback;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataNavigateUrlFields: TArray<string> read get_DataNavigateUrlFields write set_DataNavigateUrlFields;
    property DataNavigateUrlFormatString: string read get_DataNavigateUrlFormatString write set_DataNavigateUrlFormatString;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNHyperLinkField = class(TDNGenericImport<DNHyperLinkFieldClass, DNHyperLinkField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNImageFieldClass = interface(DNDataControlFieldClass)
  ['{940DB566-F4AC-5CB2-99D9-3BBCB0C9AEB7}']
  { constructors } 

    {class} function init: DNImageField;

  { static fields getter & setter } 

   function __fakeFieldGet_ThisExpression: string;

  { static fields } 

    {class} property ThisExpression: string read __fakeFieldGet_ThisExpression;

  end;

  [DNTypeName('System.Web.UI.WebControls.ImageField')]
  DNImageField = interface(DNDataControlField)
  ['{99900A13-2B91-3FDA-A1E0-A6C23AC12941}']
  { getters & setters } 

    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_DataAlternateTextField: string;
    procedure set_DataAlternateTextField(value: string);
    function get_DataAlternateTextFormatString: string;
    procedure set_DataAlternateTextFormatString(value: string);
    function get_DataImageUrlField: string;
    procedure set_DataImageUrlField(value: string);
    function get_DataImageUrlFormatString: string;
    procedure set_DataImageUrlFormatString(value: string);
    function get_NullDisplayText: string;
    procedure set_NullDisplayText(value: string);
    function get_NullImageUrl: string;
    procedure set_NullImageUrl(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    function Initialize(enableSorting: Boolean; control: DNControl): Boolean;
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AlternateText: string read get_AlternateText write set_AlternateText;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property DataAlternateTextField: string read get_DataAlternateTextField write set_DataAlternateTextField;
    property DataAlternateTextFormatString: string read get_DataAlternateTextFormatString write set_DataAlternateTextFormatString;
    property DataImageUrlField: string read get_DataImageUrlField write set_DataImageUrlField;
    property DataImageUrlFormatString: string read get_DataImageUrlFormatString write set_DataImageUrlFormatString;
    property NullDisplayText: string read get_NullDisplayText write set_NullDisplayText;
    property NullImageUrl: string read get_NullImageUrl write set_NullImageUrl;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNImageField = class(TDNGenericImport<DNImageFieldClass, DNImageField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTemplateFieldClass = interface(DNDataControlFieldClass)
  ['{CF16909D-DA11-5E68-BE6B-38E952126BB0}']
  { constructors } 

    {class} function init: DNTemplateField;

  end;

  [DNTypeName('System.Web.UI.WebControls.TemplateField')]
  DNTemplateField = interface(DNDataControlField)
  ['{B521C3A5-370B-3D7B-B4D1-B8AA3E1AC517}']
  { getters & setters } 

    function get_AlternatingItemTemplate: DNITemplate;
    procedure set_AlternatingItemTemplate(value: DNITemplate);
    function get_ValidateRequestMode: DNValidateRequestMode;
    procedure set_ValidateRequestMode(value: DNValidateRequestMode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);
    function get_EditItemTemplate: DNITemplate;
    procedure set_EditItemTemplate(value: DNITemplate);
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_InsertItemTemplate: DNITemplate;
    procedure set_InsertItemTemplate(value: DNITemplate);
    function get_ItemTemplate: DNITemplate;
    procedure set_ItemTemplate(value: DNITemplate);
    function get_AccessibleHeaderText: string;
    procedure set_AccessibleHeaderText(value: string);
    function get_ControlStyle: DNStyle;
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_InsertVisible: Boolean;
    procedure set_InsertVisible(value: Boolean);
    function get_ItemStyle: DNTableItemStyle;
    function get_ShowHeader: Boolean;
    procedure set_ShowHeader(value: Boolean);
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure ExtractValuesFromCell(dictionary: DDN.System.DNIOrderedDictionary; cell: DNDataControlFieldCell; rowState: DNDataControlRowState; includeReadOnly: Boolean);
    procedure InitializeCell(cell: DNDataControlFieldCell; cellType: DNDataControlCellType; rowState: DNDataControlRowState; rowIndex: Int32);
    procedure ValidateSupportsCallback;
    function Initialize(sortingEnabled: Boolean; control: DNControl): Boolean;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AlternatingItemTemplate: DNITemplate read get_AlternatingItemTemplate write set_AlternatingItemTemplate;
    property ValidateRequestMode: DNValidateRequestMode read get_ValidateRequestMode write set_ValidateRequestMode;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
    property EditItemTemplate: DNITemplate read get_EditItemTemplate write set_EditItemTemplate;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property InsertItemTemplate: DNITemplate read get_InsertItemTemplate write set_InsertItemTemplate;
    property ItemTemplate: DNITemplate read get_ItemTemplate write set_ItemTemplate;
    property AccessibleHeaderText: string read get_AccessibleHeaderText write set_AccessibleHeaderText;
    property ControlStyle: DNStyle read get_ControlStyle;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property InsertVisible: Boolean read get_InsertVisible write set_InsertVisible;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property ShowHeader: Boolean read get_ShowHeader write set_ShowHeader;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNTemplateField = class(TDNGenericImport<DNTemplateFieldClass, DNTemplateField>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridColumnClass = interface(DNObjectClass)
  ['{B69A0A2E-7924-5739-AE4B-E9841900AB1A}']
  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridColumn')]
  DNDataGridColumn = interface(DNIStateManager)
  ['{1BEE3535-0588-3A32-9A90-597CBB4D59B2}']
  { getters & setters } 

    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure Initialize;
    function ToString: string;
    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNDataGridColumn = class(TDNGenericImport<DNDataGridColumnClass, DNDataGridColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNBoundColumnClass = interface(DNDataGridColumnClass)
  ['{80D5F2C2-7B6C-504D-8D58-0DC40A40F027}']
  { constructors } 

    {class} function init: DNBoundColumn;

  { static fields getter & setter } 

   function __fakeFieldGet_thisExpr: string;

  { static fields } 

    {class} property thisExpr: string read __fakeFieldGet_thisExpr;

  end;

  [DNTypeName('System.Web.UI.WebControls.BoundColumn')]
  DNBoundColumn = interface(DNDataGridColumn)
  ['{1DEF537C-9DF7-3F5A-92B9-9D1A9C888A73}']
  { getters & setters } 

    function get_DataField: string;
    procedure set_DataField(value: string);
    function get_DataFormatString: string;
    procedure set_DataFormatString(value: string);
    function get_ReadOnly: Boolean;
    procedure set_ReadOnly(value: Boolean);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure Initialize;
    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataField: string read get_DataField write set_DataField;
    property DataFormatString: string read get_DataFormatString write set_DataFormatString;
    property ReadOnly: Boolean read get_ReadOnly write set_ReadOnly;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNBoundColumn = class(TDNGenericImport<DNBoundColumnClass, DNBoundColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNButtonColumnClass = interface(DNDataGridColumnClass)
  ['{4057F38D-BCD5-5F61-AD9B-5BD71B8F80DE}']
  { constructors } 

    {class} function init: DNButtonColumn;

  end;

  [DNTypeName('System.Web.UI.WebControls.ButtonColumn')]
  DNButtonColumn = interface(DNDataGridColumn)
  ['{F8856B4E-81D5-39D7-9FD0-6F456338E150}']
  { getters & setters } 

    function get_ButtonType: DNButtonColumnType;
    procedure set_ButtonType(value: DNButtonColumnType);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_CommandName: string;
    procedure set_CommandName(value: string);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure Initialize;
    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ButtonType: DNButtonColumnType read get_ButtonType write set_ButtonType;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property CommandName: string read get_CommandName write set_CommandName;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property Text: string read get_Text write set_Text;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNButtonColumn = class(TDNGenericImport<DNButtonColumnClass, DNButtonColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNEditCommandColumnClass = interface(DNDataGridColumnClass)
  ['{9B86BAE7-3D15-593D-BC1A-F45E6E1D94CE}']
  { constructors } 

    {class} function init: DNEditCommandColumn;

  end;

  [DNTypeName('System.Web.UI.WebControls.EditCommandColumn')]
  DNEditCommandColumn = interface(DNDataGridColumn)
  ['{1E60A8D9-CE1D-3907-B8AB-D01AA22B1DAC}']
  { getters & setters } 

    function get_ButtonType: DNButtonColumnType;
    procedure set_ButtonType(value: DNButtonColumnType);
    function get_CancelText: string;
    procedure set_CancelText(value: string);
    function get_CausesValidation: Boolean;
    procedure set_CausesValidation(value: Boolean);
    function get_EditText: string;
    procedure set_EditText(value: string);
    function get_UpdateText: string;
    procedure set_UpdateText(value: string);
    function get_ValidationGroup: string;
    procedure set_ValidationGroup(value: string);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    procedure Initialize;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ButtonType: DNButtonColumnType read get_ButtonType write set_ButtonType;
    property CancelText: string read get_CancelText write set_CancelText;
    property CausesValidation: Boolean read get_CausesValidation write set_CausesValidation;
    property EditText: string read get_EditText write set_EditText;
    property UpdateText: string read get_UpdateText write set_UpdateText;
    property ValidationGroup: string read get_ValidationGroup write set_ValidationGroup;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNEditCommandColumn = class(TDNGenericImport<DNEditCommandColumnClass, DNEditCommandColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHyperLinkColumnClass = interface(DNDataGridColumnClass)
  ['{79DC6848-7533-5A17-91AA-2B1482C2AA74}']
  { constructors } 

    {class} function init: DNHyperLinkColumn;

  end;

  [DNTypeName('System.Web.UI.WebControls.HyperLinkColumn')]
  DNHyperLinkColumn = interface(DNDataGridColumn)
  ['{3CE720CC-5C4F-3049-A543-E9C98B4F5AE9}']
  { getters & setters } 

    function get_DataNavigateUrlField: string;
    procedure set_DataNavigateUrlField(value: string);
    function get_DataNavigateUrlFormatString: string;
    procedure set_DataNavigateUrlFormatString(value: string);
    function get_DataTextField: string;
    procedure set_DataTextField(value: string);
    function get_DataTextFormatString: string;
    procedure set_DataTextFormatString(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure Initialize;
    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataNavigateUrlField: string read get_DataNavigateUrlField write set_DataNavigateUrlField;
    property DataNavigateUrlFormatString: string read get_DataNavigateUrlFormatString write set_DataNavigateUrlFormatString;
    property DataTextField: string read get_DataTextField write set_DataTextField;
    property DataTextFormatString: string read get_DataTextFormatString write set_DataTextFormatString;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNHyperLinkColumn = class(TDNGenericImport<DNHyperLinkColumnClass, DNHyperLinkColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTemplateColumnClass = interface(DNDataGridColumnClass)
  ['{DD8D0A48-D1CF-508F-8266-3694BAA51EFC}']
  { constructors } 

    {class} function init: DNTemplateColumn;

  end;

  [DNTypeName('System.Web.UI.WebControls.TemplateColumn')]
  DNTemplateColumn = interface(DNDataGridColumn)
  ['{96B26510-D94C-3B63-9FF6-0C6A98DAE0D8}']
  { getters & setters } 

    function get_EditItemTemplate: DNITemplate;
    procedure set_EditItemTemplate(value: DNITemplate);
    function get_FooterTemplate: DNITemplate;
    procedure set_FooterTemplate(value: DNITemplate);
    function get_HeaderTemplate: DNITemplate;
    procedure set_HeaderTemplate(value: DNITemplate);
    function get_ItemTemplate: DNITemplate;
    procedure set_ItemTemplate(value: DNITemplate);
    function get_FooterStyle: DNTableItemStyle;
    function get_FooterText: string;
    procedure set_FooterText(value: string);
    function get_HeaderImageUrl: string;
    procedure set_HeaderImageUrl(value: string);
    function get_HeaderStyle: DNTableItemStyle;
    function get_HeaderText: string;
    procedure set_HeaderText(value: string);
    function get_ItemStyle: DNTableItemStyle;
    function get_SortExpression: string;
    procedure set_SortExpression(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    procedure InitializeCell(cell: DNTableCell; columnIndex: Int32; itemType: DNListItemType);
    procedure Initialize;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property EditItemTemplate: DNITemplate read get_EditItemTemplate write set_EditItemTemplate;
    property FooterTemplate: DNITemplate read get_FooterTemplate write set_FooterTemplate;
    property HeaderTemplate: DNITemplate read get_HeaderTemplate write set_HeaderTemplate;
    property ItemTemplate: DNITemplate read get_ItemTemplate write set_ItemTemplate;
    property FooterStyle: DNTableItemStyle read get_FooterStyle;
    property FooterText: string read get_FooterText write set_FooterText;
    property HeaderImageUrl: string read get_HeaderImageUrl write set_HeaderImageUrl;
    property HeaderStyle: DNTableItemStyle read get_HeaderStyle;
    property HeaderText: string read get_HeaderText write set_HeaderText;
    property ItemStyle: DNTableItemStyle read get_ItemStyle;
    property SortExpression: string read get_SortExpression write set_SortExpression;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNTemplateColumn = class(TDNGenericImport<DNTemplateColumnClass, DNTemplateColumn>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridColumnCollectionClass = interface(DNObjectClass)
  ['{81708595-AF57-527D-8FB9-74CF4CA86055}']
  { constructors } 

    {class} function init(owner: DNDataGrid; columns: DDN.mscorlib.DNArrayList): DNDataGridColumnCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridColumnCollection')]
  DNDataGridColumnCollection = interface(DDN.mscorlib.DNICollection)
  ['{A69F16CA-41DF-36E0-B715-826B0B10296D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataGridColumn;

  { methods } 

    procedure Add(column: DNDataGridColumn);
    procedure AddAt(index: Int32; column: DNDataGridColumn);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(column: DNDataGridColumn): Int32;
    procedure RemoveAt(index: Int32);
    procedure Remove(column: DNDataGridColumn);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataGridColumn read get_Item; default;
  end;

  TDNDataGridColumnCollection = class(TDNGenericImport<DNDataGridColumnCollectionClass, DNDataGridColumnCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataGridItemCollectionClass = interface(DNObjectClass)
  ['{B6735B6D-B6C1-521E-8506-DA7ECDF0752A}']
  { constructors } 

    {class} function init(items: DDN.mscorlib.DNArrayList): DNDataGridItemCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataGridItemCollection')]
  DNDataGridItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{88AE6B7E-1B3C-346F-9301-BCBEA9C4E74B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataGridItem;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataGridItem read get_Item; default;
  end;

  TDNDataGridItemCollection = class(TDNGenericImport<DNDataGridItemCollectionClass, DNDataGridItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyClass = interface(DNObjectClass)
  ['{85339FFE-2414-5530-86AB-C2ED0FCF0F88}']
  { constructors } 

    {class} function init(keyTable: DDN.System.DNIOrderedDictionary): DNDataKey; overload;
    {class} function init(keyTable: DDN.System.DNIOrderedDictionary; keyNames: TArray<string>): DNDataKey; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataKey')]
  DNDataKey = interface(DNIStateManager)
  ['{3BDDACAC-7D46-3341-BFD2-5B9F1EB64298}']
  { getters & setters } 

    function get_Item(index: Int32): DDN.mscorlib.DNObject; overload;
    function get_Item(name: string): DDN.mscorlib.DNObject; overload;
    function get_Value: DDN.mscorlib.DNObject;
    function get_Values: DDN.System.DNIOrderedDictionary;

  { methods } 

    function Equals(other: DNDataKey): Boolean; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean; overload;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
    property Item[name: string]: DDN.mscorlib.DNObject read get_Item; default;
    property Value: DDN.mscorlib.DNObject read get_Value;
    property Values: DDN.System.DNIOrderedDictionary read get_Values;
  end;

  TDNDataKey = class(TDNGenericImport<DNDataKeyClass, DNDataKey>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyArrayClass = interface(DNObjectClass)
  ['{AA9E4803-5B33-53B8-B1CC-A60C0E95E73A}']
  { constructors } 

    {class} function init(keys: DDN.mscorlib.DNArrayList): DNDataKeyArray;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataKeyArray')]
  DNDataKeyArray = interface(DDN.mscorlib.DNICollection)
  ['{0C1EC6C8-0753-39A1-9628-B7842E51DCB5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataKey;

  { methods } 

    procedure CopyTo(&array: TArray<DNDataKey>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataKey read get_Item; default;
  end;

  TDNDataKeyArray = class(TDNGenericImport<DNDataKeyArrayClass, DNDataKeyArray>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataKeyCollectionClass = interface(DNObjectClass)
  ['{F98690D4-E6C7-584C-B2DE-39E77666DAFF}']
  { constructors } 

    {class} function init(keys: DDN.mscorlib.DNArrayList): DNDataKeyCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataKeyCollection')]
  DNDataKeyCollection = interface(DDN.mscorlib.DNICollection)
  ['{153DEDA4-B0A6-3D5B-9791-B38F127867C3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DDN.mscorlib.DNObject;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DDN.mscorlib.DNObject read get_Item; default;
  end;

  TDNDataKeyCollection = class(TDNGenericImport<DNDataKeyCollectionClass, DNDataKeyCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataListItemCollectionClass = interface(DNObjectClass)
  ['{9E5D7DE8-1A37-51DA-9D83-871FFF64C6DF}']
  { constructors } 

    {class} function init(items: DDN.mscorlib.DNArrayList): DNDataListItemCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataListItemCollection')]
  DNDataListItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{0E4D7314-0E37-3ADC-82EE-F344F36A72CC}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDataListItem;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDataListItem read get_Item; default;
  end;

  TDNDataListItemCollection = class(TDNGenericImport<DNDataListItemCollectionClass, DNDataListItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDataSourceSelectResultProcessingOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F19EE028-66F0-5193-B7CC-06966B09C040}']
  { constructors } 

    {class} function init: DNDataSourceSelectResultProcessingOptions;

  end;

  [DNTypeName('System.Web.UI.WebControls.DataSourceSelectResultProcessingOptions')]
  DNDataSourceSelectResultProcessingOptions = interface(DDN.mscorlib.DNObject)
  ['{B45D7003-75E0-3A09-8077-717B41563FDF}']
  { getters & setters } 

    function get_AutoPage: Boolean;
    procedure set_AutoPage(value: Boolean);
    function get_AutoSort: Boolean;
    procedure set_AutoSort(value: Boolean);
    function get_ModelType: DDN.mscorlib.DNType;
    procedure set_ModelType(value: DDN.mscorlib.DNType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AutoPage: Boolean read get_AutoPage write set_AutoPage;
    property AutoSort: Boolean read get_AutoSort write set_AutoSort;
    property ModelType: DDN.mscorlib.DNType read get_ModelType write set_ModelType;
  end;

  TDNDataSourceSelectResultProcessingOptions = class(TDNGenericImport<DNDataSourceSelectResultProcessingOptionsClass, DNDataSourceSelectResultProcessingOptions>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDayRenderEventArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{4BAC876B-481E-5A6D-92C2-187D45AE36D0}']
  { constructors } 

    {class} function init(cell: DNTableCell; day: DNCalendarDay): DNDayRenderEventArgs; overload;
    {class} function init(cell: DNTableCell; day: DNCalendarDay; selectUrl: string): DNDayRenderEventArgs; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.DayRenderEventArgs')]
  DNDayRenderEventArgs = interface(DDN.mscorlib.DNObject)
  ['{7BCE703E-CF7A-36B4-B878-F98DC20E2A8A}']
  { getters & setters } 

    function get_Cell: DNTableCell;
    function get_Day: DNCalendarDay;
    function get_SelectUrl: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Cell: DNTableCell read get_Cell;
    property Day: DNCalendarDay read get_Day;
    property SelectUrl: string read get_SelectUrl;
  end;

  TDNDayRenderEventArgs = class(TDNGenericImport<DNDayRenderEventArgsClass, DNDayRenderEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNDetailsViewRowCollectionClass = interface(DNObjectClass)
  ['{1D4EF7EE-57D2-55A5-B539-EFED6D1F9BED}']
  { constructors } 

    {class} function init(rows: DDN.mscorlib.DNArrayList): DNDetailsViewRowCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.DetailsViewRowCollection')]
  DNDetailsViewRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{7971ECC3-9C75-3509-93CB-E82DE3AECEA6}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNDetailsViewRow;

  { methods } 

    procedure CopyTo(&array: TArray<DNDetailsViewRow>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNDetailsViewRow read get_Item; default;
  end;

  TDNDetailsViewRowCollection = class(TDNGenericImport<DNDetailsViewRowCollectionClass, DNDetailsViewRowCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNEmbeddedMailObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0F0A2728-DD0A-5DB2-9CD7-407E3C4387D1}']
  { constructors } 

    {class} function init: DNEmbeddedMailObject; overload;
    {class} function init(name: string; path: string): DNEmbeddedMailObject; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.EmbeddedMailObject')]
  DNEmbeddedMailObject = interface(DDN.mscorlib.DNObject)
  ['{193926FD-BA07-3CAB-9D63-717C8AAEA215}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Path: string;
    procedure set_Path(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name write set_Name;
    property Path: string read get_Path write set_Path;
  end;

  TDNEmbeddedMailObject = class(TDNGenericImport<DNEmbeddedMailObjectClass, DNEmbeddedMailObject>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFontInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EB03BBDD-8BA8-51FB-A55F-4E9AF6AAD836}']
  end;

  [DNTypeName('System.Web.UI.WebControls.FontInfo')]
  DNFontInfo = interface(DDN.mscorlib.DNObject)
  ['{B06A031A-8EBD-3743-B16B-3C2C70F9823F}']
  { getters & setters } 

    function get_Bold: Boolean;
    procedure set_Bold(value: Boolean);
    function get_Italic: Boolean;
    procedure set_Italic(value: Boolean);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Names: TArray<string>;
    procedure set_Names(value: TArray<string>);
    function get_Overline: Boolean;
    procedure set_Overline(value: Boolean);
    function get_Size: DNFontUnit;
    procedure set_Size(value: DNFontUnit);
    function get_Strikeout: Boolean;
    procedure set_Strikeout(value: Boolean);
    function get_Underline: Boolean;
    procedure set_Underline(value: Boolean);

  { methods } 

    procedure CopyFrom(f: DNFontInfo);
    procedure MergeWith(f: DNFontInfo);
    function ShouldSerializeNames: Boolean;
    procedure ClearDefaults;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bold: Boolean read get_Bold write set_Bold;
    property Italic: Boolean read get_Italic write set_Italic;
    property Name: string read get_Name write set_Name;
    property Names: TArray<string> read get_Names write set_Names;
    property Overline: Boolean read get_Overline write set_Overline;
    property Size: DNFontUnit read get_Size write set_Size;
    property Strikeout: Boolean read get_Strikeout write set_Strikeout;
    property Underline: Boolean read get_Underline write set_Underline;
  end;

  TDNFontInfo = class(TDNGenericImport<DNFontInfoClass, DNFontInfo>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNGridViewRowCollectionClass = interface(DNObjectClass)
  ['{3F27AEE0-698F-590C-9975-AE42310C9C40}']
  { constructors } 

    {class} function init(rows: DDN.mscorlib.DNArrayList): DNGridViewRowCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.GridViewRowCollection')]
  DNGridViewRowCollection = interface(DDN.mscorlib.DNICollection)
  ['{B93B4025-4355-3F69-B373-2A67B96D256C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNGridViewRow;

  { methods } 

    procedure CopyTo(&array: TArray<DNGridViewRow>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNGridViewRow read get_Item; default;
  end;

  TDNGridViewRowCollection = class(TDNGenericImport<DNGridViewRowCollectionClass, DNGridViewRowCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNHotSpotClass = interface(DNObjectClass)
  ['{FCE0FCC8-C0FD-569C-B30B-26A077A04C87}']
  end;

  [DNTypeName('System.Web.UI.WebControls.HotSpot')]
  DNHotSpot = interface(DNIStateManager)
  ['{DEDAE519-DF71-372F-9C71-63D474D4327E}']
  { getters & setters } 

    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_HotSpotMode: DNHotSpotMode;
    procedure set_HotSpotMode(value: DNHotSpotMode);
    function get_PostBackValue: string;
    procedure set_PostBackValue(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_Target: string;
    procedure set_Target(value: string);

  { methods } 

    function ToString: string;
    function GetCoordinates: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property AccessKey: string read get_AccessKey write set_AccessKey;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property HotSpotMode: DNHotSpotMode read get_HotSpotMode write set_HotSpotMode;
    property PostBackValue: string read get_PostBackValue write set_PostBackValue;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property Target: string read get_Target write set_Target;
  end;

  TDNHotSpot = class(TDNGenericImport<DNHotSpotClass, DNHotSpot>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCircleHotSpotClass = interface(DNHotSpotClass)
  ['{3E834701-91A0-5B93-BEB3-7E58D68B694C}']
  { constructors } 

    {class} function init: DNCircleHotSpot;

  end;

  [DNTypeName('System.Web.UI.WebControls.CircleHotSpot')]
  DNCircleHotSpot = interface(DNHotSpot)
  ['{71FA7E08-8ED4-3272-A22A-139FFCAEF293}']
  { getters & setters } 

    function get_Radius: Int32;
    procedure set_Radius(value: Int32);
    function get_X: Int32;
    procedure set_X(value: Int32);
    function get_Y: Int32;
    procedure set_Y(value: Int32);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_HotSpotMode: DNHotSpotMode;
    procedure set_HotSpotMode(value: DNHotSpotMode);
    function get_PostBackValue: string;
    procedure set_PostBackValue(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_Target: string;
    procedure set_Target(value: string);

  { methods } 

    function GetCoordinates: string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Radius: Int32 read get_Radius write set_Radius;
    property X: Int32 read get_X write set_X;
    property Y: Int32 read get_Y write set_Y;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property HotSpotMode: DNHotSpotMode read get_HotSpotMode write set_HotSpotMode;
    property PostBackValue: string read get_PostBackValue write set_PostBackValue;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property Target: string read get_Target write set_Target;
  end;

  TDNCircleHotSpot = class(TDNGenericImport<DNCircleHotSpotClass, DNCircleHotSpot>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPolygonHotSpotClass = interface(DNHotSpotClass)
  ['{9831EA29-5F1D-5217-9A38-5A403051FC91}']
  { constructors } 

    {class} function init: DNPolygonHotSpot;

  end;

  [DNTypeName('System.Web.UI.WebControls.PolygonHotSpot')]
  DNPolygonHotSpot = interface(DNHotSpot)
  ['{ABD23020-CABE-3237-9FEB-761343A1BF1A}']
  { getters & setters } 

    function get_Coordinates: string;
    procedure set_Coordinates(value: string);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_HotSpotMode: DNHotSpotMode;
    procedure set_HotSpotMode(value: DNHotSpotMode);
    function get_PostBackValue: string;
    procedure set_PostBackValue(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_Target: string;
    procedure set_Target(value: string);

  { methods } 

    function GetCoordinates: string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Coordinates: string read get_Coordinates write set_Coordinates;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property HotSpotMode: DNHotSpotMode read get_HotSpotMode write set_HotSpotMode;
    property PostBackValue: string read get_PostBackValue write set_PostBackValue;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property Target: string read get_Target write set_Target;
  end;

  TDNPolygonHotSpot = class(TDNGenericImport<DNPolygonHotSpotClass, DNPolygonHotSpot>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRectangleHotSpotClass = interface(DNHotSpotClass)
  ['{D6DA9B06-F36A-5610-BD31-BB29C63954E3}']
  { constructors } 

    {class} function init: DNRectangleHotSpot;

  end;

  [DNTypeName('System.Web.UI.WebControls.RectangleHotSpot')]
  DNRectangleHotSpot = interface(DNHotSpot)
  ['{D56D1F5D-9AE0-32CE-B6AC-44B17C4F5327}']
  { getters & setters } 

    function get_Bottom: Int32;
    procedure set_Bottom(value: Int32);
    function get_Left: Int32;
    procedure set_Left(value: Int32);
    function get_Right: Int32;
    procedure set_Right(value: Int32);
    function get_Top: Int32;
    procedure set_Top(value: Int32);
    function get_AccessKey: string;
    procedure set_AccessKey(value: string);
    function get_AlternateText: string;
    procedure set_AlternateText(value: string);
    function get_HotSpotMode: DNHotSpotMode;
    procedure set_HotSpotMode(value: DNHotSpotMode);
    function get_PostBackValue: string;
    procedure set_PostBackValue(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_TabIndex: Int16;
    procedure set_TabIndex(value: Int16);
    function get_Target: string;
    procedure set_Target(value: string);

  { methods } 

    function GetCoordinates: string;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Bottom: Int32 read get_Bottom write set_Bottom;
    property Left: Int32 read get_Left write set_Left;
    property Right: Int32 read get_Right write set_Right;
    property Top: Int32 read get_Top write set_Top;
    property AccessKey: string read get_AccessKey write set_AccessKey;
    property AlternateText: string read get_AlternateText write set_AlternateText;
    property HotSpotMode: DNHotSpotMode read get_HotSpotMode write set_HotSpotMode;
    property PostBackValue: string read get_PostBackValue write set_PostBackValue;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property TabIndex: Int16 read get_TabIndex write set_TabIndex;
    property Target: string read get_Target write set_Target;
  end;

  TDNRectangleHotSpot = class(TDNGenericImport<DNRectangleHotSpotClass, DNRectangleHotSpot>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNListItemClass = interface(DNObjectClass)
  ['{9D3C3DCD-63E0-5666-9251-589203CC84A7}']
  { constructors } 

    {class} function init: DNListItem; overload;
    {class} function init(text: string): DNListItem; overload;
    {class} function init(text: string; value: string): DNListItem; overload;
    {class} function init(text: string; value: string; enabled: Boolean): DNListItem; overload;

  { static methods } 

    {class} function FromString(s: string): DNListItem;

  end;

  [DNTypeName('System.Web.UI.WebControls.ListItem')]
  DNListItem = interface(DNIStateManager)
  ['{3802F3D2-9AF7-37E2-8C86-94CD491D2D2F}']
  { getters & setters } 

    function get_Attributes: DNAttributeCollection;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Value: string;
    procedure set_Value(value: string);

  { methods } 

    function GetHashCode: Int32;
    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Attributes: DNAttributeCollection read get_Attributes;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property Selected: Boolean read get_Selected write set_Selected;
    property Text: string read get_Text write set_Text;
    property Value: string read get_Value write set_Value;
  end;

  TDNListItem = class(TDNGenericImport<DNListItemClass, DNListItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNListItemCollectionClass = interface(DNObjectClass)
  ['{44E0081F-44E3-5FE1-A058-0C00FB02C00A}']
  { constructors } 

    {class} function init: DNListItemCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.ListItemCollection')]
  DNListItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{6647D886-165A-3F3F-97BB-FF4C7DAB4999}']
  { getters & setters } 

    function get_Item(index: Int32): DNListItem;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Add(item: string); overload;
    procedure Add(item: DNListItem); overload;
    procedure AddRange(items: TArray<DNListItem>);
    function &Contains(item: DNListItem): Boolean;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function FindByText(text: string): DNListItem;
    function FindByValue(value: string): DNListItem;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(item: DNListItem): Int32;
    procedure Insert(index: Int32; item: string); overload;
    procedure Insert(index: Int32; item: DNListItem); overload;
    procedure RemoveAt(index: Int32);
    procedure Remove(item: string); overload;
    procedure Remove(item: DNListItem); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNListItem read get_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNListItemCollection = class(TDNGenericImport<DNListItemCollectionClass, DNListItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMailDefinitionClass = interface(DNObjectClass)
  ['{E358CE84-83B9-5848-BC9E-B20049DCF4E2}']
  { constructors } 

    {class} function init: DNMailDefinition;

  end;

  [DNTypeName('System.Web.UI.WebControls.MailDefinition')]
  DNMailDefinition = interface(DNIStateManager)
  ['{BBFA7CC4-2164-30F6-8AD4-FB090182B12B}']
  { getters & setters } 

    function get_BodyFileName: string;
    procedure set_BodyFileName(value: string);
    function get_CC: string;
    procedure set_CC(value: string);
    function get_From: string;
    procedure set_From(value: string);
    function get_EmbeddedObjects: DNEmbeddedMailObjectsCollection;
    function get_IsBodyHtml: Boolean;
    procedure set_IsBodyHtml(value: Boolean);
    function get_Priority: DDN.System.DNMailPriority;
    procedure set_Priority(value: DDN.System.DNMailPriority);
    function get_Subject: string;
    procedure set_Subject(value: string);

  { methods } 

    function CreateMailMessage(recipients: string; replacements: DDN.mscorlib.DNIDictionary; owner: DNControl): DDN.System.DNMailMessage; overload;
    function CreateMailMessage(recipients: string; replacements: DDN.mscorlib.DNIDictionary; body: string; owner: DNControl): DDN.System.DNMailMessage; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property BodyFileName: string read get_BodyFileName write set_BodyFileName;
    property CC: string read get_CC write set_CC;
    property From: string read get_From write set_From;
    property EmbeddedObjects: DNEmbeddedMailObjectsCollection read get_EmbeddedObjects;
    property IsBodyHtml: Boolean read get_IsBodyHtml write set_IsBodyHtml;
    property Priority: DDN.System.DNMailPriority read get_Priority write set_Priority;
    property Subject: string read get_Subject write set_Subject;
  end;

  TDNMailDefinition = class(TDNGenericImport<DNMailDefinitionClass, DNMailDefinition>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemClass = interface(DNObjectClass)
  ['{ABF7581E-F4FF-5AD6-9E1E-8C83AB2F7FC9}']
  { constructors } 

    {class} function init: DNMenuItem; overload;
    {class} function init(text: string): DNMenuItem; overload;
    {class} function init(text: string; value: string): DNMenuItem; overload;
    {class} function init(text: string; value: string; imageUrl: string): DNMenuItem; overload;
    {class} function init(text: string; value: string; imageUrl: string; navigateUrl: string): DNMenuItem; overload;
    {class} function init(text: string; value: string; imageUrl: string; navigateUrl: string; target: string): DNMenuItem; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItem')]
  DNMenuItem = interface(DNIStateManager)
  ['{6D06A0FE-3D14-3D17-8253-A2C326335E3B}']
  { getters & setters } 

    function get_ChildItems: DNMenuItemCollection;
    function get_DataBound: Boolean;
    function get_DataPath: string;
    function get_Depth: Int32;
    function get_DataItem: DDN.mscorlib.DNObject;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_Parent: DNMenuItem;
    function get_PopOutImageUrl: string;
    procedure set_PopOutImageUrl(value: string);
    function get_Selectable: Boolean;
    procedure set_Selectable(value: Boolean);
    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_SeparatorImageUrl: string;
    procedure set_SeparatorImageUrl(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ValuePath: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ChildItems: DNMenuItemCollection read get_ChildItems;
    property DataBound: Boolean read get_DataBound;
    property DataPath: string read get_DataPath;
    property Depth: Int32 read get_Depth;
    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property Parent: DNMenuItem read get_Parent;
    property PopOutImageUrl: string read get_PopOutImageUrl write set_PopOutImageUrl;
    property Selectable: Boolean read get_Selectable write set_Selectable;
    property Selected: Boolean read get_Selected write set_Selected;
    property SeparatorImageUrl: string read get_SeparatorImageUrl write set_SeparatorImageUrl;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Value: string read get_Value write set_Value;
    property ValuePath: string read get_ValuePath;
  end;

  TDNMenuItem = class(TDNGenericImport<DNMenuItemClass, DNMenuItem>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemBindingClass = interface(DNObjectClass)
  ['{0C289B46-1425-5B5F-8669-105DBD35BE11}']
  { constructors } 

    {class} function init: DNMenuItemBinding;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemBinding')]
  DNMenuItemBinding = interface(DNIStateManager)
  ['{7083E2B0-DFD1-37BE-85D5-F5682D674F7E}']
  { getters & setters } 

    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_Depth: Int32;
    procedure set_Depth(value: Int32);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_EnabledField: string;
    procedure set_EnabledField(value: string);
    function get_FormatString: string;
    procedure set_FormatString(value: string);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_ImageUrlField: string;
    procedure set_ImageUrlField(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_NavigateUrlField: string;
    procedure set_NavigateUrlField(value: string);
    function get_PopOutImageUrl: string;
    procedure set_PopOutImageUrl(value: string);
    function get_PopOutImageUrlField: string;
    procedure set_PopOutImageUrlField(value: string);
    function get_Selectable: Boolean;
    procedure set_Selectable(value: Boolean);
    function get_SelectableField: string;
    procedure set_SelectableField(value: string);
    function get_SeparatorImageUrl: string;
    procedure set_SeparatorImageUrl(value: string);
    function get_SeparatorImageUrlField: string;
    procedure set_SeparatorImageUrlField(value: string);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_TargetField: string;
    procedure set_TargetField(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextField: string;
    procedure set_TextField(value: string);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ToolTipField: string;
    procedure set_ToolTipField(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ValueField: string;
    procedure set_ValueField(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataMember: string read get_DataMember write set_DataMember;
    property Depth: Int32 read get_Depth write set_Depth;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property EnabledField: string read get_EnabledField write set_EnabledField;
    property FormatString: string read get_FormatString write set_FormatString;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property ImageUrlField: string read get_ImageUrlField write set_ImageUrlField;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property NavigateUrlField: string read get_NavigateUrlField write set_NavigateUrlField;
    property PopOutImageUrl: string read get_PopOutImageUrl write set_PopOutImageUrl;
    property PopOutImageUrlField: string read get_PopOutImageUrlField write set_PopOutImageUrlField;
    property Selectable: Boolean read get_Selectable write set_Selectable;
    property SelectableField: string read get_SelectableField write set_SelectableField;
    property SeparatorImageUrl: string read get_SeparatorImageUrl write set_SeparatorImageUrl;
    property SeparatorImageUrlField: string read get_SeparatorImageUrlField write set_SeparatorImageUrlField;
    property Target: string read get_Target write set_Target;
    property TargetField: string read get_TargetField write set_TargetField;
    property Text: string read get_Text write set_Text;
    property TextField: string read get_TextField write set_TextField;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ToolTipField: string read get_ToolTipField write set_ToolTipField;
    property Value: string read get_Value write set_Value;
    property ValueField: string read get_ValueField write set_ValueField;
  end;

  TDNMenuItemBinding = class(TDNGenericImport<DNMenuItemBindingClass, DNMenuItemBinding>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMenuItemCollectionClass = interface(DNObjectClass)
  ['{C95C05FB-60F6-546E-8CE8-603C04E4358E}']
  { constructors } 

    {class} function init: DNMenuItemCollection; overload;
    {class} function init(owner: DNMenuItem): DNMenuItemCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.MenuItemCollection')]
  DNMenuItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{66A0E415-33BB-338B-891A-B02482A0FC61}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNMenuItem;

  { methods } 

    procedure Add(child: DNMenuItem);
    procedure AddAt(index: Int32; child: DNMenuItem);
    procedure Clear;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32); overload;
    procedure CopyTo(&array: TArray<DNMenuItem>; index: Int32); overload;
    function &Contains(c: DNMenuItem): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAt(index: Int32);
    function IndexOf(value: DNMenuItem): Int32;
    procedure Remove(value: DNMenuItem);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNMenuItem read get_Item; default;
  end;

  TDNMenuItemCollection = class(TDNGenericImport<DNMenuItemCollectionClass, DNMenuItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelDataMethodResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B6A9FD62-0918-5C73-BA58-32AE698C0071}']
  { constructors } 

    {class} function init(returnValue: DDN.mscorlib.DNObject; outputParameters: DDN.System.DNOrderedDictionary): DNModelDataMethodResult;

  end;

  [DNTypeName('System.Web.UI.WebControls.ModelDataMethodResult')]
  DNModelDataMethodResult = interface(DDN.mscorlib.DNObject)
  ['{19ED315E-CBFE-3E95-8780-B4284635AAEE}']
  { getters & setters } 

    function get_ReturnValue: DDN.mscorlib.DNObject;
    function get_OutputParameters: DDN.System.DNOrderedDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ReturnValue: DDN.mscorlib.DNObject read get_ReturnValue;
    property OutputParameters: DDN.System.DNOrderedDictionary read get_OutputParameters;
  end;

  TDNModelDataMethodResult = class(TDNGenericImport<DNModelDataMethodResultClass, DNModelDataMethodResult>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelDataSourceClass = interface(DNObjectClass)
  ['{5F2662A0-C2FD-5D81-BB77-6135BC3F472C}']
  { constructors } 

    {class} function init(dataControl: DNControl): DNModelDataSource;

  end;

  [DNTypeName('System.Web.UI.WebControls.ModelDataSource')]
  DNModelDataSource = interface(DNIDataSource)
  ['{CB660812-1FAC-3D48-B58B-CECAAB81D7ED}']
  { getters & setters } 

    function get_DataControl: DNControl;
    function get_View: DNModelDataSourceView;

  { events } 

    procedure add_CallingDataMethods(value: DNCallingDataMethodsEventHandler);
    procedure remove_CallingDataMethods(value: DNCallingDataMethodsEventHandler);

  { methods } 

    procedure UpdateProperties(modelTypeName: string; selectMethod: string); overload;
    procedure UpdateProperties(modelTypeName: string; selectMethod: string; updateMethod: string; insertMethod: string; deleteMethod: string; dataKeyName: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property DataControl: DNControl read get_DataControl;
    property View: DNModelDataSourceView read get_View;
  end;

  TDNModelDataSource = class(TDNGenericImport<DNModelDataSourceClass, DNModelDataSource>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelDataSourceMethodClass = interface(DDN.mscorlib.DNObjectClass)
  ['{A520BF2C-C0B9-54B7-8B5D-5D4241B48A9C}']
  { constructors } 

    {class} function init(instance: DDN.mscorlib.DNObject; methodInfo: DDN.mscorlib.DNMethodInfo): DNModelDataSourceMethod;

  end;

  [DNTypeName('System.Web.UI.WebControls.ModelDataSourceMethod')]
  DNModelDataSourceMethod = interface(DDN.mscorlib.DNObject)
  ['{592F0B44-6709-33C6-9BF5-DF792470844D}']
  { getters & setters } 

    function get_Instance: DDN.mscorlib.DNObject;
    function get_Parameters: DDN.System.DNOrderedDictionary;
    function get_MethodInfo: DDN.mscorlib.DNMethodInfo;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Instance: DDN.mscorlib.DNObject read get_Instance;
    property Parameters: DDN.System.DNOrderedDictionary read get_Parameters;
    property MethodInfo: DDN.mscorlib.DNMethodInfo read get_MethodInfo;
  end;

  TDNModelDataSourceMethod = class(TDNGenericImport<DNModelDataSourceMethodClass, DNModelDataSourceMethod>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNModelMethodContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D0FBC39D-2F0F-5186-9C2B-AB7A5BC17AC8}']
  { static getter & setter } 

    {class} function get_Current: DNModelMethodContext;

  { constructors } 

    {class} function init(page: DNPage): DNModelMethodContext;

  { static propertys } 

    {class} property Current: DNModelMethodContext read get_Current;
  end;

  [DNTypeName('System.Web.UI.WebControls.ModelMethodContext')]
  DNModelMethodContext = interface(DDN.mscorlib.DNObject)
  ['{60A4614C-D6D6-39E8-B5B7-166AC8AEB556}']
  { getters & setters } 

    function get_ModelState: DNModelStateDictionary;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ModelState: DNModelStateDictionary read get_ModelState;
  end;

  TDNModelMethodContext = class(TDNGenericImport<DNModelMethodContextClass, DNModelMethodContext>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNMonthChangedEventArgsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D6ED2A4E-1676-589C-88B4-C9CB6AEB4333}']
  { constructors } 

    {class} function init(newDate: DDN.mscorlib.DNDateTime; previousDate: DDN.mscorlib.DNDateTime): DNMonthChangedEventArgs;

  end;

  [DNTypeName('System.Web.UI.WebControls.MonthChangedEventArgs')]
  DNMonthChangedEventArgs = interface(DDN.mscorlib.DNObject)
  ['{BE61B4D5-4BAC-3338-97B7-82B243D5D72A}']
  { getters & setters } 

    function get_NewDate: DDN.mscorlib.DNDateTime;
    function get_PreviousDate: DDN.mscorlib.DNDateTime;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property NewDate: DDN.mscorlib.DNDateTime read get_NewDate;
    property PreviousDate: DDN.mscorlib.DNDateTime read get_PreviousDate;
  end;

  TDNMonthChangedEventArgs = class(TDNGenericImport<DNMonthChangedEventArgsClass, DNMonthChangedEventArgs>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPagedDataSourceClass = interface(DNObjectClass)
  ['{8D785DE9-C302-5DF2-A077-3A6D9EF2832B}']
  { constructors } 

    {class} function init: DNPagedDataSource;

  end;

  [DNTypeName('System.Web.UI.WebControls.PagedDataSource')]
  DNPagedDataSource = interface(DDN.mscorlib.DNICollection)
  ['{02CC68A1-C27C-34FC-B3E0-A1595536D177}']
  { getters & setters } 

    function get_AllowCustomPaging: Boolean;
    procedure set_AllowCustomPaging(value: Boolean);
    function get_AllowPaging: Boolean;
    procedure set_AllowPaging(value: Boolean);
    function get_AllowServerPaging: Boolean;
    procedure set_AllowServerPaging(value: Boolean);
    function get_Count: Int32;
    function get_CurrentPageIndex: Int32;
    procedure set_CurrentPageIndex(value: Int32);
    function get_DataSource: DDN.mscorlib.DNIEnumerable;
    procedure set_DataSource(value: DDN.mscorlib.DNIEnumerable);
    function get_DataSourceCount: Int32;
    function get_FirstIndexInPage: Int32;
    function get_IsCustomPagingEnabled: Boolean;
    function get_IsFirstPage: Boolean;
    function get_IsLastPage: Boolean;
    function get_IsPagingEnabled: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsServerPagingEnabled: Boolean;
    function get_IsSynchronized: Boolean;
    function get_PageCount: Int32;
    function get_PageSize: Int32;
    procedure set_PageSize(value: Int32);
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_VirtualCount: Int32;
    procedure set_VirtualCount(value: Int32);

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetItemProperties(listAccessors: TArray<DDN.System.DNPropertyDescriptor>): DDN.System.DNPropertyDescriptorCollection;
    function GetListName(listAccessors: TArray<DDN.System.DNPropertyDescriptor>): string;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowCustomPaging: Boolean read get_AllowCustomPaging write set_AllowCustomPaging;
    property AllowPaging: Boolean read get_AllowPaging write set_AllowPaging;
    property AllowServerPaging: Boolean read get_AllowServerPaging write set_AllowServerPaging;
    property Count: Int32 read get_Count;
    property CurrentPageIndex: Int32 read get_CurrentPageIndex write set_CurrentPageIndex;
    property DataSource: DDN.mscorlib.DNIEnumerable read get_DataSource write set_DataSource;
    property DataSourceCount: Int32 read get_DataSourceCount;
    property FirstIndexInPage: Int32 read get_FirstIndexInPage;
    property IsCustomPagingEnabled: Boolean read get_IsCustomPagingEnabled;
    property IsFirstPage: Boolean read get_IsFirstPage;
    property IsLastPage: Boolean read get_IsLastPage;
    property IsPagingEnabled: Boolean read get_IsPagingEnabled;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsServerPagingEnabled: Boolean read get_IsServerPagingEnabled;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property PageCount: Int32 read get_PageCount;
    property PageSize: Int32 read get_PageSize write set_PageSize;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property VirtualCount: Int32 read get_VirtualCount write set_VirtualCount;
  end;

  TDNPagedDataSource = class(TDNGenericImport<DNPagedDataSourceClass, DNPagedDataSource>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNPagerSettingsClass = interface(DNObjectClass)
  ['{FCEAF726-3C2C-5E96-8AB6-12963FD7BB08}']
  { constructors } 

    {class} function init: DNPagerSettings;

  end;

  [DNTypeName('System.Web.UI.WebControls.PagerSettings')]
  DNPagerSettings = interface(DNIStateManager)
  ['{2977DD8A-1A94-3766-AA90-E5C7A701E96D}']
  { getters & setters } 

    function get_FirstPageImageUrl: string;
    procedure set_FirstPageImageUrl(value: string);
    function get_FirstPageText: string;
    procedure set_FirstPageText(value: string);
    function get_LastPageImageUrl: string;
    procedure set_LastPageImageUrl(value: string);
    function get_LastPageText: string;
    procedure set_LastPageText(value: string);
    function get_Mode: DNPagerButtons;
    procedure set_Mode(value: DNPagerButtons);
    function get_NextPageImageUrl: string;
    procedure set_NextPageImageUrl(value: string);
    function get_NextPageText: string;
    procedure set_NextPageText(value: string);
    function get_PageButtonCount: Int32;
    procedure set_PageButtonCount(value: Int32);
    function get_Position: DNPagerPosition;
    procedure set_Position(value: DNPagerPosition);
    function get_PreviousPageImageUrl: string;
    procedure set_PreviousPageImageUrl(value: string);
    function get_PreviousPageText: string;
    procedure set_PreviousPageText(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { events } 

    procedure add_PropertyChanged(value: DDN.mscorlib.DNEventHandler);
    procedure remove_PropertyChanged(value: DDN.mscorlib.DNEventHandler);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FirstPageImageUrl: string read get_FirstPageImageUrl write set_FirstPageImageUrl;
    property FirstPageText: string read get_FirstPageText write set_FirstPageText;
    property LastPageImageUrl: string read get_LastPageImageUrl write set_LastPageImageUrl;
    property LastPageText: string read get_LastPageText write set_LastPageText;
    property Mode: DNPagerButtons read get_Mode write set_Mode;
    property NextPageImageUrl: string read get_NextPageImageUrl write set_NextPageImageUrl;
    property NextPageText: string read get_NextPageText write set_NextPageText;
    property PageButtonCount: Int32 read get_PageButtonCount write set_PageButtonCount;
    property Position: DNPagerPosition read get_Position write set_Position;
    property PreviousPageImageUrl: string read get_PreviousPageImageUrl write set_PreviousPageImageUrl;
    property PreviousPageText: string read get_PreviousPageText write set_PreviousPageText;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNPagerSettings = class(TDNGenericImport<DNPagerSettingsClass, DNPagerSettings>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNParameterClass = interface(DNObjectClass)
  ['{28CD467C-7FDD-5135-80D9-2D29B8E9D10F}']
  { constructors } 

    {class} function init: DNParameter; overload;
    {class} function init(name: string): DNParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType): DNParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; defaultValue: string): DNParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode): DNParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; defaultValue: string): DNParameter; overload;

  { static methods } 

    {class} function ConvertDbTypeToTypeCode(dbType: DDN.System.Data.DNDbType): DDN.mscorlib.DNTypeCode;
    {class} function ConvertTypeCodeToDbType(typeCode: DDN.mscorlib.DNTypeCode): DDN.System.Data.DNDbType;

  end;

  [DNTypeName('System.Web.UI.WebControls.Parameter')]
  DNParameter = interface(DDN.mscorlib.DNICloneable)
  ['{7625A69B-D57C-34EC-B6CB-04EA02984930}']
  { getters & setters } 

    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNParameter = class(TDNGenericImport<DNParameterClass, DNParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNControlParameterClass = interface(DNParameterClass)
  ['{DF1F541F-4E67-5364-8B4F-82A7E9FD446D}']
  { constructors } 

    {class} function init: DNControlParameter; overload;
    {class} function init(name: string; controlID: string): DNControlParameter; overload;
    {class} function init(name: string; controlID: string; propertyName: string): DNControlParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; controlID: string; propertyName: string): DNControlParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; controlID: string; propertyName: string): DNControlParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.ControlParameter')]
  DNControlParameter = interface(DNParameter)
  ['{DF482C63-5ABF-373B-AA3C-C644EBF0988D}']
  { getters & setters } 

    function get_ControlID: string;
    procedure set_ControlID(value: string);
    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ControlID: string read get_ControlID write set_ControlID;
    property PropertyName: string read get_PropertyName write set_PropertyName;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNControlParameter = class(TDNGenericImport<DNControlParameterClass, DNControlParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNCookieParameterClass = interface(DNParameterClass)
  ['{BE06B3B9-4D11-5C7C-868A-90D5B0CDC35B}']
  { constructors } 

    {class} function init: DNCookieParameter; overload;
    {class} function init(name: string; cookieName: string): DNCookieParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; cookieName: string): DNCookieParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; cookieName: string): DNCookieParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.CookieParameter')]
  DNCookieParameter = interface(DNParameter)
  ['{3DC20E20-33C0-3677-B205-765E8FA9AE47}']
  { getters & setters } 

    function get_CookieName: string;
    procedure set_CookieName(value: string);
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property CookieName: string read get_CookieName write set_CookieName;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNCookieParameter = class(TDNGenericImport<DNCookieParameterClass, DNCookieParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNFormParameterClass = interface(DNParameterClass)
  ['{1E1F44DA-19C3-5289-BD95-6C9BA1DC7653}']
  { constructors } 

    {class} function init: DNFormParameter; overload;
    {class} function init(name: string; formField: string): DNFormParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; formField: string): DNFormParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; formField: string): DNFormParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.FormParameter')]
  DNFormParameter = interface(DNParameter)
  ['{B304F423-7360-3DA8-BF14-9E5D86022E56}']
  { getters & setters } 

    function get_FormField: string;
    procedure set_FormField(value: string);
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property FormField: string read get_FormField write set_FormField;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNFormParameter = class(TDNGenericImport<DNFormParameterClass, DNFormParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNProfileParameterClass = interface(DNParameterClass)
  ['{63069204-6A03-5B7D-BC38-D670D399FE82}']
  { constructors } 

    {class} function init: DNProfileParameter; overload;
    {class} function init(name: string; propertyName: string): DNProfileParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; propertyName: string): DNProfileParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; propertyName: string): DNProfileParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.ProfileParameter')]
  DNProfileParameter = interface(DNParameter)
  ['{733A082B-21EE-31C6-A047-87358E292661}']
  { getters & setters } 

    function get_PropertyName: string;
    procedure set_PropertyName(value: string);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property PropertyName: string read get_PropertyName write set_PropertyName;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNProfileParameter = class(TDNGenericImport<DNProfileParameterClass, DNProfileParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNQueryStringParameterClass = interface(DNParameterClass)
  ['{81697696-7C57-5D10-81FF-E3A401252760}']
  { constructors } 

    {class} function init: DNQueryStringParameter; overload;
    {class} function init(name: string; queryStringField: string): DNQueryStringParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; queryStringField: string): DNQueryStringParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; queryStringField: string): DNQueryStringParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.QueryStringParameter')]
  DNQueryStringParameter = interface(DNParameter)
  ['{C2B67D45-5C10-3FB2-9264-67350C36D76A}']
  { getters & setters } 

    function get_QueryStringField: string;
    procedure set_QueryStringField(value: string);
    function get_ValidateInput: Boolean;
    procedure set_ValidateInput(value: Boolean);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property QueryStringField: string read get_QueryStringField write set_QueryStringField;
    property ValidateInput: Boolean read get_ValidateInput write set_ValidateInput;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNQueryStringParameter = class(TDNGenericImport<DNQueryStringParameterClass, DNQueryStringParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRouteParameterClass = interface(DNParameterClass)
  ['{4F48C4CC-EFB5-5F57-82CC-6F7D807221AA}']
  { constructors } 

    {class} function init: DNRouteParameter; overload;
    {class} function init(name: string; routeKey: string): DNRouteParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; routeKey: string): DNRouteParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; routeKey: string): DNRouteParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.RouteParameter')]
  DNRouteParameter = interface(DNParameter)
  ['{176CD6AE-48C9-374B-AEC0-8612361BF75A}']
  { getters & setters } 

    function get_RouteKey: string;
    procedure set_RouteKey(value: string);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property RouteKey: string read get_RouteKey write set_RouteKey;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNRouteParameter = class(TDNGenericImport<DNRouteParameterClass, DNRouteParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSessionParameterClass = interface(DNParameterClass)
  ['{B935FFE6-822F-5AD4-9DE0-0C47B2282F35}']
  { constructors } 

    {class} function init: DNSessionParameter; overload;
    {class} function init(name: string; sessionField: string): DNSessionParameter; overload;
    {class} function init(name: string; dbType: DDN.System.Data.DNDbType; sessionField: string): DNSessionParameter; overload;
    {class} function init(name: string; &type: DDN.mscorlib.DNTypeCode; sessionField: string): DNSessionParameter; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.SessionParameter')]
  DNSessionParameter = interface(DNParameter)
  ['{E50EFA44-35DF-376C-892D-2520BCD51D99}']
  { getters & setters } 

    function get_SessionField: string;
    procedure set_SessionField(value: string);
    function get_DbType: DDN.System.Data.DNDbType;
    procedure set_DbType(value: DDN.System.Data.DNDbType);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Direction: DDN.System.Data.DNParameterDirection;
    procedure set_Direction(value: DDN.System.Data.DNParameterDirection);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Size: Int32;
    procedure set_Size(value: Int32);
    function get_Type: DDN.mscorlib.DNTypeCode;
    procedure set_Type(value: DDN.mscorlib.DNTypeCode);
    function get_ConvertEmptyStringToNull: Boolean;
    procedure set_ConvertEmptyStringToNull(value: Boolean);

  { methods } 

    function ToString: string;
    function GetDatabaseType: DDN.System.Data.DNDbType;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property SessionField: string read get_SessionField write set_SessionField;
    property DbType: DDN.System.Data.DNDbType read get_DbType write set_DbType;
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    property Direction: DDN.System.Data.DNParameterDirection read get_Direction write set_Direction;
    property Name: string read get_Name write set_Name;
    property Size: Int32 read get_Size write set_Size;
    property &Type: DDN.mscorlib.DNTypeCode read get_Type write set_Type;
    property ConvertEmptyStringToNull: Boolean read get_ConvertEmptyStringToNull write set_ConvertEmptyStringToNull;
  end;

  TDNSessionParameter = class(TDNGenericImport<DNSessionParameterClass, DNSessionParameter>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNQueryExtensionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{60FE8F87-C014-56E9-A705-07DB7C36C204}']
  end;

  [DNTypeName('System.Web.UI.WebControls.QueryExtensions')]
  DNQueryExtensions = interface(DDN.mscorlib.DNObject)
  ['{3A81572F-5221-3CB0-B870-C16DB878154B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNQueryExtensions = class(TDNGenericImport<DNQueryExtensionsClass, DNQueryExtensions>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeaterItemCollectionClass = interface(DNObjectClass)
  ['{B3B17344-B90F-5387-9838-028B02DF2DE7}']
  { constructors } 

    {class} function init(items: DDN.mscorlib.DNArrayList): DNRepeaterItemCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.RepeaterItemCollection')]
  DNRepeaterItemCollection = interface(DDN.mscorlib.DNICollection)
  ['{9A6240C6-1D96-330F-BD19-A156AFB5C3BD}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNRepeaterItem;

  { methods } 

    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNRepeaterItem read get_Item; default;
  end;

  TDNRepeaterItemCollection = class(TDNGenericImport<DNRepeaterItemCollectionClass, DNRepeaterItemCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRepeatInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BAAE3B3C-BA18-5424-BE01-133D4C0B0ED0}']
  { constructors } 

    {class} function init: DNRepeatInfo;

  end;

  [DNTypeName('System.Web.UI.WebControls.RepeatInfo')]
  DNRepeatInfo = interface(DDN.mscorlib.DNObject)
  ['{B708D32D-B7EB-30B9-8187-F422B7E12D55}']
  { getters & setters } 

    function get_Caption: string;
    procedure set_Caption(value: string);
    function get_CaptionAlign: DNTableCaptionAlign;
    procedure set_CaptionAlign(value: DNTableCaptionAlign);
    function get_OuterTableImplied: Boolean;
    procedure set_OuterTableImplied(value: Boolean);
    function get_RepeatColumns: Int32;
    procedure set_RepeatColumns(value: Int32);
    function get_RepeatDirection: DNRepeatDirection;
    procedure set_RepeatDirection(value: DNRepeatDirection);
    function get_RepeatLayout: DNRepeatLayout;
    procedure set_RepeatLayout(value: DNRepeatLayout);
    function get_UseAccessibleHeader: Boolean;
    procedure set_UseAccessibleHeader(value: Boolean);

  { methods } 

    procedure RenderRepeater(writer: DNHtmlTextWriter; user: DNIRepeatInfoUser; controlStyle: DNStyle; baseControl: DNWebControl);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Caption: string read get_Caption write set_Caption;
    property CaptionAlign: DNTableCaptionAlign read get_CaptionAlign write set_CaptionAlign;
    property OuterTableImplied: Boolean read get_OuterTableImplied write set_OuterTableImplied;
    property RepeatColumns: Int32 read get_RepeatColumns write set_RepeatColumns;
    property RepeatDirection: DNRepeatDirection read get_RepeatDirection write set_RepeatDirection;
    property RepeatLayout: DNRepeatLayout read get_RepeatLayout write set_RepeatLayout;
    property UseAccessibleHeader: Boolean read get_UseAccessibleHeader write set_UseAccessibleHeader;
  end;

  TDNRepeatInfo = class(TDNGenericImport<DNRepeatInfoClass, DNRepeatInfo>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNRoleGroupClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E7BB1EE3-0202-55CD-AD15-7B475218BE81}']
  { constructors } 

    {class} function init: DNRoleGroup;

  end;

  [DNTypeName('System.Web.UI.WebControls.RoleGroup')]
  DNRoleGroup = interface(DDN.mscorlib.DNObject)
  ['{6EDC8DC6-B673-37A2-BB7B-3710F7FF78E0}']
  { getters & setters } 

    function get_ContentTemplate: DNITemplate;
    procedure set_ContentTemplate(value: DNITemplate);
    function get_Roles: TArray<string>;
    procedure set_Roles(value: TArray<string>);

  { methods } 

    function ContainsUser(user: DDN.mscorlib.DNIPrincipal): Boolean;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property ContentTemplate: DNITemplate read get_ContentTemplate write set_ContentTemplate;
    property Roles: TArray<string> read get_Roles write set_Roles;
  end;

  TDNRoleGroup = class(TDNGenericImport<DNRoleGroupClass, DNRoleGroup>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSelectedDatesCollectionClass = interface(DNObjectClass)
  ['{FD20A9B1-43B4-5FAF-AED1-32237710C915}']
  { constructors } 

    {class} function init(dateList: DDN.mscorlib.DNArrayList): DNSelectedDatesCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.SelectedDatesCollection')]
  DNSelectedDatesCollection = interface(DDN.mscorlib.DNICollection)
  ['{63572B7C-DEDA-3A3F-9C1A-520568FE23F3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DDN.mscorlib.DNDateTime;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    procedure Add(date: DDN.mscorlib.DNDateTime);
    procedure Clear;
    function &Contains(date: DDN.mscorlib.DNDateTime): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Remove(date: DDN.mscorlib.DNDateTime);
    procedure SelectRange(fromDate: DDN.mscorlib.DNDateTime; toDate: DDN.mscorlib.DNDateTime);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DDN.mscorlib.DNDateTime read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNSelectedDatesCollection = class(TDNGenericImport<DNSelectedDatesCollectionClass, DNSelectedDatesCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNSelectResultClass = interface(DDN.mscorlib.DNObjectClass)
  ['{72709D60-DC38-5E6E-8C90-6C4183FCCF84}']
  { constructors } 

    {class} function init(totalRowCount: Int32; results: DDN.mscorlib.DNIEnumerable): DNSelectResult;

  end;

  [DNTypeName('System.Web.UI.WebControls.SelectResult')]
  DNSelectResult = interface(DDN.mscorlib.DNObject)
  ['{226B87BB-AEE1-3265-A767-E3D4B4EACD60}']
  { getters & setters } 

    function get_TotalRowCount: Int32;
    function get_Results: DDN.mscorlib.DNIEnumerable;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TotalRowCount: Int32 read get_TotalRowCount;
    property Results: DDN.mscorlib.DNIEnumerable read get_Results;
  end;

  TDNSelectResult = class(TDNGenericImport<DNSelectResultClass, DNSelectResult>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableCellCollectionClass = interface(DNObjectClass)
  ['{96D89409-5006-55EF-8C56-787B1DB35287}']
  end;

  [DNTypeName('System.Web.UI.WebControls.TableCellCollection')]
  DNTableCellCollection = interface(DDN.mscorlib.DNIList)
  ['{15F3AF6E-1603-38CA-8AD9-716D2D65095B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTableCell;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function Add(cell: DNTableCell): Int32;
    procedure AddAt(index: Int32; cell: DNTableCell);
    procedure AddRange(cells: TArray<DNTableCell>);
    function GetCellIndex(cell: DNTableCell): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Remove(cell: DNTableCell);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTableCell read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNTableCellCollection = class(TDNGenericImport<DNTableCellCollectionClass, DNTableCellCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTableRowCollectionClass = interface(DNObjectClass)
  ['{30772676-15B7-5841-8EC8-29C53CFDCB38}']
  end;

  [DNTypeName('System.Web.UI.WebControls.TableRowCollection')]
  DNTableRowCollection = interface(DDN.mscorlib.DNIList)
  ['{614E64D0-59CA-37B4-993D-B20EB177737C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(index: Int32): DNTableRow;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;

  { methods } 

    function Add(row: DNTableRow): Int32;
    procedure AddAt(index: Int32; row: DNTableRow);
    procedure AddRange(rows: TArray<DNTableRow>);
    function GetRowIndex(row: DNTableRow): Int32;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure CopyTo(&array: DDN.mscorlib.DNArray; index: Int32);
    procedure Remove(row: DNTableRow);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[index: Int32]: DNTableRow read get_Item; default;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
  end;

  TDNTableRowCollection = class(TDNGenericImport<DNTableRowCollectionClass, DNTableRowCollection>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeClass = interface(DNObjectClass)
  ['{0B1B726F-5017-5451-A773-8BD4CF837F03}']
  { constructors } 

    {class} function init: DNTreeNode; overload;
    {class} function init(text: string): DNTreeNode; overload;
    {class} function init(text: string; value: string): DNTreeNode; overload;
    {class} function init(text: string; value: string; imageUrl: string): DNTreeNode; overload;
    {class} function init(text: string; value: string; imageUrl: string; navigateUrl: string; target: string): DNTreeNode; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNode')]
  DNTreeNode = interface(DNIStateManager)
  ['{29F18363-436A-3048-909B-B2568A1251E3}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_DataBound: Boolean;
    function get_ChildNodes: DNTreeNodeCollection;
    function get_DataPath: string;
    function get_Depth: Int32;
    function get_Expanded: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_Expanded(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_DataItem: DDN.mscorlib.DNObject;
    function get_ImageToolTip: string;
    procedure set_ImageToolTip(value: string);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_Parent: DNTreeNode;
    function get_PopulateOnDemand: Boolean;
    procedure set_PopulateOnDemand(value: Boolean);
    function get_SelectAction: DNTreeNodeSelectAction;
    procedure set_SelectAction(value: DNTreeNodeSelectAction);
    function get_Selected: Boolean;
    procedure set_Selected(value: Boolean);
    function get_ShowCheckBox: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_ShowCheckBox(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ValuePath: string;

  { methods } 

    procedure CollapseAll;
    procedure ExpandAll;
    procedure Select;
    procedure Collapse;
    procedure Expand;
    procedure ToggleExpandState;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property DataBound: Boolean read get_DataBound;
    property ChildNodes: DNTreeNodeCollection read get_ChildNodes;
    property DataPath: string read get_DataPath;
    property Depth: Int32 read get_Depth;
    property Expanded: DDN.mscorlib.DNNullable<Boolean> read get_Expanded write set_Expanded;
    property DataItem: DDN.mscorlib.DNObject read get_DataItem;
    property ImageToolTip: string read get_ImageToolTip write set_ImageToolTip;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property Parent: DNTreeNode read get_Parent;
    property PopulateOnDemand: Boolean read get_PopulateOnDemand write set_PopulateOnDemand;
    property SelectAction: DNTreeNodeSelectAction read get_SelectAction write set_SelectAction;
    property Selected: Boolean read get_Selected write set_Selected;
    property ShowCheckBox: DDN.mscorlib.DNNullable<Boolean> read get_ShowCheckBox write set_ShowCheckBox;
    property Target: string read get_Target write set_Target;
    property Text: string read get_Text write set_Text;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property Value: string read get_Value write set_Value;
    property ValuePath: string read get_ValuePath;
  end;

  TDNTreeNode = class(TDNGenericImport<DNTreeNodeClass, DNTreeNode>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeBindingClass = interface(DNObjectClass)
  ['{B9CABC0E-5398-578B-BE8F-FEC0CCA19C79}']
  { constructors } 

    {class} function init: DNTreeNodeBinding;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeBinding')]
  DNTreeNodeBinding = interface(DNIStateManager)
  ['{7A6E1AA2-B297-3BDD-B809-286C41A88E23}']
  { getters & setters } 

    function get_DataMember: string;
    procedure set_DataMember(value: string);
    function get_Depth: Int32;
    procedure set_Depth(value: Int32);
    function get_FormatString: string;
    procedure set_FormatString(value: string);
    function get_ImageToolTip: string;
    procedure set_ImageToolTip(value: string);
    function get_ImageToolTipField: string;
    procedure set_ImageToolTipField(value: string);
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_ImageUrlField: string;
    procedure set_ImageUrlField(value: string);
    function get_NavigateUrl: string;
    procedure set_NavigateUrl(value: string);
    function get_NavigateUrlField: string;
    procedure set_NavigateUrlField(value: string);
    function get_PopulateOnDemand: Boolean;
    procedure set_PopulateOnDemand(value: Boolean);
    function get_SelectAction: DNTreeNodeSelectAction;
    procedure set_SelectAction(value: DNTreeNodeSelectAction);
    function get_ShowCheckBox: DDN.mscorlib.DNNullable<Boolean>;
    procedure set_ShowCheckBox(value: DDN.mscorlib.DNNullable<Boolean>);
    function get_Target: string;
    procedure set_Target(value: string);
    function get_TargetField: string;
    procedure set_TargetField(value: string);
    function get_Text: string;
    procedure set_Text(value: string);
    function get_TextField: string;
    procedure set_TextField(value: string);
    function get_ToolTip: string;
    procedure set_ToolTip(value: string);
    function get_ToolTipField: string;
    procedure set_ToolTipField(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ValueField: string;
    procedure set_ValueField(value: string);

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property DataMember: string read get_DataMember write set_DataMember;
    property Depth: Int32 read get_Depth write set_Depth;
    property FormatString: string read get_FormatString write set_FormatString;
    property ImageToolTip: string read get_ImageToolTip write set_ImageToolTip;
    property ImageToolTipField: string read get_ImageToolTipField write set_ImageToolTipField;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property ImageUrlField: string read get_ImageUrlField write set_ImageUrlField;
    property NavigateUrl: string read get_NavigateUrl write set_NavigateUrl;
    property NavigateUrlField: string read get_NavigateUrlField write set_NavigateUrlField;
    property PopulateOnDemand: Boolean read get_PopulateOnDemand write set_PopulateOnDemand;
    property SelectAction: DNTreeNodeSelectAction read get_SelectAction write set_SelectAction;
    property ShowCheckBox: DDN.mscorlib.DNNullable<Boolean> read get_ShowCheckBox write set_ShowCheckBox;
    property Target: string read get_Target write set_Target;
    property TargetField: string read get_TargetField write set_TargetField;
    property Text: string read get_Text write set_Text;
    property TextField: string read get_TextField write set_TextField;
    property ToolTip: string read get_ToolTip write set_ToolTip;
    property ToolTipField: string read get_ToolTipField write set_ToolTipField;
    property Value: string read get_Value write set_Value;
    property ValueField: string read get_ValueField write set_ValueField;
  end;

  TDNTreeNodeBinding = class(TDNGenericImport<DNTreeNodeBindingClass, DNTreeNodeBinding>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNTreeNodeCollectionClass = interface(DNObjectClass)
  ['{46D781FC-CE98-5089-8896-552ABAFB15BD}']
  { constructors } 

    {class} function init: DNTreeNodeCollection; overload;
    {class} function init(owner: DNTreeNode): DNTreeNodeCollection; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.TreeNodeCollection')]
  DNTreeNodeCollection = interface(DDN.mscorlib.DNICollection)
  ['{D856FF81-01D8-3D20-A1CA-3B4808FD26A3}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNTreeNode;

  { methods } 

    procedure Add(child: DNTreeNode);
    procedure AddAt(index: Int32; child: DNTreeNode);
    procedure Clear;
    procedure CopyTo(nodeArray: TArray<DNTreeNode>; index: Int32);
    function &Contains(c: DNTreeNode): Boolean;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAt(index: Int32);
    function IndexOf(value: DNTreeNode): Int32;
    procedure Remove(value: DNTreeNode);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNTreeNode read get_Item; default;
  end;

  TDNTreeNodeCollection = class(TDNGenericImport<DNTreeNodeCollectionClass, DNTreeNodeCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNCatalogPartChromeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{031F244B-53FF-5A81-A68F-BB86575427A2}']
  { constructors } 

    {class} function init(zone: DNCatalogZoneBase): DNCatalogPartChrome;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.CatalogPartChrome')]
  DNCatalogPartChrome = interface(DDN.mscorlib.DNObject)
  ['{98189248-2BA4-374C-A891-3F8D584139FC}']
  { methods } 

    procedure PerformPreRender;
    procedure RenderCatalogPart(writer: DNHtmlTextWriter; catalogPart: DNCatalogPart);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCatalogPartChrome = class(TDNGenericImport<DNCatalogPartChromeClass, DNCatalogPartChrome>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConnectionPointClass = interface(DDN.mscorlib.DNObjectClass)
  ['{077785E4-2C0D-5C16-B270-1ABF215D01C8}']
  { static fields getter & setter } 

   function __fakeFieldGet_DefaultID: string;

  { static fields } 

    {class} property DefaultID: string read __fakeFieldGet_DefaultID;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConnectionPoint')]
  DNConnectionPoint = interface(DDN.mscorlib.DNObject)
  ['{AF792555-F134-3EB3-9EC6-A6A592FAFE3E}']
  { getters & setters } 

    function get_AllowsMultipleConnections: Boolean;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_InterfaceType: DDN.mscorlib.DNType;
    function get_ID: string;
    function get_DisplayName: string;

  { methods } 

    function GetEnabled(control: DNControl): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowsMultipleConnections: Boolean read get_AllowsMultipleConnections;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property InterfaceType: DDN.mscorlib.DNType read get_InterfaceType;
    property ID: string read get_ID;
    property DisplayName: string read get_DisplayName;
  end;

  TDNConnectionPoint = class(TDNGenericImport<DNConnectionPointClass, DNConnectionPoint>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNConsumerConnectionPointClass = interface(DNConnectionPointClass)
  ['{5FC5EFCF-1843-5608-99CA-173AA4EC3F6A}']
  { constructors } 

    {class} function init(callbackMethod: DDN.mscorlib.DNMethodInfo; interfaceType: DDN.mscorlib.DNType; controlType: DDN.mscorlib.DNType; displayName: string; id: string; allowsMultipleConnections: Boolean): DNConsumerConnectionPoint;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint')]
  DNConsumerConnectionPoint = interface(DNConnectionPoint)
  ['{76C5189B-1457-3B5F-86B6-BE43551294C5}']
  { getters & setters } 

    function get_AllowsMultipleConnections: Boolean;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_InterfaceType: DDN.mscorlib.DNType;
    function get_ID: string;
    function get_DisplayName: string;

  { methods } 

    function SupportsConnection(control: DNControl; secondaryInterfaces: DNConnectionInterfaceCollection): Boolean;
    procedure SetObject(control: DNControl; data: DDN.mscorlib.DNObject);
    function GetEnabled(control: DNControl): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowsMultipleConnections: Boolean read get_AllowsMultipleConnections;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property InterfaceType: DDN.mscorlib.DNType read get_InterfaceType;
    property ID: string read get_ID;
    property DisplayName: string read get_DisplayName;
  end;

  TDNConsumerConnectionPoint = class(TDNGenericImport<DNConsumerConnectionPointClass, DNConsumerConnectionPoint>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNProviderConnectionPointClass = interface(DNConnectionPointClass)
  ['{9C61AE26-B406-593F-A32B-BDA638439E32}']
  { constructors } 

    {class} function init(callbackMethod: DDN.mscorlib.DNMethodInfo; interfaceType: DDN.mscorlib.DNType; controlType: DDN.mscorlib.DNType; displayName: string; id: string; allowsMultipleConnections: Boolean): DNProviderConnectionPoint;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.ProviderConnectionPoint')]
  DNProviderConnectionPoint = interface(DNConnectionPoint)
  ['{69E1F659-39EE-3388-B611-3F9395960E8B}']
  { getters & setters } 

    function get_AllowsMultipleConnections: Boolean;
    function get_ControlType: DDN.mscorlib.DNType;
    function get_InterfaceType: DDN.mscorlib.DNType;
    function get_ID: string;
    function get_DisplayName: string;

  { methods } 

    function GetSecondaryInterfaces(control: DNControl): DNConnectionInterfaceCollection;
    function GetObject(control: DNControl): DDN.mscorlib.DNObject;
    function GetEnabled(control: DNControl): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowsMultipleConnections: Boolean read get_AllowsMultipleConnections;
    property ControlType: DDN.mscorlib.DNType read get_ControlType;
    property InterfaceType: DDN.mscorlib.DNType read get_InterfaceType;
    property ID: string read get_ID;
    property DisplayName: string read get_DisplayName;
  end;

  TDNProviderConnectionPoint = class(TDNGenericImport<DNProviderConnectionPointClass, DNProviderConnectionPoint>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNEditorPartChromeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F4426E5F-53C8-5461-BF41-297DA4310713}']
  { constructors } 

    {class} function init(zone: DNEditorZoneBase): DNEditorPartChrome;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.EditorPartChrome')]
  DNEditorPartChrome = interface(DDN.mscorlib.DNObject)
  ['{BB0CDE7B-F836-3C8E-9294-9AD96AC16D14}']
  { methods } 

    procedure PerformPreRender;
    procedure RenderEditorPart(writer: DNHtmlTextWriter; editorPart: DNEditorPart);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNEditorPartChrome = class(TDNGenericImport<DNEditorPartChromeClass, DNEditorPartChrome>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationAdministrationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EFC41AD9-BF27-5EFC-BEEC-EDF91BC4D369}']
  { static getter & setter } 

    {class} function get_ApplicationName: string;
    {class} procedure set_ApplicationName(value: string);
    {class} function get_Provider: DNPersonalizationProvider;
    {class} function get_Providers: DNPersonalizationProviderCollection;

  { static methods } 

    {class} function ResetAllState(scope: DNPersonalizationScope): Int32;
    {class} function ResetInactiveUserState(userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32; overload;
    {class} function GetCountOfState(scope: DNPersonalizationScope): Int32; overload;
    {class} function GetCountOfInactiveUserState(userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32; overload;
    {class} function GetAllState(scope: DNPersonalizationScope): DNPersonalizationStateInfoCollection; overload;
    {class} function GetAllInactiveUserState(userInactiveSinceDate: DDN.mscorlib.DNDateTime): DNPersonalizationStateInfoCollection; overload;
    {class} function FindSharedState(pathToMatch: string): DNPersonalizationStateInfoCollection; overload;
    {class} function FindUserState(pathToMatch: string; usernameToMatch: string): DNPersonalizationStateInfoCollection; overload;
    {class} function FindInactiveUserState(pathToMatch: string; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): DNPersonalizationStateInfoCollection; overload;
    {class} function ResetState(data: DNPersonalizationStateInfoCollection): Int32;
    {class} function ResetSharedState(path: string): Boolean; overload;
    {class} function ResetSharedState(paths: TArray<string>): Int32; overload;
    {class} function ResetUserState(path: string): Int32; overload;
    {class} function ResetUserState(usernames: TArray<string>): Int32; overload;
    {class} function ResetUserState(path: string; username: string): Boolean; overload;
    {class} function ResetUserState(path: string; usernames: TArray<string>): Int32; overload;
    {class} function ResetInactiveUserState(path: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32; overload;
    {class} function GetCountOfState(scope: DNPersonalizationScope; pathToMatch: string): Int32; overload;
    {class} function GetCountOfUserState(usernameToMatch: string): Int32;
    {class} function GetCountOfInactiveUserState(pathToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime): Int32; overload;
    {class} function GetAllState(scope: DNPersonalizationScope; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection; overload;
    {class} function GetAllInactiveUserState(userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection; overload;
    {class} function FindSharedState(pathToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection; overload;
    {class} function FindUserState(pathToMatch: string; usernameToMatch: string; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection; overload;
    {class} function FindInactiveUserState(pathToMatch: string; usernameToMatch: string; userInactiveSinceDate: DDN.mscorlib.DNDateTime; pageIndex: Int32; pageSize: Int32; out totalRecords: Int32): DNPersonalizationStateInfoCollection; overload;

  { static propertys } 

    {class} property ApplicationName: string read get_ApplicationName write set_ApplicationName;
    {class} property Provider: DNPersonalizationProvider read get_Provider;
    {class} property Providers: DNPersonalizationProviderCollection read get_Providers;
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationAdministration')]
  DNPersonalizationAdministration = interface(DDN.mscorlib.DNObject)
  ['{185A7640-910B-3EF9-B626-5C544DB3589F}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNPersonalizationAdministration = class(TDNGenericImport<DNPersonalizationAdministrationClass, DNPersonalizationAdministration>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationDictionaryClass = interface(DNObjectClass)
  ['{B0FCA68D-207E-5A13-A817-117C449EACD2}']
  { constructors } 

    {class} function init: DNPersonalizationDictionary; overload;
    {class} function init(initialSize: Int32): DNPersonalizationDictionary; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationDictionary')]
  DNPersonalizationDictionary = interface(DDN.mscorlib.DNIDictionary)
  ['{6590C2AF-7D84-3B53-A039-C560465A3CD5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsFixedSize: Boolean;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_Keys: DDN.mscorlib.DNICollection;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Values: DDN.mscorlib.DNICollection;
    function get_Item(key: string): DNPersonalizationEntry;
    procedure set_Item(key: string; value: DNPersonalizationEntry);

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<DDN.mscorlib.DNDictionaryEntry>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    procedure Add(key: string; value: DNPersonalizationEntry);
    function &Contains(key: string): Boolean;
    procedure Remove(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsFixedSize: Boolean read get_IsFixedSize;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property Keys: DDN.mscorlib.DNICollection read get_Keys;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Values: DDN.mscorlib.DNICollection read get_Values;
    property Item[key: string]: DNPersonalizationEntry read get_Item write set_Item; default;
  end;

  TDNPersonalizationDictionary = class(TDNGenericImport<DNPersonalizationDictionaryClass, DNPersonalizationDictionary>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationEntryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{27C8905C-2B56-5FB5-9DD2-8B76AD90D4E3}']
  { constructors } 

    {class} function init(value: DDN.mscorlib.DNObject; scope: DNPersonalizationScope): DNPersonalizationEntry; overload;
    {class} function init(value: DDN.mscorlib.DNObject; scope: DNPersonalizationScope; isSensitive: Boolean): DNPersonalizationEntry; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationEntry')]
  DNPersonalizationEntry = interface(DDN.mscorlib.DNObject)
  ['{E0EBBAE4-7451-3091-ABB0-2AF2C5D24B3D}']
  { getters & setters } 

    function get_Scope: DNPersonalizationScope;
    procedure set_Scope(value: DNPersonalizationScope);
    function get_Value: DDN.mscorlib.DNObject;
    procedure set_Value(value: DDN.mscorlib.DNObject);
    function get_IsSensitive: Boolean;
    procedure set_IsSensitive(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Scope: DNPersonalizationScope read get_Scope write set_Scope;
    property Value: DDN.mscorlib.DNObject read get_Value write set_Value;
    property IsSensitive: Boolean read get_IsSensitive write set_IsSensitive;
  end;

  TDNPersonalizationEntry = class(TDNGenericImport<DNPersonalizationEntryClass, DNPersonalizationEntry>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationStateClass = interface(DDN.mscorlib.DNObjectClass)
  ['{021AD7C0-6873-59BB-B059-5AD87A41C0B3}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationState')]
  DNPersonalizationState = interface(DDN.mscorlib.DNObject)
  ['{16C378E2-B515-35CC-BCAA-D5F84C8BD480}']
  { getters & setters } 

    function get_IsDirty: Boolean;
    function get_IsEmpty: Boolean;
    function get_WebPartManager: DNWebPartManager;

  { methods } 

    procedure ApplyWebPartPersonalization(webPart: DNWebPart);
    procedure ApplyWebPartManagerPersonalization;
    procedure ExtractWebPartPersonalization(webPart: DNWebPart);
    procedure ExtractWebPartManagerPersonalization;
    function GetAuthorizationFilter(webPartID: string): string;
    procedure SetWebPartDirty(webPart: DNWebPart);
    procedure SetWebPartManagerDirty;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsDirty: Boolean read get_IsDirty;
    property IsEmpty: Boolean read get_IsEmpty;
    property WebPartManager: DNWebPartManager read get_WebPartManager;
  end;

  TDNPersonalizationState = class(TDNGenericImport<DNPersonalizationStateClass, DNPersonalizationState>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationStateInfoClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CFEACA3B-4B09-50A4-A797-06817F6E099F}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationStateInfo')]
  DNPersonalizationStateInfo = interface(DDN.mscorlib.DNObject)
  ['{0F3B5980-9643-37DF-8911-51FD1C7CC318}']
  { getters & setters } 

    function get_Path: string;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_Size: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Path: string read get_Path;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property Size: Int32 read get_Size;
  end;

  TDNPersonalizationStateInfo = class(TDNGenericImport<DNPersonalizationStateInfoClass, DNPersonalizationStateInfo>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNSharedPersonalizationStateInfoClass = interface(DNPersonalizationStateInfoClass)
  ['{BAA3910E-1EF1-59A9-9B52-7E5EEEB43041}']
  { constructors } 

    {class} function init(path: string; lastUpdatedDate: DDN.mscorlib.DNDateTime; size: Int32; sizeOfPersonalizations: Int32; countOfPersonalizations: Int32): DNSharedPersonalizationStateInfo;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.SharedPersonalizationStateInfo')]
  DNSharedPersonalizationStateInfo = interface(DNPersonalizationStateInfo)
  ['{B3270D2B-47B0-34F3-AF60-C787CD7FC97E}']
  { getters & setters } 

    function get_SizeOfPersonalizations: Int32;
    function get_CountOfPersonalizations: Int32;
    function get_Path: string;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_Size: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property SizeOfPersonalizations: Int32 read get_SizeOfPersonalizations;
    property CountOfPersonalizations: Int32 read get_CountOfPersonalizations;
    property Path: string read get_Path;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property Size: Int32 read get_Size;
  end;

  TDNSharedPersonalizationStateInfo = class(TDNGenericImport<DNSharedPersonalizationStateInfoClass, DNSharedPersonalizationStateInfo>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNUserPersonalizationStateInfoClass = interface(DNPersonalizationStateInfoClass)
  ['{F91B9ABD-EB17-5585-A2A4-6314D0FED99C}']
  { constructors } 

    {class} function init(path: string; lastUpdatedDate: DDN.mscorlib.DNDateTime; size: Int32; username: string; lastActivityDate: DDN.mscorlib.DNDateTime): DNUserPersonalizationStateInfo;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.UserPersonalizationStateInfo')]
  DNUserPersonalizationStateInfo = interface(DNPersonalizationStateInfo)
  ['{7D18F488-5189-3E16-B50B-C08731DB7408}']
  { getters & setters } 

    function get_Username: string;
    function get_LastActivityDate: DDN.mscorlib.DNDateTime;
    function get_Path: string;
    function get_LastUpdatedDate: DDN.mscorlib.DNDateTime;
    function get_Size: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Username: string read get_Username;
    property LastActivityDate: DDN.mscorlib.DNDateTime read get_LastActivityDate;
    property Path: string read get_Path;
    property LastUpdatedDate: DDN.mscorlib.DNDateTime read get_LastUpdatedDate;
    property Size: Int32 read get_Size;
  end;

  TDNUserPersonalizationStateInfo = class(TDNGenericImport<DNUserPersonalizationStateInfoClass, DNUserPersonalizationStateInfo>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationStateInfoCollectionClass = interface(DNObjectClass)
  ['{9419D2B3-67C8-59F0-8918-78959F694FDA}']
  { constructors } 

    {class} function init: DNPersonalizationStateInfoCollection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationStateInfoCollection')]
  DNPersonalizationStateInfoCollection = interface(DDN.mscorlib.DNICollection)
  ['{9B753F7A-EDF5-3F3F-B813-21A1B389902D}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(path: string; username: string): DNPersonalizationStateInfo; overload;
    function get_Item(index: Int32): DNPersonalizationStateInfo; overload;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;

  { methods } 

    procedure Clear;
    procedure CopyTo(&array: TArray<DNPersonalizationStateInfo>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure SetReadOnly;
    procedure Add(data: DNPersonalizationStateInfo);
    procedure Remove(path: string; username: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property Item[path: string; username: string]: DNPersonalizationStateInfo read get_Item; default;
    property Item[index: Int32]: DNPersonalizationStateInfo read get_Item; default;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
  end;

  TDNPersonalizationStateInfoCollection = class(TDNGenericImport<DNPersonalizationStateInfoCollectionClass, DNPersonalizationStateInfoCollection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNPersonalizationStateQueryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AE5FC783-A0FD-53AE-999B-A848D3F3A22B}']
  { constructors } 

    {class} function init: DNPersonalizationStateQuery;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.PersonalizationStateQuery')]
  DNPersonalizationStateQuery = interface(DDN.mscorlib.DNObject)
  ['{E490B354-27E2-36DA-BBCE-C9EA860B60DE}']
  { getters & setters } 

    function get_PathToMatch: string;
    procedure set_PathToMatch(value: string);
    function get_UserInactiveSinceDate: DDN.mscorlib.DNDateTime;
    procedure set_UserInactiveSinceDate(value: DDN.mscorlib.DNDateTime);
    function get_UsernameToMatch: string;
    procedure set_UsernameToMatch(value: string);
    function get_Item(queryKey: string): DDN.mscorlib.DNObject;
    procedure set_Item(queryKey: string; value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property PathToMatch: string read get_PathToMatch write set_PathToMatch;
    property UserInactiveSinceDate: DDN.mscorlib.DNDateTime read get_UserInactiveSinceDate write set_UserInactiveSinceDate;
    property UsernameToMatch: string read get_UsernameToMatch write set_UsernameToMatch;
    property Item[queryKey: string]: DDN.mscorlib.DNObject read get_Item write set_Item; default;
  end;

  TDNPersonalizationStateQuery = class(TDNGenericImport<DNPersonalizationStateQueryClass, DNPersonalizationStateQuery>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartChromeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{B081055A-FC71-5352-ABA7-4DB23150A3D6}']
  { constructors } 

    {class} function init(zone: DNWebPartZoneBase; manager: DNWebPartManager): DNWebPartChrome;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartChrome')]
  DNWebPartChrome = interface(DDN.mscorlib.DNObject)
  ['{80382DC7-3879-31DC-92FC-80F13F512A17}']
  { methods } 

    procedure PerformPreRender;
    procedure RenderWebPart(writer: DNHtmlTextWriter; webPart: DNWebPart);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebPartChrome = class(TDNGenericImport<DNWebPartChromeClass, DNWebPartChrome>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartConnectionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{CD1CBC29-6427-5F74-A5A1-A73A94649110}']
  { constructors } 

    {class} function init: DNWebPartConnection;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartConnection')]
  DNWebPartConnection = interface(DDN.mscorlib.DNObject)
  ['{48B01FC8-022A-3A24-BAED-623FA9BE1A26}']
  { getters & setters } 

    function get_Consumer: DNWebPart;
    function get_ConsumerConnectionPoint: DNConsumerConnectionPoint;
    function get_ConsumerConnectionPointID: string;
    procedure set_ConsumerConnectionPointID(value: string);
    function get_ConsumerID: string;
    procedure set_ConsumerID(value: string);
    function get_ID: string;
    procedure set_ID(value: string);
    function get_IsActive: Boolean;
    function get_IsShared: Boolean;
    function get_IsStatic: Boolean;
    function get_Provider: DNWebPart;
    function get_ProviderConnectionPoint: DNProviderConnectionPoint;
    function get_ProviderConnectionPointID: string;
    procedure set_ProviderConnectionPointID(value: string);
    function get_ProviderID: string;
    procedure set_ProviderID(value: string);
    function get_Transformer: DNWebPartTransformer;
    function get_Transformers: DNWebPartTransformerCollection;

  { methods } 

    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    property Consumer: DNWebPart read get_Consumer;
    property ConsumerConnectionPoint: DNConsumerConnectionPoint read get_ConsumerConnectionPoint;
    property ConsumerConnectionPointID: string read get_ConsumerConnectionPointID write set_ConsumerConnectionPointID;
    property ConsumerID: string read get_ConsumerID write set_ConsumerID;
    property ID: string read get_ID write set_ID;
    property IsActive: Boolean read get_IsActive;
    property IsShared: Boolean read get_IsShared;
    property IsStatic: Boolean read get_IsStatic;
    property Provider: DNWebPart read get_Provider;
    property ProviderConnectionPoint: DNProviderConnectionPoint read get_ProviderConnectionPoint;
    property ProviderConnectionPointID: string read get_ProviderConnectionPointID write set_ProviderConnectionPointID;
    property ProviderID: string read get_ProviderID write set_ProviderID;
    property Transformer: DNWebPartTransformer read get_Transformer;
    property Transformers: DNWebPartTransformerCollection read get_Transformers;
  end;

  TDNWebPartConnection = class(TDNGenericImport<DNWebPartConnectionClass, DNWebPartConnection>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDescriptionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8299B6B4-B00C-5B70-9C8A-5F338CE06A1F}']
  { constructors } 

    {class} function init(id: string; title: string; description: string; imageUrl: string): DNWebPartDescription; overload;
    {class} function init(part: DNWebPart): DNWebPartDescription; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDescription')]
  DNWebPartDescription = interface(DDN.mscorlib.DNObject)
  ['{C62082A9-EEB3-3B65-8A3C-57365C829AF7}']
  { getters & setters } 

    function get_CatalogIconImageUrl: string;
    function get_Description: string;
    function get_ID: string;
    function get_Title: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CatalogIconImageUrl: string read get_CatalogIconImageUrl;
    property Description: string read get_Description;
    property ID: string read get_ID;
    property Title: string read get_Title;
  end;

  TDNWebPartDescription = class(TDNGenericImport<DNWebPartDescriptionClass, DNWebPartDescription>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartDisplayModeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7F565577-3EDA-5310-9AF0-291CA0637B55}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartDisplayMode')]
  DNWebPartDisplayMode = interface(DDN.mscorlib.DNObject)
  ['{395F697E-DAC3-365C-A60C-9B6574BD7C9B}']
  { getters & setters } 

    function get_AllowPageDesign: Boolean;
    function get_AssociatedWithToolZone: Boolean;
    function get_Name: string;
    function get_RequiresPersonalization: Boolean;
    function get_ShowHiddenWebParts: Boolean;

  { methods } 

    function IsEnabled(webPartManager: DNWebPartManager): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property AllowPageDesign: Boolean read get_AllowPageDesign;
    property AssociatedWithToolZone: Boolean read get_AssociatedWithToolZone;
    property Name: string read get_Name;
    property RequiresPersonalization: Boolean read get_RequiresPersonalization;
    property ShowHiddenWebParts: Boolean read get_ShowHiddenWebParts;
  end;

  TDNWebPartDisplayMode = class(TDNGenericImport<DNWebPartDisplayModeClass, DNWebPartDisplayMode>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartManagerInternalsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D62545AF-CCE2-5156-A1B8-F0DA387BB722}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartManagerInternals')]
  DNWebPartManagerInternals = interface(DDN.mscorlib.DNObject)
  ['{0E1BFC8F-24D2-32B2-907B-EFA8B569D057}']
  { methods } 

    procedure AddWebPart(webPart: DNWebPart);
    procedure CallOnClosing(webPart: DNWebPart);
    procedure CallOnConnectModeChanged(webPart: DNWebPart);
    procedure CallOnDeleting(webPart: DNWebPart);
    procedure CallOnEditModeChanged(webPart: DNWebPart);
    function CreateObjectFromType(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function ConnectionDeleted(connection: DNWebPartConnection): Boolean;
    procedure DeleteConnection(connection: DNWebPartConnection);
    function GetZoneID(webPart: DNWebPart): string;
    procedure LoadConfigurationState(transformer: DNWebPartTransformer; savedState: DDN.mscorlib.DNObject);
    procedure RemoveWebPart(webPart: DNWebPart);
    function SaveConfigurationState(transformer: DNWebPartTransformer): DDN.mscorlib.DNObject;
    procedure SetConnectErrorMessage(webPart: DNWebPart; connectErrorMessage: string);
    procedure SetHasUserData(webPart: DNWebPart; hasUserData: Boolean);
    procedure SetHasSharedData(webPart: DNWebPart; hasSharedData: Boolean);
    procedure SetIsClosed(webPart: DNWebPart; isClosed: Boolean);
    procedure SetIsShared(connection: DNWebPartConnection; isShared: Boolean); overload;
    procedure SetIsShared(webPart: DNWebPart; isShared: Boolean); overload;
    procedure SetIsStandalone(webPart: DNWebPart; isStandalone: Boolean);
    procedure SetIsStatic(connection: DNWebPartConnection; isStatic: Boolean); overload;
    procedure SetIsStatic(webPart: DNWebPart; isStatic: Boolean); overload;
    procedure SetTransformer(connection: DNWebPartConnection; transformer: DNWebPartTransformer);
    procedure SetZoneID(webPart: DNWebPart; zoneID: string);
    procedure SetZoneIndex(webPart: DNWebPart; zoneIndex: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebPartManagerInternals = class(TDNGenericImport<DNWebPartManagerInternalsClass, DNWebPartManagerInternals>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartPersonalizationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9FFFF067-1501-5E47-A175-92C72295297A}']
  { constructors } 

    {class} function init(owner: DNWebPartManager): DNWebPartPersonalization;

  { static fields getter & setter } 

   function __fakeFieldGet_ModifyStateUserCapability: DNWebPartUserCapability;
   function __fakeFieldGet_EnterSharedScopeUserCapability: DNWebPartUserCapability;

  { static fields } 

    {class} property ModifyStateUserCapability: DNWebPartUserCapability read __fakeFieldGet_ModifyStateUserCapability;
    {class} property EnterSharedScopeUserCapability: DNWebPartUserCapability read __fakeFieldGet_EnterSharedScopeUserCapability;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartPersonalization')]
  DNWebPartPersonalization = interface(DDN.mscorlib.DNObject)
  ['{EE2F9D0E-0C56-3E3C-8274-97C6E007C889}']
  { getters & setters } 

    function get_CanEnterSharedScope: Boolean;
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_HasPersonalizationState: Boolean;
    function get_InitialScope: DNPersonalizationScope;
    procedure set_InitialScope(value: DNPersonalizationScope);
    function get_IsEnabled: Boolean;
    function get_IsModifiable: Boolean;
    function get_ProviderName: string;
    procedure set_ProviderName(value: string);
    function get_Scope: DNPersonalizationScope;

  { methods } 

    procedure EnsureEnabled(ensureModifiable: Boolean);
    procedure ResetPersonalizationState;
    procedure ToggleScope;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property CanEnterSharedScope: Boolean read get_CanEnterSharedScope;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property HasPersonalizationState: Boolean read get_HasPersonalizationState;
    property InitialScope: DNPersonalizationScope read get_InitialScope write set_InitialScope;
    property IsEnabled: Boolean read get_IsEnabled;
    property IsModifiable: Boolean read get_IsModifiable;
    property ProviderName: string read get_ProviderName write set_ProviderName;
    property Scope: DNPersonalizationScope read get_Scope;
  end;

  TDNWebPartPersonalization = class(TDNGenericImport<DNWebPartPersonalizationClass, DNWebPartPersonalization>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartTrackerClass = interface(DNObjectClass)
  ['{E504796B-F00E-5AFC-B5D1-877F92847755}']
  { constructors } 

    {class} function init(webPart: DNWebPart; providerConnectionPoint: DNProviderConnectionPoint): DNWebPartTracker;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartTracker')]
  DNWebPartTracker = interface(DDN.mscorlib.DNIDisposable)
  ['{4ADEBFDE-BED6-385C-9C6B-398291BA8444}']
  { getters & setters } 

    function get_IsCircularConnection: Boolean;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property IsCircularConnection: Boolean read get_IsCircularConnection;
  end;

  TDNWebPartTracker = class(TDNGenericImport<DNWebPartTrackerClass, DNWebPartTracker>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartTransformerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0AE08BF9-8E75-5FF5-A7BE-CD5241E72F86}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartTransformer')]
  DNWebPartTransformer = interface(DDN.mscorlib.DNObject)
  ['{05CC1E04-1364-37EA-92C7-9C3B31B82C80}']
  { methods } 

    function CreateConfigurationControl: DNControl;
    function Transform(providerData: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWebPartTransformer = class(TDNGenericImport<DNWebPartTransformerClass, DNWebPartTransformer>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNRowToFieldTransformerClass = interface(DNWebPartTransformerClass)
  ['{72DA2B30-6914-5FFF-A0B9-68AB3FEAB596}']
  { constructors } 

    {class} function init: DNRowToFieldTransformer;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.RowToFieldTransformer')]
  DNRowToFieldTransformer = interface(DNWebPartTransformer)
  ['{FB95E4CF-A9C6-32EF-86F9-0620120925EC}']
  { getters & setters } 

    function get_FieldName: string;
    procedure set_FieldName(value: string);

  { methods } 

    function CreateConfigurationControl: DNControl;
    function Transform(providerData: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property FieldName: string read get_FieldName write set_FieldName;
  end;

  TDNRowToFieldTransformer = class(TDNGenericImport<DNRowToFieldTransformerClass, DNRowToFieldTransformer>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNRowToParametersTransformerClass = interface(DNWebPartTransformerClass)
  ['{37BC59EA-B9AE-558F-BA7B-568347E71E0E}']
  { constructors } 

    {class} function init: DNRowToParametersTransformer;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.RowToParametersTransformer')]
  DNRowToParametersTransformer = interface(DNWebPartTransformer)
  ['{C27EB9D1-4463-3DEC-9E38-851F1086D493}']
  { getters & setters } 

    function get_ConsumerFieldNames: TArray<string>;
    procedure set_ConsumerFieldNames(value: TArray<string>);
    function get_ProviderFieldNames: TArray<string>;
    procedure set_ProviderFieldNames(value: TArray<string>);

  { methods } 

    function CreateConfigurationControl: DNControl;
    function Transform(providerData: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ConsumerFieldNames: TArray<string> read get_ConsumerFieldNames write set_ConsumerFieldNames;
    property ProviderFieldNames: TArray<string> read get_ProviderFieldNames write set_ProviderFieldNames;
  end;

  TDNRowToParametersTransformer = class(TDNGenericImport<DNRowToParametersTransformerClass, DNRowToParametersTransformer>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartUserCapabilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D5AAB8EC-D20D-546C-AAC8-872B35944197}']
  { constructors } 

    {class} function init(name: string): DNWebPartUserCapability;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartUserCapability')]
  DNWebPartUserCapability = interface(DDN.mscorlib.DNObject)
  ['{041BE1D7-5828-3347-B12A-D7EF6C47DD07}']
  { getters & setters } 

    function get_Name: string;

  { methods } 

    function Equals(o: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Name: string read get_Name;
  end;

  TDNWebPartUserCapability = class(TDNGenericImport<DNWebPartUserCapabilityClass, DNWebPartUserCapability>) end;

  //-------------namespace: System.Web.UI.WebControls.WebParts----------------
  DNWebPartVerbClass = interface(DNObjectClass)
  ['{BB4924D2-4D83-5861-86CE-163EF499C05F}']
  { constructors } 

    {class} function init(id: string; serverClickHandler: DNWebPartEventHandler): DNWebPartVerb; overload;
    {class} function init(id: string; clientClickHandler: string): DNWebPartVerb; overload;
    {class} function init(id: string; serverClickHandler: DNWebPartEventHandler; clientClickHandler: string): DNWebPartVerb; overload;

  end;

  [DNTypeName('System.Web.UI.WebControls.WebParts.WebPartVerb')]
  DNWebPartVerb = interface(DNIStateManager)
  ['{E3BFC00F-6EEF-31F9-B471-514DF31B9D22}']
  { getters & setters } 

    function get_Checked: Boolean;
    procedure set_Checked(value: Boolean);
    function get_ClientClickHandler: string;
    function get_Description: string;
    procedure set_Description(value: string);
    function get_Enabled: Boolean;
    procedure set_Enabled(value: Boolean);
    function get_ID: string;
    function get_ImageUrl: string;
    procedure set_ImageUrl(value: string);
    function get_ServerClickHandler: DNWebPartEventHandler;
    function get_Text: string;
    procedure set_Text(value: string);
    function get_Visible: Boolean;
    procedure set_Visible(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Checked: Boolean read get_Checked write set_Checked;
    property ClientClickHandler: string read get_ClientClickHandler;
    property Description: string read get_Description write set_Description;
    property Enabled: Boolean read get_Enabled write set_Enabled;
    property ID: string read get_ID;
    property ImageUrl: string read get_ImageUrl write set_ImageUrl;
    property ServerClickHandler: DNWebPartEventHandler read get_ServerClickHandler;
    property Text: string read get_Text write set_Text;
    property Visible: Boolean read get_Visible write set_Visible;
  end;

  TDNWebPartVerb = class(TDNGenericImport<DNWebPartVerbClass, DNWebPartVerb>) end;

  //-------------namespace: System.Web.UI.WebControls----------------
  DNWizardStepCollectionClass = interface(DNObjectClass)
  ['{6FDD588C-A4F6-5AD9-93CF-90DF0E233B3D}']
  end;

  [DNTypeName('System.Web.UI.WebControls.WizardStepCollection')]
  DNWizardStepCollection = interface(DDN.mscorlib.DNIList)
  ['{D3EC4829-55A6-34E2-B75A-2EEE15CF687B}']
  { getters & setters } 

    function get_Count: Int32;
    function get_IsReadOnly: Boolean;
    function get_IsSynchronized: Boolean;
    function get_SyncRoot: DDN.mscorlib.DNObject;
    function get_Item(index: Int32): DNWizardStepBase;

  { methods } 

    procedure Add(wizardStep: DNWizardStepBase);
    procedure AddAt(index: Int32; wizardStep: DNWizardStepBase);
    function &Contains(wizardStep: DNWizardStepBase): Boolean;
    procedure CopyTo(&array: TArray<DNWizardStepBase>; index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function IndexOf(wizardStep: DNWizardStepBase): Int32;
    procedure Insert(index: Int32; wizardStep: DNWizardStepBase);
    procedure Remove(wizardStep: DNWizardStepBase);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Count: Int32 read get_Count;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property IsSynchronized: Boolean read get_IsSynchronized;
    property SyncRoot: DDN.mscorlib.DNObject read get_SyncRoot;
    property Item[index: Int32]: DNWizardStepBase read get_Item; default;
  end;

  TDNWizardStepCollection = class(TDNGenericImport<DNWizardStepCollectionClass, DNWizardStepCollection>) end;

  //-------------namespace: System.Web.UI----------------
  DNXPathBinderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{95F48813-7B31-5C3F-83AB-F57176020A3E}']
  { static methods } 

    {class} function Eval(container: DDN.mscorlib.DNObject; xPath: string): DDN.mscorlib.DNObject; overload;
    {class} function Eval(container: DDN.mscorlib.DNObject; xPath: string; format: string): string; overload;
    {class} function Eval(container: DDN.mscorlib.DNObject; xPath: string; format: string; resolver: DDN.System.Xml.DNIXmlNamespaceResolver): string; overload;
    {class} function Select(container: DDN.mscorlib.DNObject; xPath: string): DDN.mscorlib.DNIEnumerable; overload;
    {class} function Eval(container: DDN.mscorlib.DNObject; xPath: string; resolver: DDN.System.Xml.DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    {class} function Select(container: DDN.mscorlib.DNObject; xPath: string; resolver: DDN.System.Xml.DNIXmlNamespaceResolver): DDN.mscorlib.DNIEnumerable; overload;

  end;

  [DNTypeName('System.Web.UI.XPathBinder')]
  DNXPathBinder = interface(DDN.mscorlib.DNObject)
  ['{33C83156-E181-3CCA-BDE4-F48F98FCB47B}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXPathBinder = class(TDNGenericImport<DNXPathBinderClass, DNXPathBinder>) end;

  //-------------namespace: System.Web----------------
  DNUnvalidatedRequestValuesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{FED8EA68-D07F-5E51-B0EC-EBFB69607A14}']
  end;

  [DNTypeName('System.Web.UnvalidatedRequestValues')]
  DNUnvalidatedRequestValues = interface(DDN.mscorlib.DNObject)
  ['{793C2514-DE51-3683-8D77-9B6709F6AA59}']
  { getters & setters } 

    function get_Form: DDN.System.DNNameValueCollection;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_Cookies: DNHttpCookieCollection;
    function get_Files: DNHttpFileCollection;
    function get_RawUrl: string;
    function get_Path: string;
    function get_PathInfo: string;
    function get_Item(field: string): string;
    function get_Url: DDN.System.DNUri;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Form: DDN.System.DNNameValueCollection read get_Form;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Files: DNHttpFileCollection read get_Files;
    property RawUrl: string read get_RawUrl;
    property Path: string read get_Path;
    property PathInfo: string read get_PathInfo;
    property Item[field: string]: string read get_Item; default;
    property Url: DDN.System.DNUri read get_Url;
  end;

  TDNUnvalidatedRequestValues = class(TDNGenericImport<DNUnvalidatedRequestValuesClass, DNUnvalidatedRequestValues>) end;

  //-------------namespace: System.Web----------------
  DNUnvalidatedRequestValuesBaseClass = interface(DDN.mscorlib.DNObjectClass)
  ['{620E6041-F3F0-59E9-B370-941075190D21}']
  end;

  [DNTypeName('System.Web.UnvalidatedRequestValuesBase')]
  DNUnvalidatedRequestValuesBase = interface(DDN.mscorlib.DNObject)
  ['{31F021BD-9921-3057-B99C-73CD91992F8D}']
  { getters & setters } 

    function get_Form: DDN.System.DNNameValueCollection;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_Cookies: DNHttpCookieCollection;
    function get_Files: DNHttpFileCollectionBase;
    function get_RawUrl: string;
    function get_Path: string;
    function get_PathInfo: string;
    function get_Item(field: string): string;
    function get_Url: DDN.System.DNUri;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Form: DDN.System.DNNameValueCollection read get_Form;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Files: DNHttpFileCollectionBase read get_Files;
    property RawUrl: string read get_RawUrl;
    property Path: string read get_Path;
    property PathInfo: string read get_PathInfo;
    property Item[field: string]: string read get_Item; default;
    property Url: DDN.System.DNUri read get_Url;
  end;

  TDNUnvalidatedRequestValuesBase = class(TDNGenericImport<DNUnvalidatedRequestValuesBaseClass, DNUnvalidatedRequestValuesBase>) end;

  //-------------namespace: System.Web----------------
  DNUnvalidatedRequestValuesWrapperClass = interface(DNUnvalidatedRequestValuesBaseClass)
  ['{74D3BAB1-5947-53BB-AEFF-3614D8A50A4B}']
  { constructors } 

    {class} function init(requestValues: DNUnvalidatedRequestValues): DNUnvalidatedRequestValuesWrapper;

  end;

  [DNTypeName('System.Web.UnvalidatedRequestValuesWrapper')]
  DNUnvalidatedRequestValuesWrapper = interface(DNUnvalidatedRequestValuesBase)
  ['{2BCB890A-D148-33BF-829C-318FD830C749}']
  { getters & setters } 

    function get_Form: DDN.System.DNNameValueCollection;
    function get_QueryString: DDN.System.DNNameValueCollection;
    function get_Headers: DDN.System.DNNameValueCollection;
    function get_Cookies: DNHttpCookieCollection;
    function get_Files: DNHttpFileCollectionBase;
    function get_RawUrl: string;
    function get_Path: string;
    function get_PathInfo: string;
    function get_Item(field: string): string;
    function get_Url: DDN.System.DNUri;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Form: DDN.System.DNNameValueCollection read get_Form;
    property QueryString: DDN.System.DNNameValueCollection read get_QueryString;
    property Headers: DDN.System.DNNameValueCollection read get_Headers;
    property Cookies: DNHttpCookieCollection read get_Cookies;
    property Files: DNHttpFileCollectionBase read get_Files;
    property RawUrl: string read get_RawUrl;
    property Path: string read get_Path;
    property PathInfo: string read get_PathInfo;
    property Item[field: string]: string read get_Item; default;
    property Url: DDN.System.DNUri read get_Url;
  end;

  TDNUnvalidatedRequestValuesWrapper = class(TDNGenericImport<DNUnvalidatedRequestValuesWrapperClass, DNUnvalidatedRequestValuesWrapper>) end;

  //-------------namespace: System.Web.Util----------------
  DNHttpEncoderClass = interface(DDN.mscorlib.DNObjectClass)
  ['{36F0C7E4-C152-5E1D-AD6B-92E2640209BE}']
  { static getter & setter } 

    {class} function get_Current: DNHttpEncoder;
    {class} procedure set_Current(value: DNHttpEncoder);
    {class} function get_Default: DNHttpEncoder;

  { constructors } 

    {class} function init: DNHttpEncoder;

  { static propertys } 

    {class} property Current: DNHttpEncoder read get_Current write set_Current;
    {class} property &Default: DNHttpEncoder read get_Default;
  end;

  [DNTypeName('System.Web.Util.HttpEncoder')]
  DNHttpEncoder = interface(DDN.mscorlib.DNObject)
  ['{8F439276-0714-30DF-84BD-F6D403975107}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNHttpEncoder = class(TDNGenericImport<DNHttpEncoderClass, DNHttpEncoder>) end;

  //-------------namespace: System.Web.Security.AntiXss----------------
  DNAntiXssEncoderClass = interface(DNHttpEncoderClass)
  ['{179842C9-6877-5464-B79A-9DA8F3FC9A45}']
  { constructors } 

    {class} function init: DNAntiXssEncoder;

  { static methods } 

    {class} procedure MarkAsSafe(lowerCodeCharts: DNLowerCodeCharts; lowerMidCodeCharts: DNLowerMidCodeCharts; midCodeCharts: DNMidCodeCharts; upperMidCodeCharts: DNUpperMidCodeCharts; upperCodeCharts: DNUpperCodeCharts);
    {class} function CssEncode(input: string): string;
    {class} function HtmlEncode(input: string; useNamedEntities: Boolean): string;
    {class} function UrlEncode(input: string): string; overload;
    {class} function HtmlFormUrlEncode(input: string): string; overload;
    {class} function UrlEncode(input: string; codePage: Int32): string; overload;
    {class} function HtmlFormUrlEncode(input: string; codePage: Int32): string; overload;
    {class} function UrlEncode(input: string; inputEncoding: DDN.mscorlib.DNEncoding): string; overload;
    {class} function HtmlFormUrlEncode(input: string; inputEncoding: DDN.mscorlib.DNEncoding): string; overload;
    {class} function XmlEncode(input: string): string;
    {class} function XmlAttributeEncode(input: string): string;

  end;

  [DNTypeName('System.Web.Security.AntiXss.AntiXssEncoder')]
  DNAntiXssEncoder = interface(DNHttpEncoder)
  ['{D75393B9-23EB-3E72-A0E9-7169112D6E57}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNAntiXssEncoder = class(TDNGenericImport<DNAntiXssEncoderClass, DNAntiXssEncoder>) end;

  //-------------namespace: System.Web.Util----------------
  DNRequestValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1356774B-3EBD-5DA8-AE66-98DD3E78066C}']
  { static getter & setter } 

    {class} function get_Current: DNRequestValidator;
    {class} procedure set_Current(value: DNRequestValidator);

  { constructors } 

    {class} function init: DNRequestValidator;

  { static propertys } 

    {class} property Current: DNRequestValidator read get_Current write set_Current;
  end;

  [DNTypeName('System.Web.Util.RequestValidator')]
  DNRequestValidator = interface(DDN.mscorlib.DNObject)
  ['{A1FB68AB-0F99-3C3D-AA38-D8530338D063}']
  { methods } 

    function InvokeIsValidRequestString(context: DNHttpContext; value: string; requestValidationSource: DNRequestValidationSource; collectionKey: string; out validationFailureIndex: Int32): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNRequestValidator = class(TDNGenericImport<DNRequestValidatorClass, DNRequestValidator>) end;

  //-------------namespace: System.Web.Util----------------
  DNTransactionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{33FF00B5-CEB3-52C9-81FB-1B174ABF63BE}']
  { constructors } 

    {class} function init: DNTransactions;

  { static methods } 

    {class} procedure InvokeTransacted(callback: DNTransactedCallback; mode: DDN.System.EnterpriseServices.DNTransactionOption); overload;
    {class} procedure InvokeTransacted(callback: DNTransactedCallback; mode: DDN.System.EnterpriseServices.DNTransactionOption; out transactionAborted: Boolean); overload;

  end;

  [DNTypeName('System.Web.Util.Transactions')]
  DNTransactions = interface(DDN.mscorlib.DNObject)
  ['{0F6843FA-31BF-3040-A801-6D235E5229C5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNTransactions = class(TDNGenericImport<DNTransactionsClass, DNTransactions>) end;

  //-------------namespace: System.Web.Util----------------
  DNWorkItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D90AD43D-165F-5598-9C7E-4330F26DC04E}']
  { constructors } 

    {class} function init: DNWorkItem;

  { static methods } 

    {class} procedure Post(callback: DNWorkItemCallback);

  end;

  [DNTypeName('System.Web.Util.WorkItem')]
  DNWorkItem = interface(DDN.mscorlib.DNObject)
  ['{FAF3E68F-2F3E-32BB-BB5C-63D07CAF44A5}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNWorkItem = class(TDNGenericImport<DNWorkItemClass, DNWorkItem>) end;

  //-------------namespace: System.Web----------------
  DNVirtualPathUtilityClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E5C4127-281C-5718-AB00-578872FDDE53}']
  { static methods } 

    {class} function IsAbsolute(virtualPath: string): Boolean;
    {class} function IsAppRelative(virtualPath: string): Boolean;
    {class} function ToAppRelative(virtualPath: string): string; overload;
    {class} function ToAppRelative(virtualPath: string; applicationPath: string): string; overload;
    {class} function ToAbsolute(virtualPath: string): string; overload;
    {class} function ToAbsolute(virtualPath: string; applicationPath: string): string; overload;
    {class} function GetFileName(virtualPath: string): string;
    {class} function GetDirectory(virtualPath: string): string;
    {class} function GetExtension(virtualPath: string): string;
    {class} function AppendTrailingSlash(virtualPath: string): string;
    {class} function RemoveTrailingSlash(virtualPath: string): string;
    {class} function Combine(basePath: string; relativePath: string): string;
    {class} function MakeRelative(fromPath: string; toPath: string): string;

  end;

  [DNTypeName('System.Web.VirtualPathUtility')]
  DNVirtualPathUtility = interface(DDN.mscorlib.DNObject)
  ['{B1D89A32-B0CB-34E2-9DA6-6F110E71DDFF}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNVirtualPathUtility = class(TDNGenericImport<DNVirtualPathUtilityClass, DNVirtualPathUtility>) end;

  //-------------namespace: System.Web.WebSockets----------------
  DNAspNetWebSocketOptionsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{56A84818-D269-5433-8B31-3FBA3BF3D978}']
  { constructors } 

    {class} function init: DNAspNetWebSocketOptions;

  end;

  [DNTypeName('System.Web.WebSockets.AspNetWebSocketOptions')]
  DNAspNetWebSocketOptions = interface(DDN.mscorlib.DNObject)
  ['{A6AE3618-12D4-3F3F-827B-746AE424B9E2}']
  { getters & setters } 

    function get_RequireSameOrigin: Boolean;
    procedure set_RequireSameOrigin(value: Boolean);
    function get_SubProtocol: string;
    procedure set_SubProtocol(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property RequireSameOrigin: Boolean read get_RequireSameOrigin write set_RequireSameOrigin;
    property SubProtocol: string read get_SubProtocol write set_SubProtocol;
  end;

  TDNAspNetWebSocketOptions = class(TDNGenericImport<DNAspNetWebSocketOptionsClass, DNAspNetWebSocketOptions>) end;


implementation


initialization
  InternalTryLoadAssemblyModule('System.Web, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a');

finalization

end.
