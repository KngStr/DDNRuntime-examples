//----------------------------------------------------------------------------
//  System.Xml.dll: System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089
//----------------------------------------------------------------------------
//  The code is automatically generated by the GenCodeNET tool.
//----------------------------------------------------------------------------
//  .NET Framework: 4.0
//----------------------------------------------------------------------------
//  UnitName: DDN.System.Xml
//  Author: ying32
//----------------------------------------------------------------------------

unit DDN.System.Xml;

{$IFDEF FPC}
  {$mode delphi}//{$H+}
  {$modeswitch advancedrecords}
  {$modeswitch prefixedattributes} // Custom attributes feature，fpc3.2.2+
{$ENDIF}

interface

uses
  DDN.Runtime,
  DDN.mscorlib,
  DDN.System;

type

{ enums }

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定的输入或输出检查的量 <see cref="T:System.Xml.XmlReader" />
  ///  和 <see cref="T:System.Xml.XmlWriter" />
  ///  对象执行。
  ///</summary>
  [DNTypeName('System.Xml.ConformanceLevel')]
  DNConformanceLevel = type Integer;
  DNConformanceLevelHelper = record helper for DNConformanceLevel
  public const
    ///<summary><see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.Xml.XmlWriter" />
    ///  对象会自动检测是否文档级别或片段级别检查应执行，并执行相应的检查。
    ///  如果正在包装另一个 <see cref="T:System.Xml.XmlReader" />
    ///  或 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，外层对象不进行任何附加一致性检查。
    ///  一致性检查只针对基础对象。
    ///  请参阅 <see cref="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
    ///  和 <see cref="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
    ///  有关如何确定符合性级别的详细信息的属性。
    ///</summary>
    Auto = 0;
    ///<summary>
    ///  XML 数据是 well-formed XML fragment, ，如按 W3C 定义。
    ///</summary>
    Fragment = 1;
    ///<summary>
    ///  XML 数据符合格式正确的规则 XML 1.0 document, ，如按 W3C 定义。
    ///</summary>
    Document = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定用于处理 DTD 的选项。
  ///<see cref="T:System.Xml.DtdProcessing" />
  ///  枚举由 <see cref="T:System.Xml.XmlReaderSettings" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.DtdProcessing')]
  DNDtdProcessing = type Integer;
  DNDtdProcessingHelper = record helper for DNDtdProcessing
  public const
    ///<summary>
    ///  指定当遇到 DTD， <see cref="T:System.Xml.XmlException" />
    ///  会引发一条消息，表明 Dtd 被禁止。
    ///  这是默认行为。
    ///</summary>
    Prohibit = 0;
    ///<summary>
    ///  将导致 DOCTYPE 元素被忽略。
    ///  不进行 DTD 处理时发生。
    ///</summary>
    Ignore = 1;
    ///<summary>
    ///  用于分析 Dtd。
    ///</summary>
    Parse = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定如何 <see cref="T:System.Xml.XmlTextReader" />
  ///  或 <see cref="T:System.Xml.XmlValidatingReader" />
  ///  处理实体。
  ///</summary>
  [DNTypeName('System.Xml.EntityHandling')]
  DNEntityHandling = type Integer;
  DNEntityHandlingHelper = record helper for DNEntityHandling
  public const
    ///<summary>
    ///  展开所有实体，并返回展开的节点。
    ///</summary>
    ExpandEntities = 1;
    ///<summary>
    ///  扩展字符实体，并返回作为常规实体 <see cref="F:System.Xml.XmlNodeType.EntityReference" />
    ///  节点。
    ///</summary>
    ExpandCharEntities = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定的格式设置选项 <see cref="T:System.Xml.XmlTextWriter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Formatting')]
  DNFormatting = type Integer;
  DNFormattingHelper = record helper for DNFormatting
  public const
    ///<summary>
    ///  尚无特殊格式设置将应用。
    ///  这是默认设置。
    ///</summary>
    None = 0;
    ///<summary>
    ///  可能导致子元素根据缩进显示 <see cref="P:System.Xml.XmlTextWriter.Indentation" />
    ///  和 <see cref="P:System.Xml.XmlTextWriter.IndentChar" />
    ///  设置。
    ///</summary>
    Indented = 1;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定是否删除重复的命名空间中的声明 <see cref="T:System.Xml.XmlWriter" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.NamespaceHandling')]
  DNNamespaceHandling = type Integer;
  DNNamespaceHandlingHelper = record helper for DNNamespaceHandling
  public const
    ///<summary>
    ///  指定将不会删除重复的命名空间声明。
    ///</summary>
    Default_ = 0;
    ///<summary>
    ///  指定将移除重复的命名空间声明。
    ///  对于要删除的重复命名空间，前缀和命名空间必须匹配。
    ///</summary>
    OmitDuplicates = 1;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定如何处理换行符。
  ///</summary>
  [DNTypeName('System.Xml.NewLineHandling')]
  DNNewLineHandling = type Integer;
  DNNewLineHandlingHelper = record helper for DNNewLineHandling
  public const
    ///<summary>
    ///  若要在指定的字符匹配的新行字符将替换 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />
    ///  属性。
    ///</summary>
    Replace = 0;
    ///<summary>
    ///  新行字符被实体化。
    ///  此设置可保留的所有字符，当规范化读取输出 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    Entitize = 1;
    ///<summary>
    ///  新行字符保持不变。
    ///  输出是输入一样。
    ///</summary>
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定读取器的状态。
  ///</summary>
  [DNTypeName('System.Xml.ReadState')]
  DNReadState = type Integer;
  DNReadStateHelper = record helper for DNReadState
  public const
    ///<summary><see langword="Read" />
    ///  不调用方法。
    ///</summary>
    Initial = 0;
    ///<summary><see langword="Read" />
    ///  调用方法。
    ///  可以在读取器上调用其他方法。
    ///</summary>
    Interactive = 1;
    ///<summary>
    ///  将出现错误，以防止读取的操作继续进行。
    ///</summary>
    Error = 2;
    ///<summary>
    ///  已成功到达文件末尾。
    ///</summary>
    EndOfFile = 3;
    ///<summary><see cref="M:System.Xml.XmlReader.Close" />
    ///  调用方法。
    ///</summary>
    Closed = 4;
  end;


  //-------------namespace: System.Xml.Resolvers----------------
  ///<summary><see cref="T:System.Xml.Resolvers.XmlKnownDtds" />
  ///  枚举由 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
  ///  并定义哪些已知 Dtd， <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
  ///  识别。
  ///</summary>
  [DNTypeName('System.Xml.Resolvers.XmlKnownDtds')]
  DNXmlKnownDtds = type Integer;
  DNXmlKnownDtdsHelper = record helper for DNXmlKnownDtds
  public const
    ///<summary>
    ///  指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  将不识别任何预定义的 Dtd。
    ///</summary>
    None = 0;
    ///<summary>
    ///  指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  将识别 Dtd 和 XHTML 1.0 中定义的实体。
    ///</summary>
    Xhtml10 = 1;
    ///<summary>
    ///  指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  将识别 Dtd 和在 RSS 0.91 中定义的实体。
    ///</summary>
    Rss091 = 2;
    ///<summary>
    ///  指定 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  将识别当前支持的所有 Dtd。
    ///  这是默认行为。
    ///</summary>
    All = 65535;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  提供有关的验证模式的信息 <see langword="any" />
  ///  和 <see langword="anyAttribute" />
  ///  元素替换。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaContentProcessing')]
  DNXmlSchemaContentProcessing = type Integer;
  DNXmlSchemaContentProcessingHelper = record helper for DNXmlSchemaContentProcessing
  public const
    ///<summary>
    ///  不验证文档项目。
    ///</summary>
    None = 0;
    ///<summary>
    ///  文档项必须包含格式正确的 XML 且未通过架构验证。
    ///</summary>
    Skip = 1;
    ///<summary>
    ///  如果找到关联的架构，则将验证文档项。
    ///  否则，将不引发任何错误。
    ///</summary>
    Lax = 2;
    ///<summary>
    ///  架构处理器必须找到与要验证文档项的指定命名空间关联的架构。
    ///</summary>
    Strict_ = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  复杂类型的内容模型的枚举。
  ///  此项表示的架构验证信息集 (infoset) 中的内容。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaContentType')]
  DNXmlSchemaContentType = type Integer;
  DNXmlSchemaContentTypeHelper = record helper for DNXmlSchemaContentType
  public const
    ///<summary>
    ///  纯文本内容。
    ///</summary>
    TextOnly = 0;
    ///<summary>
    ///  空的内容。
    ///</summary>
    Empty = 1;
    ///<summary>
    ///  仅限元素的内容。
    ///</summary>
    ElementOnly = 2;
    ///<summary>
    ///  混合的内容。
    ///</summary>
    Mixed = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  指定类型的 W3C XML 架构数据类型不同。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaDatatypeVariety')]
  DNXmlSchemaDatatypeVariety = type Integer;
  DNXmlSchemaDatatypeVarietyHelper = record helper for DNXmlSchemaDatatypeVariety
  public const
    ///<summary>
    ///  W3C XML 架构原子类型。
    ///</summary>
    Atomic = 0;
    ///<summary>
    ///  W3C XML 架构列表类型。
    ///</summary>
    List = 1;
    ///<summary>
    ///  W3C XML 架构联合类型。
    ///</summary>
    Union = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  提供了阻止派生的不同方法。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaDerivationMethod')]
  DNXmlSchemaDerivationMethod = type Integer;
  DNXmlSchemaDerivationMethodHelper = record helper for DNXmlSchemaDerivationMethod
  public const
    ///<summary>
    ///  重写默认派生方法，以允许所有派生。
    ///</summary>
    Empty = 0;
    ///<summary>
    ///  指的是通过进行派生 <see langword="Substitution" />
    ///  。
    ///</summary>
    Substitution = 1;
    ///<summary>
    ///  指的是通过进行派生 <see langword="Extension" />
    ///  。
    ///</summary>
    Extension = 2;
    ///<summary>
    ///  指的是通过进行派生 <see langword="Restriction" />
    ///  。
    ///</summary>
    Restriction = 4;
    ///<summary>
    ///  指的是通过进行派生 <see langword="List" />
    ///  。
    ///</summary>
    List = 8;
    ///<summary>
    ///  指的是通过进行派生 <see langword="Union" />
    ///  。
    ///</summary>
    Union = 16;
    ///<summary><see langword="#all" />
    ///  。
    ///  是指所有派生方法。
    ///</summary>
    All = 255;
    ///<summary>
    ///  接受默认派生方法。
    ///</summary>
    None = 256;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  指示是否需要用命名空间前缀限定特性或元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaForm')]
  DNXmlSchemaForm = type Integer;
  DNXmlSchemaFormHelper = record helper for DNXmlSchemaForm
  public const
    ///<summary>
    ///  在架构中未指定元素和属性的窗体。
    ///</summary>
    None = 0;
    ///<summary>
    ///  必须用命名空间前缀限定元素和属性。
    ///</summary>
    Qualified = 1;
    ///<summary>
    ///  不需要用命名空间前缀限定元素和属性。
    ///</summary>
    Unqualified = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  会影响由推断的匹配项和类型信息 <see cref="T:System.Xml.Schema.XmlSchemaInference" />
  ///  类中的 XML 文档元素和属性。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaInference+InferenceOption')]
  DNXmlSchemaInference_InferenceOption = type Integer;
  DNXmlSchemaInference_InferenceOptionHelper = record helper for DNXmlSchemaInference_InferenceOption
  public const
    ///<summary>
    ///  指示应推导特定元素或属性的一个限制性更强的架构声明。
    ///</summary>
    Restricted = 0;
    ///<summary>
    ///  指示应推导特定元素或属性的一个限制性较弱的架构声明。
    ///</summary>
    Relaxed = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  如何使用该属性指示符。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaUse')]
  DNXmlSchemaUse = type Integer;
  DNXmlSchemaUseHelper = record helper for DNXmlSchemaUse
  public const
    ///<summary>
    ///  使用未指定的属性。
    ///</summary>
    None = 0;
    ///<summary>
    ///  属性是可选的。
    ///</summary>
    Optional = 1;
    ///<summary>
    ///  不能使用属性。
    ///</summary>
    Prohibited = 2;
    ///<summary>
    ///  属性必须出现一次。
    ///</summary>
    Required = 3;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  指定使用的架构验证选项 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
  ///  和 <see cref="T:System.Xml.XmlReader" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationFlags')]
  DNXmlSchemaValidationFlags = type Integer;
  DNXmlSchemaValidationFlagsHelper = record helper for DNXmlSchemaValidationFlags
  public const
    ///<summary>
    ///  不能处理标识约束、 内联架构、 架构位置提示或报告架构验证警告。
    ///</summary>
    None = 0;
    ///<summary>
    ///  在验证期间遇到进程内联架构。
    ///</summary>
    ProcessInlineSchema = 1;
    ///<summary>
    ///  处理架构位置提示 (xsi:schemaLocation, ，xsi:noNamespaceSchemaLocation) 在验证期间遇到。
    ///</summary>
    ProcessSchemaLocation = 2;
    ///<summary>
    ///  报告在验证期间遇到的架构验证警告。
    ///</summary>
    ReportValidationWarnings = 4;
    ///<summary>
    ///  处理标识约束 (xs:ID, ，xs:IDREF, ，xs:key, ，xs:keyref, ，xs:unique) 在验证期间遇到。
    ///</summary>
    ProcessIdentityConstraints = 8;
    ///<summary>
    ///  允许将 xml: * 属性即使它们未定义的架构中。
    ///  属性将基于其数据类型验证。
    ///</summary>
    AllowXmlAttributes = 16;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  表示由验证 XML 项的有效性 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaValidity')]
  DNXmlSchemaValidity = type Integer;
  DNXmlSchemaValidityHelper = record helper for DNXmlSchemaValidity
  public const
    ///<summary>
    ///  XML 项的有效性未知。
    ///</summary>
    NotKnown = 0;
    ///<summary>
    ///  XML 项才有效。
    ///</summary>
    Valid = 1;
    ///<summary>
    ///  XML 项无效。
    ///</summary>
    Invalid = 2;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  表示验证事件的严重性。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSeverityType')]
  DNXmlSeverityType = type Integer;
  DNXmlSeverityTypeHelper = record helper for DNXmlSeverityType
  public const
    ///<summary>
    ///  指示在验证实例文档时出现验证错误。
    ///  这适用于文档类型定义 (Dtd) 和 XML 架构定义语言 (XSD) 架构。
    ///  World Wide Web 联合会 (W3C) 有效性约束被视为错误。
    ///  如果尚未创建任何验证事件处理程序，错误将引发异常。
    ///</summary>
    Error = 0;
    ///<summary>
    ///  表示验证事件发生，不是一个错误。
    ///  在没有验证特定元素或属性对没有 DTD 或 XML 架构时，通常会发出警告。
    ///  与错误不同，警告确实引发了异常，如果没有验证事件处理程序。
    ///</summary>
    Warning = 1;
  end;


  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  表示 W3C XML 架构定义语言 (XSD) 架构类型。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlTypeCode')]
  DNXmlTypeCode = type Integer;
  DNXmlTypeCodeHelper = record helper for DNXmlTypeCode
  public const
    ///<summary>
    ///  没有类型信息。
    ///</summary>
    None = 0;
    ///<summary>
    ///  例如，节点或原子值项。
    ///</summary>
    Item = 1;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Node = 2;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Document = 3;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Element = 4;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Attribute = 5;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Namespace = 6;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    ProcessingInstruction = 7;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Comment = 8;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    Text = 9;
    ///<summary>
    ///  联合的任何原子值。
    ///</summary>
    AnyAtomicType = 10;
    ///<summary>
    ///  非类型化的原子值。
    ///</summary>
    UntypedAtomic = 11;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:string" />
    ///  类型。
    ///</summary>
    String_ = 12;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:boolean" />
    ///  类型。
    ///</summary>
    Boolean = 13;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:decimal" />
    ///  类型。
    ///</summary>
    Decimal = 14;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:float" />
    ///  类型。
    ///</summary>
    Float = 15;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:double" />
    ///  类型。
    ///</summary>
    Double = 16;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:Duration" />
    ///  类型。
    ///</summary>
    Duration = 17;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:dateTime" />
    ///  类型。
    ///</summary>
    DateTime = 18;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:time" />
    ///  类型。
    ///</summary>
    Time = 19;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:date" />
    ///  类型。
    ///</summary>
    Date = 20;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:gYearMonth" />
    ///  类型。
    ///</summary>
    GYearMonth = 21;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:gYear" />
    ///  类型。
    ///</summary>
    GYear = 22;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:gMonthDay" />
    ///  类型。
    ///</summary>
    GMonthDay = 23;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:gDay" />
    ///  类型。
    ///</summary>
    GDay = 24;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:gMonth" />
    ///  类型。
    ///</summary>
    GMonth = 25;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:hexBinary" />
    ///  类型。
    ///</summary>
    HexBinary = 26;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:base64Binary" />
    ///  类型。
    ///</summary>
    Base64Binary = 27;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:anyURI" />
    ///  类型。
    ///</summary>
    AnyUri = 28;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:QName" />
    ///  类型。
    ///</summary>
    QName = 29;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:NOTATION" />
    ///  类型。
    ///</summary>
    Notation = 30;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:normalizedString" />
    ///  类型。
    ///</summary>
    NormalizedString = 31;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:token" />
    ///  类型。
    ///</summary>
    Token = 32;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:language" />
    ///  类型。
    ///</summary>
    Language = 33;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:NMTOKEN" />
    ///  类型。
    ///</summary>
    NmToken = 34;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:Name" />
    ///  类型。
    ///</summary>
    Name = 35;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:NCName" />
    ///  类型。
    ///</summary>
    NCName = 36;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:ID" />
    ///  类型。
    ///</summary>
    Id = 37;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:IDREF" />
    ///  类型。
    ///</summary>
    Idref = 38;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:ENTITY" />
    ///  类型。
    ///</summary>
    Entity = 39;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:integer" />
    ///  类型。
    ///</summary>
    Integer = 40;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:nonPositiveInteger" />
    ///  类型。
    ///</summary>
    NonPositiveInteger = 41;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:negativeInteger" />
    ///  类型。
    ///</summary>
    NegativeInteger = 42;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:long" />
    ///  类型。
    ///</summary>
    Long = 43;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:int" />
    ///  类型。
    ///</summary>
    Int = 44;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:short" />
    ///  类型。
    ///</summary>
    Short = 45;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:byte" />
    ///  类型。
    ///</summary>
    Byte = 46;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:nonNegativeInteger" />
    ///  类型。
    ///</summary>
    NonNegativeInteger = 47;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:unsignedLong" />
    ///  类型。
    ///</summary>
    UnsignedLong = 48;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:unsignedInt" />
    ///  类型。
    ///</summary>
    UnsignedInt = 49;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:unsignedShort" />
    ///  类型。
    ///</summary>
    UnsignedShort = 50;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:unsignedByte" />
    ///  类型。
    ///</summary>
    UnsignedByte = 51;
    ///<summary>
    ///  W3C XML 架构 <see langword="xs:positiveInteger" />
    ///  类型。
    ///</summary>
    PositiveInteger = 52;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    YearMonthDuration = 53;
    ///<summary>
    ///  此值支持.NET Framework 基础结构，不宜在代码中直接使用。
    ///</summary>
    DayTimeDuration = 54;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  ///<summary>
  ///  指定在生成用于 XML Web services 的 .NET Framework 类型时使用的各种选项。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.CodeGenerationOptions')]
  DNCodeGenerationOptions = type Integer;
  DNCodeGenerationOptionsHelper = record helper for DNCodeGenerationOptions
  public const
    ///<summary>
    ///  由字段表示基元类型并由 <see cref="N:System" />
    ///  命名空间类型表示基元类型。
    ///</summary>
    None = 0;
    ///<summary>
    ///  由属性表示基元类型。
    ///</summary>
    GenerateProperties = 1;
    ///<summary>
    ///  创建异步调用 Web 方法的事件。
    ///</summary>
    GenerateNewAsync = 2;
    ///<summary>
    ///  创建异步调用 Web 方法的 Begin 和 End 方法。
    ///</summary>
    GenerateOldAsync = 4;
    ///<summary>
    ///  按 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  、<see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    ///  和 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  特性的 <see langword="Order" />
    ///  属性所指定的方式显式生成排序序列化代码。
    ///</summary>
    GenerateOrder = 8;
    ///<summary>
    ///  启用数据绑定。
    ///</summary>
    EnableDataBinding = 16;
  end;


  //-------------namespace: System.Xml.Serialization----------------
  ///<summary>
  ///  指定映射是读取和 / 或写入。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlMappingAccess')]
  DNXmlMappingAccess = type Integer;
  DNXmlMappingAccessHelper = record helper for DNXmlMappingAccess
  public const
    ///<summary>
    ///  读取和写入方法生成。
    ///</summary>
    None = 0;
    ///<summary>
    ///  生成读取方法。
    ///</summary>
    Read = 1;
    ///<summary>
    ///  编写生成方法。
    ///</summary>
    Write = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定要执行的验证的类型。
  ///</summary>
  [DNTypeName('System.Xml.ValidationType')]
  DNValidationType = type Integer;
  DNValidationTypeHelper = record helper for DNValidationType
  public const
    ///<summary>
    ///  未执行任何验证。
    ///  此设置创建符合 XML 1.0 的非验证分析程序。
    ///</summary>
    None = 0;
    ///<summary>
    ///  验证是否找到 DTD 或架构信息。
    ///</summary>
    Auto = 1;
    ///<summary>
    ///  根据 DTD 进行验证。
    ///</summary>
    DTD = 2;
    ///<summary>
    ///  根据 XML 数据简化 (XDR) 架构（包括内联 XDR 架构）进行验证。
    ///  XDR 架构都使用可以识别<see langword="x-schema" />
    ///  命名空间前缀或<see cref="P:System.Xml.XmlValidatingReader.Schemas" />
    ///  属性。
    ///</summary>
    XDR = 3;
    ///<summary>
    ///  根据 XML 架构定义语言 (XSD) 架构（包括内联 XML 架构）进行验证。
    ///  XML 架构的命名空间 Uri 与关联通过使用<see langword="schemaLocation" />
    ///  特性或提供<see langword="Schemas" />
    ///  属性。
    ///</summary>
    Schema = 4;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定如何处理空白区域。
  ///</summary>
  [DNTypeName('System.Xml.WhitespaceHandling')]
  DNWhitespaceHandling = type Integer;
  DNWhitespaceHandlingHelper = record helper for DNWhitespaceHandling
  public const
    ///<summary>
    ///  返回 <see langword="Whitespace" />
    ///  和 <see langword="SignificantWhitespace" />
    ///  节点。
    ///  这是默认设置。
    ///</summary>
    All = 0;
    ///<summary>
    ///  返回 <see langword="SignificantWhitespace" />
    ///  仅限节点。
    ///</summary>
    Significant = 1;
    ///<summary>
    ///  不返回任何 <see langword="Whitespace" />
    ///  和 no <see langword="SignificantWhitespace" />
    ///  节点。
    ///</summary>
    None = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定 <see cref="T:System.Xml.XmlWriter" />
  ///  的状态。
  ///</summary>
  [DNTypeName('System.Xml.WriteState')]
  DNWriteState = type Integer;
  DNWriteStateHelper = record helper for DNWriteState
  public const
    ///<summary>
    ///  指示尚未调用写入方法。
    ///</summary>
    Start = 0;
    ///<summary>
    ///  指示正在写入序言中。
    ///</summary>
    Prolog = 1;
    ///<summary>
    ///  指示正在写入元素开始标记。
    ///</summary>
    Element = 2;
    ///<summary>
    ///  指示正在写入属性值。
    ///</summary>
    Attribute = 3;
    ///<summary>
    ///  指示正在写入元素内容。
    ///</summary>
    Content = 4;
    ///<summary>
    ///  指示 <see cref="M:System.Xml.XmlWriter.Close" />
    ///  调用方法。
    ///</summary>
    Closed = 5;
    ///<summary>
    ///  已引发异常，这已离开 <see cref="T:System.Xml.XmlWriter" />
    ///  处于无效状态。
    ///  您可以调用 <see cref="M:System.Xml.XmlWriter.Close" />
    ///  方法将 <see cref="T:System.Xml.XmlWriter" />
    ///  中 <see cref="F:System.Xml.WriteState.Closed" />
    ///  状态。
    ///  任何其他 <see cref="T:System.Xml.XmlWriter" />
    ///  方法调用都将导致 <see cref="T:System.InvalidOperationException" />
    ///  。
    ///</summary>
    Error = 6;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定如何处理字符串之间进行转换时的时间值和 <see cref="T:System.DateTime" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.XmlDateTimeSerializationMode')]
  DNXmlDateTimeSerializationMode = type Integer;
  DNXmlDateTimeSerializationModeHelper = record helper for DNXmlDateTimeSerializationMode
  public const
    ///<summary>
    ///  作为本地时间进行处理。
    ///  如果 <see cref="T:System.DateTime" />
    ///  对象都表示协调世界时 (UTC)，它将转换为本地时间。
    ///</summary>
    Local = 0;
    ///<summary>
    ///  将视为 UTC。
    ///  如果 <see cref="T:System.DateTime" />
    ///  对象都表示本地时间，它将转换为 UTC。
    ///</summary>
    Utc = 1;
    ///<summary>
    ///  如果将视为本地时间 <see cref="T:System.DateTime" />
    ///  要转换为一个字符串。
    ///</summary>
    Unspecified = 2;
    ///<summary>
    ///  在转换时，应保留时区信息。
    ///</summary>
    RoundtripKind = 3;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  定义命名空间范围。
  ///</summary>
  [DNTypeName('System.Xml.XmlNamespaceScope')]
  DNXmlNamespaceScope = type Integer;
  DNXmlNamespaceScopeHelper = record helper for DNXmlNamespaceScope
  public const
    ///<summary>
    ///  在当前节点的范围内定义的所有命名空间。
    ///  这包括总是隐式声明的 xmlns: xml 命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    All = 0;
    ///<summary>
    ///  在当前节点，包括总是隐式声明 xmlns: xml 命名空间范围内定义的所有命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    ExcludeXml = 1;
    ///<summary>
    ///  在当前节点本地定义的所有命名空间。
    ///</summary>
    Local = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定节点更改的类型。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeChangedAction')]
  DNXmlNodeChangedAction = type Integer;
  DNXmlNodeChangedActionHelper = record helper for DNXmlNodeChangedAction
  public const
    ///<summary>
    ///  要在树中插入一个节点。
    ///</summary>
    Insert = 0;
    ///<summary>
    ///  正在从树中删除一个节点。
    ///</summary>
    Remove = 1;
    ///<summary>
    ///  正在更改节点值。
    ///</summary>
    Change = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  描述某节点相对于第二个节点的文档顺序。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeOrder')]
  DNXmlNodeOrder = type Integer;
  DNXmlNodeOrderHelper = record helper for DNXmlNodeOrder
  public const
    ///<summary>
    ///  此导航器的当前节点是提供导航器在当前节点之前。
    ///</summary>
    Before = 0;
    ///<summary>
    ///  此导航器的当前节点是提供导航器的当前节点之后。
    ///</summary>
    After = 1;
    ///<summary>
    ///  两种导航器位于同一个节点上。
    ///</summary>
    Same = 2;
    ///<summary>
    ///  按文档顺序，相对于彼此，无法确定节点位置。
    ///  如果两个节点驻留在不同的树中，也可能发生。
    ///</summary>
    Unknown = 3;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定节点的类型。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeType')]
  DNXmlNodeType = type Integer;
  DNXmlNodeTypeHelper = record helper for DNXmlNodeType
  public const
    ///<summary>
    ///  这由返回 <see cref="T:System.Xml.XmlReader" />
    ///  如果 <see langword="Read" />
    ///  不调用方法。
    ///</summary>
    None = 0;
    ///<summary>
    ///  元素 (例如， &lt;item&gt; )。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  属性 (例如， id='123' )。
    ///</summary>
    Attribute = 2;
    ///<summary>
    ///  节点的文本内容。
    ///</summary>
    Text = 3;
    ///<summary>
    ///  CDATA 节 (例如， &lt;![CDATA[my escaped text]]&gt; )。
    ///</summary>
    CDATA = 4;
    ///<summary>
    ///  对实体的引用 (例如， &amp;num; )。
    ///</summary>
    EntityReference = 5;
    ///<summary>
    ///  实体声明 (例如， &lt;!ENTITY...&gt; )。
    ///</summary>
    Entity = 6;
    ///<summary>
    ///  处理指令 (例如， &lt;?pi test?&gt; )。
    ///</summary>
    ProcessingInstruction = 7;
    ///<summary>
    ///  注释 (例如， &lt;!-- my comment --&gt; )。
    ///</summary>
    Comment = 8;
    ///<summary>
    ///  文档提供的对象，作为文档树的根访问整个 XML 文档。
    ///</summary>
    Document = 9;
    ///<summary>
    ///  文档类型声明中，由以下标记 (例如， &lt;!DOCTYPE...&gt; )。
    ///</summary>
    DocumentType = 10;
    ///<summary>
    ///  将文档片段。
    ///</summary>
    DocumentFragment = 11;
    ///<summary>
    ///  在文档类型声明中的表示法 (例如， &lt;!NOTATION...&gt; )。
    ///</summary>
    Notation = 12;
    ///<summary>
    ///  标记之间的空白区域。
    ///</summary>
    Whitespace = 13;
    ///<summary>
    ///  在混合内容模型或内的空格中标记之间空白区域 xml:space="preserve" 作用域。
    ///</summary>
    SignificantWhitespace = 14;
    ///<summary>
    ///  结束元素标记 (例如， &lt;/item&gt; )。
    ///</summary>
    EndElement = 15;
    ///<summary>
    ///  返回当 <see langword="XmlReader" />
    ///  到达实体替换为调用的结果末尾 <see cref="M:System.Xml.XmlReader.ResolveEntity" />
    ///  。
    ///</summary>
    EndEntity = 16;
    ///<summary>
    ///  XML 声明 (例如， &lt;?xml version='1.0'?&gt; )。
    ///</summary>
    XmlDeclaration = 17;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定用于序列化的方法 <see cref="T:System.Xml.XmlWriter" />
  ///  输出。
  ///</summary>
  [DNTypeName('System.Xml.XmlOutputMethod')]
  DNXmlOutputMethod = type Integer;
  DNXmlOutputMethodHelper = record helper for DNXmlOutputMethod
  public const
    ///<summary>
    ///  根据 XML 1.0 规则进行序列化。
    ///</summary>
    Xml = 0;
    ///<summary>
    ///  根据指定的 XSLT 的 HTML 规则进行序列化。
    ///</summary>
    Html = 1;
    ///<summary>
    ///  将序列化为文本仅块。
    ///</summary>
    Text = 2;
    ///<summary>
    ///  使用 XSLT 规则之间进行选择 <see cref="F:System.Xml.XmlOutputMethod.Xml" />
    ///  和 <see cref="F:System.Xml.XmlOutputMethod.Html" />
    ///  输出方法在运行时。
    ///</summary>
    AutoDetect = 3;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  指定当前 <see langword="xml:space" />
  ///  作用域。
  ///</summary>
  [DNTypeName('System.Xml.XmlSpace')]
  DNXmlSpace = type Integer;
  DNXmlSpaceHelper = record helper for DNXmlSpace
  public const
    ///<summary>
    ///  否 <see langword="xml:space" />
    ///  作用域。
    ///</summary>
    None = 0;
    ///<summary><see langword="xml:space" />
    ///  范围等于 <see langword="default" />
    ///  。
    ///</summary>
    Default_ = 1;
    ///<summary><see langword="xml:space" />
    ///  范围等于 <see langword="preserve" />
    ///  。
    ///</summary>
    Preserve = 2;
  end;


  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  表示字符串的 XML 类型。
  ///  这允许要被视为一个特定的 XML 类型，例如 CDATA 部分类型的字符串。
  ///</summary>
  [DNTypeName('System.Xml.XmlTokenizedType')]
  DNXmlTokenizedType = type Integer;
  DNXmlTokenizedTypeHelper = record helper for DNXmlTokenizedType
  public const
    ///<summary>
    ///  CDATA 类型。
    ///</summary>
    CDATA = 0;
    ///<summary>
    ///  ID 类型。
    ///</summary>
    ID = 1;
    ///<summary>
    ///  IDREF 类型。
    ///</summary>
    IDREF = 2;
    ///<summary>
    ///  IDREFS 类型。
    ///</summary>
    IDREFS = 3;
    ///<summary>
    ///  实体类型。
    ///</summary>
    ENTITY = 4;
    ///<summary>
    ///  实体类型。
    ///</summary>
    ENTITIES = 5;
    ///<summary>
    ///  NMTOKEN 类型。
    ///</summary>
    NMTOKEN = 6;
    ///<summary>
    ///  NMTOKENS 类型。
    ///</summary>
    NMTOKENS = 7;
    ///<summary>
    ///  NOTATION 类型。
    ///</summary>
    NOTATION = 8;
    ///<summary>
    ///  枚举类型。
    ///</summary>
    ENUMERATION = 9;
    ///<summary>
    ///  QName 类型。
    ///</summary>
    QName = 10;
    ///<summary>
    ///  NCName 类型。
    ///</summary>
    NCName = 11;
    ///<summary>
    ///  无类型。
    ///</summary>
    None = 12;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  指定大写字母和小写字母的排序顺序。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XmlCaseOrder')]
  DNXmlCaseOrder = type Integer;
  DNXmlCaseOrderHelper = record helper for DNXmlCaseOrder
  public const
    ///<summary>
    ///  忽略大小写。
    ///</summary>
    None = 0;
    ///<summary>
    ///  大写字母排在小写字母之前。
    ///</summary>
    UpperFirst = 1;
    ///<summary>
    ///  小写字母进行排序之前大写首字母。
    ///</summary>
    LowerFirst = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  指定用于确定排序顺序的数据类型。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XmlDataType')]
  DNXmlDataType = type Integer;
  DNXmlDataTypeHelper = record helper for DNXmlDataType
  public const
    ///<summary>
    ///  值的按字母顺序排序。
    ///</summary>
    Text = 1;
    ///<summary>
    ///  值的按数字顺序排序。
    ///</summary>
    Number = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  指定排序顺序。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XmlSortOrder')]
  DNXmlSortOrder = type Integer;
  DNXmlSortOrderHelper = record helper for DNXmlSortOrder
  public const
    ///<summary>
    ///  节点按升序排序。
    ///  例如，如果数字 1、 2、 3 和 4 按升序排序，它们显示为 1,2,3,4。
    ///</summary>
    Ascending = 1;
    ///<summary>
    ///  节点按降序排序。
    ///  例如，如果数字 1、 2、 3 和 4 按降序排序，它们显示为 4,3,2,1。
    ///</summary>
    Descending = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  定义命名空间范围。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNamespaceScope')]
  DNXPathNamespaceScope = type Integer;
  DNXPathNamespaceScopeHelper = record helper for DNXPathNamespaceScope
  public const
    ///<summary>
    ///  返回当前节点的作用域中定义的所有命名空间。
    ///  这包括 xmlns:xml 总是隐式声明的命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    All = 0;
    ///<summary>
    ///  返回在当前节点范围内定义的所有命名空间不包括 xmlns:xml 命名空间。
    ///  xmlns:xml 总是隐式声明命名空间。
    ///  未定义的顺序返回的命名空间。
    ///</summary>
    ExcludeXml = 1;
    ///<summary>
    ///  返回在当前节点本地定义的所有命名空间。
    ///</summary>
    Local = 2;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  定义可从返回的 XPath 节点类型 <see cref="T:System.Xml.XPath.XPathNavigator" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNodeType')]
  DNXPathNodeType = type Integer;
  DNXPathNodeTypeHelper = record helper for DNXPathNodeType
  public const
    ///<summary>
    ///  XML 文档或节点树的根节点。
    ///</summary>
    Root = 0;
    ///<summary>
    ///  一个元素，如 &lt;element&gt;。
    ///</summary>
    Element = 1;
    ///<summary>
    ///  一个属性，如 id='123'。
    ///</summary>
    Attribute = 2;
    ///<summary>
    ///  命名空间，如 xmlns="namespace"。
    ///</summary>
    Namespace = 3;
    ///<summary>
    ///  节点的文本内容。
    ///  等效于文档对象模型 (DOM) 的文本和 CDATA 节点类型。
    ///  包含至少一个字符。
    ///</summary>
    Text = 4;
    ///<summary>
    ///  具有空白字符的节点和 xml:space 设置为 preserve。
    ///</summary>
    SignificantWhitespace = 5;
    ///<summary>
    ///  与空白字符和任何有意义的空白节点。
    ///  空白字符 #x20, ，#x9, ，#xD, ，或 #xA。
    ///</summary>
    Whitespace = 6;
    ///<summary>
    ///  一个处理指令，如 &lt;?pi test?&gt;。
    ///  这不包括 XML 声明，看不到 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  类。
    ///</summary>
    ProcessingInstruction = 7;
    ///<summary>
    ///  一个注释，如 &lt;!-- my comment --&gt;
    ///</summary>
    Comment = 8;
    ///<summary>
    ///  任一 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  节点类型。
    ///</summary>
    All = 9;
  end;


  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  指定的 XPath 表达式的返回类型。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathResultType')]
  DNXPathResultType = type Integer;
  DNXPathResultTypeHelper = record helper for DNXPathResultType
  public const
    ///<summary>
    ///  一个数值。
    ///</summary>
    Number = 0;
    ///<summary>
    ///  一个 <see cref="T:System.String" />
    ///  值。
    ///</summary>
    String_ = 1;
    ///<summary>
    ///  一个树片段。
    ///</summary>
    Navigator = 1;
    ///<summary>
    ///  一个 <see cref="T:System.Boolean" />
    ///<see langword="true" />
    ///  或 <see langword="false" />
    ///  值。
    ///</summary>
    Boolean = 2;
    ///<summary>
    ///  一个节点集合。
    ///</summary>
    NodeSet = 3;
    ///<summary>
    ///  任何 XPath 节点类型。
    ///</summary>
    Any = 5;
    ///<summary>
    ///  表达式计算结果不正确的 XPath 类型。
    ///</summary>
    Error = 6;
  end;




type


{ declares }

  DNIApplicationResourceStreamResolver = interface; // type: System.Xml.IApplicationResourceStreamResolver, namespace: System.Xml
  DNIHasXmlNode = interface; // type: System.Xml.IHasXmlNode, namespace: System.Xml
  DNIXmlLineInfo = interface; // type: System.Xml.IXmlLineInfo, namespace: System.Xml
  DNIXmlNamespaceResolver = interface; // type: System.Xml.IXmlNamespaceResolver, namespace: System.Xml
  DNIXmlSchemaInfo = interface; // type: System.Xml.Schema.IXmlSchemaInfo, namespace: System.Xml.Schema
  DNIXmlSerializable = interface; // type: System.Xml.Serialization.IXmlSerializable, namespace: System.Xml.Serialization
  DNIXmlTextParser = interface; // type: System.Xml.Serialization.IXmlTextParser, namespace: System.Xml.Serialization
  DNIXPathNavigable = interface; // type: System.Xml.XPath.IXPathNavigable, namespace: System.Xml.XPath
  DNIXsltContextFunction = interface; // type: System.Xml.Xsl.IXsltContextFunction, namespace: System.Xml.Xsl
  DNIXsltContextVariable = interface; // type: System.Xml.Xsl.IXsltContextVariable, namespace: System.Xml.Xsl
  DNSoapAttributeAttribute = interface; // type: System.Xml.Serialization.SoapAttributeAttribute, namespace: System.Xml.Serialization
  DNSoapElementAttribute = interface; // type: System.Xml.Serialization.SoapElementAttribute, namespace: System.Xml.Serialization
  DNSoapEnumAttribute = interface; // type: System.Xml.Serialization.SoapEnumAttribute, namespace: System.Xml.Serialization
  DNSoapIgnoreAttribute = interface; // type: System.Xml.Serialization.SoapIgnoreAttribute, namespace: System.Xml.Serialization
  DNSoapIncludeAttribute = interface; // type: System.Xml.Serialization.SoapIncludeAttribute, namespace: System.Xml.Serialization
  DNSoapTypeAttribute = interface; // type: System.Xml.Serialization.SoapTypeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAnyAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlAnyElementAttribute = interface; // type: System.Xml.Serialization.XmlAnyElementAttribute, namespace: System.Xml.Serialization
  DNXmlArrayAttribute = interface; // type: System.Xml.Serialization.XmlArrayAttribute, namespace: System.Xml.Serialization
  DNXmlArrayItemAttribute = interface; // type: System.Xml.Serialization.XmlArrayItemAttribute, namespace: System.Xml.Serialization
  DNXmlAttributeAttribute = interface; // type: System.Xml.Serialization.XmlAttributeAttribute, namespace: System.Xml.Serialization
  DNXmlChoiceIdentifierAttribute = interface; // type: System.Xml.Serialization.XmlChoiceIdentifierAttribute, namespace: System.Xml.Serialization
  DNXmlElementAttribute = interface; // type: System.Xml.Serialization.XmlElementAttribute, namespace: System.Xml.Serialization
  DNXmlEnumAttribute = interface; // type: System.Xml.Serialization.XmlEnumAttribute, namespace: System.Xml.Serialization
  DNXmlIgnoreAttribute = interface; // type: System.Xml.Serialization.XmlIgnoreAttribute, namespace: System.Xml.Serialization
  DNXmlIncludeAttribute = interface; // type: System.Xml.Serialization.XmlIncludeAttribute, namespace: System.Xml.Serialization
  DNXmlNamespaceDeclarationsAttribute = interface; // type: System.Xml.Serialization.XmlNamespaceDeclarationsAttribute, namespace: System.Xml.Serialization
  DNXmlRootAttribute = interface; // type: System.Xml.Serialization.XmlRootAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaProviderAttribute = interface; // type: System.Xml.Serialization.XmlSchemaProviderAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerAssemblyAttribute = interface; // type: System.Xml.Serialization.XmlSerializerAssemblyAttribute, namespace: System.Xml.Serialization
  DNXmlSerializerVersionAttribute = interface; // type: System.Xml.Serialization.XmlSerializerVersionAttribute, namespace: System.Xml.Serialization
  DNXmlTextAttribute = interface; // type: System.Xml.Serialization.XmlTextAttribute, namespace: System.Xml.Serialization
  DNXmlTypeAttribute = interface; // type: System.Xml.Serialization.XmlTypeAttribute, namespace: System.Xml.Serialization
  DNXmlSchemaObjectCollection = interface; // type: System.Xml.Schema.XmlSchemaObjectCollection, namespace: System.Xml.Schema
  DNSchemaImporterExtensionCollection = interface; // type: System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection, namespace: System.Xml.Serialization.Advanced
  DNXmlAnyElementAttributes = interface; // type: System.Xml.Serialization.XmlAnyElementAttributes, namespace: System.Xml.Serialization
  DNXmlArrayItemAttributes = interface; // type: System.Xml.Serialization.XmlArrayItemAttributes, namespace: System.Xml.Serialization
  DNXmlElementAttributes = interface; // type: System.Xml.Serialization.XmlElementAttributes, namespace: System.Xml.Serialization
  DNXmlSchemas = interface; // type: System.Xml.Serialization.XmlSchemas, namespace: System.Xml.Serialization
  DNValidationEventArgs = interface; // type: System.Xml.Schema.ValidationEventArgs, namespace: System.Xml.Schema
  DNUnreferencedObjectEventArgs = interface; // type: System.Xml.Serialization.UnreferencedObjectEventArgs, namespace: System.Xml.Serialization
  DNXmlAttributeEventArgs = interface; // type: System.Xml.Serialization.XmlAttributeEventArgs, namespace: System.Xml.Serialization
  DNXmlElementEventArgs = interface; // type: System.Xml.Serialization.XmlElementEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeEventArgs = interface; // type: System.Xml.Serialization.XmlNodeEventArgs, namespace: System.Xml.Serialization
  DNXmlNodeChangedEventArgs = interface; // type: System.Xml.XmlNodeChangedEventArgs, namespace: System.Xml
  DNXsltMessageEncounteredEventArgs = interface; // type: System.Xml.Xsl.XsltMessageEncounteredEventArgs, namespace: System.Xml.Xsl
  DNXmlSchemaException = interface; // type: System.Xml.Schema.XmlSchemaException, namespace: System.Xml.Schema
  DNXmlSchemaInferenceException = interface; // type: System.Xml.Schema.XmlSchemaInferenceException, namespace: System.Xml.Schema
  DNXmlSchemaValidationException = interface; // type: System.Xml.Schema.XmlSchemaValidationException, namespace: System.Xml.Schema
  DNXmlException = interface; // type: System.Xml.XmlException, namespace: System.Xml
  DNXPathException = interface; // type: System.Xml.XPath.XPathException, namespace: System.Xml.XPath
  DNXsltException = interface; // type: System.Xml.Xsl.XsltException, namespace: System.Xml.Xsl
  DNXsltCompileException = interface; // type: System.Xml.Xsl.XsltCompileException, namespace: System.Xml.Xsl
  DNXmlDeserializationEvents = interface; // type: System.Xml.Serialization.XmlDeserializationEvents, namespace: System.Xml.Serialization
  DNXmlSchemaCollection = interface; // type: System.Xml.Schema.XmlSchemaCollection, namespace: System.Xml.Schema
  DNXmlSchemaCollectionEnumerator = interface; // type: System.Xml.Schema.XmlSchemaCollectionEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaCompilationSettings = interface; // type: System.Xml.Schema.XmlSchemaCompilationSettings, namespace: System.Xml.Schema
  DNXmlSchemaDatatype = interface; // type: System.Xml.Schema.XmlSchemaDatatype, namespace: System.Xml.Schema
  DNXmlSchemaInference = interface; // type: System.Xml.Schema.XmlSchemaInference, namespace: System.Xml.Schema
  DNXmlSchemaInfo = interface; // type: System.Xml.Schema.XmlSchemaInfo, namespace: System.Xml.Schema
  DNXmlSchemaObject = interface; // type: System.Xml.Schema.XmlSchemaObject, namespace: System.Xml.Schema
  DNXmlSchema = interface; // type: System.Xml.Schema.XmlSchema, namespace: System.Xml.Schema
  DNXmlSchemaAnnotated = interface; // type: System.Xml.Schema.XmlSchemaAnnotated, namespace: System.Xml.Schema
  DNXmlSchemaAnyAttribute = interface; // type: System.Xml.Schema.XmlSchemaAnyAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttribute = interface; // type: System.Xml.Schema.XmlSchemaAttribute, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroup = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroup, namespace: System.Xml.Schema
  DNXmlSchemaAttributeGroupRef = interface; // type: System.Xml.Schema.XmlSchemaAttributeGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaContent = interface; // type: System.Xml.Schema.XmlSchemaContent, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentExtension = interface; // type: System.Xml.Schema.XmlSchemaComplexContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaComplexContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaComplexContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentExtension = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentExtension, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContentRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleContentRestriction, namespace: System.Xml.Schema
  DNXmlSchemaContentModel = interface; // type: System.Xml.Schema.XmlSchemaContentModel, namespace: System.Xml.Schema
  DNXmlSchemaComplexContent = interface; // type: System.Xml.Schema.XmlSchemaComplexContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleContent, namespace: System.Xml.Schema
  DNXmlSchemaFacet = interface; // type: System.Xml.Schema.XmlSchemaFacet, namespace: System.Xml.Schema
  DNXmlSchemaEnumerationFacet = interface; // type: System.Xml.Schema.XmlSchemaEnumerationFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinExclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinExclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinInclusiveFacet = interface; // type: System.Xml.Schema.XmlSchemaMinInclusiveFacet, namespace: System.Xml.Schema
  DNXmlSchemaNumericFacet = interface; // type: System.Xml.Schema.XmlSchemaNumericFacet, namespace: System.Xml.Schema
  DNXmlSchemaFractionDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaFractionDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMaxLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMaxLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaMinLengthFacet = interface; // type: System.Xml.Schema.XmlSchemaMinLengthFacet, namespace: System.Xml.Schema
  DNXmlSchemaTotalDigitsFacet = interface; // type: System.Xml.Schema.XmlSchemaTotalDigitsFacet, namespace: System.Xml.Schema
  DNXmlSchemaPatternFacet = interface; // type: System.Xml.Schema.XmlSchemaPatternFacet, namespace: System.Xml.Schema
  DNXmlSchemaWhiteSpaceFacet = interface; // type: System.Xml.Schema.XmlSchemaWhiteSpaceFacet, namespace: System.Xml.Schema
  DNXmlSchemaGroup = interface; // type: System.Xml.Schema.XmlSchemaGroup, namespace: System.Xml.Schema
  DNXmlSchemaIdentityConstraint = interface; // type: System.Xml.Schema.XmlSchemaIdentityConstraint, namespace: System.Xml.Schema
  DNXmlSchemaKey = interface; // type: System.Xml.Schema.XmlSchemaKey, namespace: System.Xml.Schema
  DNXmlSchemaKeyref = interface; // type: System.Xml.Schema.XmlSchemaKeyref, namespace: System.Xml.Schema
  DNXmlSchemaUnique = interface; // type: System.Xml.Schema.XmlSchemaUnique, namespace: System.Xml.Schema
  DNXmlSchemaNotation = interface; // type: System.Xml.Schema.XmlSchemaNotation, namespace: System.Xml.Schema
  DNXmlSchemaParticle = interface; // type: System.Xml.Schema.XmlSchemaParticle, namespace: System.Xml.Schema
  DNXmlSchemaAny = interface; // type: System.Xml.Schema.XmlSchemaAny, namespace: System.Xml.Schema
  DNXmlSchemaElement = interface; // type: System.Xml.Schema.XmlSchemaElement, namespace: System.Xml.Schema
  DNXmlSchemaGroupBase = interface; // type: System.Xml.Schema.XmlSchemaGroupBase, namespace: System.Xml.Schema
  DNXmlSchemaAll = interface; // type: System.Xml.Schema.XmlSchemaAll, namespace: System.Xml.Schema
  DNXmlSchemaChoice = interface; // type: System.Xml.Schema.XmlSchemaChoice, namespace: System.Xml.Schema
  DNXmlSchemaSequence = interface; // type: System.Xml.Schema.XmlSchemaSequence, namespace: System.Xml.Schema
  DNXmlSchemaGroupRef = interface; // type: System.Xml.Schema.XmlSchemaGroupRef, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeContent = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeContent, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeList = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeList, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeRestriction = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeRestriction, namespace: System.Xml.Schema
  DNXmlSchemaSimpleTypeUnion = interface; // type: System.Xml.Schema.XmlSchemaSimpleTypeUnion, namespace: System.Xml.Schema
  DNXmlSchemaType = interface; // type: System.Xml.Schema.XmlSchemaType, namespace: System.Xml.Schema
  DNXmlSchemaComplexType = interface; // type: System.Xml.Schema.XmlSchemaComplexType, namespace: System.Xml.Schema
  DNXmlSchemaSimpleType = interface; // type: System.Xml.Schema.XmlSchemaSimpleType, namespace: System.Xml.Schema
  DNXmlSchemaXPath = interface; // type: System.Xml.Schema.XmlSchemaXPath, namespace: System.Xml.Schema
  DNXmlSchemaAnnotation = interface; // type: System.Xml.Schema.XmlSchemaAnnotation, namespace: System.Xml.Schema
  DNXmlSchemaAppInfo = interface; // type: System.Xml.Schema.XmlSchemaAppInfo, namespace: System.Xml.Schema
  DNXmlSchemaDocumentation = interface; // type: System.Xml.Schema.XmlSchemaDocumentation, namespace: System.Xml.Schema
  DNXmlSchemaExternal = interface; // type: System.Xml.Schema.XmlSchemaExternal, namespace: System.Xml.Schema
  DNXmlSchemaImport = interface; // type: System.Xml.Schema.XmlSchemaImport, namespace: System.Xml.Schema
  DNXmlSchemaInclude = interface; // type: System.Xml.Schema.XmlSchemaInclude, namespace: System.Xml.Schema
  DNXmlSchemaRedefine = interface; // type: System.Xml.Schema.XmlSchemaRedefine, namespace: System.Xml.Schema
  DNXmlSchemaObjectEnumerator = interface; // type: System.Xml.Schema.XmlSchemaObjectEnumerator, namespace: System.Xml.Schema
  DNXmlSchemaObjectTable = interface; // type: System.Xml.Schema.XmlSchemaObjectTable, namespace: System.Xml.Schema
  DNXmlSchemaSet = interface; // type: System.Xml.Schema.XmlSchemaSet, namespace: System.Xml.Schema
  DNXmlSchemaValidator = interface; // type: System.Xml.Schema.XmlSchemaValidator, namespace: System.Xml.Schema
  DNSchemaImporterExtension = interface; // type: System.Xml.Serialization.Advanced.SchemaImporterExtension, namespace: System.Xml.Serialization.Advanced
  DNCodeExporter = interface; // type: System.Xml.Serialization.CodeExporter, namespace: System.Xml.Serialization
  DNSoapCodeExporter = interface; // type: System.Xml.Serialization.SoapCodeExporter, namespace: System.Xml.Serialization
  DNXmlCodeExporter = interface; // type: System.Xml.Serialization.XmlCodeExporter, namespace: System.Xml.Serialization
  DNCodeIdentifier = interface; // type: System.Xml.Serialization.CodeIdentifier, namespace: System.Xml.Serialization
  DNCodeIdentifiers = interface; // type: System.Xml.Serialization.CodeIdentifiers, namespace: System.Xml.Serialization
  DNImportContext = interface; // type: System.Xml.Serialization.ImportContext, namespace: System.Xml.Serialization
  DNSchemaImporter = interface; // type: System.Xml.Serialization.SchemaImporter, namespace: System.Xml.Serialization
  DNSoapSchemaImporter = interface; // type: System.Xml.Serialization.SoapSchemaImporter, namespace: System.Xml.Serialization
  DNXmlSchemaImporter = interface; // type: System.Xml.Serialization.XmlSchemaImporter, namespace: System.Xml.Serialization
  DNSoapAttributeOverrides = interface; // type: System.Xml.Serialization.SoapAttributeOverrides, namespace: System.Xml.Serialization
  DNSoapAttributes = interface; // type: System.Xml.Serialization.SoapAttributes, namespace: System.Xml.Serialization
  DNSoapReflectionImporter = interface; // type: System.Xml.Serialization.SoapReflectionImporter, namespace: System.Xml.Serialization
  DNSoapSchemaExporter = interface; // type: System.Xml.Serialization.SoapSchemaExporter, namespace: System.Xml.Serialization
  DNSoapSchemaMember = interface; // type: System.Xml.Serialization.SoapSchemaMember, namespace: System.Xml.Serialization
  DNXmlAttributeOverrides = interface; // type: System.Xml.Serialization.XmlAttributeOverrides, namespace: System.Xml.Serialization
  DNXmlAttributes = interface; // type: System.Xml.Serialization.XmlAttributes, namespace: System.Xml.Serialization
  DNXmlMapping = interface; // type: System.Xml.Serialization.XmlMapping, namespace: System.Xml.Serialization
  DNXmlMembersMapping = interface; // type: System.Xml.Serialization.XmlMembersMapping, namespace: System.Xml.Serialization
  DNXmlTypeMapping = interface; // type: System.Xml.Serialization.XmlTypeMapping, namespace: System.Xml.Serialization
  DNXmlMemberMapping = interface; // type: System.Xml.Serialization.XmlMemberMapping, namespace: System.Xml.Serialization
  DNXmlReflectionImporter = interface; // type: System.Xml.Serialization.XmlReflectionImporter, namespace: System.Xml.Serialization
  DNXmlReflectionMember = interface; // type: System.Xml.Serialization.XmlReflectionMember, namespace: System.Xml.Serialization
  DNXmlSchemaEnumerator = interface; // type: System.Xml.Serialization.XmlSchemaEnumerator, namespace: System.Xml.Serialization
  DNXmlSchemaExporter = interface; // type: System.Xml.Serialization.XmlSchemaExporter, namespace: System.Xml.Serialization
  DNXmlSerializationGeneratedCode = interface; // type: System.Xml.Serialization.XmlSerializationGeneratedCode, namespace: System.Xml.Serialization
  DNXmlSerializationReader = interface; // type: System.Xml.Serialization.XmlSerializationReader, namespace: System.Xml.Serialization
  DNXmlSerializationWriter = interface; // type: System.Xml.Serialization.XmlSerializationWriter, namespace: System.Xml.Serialization
  DNXmlSerializer = interface; // type: System.Xml.Serialization.XmlSerializer, namespace: System.Xml.Serialization
  DNXmlSerializerFactory = interface; // type: System.Xml.Serialization.XmlSerializerFactory, namespace: System.Xml.Serialization
  DNXmlSerializerImplementation = interface; // type: System.Xml.Serialization.XmlSerializerImplementation, namespace: System.Xml.Serialization
  DNXmlSerializerNamespaces = interface; // type: System.Xml.Serialization.XmlSerializerNamespaces, namespace: System.Xml.Serialization
  DNXmlConvert = interface; // type: System.Xml.XmlConvert, namespace: System.Xml
  DNXmlImplementation = interface; // type: System.Xml.XmlImplementation, namespace: System.Xml
  DNXmlNamedNodeMap = interface; // type: System.Xml.XmlNamedNodeMap, namespace: System.Xml
  DNXmlAttributeCollection = interface; // type: System.Xml.XmlAttributeCollection, namespace: System.Xml
  DNXmlNamespaceManager = interface; // type: System.Xml.XmlNamespaceManager, namespace: System.Xml
  DNXsltContext = interface; // type: System.Xml.Xsl.XsltContext, namespace: System.Xml.Xsl
  DNXmlNameTable = interface; // type: System.Xml.XmlNameTable, namespace: System.Xml
  DNNameTable = interface; // type: System.Xml.NameTable, namespace: System.Xml
  DNXmlNode = interface; // type: System.Xml.XmlNode, namespace: System.Xml
  DNXmlAttribute = interface; // type: System.Xml.XmlAttribute, namespace: System.Xml
  DNXmlDocument = interface; // type: System.Xml.XmlDocument, namespace: System.Xml
  DNXmlDocumentFragment = interface; // type: System.Xml.XmlDocumentFragment, namespace: System.Xml
  DNXmlEntity = interface; // type: System.Xml.XmlEntity, namespace: System.Xml
  DNXmlLinkedNode = interface; // type: System.Xml.XmlLinkedNode, namespace: System.Xml
  DNXmlCharacterData = interface; // type: System.Xml.XmlCharacterData, namespace: System.Xml
  DNXmlCDataSection = interface; // type: System.Xml.XmlCDataSection, namespace: System.Xml
  DNXmlComment = interface; // type: System.Xml.XmlComment, namespace: System.Xml
  DNXmlSignificantWhitespace = interface; // type: System.Xml.XmlSignificantWhitespace, namespace: System.Xml
  DNXmlText = interface; // type: System.Xml.XmlText, namespace: System.Xml
  DNXmlWhitespace = interface; // type: System.Xml.XmlWhitespace, namespace: System.Xml
  DNXmlDeclaration = interface; // type: System.Xml.XmlDeclaration, namespace: System.Xml
  DNXmlDocumentType = interface; // type: System.Xml.XmlDocumentType, namespace: System.Xml
  DNXmlElement = interface; // type: System.Xml.XmlElement, namespace: System.Xml
  DNXmlEntityReference = interface; // type: System.Xml.XmlEntityReference, namespace: System.Xml
  DNXmlProcessingInstruction = interface; // type: System.Xml.XmlProcessingInstruction, namespace: System.Xml
  DNXmlNotation = interface; // type: System.Xml.XmlNotation, namespace: System.Xml
  DNXmlNodeList = interface; // type: System.Xml.XmlNodeList, namespace: System.Xml
  DNXmlParserContext = interface; // type: System.Xml.XmlParserContext, namespace: System.Xml
  DNXmlQualifiedName = interface; // type: System.Xml.XmlQualifiedName, namespace: System.Xml
  DNXmlReader = interface; // type: System.Xml.XmlReader, namespace: System.Xml
  DNXmlNodeReader = interface; // type: System.Xml.XmlNodeReader, namespace: System.Xml
  DNXmlTextReader = interface; // type: System.Xml.XmlTextReader, namespace: System.Xml
  DNXmlValidatingReader = interface; // type: System.Xml.XmlValidatingReader, namespace: System.Xml
  DNXmlReaderSettings = interface; // type: System.Xml.XmlReaderSettings, namespace: System.Xml
  DNXmlResolver = interface; // type: System.Xml.XmlResolver, namespace: System.Xml
  DNXmlPreloadedResolver = interface; // type: System.Xml.Resolvers.XmlPreloadedResolver, namespace: System.Xml.Resolvers
  DNXmlSecureResolver = interface; // type: System.Xml.XmlSecureResolver, namespace: System.Xml
  DNXmlUrlResolver = interface; // type: System.Xml.XmlUrlResolver, namespace: System.Xml
  DNXmlXapResolver = interface; // type: System.Xml.XmlXapResolver, namespace: System.Xml
  DNXmlWriter = interface; // type: System.Xml.XmlWriter, namespace: System.Xml
  DNXmlTextWriter = interface; // type: System.Xml.XmlTextWriter, namespace: System.Xml
  DNXmlWriterSettings = interface; // type: System.Xml.XmlWriterSettings, namespace: System.Xml
  DNXPathDocument = interface; // type: System.Xml.XPath.XPathDocument, namespace: System.Xml.XPath
  DNXPathExpression = interface; // type: System.Xml.XPath.XPathExpression, namespace: System.Xml.XPath
  DNXPathItem = interface; // type: System.Xml.XPath.XPathItem, namespace: System.Xml.XPath
  DNXmlAtomicValue = interface; // type: System.Xml.Schema.XmlAtomicValue, namespace: System.Xml.Schema
  DNXPathNavigator = interface; // type: System.Xml.XPath.XPathNavigator, namespace: System.Xml.XPath
  DNXPathNodeIterator = interface; // type: System.Xml.XPath.XPathNodeIterator, namespace: System.Xml.XPath
  DNXslCompiledTransform = interface; // type: System.Xml.Xsl.XslCompiledTransform, namespace: System.Xml.Xsl
  DNXsltArgumentList = interface; // type: System.Xml.Xsl.XsltArgumentList, namespace: System.Xml.Xsl
  DNXslTransform = interface; // type: System.Xml.Xsl.XslTransform, namespace: System.Xml.Xsl
  DNXsltSettings = interface; // type: System.Xml.Xsl.XsltSettings, namespace: System.Xml.Xsl

{ delegates }

  ///<summary>
  ///  表示将处理 XML 架构验证事件的回调方法和 <see cref="T:System.Xml.Schema.ValidationEventArgs" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///  注意    然后再使用它在代码中确定发件人的类型。
  ///  您不能假定发件人为特定类型的实例。
  ///  发件人也不保证不会是 null。
  ///  总是使用失败处理逻辑要求您强制转换。
  ///</param>
  ///  <param name="e">
  ///  事件数据。
  ///</param>
  [DNTypeName('System.Xml.Schema.ValidationEventHandler')]
  DNValidationEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNValidationEventArgs) of object;

  ///<summary>
  ///  一个 <see langword="delegate" />
  ///  使用 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
  ///  类作为公共语言运行时 (CLR) 类型兼容的属性、 文本或空白的 XML 架构定义语言 (XSD) 类型传递属性、 文本和空白值。
  ///</summary>
  ///<returns>
  ///  包含属性、 文本或空白值的对象。
  ///  对象是属性、 文本或空白值的 XSD 类型相对应的 CLR 类型。
  ///</returns>
  [DNTypeName('System.Xml.Schema.XmlValueGetter')]
  DNXmlValueGetter = function: DDN.mscorlib.DNObject of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" />
  ///  事件 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventHandler')]
  DNUnreferencedObjectEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNUnreferencedObjectEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Xml.Serialization.XmlAttributeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlAttributeEventHandler')]
  DNXmlAttributeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlAttributeEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" />
  ///  事件 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  一个 <see cref="T:System.Xml.Serialization.XmlElementEventArgs" />
  ///  包含事件数据。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlElementEventHandler')]
  DNXmlElementEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlElementEventArgs) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
  ///  事件 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Xml.Serialization.XmlNodeEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlNodeEventHandler')]
  DNXmlNodeEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeEventArgs) of object;

  ///<summary>
  ///  使用委托 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  类反序列化的 SOAP 编码的 XML 数据类型映射到集合或枚举。
  ///</summary>
  ///  <param name="collection">
  ///  集合项数组复制到其中的集合。
  ///</param>
  ///  <param name="collectionItems">
  ///  要被复制到的项的数组 <paramref name="object collection" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlSerializationCollectionFixupCallback')]
  DNXmlSerializationCollectionFixupCallback = procedure(collection: DDN.mscorlib.DNObject; collectionItems: DDN.mscorlib.DNObject) of object;

  ///<summary>
  ///  使用委托 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  的 SOAP 编码的 XML 数据反序列化的类。
  ///</summary>
  ///  <param name="fixup">
  ///  一个实例 <see cref="T:System.Xml.Serialization.XmlSerializationReader.Fixup" />
  ///  包含要修复的对象的类和填写的项的字符串标识符的数组。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlSerializationFixupCallback')]
  DNXmlSerializationFixupCallback = procedure(fixup: DDN.mscorlib.DNObject) of object;

  ///<summary>
  ///  使用委托 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  SOAP 编码的非根 XML 数据的类型反序列化的类。
  ///</summary>
  ///<returns>
  ///  由回叫返回的对象。
  ///</returns>
  [DNTypeName('System.Xml.Serialization.XmlSerializationReadCallback')]
  DNXmlSerializationReadCallback = function: DDN.mscorlib.DNObject of object;

  ///<summary>
  ///  委托，它由 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  从 SOAP 编码的非根 XML 数据类型的序列化的类。
  ///</summary>
  ///  <param name="o">
  ///  正在序列化的对象。
  ///</param>
  [DNTypeName('System.Xml.Serialization.XmlSerializationWriteCallback')]
  DNXmlSerializationWriteCallback = procedure(o: DDN.mscorlib.DNObject) of object;

  ///<summary>
  ///  表示用于处理的方法 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" />
  ///  和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />
  ///  事件。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e">
  ///  包含事件数据的 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />
  ///  。
  ///</param>
  [DNTypeName('System.Xml.XmlNodeChangedEventHandler')]
  DNXmlNodeChangedEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXmlNodeChangedEventArgs) of object;

  ///<summary>
  ///  表示用来处理 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" />
  ///  事件的方法。
  ///</summary>
  ///  <param name="sender">
  ///  事件源。
  ///</param>
  ///  <param name="e"><see cref="T:System.Xml.Xsl.XsltMessageEncounteredEventArgs" />
  ///  包含事件数据。
  ///</param>
  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventHandler')]
  DNXsltMessageEncounteredEventHandler = procedure(sender: DDN.mscorlib.DNObject; e: DNXsltMessageEncounteredEventArgs) of object;




{ objects }

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  表示一个应用程序资源流冲突解决程序。
  ///</summary>
  [DNTypeName('System.Xml.IApplicationResourceStreamResolver')]
  DNIApplicationResourceStreamResolver = interface(DDN.mscorlib.DNObject)
  ['{3E390847-46B4-3E7B-ABE8-6BABB33B8E1B}']
  { methods } 

    ///<summary>
    ///  从指定的 URI 返回应用程序资源流。
    ///</summary>
    ///  <param name="relativeUri">
    ///  相对 URI。
    ///</param>
    ///<returns>
    ///  应用程序资源流。
    ///</returns>
    function GetApplicationResourceStream(relativeUri: DDN.System.DNUri): DDN.mscorlib.DNStream;

  end;

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  支持的一类以返回 <see cref="T:System.Xml.XmlNode" />
  ///  距当前上下文或位置。
  ///</summary>
  [DNTypeName('System.Xml.IHasXmlNode')]
  DNIHasXmlNode = interface(DDN.mscorlib.DNObject)
  ['{54637763-C9DB-3D10-BEA0-E110003DDE65}']
  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  当前位置。
    ///</summary>
    ///<returns><see langword="XmlNode" />
    ///  当前位置。
    ///</returns>
    function GetNode: DNXmlNode;

  end;

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  提供一个使类可以返回行和位置信息的接口。
  ///</summary>
  [DNTypeName('System.Xml.IXmlLineInfo')]
  DNIXmlLineInfo = interface(DDN.mscorlib.DNObject)
  ['{42FC7998-4F03-37C8-BEAA-3C23528E47CB}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    ///<summary>
    ///  获取一个值，该值指示该类是否可返回行信息。
    ///</summary>
    ///<returns>
    ///  如果可以提供 <see cref="P:System.Xml.IXmlLineInfo.LineNumber" />
    ///  和 <see cref="P:System.Xml.IXmlLineInfo.LinePosition" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasLineInfo: Boolean;

  { propertys } 

    ///<summary>
    ///  获取当前行号。
    ///</summary>
    ///<returns>
    ///  当前行号或 0，如果没有行的信息 (例如， <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />
    ///  返回 <see langword="false" />
    ///  )。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取当前行位置。
    ///</summary>
    ///<returns>
    ///  当前行位置或 0，如果没有行的信息 (例如， <see cref="M:System.Xml.IXmlLineInfo.HasLineInfo" />
    ///  返回 <see langword="false" />
    ///  )。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  //-------------namespace: System.Xml----------------
  ///<summary>
  ///  提供对一组前缀和命名空间映射的只读访问。
  ///</summary>
  [DNTypeName('System.Xml.IXmlNamespaceResolver')]
  DNIXmlNamespaceResolver = interface(DDN.mscorlib.DNObject)
  ['{963A8E22-D935-3065-ACF5-220A8350C64F}']
  { methods } 

    ///<summary>
    ///  获取当前处于作用域定义的前缀和命名空间映射的集合。
    ///</summary>
    ///  <param name="scope">
    ///  一个 <see cref="T:System.Xml.XmlNamespaceScope" />
    ///  值，指定要返回的命名空间节点的类型。
    ///</param>
    ///<returns>
    ///  一个包含当前在范围内的命名空间的 <see cref="T:System.Collections.IDictionary" />
    ///  。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    ///<summary>
    ///  获取 URI 映射到指定的前缀的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  要查找其命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  映射到前缀的命名空间 URI；如果前缀未映射到命名空间 URI，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  获取映射到指定的命名空间 URI 的前缀。
    ///</summary>
    ///  <param name="namespaceName">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  映射到命名空间 URI 的前缀；如果命名空间 URI 未映射到前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupPrefix(namespaceName: string): string;

  end;

  //-------------namespace: System.Xml.Schema----------------
  ///<summary>
  ///  定义已验证的 XML 节点的架构验证信息集。
  ///</summary>
  [DNTypeName('System.Xml.Schema.IXmlSchemaInfo')]
  DNIXmlSchemaInfo = interface(DDN.mscorlib.DNObject)
  ['{B877D1C0-5915-310A-8B75-8937F127300C}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    function get_IsDefault: Boolean;
    function get_IsNil: Boolean;
    function get_MemberType: DNXmlSchemaSimpleType;
    function get_SchemaType: DNXmlSchemaType;
    function get_SchemaElement: DNXmlSchemaElement;
    function get_SchemaAttribute: DNXmlSchemaAttribute;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaValidity" />
    ///  验证 XML 节点的此值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaValidity" />
    ///  验证 XML 节点的此值。
    ///</returns>
    property Validity: DNXmlSchemaValidity read get_Validity;
    ///<summary>
    ///  获取一个值，该值指示是否这个被验证的 XML 节点被设置为在 XML 架构定义语言 (XSD) 架构验证过程中应用的默认的结果。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此验证的 XML 节点被设置为默认值在架构验证，则为期间应用的结果否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  获取一个值，该值指示此验证的 XML 节点值是否为零。
    ///</summary>
    ///<returns><see langword="true" />
    ///  此值被验证的 XML 节点是否为零;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNil: Boolean read get_IsNil;
    ///<summary>
    ///  获取此已验证的 XML 节点的动态架构类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  表示此动态架构类型的对象验证 XML 节点。
    ///</returns>
    property MemberType: DNXmlSchemaSimpleType read get_MemberType;
    ///<summary>
    ///  获取此已验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  此被验证的 XML 节点。
    ///</returns>
    property SchemaType: DNXmlSchemaType read get_SchemaType;
    ///<summary>
    ///  获取已编译 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  对应于这个被验证的 XML 节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  对应于这个被验证的 XML 节点。
    ///</returns>
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement;
    ///<summary>
    ///  获取已编译 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  对应于这个被验证的 XML 节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  对应于这个被验证的 XML 节点。
    ///</returns>
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  ///<summary>
  ///  为 XML 序列化和反序列化提供自定义格式。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.IXmlSerializable')]
  DNIXmlSerializable = interface(DDN.mscorlib.DNObject)
  ['{45471A9D-DC65-3A9F-8C82-7539D6BE5419}']
  { methods } 

    ///<summary>
    ///  此方法是保留方法，请不要使用。
    ///  在实现 <see langword="IXmlSerializable" />
    ///  接口时，应从此方法返回 <see langword="null" />
    ///  （在 Visual Basic 中为 <see langword="Nothing" />
    ///  ），如果需要指定自定义架构，应向该类应用 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  ，描述由 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
    ///  方法生成并由 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
    ///  方法使用的对象的 XML 表示形式。
    ///</returns>
    function GetSchema: DNXmlSchema;
    ///<summary>
    ///  从对象的 XML 表示形式生成该对象。
    ///</summary>
    ///  <param name="reader">
    ///  从中对对象进行反序列化的 <see cref="T:System.Xml.XmlReader" />
    ///  流。
    ///</param>
    procedure ReadXml(reader: DNXmlReader);
    ///<summary>
    ///  将对象转换为其 XML 表示形式。
    ///</summary>
    ///  <param name="writer">
    ///  对象要序列化为的 <see cref="T:System.Xml.XmlWriter" />
    ///  流。
    ///</param>
    procedure WriteXml(writer: DNXmlWriter);

  end;

  //-------------namespace: System.Xml.Serialization----------------
  ///<summary>
  ///  建立 <see cref="P:System.Xml.Serialization.IXmlTextParser.Normalized" />
  ///  供.NET Framework 基础结构使用的属性。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.IXmlTextParser')]
  DNIXmlTextParser = interface(DDN.mscorlib.DNObject)
  ['{769A70FF-3974-369E-A95B-4FA2F28FDE95}']
  { getters & setters } 

    function get_Normalized: Boolean;
    procedure set_Normalized(value: Boolean);
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);

  { propertys } 

    ///<summary>
    ///  获取或设置指示规范化空白区域和属性值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果空白属性值进行规范化。，否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Normalized: Boolean read get_Normalized write set_Normalized;
    ///<summary>
    ///  获取或设置分析 XML 时如何处理空白。
    ///</summary>
    ///<returns>
    ///  成员 <see cref="T:System.Xml.WhitespaceHandling" />
    ///  分析 XML 时的处理描述如何将空白的枚举。
    ///</returns>
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
  end;

  //-------------namespace: System.Xml.XPath----------------
  ///<summary>
  ///  提供对的访问器 <see cref="T:System.Xml.XPath.XPathNavigator" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.XPath.IXPathNavigable')]
  DNIXPathNavigable = interface(DDN.mscorlib.DNObject)
  ['{075B8C9F-B06E-3269-BEB1-8CCBF38D96FA}']
  { methods } 

    ///<summary>
    ///  返回新 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;

  end;

  //-------------namespace: System.Xml.Xsl----------------
  ///<summary>
  ///  提供在运行时执行期间在可扩展样式表语言转换 (XSLT) 样式表中定义的给定函数的接口。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.IXsltContextFunction')]
  DNIXsltContextFunction = interface(DDN.mscorlib.DNObject)
  ['{BC0FA391-C9DD-30BC-83AD-5CADCD9C03D3}']
  { getters & setters } 

    function get_Minargs: Int32;
    function get_Maxargs: Int32;
    function get_ReturnType: DNXPathResultType;
    function get_ArgTypes: TArray<DNXPathResultType>;

  { methods } 

    ///<summary>
    ///  提供了方法来调用该函数使用给定的上下文中给定的参数。
    ///</summary>
    ///  <param name="xsltContext">
    ///  函数调用的 XSLT 上下文。
    ///</param>
    ///  <param name="args">
    ///  函数调用的参数。
    ///  每个参数是数组中的元素。
    ///</param>
    ///  <param name="docContext">
    ///  函数调用的的上下文节点。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示该函数的返回值。
    ///</returns>
    function Invoke(xsltContext: DNXsltContext; args: TArray<DDN.mscorlib.DNObject>; docContext: DNXPathNavigator): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取函数的参数的最小数目。
    ///  这使用户能够区分重载函数。
    ///</summary>
    ///<returns>
    ///  函数参数的最小数目。
    ///</returns>
    property Minargs: Int32 read get_Minargs;
    ///<summary>
    ///  获取函数的参数的最大数目。
    ///  这使用户能够区分重载函数。
    ///</summary>
    ///<returns>
    ///  函数的参数的最大数目。
    ///</returns>
    property Maxargs: Int32 read get_Maxargs;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XPath.XPathResultType" />
    ///  表示由该函数返回的 XPath 类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathResultType" />
    ///  表示由该函数返回的 XPath 类型
    ///</returns>
    property ReturnType: DNXPathResultType read get_ReturnType;
    ///<summary>
    ///  获取函数的参数列表提供的 XML 路径语言 (XPath) 类型。
    ///  此信息可以用于发现函数可用于区分重载函数的签名。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.XPath.XPathResultType" />
    ///  表示函数的参数列表的类型。
    ///</returns>
    property ArgTypes: TArray<DNXPathResultType> read get_ArgTypes;
  end;

  //-------------namespace: System.Xml.Xsl----------------
  ///<summary>
  ///  提供在运行时执行期间定义样式表中的给定变量的接口。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.IXsltContextVariable')]
  DNIXsltContextVariable = interface(DDN.mscorlib.DNObject)
  ['{B6D7D55A-2E94-3C3B-911E-6AF424E51A0C}']
  { getters & setters } 

    function get_IsLocal: Boolean;
    function get_IsParam: Boolean;
    function get_VariableType: DNXPathResultType;

  { methods } 

    ///<summary>
    ///  在运行时变量的计算结果并返回一个对象，表示该变量的值。
    ///</summary>
    ///  <param name="xsltContext"><see cref="T:System.Xml.Xsl.XsltContext" />
    ///  表示该变量的执行上下文。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  表示该变量的值。
    ///  可能的返回类型包括数字、 字符串、 布尔值、 文档片段或节点集。
    ///</returns>
    function Evaluate(xsltContext: DNXsltContext): DDN.mscorlib.DNObject;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示变量是否本地的。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果变量是在当前上下文中; 中的本地变量否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsLocal: Boolean read get_IsLocal;
    ///<summary>
    ///  获取一个值，该值指示变量是否为可扩展样式表语言转换 (XSLT) 参数。
    ///  这可以给样式表或一个模板参数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果变量是 XSLT 参数;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsParam: Boolean read get_IsParam;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XPath.XPathResultType" />
    ///  表示该变量的 XML 路径语言 (XPath) 类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathResultType" />
    ///  表示 XPath 类型的变量。
    ///</returns>
    property VariableType: DNXPathResultType read get_VariableType;
  end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{49DAF45A-402E-5EBB-B073-F39AA4C56D7B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapAttributeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />
    ///  类使用指定的值作为 XML 属性的名称。
    ///</summary>
    ///  <param name="attributeName">
    ///  XML 属性的名称。
    ///</param>
    {class} function init(attributeName: string): DNSoapAttributeAttribute; overload;

  end;

  ///<summary>
  ///  指定 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  必须进行编码的 SOAP 特性将类成员序列化。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapAttributeAttribute')]
  DNSoapAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{4504B32E-EB22-3F27-BCA7-DB3B07F37237}']
  { getters & setters } 

    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置由生成的 XML 特性名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 属性的名称。
    ///  默认值为成员标识符。
    ///</returns>
    property AttributeName: string read get_AttributeName write set_AttributeName;
    ///<summary>
    ///  获取或设置 XML 属性的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  XML 特性的 XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置由生成的 SOAP 属性的 XML 架构定义语言 (XSD) 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 架构数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构第 2︰ 数据类型"。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  具有指定的 XML 架构数据类型无法映射到.NET 数据类型。
    ///</exception>
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapAttributeAttribute = class(TDNGenericImport<DNSoapAttributeAttributeClass, DNSoapAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{38E0F882-BE78-5D68-8BA7-550B81B6F109}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  类，并指定的 XML 元素的名称。
    ///</summary>
    ///  <param name="elementName">
    ///  序列化成员的 XML 元素名称。
    ///</param>
    {class} function init(elementName: string): DNSoapElementAttribute; overload;

  end;

  ///<summary>
  ///  指定的公共成员值进行序列化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  作为已编码的 SOAP XML 元素。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapElementAttribute')]
  DNSoapElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{E57CD296-C34A-30C1-8317-75493E4CDF1D}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置生成的 XML 元素的名称。
    ///</summary>
    ///<returns>
    ///  生成的 XML 元素的名称。
    ///  默认值为成员标识符。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    ///<summary>
    ///  获取或设置生成的 XML 元素的 XML 架构定义语言 (XSD) 数据类型。
    ///</summary>
    ///<returns>
    ///  XML 架构数据类型之一。
    ///</returns>
    property DataType: string read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  必须序列化的成员有 <see langword="xsi:null" />
    ///  属性设置为"1"。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成 <see langword="xsi:null" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapElementAttribute = class(TDNGenericImport<DNSoapElementAttributeClass, DNSoapElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapEnumAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{253B998A-D5F1-5173-A4D2-58E4CB6511DF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapEnumAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapEnumAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapEnumAttribute" />
    ///  类使用的指定的元素名称。
    ///</summary>
    ///  <param name="name">
    ///  由生成的 XML 元素名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</param>
    {class} function init(name: string): DNSoapEnumAttribute; overload;

  end;

  ///<summary>
  ///  控件如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  序列化枚举成员。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapEnumAttribute')]
  DNSoapEnumAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2B8628BC-D759-3440-A773-B56DAA1A5344}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML 中生成的值记录时 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举或识别时它反序列化枚举成员的值。
    ///</summary>
    ///<returns>
    ///  在 XML 中生成的值记录时 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举时或识别时它反序列化枚举成员的值。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapEnumAttribute = class(TDNGenericImport<DNSoapEnumAttributeClass, DNSoapEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIgnoreAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{73F35492-D08D-5416-8F3C-D7F03ECFCD27}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapIgnoreAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapIgnoreAttribute;

  end;

  ///<summary>
  ///  指示 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  进行序列化的公共字段或公共读/写属性值。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapIgnoreAttribute')]
  DNSoapIgnoreAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6EBBAEDA-51B8-3E37-8F26-671A153211F3}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapIgnoreAttribute = class(TDNGenericImport<DNSoapIgnoreAttributeClass, DNSoapIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapIncludeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8D640C9D-2585-5990-BE8D-2630815B4451}']
  { constructors } 

    ///<summary>
    ///  使用指定的类型初始化 <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type">
    ///  要包含的对象的类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNSoapIncludeAttribute;

  end;

  ///<summary>
  ///  允许 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  识别出的类型时序列化或反序列化将对象作为编码的 SOAP XML。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapIncludeAttribute')]
  DNSoapIncludeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{27FF1ADB-F484-3584-AD4D-CD449974379C}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要在序列化或反序列化对象时使用的对象的类型。
    ///</summary>
    ///<returns>
    ///  要包含的对象的类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapIncludeAttribute = class(TDNGenericImport<DNSoapIncludeAttributeClass, DNSoapIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9A73D6E1-E3D1-5B0E-BE49-C6A577656D8D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapTypeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />
    ///  类并指定 XML 类型的名称。
    ///</summary>
    ///  <param name="typeName">
    ///  XML 名称键入 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  时它将序列化的类实例 （并识别它反序列化的类实例时），将生成。
    ///</param>
    {class} function init(typeName: string): DNSoapTypeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />
    ///  类并指定名称和类型的 XML 命名空间。
    ///</summary>
    ///  <param name="typeName">
    ///  XML 名称键入 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  时它将序列化的类实例 （并识别它反序列化的类实例时），将生成。
    ///</param>
    ///  <param name="ns">
    ///  类型的 XML 命名空间。
    ///</param>
    {class} function init(typeName: string; ns: string): DNSoapTypeAttribute; overload;

  end;

  ///<summary>
  ///  控制生成的架构 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  当类实例的序列化方式 SOAP 编码的 XML。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapTypeAttribute')]
  DNSoapTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{9DC8944D-EDC6-34C8-8C55-C0970B79BAC2}']
  { getters & setters } 

    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否要包含在 SOAP 编码的 XML 架构文档中的类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要包括在 SOAP 编码的 XML 架构文档; 中的类型否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    ///<summary>
    ///  获取或设置 XML 类型的名称。
    ///</summary>
    ///<returns>
    ///  XML 类型的名称。
    ///  默认值是类名。
    ///</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>
    ///  获取或设置 XML 类型的命名空间。
    ///</summary>
    ///<returns>
    ///  XML 类型的命名空间。
    ///  默认值为空字符串("")。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNSoapTypeAttribute = class(TDNGenericImport<DNSoapTypeAttributeClass, DNSoapTypeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{206F38EB-5C44-5294-A560-97878A664B28}']
  { constructors } 

    ///<summary>
    ///  构造的新实例 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
    ///  类。
    ///</summary>
    {class} function init: DNXmlAnyAttributeAttribute;

  end;

  ///<summary>
  ///  指定该成员 (返回的数组的字段 <see cref="T:System.Xml.XmlAttribute" />
  ///  对象) 都可以包含任何 XML 特性。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAnyAttributeAttribute')]
  DNXmlAnyAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{1E962A37-A8A9-3189-9889-71B66F4DD5DA}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAnyAttributeAttribute = class(TDNGenericImport<DNXmlAnyAttributeAttributeClass, DNXmlAnyAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{44BC4220-12AA-5AF7-A933-22EB33B52BDF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlAnyElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  类，并指定在 XML 文档中生成的 XML 元素名称。
    ///</summary>
    ///  <param name="name">
    ///  XML 元素的名称， <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成。
    ///</param>
    {class} function init(name: string): DNXmlAnyElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  类，并指定 XML 文档和其 XML 命名空间中所生成的 XML 元素名称。
    ///</summary>
    ///  <param name="name">
    ///  XML 元素的名称， <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成。
    ///</param>
    ///  <param name="ns">
    ///  XML 元素的 XML 命名空间。
    ///</param>
    {class} function init(name: string; ns: string): DNXmlAnyElementAttribute; overload;

  end;

  ///<summary>
  ///  指定该成员 (返回的数组的字段 <see cref="T:System.Xml.XmlElement" />
  ///  或 <see cref="T:System.Xml.XmlNode" />
  ///  对象) 包含这些对象表示任何不具备对应成员对象以序列化或反序列化的 XML 元素。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttribute')]
  DNXmlAnyElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{2C60A4E7-A0D0-3833-99EA-9A3E974A9A8E}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML 元素名称。
    ///</summary>
    ///<returns>
    ///  XML 元素的名称。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  数组成员的元素名称与指定的元素名称不匹配 <see cref="P:System.Xml.Serialization.XmlAnyElementAttribute.Name" />
    ///  属性。
    ///</exception>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置在 XML 文档中生成的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置显式的顺序序列化或反序列化元素。
    ///</summary>
    ///<returns>
    ///  代码生成的顺序。
    ///</returns>
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAnyElementAttribute = class(TDNGenericImport<DNXmlAnyElementAttributeClass, DNXmlAnyElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{BECF040A-64C7-52F8-9BC3-03FA292F92CB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlArrayAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    ///  类，并指定在 XML 文档实例中生成的 XML 元素名称。
    ///</summary>
    ///  <param name="elementName">
    ///  XML 元素的名称， <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成。
    ///</param>
    {class} function init(elementName: string): DNXmlArrayAttribute; overload;

  end;

  ///<summary>
  ///  指定 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  必须将特定的类成员序列化为的 XML 元素的数组。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlArrayAttribute')]
  DNXmlArrayAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{DA6F4C82-1E35-3CEA-9E37-25239ACB4C00}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置提供给序列化数组的 XML 元素名称。
    ///</summary>
    ///<returns>
    ///  序列化数组的 XML 元素名称。
    ///  默认值是向其成员的名称 <see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    ///  分配。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    ///<summary>
    ///  获取或设置 XML 元素的命名空间。
    ///</summary>
    ///<returns>
    ///  XML 元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  必须将成员序列化为一个空 XML 标记使用 <see langword="xsi:nil" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成 <see langword="xsi:nil" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置一个值，该值指示是否由生成的 XML 元素名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  为限定或未限定。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值之一。
    ///  默认值为 <see langword="XmlSchemaForm.None" />
    ///  。
    ///</returns>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    ///<summary>
    ///  获取或设置显式的顺序序列化或反序列化元素。
    ///</summary>
    ///<returns>
    ///  代码生成的顺序。
    ///</returns>
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlArrayAttribute = class(TDNGenericImport<DNXmlArrayAttributeClass, DNXmlArrayAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{8D6F874C-B256-5E7B-A6B5-86933C305ADD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlArrayItemAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  类，并指定在 XML 文档中生成的 XML 元素的名称。
    ///</summary>
    ///  <param name="elementName">
    ///  XML 元素的名称。
    ///</param>
    {class} function init(elementName: string): DNXmlArrayItemAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  类，并指定 <see cref="T:System.Type" />
    ///  ，可以插入到序列化数组。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要序列化的对象。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlArrayItemAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  类，并指定在 XML 文档中生成的 XML 元素的名称和 <see cref="T:System.Type" />
    ///  ，可以插入到生成的 XML 文档。
    ///</summary>
    ///  <param name="elementName">
    ///  XML 元素的名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要序列化的对象。
    ///</param>
    {class} function init(elementName: string; &type: DDN.mscorlib.DNType): DNXmlArrayItemAttribute; overload;

  end;

  ///<summary>
  ///  表示一个属性，指定的派生类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  可以将放入序列化数组。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttribute')]
  DNXmlArrayItemAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{51B3D87B-3CDC-3B38-A4A4-EE8A8417BC10}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_NestingLevel: Int32;
    procedure set_NestingLevel(value: Int32);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个数组中允许的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Type" />
    ///  数组中允许的。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>
    ///  获取或设置生成的 XML 元素的名称。
    ///</summary>
    ///<returns>
    ///  生成的 XML 元素的名称。
    ///  默认值为成员标识符。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    ///<summary>
    ///  获取或设置生成的 XML 元素的命名空间。
    ///</summary>
    ///<returns>
    ///  生成的 XML 元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或 XML 元素的层次结构中设置的级别 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  影响。
    ///</summary>
    ///<returns>
    ///  一套中数组的数组的索引从零开始索引。
    ///</returns>
    property NestingLevel: Int32 read get_NestingLevel write set_NestingLevel;
    ///<summary>
    ///  获取或设置生成的 XML 元素的 XML 数据类型。
    ///</summary>
    ///<returns>
    ///  XML 架构定义 (XSD) 数据类型，按照万维网联合会 (www.w3.org) 文档"XML 架构 Part 2: DataTypes"的定义。
    ///</returns>
    property DataType: string read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  必须将成员序列化为一个空 XML 标记使用 <see langword="xsi:nil" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成 <see langword="xsi:nil" />
    ///  属性; 否则为 <see langword="false" />
    ///  , ，并且不生成任何实例。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置一个值，该值指示是否限定生成的 XML 元素的名称。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值之一。
    ///  默认值为 <see langword="XmlSchemaForm.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Exception"><see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Form" />
    ///  属性设置为 <see langword="XmlSchemaForm.Unqualified" />
    ///  和 <see cref="P:System.Xml.Serialization.XmlArrayItemAttribute.Namespace" />
    ///  指定值。
    ///</exception>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlArrayItemAttribute = class(TDNGenericImport<DNXmlArrayItemAttributeClass, DNXmlArrayItemAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{6E618193-817A-5AC8-9D7E-D24A29109089}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlAttributeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
    ///  类并指定生成的 XML 特性的名称。
    ///</summary>
    ///  <param name="attributeName">
    ///  XML 的名称特性 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成。
    ///</param>
    {class} function init(attributeName: string): DNXmlAttributeAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  用来存储该属性。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlAttributeAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="attributeName">
    ///  生成的 XML 属性的名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  用来存储该属性。
    ///</param>
    {class} function init(attributeName: string; &type: DDN.mscorlib.DNType): DNXmlAttributeAttribute; overload;

  end;

  ///<summary>
  ///  指定 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  必须将序列化为 XML 特性的类成员。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAttributeAttribute')]
  DNXmlAttributeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{88BCD0FE-C31B-3F59-ABF7-15216A462445}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_AttributeName: string;
    procedure set_AttributeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XML 属性的复杂类型。
    ///</summary>
    ///<returns>
    ///  XML 特性的类型。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>
    ///  获取或设置 XML 属性的名称。
    ///</summary>
    ///<returns>
    ///  XML 属性的名称。
    ///  默认值为成员名称。
    ///</returns>
    property AttributeName: string read get_AttributeName write set_AttributeName;
    ///<summary>
    ///  获取或设置 XML 属性的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  XML 特性的 XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置由生成的 XML 属性的 XSD 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XSD （XML 架构文档） 数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构︰ 数据类型"。
    ///</returns>
    property DataType: string read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否由生成的 XML 属性名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  受限定的。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值之一。
    ///  默认值为 <see langword="XmlForm.None" />
    ///  。
    ///</returns>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlAttributeAttribute = class(TDNGenericImport<DNXmlAttributeAttributeClass, DNXmlAttributeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlChoiceIdentifierAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{9773F923-FD71-5DCD-BB10-91B0A399E9D9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlChoiceIdentifierAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  返回用来检测选项的枚举成员名称。
    ///</param>
    {class} function init(name: string): DNXmlChoiceIdentifierAttribute; overload;

  end;

  ///<summary>
  ///  指定可以使用枚举进一步检测成员。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlChoiceIdentifierAttribute')]
  DNXmlChoiceIdentifierAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{CAA8D190-572C-3A95-8180-1CC75EDC0BFD}']
  { getters & setters } 

    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置返回的枚举，用于检测类型的字段的名称。
    ///</summary>
    ///<returns>
    ///  返回一个枚举的字段的名称。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlChoiceIdentifierAttribute = class(TDNGenericImport<DNXmlChoiceIdentifierAttributeClass, DNXmlChoiceIdentifierAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C557DA8B-3C09-57EF-9A22-5E2E243D3CD0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  类，并指定的 XML 元素的名称。
    ///</summary>
    ///  <param name="elementName">
    ///  序列化成员的 XML 元素名称。
    ///</param>
    {class} function init(elementName: string): DNXmlElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  类，并指定到的成员的类型 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  应用。
    ///  此类型由 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  当序列化或反序列化包含它的对象。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  从成员的类型派生的对象。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlElementAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  ，并且指定的成员的名称的 XML 元素和派生的类型 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  应用。
    ///  使用此成员类型时 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化包含它的对象。
    ///</summary>
    ///  <param name="elementName">
    ///  序列化成员的 XML 元素名称。
    ///</param>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  从成员的类型派生的对象。
    ///</param>
    {class} function init(elementName: string; &type: DDN.mscorlib.DNType): DNXmlElementAttribute; overload;

  end;

  ///<summary>
  ///  指示公共字段或属性表示一个 XML 元素时 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  序列化或反序列化包含它的对象。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlElementAttribute')]
  DNXmlElementAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{5366E73D-B2AB-37EC-B1C4-8DA06442BF63}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Order: Int32;
    procedure set_Order(value: Int32);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置用于表示 XML 元素的对象类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  的成员。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>
    ///  获取或设置生成的 XML 元素的名称。
    ///</summary>
    ///<returns>
    ///  生成的 XML 元素的名称。
    ///  默认值为成员标识符。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    ///<summary>
    ///  获取或设置分配给此类序列化时所产生的 XML 元素的命名空间。
    ///</summary>
    ///<returns>
    ///  XML 元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置由生成的 XML 元素的 XML 架构定义 (XSD) 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 架构数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构第 2︰ 数据类型"。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  具有指定的 XML 架构数据类型无法映射到.net 数据类型。
    ///</exception>
    property DataType: string read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  必须设置为成员序列化为 <see langword="null" />
    ///  的空标记为 <see langword="xsi:nil" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成 <see langword="xsi:nil" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    ///<summary>
    ///  获取或设置一个值，该值指示是否限定该元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />
    ///  。
    ///</returns>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    ///<summary>
    ///  获取或设置显式的顺序序列化或反序列化元素。
    ///</summary>
    ///<returns>
    ///  代码生成的顺序。
    ///</returns>
    property Order: Int32 read get_Order write set_Order;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlElementAttribute = class(TDNGenericImport<DNXmlElementAttributeClass, DNXmlElementAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlEnumAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{1DD057D0-F133-5177-833E-F283C33629F1}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlEnumAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlEnumAttribute" />
    ///  类，并指定的 XML 值 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成或识别 （当它序列化或反序列化枚举时，将分别）。
    ///</summary>
    ///  <param name="name">
    ///  枚举成员的重写的名称。
    ///</param>
    {class} function init(name: string): DNXmlEnumAttribute; overload;

  end;

  ///<summary>
  ///  控件如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  序列化枚举成员。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlEnumAttribute')]
  DNXmlEnumAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{90499D2E-9FB9-3642-8C14-49FD94B021EF}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置生成的 XML 文档中的值实例时 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举或识别时它反序列化枚举成员的值。
    ///</summary>
    ///<returns>
    ///  生成的 XML 文档中的值时实例 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  将枚举时或识别的值序列化时将其反序列化枚举成员。
    ///</returns>
    property Name: string read get_Name write set_Name;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlEnumAttribute = class(TDNGenericImport<DNXmlEnumAttributeClass, DNXmlEnumAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIgnoreAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{4DEA8B18-9646-5BC2-AEA0-19AF6ED2DD01}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlIgnoreAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlIgnoreAttribute;

  end;

  ///<summary>
  ///  指示 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
  ///  方法 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  进行序列化的公共字段或公共读/写属性值。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlIgnoreAttribute')]
  DNXmlIgnoreAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{54F4CE31-7920-32B4-8238-B75CA0A27504}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlIgnoreAttribute = class(TDNGenericImport<DNXmlIgnoreAttributeClass, DNXmlIgnoreAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlIncludeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{C0846CA8-CD27-537F-ADCC-BF658F6FC6D8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要包括的对象。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlIncludeAttribute;

  end;

  ///<summary>
  ///  允许 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  在序列化或反序列化对象时识别出的类型。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlIncludeAttribute')]
  DNXmlIncludeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{AC1C99CC-6252-3C09-9A52-A7A38D118C20}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置要包含的对象的类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  要包括的对象。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlIncludeAttribute = class(TDNGenericImport<DNXmlIncludeAttributeClass, DNXmlIncludeAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNamespaceDeclarationsAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{67B91508-5788-547F-920B-541A9D68AA41}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlNamespaceDeclarationsAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlNamespaceDeclarationsAttribute;

  end;

  ///<summary>
  ///  指定目标属性、参数、返回值或类成员包含与 XML 文档中使用的命名空间相关联的前缀。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlNamespaceDeclarationsAttribute')]
  DNXmlNamespaceDeclarationsAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{6CDE0118-0B6E-3BE8-AD16-CDC5E9B3A5E6}']
  { getters & setters } 

    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlNamespaceDeclarationsAttribute = class(TDNGenericImport<DNXmlNamespaceDeclarationsAttributeClass, DNXmlNamespaceDeclarationsAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlRootAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{FE12BAB6-1A85-587C-9D37-6804D0A96DAF}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlRootAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  类并指定的 XML 根元素的名称。
    ///</summary>
    ///  <param name="elementName">
    ///  XML 根元素的名称。
    ///</param>
    {class} function init(elementName: string): DNXmlRootAttribute; overload;

  end;

  ///<summary>
  ///  控制视为 XML 根元素的属性目标的 XML 序列化。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlRootAttribute')]
  DNXmlRootAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{33F71924-FE4F-3AD0-A002-8B5573576CC4}']
  { getters & setters } 

    function get_ElementName: string;
    procedure set_ElementName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_IsNullable: Boolean;
    procedure set_IsNullable(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置生成并被识别的 XML 元素名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类的 <see cref="M:System.Xml.Serialization.XmlSerializer.Serialize(System.IO.TextWriter,System.Object)" />
    ///  和 <see cref="M:System.Xml.Serialization.XmlSerializer.Deserialize(System.IO.Stream)" />
    ///  方法，分别。
    ///</summary>
    ///<returns>
    ///  生成并将其识别 XML 文档实例中的 XML 根元素的名称。
    ///  默认值是序列化类的名称。
    ///</returns>
    property ElementName: string read get_ElementName write set_ElementName;
    ///<summary>
    ///  获取或设置 XML 根元素的命名空间。
    ///</summary>
    ///<returns>
    ///  XML 元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置 XML 根元素的 XSD 数据类型。
    ///</summary>
    ///<returns>
    ///  XSD （XML 架构文档） 数据类型，按照万维网联合会 (www.w3.org) 文档定义名为"XML 架构︰ 数据类型"。
    ///</returns>
    property DataType: string read get_DataType write set_DataType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  必须设置为成员序列化为 <see langword="null" />
    ///  到 <see langword="xsi:nil" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  生成 <see langword="xsi:nil" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsNullable: Boolean read get_IsNullable write set_IsNullable;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlRootAttribute = class(TDNGenericImport<DNXmlRootAttributeClass, DNXmlRootAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaProviderAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{717D97CA-7345-52C6-A396-B6B44D2F8036}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
    ///  类的新实例，需要一个静态方法的名称，该方法提供了该类型的 XML 架构。
    ///</summary>
    ///  <param name="methodName">
    ///  必须实现的静态方法的名称。
    ///</param>
    {class} function init(methodName: string): DNXmlSchemaProviderAttribute;

  end;

  ///<summary>
  ///  应用于某个类型时，存储返回 XML 架构的该类型静态方法的名称和控制该类型序列化的 <see cref="T:System.Xml.XmlQualifiedName" />
  ///  （对于匿名类型，为 <see cref="T:System.Xml.Schema.XmlSchemaType" />
  ///  ）。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSchemaProviderAttribute')]
  DNXmlSchemaProviderAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{204D72A2-7500-31FC-A821-4468DF082FD0}']
  { getters & setters } 

    function get_MethodName: string;
    function get_IsAny: Boolean;
    procedure set_IsAny(value: Boolean);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取静态方法的名称，该方法提供类型的 XML 架构和类型的 XML 架构数据类型的名称。
    ///</summary>
    ///<returns>
    ///  该方法的名称，XML 基础结构调用该方法以返回 XML 架构。
    ///</returns>
    property MethodName: string read get_MethodName;
    ///<summary>
    ///  获取或设置一个值，该值确定目标类是否为通配符，或者此类的架构是否只包含 <see langword="xs:any" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  如果此类是通配符或者其架构仅包含 <see langword="xs:any" />
    ///  元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsAny: Boolean read get_IsAny write set_IsAny;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSchemaProviderAttribute = class(TDNGenericImport<DNXmlSchemaProviderAttributeClass, DNXmlSchemaProviderAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerAssemblyAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{88CB88A1-0530-5FCA-8EEE-E69EE246679B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSerializerAssemblyAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" />
    ///  初始化具有指定的程序集名称。
    ///</summary>
    ///  <param name="assemblyName">
    ///  简单、 非加密的程序集的名称。
    ///</param>
    {class} function init(assemblyName: string): DNXmlSerializerAssemblyAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializerAssemblyAttribute" />
    ///  使用指定的程序集名称和程序集的位置。
    ///</summary>
    ///  <param name="assemblyName">
    ///  简单、 非加密的程序集的名称。
    ///</param>
    ///  <param name="codeBase">
    ///  一个字符串，则该程序集的 URL 位置。
    ///</param>
    {class} function init(assemblyName: string; codeBase: string): DNXmlSerializerAssemblyAttribute; overload;

  end;

  ///<summary>
  ///  应用于 Web 服务客户端代理，使您能够指定包含自定义序列化程序的程序集。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializerAssemblyAttribute')]
  DNXmlSerializerAssemblyAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{B00E3011-10AE-3FEB-A5D9-244D5A098F97}']
  { getters & setters } 

    function get_CodeBase: string;
    procedure set_CodeBase(value: string);
    function get_AssemblyName: string;
    procedure set_AssemblyName(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置包含序列化程序的程序集的位置。
    ///</summary>
    ///<returns>
    ///  一个位置，如路径或 URI 指向程序集。
    ///</returns>
    property CodeBase: string read get_CodeBase write set_CodeBase;
    ///<summary>
    ///  获取或设置包含一组特定的类型的序列化程序的程序集的名称。
    ///</summary>
    ///<returns>
    ///  简单、 非加密的程序集的名称。
    ///</returns>
    property AssemblyName: string read get_AssemblyName write set_AssemblyName;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerAssemblyAttribute = class(TDNGenericImport<DNXmlSerializerAssemblyAttributeClass, DNXmlSerializerAssemblyAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerVersionAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{3402FBB1-BFBD-59C6-8F91-2816F1EACEF9}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSerializerVersionAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializerVersionAttribute" />
    ///  指定类型的类。
    ///</summary>
    ///  <param name="type">
    ///  正在序列化类型。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlSerializerVersionAttribute; overload;

  end;

  ///<summary>
  ///  表示代码生成了序列化基础结构，此特性应用于程序集时可以重用来换取改善性能。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializerVersionAttribute')]
  DNXmlSerializerVersionAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C6CC4642-93E7-384A-BF52-BB899D0EA879}']
  { getters & setters } 

    function get_ParentAssemblyId: string;
    procedure set_ParentAssemblyId(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置父程序集的标识。
    ///</summary>
    ///<returns>
    ///  父程序集的版本。
    ///</returns>
    property ParentAssemblyId: string read get_ParentAssemblyId write set_ParentAssemblyId;
    ///<summary>
    ///  获取或设置程序集的版本号。
    ///</summary>
    ///<returns>
    ///  程序集的版本。
    ///</returns>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  获取或设置程序集的公共语言运行时 (CLR) 命名空间。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含程序集的公共语言运行时 (CLR) 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置序列化程序进行操作的类型。
    ///</summary>
    ///<returns>
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlSerializerVersionAttribute = class(TDNGenericImport<DNXmlSerializerVersionAttributeClass, DNXmlSerializerVersionAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTextAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{80F995E0-F5A9-55A8-B4EE-C352D10CAD6F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlTextAttribute; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlTextAttribute" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要进行序列化的成员。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlTextAttribute; overload;

  end;

  ///<summary>
  ///  指示 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  成员必须处理作为 XML 文本中，当序列化或反序列化包含它的类。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlTextAttribute')]
  DNXmlTextAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{27A1026B-067E-387B-8334-BDA5FD2753C8}']
  { getters & setters } 

    function get_Type: DDN.mscorlib.DNType;
    procedure set_Type(value: DDN.mscorlib.DNType);
    function get_DataType: string;
    procedure set_DataType(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置成员类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  的成员。
    ///</returns>
    property &Type: DDN.mscorlib.DNType read get_Type write set_Type;
    ///<summary>
    ///  获取或设置生成的文本的 XML 架构定义语言 (XSD) 数据类型 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</summary>
    ///<returns>
    ///  XML 架构 (XSD) 数据类型，按照万维网联合会 (www.w3.org) 文档"XML 架构 Part 2: Datatypes"的定义。
    ///</returns>
    ///<exception cref="T:System.Exception">
    ///  具有指定的 XML 架构数据类型无法映射到.NET 数据类型。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  具有指定的 XML 架构数据类型的属性无效，无法转换为成员类型。
    ///</exception>
    property DataType: string read get_DataType write set_DataType;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlTextAttribute = class(TDNGenericImport<DNXmlTextAttributeClass, DNXmlTextAttribute>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeAttributeClass = interface(DDN.mscorlib.DNAttributeClass)
  ['{63CD88E5-BB13-59C2-BB8E-01B59BCC1A18}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlTypeAttribute; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
    ///  类并指定 XML 类型的名称。
    ///</summary>
    ///  <param name="typeName">
    ///  XML 名称键入 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  时它将序列化的类实例 （并识别它反序列化的类实例时），将生成。
    ///</param>
    {class} function init(typeName: string): DNXmlTypeAttribute; overload;

  end;

  ///<summary>
  ///  控制由序列化属性目标时，将生成的 XML 架构 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlTypeAttribute')]
  DNXmlTypeAttribute = interface(DDN.mscorlib.DNAttribute)
  ['{C309FF1D-96BE-3811-B0CD-391ACC257CEF}']
  { getters & setters } 

    function get_AnonymousType: Boolean;
    procedure set_AnonymousType(value: Boolean);
    function get_IncludeInSchema: Boolean;
    procedure set_IncludeInSchema(value: Boolean);
    function get_TypeName: string;
    procedure set_TypeName(value: string);
    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_TypeId: DDN.mscorlib.DNObject;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function Match(obj: DDN.mscorlib.DNObject): Boolean;
    function IsDefaultAttribute: Boolean;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，确定生成的架构类型是否为 XSD 匿名类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果生成的架构类型是 XSD 匿名类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property AnonymousType: Boolean read get_AnonymousType write set_AnonymousType;
    ///<summary>
    ///  获取或设置一个值，该值指示是否要在 XML 架构文档中包括该类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  要在 XML 架构文档; 中包括该类型否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IncludeInSchema: Boolean read get_IncludeInSchema write set_IncludeInSchema;
    ///<summary>
    ///  获取或设置 XML 类型的名称。
    ///</summary>
    ///<returns>
    ///  XML 类型的名称。
    ///</returns>
    property TypeName: string read get_TypeName write set_TypeName;
    ///<summary>
    ///  获取或设置 XML 类型的命名空间。
    ///</summary>
    ///<returns>
    ///  XML 类型的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    property TypeId: DDN.mscorlib.DNObject read get_TypeId;
  end;

  TDNXmlTypeAttribute = class(TDNGenericImport<DNXmlTypeAttributeClass, DNXmlTypeAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{D5C3C4A3-9DFD-54C7-AD9D-4639E2276E59}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="XmlSchemaObjectCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaObjectCollection; overload;
    ///<summary>
    ///  新实例初始化 <see langword="XmlSchemaObjectCollection" />
    ///  采用类 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///  <param name="parent"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</param>
    {class} function init(parent: DNXmlSchemaObject): DNXmlSchemaObjectCollection; overload;

  end;

  ///<summary><see cref="T:System.Xml.Schema.XmlSchemaObject" />
  ///  的集合。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaObjectCollection')]
  DNXmlSchemaObjectCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{596E0E99-AE45-3841-A593-3BC7DF11D333}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchemaObject;
    procedure set_Item(index: Int32; value: DNXmlSchemaObject);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  返回一个枚举数用于循环访问 <see langword="XmlSchemaObjects" />
    ///  中包含 <see langword="XmlSchemaObjectCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  迭代器返回 <see cref="T:System.Xml.Schema.XmlSchemaObjectEnumerator" />
    ///  。
    ///</returns>
    function GetEnumerator: DNXmlSchemaObjectEnumerator;
    ///<summary>
    ///  将 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  添加到 <see langword="XmlSchemaObjectCollection" />
    ///  中。
    ///</summary>
    ///  <param name="item"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</param>
    ///<returns>
    ///  已从该处添加项的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  大于 <see langword="Count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  指定参数的类型不是 <see cref="T:System.Xml.Schema.XmlSchemaExternal" />
    ///  或其派生的类型 <see cref="T:System.Xml.Schema.XmlSchemaImport" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaInclude" />
    ///  , ，和 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />
    ///  。
    ///</exception>
    function Add(item: DNXmlSchemaObject): Int32;
    ///<summary>
    ///  将插入 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  到 <see langword="XmlSchemaObjectCollection" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，应在该位置插入项。
    ///</param>
    ///  <param name="item">
    ///  要插入的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  大于 <see langword="Count" />
    ///  。
    ///</exception>
    procedure Insert(index: Int32; item: DNXmlSchemaObject);
    ///<summary>
    ///  获取对应于指定的集合索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///  <param name="item"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  你想要返回其索引。
    ///</param>
    ///<returns>
    ///  对应于指定的索引 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    function IndexOf(item: DNXmlSchemaObject): Int32;
    ///<summary>
    ///  指示如果指定 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  处于 <see langword="XmlSchemaObjectCollection" />
    ///  。
    ///</summary>
    ///  <param name="item"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的限定的名是集合中的否则，返回 <see langword="false" />
    ///  。
    ///  如果提供空值， <see langword="false" />
    ///  返回因为具有空名称的限定的名。
    ///</returns>
    function &Contains(item: DNXmlSchemaObject): Boolean;
    ///<summary>
    ///  删除 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  从 <see langword="XmlSchemaObjectCollection" />
    ///  。
    ///</summary>
    ///  <param name="item">
    ///  要移除的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</param>
    procedure Remove(item: DNXmlSchemaObject);
    ///<summary>
    ///  将所有复制 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  s 从到给定数组，从给定索引处开始的集合。
    ///</summary>
    ///  <param name="array">
    ///  一维数组，它是从 <see langword="XmlSchemaObjectCollection" />
    ///  中复制的元素的目标。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制的位置的索引（从零开始）。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为空引用 (<see langword="Nothing" />
    ///  在 Visual Basic 中)。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  小于零。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="array" />
    ///  是多维的。
    ///  - 或 -
    ///  <paramref name="index" />
    ///  等于或大于 <paramref name="array" />
    ///  的长度。
    ///  - 或 -
    ///  源 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  中的元素数大于从索引到目标数组末尾处的可用空间。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  源类型 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  无法自动转换为目标数组的类型。
    ///</exception>
    procedure CopyTo(&array: TArray<DNXmlSchemaObject>; index: Int32);
    procedure RemoveAt(index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlSchemaObject read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemaObjectCollection = class(TDNGenericImport<DNXmlSchemaObjectCollectionClass, DNXmlSchemaObjectCollection>) end;

  //-------------namespace: System.Xml.Serialization.Advanced----------------
  DNSchemaImporterExtensionCollectionClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{7799DB0A-F760-5ED0-A35F-2DFB8ECF2F26}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSchemaImporterExtensionCollection;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection')]
  DNSchemaImporterExtensionCollection = interface(DDN.mscorlib.DNCollectionBase)
  ['{91A8EB3D-084B-359D-B02C-2EAA9E5C3B20}']
  { getters & setters } 

    function get_Item(index: Int32): DNSchemaImporterExtension;
    procedure set_Item(index: Int32; value: DNSchemaImporterExtension);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  将指定导入程序扩展添加到集合。
    ///</summary>
    ///  <param name="extension">
    ///  要添加的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  所添加的扩展的索引。
    ///</returns>
    function Add(extension: DNSchemaImporterExtension): Int32; overload;
    ///<summary>
    ///  删除 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  , 、 按名称从集合中指定。
    ///</summary>
    ///  <param name="name">
    ///  要移除的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  的名称。
    ///  使用集的名称 <see cref="M:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection.Add(System.String,System.Type)" />
    ///  方法。
    ///</param>
    procedure Remove(name: string); overload;
    ///<summary>
    ///  清除集合中的导入程序扩展。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  将指定 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  插入集合中的指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  从零开始的索引，到 <paramref name="extension" />
    ///  应插入。
    ///</param>
    ///  <param name="extension">
    ///  要插入的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; extension: DNSchemaImporterExtension);
    ///<summary>
    ///  搜索指定项并返回集合中的第一个匹配项的从零开始索引。
    ///</summary>
    ///  <param name="extension">
    ///  要搜索的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  。
    ///</param>
    ///<returns>
    ///  找到的项的索引。
    ///</returns>
    function IndexOf(extension: DNSchemaImporterExtension): Int32;
    ///<summary>
    ///  获取一个值，该值指示在集合中是否存在指定导入程序扩展。
    ///</summary>
    ///  <param name="extension">
    ///  要搜索的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到扩展，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(extension: DNSchemaImporterExtension): Boolean;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  。
    ///</summary>
    ///  <param name="extension">
    ///  要移除的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  。
    ///</param>
    procedure Remove(extension: DNSchemaImporterExtension); overload;
    ///<summary>
    ///  当前的所有元素都复制 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  到指定的数组 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  中指定索引处的对象。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
    ///  要复制到当前集合。
    ///</param>
    ///  <param name="index">
    ///  从该处添加集合的从零开始索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNSchemaImporterExtension>; index: Int32);
    ///<summary>
    ///  将指定导入程序扩展添加到集合。
    ///  名称 参数允许您提供了扩展的自定义名称。
    ///</summary>
    ///  <param name="name">
    ///  自定义扩展插件名称。
    ///</param>
    ///  <param name="type">
    ///  要添加的 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的索引。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  值 类型 不继承 <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtensionCollection" />
    ///  。
    ///</exception>
    function Add(name: string; &type: DDN.mscorlib.DNType): Int32; overload;
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNSchemaImporterExtension read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNSchemaImporterExtensionCollection = class(TDNGenericImport<DNSchemaImporterExtensionCollectionClass, DNSchemaImporterExtensionCollection>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAnyElementAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{9B8E8740-3F89-54AB-8C57-AA3D2861CB2F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlAnyElementAttributes;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAnyElementAttributes')]
  DNXmlAnyElementAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{7573313D-5C10-3E5A-A8DC-1552B0605CE5}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlAnyElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlAnyElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  到集合。
    ///</summary>
    ///  <param name="attribute">
    ///  要添加的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的索引 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</returns>
    function Add(attribute: DNXmlAnyElementAttribute): Int32;
    ///<summary>
    ///  将插入 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  插入集合中的指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  索引位置 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  插入。
    ///</param>
    ///  <param name="attribute">
    ///  要插入的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; attribute: DNXmlAnyElementAttribute);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</summary>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  您需要其索引。
    ///</param>
    ///<returns>
    ///  指定的索引 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</returns>
    function IndexOf(attribute: DNXmlAnyElementAttribute): Int32;
    ///<summary>
    ///  获取一个值，该值指示是否指定 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  集合中存在。
    ///</summary>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  您感兴趣。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  存在于集合; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(attribute: DNXmlAnyElementAttribute): Boolean;
    ///<summary>
    ///  从集合中移除指定的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</summary>
    ///  <param name="attribute">
    ///  要移除的 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  。
    ///</param>
    procedure Remove(attribute: DNXmlAnyElementAttribute);
    ///<summary>
    ///  将整个集合复制到兼容的一维数组的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  对象，从目标数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维数组 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  从集合复制的元素的目标对象。
    ///  该数组的索引必须从零开始。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlAnyElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlAnyElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlAnyElementAttributes = class(TDNGenericImport<DNXmlAnyElementAttributesClass, DNXmlAnyElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlArrayItemAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{1502C14A-1A8E-5E6B-9DEF-B11AAA64421A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlArrayItemAttributes;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
  ///  对象集合。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlArrayItemAttributes')]
  DNXmlArrayItemAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{38B4E5B9-F563-311F-B7F9-59C041092790}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlArrayItemAttribute;
    procedure set_Item(index: Int32; value: DNXmlArrayItemAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  到集合。
    ///</summary>
    ///  <param name="attribute">
    ///  要添加到集合中的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  添加的项的索引。
    ///</returns>
    function Add(attribute: DNXmlArrayItemAttribute): Int32;
    ///<summary>
    ///  将插入 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  插入集合中的指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  在该位置插入该属性的索引。
    ///</param>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  插入。
    ///</param>
    procedure Insert(index: Int32; attribute: DNXmlArrayItemAttribute);
    ///<summary>
    ///  返回指定的第一个匹配项的从零开始索引 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  集合或-1，如果在集合中找不到该属性中。
    ///</summary>
    ///  <param name="attribute">
    ///  要在集合中查找的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  第一个索引 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  集合或-1，如果在集合中找不到该属性中。
    ///</returns>
    function IndexOf(attribute: DNXmlArrayItemAttribute): Int32;
    ///<summary>
    ///  确定集合是否包含指定 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  。
    ///</summary>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  检查。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合包含指定 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(attribute: DNXmlArrayItemAttribute): Boolean;
    ///<summary>
    ///  删除 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  从集合中，如果不存在。
    ///</summary>
    ///  <param name="attribute">
    ///  要移除的 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  。
    ///</param>
    procedure Remove(attribute: DNXmlArrayItemAttribute);
    ///<summary>
    ///  副本 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  到集合中，从指定的目标索引处开始的数组。
    ///</summary>
    ///  <param name="array">
    ///  数组 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  要复制到集合的对象。
    ///</param>
    ///  <param name="index">
    ///  从该处开始复制的属性的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlArrayItemAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlArrayItemAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlArrayItemAttributes = class(TDNGenericImport<DNXmlArrayItemAttributesClass, DNXmlArrayItemAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementAttributesClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{F8F22478-879B-5627-B9C6-0A1F51F290C2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlElementAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlElementAttributes;

  end;

  ///<summary>
  ///  表示 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  用于重写其序列化类的默认方式的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
  ///  对象的集合。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlElementAttributes')]
  DNXmlElementAttributes = interface(DDN.mscorlib.DNCollectionBase)
  ['{5928E3D2-6501-3262-BC01-7B36866FDF37}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlElementAttribute;
    procedure set_Item(index: Int32; value: DNXmlElementAttribute);
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  到集合。
    ///</summary>
    ///  <param name="attribute">
    ///  要添加的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  新添加的项的从零开始索引。
    ///</returns>
    function Add(attribute: DNXmlElementAttribute): Int32;
    ///<summary>
    ///  将插入 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  到集合。
    ///</summary>
    ///  <param name="index">
    ///  该成员插入位置的从零开始索引。
    ///</param>
    ///  <param name="attribute">
    ///  要插入的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  。
    ///</param>
    procedure Insert(index: Int32; attribute: DNXmlElementAttribute);
    ///<summary>
    ///  获取指定的索引 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  。
    ///</summary>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  正在检索其索引。
    ///</param>
    ///<returns>
    ///  从零开始的索引 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  。
    ///</returns>
    function IndexOf(attribute: DNXmlElementAttribute): Int32;
    ///<summary>
    ///  确定集合是否包含指定的对象。
    ///</summary>
    ///  <param name="attribute"><see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  寻找。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该对象存在于集合;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(attribute: DNXmlElementAttribute): Boolean;
    ///<summary>
    ///  从集合中删除指定的对象。
    ///</summary>
    ///  <param name="attribute">
    ///  要从该集合中移除的 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  。
    ///</param>
    procedure Remove(attribute: DNXmlElementAttribute);
    ///<summary>
    ///  副本 <see cref="T:System.Xml.Serialization.XmlElementAttributes" />
    ///  , ，或它的一部分到一维数组。
    ///</summary>
    ///  <param name="array"><see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  要存放复制的元素数组。
    ///</param>
    ///  <param name="index"><paramref name="array" />
    ///  中从零开始的索引，从此处开始复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlElementAttribute>; index: Int32);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlElementAttribute read get_Item write set_Item; default;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlElementAttributes = class(TDNGenericImport<DNXmlElementAttributesClass, DNXmlElementAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemasClass = interface(DDN.mscorlib.DNCollectionBaseClass)
  ['{1F11517E-6391-5280-AA42-0F31A3AE13AB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemas;

  { static methods } 

    ///<summary>
    ///  确定指定的 XML 架构是否包含一个自定义的静态方法 <see langword="IsDataSet" />
    ///  属性设置为 <see langword="true" />
    ///  , ，或它的等效项。
    ///</summary>
    ///  <param name="schema">
    ///  若要检查的 XML 架构 <see langword="IsDataSet" />
    ///  特性 <see langword="true" />
    ///  值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的架构存在，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsDataSet(schema: DNXmlSchema): Boolean;

  end;

  ///<summary>
  ///  表示 XML 架构的集合。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSchemas')]
  DNXmlSchemas = interface(DDN.mscorlib.DNCollectionBase)
  ['{CAA46B12-3C51-3B6B-9832-0F9E5372C47C}']
  { getters & setters } 

    function get_Item(index: Int32): DNXmlSchema; overload;
    procedure set_Item(index: Int32; value: DNXmlSchema);
    function get_Item(ns: string): DNXmlSchema; overload;
    function get_IsCompiled: Boolean;
    function get_Capacity: Int32;
    procedure set_Capacity(value: Int32);
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  获取属于同一命名空间的架构的集合。
    ///</summary>
    ///  <param name="ns">
    ///  要检索的架构命名空间。
    ///</param>
    ///<returns><see cref="T:System.Collections.IList" />
    ///  实现，它包含的架构。
    ///</returns>
    function GetSchemas(ns: string): DDN.mscorlib.DNIList;
    ///<summary>
    ///  将对象添加到集合的末尾。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象添加到的对象的集合。
    ///</param>
    ///<returns>
    ///  在该索引处 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  添加。
    ///</returns>
    function Add(schema: DNXmlSchema): Int32; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示集合的程序集引用的对象。
    ///</summary>
    ///  <param name="schema">
    ///  要添加的 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  。
    ///</param>
    ///  <param name="baseUri"><see cref="T:System.Uri" />
    ///  架构对象。
    ///</param>
    ///<returns>
    ///  在该索引处 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  添加。
    ///</returns>
    function Add(schema: DNXmlSchema; baseUri: DDN.System.DNUri): Int32; overload;
    ///<summary>
    ///  添加的一个实例 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  类传递给集合的末尾。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  对象添加到集合的末尾。
    ///</param>
    procedure Add(schemas: DNXmlSchemas); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示集合的程序集引用的对象。
    ///</summary>
    ///  <param name="schema">
    ///  要添加的 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  。
    ///</param>
    procedure AddReference(schema: DNXmlSchema);
    ///<summary>
    ///  将架构插入 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  中指定索引处。
    ///</summary>
    ///  <param name="index">
    ///  应插入 <paramref name="schema" />
    ///  的从零开始的索引。
    ///</param>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  要插入对象。
    ///</param>
    procedure Insert(index: Int32; schema: DNXmlSchema);
    ///<summary>
    ///  搜索指定的架构，并返回整个内的第一个匹配项的从零开始索引 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  。
    ///</summary>
    ///  <param name="schema">
    ///  要查找的 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  。
    ///</param>
    ///<returns>
    ///  在整个值的第一个匹配项的从零开始索引 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  , ，如果找到; 否则为-1。
    ///</returns>
    function IndexOf(schema: DNXmlSchema): Int32;
    ///<summary>
    ///  确定是否 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  包含特定的架构。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  要查找对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  , 如果集合包含指定的项;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    ///<summary>
    ///  返回一个值，该值指示集合是否包含 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  属于指定的命名空间的对象。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  要检查的项的命名空间。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到该项目;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(targetNamespace: string): Boolean; overload;
    ///<summary>
    ///  移除从特定的架构的第一个匹配项 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  。
    ///</summary>
    ///  <param name="schema">
    ///  要移除的 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  。
    ///</param>
    procedure Remove(schema: DNXmlSchema);
    ///<summary>
    ///  将复制整个 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  到一维兼容 <see cref="T:System.Array" />
    ///  , ，从目标数组的指定索引处开始。
    ///</summary>
    ///  <param name="array">
    ///  一维 <see cref="T:System.Array" />
    ///  从复制的架构的目标 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  。
    ///<see cref="T:System.Array" />
    ///  必须具有从零开始的索引。
    ///</param>
    ///  <param name="index">
    ///  一个 32 位整数，表示数组中的索引位置开始进行复制。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    ///<summary>
    ///  在一个 XML 架构中找到 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  的指定的名称和类型。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，指定完全限定的名称与命名空间用来定位 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  集合中的对象。
    ///</param>
    ///  <param name="type">
    ///  要查找的对象的 <see cref="T:System.Type" />
    ///  。
    ///  可能的类型包括︰ <see cref="T:System.Xml.Schema.XmlSchemaGroup" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  , ，和 <see cref="T:System.Xml.Schema.XmlSchemaNotation" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  实例，如 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  。
    ///</returns>
    function Find(name: DNXmlQualifiedName; &type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  处理 XML 架构中的元素和属性名称和 （可选） 验证 XML 架构。
    ///</summary>
    ///  <param name="handler">
    ///  一个 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  ，它指定在 XML 架构验证过程中处理错误和警告的回调方法，如果严格参数设置为 <see langword="true" />
    ///  。
    ///</param>
    ///  <param name="fullCompile"><see langword="true" />
    ///  若要在集合中使用 XML 架构验证 <see cref="M:System.Xml.Serialization.XmlSchemas.Compile(System.Xml.Schema.ValidationEventHandler,System.Boolean)" />
    ///  方法 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  类; 否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure Compile(handler: DNValidationEventHandler; fullCompile: Boolean);
    procedure RemoveAt(index: Int32);
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[index: Int32]: DNXmlSchema read get_Item write set_Item; default;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示是否已编译架构。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果架构已编译;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    property Capacity: Int32 read get_Capacity write set_Capacity;
    property Count: Int32 read get_Count;
  end;

  TDNXmlSchemas = class(TDNGenericImport<DNXmlSchemasClass, DNXmlSchemas>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNValidationEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FD89FE6F-3039-5078-BA46-B00CE55AACA1}']
  end;

  ///<summary>
  ///  返回与相关的详细的信息 <see langword="ValidationEventHandler" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Schema.ValidationEventArgs')]
  DNValidationEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{49138DCC-3D4B-3D96-AF44-350EF4295AB3}']
  { getters & setters } 

    function get_Severity: DNXmlSeverityType;
    function get_Exception: DNXmlSchemaException;
    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取验证事件的严重级别。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSeverityType" />
    ///  值，该值表示验证事件的严重性。
    ///</returns>
    property Severity: DNXmlSeverityType read get_Severity;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  与验证事件关联。
    ///</summary>
    ///<returns><see langword="XmlSchemaException" />
    ///  与验证事件关联。
    ///</returns>
    property Exception: DNXmlSchemaException read get_Exception;
    ///<summary>
    ///  获取对应于验证事件的文本说明。
    ///</summary>
    ///<returns>
    ///  文本说明。
    ///</returns>
    property Message: string read get_Message;
  end;

  TDNValidationEventArgs = class(TDNGenericImport<DNValidationEventArgsClass, DNValidationEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNUnreferencedObjectEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{7617BC02-6B99-5146-A719-F16FDE6B486F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.UnreferencedObjectEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="o">
    ///  未引用的对象。
    ///</param>
    ///  <param name="id">
    ///  用于识别未引用的对象的唯一字符串。
    ///</param>
    {class} function init(o: DDN.mscorlib.DNObject; id: string): DNUnreferencedObjectEventArgs;

  end;

  ///<summary>
  ///  反序列化期间找到一个编码的 SOAP XML 流中的已知的但未引用的对象提供数据。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.UnreferencedObjectEventArgs')]
  DNUnreferencedObjectEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{CFC824D5-B349-3ADE-9231-EB95E797D4F2}']
  { getters & setters } 

    function get_UnreferencedObject: DDN.mscorlib.DNObject;
    function get_UnreferencedId: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取反序列化，但未引用的对象。
    ///</summary>
    ///<returns>
    ///  反序列化，但未引用的对象。
    ///</returns>
    property UnreferencedObject: DDN.mscorlib.DNObject read get_UnreferencedObject;
    ///<summary>
    ///  获取该对象的 ID。
    ///</summary>
    ///<returns>
    ///  对象的 ID。
    ///</returns>
    property UnreferencedId: string read get_UnreferencedId;
  end;

  TDNUnreferencedObjectEventArgs = class(TDNGenericImport<DNUnreferencedObjectEventArgsClass, DNUnreferencedObjectEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{997820B5-29F5-571C-9886-4457238350D8}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAttributeEventArgs')]
  DNXmlAttributeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{651D1E7C-E0A0-390F-8AD9-FDDE2A67ECAC}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_Attr: DNXmlAttribute;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedAttributes: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要反序列化的对象。
    ///</summary>
    ///<returns>
    ///  要反序列化对象。
    ///</returns>
    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    ///<summary>
    ///  获取一个对象，表示未知的 XML 属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlAttribute" />
    ///  表示未知的 XML 属性。
    ///</returns>
    property Attr: DNXmlAttribute read get_Attr;
    ///<summary>
    ///  获取未知的 XML 属性的行号。
    ///</summary>
    ///<returns>
    ///  未知的 XML 属性行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取未知的 XML 属性的行中的位置。
    ///</summary>
    ///<returns>
    ///  未知的 XML 属性位置编号。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取 XML 属性名称应出现在 XML 文档实例的以逗号分隔列表。
    ///</summary>
    ///<returns>
    ///  以逗号分隔的 XML 属性名称的列表。
    ///  每个名称采用以下格式︰ <paramref name="namespace" />
    ///  :<paramref name="name" />
    ///  。
    ///</returns>
    property ExpectedAttributes: string read get_ExpectedAttributes;
  end;

  TDNXmlAttributeEventArgs = class(TDNGenericImport<DNXmlAttributeEventArgsClass, DNXmlAttributeEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlElementEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{D95F4725-AEF4-5C6D-BE60-62E075E231D2}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlElementEventArgs')]
  DNXmlElementEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{61E0F174-1182-374D-9E3A-8D9866B8561D}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_Element: DNXmlElement;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_ExpectedElements: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取对象 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  反序列化。
    ///</summary>
    ///<returns>
    ///  由正在反序列化的对象 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    ///<summary>
    ///  获取表示未知的 XML 元素的对象。
    ///</summary>
    ///<returns>
    ///  表示未知的 XML 元素的对象。
    ///</returns>
    property Element: DNXmlElement read get_Element;
    ///<summary>
    ///  获取行号，如果 XML 读取器遇到未知的元素 <see cref="T:System.Xml.XmlTextReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  其中的 XML 读取器是否遇到未知的元素的行号 <see cref="T:System.Xml.XmlTextReader" />
    ///  ; 否则为-1。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取的地点在行中的未知的元素的 XML 读取器是否 <see cref="T:System.Xml.XmlTextReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果 XML 读取器是未知的元素出现的位置的行中的数字 <see cref="T:System.Xml.XmlTextReader" />
    ///  ; 否则为-1。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取 XML 元素名称应出现在 XML 文档实例的以逗号分隔列表。
    ///</summary>
    ///<returns>
    ///  以逗号分隔的 XML 元素名称的列表。
    ///  每个名称采用以下格式︰ <paramref name="namespace" />
    ///  :<paramref name="name" />
    ///  。
    ///</returns>
    property ExpectedElements: string read get_ExpectedElements;
  end;

  TDNXmlElementEventArgs = class(TDNGenericImport<DNXmlElementEventArgsClass, DNXmlElementEventArgs>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlNodeEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{FC43EE19-62C8-59F5-8D96-F5D73A9B02BE}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlNodeEventArgs')]
  DNXmlNodeEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6015482F-C16B-3157-9314-1EC423F32215}']
  { getters & setters } 

    function get_ObjectBeingDeserialized: DDN.mscorlib.DNObject;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Text: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取要反序列化的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  要反序列化。
    ///</returns>
    property ObjectBeingDeserialized: DDN.mscorlib.DNObject read get_ObjectBeingDeserialized;
    ///<summary>
    ///  获取要反序列化的 XML 节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  ，表示要反序列化的 XML 节点。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取要反序列化的 XML 节点的名称。
    ///</summary>
    ///<returns>
    ///  要反序列化节点的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取要反序列化的 XML 节点的 XML 本地名称。
    ///</summary>
    ///<returns>
    ///  要反序列化节点的 XML 本地名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取命名空间都与要反序列化的 XML 节点相关联的 URI。
    ///</summary>
    ///<returns>
    ///  命名空间都与要反序列化的 XML 节点相关联的 URI。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取要反序列化的 XML 节点的文本。
    ///</summary>
    ///<returns>
    ///  要反序列化的 XML 节点的文本。
    ///</returns>
    property Text: string read get_Text;
    ///<summary>
    ///  获取未知的 XML 节点的行号。
    ///</summary>
    ///<returns>
    ///  未知的 XML 节点的行数。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取未知的 XML 节点的行中的位置。
    ///</summary>
    ///<returns>
    ///  未知的 XML 节点的位置编号。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
  end;

  TDNXmlNodeEventArgs = class(TDNGenericImport<DNXmlNodeEventArgsClass, DNXmlNodeEventArgs>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeChangedEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{A5830A41-9A45-5E8D-BC73-144AE5DF513F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlNodeChangedEventArgs" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="node"><see cref="T:System.Xml.XmlNode" />
    ///  生成了该事件。
    ///</param>
    ///  <param name="oldParent">
    ///  旧的父级 <see cref="T:System.Xml.XmlNode" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  生成了该事件。
    ///</param>
    ///  <param name="newParent">
    ///  新的父级 <see cref="T:System.Xml.XmlNode" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  生成了该事件。
    ///</param>
    ///  <param name="oldValue">
    ///  旧值 <see cref="T:System.Xml.XmlNode" />
    ///  生成了该事件。
    ///</param>
    ///  <param name="newValue">
    ///  新值 <see cref="T:System.Xml.XmlNode" />
    ///  生成了该事件。
    ///</param>
    ///  <param name="action"><see cref="T:System.Xml.XmlNodeChangedAction" />
    ///  。
    ///</param>
    {class} function init(node: DNXmlNode; oldParent: DNXmlNode; newParent: DNXmlNode; oldValue: string; newValue: string; action: DNXmlNodeChangedAction): DNXmlNodeChangedEventArgs;

  end;

  ///<summary>
  ///  将提供数据供 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeChanging" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserted" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeInserting" />
  ///  , ，<see cref="E:System.Xml.XmlDocument.NodeRemoved" />
  ///  和 <see cref="E:System.Xml.XmlDocument.NodeRemoving" />
  ///  事件。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeChangedEventArgs')]
  DNXmlNodeChangedEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{6F33740C-B2E1-3A44-A063-8F78C5C6CD1B}']
  { getters & setters } 

    function get_Action: DNXmlNodeChangedAction;
    function get_Node: DNXmlNode;
    function get_OldParent: DNXmlNode;
    function get_NewParent: DNXmlNode;
    function get_OldValue: string;
    function get_NewValue: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示发生何种类型的节点更改事件。
    ///</summary>
    ///<returns><see langword="XmlNodeChangedAction" />
    ///  描述该节点的值更改事件。
    ///  XmlNodeChangedAction 值
    ///  描述
    ///  Insert
    ///  已或将插入的节点。
    ///  删除
    ///  节点已被，否则会被删除。
    ///  更改
    ///  节点已被更改或将更改。
    ///<see langword="Action" />
    ///  值不会区分事件何时发生 （之前或之后）。
    ///  您可以创建单独的事件处理程序来处理这两个实例。
    ///</returns>
    property Action: DNXmlNodeChangedAction read get_Action;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  要添加、 移除或更改。
    ///</summary>
    ///<returns><see langword="XmlNode" />
    ///  正被添加、 删除或已更改; 此属性绝不会返回 <see langword="null" />
    ///  。
    ///</returns>
    property Node: DNXmlNode read get_Node;
    ///<summary>
    ///  获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" />
    ///  操作开始前。
    ///</summary>
    ///<returns>
    ///  值 <see langword="ParentNode" />
    ///  操作开始前。
    ///  此属性返回 <see langword="null" />
    ///  如果节点没有父级。
    ///  对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />
    ///  。
    ///</returns>
    property OldParent: DNXmlNode read get_OldParent;
    ///<summary>
    ///  获取的值 <see cref="P:System.Xml.XmlNode.ParentNode" />
    ///  操作完成后。
    ///</summary>
    ///<returns>
    ///  值 <see langword="ParentNode" />
    ///  操作完成后。
    ///  此属性返回 <see langword="null" />
    ///  如果已移除的节点。
    ///  对于属性节点此属性返回 <see cref="P:System.Xml.XmlAttribute.OwnerElement" />
    ///  。
    ///</returns>
    property NewParent: DNXmlNode read get_NewParent;
    ///<summary>
    ///  获取节点的原始值。
    ///</summary>
    ///<returns>
    ///  节点的原始值。
    ///  此属性返回 <see langword="null" />
    ///  节点是否既不属性，也不是文本节点，或插入节点。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" />
    ///  事件， <see langword="OldValue" />
    ///  返回成功更改是否将被替换的节点的当前值。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
    ///  事件， <see langword="OldValue" />
    ///  返回之前更改节点的值。
    ///</returns>
    property OldValue: string read get_OldValue;
    ///<summary>
    ///  获取节点的新值。
    ///</summary>
    ///<returns>
    ///  节点的新值。
    ///  此属性返回 <see langword="null" />
    ///  节点是否既不属性，也不是文本节点，或已移除的节点。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanging" />
    ///  事件， <see langword="NewValue" />
    ///  返回节点的值，如果更改成功。
    ///  如果调用 <see cref="E:System.Xml.XmlDocument.NodeChanged" />
    ///  事件， <see langword="NewValue" />
    ///  返回节点的当前值。
    ///</returns>
    property NewValue: string read get_NewValue;
  end;

  TDNXmlNodeChangedEventArgs = class(TDNGenericImport<DNXmlNodeChangedEventArgsClass, DNXmlNodeChangedEventArgs>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltMessageEncounteredEventArgsClass = interface(DDN.mscorlib.DNEventArgsClass)
  ['{5EAFE3C8-A99D-586C-A368-212AB818D2E4}']
  end;

  ///<summary>
  ///  为 <see cref="E:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered" />
  ///  事件提供数据。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltMessageEncounteredEventArgs')]
  DNXsltMessageEncounteredEventArgs = interface(DDN.mscorlib.DNEventArgs)
  ['{D64C2CC0-AC0D-3BED-8304-F97565C2AC47}']
  { getters & setters } 

    function get_Message: string;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的内容 xsl:message 元素。
    ///</summary>
    ///<returns>
    ///  内容 xsl:message 元素。
    ///</returns>
    property Message: string read get_Message;
  end;

  TDNXsltMessageEncounteredEventArgs = class(TDNGenericImport<DNXsltMessageEncounteredEventArgsClass, DNXsltMessageEncounteredEventArgs>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{4B8E330C-085D-5126-AF56-589AA8D96746}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  类，具有指定的异常消息。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    {class} function init(message: string): DNXmlSchemaException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  使用异常消息和原始 <see cref="T:System.Exception" />
    ///  导致此异常指定的对象。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的原始 T:System.Exception 对象。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  用指定的异常消息和原始 <see cref="T:System.Exception" />
    ///  对象、 行号和导致此异常指定的 xml 的行位置。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致此异常的原始 T:System.Exception 对象。
    ///</param>
    ///  <param name="lineNumber">
    ///  导致此异常的 XML 行号。
    ///</param>
    ///  <param name="linePosition">
    ///  导致此异常的 XML 行位置。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaException; overload;

  end;

  ///<summary>
  ///  返回架构异常有关的详细的信息。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaException')]
  DNXmlSchemaException = interface(DDN.mscorlib.DNSystemException)
  ['{8AABB69F-6F59-302E-86A1-437E6B0CA7EC}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see langword="XmlSchemaException" />
    ///  属性存储到 <see langword="SerializationInfo" />
    ///  类给定 <see langword="StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="info"><see langword="SerializationInfo" />
    ///  。
    ///</param>
    ///  <param name="context"><see langword="StreamingContext" />
    ///  信息。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致异常的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  导致异常的架构 URI 位置。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取指示出现了错误的行号。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示出现了错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary><see langword="XmlSchemaObject" />
    ///  生成 <see langword="XmlSchemaException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  有效的对象实例表示的结构验证错误在 XML 架构对象模型 (SOM)。
    ///</returns>
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    ///<summary>
    ///  获取此异常的错误条件的说明。
    ///</summary>
    ///<returns>
    ///  此异常的错误条件的说明。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaException = class(TDNGenericImport<DNXmlSchemaExceptionClass, DNXmlSchemaException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{E355BADA-A926-59B3-A686-91612EC07F77}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaInferenceException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  类，具有指定的错误消息。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNXmlSchemaInferenceException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  用指定的错误消息和原始 <see cref="T:System.Exception" />
    ///  导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  指定。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException"><see cref="T:System.Exception" />
    ///  对象，它包含导致原始异常 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaInferenceException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  指定类，并显示错误消息，原始 <see cref="T:System.Exception" />
    ///  导致 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  指定，和行号和行中的位置的错误指定的 XML 文档。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException"><see cref="T:System.Exception" />
    ///  对象，它包含导致原始异常 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  。
    ///</param>
    ///  <param name="lineNumber">
    ///  导致的 XML 文档中的行号 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  。
    ///</param>
    ///  <param name="linePosition">
    ///  导致的 XML 文档中的行位置 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaInferenceException; overload;

  end;

  ///<summary>
  ///  返回有关 <see cref="T:System.Xml.Schema.XmlSchemaInference" />
  ///  类在从 XML 文档推断架构时所遇错误的信息。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaInferenceException')]
  DNXmlSchemaInferenceException = interface(DNXmlSchemaException)
  ['{305ED301-6C6D-3D89-9A24-680D177D7152}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see cref="T:System.Xml.Schema.XmlSchemaInferenceException" />
    ///  对象属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象指定用于 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  指定对象。
    ///</summary>
    ///  <param name="info">
    ///  一个 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致异常的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  导致异常的架构 URI 位置。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取指示出现了错误的行号。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示出现了错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary><see langword="XmlSchemaObject" />
    ///  生成 <see langword="XmlSchemaException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  有效的对象实例表示的结构验证错误在 XML 架构对象模型 (SOM)。
    ///</returns>
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    ///<summary>
    ///  获取此异常的错误条件的说明。
    ///</summary>
    ///<returns>
    ///  此异常的错误条件的说明。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaInferenceException = class(TDNGenericImport<DNXmlSchemaInferenceExceptionClass, DNXmlSchemaInferenceException>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidationExceptionClass = interface(DNXmlSchemaExceptionClass)
  ['{24E28276-CCFA-5DAD-87F7-F068F084D0F6}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  类，具有指定的异常消息。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    {class} function init(message: string): DNXmlSchemaValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  使用异常消息和原始 <see cref="T:System.Exception" />
    ///  导致此异常指定的对象。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException">
    ///  原始 <see cref="T:System.Exception" />
    ///  导致此异常的对象。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlSchemaValidationException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  用指定的异常消息和原始 <see cref="T:System.Exception" />
    ///  对象、 行号和导致此异常指定的 xml 的行位置。
    ///</summary>
    ///  <param name="message">
    ///  一个 <see langword="string" />
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException">
    ///  原始 <see cref="T:System.Exception" />
    ///  导致此异常的对象。
    ///</param>
    ///  <param name="lineNumber">
    ///  导致此异常的 XML 行号。
    ///</param>
    ///  <param name="linePosition">
    ///  导致此异常的 XML 行位置。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlSchemaValidationException; overload;

  end;

  ///<summary>
  ///  表示正在验证的 XML 文档中遇到 XML 架构定义语言 (XSD) 架构验证错误和警告时引发的异常。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaValidationException')]
  DNXmlSchemaValidationException = interface(DNXmlSchemaException)
  ['{8E6EF0C5-0160-3931-B20C-576F8CC26C01}']
  { getters & setters } 

    function get_SourceObject: DDN.mscorlib.DNObject;
    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceSchemaObject: DNXmlSchemaObject;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  构造一个新 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  对象与给定 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  和 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  包含的所有属性的信息 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取导致以下情况的 XML 节点 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  导致以下情况的 XML 节点 <see cref="T:System.Xml.Schema.XmlSchemaValidationException" />
    ///  。
    ///</returns>
    property SourceObject: DDN.mscorlib.DNObject read get_SourceObject;
    ///<summary>
    ///  获取导致异常的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  导致异常的架构 URI 位置。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取指示出现了错误的行号。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示出现了错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary><see langword="XmlSchemaObject" />
    ///  生成 <see langword="XmlSchemaException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  有效的对象实例表示的结构验证错误在 XML 架构对象模型 (SOM)。
    ///</returns>
    property SourceSchemaObject: DNXmlSchemaObject read get_SourceSchemaObject;
    ///<summary>
    ///  获取此异常的错误条件的说明。
    ///</summary>
    ///<returns>
    ///  此异常的错误条件的说明。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlSchemaValidationException = class(TDNGenericImport<DNXmlSchemaValidationExceptionClass, DNXmlSchemaValidationException>) end;

  //-------------namespace: System.Xml----------------
  DNXmlExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{C3490C0B-EFEB-50A4-9DF8-B40B0CBD5FB4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="XmlException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see langword="XmlException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    {class} function init(message: string): DNXmlException; overload;
    ///<summary>
    ///  初始化 <see langword="XmlException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException"><see cref="T:System.Exception" />
    ///  引发了 <see langword="XmlException" />
    ///  , ，如果有的话。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXmlException; overload;
    ///<summary>
    ///  新实例初始化 <see langword="XmlException" />
    ///  类，具有指定的消息、 内部异常、 行号和行位置。
    ///</summary>
    ///  <param name="message">
    ///  错误说明。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="lineNumber">
    ///  指示发生错误的行号。
    ///</param>
    ///  <param name="linePosition">
    ///  指示发生错误的行位置。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException; lineNumber: Int32; linePosition: Int32): DNXmlException; overload;

  end;

  ///<summary>
  ///  返回有关上一个异常的详细信息。
  ///</summary>
  [DNTypeName('System.Xml.XmlException')]
  DNXmlException = interface(DDN.mscorlib.DNSystemException)
  ['{30F748F0-C290-3CA0-98B6-E8F24430EB9F}']
  { getters & setters } 

    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SourceUri: string;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see langword="XmlException" />
    ///  属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="info"><see langword="SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context"><see langword="StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取指示出现了错误的行号。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示出现了错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取 XML 文件的位置。
    ///</summary>
    ///<returns>
    ///  用于 XML 数据的源 URI。
    ///  如果没有源 URI，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取描述当前异常的消息。
    ///</summary>
    ///<returns>
    ///  解释异常原因的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXmlException = class(TDNGenericImport<DNXmlExceptionClass, DNXmlException>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{5C4D129F-CBDD-5B69-A9C0-1AFDDD429D3B}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XPath.XPathException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXPathException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathException" />
    ///  类，具有指定的异常消息。
    ///</summary>
    ///  <param name="message">
    ///  错误条件的说明。
    ///</param>
    {class} function init(message: string): DNXPathException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathException" />
    ///  类使用指定的异常消息和 <see cref="T:System.Exception" />
    ///  对象。
    ///</summary>
    ///  <param name="message">
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException"><see cref="T:System.Exception" />
    ///  引发了 <see cref="T:System.Xml.XPath.XPathException" />
    ///  , ，如果有的话。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXPathException; overload;

  end;

  ///<summary>
  ///  提供当处理 XPath 表达式时出现错误时引发的异常。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathException')]
  DNXPathException = interface(DDN.mscorlib.DNSystemException)
  ['{6004C074-5837-3698-9136-E2C7D87699E0}']
  { getters & setters } 

    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see cref="T:System.Xml.XPath.XPathException" />
    ///  属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  为指定的类 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取此异常的错误条件的说明。
    ///</summary>
    ///<returns><see langword="string" />
    ///  描述此异常的错误条件。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXPathException = class(TDNGenericImport<DNXPathExceptionClass, DNXPathException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltExceptionClass = interface(DDN.mscorlib.DNSystemExceptionClass)
  ['{0383D815-3766-5C40-86C0-57F7522614CD}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Xsl.XsltException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXsltException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    {class} function init(message: string): DNXsltException; overload;
    ///<summary>
    ///  初始化 <see langword="XsltException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  错误条件的说明。
    ///</param>
    ///  <param name="innerException"><see cref="T:System.Exception" />
    ///  引发 <see langword="XsltException" />
    ///  , ，如果有的话。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXsltException; overload;

  end;

  ///<summary>
  ///  当处理 XSLT 转换过程中发生错误时引发的异常。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltException')]
  DNXsltException = interface(DDN.mscorlib.DNSystemException)
  ['{12D02992-1EAD-31E9-8AC8-3F6D034A0BEC}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see langword="XsltException" />
    ///  属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="info"><see langword="SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context"><see langword="StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取样式表的位置路径。
    ///</summary>
    ///<returns>
    ///  样式表的位置路径。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取指示样式表中发生错误的行号。
    ///</summary>
    ///<returns>
    ///  指示在样式表中发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示样式表中发生错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示在样式表中发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取描述当前异常的经过格式化的错误消息。
    ///</summary>
    ///<returns>
    ///  描述当前异常的经过格式化的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXsltException = class(TDNGenericImport<DNXsltExceptionClass, DNXsltException>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltCompileExceptionClass = interface(DNXsltExceptionClass)
  ['{8DB20846-5093-53A4-948B-B06CBC38CE68}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXsltCompileException; overload;
    ///<summary>
    ///  用指定的错误消息初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    {class} function init(message: string): DNXsltCompileException; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Xsl.XsltCompileException" />
    ///  类指定的错误消息和对导致此异常的内部异常的引用。
    ///</summary>
    ///  <param name="message">
    ///  描述错误的消息。
    ///</param>
    ///  <param name="innerException">
    ///  导致当前异常的异常或 <see langword="null" />
    ///  如果未不指定任何内部异常。
    ///</param>
    {class} function init(message: string; innerException: DDN.mscorlib.DNException): DNXsltCompileException; overload;
    ///<summary>
    ///  初始化 <see langword="XsltCompileException" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="inner"><see cref="T:System.Exception" />
    ///  引发了 <see langword="XsltCompileException" />
    ///  。
    ///</param>
    ///  <param name="sourceUri">
    ///  样式表的位置路径。
    ///</param>
    ///  <param name="lineNumber">
    ///  指示在样式表中发生错误的行号。
    ///</param>
    ///  <param name="linePosition">
    ///  指示在样式表中发生错误的行位置。
    ///</param>
    {class} function init(inner: DDN.mscorlib.DNException; sourceUri: string; lineNumber: Int32; linePosition: Int32): DNXsltCompileException; overload;

  end;

  ///<summary>
  ///  通过引发的异常 负载 XSLT 样式表中找到了错误的方法。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltCompileException')]
  DNXsltCompileException = interface(DNXsltException)
  ['{707BE9AA-4FED-3490-8C33-EF4FE145ED64}']
  { getters & setters } 

    function get_SourceUri: string;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Message: string;
    function get_Data: DDN.mscorlib.DNIDictionary;
    function get_InnerException: DDN.mscorlib.DNException;
    function get_TargetSite: DDN.mscorlib.DNMethodBase;
    function get_StackTrace: string;
    function get_HelpLink: string;
    procedure set_HelpLink(value: string);
    function get_Source: string;
    procedure set_Source(value: string);
    function get_HResult: Int32;

  { methods } 

    ///<summary>
    ///  流式处理所有 <see langword="XsltCompileException" />
    ///  属性存储到 <see cref="T:System.Runtime.Serialization.SerializationInfo" />
    ///  类给定 <see cref="T:System.Runtime.Serialization.StreamingContext" />
    ///  。
    ///</summary>
    ///  <param name="info"><see langword="SerializationInfo" />
    ///  对象。
    ///</param>
    ///  <param name="context"><see langword="StreamingContext" />
    ///  对象。
    ///</param>
    procedure GetObjectData(info: DDN.mscorlib.DNSerializationInfo; context: DDN.mscorlib.DNStreamingContext);
    function GetBaseException: DDN.mscorlib.DNException;
    function ToString: string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取样式表的位置路径。
    ///</summary>
    ///<returns>
    ///  样式表的位置路径。
    ///</returns>
    property SourceUri: string read get_SourceUri;
    ///<summary>
    ///  获取指示样式表中发生错误的行号。
    ///</summary>
    ///<returns>
    ///  指示在样式表中发生错误的行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取指示样式表中发生错误的行位置。
    ///</summary>
    ///<returns>
    ///  指示在样式表中发生错误的行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取描述当前异常的经过格式化的错误消息。
    ///</summary>
    ///<returns>
    ///  描述当前异常的经过格式化的错误消息。
    ///</returns>
    property Message: string read get_Message;
    property Data: DDN.mscorlib.DNIDictionary read get_Data;
    property InnerException: DDN.mscorlib.DNException read get_InnerException;
    property TargetSite: DDN.mscorlib.DNMethodBase read get_TargetSite;
    property StackTrace: string read get_StackTrace;
    property HelpLink: string read get_HelpLink write set_HelpLink;
    property Source: string read get_Source write set_Source;
    property HResult: Int32 read get_HResult;
  end;

  TDNXsltCompileException = class(TDNGenericImport<DNXsltCompileExceptionClass, DNXsltCompileException>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlDeserializationEventsClass = interface(DDN.mscorlib.DNValueTypeClass)
  ['{1E3AD3F0-8C17-5012-B8B6-8083974C1A6D}']
  end;

  ///<summary>
  ///  包含可用于将事件委托传递给一个线程安全的字段 <see cref="Overload:System.Xml.Serialization.XmlSerializer.Deserialize" />
  ///  方法 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlDeserializationEvents')]
  DNXmlDeserializationEvents = interface(DDN.mscorlib.DNValueType)
  ['{F43B6678-EEDE-3EC6-9E8D-54F7ABE697FF}']
  { getters & setters } 

    function get_OnUnknownNode: DNXmlNodeEventHandler;
    procedure set_OnUnknownNode(value: DNXmlNodeEventHandler);
    function get_OnUnknownAttribute: DNXmlAttributeEventHandler;
    procedure set_OnUnknownAttribute(value: DNXmlAttributeEventHandler);
    function get_OnUnknownElement: DNXmlElementEventHandler;
    procedure set_OnUnknownElement(value: DNXmlElementEventHandler);
    function get_OnUnreferencedObject: DNUnreferencedObjectEventHandler;
    procedure set_OnUnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function ToString: string;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取或设置一个对象，表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownNode" />
    ///  事件。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlNodeEventHandler" />
    ///  指向事件处理程序。
    ///</returns>
    property OnUnknownNode: DNXmlNodeEventHandler read get_OnUnknownNode write set_OnUnknownNode;
    ///<summary>
    ///  获取或设置一个对象，表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownAttribute" />
    ///  事件。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlAttributeEventHandler" />
    ///  指向事件处理程序。
    ///</returns>
    property OnUnknownAttribute: DNXmlAttributeEventHandler read get_OnUnknownAttribute write set_OnUnknownAttribute;
    ///<summary>
    ///  获取或设置一个对象，表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnknownElement" />
    ///  事件。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlElementEventHandler" />
    ///  指向事件处理程序。
    ///</returns>
    property OnUnknownElement: DNXmlElementEventHandler read get_OnUnknownElement write set_OnUnknownElement;
    ///<summary>
    ///  获取或设置一个对象，表示用于处理的方法 <see cref="E:System.Xml.Serialization.XmlSerializer.UnreferencedObject" />
    ///  事件。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.UnreferencedObjectEventHandler" />
    ///  指向事件处理程序。
    ///</returns>
    property OnUnreferencedObject: DNUnreferencedObjectEventHandler read get_OnUnreferencedObject write set_OnUnreferencedObject;
  end;

  TDNXmlDeserializationEvents = class(TDNGenericImport<DNXmlDeserializationEventsClass, DNXmlDeserializationEvents>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionClass = interface(DNObjectClass)
  ['{B466F60F-7412-5C08-98BC-E0DEF0883D89}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="XmlSchemaCollection" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaCollection; overload;
    ///<summary>
    ///  使用指定的 <see langword="XmlSchemaCollection" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///<see langword="XmlNameTable" />
    ///  加载架构时使用。
    ///</summary>
    ///  <param name="nametable">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    {class} function init(nametable: DNXmlNameTable): DNXmlSchemaCollection; overload;

  end;

  ///<summary>
  ///  包含 XML 架构定义语言 (XSD) 和 XML 数据简化 (XDR) 架构的缓存。
  ///<see cref="T:System.Xml.Schema.XmlSchemaCollection" />
  ///  类已过时。
  ///  请改用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaCollection')]
  DNXmlSchemaCollection = interface(DDN.mscorlib.DNICollection)
  ['{07C2EA08-5030-372B-8B74-B250123E74E4}']
  { getters & setters } 

    function get_Count: Int32;
    function get_NameTable: DNXmlNameTable;
    function get_Item(ns: string): DNXmlSchema;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  将由给定的 URL 定位的架构添加到架构集合中。
    ///</summary>
    ///  <param name="ns">
    ///  与架构关联的命名空间 URI。
    ///  对于 XML 架构，这通常是 <see langword="targetNamespace" />
    ///  。
    ///</param>
    ///  <param name="uri">
    ///  指定要加载的架构的 URL。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  添加到架构集合中; <see langword="null" />
    ///  如果所添加的架构是 XDR 架构或架构中有编译错误。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  架构不是有效的架构。
    ///</exception>
    function Add(ns: string; uri: string): DNXmlSchema; overload;
    ///<summary>
    ///  将包含在架构添加 <see cref="T:System.Xml.XmlReader" />
    ///  到架构集合。
    ///</summary>
    ///  <param name="ns">
    ///  与架构关联的命名空间 URI。
    ///  对于 XML 架构，这通常是 <see langword="targetNamespace" />
    ///  。
    ///</param>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  包含要添加的架构。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  添加到架构集合中; <see langword="null" />
    ///  如果所添加的架构是 XDR 架构或架构中有编译错误。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  架构不是有效的架构。
    ///</exception>
    function Add(ns: string; reader: DNXmlReader): DNXmlSchema; overload;
    ///<summary>
    ///  将包含在架构添加 <see cref="T:System.Xml.XmlReader" />
    ///  到架构集合。
    ///  指定 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析任何外部资源。
    ///</summary>
    ///  <param name="ns">
    ///  与架构关联的命名空间 URI。
    ///  对于 XML 架构，这通常是 <see langword="targetNamespace" />
    ///  。
    ///</param>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  包含要添加的架构。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析命名空间中引用 <see langword="include" />
    ///  和 <see langword="import" />
    ///  元素或 <see langword="x-schema" />
    ///  属性 （XDR 架构）。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部引用。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  添加到架构集合中; <see langword="null" />
    ///  如果所添加的架构是 XDR 架构或架构中有编译错误。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  架构不是有效的架构。
    ///</exception>
    function Add(ns: string; reader: DNXmlReader; resolver: DNXmlResolver): DNXmlSchema; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  到集合。
    ///</summary>
    ///  <param name="schema">
    ///  要添加到集合中的 <see langword="XmlSchema" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlSchema" />
    ///  对象。
    ///</returns>
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  到集合。
    ///  指定 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析所有外部引用。
    ///</summary>
    ///  <param name="schema">
    ///  要添加到集合中的 <see langword="XmlSchema" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析命名空间中引用 <see langword="include" />
    ///  和 <see langword="import" />
    ///  元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部引用。
    ///</param>
    ///<returns><see langword="XmlSchema" />
    ///  添加到架构集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  架构不是有效的架构。
    ///</exception>
    function Add(schema: DNXmlSchema; resolver: DNXmlResolver): DNXmlSchema; overload;
    ///<summary>
    ///  将在给定集合（包括其关联架构）中定义的所有命名空间添加到该集合。
    ///</summary>
    ///  <param name="schema"><see langword="XmlSchemaCollection" />
    ///  你想要添加到此集合。
    ///</param>
    procedure Add(schema: DNXmlSchemaCollection); overload;
    ///<summary>
    ///  获取一个值，该值指示是否 <see langword="targetNamespace" />
    ///  指定 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  在集合中。
    ///</summary>
    ///  <param name="schema"><see langword="XmlSchema" />
    ///  对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果集合中具有相同的架构 <see langword="targetNamespace" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    ///<summary>
    ///  获取一个值，该值指示具有指定命名空间的架构是否在集合中。
    ///</summary>
    ///  <param name="ns">
    ///  与架构关联的命名空间 URI。
    ///  对于 XML 架构，这通常是目标命名空间。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果具有指定的命名空间的架构集合中的否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(ns: string): Boolean; overload;
    ///<summary>
    ///  为通过架构集合的“用于每个”样式迭代提供支持。
    ///</summary>
    ///<returns>
    ///  循环访问当前集合中所有架构的枚举。
    ///</returns>
    function GetEnumerator: DNXmlSchemaCollectionEnumerator;
    ///<summary>
    ///  将所有复制 <see langword="XmlSchema" />
    ///  从给定索引处开始的给定数组到此集合的对象。
    ///</summary>
    ///  <param name="array">
    ///  要向其复制对象的数组。
    ///</param>
    ///  <param name="index">
    ///  中的索引 <paramref name="array" />
    ///  开始复制的位置。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlSchema>; index: Int32);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取在该集合中定义的命名空间的数目。
    ///</summary>
    ///<returns>
    ///  在该集合中定义的命名空间的数目。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取默认 <see langword="XmlNameTable" />
    ///  使用 <see langword="XmlSchemaCollection" />
    ///  加载新架构时。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="XmlNameTable" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    property Item[ns: string]: DNXmlSchema read get_Item; default;
  end;

  TDNXmlSchemaCollection = class(TDNGenericImport<DNXmlSchemaCollectionClass, DNXmlSchemaCollection>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCollectionEnumeratorClass = interface(DNObjectClass)
  ['{9CFC4530-B83B-5D91-B879-039B03C1C6B7}']
  end;

  ///<summary>
  ///  支持对集合执行简单迭代。
  ///  此类不能被继承。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaCollectionEnumerator')]
  DNXmlSchemaCollectionEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{67511776-E360-33B6-B6CF-F5D50EDD940F}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    ///<summary>
    ///  将枚举数推进到集合中的下一个架构。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果移动已成功; <see langword="false" />
    ///  如果枚举器已通过集合的末尾。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  集合中。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="XmlSchema" />
    ///  集合中。
    ///</returns>
    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaCollectionEnumerator = class(TDNGenericImport<DNXmlSchemaCollectionEnumeratorClass, DNXmlSchemaCollectionEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaCompilationSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{BC03EB50-C5AF-5D01-B23B-153DCDBC4324}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaCompilationSettings;

  end;

  ///<summary>
  ///  提供有关的架构编译选项 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
  ///  此类不能被继承的类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaCompilationSettings')]
  DNXmlSchemaCompilationSettings = interface(DDN.mscorlib.DNObject)
  ['{97EE4B70-692A-3087-8C45-C10098A42C8A}']
  { getters & setters } 

    function get_EnableUpaCheck: Boolean;
    procedure set_EnableUpaCheck(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  应检查唯一粒子归属 (UPA) 冲突。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  应检查唯一粒子归属 (UPA) 冲突; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property EnableUpaCheck: Boolean read get_EnableUpaCheck write set_EnableUpaCheck;
  end;

  TDNXmlSchemaCompilationSettings = class(TDNGenericImport<DNXmlSchemaCompilationSettingsClass, DNXmlSchemaCompilationSettings>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDatatypeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{69D9537D-424E-5F19-8DA5-EDBFCB8ED738}']
  end;

  ///<summary><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
  ///  类是抽象类，用于将 XML 架构定义语言 (XSD) 类型映射到公共语言运行时 (CLR) 类型。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaDatatype')]
  DNXmlSchemaDatatype = interface(DDN.mscorlib.DNObject)
  ['{8EE63134-3EA0-3773-A886-3AB9AEF07C8B}']
  { getters & setters } 

    function get_ValueType: DDN.mscorlib.DNType;
    function get_TokenizedType: DNXmlTokenizedType;
    function get_Variety: DNXmlSchemaDatatypeVariety;
    function get_TypeCode: DNXmlTypeCode;

  { methods } 

    ///<summary>
    ///  将指定的值，其类型一种有效的公共语言运行时 (CLR) 表示形式的 XML 架构类型由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  , ，为指定的 CLR 类型。
    ///</summary>
    ///  <param name="value">
    ///  要转换为指定类型的输入的值。
    ///</param>
    ///  <param name="targetType">
    ///  要转换的输入的值的目标类型。
    ///</param>
    ///<returns>
    ///  已转换的输入的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Object" />
    ///  或 <see cref="T:System.Type" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  表示的类型 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  不支持从指定为指定的类型的值类型的转换。
    ///</exception>
    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  将指定的值，其类型一种有效的公共语言运行时 (CLR) 表示形式的 XML 架构类型由 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  , ，使用指定的 CLR 类型到 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  如果 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  xs: qname 类型派生自它的表示。
    ///</summary>
    ///  <param name="value">
    ///  要转换为指定类型的输入的值。
    ///</param>
    ///  <param name="targetType">
    ///  要转换的输入的值的目标类型。
    ///</param>
    ///  <param name="namespaceResolver"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  用于解析命名空间前缀。
    ///  这仅时使用如果 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  xs: qname 类型派生自它的表示。
    ///</param>
    ///<returns>
    ///  已转换的输入的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Object" />
    ///  或 <see cref="T:System.Type" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  表示的类型 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  不支持从指定为指定的类型的值类型的转换。
    ///</exception>
    function ChangeType(value: DDN.mscorlib.DNObject; targetType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary><see cref="M:System.Xml.Schema.XmlSchemaDatatype.IsDerivedFrom(System.Xml.Schema.XmlSchemaDatatype)" />
    ///  方法始终返回 <see langword="false" />
    ///  。
    ///</summary>
    ///  <param name="datatype"><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  。
    ///</param>
    ///<returns>
    ///  始终返回 <see langword="false" />
    ///  。
    ///</returns>
    function IsDerivedFrom(datatype: DNXmlSchemaDatatype): Boolean;
    ///<summary>
    ///  当在派生类中重写，便会验证 <see langword="string" />
    ///  指定根据内置或用户定义的简单类型。
    ///</summary>
    ///  <param name="s"><see langword="string" />
    ///  来根据简单类型进行验证。
    ///</param>
    ///  <param name="nameTable"><see cref="T:System.Xml.XmlNameTable" />
    ///  用于进行分析时的原子化 <see langword="string" />
    ///  如果此 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  对象都表示 xs: ncname 类型。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象分析时要使用 <see langword="string" />
    ///  如果此 <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  对象都表示 xs: qname 类型。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  ，可以将安全地强制转换为返回类型 <see cref="P:System.Xml.Schema.XmlSchemaDatatype.ValueType" />
    ///  属性。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  输入的值不是这种 W3C XML 架构类型的有效实例。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  要分析的值不能为 <see langword="null" />
    ///  。
    ///</exception>
    function ParseValue(s: string; nameTable: DNXmlNameTable; nsmgr: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取该项的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  项的公共语言运行时 (CLR) 类型。
    ///</returns>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  当在派生类中重写时获取的类型 <see langword="string" />
    ///  指定在万维网联合会 (W3C) XML 1.0 规范。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlTokenizedType" />
    ///  值 <see langword="string" />
    ///  。
    ///</returns>
    property TokenizedType: DNXmlTokenizedType read get_TokenizedType;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" />
    ///  简单类型值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatypeVariety" />
    ///  简单类型值。
    ///</returns>
    property Variety: DNXmlSchemaDatatypeVariety read get_Variety;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  简单类型值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  简单类型值。
    ///</returns>
    property TypeCode: DNXmlTypeCode read get_TypeCode;
  end;

  TDNXmlSchemaDatatype = class(TDNGenericImport<DNXmlSchemaDatatypeClass, DNXmlSchemaDatatype>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInferenceClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8A85A5E3-6630-5B85-AF7F-3E2E27BD183C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaInference" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaInference;

  end;

  ///<summary>
  ///  从 XML 文档中推理出 XML 架构定义语言 (XSD) 架构。
  ///<see cref="T:System.Xml.Schema.XmlSchemaInference" />
  ///  类不能被继承。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaInference')]
  DNXmlSchemaInference = interface(DDN.mscorlib.DNObject)
  ['{0D32CCEE-AA40-3A11-A8B2-DE2E4B9632F3}']
  { getters & setters } 

    function get_Occurrence: DNXmlSchemaInference_InferenceOption;
    procedure set_Occurrence(value: DNXmlSchemaInference_InferenceOption);
    function get_TypeInference: DNXmlSchemaInference_InferenceOption;
    procedure set_TypeInference(value: DNXmlSchemaInference_InferenceOption);

  { methods } 

    ///<summary>
    ///  从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档 <see cref="T:System.Xml.XmlReader" />
    ///  指定对象。
    ///</summary>
    ///  <param name="instanceDocument"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含 XML 文档推断的架构。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象，其中包含推断出的架构。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 文档格式不正确。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" />
    ///  对象不定位在根节点上或者在元素上。
    ///  在架构推断过程就会出错。
    ///</exception>
    function InferSchema(instanceDocument: DNXmlReader): DNXmlSchemaSet; overload;
    ///<summary>
    ///  从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档 <see cref="T:System.Xml.XmlReader" />
    ///  对象指定，并且精炼推理出的架构中的现有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  用相同目标命名空间指定的对象。
    ///</summary>
    ///  <param name="instanceDocument"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含 XML 文档推断的架构。
    ///</param>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象，其中包含用于精炼推理出的架构的现有架构。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象，其中包含推断出的架构。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 文档格式不正确。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaInferenceException"><see cref="T:System.Xml.XmlReader" />
    ///  对象不定位在根节点上或者在元素上。
    ///  在架构推断过程就会出错。
    ///</exception>
    function InferSchema(instanceDocument: DNXmlReader; schemas: DNXmlSchemaSet): DNXmlSchemaSet; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" />
    ///  值，该值影响从 XML 文档推断的架构匹配项声明。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" />
    ///  对象。
    ///</returns>
    property Occurrence: DNXmlSchemaInference_InferenceOption read get_Occurrence write set_Occurrence;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" />
    ///  值，该值影响从 XML 文档推理出的类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaInference.InferenceOption" />
    ///  对象。
    ///</returns>
    property TypeInference: DNXmlSchemaInference_InferenceOption read get_TypeInference write set_TypeInference;
  end;

  TDNXmlSchemaInference = class(TDNGenericImport<DNXmlSchemaInferenceClass, DNXmlSchemaInference>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaInfoClass = interface(DNObjectClass)
  ['{80FF2DD1-35AC-5A22-B795-D99E466BCF96}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaInfo;

  end;

  ///<summary>
  ///  表示已验证的 XML 节点的架构验证信息集。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaInfo')]
  DNXmlSchemaInfo = interface(DNIXmlSchemaInfo)
  ['{7D360325-9956-3DD6-A123-74B4772BDB4E}']
  { getters & setters } 

    function get_Validity: DNXmlSchemaValidity;
    procedure set_Validity(value: DNXmlSchemaValidity);
    function get_IsDefault: Boolean;
    procedure set_IsDefault(value: Boolean);
    function get_IsNil: Boolean;
    procedure set_IsNil(value: Boolean);
    function get_MemberType: DNXmlSchemaSimpleType;
    procedure set_MemberType(value: DNXmlSchemaSimpleType);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_SchemaElement: DNXmlSchemaElement;
    procedure set_SchemaElement(value: DNXmlSchemaElement);
    function get_SchemaAttribute: DNXmlSchemaAttribute;
    procedure set_SchemaAttribute(value: DNXmlSchemaAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    procedure set_ContentType(value: DNXmlSchemaContentType);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaValidity" />
    ///  验证 XML 节点的此值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaValidity" />
    ///  值。
    ///</returns>
    property Validity: DNXmlSchemaValidity read get_Validity write set_Validity;
    ///<summary>
    ///  获取或设置一个值，该值指示是否这个被验证的 XML 节点被设置为在 XML 架构定义语言 (XSD) 架构验证过程中应用的默认的结果。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="bool" />
    ///  值。
    ///</returns>
    property IsDefault: Boolean read get_IsDefault write set_IsDefault;
    ///<summary>
    ///  获取或设置一个值，该值指示此验证的 XML 节点值是否为零。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="bool" />
    ///  值。
    ///</returns>
    property IsNil: Boolean read get_IsNil write set_IsNil;
    ///<summary>
    ///  获取或设置此已验证的 XML 节点的动态架构类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  对象。
    ///</returns>
    property MemberType: DNXmlSchemaSimpleType read get_MemberType write set_MemberType;
    ///<summary>
    ///  获取或设置此已验证的 XML 节点的静态 XML 架构定义语言 (XSD) 架构类型。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象。
    ///</returns>
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    ///<summary>
    ///  获取或设置已编译 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  与对应于此的对象验证 XML 节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  对象。
    ///</returns>
    property SchemaElement: DNXmlSchemaElement read get_SchemaElement write set_SchemaElement;
    ///<summary>
    ///  获取或设置已编译 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  与对应于此的对象验证 XML 节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  对象。
    ///</returns>
    property SchemaAttribute: DNXmlSchemaAttribute read get_SchemaAttribute write set_SchemaAttribute;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaContentType" />
    ///  对应的内容类型的对象验证 XML 节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaContentType" />
    ///  对象。
    ///</returns>
    property ContentType: DNXmlSchemaContentType read get_ContentType write set_ContentType;
  end;

  TDNXmlSchemaInfo = class(TDNGenericImport<DNXmlSchemaInfoClass, DNXmlSchemaInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0250456E-EBEA-5583-AA0A-B9F54DAB734E}']
  end;

  ///<summary>
  ///  表示 Xml 架构对象模型层次结构的根类，并如作为类的基类 <see cref="T:System.Xml.Schema.XmlSchema" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaObject')]
  DNXmlSchemaObject = interface(DDN.mscorlib.DNObject)
  ['{83E9E35E-8F9E-3F9F-A9E9-B1999304E6FD}']
  { getters & setters } 

    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaObject = class(TDNGenericImport<DNXmlSchemaObjectClass, DNXmlSchemaObject>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaClass = interface(DNXmlSchemaObjectClass)
  ['{7248DFD9-39DA-5D4C-8B98-25C3608AEEE2}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchema;

  { static methods } 

    ///<summary>
    ///  所提供的读取 XML 架构 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="TextReader" />
    ///  包含要读取的 XML 架构。
    ///</param>
    ///  <param name="validationEventHandler">
    ///  验证事件处理程序，它接收 XML 架构语法错误的相关信息。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 XML 架构的对象。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定。
    ///</exception>
    {class} function Read(reader: DDN.mscorlib.DNTextReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    ///<summary>
    ///  从提供的流中读取 XML 架构。
    ///</summary>
    ///  <param name="stream">
    ///  提供的数据流。
    ///</param>
    ///  <param name="validationEventHandler">
    ///  验证事件处理程序，它接收 XML 架构语法错误的相关信息。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 XML 架构的对象。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定。
    ///</exception>
    {class} function Read(stream: DDN.mscorlib.DNStream; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;
    ///<summary>
    ///  所提供的读取 XML 架构 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  包含要读取的 XML 架构。
    ///</param>
    ///  <param name="validationEventHandler">
    ///  验证事件处理程序，它接收 XML 架构语法错误的相关信息。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 XML 架构的对象。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  如果没有，则引发 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定。
    ///</exception>
    {class} function Read(reader: DNXmlReader; validationEventHandler: DNValidationEventHandler): DNXmlSchema; overload;

  end;

  ///<summary>
  ///  XML 架构，World Wide Web 联合会 (W3C) 中指定的内存中表示 XML Schema Part 1: Structures 和 XML Schema Part 2: Datatypes 规范。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchema')]
  DNXmlSchema = interface(DNXmlSchemaObject)
  ['{C6EC789B-76E3-3FC4-B6C0-383D1AB66E1E}']
  { getters & setters } 

    function get_AttributeFormDefault: DNXmlSchemaForm;
    procedure set_AttributeFormDefault(value: DNXmlSchemaForm);
    function get_BlockDefault: DNXmlSchemaDerivationMethod;
    procedure set_BlockDefault(value: DNXmlSchemaDerivationMethod);
    function get_FinalDefault: DNXmlSchemaDerivationMethod;
    procedure set_FinalDefault(value: DNXmlSchemaDerivationMethod);
    function get_ElementFormDefault: DNXmlSchemaForm;
    procedure set_ElementFormDefault(value: DNXmlSchemaForm);
    function get_TargetNamespace: string;
    procedure set_TargetNamespace(value: string);
    function get_Version: string;
    procedure set_Version(value: string);
    function get_Includes: DNXmlSchemaObjectCollection;
    function get_Items: DNXmlSchemaObjectCollection;
    function get_IsCompiled: Boolean;
    function get_Attributes: DNXmlSchemaObjectTable;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Elements: DNXmlSchemaObjectTable;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_Groups: DNXmlSchemaObjectTable;
    function get_Notations: DNXmlSchemaObjectTable;
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    ///<summary>
    ///  将　XML 架构写入提供的数据流中。
    ///</summary>
    ///  <param name="stream">
    ///  提供的数据流。
    ///</param>
    procedure Write(stream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将 XML 架构写入提供 <see cref="T:System.IO.Stream" />
    ///  使用 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  指定。
    ///</summary>
    ///  <param name="stream">
    ///  提供的数据流。
    ///</param>
    ///  <param name="namespaceManager"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</param>
    procedure Write(stream: DDN.mscorlib.DNStream; namespaceManager: DNXmlNamespaceManager); overload;
    ///<summary>
    ///  将 XML 架构写入提供 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  将 XML 架构写入提供 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="namespaceManager"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</param>
    procedure Write(writer: DDN.mscorlib.DNTextWriter; namespaceManager: DNXmlNamespaceManager); overload;
    ///<summary>
    ///  将 XML 架构写入提供 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  参数为 null。
    ///</exception>
    procedure Write(writer: DNXmlWriter); overload;
    ///<summary>
    ///  将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。
    ///  用于检查以编程方式生成的 SOM 的语法和语义结构。
    ///  语义验证检查在编译期间执行。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  验证事件处理程序接收 XML 架构验证错误的相关信息。
    ///</param>
    ///  <param name="resolver"><see langword="XmlResolver" />
    ///  用于解析命名空间中引用 <see langword="include" />
    ///  和 <see langword="import" />
    ///  元素。
    ///</param>
    procedure Compile(validationEventHandler: DNValidationEventHandler; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  将 XML 架构写入提供 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要向其中进行写入的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///  <param name="namespaceManager"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</param>
    procedure Write(writer: DNXmlWriter; namespaceManager: DNXmlNamespaceManager); overload;
    ///<summary>
    ///  将 XML 架构对象模型 (SOM) 编译为架构信息供验证使用。
    ///  用于检查以编程方式生成的 SOM 的语法和语义结构。
    ///  语义验证检查在编译期间执行。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  验证事件处理程序，它接收 XML 架构验证错误的相关信息。
    ///</param>
    procedure Compile(validationEventHandler: DNValidationEventHandler); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置在架构的目标命名空间中声明的属性的窗体。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值，该值指示是否需要用命名空间前缀限定目标命名空间的属性。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />
    ///  。
    ///</returns>
    property AttributeFormDefault: DNXmlSchemaForm read get_AttributeFormDefault write set_AttributeFormDefault;
    ///<summary>
    ///  获取或设置 <see langword="blockDefault" />
    ///  属性将设置的默认值 <see langword="block" />
    ///  元素和中的复杂类型属性 <see langword="targetNamespace" />
    ///  的架构。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值，该值表示阻止派生的不同方法。
    ///  默认值为 <see langword="XmlSchemaDerivationMethod.None" />
    ///  。
    ///</returns>
    property BlockDefault: DNXmlSchemaDerivationMethod read get_BlockDefault write set_BlockDefault;
    ///<summary>
    ///  获取或设置 <see langword="finalDefault" />
    ///  属性将设置的默认值 <see langword="final" />
    ///  对元素和架构的目标命名空间中的复杂类型的属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值，该值表示阻止派生的不同方法。
    ///  默认值为 <see langword="XmlSchemaDerivationMethod.None" />
    ///  。
    ///</returns>
    property FinalDefault: DNXmlSchemaDerivationMethod read get_FinalDefault write set_FinalDefault;
    ///<summary>
    ///  获取或设置在架构的目标命名空间中声明的元素的窗体。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值，该值指示是否需要用命名空间前缀限定目标命名空间的元素。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaForm.None" />
    ///  。
    ///</returns>
    property ElementFormDefault: DNXmlSchemaForm read get_ElementFormDefault write set_ElementFormDefault;
    ///<summary>
    ///  获取或设置架构目标命名空间的统一资源标识符 (URI)。
    ///</summary>
    ///<returns>
    ///  架构目标命名空间。
    ///</returns>
    property TargetNamespace: string read get_TargetNamespace write set_TargetNamespace;
    ///<summary>
    ///  获取或设置架构的版本。
    ///</summary>
    ///<returns>
    ///  架构的版本。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Version: string read get_Version write set_Version;
    ///<summary>
    ///  获取包含的和导入的架构的集合。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />
    ///  包含和导入架构。
    ///</returns>
    property Includes: DNXmlSchemaObjectCollection read get_Includes;
    ///<summary>
    ///  在架构中获取架构元素的集合，并使用它来添加新的元素类型在 <see langword="schema" />
    ///  元素级别。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />
    ///  的架构中的架构元素。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    ///<summary>
    ///  表明架构是否已编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果已编译架构，否则， <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  获取架构中所有属性的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有特性的集合。
    ///</returns>
    property Attributes: DNXmlSchemaObjectTable read get_Attributes;
    ///<summary>
    ///  获取架构中所有全局属性组的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有全局属性组的集合。
    ///</returns>
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    ///<summary>
    ///  获取架构中所有架构类型的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />
    ///  架构中的所有架构类型。
    ///</returns>
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    ///<summary>
    ///  获取架构中所有元素的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有元素的集合。
    ///</returns>
    property Elements: DNXmlSchemaObjectTable read get_Elements;
    ///<summary>
    ///  获取或设置字符串 ID。
    ///</summary>
    ///<returns>
    ///  字符串的 ID。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取和设置不属于架构目标命名空间的限定属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    ///<summary>
    ///  获取架构中所有组的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有组的集合。
    ///</returns>
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    ///<summary>
    ///  获取架构中所有注释的架构编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中所有注释的集合。
    ///</returns>
    property Notations: DNXmlSchemaObjectTable read get_Notations;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchema = class(TDNGenericImport<DNXmlSchemaClass, DNXmlSchema>)
  public const
    ///<summary>
    ///  XML 架构命名空间。
    ///  此字段为常数。
    ///</summary>
   Namespace = 'http://www.w3.org/2001/XMLSchema';
    ///<summary>
    ///  XML 架构实例命名空间。
    ///  此字段为常数。
    ///</summary>
   InstanceNamespace = 'http://www.w3.org/2001/XMLSchema-instance';
  end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotatedClass = interface(DNXmlSchemaObjectClass)
  ['{3216C5BF-5913-56B8-B0B0-5FB3E3A227A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotated" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAnnotated;

  end;

  ///<summary>
  ///  可以包含批注的元素的任何元素的基类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotated')]
  DNXmlSchemaAnnotated = interface(DNXmlSchemaObject)
  ['{0DF3E834-EAC2-3865-A25E-59688BA0D688}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotated = class(TDNGenericImport<DNXmlSchemaAnnotatedClass, DNXmlSchemaAnnotated>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{9CFB6250-AF0C-5AA0-B7D8-350EB7F732AE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAnyAttribute;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="anyAttribute" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAnyAttribute')]
  DNXmlSchemaAnyAttribute = interface(DNXmlSchemaAnnotated)
  ['{40C424F4-9190-3790-8AD0-55CC187B217F}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置包含可以使用的特性的命名空间。
    ///</summary>
    ///<returns>
    ///  可供使用的属性的命名空间。
    ///  默认值为 <see langword="##any" />
    ///  。
    ///  可选。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置有关的应用程序或 XML 处理器应如何处理 XML 文档，以指定的特性的验证信息 <see langword="anyAttribute" />
    ///  元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" />
    ///  值之一。
    ///  如果没有 <see langword="processContents" />
    ///  指定属性，则默认为 <see langword="Strict" />
    ///  。
    ///</returns>
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnyAttribute = class(TDNGenericImport<DNXmlSchemaAnyAttributeClass, DNXmlSchemaAnyAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{047C3279-9803-5740-9BDD-5599B358884C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAttribute;

  end;

  ///<summary>
  ///  表示 <see langword="attribute" />
  ///  由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素。
  ///  属性为其他文档元素提供额外信息。
  ///  属性标记嵌套在架构的文档元素标记之间。
  ///  XML 文档将属性显示为元素开始标记中的已命名项。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAttribute')]
  DNXmlSchemaAttribute = interface(DNXmlSchemaAnnotated)
  ['{BC3ECB9B-06CE-3009-88C0-4148FBB2D47C}']
  { getters & setters } 

    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaSimpleType;
    procedure set_SchemaType(value: DNXmlSchemaSimpleType);
    function get_Use: DNXmlSchemaUse;
    procedure set_Use(value: DNXmlSchemaUse);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_AttributeType: DDN.mscorlib.DNObject;
    function get_AttributeSchemaType: DNXmlSchemaSimpleType;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置属性的默认值。
    ///</summary>
    ///<returns>
    ///  属性的默认值。
    ///  默认为空引用。
    ///  可选。
    ///</returns>
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    ///<summary>
    ///  获取或设置属性的固定值。
    ///</summary>
    ///<returns>
    ///  属性的固定值。
    ///  默认值为 null。
    ///  可选。
    ///</returns>
    property FixedValue: string read get_FixedValue write set_FixedValue;
    ///<summary>
    ///  获取或设置属性的窗体。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaForm" />
    ///  值之一。
    ///  默认的值为 <see cref="P:System.Xml.Schema.XmlSchema.AttributeFormDefault" />
    ///  包含该属性的架构元素。
    ///  可选。
    ///</returns>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    ///<summary>
    ///  获取或设置属性的名称。
    ///</summary>
    ///<returns>
    ///  属性名。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置在此架构（或指定命名空间指示的另一个架构）中声明的属性的名称。
    ///</summary>
    ///<returns>
    ///  所声明属性的名称。
    ///</returns>
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    ///<summary>
    ///  获取或设置在此架构（或指定命名空间指示的另一个架构）中定义的简单类型的名称。
    ///</summary>
    ///<returns>
    ///  简单类型的名称。
    ///</returns>
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    ///<summary>
    ///  获取属性类型或将其设置为简单类型。
    ///</summary>
    ///<returns>
    ///  此架构中定义的简单类型。
    ///</returns>
    property SchemaType: DNXmlSchemaSimpleType read get_SchemaType write set_SchemaType;
    ///<summary>
    ///  获取或设置如何使用该属性的相关信息。
    ///</summary>
    ///<returns>
    ///  下列值之一：“None”、“Prohibited”、“Optional”或“Required”。
    ///  默认为“Optional”。
    ///  可选。
    ///</returns>
    property Use: DNXmlSchemaUse read get_Use write set_Use;
    ///<summary>
    ///  获取属性的限定名称。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取公共语言运行时 (CLR) 对象基于 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" />
    ///  或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />
    ///  持有的编译后值的属性 <see langword="AttributeType" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  保存的编译后值的公共运行时库 (CLR) 对象 <see langword="AttributeType" />
    ///  属性。
    ///</returns>
    property AttributeType: DDN.mscorlib.DNObject read get_AttributeType;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  对象，表示该特性的类型基于 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaType" />
    ///  或 <see cref="P:System.Xml.Schema.XmlSchemaAttribute.SchemaTypeName" />
    ///  的属性。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  对象。
    ///</returns>
    property AttributeSchemaType: DNXmlSchemaSimpleType read get_AttributeSchemaType;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttribute = class(TDNGenericImport<DNXmlSchemaAttributeClass, DNXmlSchemaAttribute>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2B7C70A0-EF92-5693-9746-5BF2129C1B94}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAttributeGroup;

  end;

  ///<summary>
  ///  表示 <see langword="attributeGroup" />
  ///  由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素。
  ///  AttributesGroups 提供将一组特性声明归为一组的机制，以便将它们作为一个组并入到复杂类型定义中。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroup')]
  DNXmlSchemaAttributeGroup = interface(DNXmlSchemaAnnotated)
  ['{35B10603-0991-3646-B2F1-9D2A3A9A0279}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_RedefinedAttributeGroup: DNXmlSchemaAttributeGroup;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置属性组的名称。
    ///</summary>
    ///<returns>
    ///  属性组的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取属性组的属性的集合。
    ///  包含 <see langword="XmlSchemaAttribute" />
    ///  和 <see langword="XmlSchemaAttributeGroupRef" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  属性组的属性的集合。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  组件的属性组。
    ///</summary>
    ///<returns>
    ///  World Wide Web 联合会 (W3C) <see langword="anyAttribute" />
    ///  元素。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    ///<summary>
    ///  获取属性组的限定名称。
    ///</summary>
    ///<returns>
    ///  属性组的限定名称。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  从 XML 架构中获取重新定义的属性组属性。
    ///</summary>
    ///<returns>
    ///  重新定义的属性组属性。
    ///</returns>
    property RedefinedAttributeGroup: DNXmlSchemaAttributeGroup read get_RedefinedAttributeGroup;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroup = class(TDNGenericImport<DNXmlSchemaAttributeGroupClass, DNXmlSchemaAttributeGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAttributeGroupRefClass = interface(DNXmlSchemaAnnotatedClass)
  ['{2E998C9E-B501-52C3-B5D9-6A3063D5B21D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAttributeGroupRef;

  end;

  ///<summary>
  ///  表示 <see langword="attributeGroup" />
  ///  具有元素 <see langword="ref" />
  ///  由指定的 XML 架构的属性 World Wide Web Consortium (W3C)。
  ///  AttributesGroupRef 属性组的引用，name 属性包含所引用的属性组。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAttributeGroupRef')]
  DNXmlSchemaAttributeGroupRef = interface(DNXmlSchemaAnnotated)
  ['{D6A224F8-7695-307E-9DDA-6B5A883A296B}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置引用的名称 <see langword="attributeGroup" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  引用的属性组的名称。
    ///  值必须是 QName。
    ///</returns>
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAttributeGroupRef = class(TDNGenericImport<DNXmlSchemaAttributeGroupRefClass, DNXmlSchemaAttributeGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{CF8C2974-33B2-52C5-948F-35C36CF72365}']
  end;

  ///<summary>
  ///  架构内容一个抽象类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaContent')]
  DNXmlSchemaContent = interface(DNXmlSchemaAnnotated)
  ['{9D9EE977-A3C6-3D61-8BB9-7336C0BF3836}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContent = class(TDNGenericImport<DNXmlSchemaContentClass, DNXmlSchemaContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{B07D050A-73F9-579D-BCD4-6E9D6CB66A78}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaComplexContentExtension;

  end;

  ///<summary>
  ///  表示 <see langword="extension" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类用于通过扩展而派生的具有复杂内容模型的复杂类型。
  ///  它通过添加属性或元素扩展复杂类型。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentExtension')]
  DNXmlSchemaComplexContentExtension = interface(DNXmlSchemaContent)
  ['{1526A89A-1CF2-393F-8C0D-8000E9588437}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置复杂类型（该类型由它进行扩展而派生）的名称。
    ///</summary>
    ///<returns>
    ///  复杂类型（该类型由它进行扩展而派生）的名称。
    ///</returns>
    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    ///<summary>
    ///  获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</returns>
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    ///<summary>
    ///  获取复杂内容的属性集合。
    ///  包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  复杂内容的属性集合。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  组件的复杂内容模型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  组件的复杂内容模型。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentExtension = class(TDNGenericImport<DNXmlSchemaComplexContentExtensionClass, DNXmlSchemaComplexContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{E30FF509-608C-500A-9A4F-981E166F4D69}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaComplexContentRestriction;

  end;

  ///<summary>
  ///  表示 <see langword="restriction" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类用于具有由限制派生出的复杂内容模型的复杂类型。
  ///  它将复杂类型的内容限制为继承的复杂类型的子集。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContentRestriction')]
  DNXmlSchemaComplexContentRestriction = interface(DNXmlSchemaContent)
  ['{4D19595C-ED72-346B-BBE6-38891A212A81}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置复杂类型（该类型通过它进行限制而派生）的名称。
    ///</summary>
    ///<returns>
    ///  复杂类型（该类型通过它进行限制而派生）的名称。
    ///</returns>
    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    ///<summary>
    ///  获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</returns>
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    ///<summary>
    ///  获取复杂类型的属性集合。
    ///  包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  复杂类型的属性集合。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  组件的复杂内容模型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  组件的复杂内容模型。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContentRestriction = class(TDNGenericImport<DNXmlSchemaComplexContentRestrictionClass, DNXmlSchemaComplexContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentExtensionClass = interface(DNXmlSchemaContentClass)
  ['{CD975048-4D1D-5D13-B885-410BB0826C11}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleContentExtension;

  end;

  ///<summary>
  ///  表示 <see langword="extension" />
  ///  从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
  ///  此类可用于按扩展派生简单类型。
  ///  通过添加属性，此类派生可用于扩展元素的简单类型内容。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentExtension')]
  DNXmlSchemaSimpleContentExtension = interface(DNXmlSchemaContent)
  ['{32708983-B0FF-3520-A8A3-30E534FADEFD}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置内置数据类型或简单类型的名称（从其中扩展该类型）。
    ///</summary>
    ///<returns>
    ///  基类型名称。
    ///</returns>
    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  。
    ///</summary>
    ///<returns>
    ///  属性集合 <see langword="simpleType" />
    ///  元素。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 <see langword="XmlSchemaAnyAttribute" />
    ///  用于属性值。
    ///</summary>
    ///<returns><see langword="XmlSchemaAnyAttribute" />
    ///  。
    ///  可选。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentExtension = class(TDNGenericImport<DNXmlSchemaSimpleContentExtensionClass, DNXmlSchemaSimpleContentExtension>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentRestrictionClass = interface(DNXmlSchemaContentClass)
  ['{46661E34-4839-5148-8C2A-8B1C449105EB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleContentRestriction;

  end;

  ///<summary>
  ///  表示 <see langword="restriction" />
  ///  从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
  ///  此类可用以通过限制派生简单类型。
  ///  此种派生可用于将元素的值范围限制为在继承的简单类型中指定的值的子集。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContentRestriction')]
  DNXmlSchemaSimpleContentRestriction = interface(DNXmlSchemaContent)
  ['{7243265D-820F-34F6-B86A-3B230DC16D26}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置内置数据类型或简单类型（该类型从其中派生）的名称。
    ///</summary>
    ///<returns>
    ///  基类型的名称。
    ///</returns>
    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    ///<summary>
    ///  获取或设置简单类型基值。
    ///</summary>
    ///<returns>
    ///  简单类型基值。
    ///</returns>
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    ///<summary>
    ///  获取或设置一个 XML 架构方面。
    ///</summary>
    ///<returns>
    ///  以下方面类之一：
    ///<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />
    ///  .
    ///</returns>
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    ///<summary>
    ///  获取简单类型的属性的 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  集合。
    ///</summary>
    ///<returns>
    ///  简单类型的属性集合。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  用于属性值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  属性值。
    ///  可选。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContentRestriction = class(TDNGenericImport<DNXmlSchemaSimpleContentRestrictionClass, DNXmlSchemaSimpleContentRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaContentModelClass = interface(DNXmlSchemaAnnotatedClass)
  ['{7FF05E65-54A1-5211-9A79-87BB9D514331}']
  end;

  ///<summary>
  ///  指定的顺序和类型的子元素的结构。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaContentModel')]
  DNXmlSchemaContentModel = interface(DNXmlSchemaAnnotated)
  ['{5321123C-01D3-39A8-A7BC-148F19620BAF}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置类型的内容。
    ///</summary>
    ///<returns>
    ///  提供内容的类型。
    ///</returns>
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaContentModel = class(TDNGenericImport<DNXmlSchemaContentModelClass, DNXmlSchemaContentModel>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexContentClass = interface(DNXmlSchemaContentModelClass)
  ['{0F0CC3A3-21A6-57D0-B0A7-B0169ED2330F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaComplexContent;

  end;

  ///<summary>
  ///  表示 <see langword="complexContent" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类表示复杂类型的复杂内容模型。
  ///  它包含对仅具有元素或混合内容的复杂类型的扩展或限制。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaComplexContent')]
  DNXmlSchemaComplexContent = interface(DNXmlSchemaContentModel)
  ['{4874A15E-EBD1-3EC1-BDD1-08FE68A8DA0C}']
  { getters & setters } 

    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置确定类型是否具有混合内容模型的信息。
    ///</summary>
    ///<returns>
    ///  如果此属性为 <see langword="true" />
    ///  , ，则允许字符数据出现在复杂类型 （混合内容模型） 的子元素之间。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取或设置内容。
    ///</summary>
    ///<returns>
    ///  一种︰ <see cref="T:System.Xml.Schema.XmlSchemaComplexContentRestriction" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContentExtension" />
    ///  类。
    ///</returns>
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexContent = class(TDNGenericImport<DNXmlSchemaComplexContentClass, DNXmlSchemaComplexContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleContentClass = interface(DNXmlSchemaContentModelClass)
  ['{F03ED66F-2E54-5AEB-8501-75008EE78C23}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleContent;

  end;

  ///<summary>
  ///  表示 <see langword="simpleContent" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类用于具有简单内容模型的简单和复杂类型。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleContent')]
  DNXmlSchemaSimpleContent = interface(DNXmlSchemaContentModel)
  ['{9BCC3332-0A57-38C7-A257-C818878F3092}']
  { getters & setters } 

    function get_Content: DNXmlSchemaContent;
    procedure set_Content(value: DNXmlSchemaContent);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取其中一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentRestriction" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContentExtension" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中包含的内容 <see langword="XmlSchemaSimpleContentRestriction" />
    ///  或 <see langword="XmlSchemaSimpleContentExtension" />
    ///  类。
    ///</returns>
    property Content: DNXmlSchemaContent read get_Content write set_Content;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleContent = class(TDNGenericImport<DNXmlSchemaSimpleContentClass, DNXmlSchemaSimpleContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFacetClass = interface(DNXmlSchemaAnnotatedClass)
  ['{6EC693F0-E527-5444-92E7-11DBFCF15054}']
  end;

  ///<summary>
  ///  抽象类，用于在由限制派生简单类型时使用的所有方面。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaFacet')]
  DNXmlSchemaFacet = interface(DNXmlSchemaAnnotated)
  ['{C7945853-D4C4-3A37-B593-BF9E57357120}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFacet = class(TDNGenericImport<DNXmlSchemaFacetClass, DNXmlSchemaFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaEnumerationFacetClass = interface(DNXmlSchemaFacetClass)
  ['{7360714B-151E-5C94-8A30-AF9E976E3A67}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaEnumerationFacet;

  end;

  ///<summary>
  ///  表示 <see langword="enumeration" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
  ///  此类指定 simpleType 元素的有效值列表。
  ///  声明包含在 <see langword="restriction" />
  ///  声明。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaEnumerationFacet')]
  DNXmlSchemaEnumerationFacet = interface(DNXmlSchemaFacet)
  ['{4AB63A76-2A1E-3158-ABA4-BFC3C7F29CFD}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaEnumerationFacet = class(TDNGenericImport<DNXmlSchemaEnumerationFacetClass, DNXmlSchemaEnumerationFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{4BEB63B0-14ED-5D93-9D70-8EBE60BE438F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMaxExclusiveFacet;

  end;

  ///<summary>
  ///  表示 <see langword="maxExclusive" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定的最大值限制 <see langword="simpleType" />
  ///  元素。
  ///  此元素的值必须小于的值 <see langword="maxExclusive" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMaxExclusiveFacet')]
  DNXmlSchemaMaxExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{8C49E438-F8DB-331F-8A7C-3E7442A9ADD5}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxExclusiveFacetClass, DNXmlSchemaMaxExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{3BBFBCF7-ACF4-57A3-8FFF-3E50BDEF1393}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMaxInclusiveFacet;

  end;

  ///<summary>
  ///  表示 <see langword="maxInclusive" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定的最大值限制 <see langword="simpleType" />
  ///  元素。
  ///  此元素的值必须小于或等于的值 <see langword="maxInclusive" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMaxInclusiveFacet')]
  DNXmlSchemaMaxInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{C3B09BA9-9A27-3126-B14A-FEEF00BA736D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMaxInclusiveFacetClass, DNXmlSchemaMaxInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinExclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{5F818AA6-71A5-5091-99F5-5E92C2646F21}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMinExclusiveFacet;

  end;

  ///<summary>
  ///  表示 <see langword="minExclusive" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定的最小值限制 <see langword="simpleType" />
  ///  元素。
  ///  此元素的值必须是大于值 <see langword="minExclusive" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMinExclusiveFacet')]
  DNXmlSchemaMinExclusiveFacet = interface(DNXmlSchemaFacet)
  ['{624F30E4-C184-3CD7-980A-CC392785C99F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinExclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinExclusiveFacetClass, DNXmlSchemaMinExclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinInclusiveFacetClass = interface(DNXmlSchemaFacetClass)
  ['{2FF63ADB-93CF-5C45-B30E-83F433390EFB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMinInclusiveFacet;

  end;

  ///<summary>
  ///  表示 <see langword="minInclusive" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于对 simpleType 元素的最小值指定限制。
  ///  此元素的值必须大于或等于的值 <see langword="minInclusive" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMinInclusiveFacet')]
  DNXmlSchemaMinInclusiveFacet = interface(DNXmlSchemaFacet)
  ['{63A6C351-761E-3B86-BF7F-C181FF120141}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinInclusiveFacet = class(TDNGenericImport<DNXmlSchemaMinInclusiveFacetClass, DNXmlSchemaMinInclusiveFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNumericFacetClass = interface(DNXmlSchemaFacetClass)
  ['{404E0174-F7B5-57A7-AA36-3541B4498BBF}']
  end;

  ///<summary>
  ///  抽象类，用于定义 <see langword="numeric" />
  ///  方面。
  ///  此类是数值方面类的基类如 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaNumericFacet')]
  DNXmlSchemaNumericFacet = interface(DNXmlSchemaFacet)
  ['{DDF0F6BF-DDD5-30E8-AE2A-1091BCB7BAD1}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNumericFacet = class(TDNGenericImport<DNXmlSchemaNumericFacetClass, DNXmlSchemaNumericFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaFractionDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{A2A61D2D-52DA-5377-94FA-2BC942D9087A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaFractionDigitsFacet;

  end;

  ///<summary>
  ///  指定可对 simpleType 元素的 fraction 值为输入的数字个数的限制条件。
  ///  FractionDigits 的值必须是正整数。
  ///  表示 World Wide Web 联合会 (W3C) <see langword="fractionDigits" />
  ///  方面。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaFractionDigitsFacet')]
  DNXmlSchemaFractionDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{98DFB338-5ED5-32E4-B2D9-4FB82AB7077F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaFractionDigitsFacet = class(TDNGenericImport<DNXmlSchemaFractionDigitsFacetClass, DNXmlSchemaFractionDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{4F42A3F7-D411-534B-93C1-ACBA6548E307}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaLengthFacet;

  end;

  ///<summary>
  ///  表示 <see langword="length" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
  ///  此类可用于指定的长度限制 <see langword="simpleType" />
  ///  上的数据类型的元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaLengthFacet')]
  DNXmlSchemaLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{82F8CF4C-2EE5-3E49-A6C9-6892EB860CAB}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaLengthFacet = class(TDNGenericImport<DNXmlSchemaLengthFacetClass, DNXmlSchemaLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMaxLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{4730E68C-4448-5F95-A232-A6F5EBA9FB53}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMaxLengthFacet;

  end;

  ///<summary>
  ///  表示 <see langword="maxLength" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定的数据值的最大长度限制 <see langword="simpleType" />
  ///  元素。
  ///  长度必须小于的值 <see langword="maxLength" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMaxLengthFacet')]
  DNXmlSchemaMaxLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{EE630C3F-C9F2-3302-95F5-91A294AE75ED}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMaxLengthFacet = class(TDNGenericImport<DNXmlSchemaMaxLengthFacetClass, DNXmlSchemaMaxLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaMinLengthFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{AD79CD3D-EF0B-577B-B54D-2E123601B335}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaMinLengthFacet;

  end;

  ///<summary>
  ///  表示 <see langword="minLength" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定的数据值的最小长度限制 <see langword="simpleType" />
  ///  元素。
  ///  长度必须大于值 <see langword="minLength" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaMinLengthFacet')]
  DNXmlSchemaMinLengthFacet = interface(DNXmlSchemaNumericFacet)
  ['{45DF0D38-9318-3B30-B625-8B774F90743F}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaMinLengthFacet = class(TDNGenericImport<DNXmlSchemaMinLengthFacetClass, DNXmlSchemaMinLengthFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTotalDigitsFacetClass = interface(DNXmlSchemaNumericFacetClass)
  ['{9E85B48F-7159-56D9-8889-F1963CD59C42}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaTotalDigitsFacet;

  end;

  ///<summary>
  ///  表示 <see langword="totalDigits" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构方面。
  ///  此类可用于指定的数字个数，可输入的值的限制 <see langword="simpleType" />
  ///  元素。
  ///  该值的 <see langword="totalDigits" />
  ///  必须是正整数。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaTotalDigitsFacet')]
  DNXmlSchemaTotalDigitsFacet = interface(DNXmlSchemaNumericFacet)
  ['{354C6187-1002-31B3-8143-454E7553941D}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Value: string read get_Value write set_Value;
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaTotalDigitsFacet = class(TDNGenericImport<DNXmlSchemaTotalDigitsFacetClass, DNXmlSchemaTotalDigitsFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaPatternFacetClass = interface(DNXmlSchemaFacetClass)
  ['{0FA5195F-1E87-56E6-BEF4-0184363FBF55}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaPatternFacet;

  end;

  ///<summary>
  ///  表示 <see langword="pattern" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于指定为输入的值限制 <see langword="simpleType" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaPatternFacet')]
  DNXmlSchemaPatternFacet = interface(DNXmlSchemaFacet)
  ['{1C329F10-F38E-3E4B-BD59-86DEE8AA38FF}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaPatternFacet = class(TDNGenericImport<DNXmlSchemaPatternFacetClass, DNXmlSchemaPatternFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaWhiteSpaceFacetClass = interface(DNXmlSchemaFacetClass)
  ['{C4C5C955-1540-5607-A12A-650029950E8A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaWhiteSpaceFacet;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="whiteSpace" />
  ///  方面。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaWhiteSpaceFacet')]
  DNXmlSchemaWhiteSpaceFacet = interface(DNXmlSchemaFacet)
  ['{0E8BA914-FBF4-3A48-B892-88F9990256E8}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_IsFixed: Boolean;
    procedure set_IsFixed(value: Boolean);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="value" />
    ///  方面的属性。
    ///</summary>
    ///<returns>
    ///  值属性。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置用于指示此方面固定的信息。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，值是固定的; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsFixed: Boolean read get_IsFixed write set_IsFixed;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaWhiteSpaceFacet = class(TDNGenericImport<DNXmlSchemaWhiteSpaceFacetClass, DNXmlSchemaWhiteSpaceFacet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupClass = interface(DNXmlSchemaAnnotatedClass)
  ['{74CECBC7-1950-5F00-979A-32AA2E901552}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaGroup;

  end;

  ///<summary>
  ///  表示 <see langword="group" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类定义上的组 <see langword="schema" />
  ///  从复杂类型引用的级别。
  ///  它将若干元素声明归为一组，以便将它们当作一个组并入复杂类型定义。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaGroup')]
  DNXmlSchemaGroup = interface(DNXmlSchemaAnnotated)
  ['{BC37FBFA-BA80-30DA-A6BC-6BBA7BD2485F}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Particle: DNXmlSchemaGroupBase;
    procedure set_Particle(value: DNXmlSchemaGroupBase);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置架构组的名称。
    ///</summary>
    ///<returns>
    ///  架构组的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</returns>
    property Particle: DNXmlSchemaGroupBase read get_Particle write set_Particle;
    ///<summary>
    ///  获取架构组的限定名称。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象，表示架构组的限定的名称。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroup = class(TDNGenericImport<DNXmlSchemaGroupClass, DNXmlSchemaGroup>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIdentityConstraintClass = interface(DNXmlSchemaAnnotatedClass)
  ['{5E67FC03-677B-5EA1-84E4-DD9E170BE074}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaIdentityConstraint" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaIdentityConstraint;

  end;

  ///<summary>
  ///  标识约束的类︰ <see langword="key" />
  ///  , ，<see langword="keyref" />
  ///  , ，和 <see langword="unique" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaIdentityConstraint')]
  DNXmlSchemaIdentityConstraint = interface(DNXmlSchemaAnnotated)
  ['{D4582488-78CA-342A-A924-BB041FD5A8DF}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置标识约束的名称。
    ///</summary>
    ///<returns>
    ///  标识约束的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</returns>
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    ///<summary>
    ///  获取作为子级 XML 路径语言 (XPath) 表达式选择器应用于字段的集合。
    ///</summary>
    ///<returns>
    ///  字段的集合。
    ///</returns>
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    ///<summary>
    ///  获取标识约束，它保存编译后值的限定的名 <see langword="QualifiedName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaIdentityConstraint = class(TDNGenericImport<DNXmlSchemaIdentityConstraintClass, DNXmlSchemaIdentityConstraint>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{C31CADFC-9A68-586E-8AC2-F46B334A0B6D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaKey" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaKey;

  end;

  ///<summary>
  ///  此类表示 <see langword="key" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 xml 架构元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaKey')]
  DNXmlSchemaKey = interface(DNXmlSchemaIdentityConstraint)
  ['{C3753BE0-3939-3C14-9628-62B3D820CC40}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置标识约束的名称。
    ///</summary>
    ///<returns>
    ///  标识约束的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</returns>
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    ///<summary>
    ///  获取作为子级 XML 路径语言 (XPath) 表达式选择器应用于字段的集合。
    ///</summary>
    ///<returns>
    ///  字段的集合。
    ///</returns>
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    ///<summary>
    ///  获取标识约束，它保存编译后值的限定的名 <see langword="QualifiedName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKey = class(TDNGenericImport<DNXmlSchemaKeyClass, DNXmlSchemaKey>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaKeyrefClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{4E7CB961-D760-5695-9604-F34662A2AC75}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaKeyref" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaKeyref;

  end;

  ///<summary>
  ///  此类表示 <see langword="keyref" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 xml 架构元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaKeyref')]
  DNXmlSchemaKeyref = interface(DNXmlSchemaIdentityConstraint)
  ['{23E040BC-B402-358A-A5E3-0FEDF28EFA51}']
  { getters & setters } 

    function get_Refer: DNXmlQualifiedName;
    procedure set_Refer(value: DNXmlQualifiedName);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置键的名称（此约束在另一个简单或复杂的类型中引用）。
    ///</summary>
    ///<returns>
    ///  此约束引用的键的 QName。
    ///</returns>
    property Refer: DNXmlQualifiedName read get_Refer write set_Refer;
    ///<summary>
    ///  获取或设置标识约束的名称。
    ///</summary>
    ///<returns>
    ///  标识约束的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</returns>
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    ///<summary>
    ///  获取作为子级 XML 路径语言 (XPath) 表达式选择器应用于字段的集合。
    ///</summary>
    ///<returns>
    ///  字段的集合。
    ///</returns>
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    ///<summary>
    ///  获取标识约束，它保存编译后值的限定的名 <see langword="QualifiedName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaKeyref = class(TDNGenericImport<DNXmlSchemaKeyrefClass, DNXmlSchemaKeyref>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaUniqueClass = interface(DNXmlSchemaIdentityConstraintClass)
  ['{446C4C18-8272-553F-8605-1A4F5E9827D8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaUnique" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaUnique;

  end;

  ///<summary>
  ///  表示 <see langword="unique" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于标识一组元素中的唯一约束。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaUnique')]
  DNXmlSchemaUnique = interface(DNXmlSchemaIdentityConstraint)
  ['{03224C6D-7D3A-3B02-9BEF-668F59E225E0}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Selector: DNXmlSchemaXPath;
    procedure set_Selector(value: DNXmlSchemaXPath);
    function get_Fields: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置标识约束的名称。
    ///</summary>
    ///<returns>
    ///  标识约束的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</summary>
    ///<returns>
    ///  XPath 表达式 <see langword="selector" />
    ///  元素。
    ///</returns>
    property Selector: DNXmlSchemaXPath read get_Selector write set_Selector;
    ///<summary>
    ///  获取作为子级 XML 路径语言 (XPath) 表达式选择器应用于字段的集合。
    ///</summary>
    ///<returns>
    ///  字段的集合。
    ///</returns>
    property Fields: DNXmlSchemaObjectCollection read get_Fields;
    ///<summary>
    ///  获取标识约束，它保存编译后值的限定的名 <see langword="QualifiedName" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaUnique = class(TDNGenericImport<DNXmlSchemaUniqueClass, DNXmlSchemaUnique>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaNotationClass = interface(DNXmlSchemaAnnotatedClass)
  ['{935CBA95-F902-50A4-B3B9-B74C91F18512}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaNotation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaNotation;

  end;

  ///<summary>
  ///  表示 <see langword="notation" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  XML 架构 <see langword="notation" />
  ///  声明是一种重构形式的 <see langword="XML 1.0 NOTATION" />
  ///  声明。
  ///  批注的目的是描述 XML 文档中的非 XML 数据的格式。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaNotation')]
  DNXmlSchemaNotation = interface(DNXmlSchemaAnnotated)
  ['{55DAB099-DD0C-3BF5-A900-38AF16885B54}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Public: string;
    procedure set_Public(value: string);
    function get_System: string;
    procedure set_System(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置批注的名称。
    ///</summary>
    ///<returns>
    ///  批注的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置 <see langword="public" />
    ///  标识符。
    ///</summary>
    ///<returns><see langword="public" />
    ///  标识符。
    ///  该值必须是有效的统一资源标识符 (URI)。
    ///</returns>
    property &Public: string read get_Public write set_Public;
    ///<summary>
    ///  获取或设置 <see langword="system" />
    ///  标识符。
    ///</summary>
    ///<returns><see langword="system" />
    ///  标识符。
    ///  该值必须是有效的 URI。
    ///</returns>
    property System: string read get_System write set_System;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaNotation = class(TDNGenericImport<DNXmlSchemaNotationClass, DNXmlSchemaNotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaParticleClass = interface(DNXmlSchemaAnnotatedClass)
  ['{A0461EC1-C4D9-5D09-8FEF-1F69A8DAA165}']
  end;

  ///<summary>
  ///  为此，抽象类是所有微粒类型的基类 (例如 <see cref="T:System.Xml.Schema.XmlSchemaAny" />
  ///  )。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaParticle')]
  DNXmlSchemaParticle = interface(DNXmlSchemaAnnotated)
  ['{BBC2F95A-DB28-37A0-9714-4EEE0ECE12F8}']
  { getters & setters } 

    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最小次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MinOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最大次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MaxOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    ///<summary>
    ///  获取或设置粒子可发生最小次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最小次数。
    ///  默认值为 1。
    ///</returns>
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    ///<summary>
    ///  获取或设置最大数目的粒子可发生的次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最大次数。
    ///  默认值为 1。
    ///</returns>
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaParticle = class(TDNGenericImport<DNXmlSchemaParticleClass, DNXmlSchemaParticle>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnyClass = interface(DNXmlSchemaParticleClass)
  ['{E9B28038-819A-54F4-BE4A-250C53F0248A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAny" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAny;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="any" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAny')]
  DNXmlSchemaAny = interface(DNXmlSchemaParticle)
  ['{E2229971-F3A3-35BC-9FBD-4A8BA8973D8E}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_ProcessContents: DNXmlSchemaContentProcessing;
    procedure set_ProcessContents(value: DNXmlSchemaContentProcessing);
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置包含可以使用的元素的命名空间。
    ///</summary>
    ///<returns>
    ///  可供使用的元素的命名空间。
    ///  默认值为 <see langword="##any" />
    ///  。
    ///  可选。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置有关的应用程序或 XML 处理器应如何处理由指定的元素的 XML 文档的验证信息 <see langword="any" />
    ///  元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaContentProcessing" />
    ///  值之一。
    ///  如果没有 <see langword="processContents" />
    ///  指定属性，则默认为 <see langword="Strict" />
    ///  。
    ///</returns>
    property ProcessContents: DNXmlSchemaContentProcessing read get_ProcessContents write set_ProcessContents;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最小次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MinOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最大次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MaxOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    ///<summary>
    ///  获取或设置粒子可发生最小次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最小次数。
    ///  默认值为 1。
    ///</returns>
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    ///<summary>
    ///  获取或设置最大数目的粒子可发生的次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最大次数。
    ///  默认值为 1。
    ///</returns>
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAny = class(TDNGenericImport<DNXmlSchemaAnyClass, DNXmlSchemaAny>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaElementClass = interface(DNXmlSchemaParticleClass)
  ['{E37C444F-795F-54AD-9180-ABBA3F64F30C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaElement;

  end;

  ///<summary>
  ///  表示 <see langword="element" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类是所有微粒类型的基类，用于描述 XML 文档中的元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaElement')]
  DNXmlSchemaElement = interface(DNXmlSchemaParticle)
  ['{2FB0DA90-49F6-32E3-9B5F-C95E831179C8}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_DefaultValue: string;
    procedure set_DefaultValue(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_FixedValue: string;
    procedure set_FixedValue(value: string);
    function get_Form: DNXmlSchemaForm;
    procedure set_Form(value: DNXmlSchemaForm);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_IsNillable: Boolean;
    procedure set_IsNillable(value: Boolean);
    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_SubstitutionGroup: DNXmlQualifiedName;
    procedure set_SubstitutionGroup(value: DNXmlQualifiedName);
    function get_SchemaTypeName: DNXmlQualifiedName;
    procedure set_SchemaTypeName(value: DNXmlQualifiedName);
    function get_SchemaType: DNXmlSchemaType;
    procedure set_SchemaType(value: DNXmlSchemaType);
    function get_Constraints: DNXmlSchemaObjectCollection;
    function get_QualifiedName: DNXmlQualifiedName;
    function get_ElementType: DDN.mscorlib.DNObject;
    function get_ElementSchemaType: DNXmlSchemaType;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置信息以指示是否可在实例文档中使用该元素。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，则元素不能出现在实例文档。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    ///<summary>
    ///  获取或设置 <see langword="Block" />
    ///  派生。
    ///</summary>
    ///<returns>
    ///  用于阻止类型派生的属性。
    ///  默认值是 <see langword="XmlSchemaDerivationMethod.None" />
    ///  。
    ///  可选。
    ///</returns>
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    ///<summary>
    ///  获取或设置元素的默认值，如果其内容是简单类型或元素的内容是 <see langword="textOnly" />
    ///  。
    ///</summary>
    ///<returns>
    ///  元素的默认值。
    ///  默认为空引用。
    ///  可选。
    ///</returns>
    property DefaultValue: string read get_DefaultValue write set_DefaultValue;
    ///<summary>
    ///  获取或设置 <see langword="Final" />
    ///  属性以指示是否允许没有进一步派生。
    ///</summary>
    ///<returns><see langword="Final" />
    ///  属性。
    ///  默认值为 <see langword="XmlSchemaDerivationMethod.None" />
    ///  。
    ///  可选。
    ///</returns>
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    ///<summary>
    ///  获取或设置固定值。
    ///</summary>
    ///<returns>
    ///  预设的且不可更改的固定值。
    ///  默认为空引用。
    ///  可选。
    ///</returns>
    property FixedValue: string read get_FixedValue write set_FixedValue;
    ///<summary>
    ///  获取或设置元素的窗体。
    ///</summary>
    ///<returns>
    ///  该元素的形式。
    ///  默认值是 <see cref="P:System.Xml.Schema.XmlSchema.ElementFormDefault" />
    ///  值。
    ///  可选。
    ///</returns>
    property Form: DNXmlSchemaForm read get_Form write set_Form;
    ///<summary>
    ///  获取或设置元素的名称。
    ///</summary>
    ///<returns>
    ///  元素的名称。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置信息，该值指示如果 <see langword="xsi:nil" />
    ///  实例数据中可能会发生。
    ///  指示是否可以为元素赋予显式 Nil 值。
    ///</summary>
    ///<returns>
    ///  如果 nillable 为 <see langword="true" />
    ///  , ，这样，该元素具有实例 <see langword="nil" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///<see langword="nil" />
    ///  属性定义的 XML 架构命名空间的一部分实例。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsNillable: Boolean read get_IsNillable write set_IsNillable;
    ///<summary>
    ///  获取或设置在该架构（或指定的命名空间指示的另一个架构）中声明的元素的引用名称。
    ///</summary>
    ///<returns>
    ///  元素的引用名称。
    ///</returns>
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    ///<summary>
    ///  获取或设置由该元素替换的元素的名称。
    ///</summary>
    ///<returns>
    ///  由该元素替换的元素的限定名称。
    ///  可选。
    ///</returns>
    property SubstitutionGroup: DNXmlQualifiedName read get_SubstitutionGroup write set_SubstitutionGroup;
    ///<summary>
    ///  获取或设置在该架构或由指定的命名空间指示的其他架构中定义的内置数据类型的名称。
    ///</summary>
    ///<returns>
    ///  内置数据类型的名称。
    ///</returns>
    property SchemaTypeName: DNXmlQualifiedName read get_SchemaTypeName write set_SchemaTypeName;
    ///<summary>
    ///  获取或设置元素类型。
    ///  这可以是复杂类型，也可以是简单类型。
    ///</summary>
    ///<returns>
    ///  元素的类型。
    ///</returns>
    property SchemaType: DNXmlSchemaType read get_SchemaType write set_SchemaType;
    ///<summary>
    ///  获取对元素的约束的集合。
    ///</summary>
    ///<returns>
    ///  约束的集合。
    ///</returns>
    property Constraints: DNXmlSchemaObjectCollection read get_Constraints;
    ///<summary>
    ///  获取给定元素的实际限定名称。
    ///</summary>
    ///<returns>
    ///  元素的限定名。
    ///  编译后值的 <see langword="QualifiedName" />
    ///  属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取一个公共语言运行时 (CLR) 对象基于 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  的元素，它保存编译后值的 <see langword="ElementType" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  公共语言运行库对象。
    ///  编译后值的 <see langword="ElementType" />
    ///  属性。
    ///</returns>
    property ElementType: DDN.mscorlib.DNObject read get_ElementType;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示该元素的类型基于 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaType" />
    ///  或 <see cref="P:System.Xml.Schema.XmlSchemaElement.SchemaTypeName" />
    ///  元素的值。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象。
    ///</returns>
    property ElementSchemaType: DNXmlSchemaType read get_ElementSchemaType;
    ///<summary>
    ///  获取的编译后值 <see langword="Block" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="Block" />
    ///  属性。
    ///  默认值是 <see langword="BlockDefault" />
    ///  值上 <see langword="schema" />
    ///  元素。
    ///</returns>
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    ///<summary>
    ///  获取的编译后值 <see langword="Final" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="Final" />
    ///  属性。
    ///  默认值是 <see langword="FinalDefault" />
    ///  值上 <see langword="schema" />
    ///  元素。
    ///</returns>
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最小次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MinOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最大次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MaxOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    ///<summary>
    ///  获取或设置粒子可发生最小次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最小次数。
    ///  默认值为 1。
    ///</returns>
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    ///<summary>
    ///  获取或设置最大数目的粒子可发生的次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最大次数。
    ///  默认值为 1。
    ///</returns>
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaElement = class(TDNGenericImport<DNXmlSchemaElementClass, DNXmlSchemaElement>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupBaseClass = interface(DNXmlSchemaParticleClass)
  ['{A0D8D24D-ADCE-5941-92ED-A7F661EDAD53}']
  end;

  ///<summary>
  ///  抽象类的 <see cref="T:System.Xml.Schema.XmlSchemaAll" />
  ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
  ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaGroupBase')]
  DNXmlSchemaGroupBase = interface(DNXmlSchemaParticle)
  ['{22B8F5D4-1EBA-37C2-A125-7E2D33D48968}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  此集合用于将新元素添加到复合器。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="XmlSchemaObjectCollection" />
    ///  。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最小次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MinOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最大次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MaxOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    ///<summary>
    ///  获取或设置粒子可发生最小次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最小次数。
    ///  默认值为 1。
    ///</returns>
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    ///<summary>
    ///  获取或设置最大数目的粒子可发生的次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最大次数。
    ///  默认值为 1。
    ///</returns>
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupBase = class(TDNGenericImport<DNXmlSchemaGroupBaseClass, DNXmlSchemaGroupBase>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAllClass = interface(DNXmlSchemaGroupBaseClass)
  ['{C028B505-5AD5-52B4-8ED1-E7DFC9C99DE7}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAll;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="all" />
  ///  元素 （复合器）。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAll')]
  DNXmlSchemaAll = interface(DNXmlSchemaGroupBase)
  ['{FA8F492E-9886-344C-8E89-3524C27667A1}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取的集合 <see langword="XmlSchemaElement" />
    ///  中包含的元素 <see langword="all" />
    ///  复合器。
    ///</summary>
    ///<returns>
    ///  中包含的元素集合 <see langword="XmlSchemaAll" />
    ///  。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAll = class(TDNGenericImport<DNXmlSchemaAllClass, DNXmlSchemaAll>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaChoiceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{66E5EA3A-5E2E-59EA-AC80-8E57177B02D4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaChoice;

  end;

  ///<summary>
  ///  表示 <see langword="choice" />
  ///  由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素 （复合器）。
  ///<see langword="choice" />
  ///  允许出现在实例其子级之一。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaChoice')]
  DNXmlSchemaChoice = interface(DNXmlSchemaGroupBase)
  ['{58A72699-53C7-37FA-9629-07F42F7C8159}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取包含排序器的元素的集合 (<see langword="choice" />
    ///  ): <see langword="XmlSchemaElement" />
    ///  , ，<see langword="XmlSchemaGroupRef" />
    ///  , ，<see langword="XmlSchemaChoice" />
    ///  , ，<see langword="XmlSchemaSequence" />
    ///  , ，或 <see langword="XmlSchemaAny" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中包含的元素的集合 <see langword="XmlSchemaChoice" />
    ///  。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaChoice = class(TDNGenericImport<DNXmlSchemaChoiceClass, DNXmlSchemaChoice>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSequenceClass = interface(DNXmlSchemaGroupBaseClass)
  ['{72B50BA4-FFD8-5115-A1F5-DC4C85C0C3BB}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSequence;

  end;

  ///<summary>
  ///  表示 <see langword="sequence" />
  ///  由 World Wide Web 联合会 (W3C) 指定的 XML 架构元素 （复合器）。
  ///<see langword="sequence" />
  ///  要求要显示在包含元素内指定的序列中的组中的元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSequence')]
  DNXmlSchemaSequence = interface(DNXmlSchemaGroupBase)
  ['{7AD5F37A-8B74-35EF-B491-09F500C63CF1}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  包含在排序器中的元素。
    ///  集合 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaAny" />
    ///  。
    ///</summary>
    ///<returns>
    ///  包含在排序器中的元素。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSequence = class(TDNGenericImport<DNXmlSchemaSequenceClass, DNXmlSchemaSequence>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaGroupRefClass = interface(DNXmlSchemaParticleClass)
  ['{97E4CE92-BFD7-5C96-87E7-C9012E98A721}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaGroupRef;

  end;

  ///<summary>
  ///  表示 <see langword="group" />
  ///  具有元素 <see langword="ref" />
  ///  由 World Wide Web 联合会 (W3C) 指定的 XML 架构的属性。
  ///  在引用的复杂类型内使用此类 <see langword="group" />
  ///  在定义 <see langword="schema" />
  ///  级别。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaGroupRef')]
  DNXmlSchemaGroupRef = interface(DNXmlSchemaParticle)
  ['{1D89F049-7E99-338D-9FEB-3A2895F35236}']
  { getters & setters } 

    function get_RefName: DNXmlQualifiedName;
    procedure set_RefName(value: DNXmlQualifiedName);
    function get_Particle: DNXmlSchemaGroupBase;
    function get_MinOccursString: string;
    procedure set_MinOccursString(value: string);
    function get_MaxOccursString: string;
    procedure set_MaxOccursString(value: string);
    function get_MinOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MinOccurs(value: DDN.mscorlib.DNDecimal);
    function get_MaxOccurs: DDN.mscorlib.DNDecimal;
    procedure set_MaxOccurs(value: DDN.mscorlib.DNDecimal);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置在此架构（或指定命名空间指示的其他架构）中定义的组的名称。
    ///</summary>
    ///<returns>
    ///  在此架构中定义的组的名称。
    ///</returns>
    property RefName: DNXmlQualifiedName read get_RefName write set_RefName;
    ///<summary>
    ///  获取其中一个 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类，它保存编译后值的 <see langword="Particle" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="Particle" />
    ///  属性，这是其中之一的 <see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</returns>
    property Particle: DNXmlSchemaGroupBase read get_Particle;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最小次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MinOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MinOccursString: string read get_MinOccursString write set_MinOccursString;
    ///<summary>
    ///  获取或设置作为字符串值的数目。
    ///  粒子可发生的最大次数。
    ///</summary>
    ///<returns>
    ///  将数字显示为一个字符串值。
    ///<see langword="String.Empty" />
    ///  指示 <see langword="MaxOccurs" />
    ///  是否等同于默认值。
    ///  默认为空引用。
    ///</returns>
    property MaxOccursString: string read get_MaxOccursString write set_MaxOccursString;
    ///<summary>
    ///  获取或设置粒子可发生最小次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最小次数。
    ///  默认值为 1。
    ///</returns>
    property MinOccurs: DDN.mscorlib.DNDecimal read get_MinOccurs write set_MinOccurs;
    ///<summary>
    ///  获取或设置最大数目的粒子可发生的次数。
    ///</summary>
    ///<returns>
    ///  粒子可发生的最大次数。
    ///  默认值为 1。
    ///</returns>
    property MaxOccurs: DDN.mscorlib.DNDecimal read get_MaxOccurs write set_MaxOccurs;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaGroupRef = class(TDNGenericImport<DNXmlSchemaGroupRefClass, DNXmlSchemaGroupRef>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeContentClass = interface(DNXmlSchemaAnnotatedClass)
  ['{1A6AC03E-72DE-5469-8B66-C7E332D5B386}']
  end;

  ///<summary>
  ///  简单类型内容类的的抽象类。 的
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeContent')]
  DNXmlSchemaSimpleTypeContent = interface(DNXmlSchemaAnnotated)
  ['{EA6621EC-B0D8-3069-A30C-B2595361BDD1}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeContent = class(TDNGenericImport<DNXmlSchemaSimpleTypeContentClass, DNXmlSchemaSimpleTypeContent>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeListClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{EFCAF439-EA35-53F2-9947-F65992082320}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleTypeList;

  end;

  ///<summary>
  ///  表示 <see langword="list" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可以用于定义 <see langword="simpleType" />
  ///  元素，作为指定的数据类型的值的列表。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeList')]
  DNXmlSchemaSimpleTypeList = interface(DNXmlSchemaSimpleTypeContent)
  ['{245AF784-4B0F-3F7A-A46F-17C4E92DC411}']
  { getters & setters } 

    function get_ItemTypeName: DNXmlQualifiedName;
    procedure set_ItemTypeName(value: DNXmlQualifiedName);
    function get_ItemType: DNXmlSchemaSimpleType;
    procedure set_ItemType(value: DNXmlSchemaSimpleType);
    function get_BaseItemType: DNXmlSchemaSimpleType;
    procedure set_BaseItemType(value: DNXmlSchemaSimpleType);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置内置数据类型的名称或 <see langword="simpleType" />
    ///  此架构 （或由指定的命名空间指示的另一个架构） 中定义的元素。
    ///</summary>
    ///<returns>
    ///  简单类型列表的类型名称。
    ///</returns>
    property ItemTypeName: DNXmlQualifiedName read get_ItemTypeName write set_ItemTypeName;
    ///<summary>
    ///  获取或设置 <see langword="simpleType" />
    ///  从基值指定的类型派生的元素。
    ///</summary>
    ///<returns>
    ///  简单类型元素的项类型。
    ///</returns>
    property ItemType: DNXmlSchemaSimpleType read get_ItemType write set_ItemType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  表示类型的 <see langword="simpleType" />
    ///  元素根据 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemType" />
    ///  和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeList.ItemTypeName" />
    ///  简单类型的值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  表示类型的 <see langword="simpleType" />
    ///  元素。
    ///</returns>
    property BaseItemType: DNXmlSchemaSimpleType read get_BaseItemType write set_BaseItemType;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeList = class(TDNGenericImport<DNXmlSchemaSimpleTypeListClass, DNXmlSchemaSimpleTypeList>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeRestrictionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{4F0D69FE-2705-5657-AC29-82BA27EFC86D}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleTypeRestriction;

  end;

  ///<summary>
  ///  表示 <see langword="restriction" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构简单类型的元素。
  ///  此类可用于限制 <see langword="simpleType" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeRestriction')]
  DNXmlSchemaSimpleTypeRestriction = interface(DNXmlSchemaSimpleTypeContent)
  ['{932C904B-6D2C-3EA8-9B68-76B0653D0907}']
  { getters & setters } 

    function get_BaseTypeName: DNXmlQualifiedName;
    procedure set_BaseTypeName(value: DNXmlQualifiedName);
    function get_BaseType: DNXmlSchemaSimpleType;
    procedure set_BaseType(value: DNXmlSchemaSimpleType);
    function get_Facets: DNXmlSchemaObjectCollection;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置限定的基类型的名称。
    ///</summary>
    ///<returns>
    ///  简单类型限制基类型的限定名称。
    ///</returns>
    property BaseTypeName: DNXmlQualifiedName read get_BaseTypeName write set_BaseTypeName;
    ///<summary>
    ///  获取或设置有关基类型的信息。
    ///</summary>
    ///<returns>
    ///  基类型 <see langword="simpleType" />
    ///  元素。
    ///</returns>
    property BaseType: DNXmlSchemaSimpleType read get_BaseType write set_BaseType;
    ///<summary>
    ///  获取或设置一个 XML 架构方面。
    ///</summary>
    ///<returns>
    ///  以下方面类之一：
    ///<see cref="T:System.Xml.Schema.XmlSchemaLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxLengthFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaPatternFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaEnumerationFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxInclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMaxExclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinInclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaMinExclusiveFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaFractionDigitsFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaTotalDigitsFacet" />
    ///  , <see cref="T:System.Xml.Schema.XmlSchemaWhiteSpaceFacet" />
    ///  .
    ///</returns>
    property Facets: DNXmlSchemaObjectCollection read get_Facets;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeRestriction = class(TDNGenericImport<DNXmlSchemaSimpleTypeRestrictionClass, DNXmlSchemaSimpleTypeRestriction>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeUnionClass = interface(DNXmlSchemaSimpleTypeContentClass)
  ['{F6EBE348-DFCA-59AD-9E7E-6C1C3E27CFAC}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleTypeUnion;

  end;

  ///<summary>
  ///  表示 <see langword="union" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构简单类型的元素。
  ///  一个 <see langword="union" />
  ///  数据类型可以用于指定的内容 <see langword="simpleType" />
  ///  。
  ///  值 <see langword="simpleType" />
  ///  元素必须是该联合中指定的备用数据类型的一任何的组一个。
  ///  联合类型始终是派生类型，必须至少包含两种替代数据类型。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleTypeUnion')]
  DNXmlSchemaSimpleTypeUnion = interface(DNXmlSchemaSimpleTypeContent)
  ['{12FEEBF7-E17C-300D-98AB-E4B5A71B1332}']
  { getters & setters } 

    function get_BaseTypes: DNXmlSchemaObjectCollection;
    function get_MemberTypes: TArray<DNXmlQualifiedName>;
    procedure set_MemberTypes(value: TArray<DNXmlQualifiedName>);
    function get_BaseMemberTypes: TArray<DNXmlSchemaSimpleType>;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基类型的集合。
    ///</summary>
    ///<returns>
    ///  简单类型基值的集合。
    ///</returns>
    property BaseTypes: DNXmlSchemaObjectCollection read get_BaseTypes;
    ///<summary>
    ///  获取或设置内置数据类型的名称的限定的成员的数组或 <see langword="simpleType" />
    ///  此架构 （或由指定的命名空间指示的另一个架构） 中定义的元素。
    ///</summary>
    ///<returns>
    ///  一个由内置数据类型或简单类型的成员列表组成的数组。
    ///</returns>
    property MemberTypes: TArray<DNXmlQualifiedName> read get_MemberTypes write set_MemberTypes;
    ///<summary>
    ///  获取一个数组 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  对象表示的一种 <see langword="simpleType" />
    ///  元素根据 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.BaseTypes" />
    ///  和 <see cref="P:System.Xml.Schema.XmlSchemaSimpleTypeUnion.MemberTypes" />
    ///  简单类型的值。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  对象表示的一种 <see langword="simpleType" />
    ///  元素。
    ///</returns>
    property BaseMemberTypes: TArray<DNXmlSchemaSimpleType> read get_BaseMemberTypes;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleTypeUnion = class(TDNGenericImport<DNXmlSchemaSimpleTypeUnionClass, DNXmlSchemaSimpleTypeUnion>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaTypeClass = interface(DNXmlSchemaAnnotatedClass)
  ['{8FDF1377-B093-5013-822E-311F8771F20E}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaType;

  { static methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  ，它表示由限定的名称指定的简单类型的内置简单类型。
    ///</summary>
    ///  <param name="qualifiedName"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  的简单类型。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  ，它表示的内置简单类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetBuiltInSimpleType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaSimpleType; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  ，它表示指定的简单类型的内置简单类型。
    ///</summary>
    ///  <param name="typeCode">
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  表示简单类型的值。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  ，它表示的内置简单类型。
    ///</returns>
    {class} function GetBuiltInSimpleType(typeCode: DNXmlTypeCode): DNXmlSchemaSimpleType; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  ，它表示指定的复杂类型的内置复杂类型。
    ///</summary>
    ///  <param name="typeCode">
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  表示复杂类型的值。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  ，它表示的内置复杂类型。
    ///</returns>
    {class} function GetBuiltInComplexType(typeCode: DNXmlTypeCode): DNXmlSchemaComplexType; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  ，它表示指定限定名的复杂类型的内置复杂类型。
    ///</summary>
    ///  <param name="qualifiedName"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  的复杂类型。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  ，它表示的内置复杂类型。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  参数为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function GetBuiltInComplexType(qualifiedName: DNXmlQualifiedName): DNXmlSchemaComplexType; overload;
    ///<summary>
    ///  返回一个值，该值指示指定的派生的架构类型从指定的基本架构类型派生
    ///</summary>
    ///  <param name="derivedType">
    ///  在派生 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  测试。
    ///</param>
    ///  <param name="baseType">
    ///  基 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  测试派生 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对。
    ///</param>
    ///  <param name="except">
    ///  其中一个 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  表示不包括在测试的类型派生方法的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果派生的类型派生自基类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsDerivedFrom(derivedType: DNXmlSchemaType; baseType: DNXmlSchemaType; &except: DNXmlSchemaDerivationMethod): Boolean;

  end;

  ///<summary>
  ///  所有简单类型和复杂类型的基类。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaType')]
  DNXmlSchemaType = interface(DNXmlSchemaAnnotated)
  ['{034C6617-1C55-3EA2-8010-DFB0CD9A8FFE}']
  { getters & setters } 

    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置类型的名称。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置指示是否允许进一步派生的类型派生的最终属性。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />
    ///  。
    ///</returns>
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    ///<summary>
    ///  获取从生成的类型的限定的名 <see langword="Name" />
    ///  此类型的属性。
    ///  这是后架构编译属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  从生成的类型为 <see langword="Name" />
    ///  此类型的属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取的编译后值 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///  默认值是 <see langword="finalDefault" />
    ///  属性值为 <see langword="schema" />
    ///  元素。
    ///</returns>
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    ///<summary>
    ///  获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
    ///  这是后架构编译信息集属性。
    ///</summary>
    ///<returns>
    ///  内置 XSD 数据类型、 简单类型元素或 complexType 元素。
    ///</returns>
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    ///<summary>
    ///  获取此架构类型的基类型编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示此架构类型的基类型。
    ///</returns>
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    ///<summary>
    ///  获取此元素通过其基类型派生的方式上的编译后信息。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///</returns>
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    ///<summary>
    ///  获取复杂类型的数据类型的编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  架构编译后值。
    ///</returns>
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    ///<summary>
    ///  获取或设置一个值，该值指示此类型是否具有混合内容模型。
    ///  此属性才是有效的复杂类型中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该类型具有混合内容模型中;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  值之一。
    ///</returns>
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaType = class(TDNGenericImport<DNXmlSchemaTypeClass, DNXmlSchemaType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaComplexTypeClass = interface(DNXmlSchemaTypeClass)
  ['{672EAADE-3AD2-5F7E-9611-4C1E00A4F003}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaComplexType;

  end;

  ///<summary>
  ///  表示 <see langword="complexType" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类定义一个复杂类型，它确定属性集和元素的内容。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaComplexType')]
  DNXmlSchemaComplexType = interface(DNXmlSchemaType)
  ['{DD5B141E-1C22-39F2-9F27-2A12947759A9}']
  { getters & setters } 

    function get_IsAbstract: Boolean;
    procedure set_IsAbstract(value: Boolean);
    function get_Block: DNXmlSchemaDerivationMethod;
    procedure set_Block(value: DNXmlSchemaDerivationMethod);
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_ContentModel: DNXmlSchemaContentModel;
    procedure set_ContentModel(value: DNXmlSchemaContentModel);
    function get_Particle: DNXmlSchemaParticle;
    procedure set_Particle(value: DNXmlSchemaParticle);
    function get_Attributes: DNXmlSchemaObjectCollection;
    function get_AnyAttribute: DNXmlSchemaAnyAttribute;
    procedure set_AnyAttribute(value: DNXmlSchemaAnyAttribute);
    function get_ContentType: DNXmlSchemaContentType;
    function get_ContentTypeParticle: DNXmlSchemaParticle;
    function get_BlockResolved: DNXmlSchemaDerivationMethod;
    function get_AttributeUses: DNXmlSchemaObjectTable;
    function get_AttributeWildcard: DNXmlSchemaAnyAttribute;
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置确定的信息 <see langword="complexType" />
    ///  元素可在实例文档中。
    ///</summary>
    ///<returns>
    ///  如果 <see langword="true" />
    ///  , ，元素不能使用此 <see langword="complexType" />
    ///  直接元素，并且必须使用派生自该复杂类型 <see langword="complexType" />
    ///  元素。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsAbstract: Boolean read get_IsAbstract write set_IsAbstract;
    ///<summary>
    ///  获取或设置 <see langword="block" />
    ///  属性。
    ///</summary>
    ///<returns><see langword="block" />
    ///  特性阻止在指定的派生类型中使用复杂类型。
    ///  默认值为 <see langword="XmlSchemaDerivationMethod.None" />
    ///  。
    ///  可选。
    ///</returns>
    property Block: DNXmlSchemaDerivationMethod read get_Block write set_Block;
    ///<summary>
    ///  获取或设置确定复杂类型是否具有混合内容模型（内容中的标记）的相关信息。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果字符数据可能出现这种复杂类型; 的子元素之间否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  可选。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取或设置编译后 <see cref="T:System.Xml.Schema.XmlSchemaContentModel" />
    ///  此复杂类型。
    ///</summary>
    ///<returns>
    ///  内容模型类型之一的 <see cref="T:System.Xml.Schema.XmlSchemaSimpleContent" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaComplexContent" />
    ///  类。
    ///</returns>
    property ContentModel: DNXmlSchemaContentModel read get_ContentModel write set_ContentModel;
    ///<summary>
    ///  获取或设置作为之一的合成程序类型 <see cref="T:System.Xml.Schema.XmlSchemaGroupRef" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaChoice" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAll" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSequence" />
    ///  类。
    ///</summary>
    ///<returns>
    ///  合成程序类型。
    ///</returns>
    property Particle: DNXmlSchemaParticle read get_Particle write set_Particle;
    ///<summary>
    ///  获取复杂类型的属性集合。
    ///</summary>
    ///<returns>
    ///  包含 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  和 <see cref="T:System.Xml.Schema.XmlSchemaAttributeGroupRef" />
    ///  类。
    ///</returns>
    property Attributes: DNXmlSchemaObjectCollection read get_Attributes;
    ///<summary>
    ///  获取或设置的值为 <see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  复杂类型的组件。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnyAttribute" />
    ///  复杂类型的组件。
    ///</returns>
    property AnyAttribute: DNXmlSchemaAnyAttribute read get_AnyAttribute write set_AnyAttribute;
    ///<summary>
    ///  获取复杂类型的内容模型，它保存编译后值。
    ///</summary>
    ///<returns>
    ///  复杂类型的内容模型的编译后值。
    ///</returns>
    property ContentType: DNXmlSchemaContentType read get_ContentType;
    ///<summary>
    ///  获取包含的编译后值的粒子 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" />
    ///  粒子。
    ///</summary>
    ///<returns>
    ///  内容类型的微粒。
    ///  编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaComplexType.ContentType" />
    ///  粒子。
    ///</returns>
    property ContentTypeParticle: DNXmlSchemaParticle read get_ContentTypeParticle;
    ///<summary>
    ///  在已将类型编译为架构验证后信息集 (infoset) 之后获取值。
    ///  此值指示如何强制类型时 <see langword="xsi:type" />
    ///  实例文档中使用。
    ///</summary>
    ///<returns>
    ///  架构验证后信息 infoset 值。
    ///  默认值是 <see langword="BlockDefault" />
    ///  值上 <see langword="schema" />
    ///  元素。
    ///</returns>
    property BlockResolved: DNXmlSchemaDerivationMethod read get_BlockResolved;
    ///<summary>
    ///  获取该复杂类型及其基类型的所有已编译属性的集合。
    ///</summary>
    ///<returns>
    ///  来自该复杂类型及其基类型的所有属性的集合。
    ///  编译后值的 <see langword="AttributeUses" />
    ///  属性。
    ///</returns>
    property AttributeUses: DNXmlSchemaObjectTable read get_AttributeUses;
    ///<summary>
    ///  获取有关的编译后值 <see langword="anyAttribute" />
    ///  以及该复杂类型及其基类型。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see langword="anyAttribute" />
    ///  元素。
    ///</returns>
    property AttributeWildcard: DNXmlSchemaAnyAttribute read get_AttributeWildcard;
    ///<summary>
    ///  获取或设置类型的名称。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置指示是否允许进一步派生的类型派生的最终属性。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />
    ///  。
    ///</returns>
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    ///<summary>
    ///  获取从生成的类型的限定的名 <see langword="Name" />
    ///  此类型的属性。
    ///  这是后架构编译属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  从生成的类型为 <see langword="Name" />
    ///  此类型的属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取的编译后值 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///  默认值是 <see langword="finalDefault" />
    ///  属性值为 <see langword="schema" />
    ///  元素。
    ///</returns>
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    ///<summary>
    ///  获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
    ///  这是后架构编译信息集属性。
    ///</summary>
    ///<returns>
    ///  内置 XSD 数据类型、 简单类型元素或 complexType 元素。
    ///</returns>
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    ///<summary>
    ///  获取此架构类型的基类型编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示此架构类型的基类型。
    ///</returns>
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    ///<summary>
    ///  获取此元素通过其基类型派生的方式上的编译后信息。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///</returns>
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    ///<summary>
    ///  获取复杂类型的数据类型的编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  架构编译后值。
    ///</returns>
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  值之一。
    ///</returns>
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaComplexType = class(TDNGenericImport<DNXmlSchemaComplexTypeClass, DNXmlSchemaComplexType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSimpleTypeClass = interface(DNXmlSchemaTypeClass)
  ['{C2B52D2F-718D-53B4-8C9A-186C5A646571}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSimpleType;

  end;

  ///<summary>
  ///  表示 <see langword="simpleType" />
  ///  从 XML 架构中由 World Wide Web 联合会 (W3C) 指定的简单内容的元素。
  ///  此类定义简单类型。
  ///  简单类型可以为具有纯文本内容的属性值或元素值指定信息和约束。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSimpleType')]
  DNXmlSchemaSimpleType = interface(DNXmlSchemaType)
  ['{5CF951C1-5287-3510-9277-FD30287ECB0F}']
  { getters & setters } 

    function get_Content: DNXmlSchemaSimpleTypeContent;
    procedure set_Content(value: DNXmlSchemaSimpleTypeContent);
    function get_Name: string;
    procedure set_Name(value: string);
    function get_Final: DNXmlSchemaDerivationMethod;
    procedure set_Final(value: DNXmlSchemaDerivationMethod);
    function get_QualifiedName: DNXmlQualifiedName;
    function get_FinalResolved: DNXmlSchemaDerivationMethod;
    function get_BaseSchemaType: DDN.mscorlib.DNObject;
    function get_BaseXmlSchemaType: DNXmlSchemaType;
    function get_DerivedBy: DNXmlSchemaDerivationMethod;
    function get_Datatype: DNXmlSchemaDatatype;
    function get_IsMixed: Boolean;
    procedure set_IsMixed(value: Boolean);
    function get_TypeCode: DNXmlTypeCode;
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeUnion" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeList" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaSimpleTypeRestriction" />
    ///  。
    ///</summary>
    ///<returns>
    ///  其中一个 <see langword="XmlSchemaSimpleTypeUnion" />
    ///  , ，<see langword="XmlSchemaSimpleTypeList" />
    ///  , ，或 <see langword="XmlSchemaSimpleTypeRestriction" />
    ///  。
    ///</returns>
    property Content: DNXmlSchemaSimpleTypeContent read get_Content write set_Content;
    ///<summary>
    ///  获取或设置类型的名称。
    ///</summary>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    property Name: string read get_Name write set_Name;
    ///<summary>
    ///  获取或设置指示是否允许进一步派生的类型派生的最终属性。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///  默认值为 <see cref="F:System.Xml.Schema.XmlSchemaDerivationMethod.None" />
    ///  。
    ///</returns>
    property &Final: DNXmlSchemaDerivationMethod read get_Final write set_Final;
    ///<summary>
    ///  获取从生成的类型的限定的名 <see langword="Name" />
    ///  此类型的属性。
    ///  这是后架构编译属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  从生成的类型为 <see langword="Name" />
    ///  此类型的属性。
    ///</returns>
    property QualifiedName: DNXmlQualifiedName read get_QualifiedName;
    ///<summary>
    ///  获取的编译后值 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  编译后值的 <see cref="P:System.Xml.Schema.XmlSchemaType.Final" />
    ///  属性。
    ///  默认值是 <see langword="finalDefault" />
    ///  属性值为 <see langword="schema" />
    ///  元素。
    ///</returns>
    property FinalResolved: DNXmlSchemaDerivationMethod read get_FinalResolved;
    ///<summary>
    ///  获取编译后的对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 简单类型元素或 complexType 元素。
    ///  这是后架构编译信息集属性。
    ///</summary>
    ///<returns>
    ///  内置 XSD 数据类型、 简单类型元素或 complexType 元素。
    ///</returns>
    property BaseSchemaType: DDN.mscorlib.DNObject read get_BaseSchemaType;
    ///<summary>
    ///  获取此架构类型的基类型编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象，表示此架构类型的基类型。
    ///</returns>
    property BaseXmlSchemaType: DNXmlSchemaType read get_BaseXmlSchemaType;
    ///<summary>
    ///  获取此元素通过其基类型派生的方式上的编译后信息。
    ///</summary>
    ///<returns>
    ///  一个有效 <see cref="T:System.Xml.Schema.XmlSchemaDerivationMethod" />
    ///  值。
    ///</returns>
    property DerivedBy: DNXmlSchemaDerivationMethod read get_DerivedBy;
    ///<summary>
    ///  获取复杂类型的数据类型的编译后值。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  架构编译后值。
    ///</returns>
    property Datatype: DNXmlSchemaDatatype read get_Datatype;
    ///<summary>
    ///  获取或设置一个值，该值指示此类型是否具有混合内容模型。
    ///  此属性才是有效的复杂类型中。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该类型具有混合内容模型中;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IsMixed: Boolean read get_IsMixed write set_IsMixed;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlTypeCode" />
    ///  值之一。
    ///</returns>
    property TypeCode: DNXmlTypeCode read get_TypeCode;
    property Id: string read get_Id write set_Id;
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaSimpleType = class(TDNGenericImport<DNXmlSchemaSimpleTypeClass, DNXmlSchemaSimpleType>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaXPathClass = interface(DNXmlSchemaAnnotatedClass)
  ['{A37BC35E-9B84-536D-8BB7-DB84FA0C41E8}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaXPath" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaXPath;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="selector" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaXPath')]
  DNXmlSchemaXPath = interface(DNXmlSchemaAnnotated)
  ['{FD9FF2B1-928E-33F7-915C-ED9AB1AB7D50}']
  { getters & setters } 

    function get_XPath: string;
    procedure set_XPath(value: string);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 XPath 表达式的属性。
    ///</summary>
    ///<returns>
    ///  XPath 表达式的字符串属性值。
    ///</returns>
    property XPath: string read get_XPath write set_XPath;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  表示 <see langword="annotation" />
    ///  属性。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置不属于当前架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  数组的限定 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaXPath = class(TDNGenericImport<DNXmlSchemaXPathClass, DNXmlSchemaXPath>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAnnotationClass = interface(DNXmlSchemaObjectClass)
  ['{2FE9A18A-1D68-5848-904C-F390D137E1F4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAnnotation;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="annotation" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAnnotation')]
  DNXmlSchemaAnnotation = interface(DNXmlSchemaObject)
  ['{49BDD231-79E7-3A56-B297-A343DF715747}']
  { getters & setters } 

    function get_Id: string;
    procedure set_Id(value: string);
    function get_Items: DNXmlSchemaObjectCollection;
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取 <see langword="Items" />
    ///  集合，用于存储 <see langword="appinfo" />
    ///  和 <see langword="documentation" />
    ///  子元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />
    ///  的 <see langword="appinfo" />
    ///  和 <see langword="documentation" />
    ///  子元素。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    ///<summary>
    ///  获取或设置不属于架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.XmlAttribute" />
    ///  对象不属于架构目标命名空间。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAnnotation = class(TDNGenericImport<DNXmlSchemaAnnotationClass, DNXmlSchemaAnnotation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaAppInfoClass = interface(DNXmlSchemaObjectClass)
  ['{CA13D1DE-A448-5039-8B57-0FC60DEBFB28}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaAppInfo" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaAppInfo;

  end;

  ///<summary>
  ///  表示 World Wide Web 联合会 (W3C) <see langword="appinfo" />
  ///  元素。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaAppInfo')]
  DNXmlSchemaAppInfo = interface(DNXmlSchemaObject)
  ['{8683860B-0619-30F9-BCDE-A4CB7E4F61E7}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置应用程序信息的源。
    ///</summary>
    ///<returns>
    ///  统一资源标识符 (URI) 的引用。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Source: string read get_Source write set_Source;
    ///<summary>
    ///  获取或设置一个数组 <see cref="T:System.Xml.XmlNode" />
    ///  该对象表示 <see langword="appinfo" />
    ///  子节点。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.XmlNode" />
    ///  该对象表示 <see langword="appinfo" />
    ///  子节点。
    ///</returns>
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaAppInfo = class(TDNGenericImport<DNXmlSchemaAppInfoClass, DNXmlSchemaAppInfo>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaDocumentationClass = interface(DNXmlSchemaObjectClass)
  ['{80679780-E56A-5917-96C0-0AF891D68E5C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaDocumentation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaDocumentation;

  end;

  ///<summary>
  ///  表示 <see langword="documentation" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类指定要读取或使用的中人们信息 <see langword="annotation" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaDocumentation')]
  DNXmlSchemaDocumentation = interface(DNXmlSchemaObject)
  ['{D43BD4BE-569F-3D2B-9966-FD07F6231581}']
  { getters & setters } 

    function get_Source: string;
    procedure set_Source(value: string);
    function get_Language: string;
    procedure set_Language(value: string);
    function get_Markup: TArray<DNXmlNode>;
    procedure set_Markup(value: TArray<DNXmlNode>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置信息的统一资源标识符 (URI) 源。
    ///</summary>
    ///<returns>
    ///  URI 引用。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Source: string read get_Source write set_Source;
    ///<summary>
    ///  获取或设置 <see langword="xml:lang" />
    ///  属性。
    ///  这作为在内容中使用的语言的指示器。
    ///</summary>
    ///<returns><see langword="xml:lang" />
    ///  属性。
    ///  可选。
    ///</returns>
    property Language: string read get_Language write set_Language;
    ///<summary>
    ///  获取或设置一个数组 <see langword="XmlNodes" />
    ///  ，它表示文档子节点。
    ///</summary>
    ///<returns>
    ///  表示文档子节点的数组。
    ///</returns>
    property Markup: TArray<DNXmlNode> read get_Markup write set_Markup;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaDocumentation = class(TDNGenericImport<DNXmlSchemaDocumentationClass, DNXmlSchemaDocumentation>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaExternalClass = interface(DNXmlSchemaObjectClass)
  ['{042C852D-45F1-5226-BE62-CAC2FF74BF8D}']
  end;

  ///<summary>
  ///  一个抽象类。
  ///  提供有关包含的架构信息。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaExternal')]
  DNXmlSchemaExternal = interface(DNXmlSchemaObject)
  ['{2140C659-30AF-305C-AE76-DA8E408DDBD0}']
  { getters & setters } 

    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置通知架构处理器架构以物理方式所在的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  URI 的架构位置。
    ///  对于导入的架构是可选的。
    ///</returns>
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    ///<summary>
    ///  获取或设置 <see langword="XmlSchema" />
    ///  引用架构。
    ///</summary>
    ///<returns><see langword="XmlSchema" />
    ///  引用架构。
    ///</returns>
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取和设置不属于架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  属于另一个目标命名空间的限定的属性。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    ///<summary>
    ///  获取或设置到的文件中的行号 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    ///<summary>
    ///  获取或设置到的文件中的行位置 <see langword="schema" />
    ///  元素引用。
    ///</summary>
    ///<returns>
    ///  行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    ///<summary>
    ///  获取或设置加载的架构的文件的源位置。
    ///</summary>
    ///<returns>
    ///  文件的源位置 (URI)。
    ///</returns>
    property SourceUri: string read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置此父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</summary>
    ///<returns>
    ///  父 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  此 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  要用于此架构对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  架构对象的属性。
    ///</returns>
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaExternal = class(TDNGenericImport<DNXmlSchemaExternalClass, DNXmlSchemaExternal>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaImportClass = interface(DNXmlSchemaExternalClass)
  ['{5C57ACBD-AD2B-5EDF-BE09-3ABFC46D13CE}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaImport" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaImport;

  end;

  ///<summary>
  ///  表示 <see langword="import" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类用于从其他架构导入架构组件。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaImport')]
  DNXmlSchemaImport = interface(DNXmlSchemaExternal)
  ['{FF7FC38A-2EC5-3322-BB85-238380171C5A}']
  { getters & setters } 

    function get_Namespace: string;
    procedure set_Namespace(value: string);
    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置作为统一资源标识符 (URI) 引用的已导入架构的目标命名空间。
    ///</summary>
    ///<returns>
    ///  作为 URI 引用的已导入架构的目标命名空间。
    ///  可选。
    ///</returns>
    property Namespace: string read get_Namespace write set_Namespace;
    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  批注。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置通知架构处理器架构以物理方式所在的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  URI 的架构位置。
    ///  对于导入的架构是可选的。
    ///</returns>
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    ///<summary>
    ///  获取或设置 <see langword="XmlSchema" />
    ///  引用架构。
    ///</summary>
    ///<returns><see langword="XmlSchema" />
    ///  引用架构。
    ///</returns>
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取和设置不属于架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  属于另一个目标命名空间的限定的属性。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaImport = class(TDNGenericImport<DNXmlSchemaImportClass, DNXmlSchemaImport>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaIncludeClass = interface(DNXmlSchemaExternalClass)
  ['{83DA6F85-D5C2-593E-A755-349F81E1AA93}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaInclude" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaInclude;

  end;

  ///<summary>
  ///  表示 <see langword="include" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类用于包括来自外部架构的声明和定义。
  ///  然后，包括的声明和定义可用于包含架构中的处理。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaInclude')]
  DNXmlSchemaInclude = interface(DNXmlSchemaExternal)
  ['{8D0930C2-FF47-35B0-A7D5-73D42206502A}']
  { getters & setters } 

    function get_Annotation: DNXmlSchemaAnnotation;
    procedure set_Annotation(value: DNXmlSchemaAnnotation);
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置 <see langword="annotation" />
    ///  属性。
    ///</summary>
    ///<returns>
    ///  批注。
    ///</returns>
    property Annotation: DNXmlSchemaAnnotation read get_Annotation write set_Annotation;
    ///<summary>
    ///  获取或设置通知架构处理器架构以物理方式所在的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  URI 的架构位置。
    ///  对于导入的架构是可选的。
    ///</returns>
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    ///<summary>
    ///  获取或设置 <see langword="XmlSchema" />
    ///  引用架构。
    ///</summary>
    ///<returns><see langword="XmlSchema" />
    ///  引用架构。
    ///</returns>
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取和设置不属于架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  属于另一个目标命名空间的限定的属性。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaInclude = class(TDNGenericImport<DNXmlSchemaIncludeClass, DNXmlSchemaInclude>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaRedefineClass = interface(DNXmlSchemaExternalClass)
  ['{B4182246-8C70-50E1-9170-3D51E38EE322}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaRedefine" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaRedefine;

  end;

  ///<summary>
  ///  表示 <see langword="redefine" />
  ///  由 World Wide Web 联合会 (W3C) 指定来自 XML 架构元素。
  ///  此类可用于允许在当前架构中重新定义来自外部架构文件中的简单和复杂类型、组和属性组。
  ///  此类还可用于为架构元素提供版本控制。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaRedefine')]
  DNXmlSchemaRedefine = interface(DNXmlSchemaExternal)
  ['{10563095-EB2F-3F5C-B4E8-12F6338EC5D5}']
  { getters & setters } 

    function get_Items: DNXmlSchemaObjectCollection;
    function get_AttributeGroups: DNXmlSchemaObjectTable;
    function get_SchemaTypes: DNXmlSchemaObjectTable;
    function get_Groups: DNXmlSchemaObjectTable;
    function get_SchemaLocation: string;
    procedure set_SchemaLocation(value: string);
    function get_Schema: DNXmlSchema;
    procedure set_Schema(value: DNXmlSchema);
    function get_Id: string;
    procedure set_Id(value: string);
    function get_UnhandledAttributes: TArray<DNXmlAttribute>;
    procedure set_UnhandledAttributes(value: TArray<DNXmlAttribute>);
    function get_LineNumber: Int32;
    procedure set_LineNumber(value: Int32);
    function get_LinePosition: Int32;
    procedure set_LinePosition(value: Int32);
    function get_SourceUri: string;
    procedure set_SourceUri(value: string);
    function get_Parent: DNXmlSchemaObject;
    procedure set_Parent(value: DNXmlSchemaObject);
    function get_Namespaces: DNXmlSerializerNamespaces;
    procedure set_Namespaces(value: DNXmlSerializerNamespaces);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取下列类的集合︰ <see cref="T:System.Xml.Schema.XmlSchemaAnnotation" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAttributeGroup" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  , ，和 <see cref="T:System.Xml.Schema.XmlSchemaGroup" />
    ///  。
    ///</summary>
    ///<returns>
    ///  重新定义的元素中包含的元素。
    ///</returns>
    property Items: DNXmlSchemaObjectCollection read get_Items;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  , ，对于架构中的所有属性，它保存编译后值的 <see langword="AttributeGroups" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有属性。
    ///  编译后值的 <see langword="AttributeGroups" />
    ///  属性。
    ///</returns>
    property AttributeGroups: DNXmlSchemaObjectTable read get_AttributeGroups;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  , ，对于架构中的所有简单和复杂类型，它保存编译后值的 <see langword="SchemaTypes" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有架构类型。
    ///  编译后值的 <see langword="SchemaTypes" />
    ///  属性。
    ///</returns>
    property SchemaTypes: DNXmlSchemaObjectTable read get_SchemaTypes;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  , ，架构中的所有组，它都保存编译后值的 <see langword="Groups" />
    ///  属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  架构中的所有组。
    ///  编译后值的 <see langword="Groups" />
    ///  属性。
    ///</returns>
    property Groups: DNXmlSchemaObjectTable read get_Groups;
    ///<summary>
    ///  获取或设置通知架构处理器架构以物理方式所在的架构的统一资源标识符 (URI) 位置。
    ///</summary>
    ///<returns>
    ///  URI 的架构位置。
    ///  对于导入的架构是可选的。
    ///</returns>
    property SchemaLocation: string read get_SchemaLocation write set_SchemaLocation;
    ///<summary>
    ///  获取或设置 <see langword="XmlSchema" />
    ///  引用架构。
    ///</summary>
    ///<returns><see langword="XmlSchema" />
    ///  引用架构。
    ///</returns>
    property Schema: DNXmlSchema read get_Schema write set_Schema;
    ///<summary>
    ///  获取或设置字符串 id。
    ///</summary>
    ///<returns>
    ///  字符串 id。
    ///  默认值为 <see langword="String.Empty" />
    ///  。
    ///  可选。
    ///</returns>
    property Id: string read get_Id write set_Id;
    ///<summary>
    ///  获取和设置不属于架构目标命名空间的限定的属性。
    ///</summary>
    ///<returns>
    ///  属于另一个目标命名空间的限定的属性。
    ///</returns>
    property UnhandledAttributes: TArray<DNXmlAttribute> read get_UnhandledAttributes write set_UnhandledAttributes;
    property LineNumber: Int32 read get_LineNumber write set_LineNumber;
    property LinePosition: Int32 read get_LinePosition write set_LinePosition;
    property SourceUri: string read get_SourceUri write set_SourceUri;
    property Parent: DNXmlSchemaObject read get_Parent write set_Parent;
    property Namespaces: DNXmlSerializerNamespaces read get_Namespaces write set_Namespaces;
  end;

  TDNXmlSchemaRedefine = class(TDNGenericImport<DNXmlSchemaRedefineClass, DNXmlSchemaRedefine>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectEnumeratorClass = interface(DNObjectClass)
  ['{4B2DAAD9-F874-58AE-B3B1-70298168859C}']
  end;

  ///<summary>
  ///  表示 <see cref="T:System.Xml.Schema.XmlSchemaObjectCollection" />
  ///  的枚举器。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaObjectEnumerator')]
  DNXmlSchemaObjectEnumerator = interface(DDN.mscorlib.DNIEnumerator)
  ['{C3B71B25-84A5-3735-A28D-8ED030EAB9B9}']
  { getters & setters } 

    function get_Current: DNXmlSchemaObject;

  { methods } 

    ///<summary>
    ///  将枚举数重置到集合的开头。
    ///</summary>
    procedure Reset;
    ///<summary>
    ///  移至集合中的下一个项。
    ///</summary>
    ///<returns><see langword="false" />
    ///  在集合的末尾。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  集合中。
    ///</summary>
    ///<returns>
    ///  当前的 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  。
    ///</returns>
    property Current: DNXmlSchemaObject read get_Current;
  end;

  TDNXmlSchemaObjectEnumerator = class(TDNGenericImport<DNXmlSchemaObjectEnumeratorClass, DNXmlSchemaObjectEnumerator>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaObjectTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{07F2185B-B6D2-58A1-B8D9-F2C0C4DF0645}']
  end;

  ///<summary>
  ///  中的包含元素的集合提供 <see cref="T:System.Xml.Schema.XmlSchema" />
  ///  类 （例如，属性、 属性组、 元素和等等）。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaObjectTable')]
  DNXmlSchemaObjectTable = interface(DDN.mscorlib.DNObject)
  ['{46B8059C-7719-33A6-AA9C-070DB3D6F7F5}']
  { getters & setters } 

    function get_Count: Int32;
    function get_Item(name: DNXmlQualifiedName): DNXmlSchemaObject;
    function get_Names: DDN.mscorlib.DNICollection;
    function get_Values: DDN.mscorlib.DNICollection;

  { methods } 

    ///<summary>
    ///  确定集合中是否存在指定的限定的名。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定的限定的名集合中的存在否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(name: DNXmlQualifiedName): Boolean;
    ///<summary>
    ///  返回可循环访问 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  的枚举器。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IDictionaryEnumerator" />
    ///  ，它可以循环访问 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIDictionaryEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  中包含的项的数量。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  中包含的项的数量。
    ///</returns>
    property Count: Int32 read get_Count;
    property Item[name: DNXmlQualifiedName]: DNXmlSchemaObject read get_Item; default;
    ///<summary>
    ///  返回一个集合中的所有命名元素 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的所有命名元素的集合 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  。
    ///</returns>
    property Names: DDN.mscorlib.DNICollection read get_Names;
    ///<summary>
    ///  返回集合中的所有元素的所有值的 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的所有元素的所有值的集合 <see cref="T:System.Xml.Schema.XmlSchemaObjectTable" />
    ///  。
    ///</returns>
    property Values: DDN.mscorlib.DNICollection read get_Values;
  end;

  TDNXmlSchemaObjectTable = class(TDNGenericImport<DNXmlSchemaObjectTableClass, DNXmlSchemaObjectTable>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaSetClass = interface(DDN.mscorlib.DNObjectClass)
  ['{80051FF8-3AEB-56C0-919B-ECBEFDC42875}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSchemaSet; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameTable">
    ///  要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlNameTable" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(nameTable: DNXmlNameTable): DNXmlSchemaSet; overload;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  包含 XML 架构定义语言 (XSD) 架构的缓存。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaSet')]
  DNXmlSchemaSet = interface(DDN.mscorlib.DNObject)
  ['{2EECF1F1-E906-338D-AA1A-21E3F90E6E8D}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_IsCompiled: Boolean;
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_CompilationSettings: DNXmlSchemaCompilationSettings;
    procedure set_CompilationSettings(value: DNXmlSchemaCompilationSettings);
    function get_Count: Int32;
    function get_GlobalElements: DNXmlSchemaObjectTable;
    function get_GlobalAttributes: DNXmlSchemaObjectTable;
    function get_GlobalTypes: DNXmlSchemaObjectTable;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  将 XML 架构定义语言 (XSD) 架构添加到指定的 URL 处 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性，或 <see langword="null" />
    ///  使用 targetNamespace 架构中指定。
    ///</param>
    ///  <param name="schemaUri">
    ///  指定要加载的架构的 URL。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象架构是否有效。
    ///  如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定了，则 <see langword="null" />
    ///  返回并引发适当的验证事件。
    ///  否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  架构是无效的。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  作为参数传递的 URL 是 <see langword="null" />
    ///  或 <see cref="F:System.String.Empty" />
    ///  。
    ///</exception>
    function Add(targetNamespace: string; schemaUri: string): DNXmlSchema; overload;
    ///<summary>
    ///  添加包含在 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.XmlReader" />
    ///  到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性，或 <see langword="null" />
    ///  使用 targetNamespace 架构中指定。
    ///</param>
    ///  <param name="schemaDocument"><see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象架构是否有效。
    ///  如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定了，则 <see langword="null" />
    ///  返回并引发适当的验证事件。
    ///  否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  架构是无效的。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    function Add(targetNamespace: string; schemaDocument: DNXmlReader): DNXmlSchema; overload;
    ///<summary>
    ///  中的所有 XML 架构定义语言 (XSD) 架构中都添加给定 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  中的架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(schemas: DNXmlSchemaSet); overload;
    ///<summary>
    ///  添加了给定 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  要添加到对象 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象架构是否有效。
    ///  如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定了，则 <see langword="null" />
    ///  返回并引发适当的验证事件。
    ///  否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  架构是无效的。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    function Add(schema: DNXmlSchema): DNXmlSchema; overload;
    ///<summary>
    ///  删除指定的 XML 架构定义语言 (XSD) 架构从 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象以去除 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  从已删除对象 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  或 <see langword="null" />
    ///  如果中找不到该架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  架构不是有效的架构。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  参数原样传递 <see langword="null" />
    ///  。
    ///</exception>
    function Remove(schema: DNXmlSchema): DNXmlSchema;
    ///<summary>
    ///  该值指示指定的目标命名空间 URI 与 XML 架构定义语言 (XSD) 架构是否处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果与指定的目标命名空间 URI 的架构是否在 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function &Contains(targetNamespace: string): Boolean; overload;
    ///<summary>
    ///  指示是否指定的 XML 架构定义语言 (XSD) <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象处于 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  参数原样传递 <see langword="null" />
    ///  。
    ///</exception>
    function &Contains(schema: DNXmlSchema): Boolean; overload;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象从 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  到给定数组，从给定索引处开始。
    ///</summary>
    ///  <param name="schemas">
    ///  要向其复制对象的数组。
    ///</param>
    ///  <param name="index">
    ///  数组中开始复制处的索引。
    ///</param>
    procedure CopyTo(schemas: TArray<DNXmlSchema>; index: Int32);
    ///<summary>
    ///  返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.ICollection" />
    ///  对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///  如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  , ，空 <see cref="T:System.Collections.ICollection" />
    ///  返回对象。
    ///</returns>
    function Schemas: DDN.mscorlib.DNICollection; overload;
    ///<summary>
    ///  返回集合的所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  属于给定命名空间。
    ///</summary>
    ///  <param name="targetNamespace">
    ///  架构 targetNamespace 属性。
    ///</param>
    ///<returns><see cref="T:System.Collections.ICollection" />
    ///  对象，其中包含已添加到的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  属于给定命名空间。
    ///  如果没有架构已添加到 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  , ，空 <see cref="T:System.Collections.ICollection" />
    ///  返回对象。
    ///</returns>
    function Schemas(targetNamespace: string): DDN.mscorlib.DNICollection; overload;
    ///<summary>
    ///  删除指定的 XML 架构定义语言 (XSD) 架构和它从中导入的所有架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schemaToRemove"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象以去除 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象以及所有导入已成功删除; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  参数原样传递 <see langword="null" />
    ///  。
    ///</exception>
    function RemoveRecursive(schemaToRemove: DNXmlSchema): Boolean;
    ///<summary>
    ///  重新处理 XML 架构定义语言 (XSD) 架构中已存在 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///  <param name="schema">
    ///  要重新处理的架构。
    ///</param>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象架构是否是有效的架构。
    ///  如果架构不是有效且 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定，则 <see langword="null" />
    ///  返回并引发适当的验证事件。
    ///  否则会引发 <see cref="T:System.Xml.Schema.XmlSchemaException" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  架构是无效的。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象传递参数中已不存在，因此 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</exception>
    function Reprocess(schema: DNXmlSchema): DNXmlSchema;
    ///<summary>
    ///  将添加到 XML 架构定义语言 (XSD) 架构编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  成一个逻辑架构。
    ///</summary>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  验证和编译中的架构时出错 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</exception>
    procedure Compile;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取默认 <see cref="T:System.Xml.XmlNameTable" />
    ///  使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  加载新的 XML 架构定义语言 (XSD) 架构时。
    ///</summary>
    ///<returns>
    ///  原子化字符串对象表。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示是否在 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  已编译。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果在架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  自上次架构已添加或删除从已编译 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsCompiled: Boolean read get_IsCompiled;
    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析包含和导入的架构元素的命名空间或中引用的位置。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />
    ///  的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />
    ///  的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///  默认值是 <see cref="T:System.Xml.Schema.XmlSchemaCompilationSettings" />
    ///  实例与 <see cref="P:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</returns>
    property CompilationSettings: DNXmlSchemaCompilationSettings read get_CompilationSettings write set_CompilationSettings;
    ///<summary>
    ///  获取数逻辑 XML 架构定义语言 (XSD) 架构中 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的逻辑架构数 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取所有全局元素中所有 XML 架构定义语言 (XSD) 架构中 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  全局元素的集合。
    ///</returns>
    property GlobalElements: DNXmlSchemaObjectTable read get_GlobalElements;
    ///<summary>
    ///  获取所有全局属性中所有 XML 架构定义语言 (XSD) 架构 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  属性特性的集合。
    ///</returns>
    property GlobalAttributes: DNXmlSchemaObjectTable read get_GlobalAttributes;
    ///<summary>
    ///  获取所有全局简单和复杂类型中所有 XML 架构定义语言 (XSD) 架构中的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  。
    ///</summary>
    ///<returns>
    ///  全局简单和复杂类型的集合。
    ///</returns>
    property GlobalTypes: DNXmlSchemaObjectTable read get_GlobalTypes;
  end;

  TDNXmlSchemaSet = class(TDNGenericImport<DNXmlSchemaSetClass, DNXmlSchemaSet>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlSchemaValidatorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D720AA83-BC50-5E48-B2C0-5C56EB18CB1B}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameTable"><see cref="T:System.Xml.XmlNameTable" />
    ///  对象，它包含作为原子化字符串的元素和属性名称。
    ///</param>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象，其中包含用于验证的 XML 架构定义语言 (XSD) 架构。
    ///</param>
    ///  <param name="namespaceResolver"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象用于解析在验证过程中遇到的命名空间。
    ///</param>
    ///  <param name="validationFlags"><see cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
    ///  值，该值指定架构验证选项。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  一个或多个指定的参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaException">
    ///  编译中的架构时出错 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  参数。
    ///</exception>
    {class} function init(nameTable: DNXmlNameTable; schemas: DNXmlSchemaSet; namespaceResolver: DNIXmlNamespaceResolver; validationFlags: DNXmlSchemaValidationFlags): DNXmlSchemaValidator;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  对象用于解析 xs:import 和 xs:include 元素，以及 xsi:schemaLocation 和 xsi:noNamespaceSchemaLocation 属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  对象; 默认值是 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  对象。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  表示一个 XML 架构定义语言 (XSD) 架构验证引擎。
  ///<see cref="T:System.Xml.Schema.XmlSchemaValidator" />
  ///  类不能被继承。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlSchemaValidator')]
  DNXmlSchemaValidator = interface(DDN.mscorlib.DNObject)
  ['{43A9070E-DD35-317A-914B-8055C37FA049}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineInfoProvider: DNIXmlLineInfo;
    procedure set_LineInfoProvider(value: DNIXmlLineInfo);
    function get_SourceUri: DDN.System.DNUri;
    procedure set_SourceUri(value: DDN.System.DNUri);
    function get_ValidationEventSender: DDN.mscorlib.DNObject;
    procedure set_ValidationEventSender(value: DDN.mscorlib.DNObject);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  初始化的状态 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" />
    ///  方法均有效的构造后立即 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象或调用了 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
    ///  仅。
    ///</exception>
    procedure Initialize; overload;
    ///<summary>
    ///  验证当前上下文中的元素。
    ///</summary>
    ///  <param name="localName">
    ///  要验证的元素的本地名称。
    ///</param>
    ///  <param name="namespaceUri">
    ///  要验证的元素的命名空间 URI。
    ///</param>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象，其属性设置在成功验证元素的名称。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  此元素的名称在当前上下文中无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />
    ///  按照正确的顺序不调用方法。
    ///  例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception>
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo); overload;
    ///<summary>
    ///  验证与当前上下文中的元素 xsi:Type, ，xsi:Nil, ，xsi:SchemaLocation, ，和 xsi:NoNamespaceSchemaLocation 属性指定的值。
    ///</summary>
    ///  <param name="localName">
    ///  要验证的元素的本地名称。
    ///</param>
    ///  <param name="namespaceUri">
    ///  要验证的元素的命名空间 URI。
    ///</param>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象，其属性设置在成功验证元素的名称。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xsiType">
    ///  xsi:Type 属性的元素的值。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xsiNil">
    ///  xsi:Nil 属性的元素的值。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xsiSchemaLocation">
    ///  xsi:SchemaLocation 属性的元素的值。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xsiNoNamespaceSchemaLocation">
    ///  xsi:NoNamespaceSchemaLocation 属性的元素的值。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  此元素的名称在当前上下文中无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />
    ///  按照正确的顺序不调用方法。
    ///  例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateElement" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception>
    procedure ValidateElement(localName: string; namespaceUri: string; schemaInfo: DNXmlSchemaInfo; xsiType: string; xsiNil: string; xsiSchemaLocation: string; xsiNoNamespaceSchemaLocation: string); overload;
    ///<summary>
    ///  验证当前元素上下文中的属性名称、命名空间 URI 和值。
    ///</summary>
    ///  <param name="localName">
    ///  要验证的属性的本地名称。
    ///</param>
    ///  <param name="namespaceUri">
    ///  要验证的属性的命名空间 URI。
    ///</param>
    ///  <param name="attributeValue">
    ///  要验证的属性的值。
    ///</param>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象在成功验证特性后设置其属性。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  验证的属性的值。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  该属性无效，不能在当前元素上下文中。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  按照正确的顺序不调用方法。
    ///  例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  一个或多个指定的参数是 <see langword="null" />
    ///  。
    ///</exception>
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: string; schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  验证当前元素上下文中的属性名称、命名空间 URI 和值。
    ///</summary>
    ///  <param name="localName">
    ///  要验证的属性的本地名称。
    ///</param>
    ///  <param name="namespaceUri">
    ///  要验证的属性的命名空间 URI。
    ///</param>
    ///  <param name="attributeValue"><see cref="T:System.Xml.Schema.XmlValueGetter" />
    ///<see langword="delegate" />
    ///  用于将作为公共语言运行时 (CLR) 类型的属性的值传递与该属性的 XML 架构定义语言 (XSD) 类型兼容。
    ///</param>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象在成功验证特性后设置其属性。
    ///  此参数可以是 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  验证的属性的值。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  该属性无效，不能在当前元素上下文中。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  按照正确的顺序不调用方法。
    ///  例如，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  一个或多个指定的参数是 <see langword="null" />
    ///  。
    ///</exception>
    function ValidateAttribute(localName: string; namespaceUri: string; attributeValue: DNXmlValueGetter; schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  验证元素上下文中所有必需的属性是否已存在，并且 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象是否已准备好验证元素的子内容。
    ///</summary>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象在成功验证元素上下文中需要的所有属性都是否存在设置其属性。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  找不到一个或多个当前元素上下文中所需的属性。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
    ///  按照正确的顺序不调用方法。
    ///  例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.ValidateEndOfAttributes(System.Xml.Schema.XmlSchemaInfo)" />
    ///  之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  一个或多个指定的参数是 <see langword="null" />
    ///  。
    ///</exception>
    procedure ValidateEndOfAttributes(schemaInfo: DNXmlSchemaInfo);
    ///<summary>
    ///  验证是否文本 <see langword="string" />
    ///  是否允许在当前元素上下文中，指定并累积文本以进行验证，如果当前元素具有简单内容。
    ///</summary>
    ///  <param name="elementValue">
    ///  文本 <see langword="string" />
    ///  在当前元素上下文中进行验证。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  文本 <see langword="string" />
    ///  指定不允许在当前元素上下文中。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />
    ///  按照正确的顺序不调用方法。
    ///  例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  文本 <see langword="string" />
    ///  参数不能为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ValidateText(elementValue: string); overload;
    ///<summary>
    ///  验证是否返回的文本 <see cref="T:System.Xml.Schema.XmlValueGetter" />
    ///  指定对象允许在当前元素上下文中，并累积文本以进行验证，如果当前元素具有简单内容。
    ///</summary>
    ///  <param name="elementValue"><see cref="T:System.Xml.Schema.XmlValueGetter" />
    ///<see langword="delegate" />
    ///  用来传递作为公共语言运行时 (CLR) 类型的文本值与该属性的 XML 架构定义语言 (XSD) 类型兼容。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  文本 <see langword="string" />
    ///  指定不允许在当前元素上下文中。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />
    ///  按照正确的顺序不调用方法。
    ///  例如， <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  文本 <see langword="string" />
    ///  参数不能为 <see langword="null" />
    ///  。
    ///</exception>
    procedure ValidateText(elementValue: DNXmlValueGetter); overload;
    ///<summary>
    ///  验证是否中的空白 <see langword="string" />
    ///  是否允许在当前元素上下文中，指定并累积空白以进行验证，如果当前元素具有简单内容。
    ///</summary>
    ///  <param name="elementValue">
    ///  空白 <see langword="string" />
    ///  在当前元素上下文中进行验证。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  当前元素上下文中不允许有空格。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />
    ///  按照正确的顺序不调用方法。
    ///  例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception>
    procedure ValidateWhitespace(elementValue: string); overload;
    ///<summary>
    ///  验证是否返回空白 <see cref="T:System.Xml.Schema.XmlValueGetter" />
    ///  对象指定允许在当前元素上下文中，并累积空白以进行验证，如果当前元素具有简单内容。
    ///</summary>
    ///  <param name="elementValue"><see cref="T:System.Xml.Schema.XmlValueGetter" />
    ///<see langword="delegate" />
    ///  用来传递作为公共语言运行时 (CLR) 类型的空白值与该属性的 XML 架构定义语言 (XSD) 类型兼容。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  当前元素上下文中不允许有空格。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />
    ///  按照正确的顺序不调用方法。
    ///  例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateWhitespace" />
    ///  方法在调用之后调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  。
    ///</exception>
    procedure ValidateWhitespace(elementValue: DNXmlValueGetter); overload;
    ///<summary>
    ///  对于具有简单内容的元素，根据其数据类型验证元素的文本内容是否有效；对于具有复杂内容的元素，验证当前元素的内容是否完整。
    ///</summary>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  对象在成功验证元素设置其属性。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果元素具有简单内容，则为该元素已分析的类型化文本值。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  元素的内容不是有效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />
    ///  按照正确的顺序不调用方法。
    ///  例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />
    ///  方法在调用之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  。
    ///</exception>
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  根据指定元素的数据类型验证该元素的文本内容是否有效。
    ///</summary>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  在成功验证元素的文本内容设置其属性的对象。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="typedValue">
    ///  元素中的类型化文本内容。
    ///</param>
    ///<returns>
    ///  元素的已分析的类型化简单内容。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  元素的文本内容不是有效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />
    ///  按照正确的顺序不调用方法 (例如，如果 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateEndElement" />
    ///  方法在调用之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  )，调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateText" />
    ///  已以前所做的方法，或者该元素具有复杂内容。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  键入的文本内容参数不能为 <see langword="null" />
    ///  。
    ///</exception>
    function ValidateEndElement(schemaInfo: DNXmlSchemaInfo; typedValue: DDN.mscorlib.DNObject): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  结束验证，并检查整个 XML 文档的标识约束。
    ///</summary>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  XML 文档中找到一个标识约束错误。
    ///</exception>
    procedure EndValidation;
    ///<summary>
    ///  将一个 XML 架构定义语言 (XSD) 架构添加到用于验证的架构集。
    ///</summary>
    ///  <param name="schema"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  要添加到的一组用于验证的架构对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  参数指定是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  目标命名空间 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  参数与匹配的任何元素或属性已经遇到 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaException"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  是无效的参数。
    ///</exception>
    procedure AddSchema(schema: DNXmlSchema);
    ///<summary>
    ///  初始化的状态 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象使用 <see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  指定以进行部分验证。
    ///</summary>
    ///  <param name="partialValidationType"><see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  用于初始化的验证上下文对象 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象以进行部分验证。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.Initialize" />
    ///  方法均有效的构造后立即 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象或调用了 <see cref="M:System.Xml.Schema.XmlSchemaValidator.EndValidation" />
    ///  仅。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  参数不是 <see cref="T:System.Xml.Schema.XmlSchemaElement" />
    ///  , ，<see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  , ，或 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  参数不能为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Initialize(partialValidationType: DNXmlSchemaObject); overload;
    ///<summary>
    ///  验证默认属性的标识约束，并填充 <see cref="T:System.Collections.ArrayList" />
    ///  指定 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  具有未经过以前验证使用的默认值的任何属性的对象 <see cref="Overload:System.Xml.Schema.XmlSchemaValidator.ValidateAttribute" />
    ///  元素上下文中的方法。
    ///</summary>
    ///  <param name="defaultAttributes"><see cref="T:System.Collections.ArrayList" />
    ///  要填充 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  尚未在元素上下文中的验证过程中遇到的任何属性的对象。
    ///</param>
    procedure GetUnspecifiedDefaultAttributes(defaultAttributes: DDN.mscorlib.DNArrayList);
    ///<summary>
    ///  跳过当前元素内容的验证并准备 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象以验证父元素的上下文中的内容。
    ///</summary>
    ///  <param name="schemaInfo"><see cref="T:System.Xml.Schema.XmlSchemaInfo" />
    ///  如果成功跳过当前元素内容都将设置其属性的对象。
    ///  此参数可以为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  按照正确的顺序不调用方法。
    ///  例如，调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  之后调用 <see cref="M:System.Xml.Schema.XmlSchemaValidator.SkipToEndElement(System.Xml.Schema.XmlSchemaInfo)" />
    ///  。
    ///</exception>
    procedure SkipToEndElement(schemaInfo: DNXmlSchemaInfo);
    ///<summary>
    ///  返回当前元素上下文中的期望微粒。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.Schema.XmlSchemaParticle" />
    ///  对象或如果没有期望的粒子的空数组。
    ///</returns>
    function GetExpectedParticles: TArray<DNXmlSchemaParticle>;
    ///<summary>
    ///  返回当前元素上下文的期望属性。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.Schema.XmlSchemaAttribute" />
    ///  对象或如果没有期望的属性的空数组。
    ///</returns>
    function GetExpectedAttributes: TArray<DNXmlSchemaAttribute>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  对象用于解析 xs:import 和 xs:include 元素，以及 xsi:schemaLocation 和 xsi:noNamespaceSchemaLocation 属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  对象; 默认值是 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  对象。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取或设置所验证的 XML 节点的行号信息。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.IXmlLineInfo" />
    ///  对象。
    ///</returns>
    property LineInfoProvider: DNIXmlLineInfo read get_LineInfoProvider write set_LineInfoProvider;
    ///<summary>
    ///  获取或设置所验证 XML 节点的源 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Uri" />
    ///  对象表示所验证的 XML 节点的源 URI; 默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property SourceUri: DDN.System.DNUri read get_SourceUri write set_SourceUri;
    ///<summary>
    ///  获取或设置作为验证事件的发件人对象所发送的对象。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  ; 这是默认值 <see cref="T:System.Xml.Schema.XmlSchemaValidator" />
    ///  对象。
    ///</returns>
    property ValidationEventSender: DDN.mscorlib.DNObject read get_ValidationEventSender write set_ValidationEventSender;
  end;

  TDNXmlSchemaValidator = class(TDNGenericImport<DNXmlSchemaValidatorClass, DNXmlSchemaValidator>) end;

  //-------------namespace: System.Xml.Serialization.Advanced----------------
  DNSchemaImporterExtensionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{84B1B8C7-363E-519C-81DA-A2D00C6A6D87}']
  end;

  ///<summary>
  ///  允许您自定义时使用自动的查询工具生成 Web 服务描述语言 (WSDL) 文档中的代码。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.Advanced.SchemaImporterExtension')]
  DNSchemaImporterExtension = interface(DDN.mscorlib.DNObject)
  ['{39527C14-C3E3-31E1-AE79-C8C7E4093F42}']
  { methods } 

    ///<summary>
    ///  使您可以操作︰ 检查导入的架构，并指定 CLR 类型映射到生成的代码。
    ///</summary>
    ///  <param name="name">
    ///  元素的名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  表示架构信息，如 XML 元素的行号。
    ///</param>
    ///  <param name="schemas"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  ，其中包含的架构文档中的集合。
    ///</param>
    ///  <param name="importer"><see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  ，它是正在使用的导入程序。
    ///</param>
    ///  <param name="compileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  可向其中添加 CodeDOM 结构为 XSD 生成可选的代码。
    ///</param>
    ///  <param name="mainNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  表示元素的当前命名空间。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  代码编译器的设置选项。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  用于生成新代码。
    ///</param>
    ///<returns>
    ///  此方法映射到 CLR 类型的名称。
    ///</returns>
    function ImportSchemaType(name: string; ns: string; context: DNXmlSchemaObject; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary>
    ///  使您可以操作︰ 检查导入的架构，并指定 CLR 类型映射到生成的代码。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  表示 XSD 类型。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.Schema.XmlSchemaObject" />
    ///  表示架构信息，如 XML 元素的行号。
    ///</param>
    ///  <param name="schemas"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  ，其中包含的架构文档中的集合。
    ///</param>
    ///  <param name="importer"><see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  ，它是正在使用的导入程序。
    ///</param>
    ///  <param name="compileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  可向其中添加 CodeDOM 结构为 XSD 生成可选的代码。
    ///</param>
    ///  <param name="mainNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  表示元素的当前命名空间。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  代码编译器的设置选项。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  用于生成新代码。
    ///</param>
    ///<returns>
    ///  此方法映射到 CLR 类型的名称。
    ///</returns>
    function ImportSchemaType(&type: DNXmlSchemaType; context: DNXmlSchemaObject; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string; overload;
    ///<summary>
    ///  处理的导入 &lt; xsd︰ 任何 &gt; 架构中的元素。
    ///</summary>
    ///  <param name="any"><see cref="T:System.Xml.Schema.XmlSchemaAny" />
    ///  表示 <see langword="xsd:any" />
    ///  XML 架构文档 (XSD) 中找到的元素。
    ///</param>
    ///  <param name="mixed">
    ///  一个 <see cref="T:System.Boolean" />
    ///  ，该值指示是否 XSD <see langword="complex" />
    ///  特性已设置为"混合"。
    ///<see langword="true" />
    ///  , 如果该属性已设置为混合，否则 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="schemas"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  ，其中包含的架构 XSD 中的集合。
    ///</param>
    ///  <param name="importer"><see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  ，它是正在使用的导入程序。
    ///</param>
    ///  <param name="compileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  可向其中添加 CodeDOM 结构为 XSD 生成可选的代码。
    ///</param>
    ///  <param name="mainNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  表示元素的当前命名空间。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  代码编译器的设置选项。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  ，它是用于生成新代码的 CodeDOM 提供程序。
    ///</param>
    ///<returns>
    ///  该元素映射到 CLR 类型的名称。
    ///</returns>
    function ImportAnyElement(any: DNXmlSchemaAny; mixed: Boolean; schemas: DNXmlSchemas; importer: DNXmlSchemaImporter; compileUnit: DDN.System.DNCodeCompileUnit; mainNamespace: DDN.System.DNCodeNamespace; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider): string;
    ///<summary>
    ///  可以指定要导入的 XSD 类型的默认值。
    ///</summary>
    ///  <param name="value">
    ///  在原始 XSD 中找到的值。
    ///</param>
    ///  <param name="type">
    ///  XSD 类型名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.CodeDom.CodeExpression" />
    ///  设置新的默认值。
    ///</returns>
    function ImportDefaultValue(value: string; &type: string): DDN.System.DNCodeExpression;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSchemaImporterExtension = class(TDNGenericImport<DNSchemaImporterExtensionClass, DNSchemaImporterExtension>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0335C91D-2A31-522C-8305-7A3FF61597AB}']
  end;

  ///<summary>
  ///  表示一个类，可以从一种数据结构的 XML 表示生成代理代码。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.CodeExporter')]
  DNCodeExporter = interface(DDN.mscorlib.DNObject)
  ['{58980885-AB07-3408-B0DA-A1F804A75F85}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取代码特性元数据导出该代码时所包含的集合。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  表示导出代码时，将包含的元数据的对象。
    ///</returns>
    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNCodeExporter = class(TDNGenericImport<DNCodeExporterClass, DNCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapCodeExporterClass = interface(DNCodeExporterClass)
  ['{C399D90E-DA52-5466-A82B-CFB56D8D7BE0}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  类中，假定没有代码编译单元。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定要生成的类型的命名空间。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace): DNSoapCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  类，同时指定命名空间参数，还代码编译单元参数。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  ，它标识用的程序集引用自动添加到其中的程序图容器。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNSoapCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  类，同时指定代码命名空间、 代码编译单元中和代码生成选项。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  ，它标识用的程序集引用自动添加到其中的程序图容器。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举，用于指定生成导出的代码时的选项。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions): DNSoapCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  类，同时指定代码命名空间、 代码编译单元、 代码生成选项和映射。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  ，它标识用的程序集引用自动添加到其中的程序图容器。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举，用于指定生成导出的代码时的选项。
    ///</param>
    ///  <param name="mappings">
    ///  一个包含 <see cref="T:System.Collections.Hashtable" />
    ///  对象的 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNSoapCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapCodeExporter" />
    ///  类，同时指定代码命名空间、 代码编译单元、 代码生成器、 代码生成选项和映射。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  一个 <see cref="T:System.CodeDom.CodeNamespace" />
    ///  ，它指定要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  ，它标识用的程序集引用自动添加到其中的程序图容器。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  用来创建的代码。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举，用于指定生成导出的代码时的选项。
    ///</param>
    ///  <param name="mappings">
    ///  一个包含 <see cref="T:System.Collections.Hashtable" />
    ///  对象的 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; codeProvider: DDN.System.DNCodeDomProvider; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNSoapCodeExporter; overload;

  end;

  ///<summary>
  ///  从 WSDL 文档中定义的 SOAP 编码的消息部分的内部类型映射信息生成类型和属性声明。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapCodeExporter')]
  DNSoapCodeExporter = interface(DNCodeExporter)
  ['{8ED80F9A-1628-3366-8861-5316E25A64F8}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    ///<summary>
    ///  生成.NET Framework 类型时，以及属性声明，SOAP 标头。
    ///</summary>
    ///  <param name="xmlTypeMapping">
    ///  内部.NET Framework 类型映射信息的 SOAP 标头元素。
    ///</param>
    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    ///<summary>
    ///  生成.NET Framework 类型时，以及属性声明，为每个属于 WSDL 文档中的 SOAP 消息定义的部分。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  WSDL 消息定义的元素部分的内部.NET Framework 类型映射。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping);
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  为方法参数或返回值对应于 SOAP 消息定义 WSDL 文档中的部分元素的声明。
    ///</summary>
    ///  <param name="metadata">
    ///  集合 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  生成到该方法将添加到属性声明的类型的对象。
    ///</param>
    ///  <param name="member">
    ///  WSDL 消息定义单个部件内部.NET Framework 类型映射。
    ///</param>
    ///  <param name="forceUseMemberName"><see langword="true" />
    ///  若要添加包含正在生成; 的特性声明的 XML 元素名称的初始参数否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; forceUseMemberName: Boolean); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  声明移到 WSDL 文档中的 SOAP 消息定义的一部分元素相对应的方法参数或返回值。
    ///</summary>
    ///  <param name="metadata">
    ///  集合 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  生成的类型，该方法将向其添加到属性声明的对象。
    ///</param>
    ///  <param name="member">
    ///  WSDL 消息定义单个部件内部.NET Framework 类型映射。
    ///</param>
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取代码特性元数据导出该代码时所包含的集合。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  表示导出代码时，将包含的元数据的对象。
    ///</returns>
    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNSoapCodeExporter = class(TDNGenericImport<DNSoapCodeExporterClass, DNSoapCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlCodeExporterClass = interface(DNCodeExporterClass)
  ['{373D545C-1597-5E22-8691-E47BBFC8768C}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  类使用指定的命名空间。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  要生成的类型的命名空间。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace): DNXmlCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  类使用指定的命名空间和代码编译单元。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  其中的 CodeDOM 图形容器使用程序集引用会自动添加。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit): DNXmlCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  类使用指定的命名空间、 代码编译单元和代码生成选项。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  程序图容器使用的程序集引用自动添加到其中。
    ///</param>
    ///  <param name="options">
    ///  一个枚举值，提供了用于从 XML 架构的自定义数据类型生成.NET Framework 类型的选项。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions): DNXmlCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  类使用指定的.NET Framework 命名空间、 代码编译单元包含图的对象，表示代码生成选项和映射对象的集合的对象。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  程序图容器使用的程序集引用自动添加到其中。
    ///</param>
    ///  <param name="options">
    ///  一个枚举值，提供了用于从 XML 架构的自定义数据类型生成.NET Framework 类型的选项。
    ///</param>
    ///  <param name="mappings">
    ///  一个包含 <see cref="T:System.Collections.Hashtable" />
    ///  对象的 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNXmlCodeExporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlCodeExporter" />
    ///  类使用指定的.NET Framework 命名空间、 代码编译单元包含图的对象，指定代码选项和映射对象的集合的枚举。
    ///</summary>
    ///  <param name="codeNamespace">
    ///  要生成的类型的命名空间。
    ///</param>
    ///  <param name="codeCompileUnit">
    ///  一个 <see cref="T:System.CodeDom.CodeCompileUnit" />
    ///  程序图容器使用的程序集引用自动添加到其中。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个枚举值，提供了用于从 XML 架构的自定义数据类型生成.NET Framework 类型的选项。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  包含代码创建的特殊说明。
    ///</param>
    ///  <param name="mappings">
    ///  一个包含 <see cref="T:System.Collections.Hashtable" />
    ///  对象的 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  。
    ///</param>
    {class} function init(codeNamespace: DDN.System.DNCodeNamespace; codeCompileUnit: DDN.System.DNCodeCompileUnit; codeProvider: DDN.System.DNCodeDomProvider; options: DNCodeGenerationOptions; mappings: DDN.mscorlib.DNHashtable): DNXmlCodeExporter; overload;

  end;

  ///<summary>
  ///  从 XML 架构元素声明的内部类型映射信息生成类型和属性声明。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlCodeExporter')]
  DNXmlCodeExporter = interface(DNCodeExporter)
  ['{9AF1261D-D0F6-3C58-A06A-2957418A2C43}']
  { getters & setters } 

    function get_IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection;

  { methods } 

    ///<summary>
    ///  生成.NET Framework 类型时，以及属性声明，XML 架构元素。
    ///</summary>
    ///  <param name="xmlTypeMapping">
    ///  内部.NET Framework 类型映射信息的 XML 架构元素。
    ///</param>
    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    ///<summary>
    ///  生成.NET Framework 类型时，以及属性声明，为每个属于 Web 服务描述语言 (WSDL) 文档中的 SOAP 消息定义的部分。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  WSDL 消息定义的元素部分内部.NET Framework 类型映射。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping);
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  到方法声明返回对应于值 <see langword="&lt;part&gt;" />
    ///  非 SOAP 消息定义 Web 服务描述语言 (WSDL) 文档中的元素。
    ///</summary>
    ///  <param name="metadata">
    ///  集合 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  生成到该方法将添加到属性声明的类型的对象。
    ///</param>
    ///  <param name="mapping">
    ///  内部.NET Framework 类型映射信息的 XML 架构元素。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间的 soap 消息的部分为其生成成员参数中的类型映射信息。
    ///</param>
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; mapping: DNXmlTypeMapping; ns: string); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  声明移到对应于方法参数或返回值 <see langword="&lt;part&gt;" />
    ///  Web 服务描述语言 (WSDL) 文档中 SOAP 消息定义的元素。
    ///</summary>
    ///  <param name="metadata">
    ///  集合 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  生成到该方法将添加到属性声明的类型的对象。
    ///</param>
    ///  <param name="member">
    ///  WSDL 消息定义的单个元素一部分内部.NET Framework 类型映射。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间的 soap 消息的部分为其生成成员参数中的类型映射信息。
    ///</param>
    ///  <param name="forceUseMemberName">
    ///  该标志可帮助确定是否添加初始参数，其中包含要生成的属性声明的 XML 元素名称。
    ///</param>
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; ns: string; forceUseMemberName: Boolean); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  声明移到对应于方法参数或返回值 <see langword="&lt;part&gt;" />
    ///  Web 服务描述语言 (WSDL) 文档中 SOAP 消息定义的元素。
    ///</summary>
    ///  <param name="metadata">
    ///  集合 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  生成到该方法将添加到属性声明的类型的对象。
    ///</param>
    ///  <param name="member">
    ///  WSDL 消息定义的单个元素一部分内部.NET Framework 类型映射。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间的 soap 消息的部分为其生成成员参数中的类型映射信息。
    ///</param>
    procedure AddMappingMetadata(metadata: DDN.System.DNCodeAttributeDeclarationCollection; member: DNXmlMemberMapping; ns: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取代码特性元数据导出该代码时所包含的集合。
    ///</summary>
    ///<returns>
    ///  一套 <see cref="T:System.CodeDom.CodeAttributeDeclaration" />
    ///  表示导出代码时，将包含的元数据的对象。
    ///</returns>
    property IncludeMetadata: DDN.System.DNCodeAttributeDeclarationCollection read get_IncludeMetadata;
  end;

  TDNXmlCodeExporter = class(TDNGenericImport<DNXmlCodeExporterClass, DNXmlCodeExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifierClass = interface(DDN.mscorlib.DNObjectClass)
  ['{16C095AA-4C2C-5EAA-88E4-F5A7BBA06269}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.CodeIdentifier" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCodeIdentifier;

  { static methods } 

    ///<summary>
    ///  生成有效的代码实体名称从输入字符串。
    ///</summary>
    ///  <param name="identifier">
    ///  代码实体，例如，通常取自 XML 元素或属性名称的方法参数的名称。
    ///</param>
    ///<returns>
    ///  一个字符串，可作为代码的标识符，如方法参数的名称。
    ///</returns>
    {class} function MakeValid(identifier: string): string;
    ///<summary>
    ///  Pascal 大小写字符串从输入字符串生成。
    ///</summary>
    ///  <param name="identifier">
    ///  代码实体，例如，通常取自 XML 元素或属性名称的方法参数的名称。
    ///</param>
    ///<returns>
    ///  参数字符串 Pascal 大小写版本。
    ///</returns>
    {class} function MakePascal(identifier: string): string;
    ///<summary>
    ///  Camel 大小写格式字符串从输入字符串生成。
    ///</summary>
    ///  <param name="identifier">
    ///  代码实体，例如，通常取自 XML 元素或属性名称的方法参数的名称。
    ///</param>
    ///<returns>
    ///  参数字符串驼峰式大小写版本。
    ///</returns>
    {class} function MakeCamel(identifier: string): string;

  end;

  ///<summary>
  ///  提供了静态方法，以将输入的文本转换为代码实体的名称。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.CodeIdentifier')]
  DNCodeIdentifier = interface(DDN.mscorlib.DNObject)
  ['{BA6E74E4-6403-3B14-BE73-3C2B1A094495}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNCodeIdentifier = class(TDNGenericImport<DNCodeIdentifierClass, DNCodeIdentifier>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNCodeIdentifiersClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7469FE37-04CC-5E5F-876A-03DAE7F55B9F}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNCodeIdentifiers; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  类，并确定代码标识符是否区分大小写。
    ///</summary>
    ///  <param name="caseSensitive"><see langword="true" />
    ///  标识符是否区分大小写;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(caseSensitive: Boolean): DNCodeIdentifiers; overload;

  end;

  ///<summary>
  ///  维护一组相关的代码实体或由.NET Framework 的 XML 序列化基础结构生成的类型映射的名称。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.CodeIdentifiers')]
  DNCodeIdentifiers = interface(DDN.mscorlib.DNObject)
  ['{664CA9B6-046C-3A37-BA89-44B11A5F015A}']
  { getters & setters } 

    function get_UseCamelCasing: Boolean;
    procedure set_UseCamelCasing(value: Boolean);

  { methods } 

    ///<summary>
    ///  确定字符串是否与另一个中输入的名称冲突 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的作用域，并且，如果已存在，都会生成一个修改后的字符串。
    ///</summary>
    ///  <param name="identifier">
    ///  要修改如果它尚不唯一的名称。
    ///</param>
    ///<returns>
    ///  标识符参数值或修改后的字符串是否存在名称冲突。
    ///</returns>
    function MakeUnique(identifier: string): string;
    ///<summary>
    ///  删除所有代码实体或类型映射，包括其名称从 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</summary>
    procedure Clear;
    ///<summary>
    ///  确保输入通过修改的值根据名称是正确的大小写的 <see cref="P:System.Xml.Serialization.CodeIdentifiers.UseCamelCasing" />
    ///  属性。
    ///</summary>
    ///  <param name="identifier">
    ///  要修改的名称。
    ///</param>
    ///<returns>
    ///  等同于输入的标识符或具有第一个字母的大小写的字符串的修改。
    ///</returns>
    function MakeRightCase(identifier: string): string;
    ///<summary>
    ///  阻止指定的名称中使用 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</summary>
    ///  <param name="identifier">
    ///  将不能在一个名称 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</param>
    procedure AddReserved(identifier: string);
    ///<summary>
    ///  删除从输入的名称 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的保留名称。
    ///</summary>
    ///  <param name="identifier">
    ///  将可在一个名称 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</param>
    procedure RemoveReserved(identifier: string);
    ///<summary>
    ///  命名的代码实体或类型将映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围中，确保名称唯一的作用域内。
    ///</summary>
    ///  <param name="identifier">
    ///  使用代码实体进行索引的候选项名称。
    ///</param>
    ///  <param name="value">
    ///  代码实体或类型映射信息。
    ///</param>
    ///<returns>
    ///  标识符参数值或修改后的字符串是否存在名称冲突。
    ///</returns>
    function AddUnique(identifier: string; value: DDN.mscorlib.DNObject): string;
    ///<summary>
    ///  确定是否具有指定的名称已被使用内 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</summary>
    ///  <param name="identifier">
    ///  要检查中使用的名称 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该名称已在使用;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsInUse(identifier: string): Boolean;
    ///<summary>
    ///  命名的代码实体或类型将映射添加到 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</summary>
    ///  <param name="identifier">
    ///  使用代码实体进行索引的名称。
    ///</param>
    ///  <param name="value">
    ///  代码实体或类型映射信息。
    ///</param>
    procedure Add(identifier: string; value: DDN.mscorlib.DNObject);
    ///<summary>
    ///  从中移除 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围由输入名称标识的代码实体或类型映射。
    ///</summary>
    ///  <param name="identifier">
    ///  若要删除的代码实体或类型映射信息的名称。
    ///</param>
    procedure Remove(identifier: string);
    ///<summary>
    ///  返回一个数组中的类型映射的代码实体的 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  实例的范围。
    ///</summary>
    ///  <param name="type">
    ///  所有代码实体或该实例的类型映射的类型。
    ///</param>
    ///<returns>
    ///  代码实体或由存储的类型映射的数组 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象。
    ///</returns>
    function ToArray(&type: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示实例是否使用 camel 大小写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要指示该实例使用 camel 大小写; <see langword="false" />
    ///  以指示该实例使用 Pascal 大小写。
    ///</returns>
    property UseCamelCasing: Boolean read get_UseCamelCasing write set_UseCamelCasing;
  end;

  TDNCodeIdentifiers = class(TDNGenericImport<DNCodeIdentifiersClass, DNCodeIdentifiers>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNImportContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{425D69F8-37B6-59DC-8C75-22F4DC87AAA4}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.ImportContext" />
    ///  类对于给定的代码标识符，与给定类型共享选项。
    ///</summary>
    ///  <param name="identifiers">
    ///  应用上下文代码实体。
    ///</param>
    ///  <param name="shareTypes">
    ///  一个 <see cref="T:System.Boolean" />
    ///  值，该值确定是否在架构之间共享自定义类型。
    ///</param>
    {class} function init(identifiers: DNCodeIdentifiers; shareTypes: Boolean): DNImportContext;

  end;

  ///<summary>
  ///  描述在该架构的一组绑定到.NET Framework 代码实体的上下文。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.ImportContext')]
  DNImportContext = interface(DDN.mscorlib.DNObject)
  ['{95274F7A-0A71-3D35-AF1F-E44F3A3686F6}']
  { getters & setters } 

    function get_TypeIdentifiers: DNCodeIdentifiers;
    function get_ShareTypes: Boolean;
    function get_Warnings: DDN.System.DNStringCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取一组代码实体应用上下文。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  ，它指定应用上下文的代码实体。
    ///</returns>
    property TypeIdentifiers: DNCodeIdentifiers read get_TypeIdentifiers;
    ///<summary>
    ///  获取一个值，确定是否共享自定义类型。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果在架构中; 间共享的自定义类型否则为 <see langword="false" />
    ///  。
    ///</returns>
    property ShareTypes: Boolean read get_ShareTypes;
    ///<summary>
    ///  获取导入代码实体说明时，将生成的警告的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Specialized.StringCollection" />
    ///  ，其中包含在导入代码实体说明时生成的警告。
    ///</returns>
    property Warnings: DDN.System.DNStringCollection read get_Warnings;
  end;

  TDNImportContext = class(TDNGenericImport<DNImportContextClass, DNImportContext>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSchemaImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1C35753F-FEAE-5CD2-997F-017AEEED8B11}']
  end;

  ///<summary>
  ///  描述架构导入程序。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SchemaImporter')]
  DNSchemaImporter = interface(DDN.mscorlib.DNObject)
  ['{07185328-8ECA-34AA-AC0A-513BD857677A}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取架构导入程序扩展的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" />
    ///  包含架构导入程序扩展的集合。
    ///</returns>
    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNSchemaImporter = class(TDNGenericImport<DNSchemaImporterClass, DNSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{B5D1E8AB-12D7-56CA-96AA-9096EB8726D7}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  类中，指定 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示 WSDL 文档中定义的编码的 SOAP 消息所使用的 XML 架构的对象。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    {class} function init(schemas: DNXmlSchemas): DNSoapSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  类中，指定 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象表示所使用的 SOAP 编码的消息的 XML 架构，加上类绑定生成的 WSDL 文档中定义。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="typeIdentifiers">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它指定的类生成的 WSDL 文档中定义的绑定的集合。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNSoapSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  类指定架构、 编译器选项和相关的代码实体的名称。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="typeIdentifiers">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  用于维护一组相关的代码实体或由.NET Framework 的 XML 序列化基础结构生成的类型映射的名称。
    ///</param>
    ///  <param name="options">
    ///  其中一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  ，它指定用于生成.NET Framework 类型的各种选项。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers; options: DNCodeGenerationOptions): DNSoapSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  类指定架构、 编译器选项和架构的上下文。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="options">
    ///  其中一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  ，它指定用于生成.NET Framework 类型的各种选项。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.Serialization.ImportContext" />
    ///  ，它描述在该架构的一组绑定到.NET Framework 代码实体的上下文。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; context: DNImportContext): DNSoapSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaImporter" />
    ///  类指定架构、 编译器选项和相关的代码实体的名称。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  包含集合的 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象。
    ///</param>
    ///  <param name="options">
    ///  其中一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  ，它指定用于生成.NET Framework 类型的各种选项。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  用来生成序列化代码。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.Serialization.ImportContext" />
    ///  ，它描述在该架构的一组绑定到.NET Framework 代码实体的上下文。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider; context: DNImportContext): DNSoapSchemaImporter; overload;

  end;

  ///<summary>
  ///  在.NET Framework 中用于生成在 WSDL 文档中的内部映射到 SOAP 编码的消息部分的.NET Framework 类型。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapSchemaImporter')]
  DNSoapSchemaImporter = interface(DNSchemaImporter)
  ['{1D6EE53D-B4EC-3832-A0CC-B401E2150E58}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    ///<summary>
    ///  生成的 WSDL 文档中定义的 SOAP 编码消息的元素部分的内部类型映射信息。
    ///</summary>
    ///  <param name="name">
    ///  消息名称。
    ///</param>
    ///  <param name="ns">
    ///  消息命名空间。
    ///</param>
    ///  <param name="members">
    ///  类型的数组 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  ，它提供有关部件元素的信息。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义的元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成的 WSDL 文档中定义的 SOAP 编码消息的元素部分的内部类型映射信息。
    ///</summary>
    ///  <param name="name">
    ///  消息名称。
    ///</param>
    ///  <param name="ns">
    ///  消息命名空间。
    ///</param>
    ///  <param name="members">
    ///  类型的数组 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  ，它提供有关部件元素的信息。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  能够定义由部分括在额外的 SOAP 消息; 中的包装元素的元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义的元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成编码的 SOAP 元素部分，其中指定的基类型为 WSDL 文档中定义的类型的内部类型映射信息。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定为其生成.NET Framework 类型的元素的类型的名称。
    ///</param>
    ///  <param name="baseType">
    ///  正在生成.NET Framework 类型的基类型。
    ///</param>
    ///  <param name="baseTypeCanBeIndirect"><see langword="true" />
    ///  指示要生成的类型可能会直接继承自基类型;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  对应于 WSDL 消息部分派生类型的.NET Framework 类型映射信息。
    ///</returns>
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping;
    ///<summary>
    ///  将生成一个 SOAP 编码元素部分 WSDL 文档中定义的内部类型映射信息。
    ///</summary>
    ///  <param name="name">
    ///  消息名称。
    ///</param>
    ///  <param name="ns">
    ///  消息命名空间。
    ///</param>
    ///  <param name="member">
    ///  一个 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  对象，它提供有关部件元素的信息。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义的单个元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(name: string; ns: string; member: DNSoapSchemaMember): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成的 WSDL 文档中定义的 SOAP 编码消息的元素部分的内部类型映射信息。
    ///</summary>
    ///  <param name="name">
    ///  消息名称。
    ///</param>
    ///  <param name="ns">
    ///  消息命名空间。
    ///</param>
    ///  <param name="members">
    ///  类型的数组 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  ，它提供有关部件元素的信息。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  能够定义由部分括在额外的 SOAP 消息; 中的包装元素的元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="baseType">
    ///  所有生成以与消息部分相对应的.NET Framework 类型的基类型。
    ///</param>
    ///  <param name="baseTypeCanBeIndirect"><see langword="true" />
    ///  若要指示对应于消息部分的类型可以直接继承自基类型;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义的元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>; hasWrapperElement: Boolean; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取架构导入程序扩展的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" />
    ///  包含架构导入程序扩展的集合。
    ///</returns>
    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNSoapSchemaImporter = class(TDNGenericImport<DNSoapSchemaImporterClass, DNSoapSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaImporterClass = interface(DNSchemaImporterClass)
  ['{66095863-7C38-583E-96E6-09E5FF901035}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  类中，执行一套 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示所使用的 SOAP WSDL 文档中定义的文本消息的 XML 架构的对象。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  类中，执行一套 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示所使用的 SOAP 文本消息的 XML 架构加上生成的 Web 服务描述语言 (WSDL) 文档中定义的绑定类的对象。
    ///</summary>
    ///  <param name="schemas">
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  对象。
    ///</param>
    ///  <param name="typeIdentifiers">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它指定的类生成的 WSDL 文档中定义的绑定的集合。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers): DNXmlSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  类中，执行一套 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  表示文本的 SOAP 消息，加上正在生成的类用于定义在 WSDL 文档中，绑定的 XML 架构的对象和一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举值。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="typeIdentifiers">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeIdentifiers" />
    ///  对象，它指定的类生成的 WSDL 文档中定义的绑定的集合。
    ///</param>
    ///  <param name="options">
    ///  按位组合 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  值，该值指定生成的 Web 服务的.NET Framework 类型时要使用的选项。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; typeIdentifiers: DNCodeIdentifiers; options: DNCodeGenerationOptions): DNXmlSchemaImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  类的 XML 架构集合中，使用指定代码生成选项和导入上下文。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="options">
    ///  一个 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  枚举，用于指定代码生成选项。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Xml.Serialization.ImportContext" />
    ///  实例，指定的导入上下文。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; context: DNImportContext): DNXmlSchemaImporter; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSchemaImporter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象的集合。
    ///</param>
    ///  <param name="options">
    ///  按位组合 <see cref="T:System.Xml.Serialization.CodeGenerationOptions" />
    ///  值，该值指定生成的 Web 服务的.NET Framework 类型时要使用的选项。
    ///</param>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  用来生成序列化代码。
    ///</param>
    ///  <param name="context">
    ///  一个 <see cref="T:System.Xml.Serialization.ImportContext" />
    ///  实例，指定的导入上下文。
    ///</param>
    {class} function init(schemas: DNXmlSchemas; options: DNCodeGenerationOptions; codeProvider: DDN.System.DNCodeDomProvider; context: DNImportContext): DNXmlSchemaImporter; overload;

  end;

  ///<summary>
  ///  生成内部映射到 XML 架构元素声明，包括 WSDL 文档中的文字 XSD 的消息部分的.NET Framework 类型。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSchemaImporter')]
  DNXmlSchemaImporter = interface(DNSchemaImporter)
  ['{C97E7E2E-AC97-35E4-918A-6057F2957031}']
  { getters & setters } 

    function get_Extensions: DNSchemaImporterExtensionCollection;

  { methods } 

    ///<summary>
    ///  生成的 XML 架构文档中定义的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定的 XML 架构文档中定义的元素的名称。
    ///</param>
    ///  <param name="baseType">
    ///  生成的 XSD 元素类型与对应的.NET Framework 类型基类型。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  表示的 XML 架构元素的.net Framework 类型映射信息。
    ///</returns>
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成的 XML 架构文档中定义的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="typeName">
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  指定 XML 元素。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  对象，用于描述类型映射。
    ///</returns>
    function ImportSchemaType(typeName: DNXmlQualifiedName): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成的 XML 架构文档中定义的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="typeName">
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  指定 XML 元素。
    ///</param>
    ///  <param name="baseType">
    ///  一个 <see cref="T:System.Type" />
    ///  指定基类型的对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  对象，用于描述类型映射。
    ///</returns>
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成的 XML 架构文档中定义的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定的 XML 架构文档中定义的元素的名称。
    ///</param>
    ///<returns>
    ///  XML 架构元素的.NET Framework 类型映射信息。
    ///</returns>
    function ImportTypeMapping(name: DNXmlQualifiedName): DNXmlTypeMapping;
    ///<summary>
    ///  生成单个元素的 WSDL 文档中定义的使用文本的 SOAP 消息部分的内部类型映射信息。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定消息部分的名称。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义包含单个元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(name: DNXmlQualifiedName): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成单个 WSDL 文档中定义的 (SOAP) 文本元素部分的内部类型映射信息。
    ///</summary>
    ///  <param name="typeName"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定为其生成.NET Framework 类型的元素的类型的名称。
    ///</param>
    ///  <param name="elementName">
    ///  WSDL 文档中的部分元素的名称。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  表示 WSDL 消息定义的单个元素一部分的.NET Framework 类型映射。
    ///</returns>
    function ImportAnyType(typeName: DNXmlQualifiedName; elementName: string): DNXmlMembersMapping;
    ///<summary>
    ///  生成内部类型映射信息的使用文本的 SOAP 消息在 WSDL 文档中定义的元素部分。
    ///</summary>
    ///  <param name="names">
    ///  类型的数组 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定的消息部分的名称。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  ，表示 WSDL 消息定义的元素部分的.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成内部类型映射信息的使用文本的 SOAP 消息在 WSDL 文档中定义的元素部分。
    ///</summary>
    ///  <param name="name">
    ///  要为其生成一个映射元素的名称。
    ///</param>
    ///  <param name="ns">
    ///  要为其生成一个映射元素的命名空间。
    ///</param>
    ///  <param name="members">
    ///  一个数组 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  指定为其生成映射的元素的成员的实例。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  包含类型映射信息。
    ///</returns>
    function ImportMembersMapping(name: string; ns: string; members: TArray<DNSoapSchemaMember>): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成定义中的 XML 架构文档，或作为一部分 WSDL 文档中的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="name"><see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定的 XML 架构文档中定义的元素的名称。
    ///</param>
    ///  <param name="baseType">
    ///  生成的 XSD 元素类型与对应的.NET Framework 类型基类型。
    ///</param>
    ///  <param name="baseTypeCanBeIndirect"><see langword="true" />
    ///  若要指示对应的 XSD 元素的类型可以直接继承自基类型;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  XML 架构元素的.NET Framework 类型映射信息。
    ///</returns>
    function ImportDerivedTypeMapping(name: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成的 XML 架构文档中定义的元素的内部类型映射信息。
    ///</summary>
    ///  <param name="typeName">
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  指定 XML 元素。
    ///</param>
    ///  <param name="baseType">
    ///  一个 <see cref="T:System.Type" />
    ///  指定基类型的对象。
    ///</param>
    ///  <param name="baseTypeCanBeIndirect">
    ///  一个 <see cref="T:System.Boolean" />
    ///  值，该值指定是否已生成的类型直接继承，可以 <paramref name="baseType" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  对象，用于描述类型映射。
    ///</returns>
    function ImportSchemaType(typeName: DNXmlQualifiedName; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成内部类型映射信息的使用文本的 SOAP 消息在 WSDL 文档中定义的元素部分。
    ///</summary>
    ///  <param name="names">
    ///  类型的数组 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  ，它指定的消息部分的名称。
    ///</param>
    ///  <param name="baseType">
    ///  所有生成以与消息部分相对应的.NET Framework 类型的基类型。
    ///</param>
    ///  <param name="baseTypeCanBeIndirect"><see langword="true" />
    ///  若要指示对应于消息部分的类型可以直接继承自基类型;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  WSDL 消息定义的元素部分.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(names: TArray<DNXmlQualifiedName>; baseType: DDN.mscorlib.DNType; baseTypeCanBeIndirect: Boolean): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取架构导入程序扩展的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.Configuration.SchemaImporterExtensionElementCollection" />
    ///  包含架构导入程序扩展的集合。
    ///</returns>
    property Extensions: DNSchemaImporterExtensionCollection read get_Extensions;
  end;

  TDNXmlSchemaImporter = class(TDNGenericImport<DNXmlSchemaImporterClass, DNXmlSchemaImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributeOverridesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{C242A9E6-FE8C-55F7-8049-4DA2CC71A393}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapAttributeOverrides;

  end;

  ///<summary>
  ///  允许您重写属性应用于属性、 字段和类当您使用 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  要序列化或反序列化将对象作为编码的 SOAP。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapAttributeOverrides')]
  DNSoapAttributeOverrides = interface(DDN.mscorlib.DNObject)
  ['{6F45712D-36F9-3F4B-8859-636CC8C3A7BB}']
  { getters & setters } 

    function get_Item(&type: DDN.mscorlib.DNType): DNSoapAttributes; overload;
    function get_Item(&type: DDN.mscorlib.DNType; member: string): DNSoapAttributes; overload;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  到的集合 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  对象。
    ///  <paramref name="type" />
    ///  参数指定的对象由重写 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  被重写的对象。
    ///</param>
    ///  <param name="attributes">
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  表示重写的特性。
    ///</param>
    procedure Add(&type: DDN.mscorlib.DNType; attributes: DNSoapAttributes); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  到的集合 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  包含的对象 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />
    ///  。
    ///  <paramref name="type" />
    ///  参数指定的对象由重写 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  。
    ///  <paramref name="member" />
    ///  参数指定将重写的成员的名称。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要重写的对象。
    ///</param>
    ///  <param name="member">
    ///  要重写的成员的名称。
    ///</param>
    ///  <param name="attributes">
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  表示重写的特性。
    ///</param>
    procedure Add(&type: DDN.mscorlib.DNType; member: string; attributes: DNSoapAttributes); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[&type: DDN.mscorlib.DNType]: DNSoapAttributes read get_Item; default;
    property Item[&type: DDN.mscorlib.DNType; member: string]: DNSoapAttributes read get_Item; default;
  end;

  TDNSoapAttributeOverrides = class(TDNGenericImport<DNSoapAttributeOverridesClass, DNSoapAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DBF2589C-3D4F-506D-B9E6-B218017B166A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapAttributes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  类使用指定的自定义类型。
    ///</summary>
    ///  <param name="provider">
    ///  任何对象，它实现 <see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  接口，如 <see cref="T:System.Type" />
    ///  类。
    ///</param>
    {class} function init(provider: DDN.mscorlib.DNICustomAttributeProvider): DNSoapAttributes; overload;

  end;

  ///<summary>
  ///  表示控件的属性对象的集合如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  序列化和反序列化的 SOAP 方法。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapAttributes')]
  DNSoapAttributes = interface(DDN.mscorlib.DNObject)
  ['{A7C91ED3-8A88-3EC0-A7B9-3B3C2FCAB71D}']
  { getters & setters } 

    function get_SoapType: DNSoapTypeAttribute;
    procedure set_SoapType(value: DNSoapTypeAttribute);
    function get_SoapEnum: DNSoapEnumAttribute;
    procedure set_SoapEnum(value: DNSoapEnumAttribute);
    function get_SoapIgnore: Boolean;
    procedure set_SoapIgnore(value: Boolean);
    function get_SoapElement: DNSoapElementAttribute;
    procedure set_SoapElement(value: DNSoapElementAttribute);
    function get_SoapAttribute: DNSoapAttributeAttribute;
    procedure set_SoapAttribute(value: DNSoapAttributeAttribute);
    function get_SoapDefaultValue: DDN.mscorlib.DNObject;
    procedure set_SoapDefaultValue(value: DDN.mscorlib.DNObject);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个对象，指示 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  如何序列化到的对象类型编码的 SOAP XML。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />
    ///  它或者重写 <see cref="T:System.Xml.Serialization.SoapTypeAttribute" />
    ///  应用于类声明中，或应用于类声明。
    ///</returns>
    property SoapType: DNSoapTypeAttribute read get_SoapType write set_SoapType;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  将序列化为 SOAP 枚举。
    ///</summary>
    ///<returns>
    ///  一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举成员。
    ///</returns>
    property SoapEnum: DNSoapEnumAttribute read get_SoapEnum write set_SoapEnum;
    ///<summary>
    ///  获取或设置一个值，指定是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  将公共字段或属性作为编码的 SOAP XML 序列化。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  不应序列化的字段或属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property SoapIgnore: Boolean read get_SoapIgnore write set_SoapIgnore;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  重写。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.SoapElementAttribute" />
    ///  重写。
    ///</returns>
    property SoapElement: DNSoapElementAttribute read get_SoapElement write set_SoapElement;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />
    ///  重写。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributeAttribute" />
    ///  覆盖的行为 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  成员序列化时。
    ///</returns>
    property SoapAttribute: DNSoapAttributeAttribute read get_SoapAttribute write set_SoapAttribute;
    ///<summary>
    ///  获取或设置 XML 元素或属性的默认值。
    ///</summary>
    ///<returns>
    ///  表示 XML 元素或属性的默认值的对象。
    ///</returns>
    property SoapDefaultValue: DDN.mscorlib.DNObject read get_SoapDefaultValue write set_SoapDefaultValue;
  end;

  TDNSoapAttributes = class(TDNGenericImport<DNSoapAttributesClass, DNSoapAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapReflectionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5E3AF124-3EBD-54E2-8270-A5704886C48A}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  类，同时指定导入的类型映射的默认 XML 命名空间。
    ///</summary>
    ///  <param name="defaultNamespace">
    ///  默认 XML 命名空间，用于导入类型映射。
    ///</param>
    {class} function init(defaultNamespace: string): DNSoapReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  类，同时指定 XML 序列化的替代。
    ///</summary>
    ///  <param name="attributeOverrides">
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />
    ///  重写的对象如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类序列化映射使用 SOAP 编码的类型。
    ///</param>
    {class} function init(attributeOverrides: DNSoapAttributeOverrides): DNSoapReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  类，同时指定 XML 序列化重写和默认 XML 命名空间。
    ///</summary>
    ///  <param name="attributeOverrides">
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributeOverrides" />
    ///  重写的对象如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类序列化映射使用 SOAP 编码的类型。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  默认 XML 命名空间，用于导入类型映射。
    ///</param>
    {class} function init(attributeOverrides: DNSoapAttributeOverrides; defaultNamespace: string): DNSoapReflectionImporter; overload;

  end;

  ///<summary>
  ///  将映射到 SOAP 编码的消息生成从.NET Framework 类型或 Web 服务方法信息。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapReflectionImporter')]
  DNSoapReflectionImporter = interface(DDN.mscorlib.DNObject)
  ['{B73DB4BF-E6EA-36ED-BAB0-DBFFA646E0BA}']
  { methods } 

    ///<summary>
    ///  放置在派生类型的映射， <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  以后导入方法被调用时使用的实例的上下文。
    ///</summary>
    ///  <param name="provider"><see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  反射对象，其中包含派生自的自定义特性 <see cref="T:System.Xml.Serialization.SoapIncludeAttribute" />
    ///  属性。
    ///</param>
    procedure IncludeTypes(provider: DDN.mscorlib.DNICustomAttributeProvider);
    ///<summary>
    ///  放置中的类型的映射， <see cref="T:System.Xml.Serialization.SoapReflectionImporter" />
    ///  以后导入方法被调用时使用的实例的上下文。
    ///</summary>
    ///  <param name="type">
    ///  若要保存类型映射信息.NET Framework 类型。
    ///</param>
    procedure IncludeType(&type: DDN.mscorlib.DNType);
    ///<summary>
    ///  将生成到.NET Framework 类型的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///<returns>
    ///  内部.NET Framework 映射到 XML 架构元素的类型。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    ///<summary>
    ///  将生成到.NET Framework 类型的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  要使用的默认 XML 命名空间。
    ///</param>
    ///<returns>
    ///  内部.NET Framework 映射到 XML 架构元素的类型。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    ///<summary>
    ///  生成内部类型映射会从 Web 服务方法中收集的信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  .NET Framework 代码实体属于 Web 服务方法的数组。
    ///</param>
    ///<returns>
    ///  对 WSDL 消息定义的元素部分内部.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成内部类型映射会从 Web 服务方法中收集的信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  .NET Framework 代码实体属于 Web 服务方法的数组。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  若要指示对应于 WSDL 消息部分的元素，应括在 SOAP 消息; 中的额外包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="writeAccessors"><see langword="true" />
    ///  若要指示 RPC 样式的 Web 服务绑定。 <see langword="false" />
    ///  来指示文档样式 Web 服务绑定或 SOAP 标头。
    ///</param>
    ///<returns>
    ///  对 WSDL 消息定义的元素部分内部.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成内部类型映射会从 Web 服务方法中收集的信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  .NET Framework 代码实体属于 Web 服务方法的数组。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  若要指示对应于 WSDL 消息部分的元素，应括在 SOAP 消息; 中的额外包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="writeAccessors"><see langword="true" />
    ///  若要指示 RPC 样式的 Web 服务绑定。 <see langword="false" />
    ///  来指示文档样式 Web 服务绑定或 SOAP 标头。
    ///</param>
    ///  <param name="validate"><see langword="true" />
    ///  若要指示预期的限定名称的包装元素，则应检查生成的反序列化程序否则为 <see langword="false" />
    ///  。
    ///  此参数的值才有意义才 <paramref name="hasWrapperElement" />
    ///  参数的值是 <see langword="true" />
    ///  。
    ///</param>
    ///<returns>
    ///  对 WSDL 消息定义的元素部分内部.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  生成内部类型映射会从 Web 服务方法中收集的信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  .NET Framework 代码实体属于 Web 服务方法的数组。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  若要指示对应于 WSDL 消息部分的元素，应括在 SOAP 消息; 中的额外包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="writeAccessors"><see langword="true" />
    ///  若要指示 RPC 样式的 Web 服务绑定。 <see langword="false" />
    ///  来指示文档样式 Web 服务绑定或 SOAP 标头。
    ///</param>
    ///  <param name="validate"><see langword="true" />
    ///  若要指示预期的限定名称的包装元素，则应检查生成的反序列化程序否则为 <see langword="false" />
    ///  。
    ///  此参数的值才有意义才 <paramref name="hasWrapperElement" />
    ///  参数的值是 <see langword="true" />
    ///  。
    ///</param>
    ///  <param name="access"><see cref="T:System.Xml.Serialization.XmlMappingAccess" />
    ///  值之一。
    ///</param>
    ///<returns>
    ///  对 WSDL 消息定义的元素部分内部.NET Framework 类型映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; writeAccessors: Boolean; validate: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapReflectionImporter = class(TDNGenericImport<DNSoapReflectionImporterClass, DNSoapReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{5248EBF8-BFA2-5A66-8222-4A01DF423522}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.SoapSchemaExporter" />
    ///  类，该类提供的集合 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  元素声明将被添加到的 XML 架构的对象。
    ///</summary>
    ///  <param name="schemas">
    ///  一套 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  到哪个元素从类型映射获取的声明是要添加的对象。
    ///</param>
    {class} function init(schemas: DNXmlSchemas): DNSoapSchemaExporter;

  end;

  ///<summary>
  ///  填充 <see cref="T:System.Xml.Schema.XmlSchema" />
  ///  对象具有 XML 架构数据类型为使用 SOAP 编码进行序列化的.NET Framework 类型的定义。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapSchemaExporter')]
  DNSoapSchemaExporter = interface(DDN.mscorlib.DNObject)
  ['{61AD9AC2-5DD4-35EB-A765-E8EF2E2A2A90}']
  { methods } 

    ///<summary>
    ///  将添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象数据类型定义为.NET Framework 类型。
    ///</summary>
    ///  <param name="xmlTypeMapping">
    ///  .NET Framework 类型和 XML 架构元素之间的内部映射。
    ///</param>
    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping);
    ///<summary>
    ///  将添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  SOAP 编码的消息定义的元素部分的每个对象数据类型定义。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  WSDL 消息定义的元素部分的内部.NET Framework 类型映射。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    ///<summary>
    ///  将添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  SOAP 编码的消息定义的元素部分的每个对象数据类型定义。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  WSDL 消息定义的元素部分的内部.NET Framework 类型映射。
    ///</param>
    ///  <param name="exportEnclosingType"><see langword="true" />
    ///  若要导出的 WSDL 部分; 的父元素的类型定义否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNSoapSchemaExporter = class(TDNGenericImport<DNSoapSchemaExporterClass, DNSoapSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNSoapSchemaMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0D5B7FD1-A279-58A0-85B0-065A36B010D4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.SoapSchemaMember" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNSoapSchemaMember;

  end;

  ///<summary>
  ///  表示某些特性的 XSD &lt;<see langword="part" />
  ///  &gt; 从文档中生成的类为 WSDL 文档中的元素。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.SoapSchemaMember')]
  DNSoapSchemaMember = interface(DDN.mscorlib.DNObject)
  ['{338F0B4E-16CB-301A-8A9F-7164C76D50D7}']
  { getters & setters } 

    function get_MemberType: DNXmlQualifiedName;
    procedure set_MemberType(value: DNXmlQualifiedName);
    function get_MemberName: string;
    procedure set_MemberName(value: string);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，对应于 WSDL 部分元素的类型特性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  XML 类型相对应。
    ///</returns>
    property MemberType: DNXmlQualifiedName read get_MemberType write set_MemberType;
    ///<summary>
    ///  获取或设置一个值，对应的 WSDL 一部分元素的 name 属性。
    ///</summary>
    ///<returns>
    ///  元素名称。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
  end;

  TDNSoapSchemaMember = class(TDNGenericImport<DNSoapSchemaMemberClass, DNSoapSchemaMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributeOverridesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{7C2F6EF2-C5F8-5B3C-9728-DBA72A837F78}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlAttributeOverrides;

  end;

  ///<summary>
  ///  允许您重写属性、 字段和类特性，当您使用 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  要序列化或反序列化为对象。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAttributeOverrides')]
  DNXmlAttributeOverrides = interface(DDN.mscorlib.DNObject)
  ['{A058A976-DF7D-3F5E-9145-E972A8A17A85}']
  { getters & setters } 

    function get_Item(&type: DDN.mscorlib.DNType): DNXmlAttributes; overload;
    function get_Item(&type: DDN.mscorlib.DNType; member: string): DNXmlAttributes; overload;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  对象添加到收藏的 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  对象。
    ///  <paramref name="type" />
    ///  参数指定的对象由重写 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  对象。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  被重写的对象。
    ///</param>
    ///  <param name="attributes"><see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  属性表示重写的对象。
    ///</param>
    procedure Add(&type: DDN.mscorlib.DNType; attributes: DNXmlAttributes); overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  对象添加到收藏的 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  对象。
    ///  <paramref name="type" />
    ///  参数指定的对象将被重写。
    ///  <paramref name="member" />
    ///  参数指定将重写的成员的名称。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  要重写的对象。
    ///</param>
    ///  <param name="member">
    ///  要重写的成员的名称。
    ///</param>
    ///  <param name="attributes"><see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  属性表示重写的对象。
    ///</param>
    procedure Add(&type: DDN.mscorlib.DNType; member: string; attributes: DNXmlAttributes); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property Item[&type: DDN.mscorlib.DNType]: DNXmlAttributes read get_Item; default;
    property Item[&type: DDN.mscorlib.DNType; member: string]: DNXmlAttributes read get_Item; default;
  end;

  TDNXmlAttributeOverrides = class(TDNGenericImport<DNXmlAttributeOverridesClass, DNXmlAttributeOverrides>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlAttributesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{077C1F76-9043-5E7B-825D-0973EBF07720}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlAttributes; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  类和自定义如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化和反序列化对象。
    ///</summary>
    ///  <param name="provider">
    ///  一个类，可以提供其他实现用于控制 XML 序列化的属性。
    ///</param>
    {class} function init(provider: DDN.mscorlib.DNICustomAttributeProvider): DNXmlAttributes; overload;

  end;

  ///<summary>
  ///  表示控件的属性对象的集合如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  序列化和反序列化对象。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlAttributes')]
  DNXmlAttributes = interface(DDN.mscorlib.DNObject)
  ['{12195E33-E0FC-38E3-8303-BE44201719E9}']
  { getters & setters } 

    function get_XmlElements: DNXmlElementAttributes;
    function get_XmlAttribute: DNXmlAttributeAttribute;
    procedure set_XmlAttribute(value: DNXmlAttributeAttribute);
    function get_XmlEnum: DNXmlEnumAttribute;
    procedure set_XmlEnum(value: DNXmlEnumAttribute);
    function get_XmlText: DNXmlTextAttribute;
    procedure set_XmlText(value: DNXmlTextAttribute);
    function get_XmlArray: DNXmlArrayAttribute;
    procedure set_XmlArray(value: DNXmlArrayAttribute);
    function get_XmlArrayItems: DNXmlArrayItemAttributes;
    function get_XmlDefaultValue: DDN.mscorlib.DNObject;
    procedure set_XmlDefaultValue(value: DDN.mscorlib.DNObject);
    function get_XmlIgnore: Boolean;
    procedure set_XmlIgnore(value: Boolean);
    function get_XmlType: DNXmlTypeAttribute;
    procedure set_XmlType(value: DNXmlTypeAttribute);
    function get_XmlRoot: DNXmlRootAttribute;
    procedure set_XmlRoot(value: DNXmlRootAttribute);
    function get_XmlAnyElements: DNXmlAnyElementAttributes;
    function get_XmlAnyAttribute: DNXmlAnyAttributeAttribute;
    procedure set_XmlAnyAttribute(value: DNXmlAnyAttributeAttribute);
    function get_XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute;
    function get_Xmlns: Boolean;
    procedure set_Xmlns(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取指定的对象的集合如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化的 XML 元素形式的公共字段或读/写属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlElementAttributes" />
    ///  ，其中包含一套 <see cref="T:System.Xml.Serialization.XmlElementAttribute" />
    ///  对象。
    ///</returns>
    property XmlElements: DNXmlElementAttributes read get_XmlElements;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化公共字段或作为 XML 属性的公共读/写属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlAttributeAttribute" />
    ///  控制作为 XML 属性的序列化的公共字段或读/写属性。
    ///</returns>
    property XmlAttribute: DNXmlAttributeAttribute read get_XmlAttribute write set_XmlAttribute;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举成员。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlEnumAttribute" />
    ///  ，它指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化枚举成员。
    ///</returns>
    property XmlEnum: DNXmlEnumAttribute read get_XmlEnum write set_XmlEnum;
    ///<summary>
    ///  获取或设置一个对象，指示 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  要序列化公共字段或作为 XML 文本的公共读/写属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlTextAttribute" />
    ///  重写默认的序列化的公共属性或字段。
    ///</returns>
    property XmlText: DNXmlTextAttribute read get_XmlText write set_XmlText;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化返回数组的公共字段或读/写属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlArrayAttribute" />
    ///  ，它指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化返回数组的公共字段或读/写属性。
    ///</returns>
    property XmlArray: DNXmlArrayAttribute read get_XmlArray write set_XmlArray;
    ///<summary>
    ///  获取或设置指定的对象的集合如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化公共字段或读/写属性返回数组中插入的项。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlArrayItemAttributes" />
    ///  对象，其中包含一套 <see cref="T:System.Xml.Serialization.XmlArrayItemAttribute" />
    ///  对象。
    ///</returns>
    property XmlArrayItems: DNXmlArrayItemAttributes read get_XmlArrayItems;
    ///<summary>
    ///  获取或设置 XML 元素或属性的默认值。
    ///</summary>
    ///<returns><see cref="T:System.Object" />
    ///  表示 XML 元素或属性的默认值。
    ///</returns>
    property XmlDefaultValue: DDN.mscorlib.DNObject read get_XmlDefaultValue write set_XmlDefaultValue;
    ///<summary>
    ///  获取或设置一个值，指定是否 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化公共字段或公共读/写属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  不应序列化的字段或属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property XmlIgnore: Boolean read get_XmlIgnore write set_XmlIgnore;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化的类 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
    ///  已应用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
    ///  它将替代 <see cref="T:System.Xml.Serialization.XmlTypeAttribute" />
    ///  应用于类声明。
    ///</returns>
    property XmlType: DNXmlTypeAttribute read get_XmlType write set_XmlType;
    ///<summary>
    ///  获取或设置一个对象，指定如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  序列化类作为 XML 根元素。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  它将替代具有作为 XML 根元素的特性的类。
    ///</returns>
    property XmlRoot: DNXmlRootAttribute read get_XmlRoot write set_XmlRoot;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  对象来重写。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlAnyElementAttributes" />
    ///  对象表示的集合 <see cref="T:System.Xml.Serialization.XmlAnyElementAttribute" />
    ///  对象。
    ///</returns>
    property XmlAnyElements: DNXmlAnyElementAttributes read get_XmlAnyElements;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
    ///  重写。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlAnyAttributeAttribute" />
    ///  重写。
    ///</returns>
    property XmlAnyAttribute: DNXmlAnyAttributeAttribute read get_XmlAnyAttribute write set_XmlAnyAttribute;
    ///<summary>
    ///  获取或设置一个对象，可帮助你区分之间的一组选项。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlChoiceIdentifierAttribute" />
    ///  ，可应用于类成员序列化为 <see langword="xsi:choice" />
    ///  元素。
    ///</returns>
    property XmlChoiceIdentifier: DNXmlChoiceIdentifierAttribute read get_XmlChoiceIdentifier;
    ///<summary>
    ///  获取或设置一个值，指定是否保留所有命名空间声明包含返回的成员的对象时 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  对象重写。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果应保留的命名空间声明;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Xmlns: Boolean read get_Xmlns write set_Xmlns;
  end;

  TDNXmlAttributes = class(TDNGenericImport<DNXmlAttributesClass, DNXmlAttributes>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{94C75695-6656-509B-AA6F-42E1BB20DB48}']
  end;

  ///<summary>
  ///  支持.NET Framework 类型和 XML 架构数据类型之间的映射。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlMapping')]
  DNXmlMapping = interface(DDN.mscorlib.DNObject)
  ['{237EB3E9-153B-3AD5-8AB2-5B2D4A13ACAE}']
  { getters & setters } 

    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    ///<summary>
    ///  设置用于查找映射的键。
    ///</summary>
    ///  <param name="key">
    ///  一个 <see cref="T:System.String" />
    ///  包含查找键。
    ///</param>
    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取映射元素的名称。
    ///</summary>
    ///<returns>
    ///  映射元素的名称。
    ///</returns>
    property ElementName: string read get_ElementName;
    ///<summary>
    ///  获取映射的 XSD 元素的名称。
    ///</summary>
    ///<returns>
    ///  XSD 元素名称。
    ///</returns>
    property XsdElementName: string read get_XsdElementName;
    ///<summary>
    ///  获取映射元素的命名空间。
    ///</summary>
    ///<returns>
    ///  映射元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMapping = class(TDNGenericImport<DNXmlMappingClass, DNXmlMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMembersMappingClass = interface(DNXmlMappingClass)
  ['{E979AC34-5732-5CD6-B668-10CE467B7B05}']
  end;

  ///<summary>
  ///  提供 SOAP Web 服务的.NET Framework Web 服务方法和 Web 服务描述语言 (WSDL) 定义的消息之间的映射。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlMembersMapping')]
  DNXmlMembersMapping = interface(DNXmlMapping)
  ['{CF624D8C-2146-3393-9F95-60738B91180D}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_Item(index: Int32): DNXmlMemberMapping;
    function get_Count: Int32;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    ///<summary>
    ///  设置用于查找映射的键。
    ///</summary>
    ///  <param name="key">
    ///  一个 <see cref="T:System.String" />
    ///  包含查找键。
    ///</param>
    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取映射到表示 SOAP 消息的 XML 架构元素的数据类型的.NET Framework 类型的名称。
    ///</summary>
    ///<returns>
    ///  .NET Framework 类型的名称。
    ///</returns>
    property TypeName: string read get_TypeName;
    ///<summary>
    ///  获取映射到表示 SOAP 消息的 XML 架构元素的数据类型的.NET Framework 类型的命名空间。
    ///</summary>
    ///<returns>
    ///  映射的.NET Framework 命名空间。
    ///</returns>
    property TypeNamespace: string read get_TypeNamespace;
    property Item[index: Int32]: DNXmlMemberMapping read get_Item; default;
    ///<summary>
    ///  获取对 Web 服务方法的 SOAP 消息映射到属于.NET Framework 代码实体数。
    ///</summary>
    ///<returns>
    ///  集合中的映射的数量。
    ///</returns>
    property Count: Int32 read get_Count;
    ///<summary>
    ///  获取映射元素的名称。
    ///</summary>
    ///<returns>
    ///  映射元素的名称。
    ///</returns>
    property ElementName: string read get_ElementName;
    ///<summary>
    ///  获取映射的 XSD 元素的名称。
    ///</summary>
    ///<returns>
    ///  XSD 元素名称。
    ///</returns>
    property XsdElementName: string read get_XsdElementName;
    ///<summary>
    ///  获取映射元素的命名空间。
    ///</summary>
    ///<returns>
    ///  映射元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace;
  end;

  TDNXmlMembersMapping = class(TDNGenericImport<DNXmlMembersMappingClass, DNXmlMembersMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlTypeMappingClass = interface(DNXmlMappingClass)
  ['{3C8A32B7-6A53-5383-A850-CB3AA65FBFEA}']
  end;

  ///<summary>
  ///  包含到另一种类型的映射。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlTypeMapping')]
  DNXmlTypeMapping = interface(DNXmlMapping)
  ['{B3188B0A-C0E1-33C2-B929-8BE861DB96DC}']
  { getters & setters } 

    function get_TypeName: string;
    function get_TypeFullName: string;
    function get_XsdTypeName: string;
    function get_XsdTypeNamespace: string;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;

  { methods } 

    ///<summary>
    ///  设置用于查找映射的键。
    ///</summary>
    ///  <param name="key">
    ///  一个 <see cref="T:System.String" />
    ///  包含查找键。
    ///</param>
    procedure SetKey(key: string);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取映射对象的类型名称。
    ///</summary>
    ///<returns>
    ///  映射对象的类型名称。
    ///</returns>
    property TypeName: string read get_TypeName;
    ///<summary>
    ///  包含命名空间 （或命名空间） 的完全限定的类型名称和类型。
    ///</summary>
    ///<returns>
    ///  完全限定的类型名称
    ///</returns>
    property TypeFullName: string read get_TypeFullName;
    ///<summary>
    ///  获取映射对象的 XML 元素名称。
    ///</summary>
    ///<returns>
    ///  映射对象的 XML 元素名称。
    ///  默认值为该对象的类名。
    ///</returns>
    property XsdTypeName: string read get_XsdTypeName;
    ///<summary>
    ///  获取映射对象的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  映射对象的 XML 命名空间。
    ///  默认值为空字符串("")。
    ///</returns>
    property XsdTypeNamespace: string read get_XsdTypeNamespace;
    ///<summary>
    ///  获取映射元素的名称。
    ///</summary>
    ///<returns>
    ///  映射元素的名称。
    ///</returns>
    property ElementName: string read get_ElementName;
    ///<summary>
    ///  获取映射的 XSD 元素的名称。
    ///</summary>
    ///<returns>
    ///  XSD 元素名称。
    ///</returns>
    property XsdElementName: string read get_XsdElementName;
    ///<summary>
    ///  获取映射元素的命名空间。
    ///</summary>
    ///<returns>
    ///  映射元素的命名空间。
    ///</returns>
    property Namespace: string read get_Namespace;
  end;

  TDNXmlTypeMapping = class(TDNGenericImport<DNXmlTypeMappingClass, DNXmlTypeMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlMemberMappingClass = interface(DDN.mscorlib.DNObjectClass)
  ['{E8CC3CBE-3B43-540A-B242-403D1198DDB6}']
  end;

  ///<summary>
  ///  将.NET Framework Web 服务方法中的代码实体映射到 Web 服务描述语言 (WSDL) 消息的元素中。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlMemberMapping')]
  DNXmlMemberMapping = interface(DDN.mscorlib.DNObject)
  ['{9BA5211C-C504-3CBD-9A74-F9640FC44F05}']
  { getters & setters } 

    function get_Any: Boolean;
    function get_ElementName: string;
    function get_XsdElementName: string;
    function get_Namespace: string;
    function get_MemberName: string;
    function get_TypeName: string;
    function get_TypeNamespace: string;
    function get_TypeFullName: string;
    function get_CheckSpecified: Boolean;

  { methods } 

    ///<summary>
    ///  返回与指定关联的类型名称 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  。
    ///</summary>
    ///  <param name="codeProvider">
    ///  一个 <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />
    ///  ，其中包含的类型的名称。
    ///</param>
    ///<returns>
    ///  类型的名称。
    ///</returns>
    function GenerateTypeName(codeProvider: DDN.System.DNCodeDomProvider): string;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否.NET Framework 类型可以映射到 XML 元素或任何类型的属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果该类型可以映射到 XML 的任何元素或属性;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Any: Boolean read get_Any;
    ///<summary>
    ///  获取应用于映射的 XML 元素声明的非限定的名称。
    ///</summary>
    ///<returns>
    ///  应用于映射的 XML 元素声明非限定的名称。
    ///</returns>
    property ElementName: string read get_ElementName;
    ///<summary>
    ///  获取 XML 元素名称的服务说明文档中所示。
    ///</summary>
    ///<returns>
    ///  XML 元素名称。
    ///</returns>
    property XsdElementName: string read get_XsdElementName;
    ///<summary>
    ///  获取应用于映射的 XML 命名空间。
    ///</summary>
    ///<returns>
    ///  应用于映射的 XML 命名空间。
    ///</returns>
    property Namespace: string read get_Namespace;
    ///<summary>
    ///  获取表示通过此映射的 Web 服务方法成员的名称。
    ///</summary>
    ///<returns>
    ///  此映射所表示的 Web 服务方法成员的名称。
    ///</returns>
    property MemberName: string read get_MemberName;
    ///<summary>
    ///  获取此映射的.NET Framework 类型的类型名称。
    ///</summary>
    ///<returns>
    ///  .NET Framework 类型使这一映射类型名称。
    ///</returns>
    property TypeName: string read get_TypeName;
    ///<summary>
    ///  获取此映射的.NET Framework 类型的命名空间。
    ///</summary>
    ///<returns>
    ///  此映射的.NET Framework 类型的命名空间。
    ///</returns>
    property TypeNamespace: string read get_TypeNamespace;
    ///<summary>
    ///  获取此映射的.NET Framework 类型的完全限定的类型名称。
    ///</summary>
    ///<returns>
    ///  .NET Framework 类型使这一映射的完全限定的类型名称。
    ///</returns>
    property TypeFullName: string read get_TypeFullName;
    ///<summary>
    ///  获取一个值，该值指示在.NET Framework 类型中伴随的字段是否具有指定的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果伴随的字段的值指定;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CheckSpecified: Boolean read get_CheckSpecified;
  end;

  TDNXmlMemberMapping = class(TDNGenericImport<DNXmlMemberMappingClass, DNXmlMemberMapping>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionImporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6646D5B5-B944-5060-91A4-566AA86DEEC0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  类使用指定的默认 XML 命名空间。
    ///</summary>
    ///  <param name="defaultNamespace">
    ///  默认 XML 命名空间，用于导入类型映射。
    ///</param>
    {class} function init(defaultNamespace: string): DNXmlReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  使用指定的 XML 序列化的类重写。
    ///</summary>
    ///  <param name="attributeOverrides">
    ///  重写的对象如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类序列化映射的类型。
    ///</param>
    {class} function init(attributeOverrides: DNXmlAttributeOverrides): DNXmlReflectionImporter; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlReflectionImporter" />
    ///  类使用指定的 XML 序列化重写，并默认 XML 命名空间。
    ///</summary>
    ///  <param name="attributeOverrides">
    ///  重写的对象如何 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类序列化映射的类型。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  默认 XML 命名空间，用于导入类型映射。
    ///</param>
    {class} function init(attributeOverrides: DNXmlAttributeOverrides; defaultNamespace: string): DNXmlReflectionImporter; overload;

  end;

  ///<summary>
  ///  生成的 XML 架构元素声明，包括在 Web 服务描述语言 (WSDL) 文档中，为.NET Framework 类型或 Web 服务方法信息的文本的 XML 架构定义 (XSD) 的消息部分的映射。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlReflectionImporter')]
  DNXmlReflectionImporter = interface(DDN.mscorlib.DNObject)
  ['{D94A52A1-034A-325B-B5FF-B0B6778B6231}']
  { methods } 

    ///<summary>
    ///  调用导入方法时，请包括以供将来使用的派生类型的映射。
    ///</summary>
    ///  <param name="provider">
    ///  一个实例 <see cref="T:System.Reflection.ICustomAttributeProvider" />
    ///  包含自定义特性的类派生自 <see cref="T:System.Xml.Serialization.XmlIncludeAttribute" />
    ///  属性。
    ///</param>
    procedure IncludeTypes(provider: DDN.mscorlib.DNICustomAttributeProvider);
    ///<summary>
    ///  调用导入方法时，请包括以供以后使用某个类型的映射。
    ///</summary>
    ///  <param name="type">
    ///  若要保存类型映射信息.NET Framework 类型。
    ///</param>
    procedure IncludeType(&type: DDN.mscorlib.DNType);
    ///<summary>
    ///  将生成到指定的.NET Framework 类型的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///<returns>
    ///  内部.NET Framework 映射到 XML 架构元素的类型。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType): DNXmlTypeMapping; overload;
    ///<summary>
    ///  将生成到.NET Framework 类型，使用指定的类型和命名空间的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  要使用的默认 XML 命名空间。
    ///</param>
    ///<returns>
    ///  内部.NET Framework 映射到 XML 架构元素的类型。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlTypeMapping; overload;
    ///<summary>
    ///  将生成到.NET Framework 类型，使用指定的类型和属性的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  应用于该类型的属性。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  表示传递给 XML 架构元素的.NET Framework 类型映射。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlTypeMapping; overload;
    ///<summary>
    ///  将生成到.NET Framework 类型，使用指定的类型、 属性和命名空间的 XML 架构元素之间的映射。
    ///</summary>
    ///  <param name="type">
    ///  为其生成类型映射的.NET Framework 类型。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  应用于该类型的属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  要使用的默认 XML 命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  ，其中包含到 XML 架构元素的类型的内部的.NET Framework 映射。
    ///</returns>
    function ImportTypeMapping(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlTypeMapping; overload;
    ///<summary>
    ///  从 Web 服务方法生成内部类型映射信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  对象，其中包含.NET Framework 代码属于 Web 服务方法的实体。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  如果与 Web 服务描述语言 (WSDL) 的消息部分相对应的元素应包含在 SOAP 消息; 中的额外的包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  与元素各部分的 WSDL 映射消息定义。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  返回使用从 Web 服务方法的信息的内部类型映射，并允许您指定 XML 元素名称、 XML 命名空间和其他选项。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  对象，其中包含.NET Framework 代码属于 Web 服务方法的实体。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  如果与 Web 服务描述语言 (WSDL) 的消息部分相对应的元素应包含在 SOAP 消息; 中的额外的包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="rpc"><see langword="true" />
    ///  如果该方法是在远程过程调用;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  包含映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  返回使用从 Web 服务方法的信息的内部类型映射，并允许您指定 XML 元素名称、 XML 命名空间和其他选项。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  对象，其中包含.NET Framework 代码属于 Web 服务方法的实体。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  如果与 Web 服务描述语言 (WSDL) 的消息部分相对应的元素应包含在 SOAP 消息; 中的额外的包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="rpc"><see langword="true" />
    ///  如果该方法是在远程过程调用;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="openModel"><see langword="true" />
    ///  若要指定生成的架构类型将标有<see langword=" &lt;xs:anyAttribute&gt;" />
    ///  元素; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  包含映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean): DNXmlMembersMapping; overload;
    ///<summary>
    ///  从 Web 服务方法生成内部类型映射信息。
    ///</summary>
    ///  <param name="elementName">
    ///  从 Web 服务方法生成 XML 元素名称。
    ///</param>
    ///  <param name="ns">
    ///  从 Web 服务方法生成的 XML 元素命名空间。
    ///</param>
    ///  <param name="members">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  对象，其中包含.NET Framework 代码属于 Web 服务方法的实体。
    ///</param>
    ///  <param name="hasWrapperElement"><see langword="true" />
    ///  如果与 Web 服务描述语言 (WSDL) 的消息部分相对应的元素应包含在 SOAP 消息; 中的额外的包装元素否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="rpc"><see langword="true" />
    ///  如果该方法是在远程过程调用;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="openModel"><see langword="true" />
    ///  若要指定生成的架构类型将标有<see langword=" &lt;xs:anyAttribute&gt;" />
    ///  元素; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="access"><see cref="T:System.Xml.Serialization.XmlMappingAccess" />
    ///  值之一。
    ///  默认值为 <see langword="None" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  包含映射。
    ///</returns>
    function ImportMembersMapping(elementName: string; ns: string; members: TArray<DNXmlReflectionMember>; hasWrapperElement: Boolean; rpc: Boolean; openModel: Boolean; access: DNXmlMappingAccess): DNXmlMembersMapping; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlReflectionImporter = class(TDNGenericImport<DNXmlReflectionImporterClass, DNXmlReflectionImporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlReflectionMemberClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8728B6C5-0901-586D-8E72-B14A45774490}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlReflectionMember;

  end;

  ///<summary>
  ///  提供 SOAP Web 服务的.NET Framework Web 服务方法中的代码实体和 Web 服务描述语言 (WSDL) 定义的消息的内容之间的映射。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlReflectionMember')]
  DNXmlReflectionMember = interface(DDN.mscorlib.DNObject)
  ['{601D7460-4E98-3B98-81FC-36655E98A587}']
  { getters & setters } 

    function get_MemberType: DDN.mscorlib.DNType;
    procedure set_MemberType(value: DDN.mscorlib.DNType);
    function get_XmlAttributes: DNXmlAttributes;
    procedure set_XmlAttributes(value: DNXmlAttributes);
    function get_SoapAttributes: DNSoapAttributes;
    procedure set_SoapAttributes(value: DNSoapAttributes);
    function get_MemberName: string;
    procedure set_MemberName(value: string);
    function get_IsReturnValue: Boolean;
    procedure set_IsReturnValue(value: Boolean);
    function get_OverrideIsNullable: Boolean;
    procedure set_OverrideIsNullable(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置表示通过此映射的 Web 服务方法成员代码实体的类型。
    ///</summary>
    ///<returns><see cref="T:System.Type" />
    ///  映射表示的 Web 服务方法成员代码实体。
    ///</returns>
    property MemberType: DDN.mscorlib.DNType read get_MemberType write set_MemberType;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  集合 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  -相关已应用于成员代码实体的属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlAttributes" />
    ///  ，表示已应用于该成员代码的 XML 属性。
    ///</returns>
    property XmlAttributes: DNXmlAttributes read get_XmlAttributes write set_XmlAttributes;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  与 SOAP 相关特性已应用于成员代码实体的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.SoapAttributes" />
    ///  ，包含表示 SOAP 属性应用于的成员的对象。
    ///</returns>
    property SoapAttributes: DNSoapAttributes read get_SoapAttributes write set_SoapAttributes;
    ///<summary>
    ///  获取或设置此映射的 Web 服务方法成员的名称。
    ///</summary>
    ///<returns>
    ///  Web 服务方法的名称。
    ///</returns>
    property MemberName: string read get_MemberName write set_MemberName;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.Serialization.XmlReflectionMember" />
    ///  表示 Web 服务方法返回的值，而不是一个 output 参数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  , 如果成员表示 Web 服务返回的值;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReturnValue: Boolean read get_IsReturnValue write set_IsReturnValue;
    ///<summary>
    ///  获取或设置一个值，该值指示的相应 XML 元素定义的值 isNullable 属性是 <see langword="false" />
    ///  。
    ///</summary>
    ///<returns><see langword="True" />
    ///  若要重写 <see cref="P:System.Xml.Serialization.XmlElementAttribute.IsNullable" />
    ///  属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property OverrideIsNullable: Boolean read get_OverrideIsNullable write set_OverrideIsNullable;
  end;

  TDNXmlReflectionMember = class(TDNGenericImport<DNXmlReflectionMemberClass, DNXmlReflectionMember>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaEnumeratorClass = interface(DDN.mscorlib.DNObjectClass)
  ['{D418A3CC-F8AF-5180-B026-2EEB20120977}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="list"><see cref="T:System.Xml.Serialization.XmlSchemas" />
    ///  对象想要循环访问。
    ///</param>
    {class} function init(list: DNXmlSchemas): DNXmlSchemaEnumerator;

  end;

  ///<summary>
  ///  允许对 <see cref="T:System.Xml.Schema.XmlSchema" />
  ///  对象集合进行迭代。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSchemaEnumerator')]
  DNXmlSchemaEnumerator = interface(DDN.mscorlib.DNObject)
  ['{FA59412D-209D-3972-B5AC-C213B9814A82}']
  { getters & setters } 

    function get_Current: DNXmlSchema;

  { methods } 

    ///<summary>
    ///  释放由 <see cref="T:System.Xml.Serialization.XmlSchemaEnumerator" />
    ///  使用的所有资源。
    ///</summary>
    procedure Dispose;
    ///<summary>
    ///  将枚举数推进到集合中的下一项。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果移动是否成功。否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的当前元素。
    ///</summary>
    ///<returns>
    ///  当前 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  集合中的对象。
    ///</returns>
    property Current: DNXmlSchema read get_Current;
  end;

  TDNXmlSchemaEnumerator = class(TDNGenericImport<DNXmlSchemaEnumeratorClass, DNXmlSchemaEnumerator>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSchemaExporterClass = interface(DDN.mscorlib.DNObjectClass)
  ['{38494AC2-69F7-51D5-B570-804573527920}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSchemaExporter" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="schemas">
    ///  一套 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  获取从类型映射的声明添加到哪个元素的对象。
    ///</param>
    {class} function init(schemas: DNXmlSchemas): DNXmlSchemaExporter;

  end;

  ///<summary>
  ///  填充 <see cref="T:System.Xml.Schema.XmlSchema" />
  ///  具有 XML 架构元素声明中所发现的对象类型映射对象。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSchemaExporter')]
  DNXmlSchemaExporter = interface(DDN.mscorlib.DNObject)
  ['{C1FFC767-8FA6-3E14-BBC0-705E6C078AC2}']
  { methods } 

    ///<summary>
    ///  将.NET Framework 类型的元素声明添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象。
    ///</summary>
    ///  <param name="xmlTypeMapping">
    ///  .NET Framework 类型和 XML 架构元素之间的内部映射。
    ///</param>
    procedure ExportTypeMapping(xmlTypeMapping: DNXmlTypeMapping); overload;
    ///<summary>
    ///  将元素声明添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  为文本的 SOAP 消息定义的单个元素一部分的对象。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  Web 服务描述语言 (WSDL) 消息定义的元素部分的内部.NET Framework 类型映射。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlQualifiedName" />
    ///  表示导出的元素声明的限定的 XML 名称。
    ///</returns>
    function ExportTypeMapping(xmlMembersMapping: DNXmlMembersMapping): DNXmlQualifiedName; overload;
    ///<summary>
    ///  将元素声明添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  为每个文本的 SOAP 消息定义的元素部分。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  Web 服务描述语言 (WSDL) 消息定义的元素部分内部.NET Framework 类型映射。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping); overload;
    ///<summary>
    ///  将元素声明添加到适当 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  为每个元素部分中的文本的 SOAP 消息定义，并指定是否包含封闭的元素。
    ///</summary>
    ///  <param name="xmlMembersMapping">
    ///  .NET Framework 类型和 XML 架构元素之间的内部映射。
    ///</param>
    ///  <param name="exportEnclosingType"><see langword="true" />
    ///  如果要包括; 封闭架构的架构元素否则为 <see langword="false" />
    ///  。
    ///</param>
    procedure ExportMembersMapping(xmlMembersMapping: DNXmlMembersMapping; exportEnclosingType: Boolean); overload;
    ///<summary>
    ///  导出 &lt; 任意 &gt; 元素 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  由指定的命名空间标识的对象。
    ///</summary>
    ///  <param name="ns">
    ///  要向其中添加的 XML 架构文档的命名空间 &lt; 任意 &gt; 元素。
    ///</param>
    ///<returns>
    ///  分配给的任意名称 &lt; 任意 &gt; 元素声明。
    ///</returns>
    function ExportAnyType(ns: string): string; overload;
    ///<summary>
    ///  添加的对象或类型为 SOAP 消息或一个元素声明 <see cref="T:System.Xml.Schema.XmlSchema" />
    ///  对象。
    ///</summary>
    ///  <param name="members"><see cref="T:System.Xml.Serialization.XmlMembersMapping" />
    ///  ，其中包含要导出的映射。
    ///</param>
    ///<returns>
    ///  字符串"任何"追加有一个整数。
    ///</returns>
    function ExportAnyType(members: DNXmlMembersMapping): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSchemaExporter = class(TDNGenericImport<DNXmlSchemaExporterClass, DNXmlSchemaExporter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationGeneratedCodeClass = interface(DDN.mscorlib.DNObjectClass)
  ['{DC76D1D9-DB22-5575-BFBB-C28D81A28A5D}']
  end;

  ///<summary>
  ///  为类的基类的抽象类 <see cref="T:System.Xml.Serialization.XmlSerializationReader" />
  ///  和 <see cref="T:System.Xml.Serialization.XmlSerializationWriter" />
  ///  和包含普遍适用于这两种类型的方法。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializationGeneratedCode')]
  DNXmlSerializationGeneratedCode = interface(DDN.mscorlib.DNObject)
  ['{B8663396-B740-365E-8443-9B06F3FCB665}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationGeneratedCode = class(TDNGenericImport<DNXmlSerializationGeneratedCodeClass, DNXmlSerializationGeneratedCode>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationReaderClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{1A9F3E1B-7E94-549D-893A-DDF9D6E7112A}']
  end;

  ///<summary>
  ///  控制反序列化的 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializationReader')]
  DNXmlSerializationReader = interface(DNXmlSerializationGeneratedCode)
  ['{2793BAB3-2B3F-3703-AE19-2E0377C2123A}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationReader = class(TDNGenericImport<DNXmlSerializationReaderClass, DNXmlSerializationReader>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializationWriterClass = interface(DNXmlSerializationGeneratedCodeClass)
  ['{439D2195-1061-514B-9ABC-AEFAB77FB890}']
  end;

  ///<summary>
  ///  表示一个抽象类，用于控制序列化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializationWriter')]
  DNXmlSerializationWriter = interface(DNXmlSerializationGeneratedCode)
  ['{582828C1-EC93-3AE4-9465-3D06C109DD33}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializationWriter = class(TDNGenericImport<DNXmlSerializationWriterClass, DNXmlSerializationWriter>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerClass = interface(DDN.mscorlib.DNObjectClass)
  ['{9F4A9DB4-304F-51CA-A18A-BE77F9D1321F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以序列化类型的对象的类 <see cref="T:System.Object" />
    ///  XML 文档实例，并反序列化到类型的对象的 XML 文档实例 <see cref="T:System.Object" />
    ///  。
    ///  要序列化每个对象本身可包含的类，此重载将覆盖与其他类的实例。
    ///  此重载还指定了所有的 XML 元素和类以用作 XML 根元素的默认命名空间。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，它扩展或重写中指定的类的行为 <paramref name="type" />
    ///  参数。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  ，它定义了 XML 根元素属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档，将指定类型的对象将 XML 文档反序列化为指定类型的对象。
    ///  它还指定要用作 XML 根元素的类。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  表示的 XML 根元素。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档，将指定类型的对象反序列化 XML 文档化为指定类型的对象。
    ///  如果属性或字段返回一个数组， <paramref name="extraTypes" />
    ///  参数指定可以插入到数组的对象。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; extraTypes: TArray<DDN.mscorlib.DNType>): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档，将指定类型的对象反序列化 XML 文档化为指定类型的对象。
    ///  要序列化每个对象本身可包含的类，此重载可以重写与其他类的实例。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的对象类型。
    ///</param>
    ///  <param name="overrides">
    ///  一个 <see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    ///<summary>
    ///  初始化的实例 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类使用映射到另一种类型的对象。
    ///</summary>
    ///  <param name="xmlTypeMapping"><see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  ，它映射到另一种类型。
    ///</param>
    {class} function init(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档，将指定类型的对象反序列化 XML 文档化为指定类型的对象。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档，将指定类型的对象反序列化 XML 文档化为指定类型的对象。
    ///  指定所有 XML 元素的默认命名空间。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  要使用的所有 XML 元素的默认命名空间。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以序列化类型的对象的类 <see cref="T:System.Object" />
    ///  XML 文档实例，并反序列化到类型的对象的 XML 文档实例 <see cref="T:System.Object" />
    ///  。
    ///  要序列化每个对象本身可包含的类，此重载将覆盖与其他类的实例。
    ///  此重载还指定了所有的 XML 元素和类以用作 XML 根元素的默认命名空间。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，它扩展或重写中指定的类的行为 <paramref name="type" />
    ///  参数。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  ，它定义了 XML 根元素属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    ///  <param name="location">
    ///  类型的位置。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类，它可以序列化的 XML 文档实例，将指定类型的对象反序列化 XML 文档实例保存到指定类型的对象。
    ///  此重载允许您提供可以在序列化或反序列化操作，以及一个默认命名空间的所有 XML 元素，类以用作 XML 根元素、 其位置和所需的访问凭据过程中遇到其他类型。
    ///</summary>
    ///  <param name="type">
    ///  对象的类型指示此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，它扩展或重写中指定的类的行为 <paramref name="type" />
    ///  参数。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  ，它定义了 XML 根元素属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    ///  <param name="location">
    ///  类型的位置。
    ///</param>
    ///  <param name="evidence">
    ///  一个实例 <see cref="T:System.Security.Policy.Evidence" />
    ///  类，其中包含访问类型所需的凭据。
    ///</param>
    {class} function init(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string; evidence: DDN.mscorlib.DNEvidence): DNXmlSerializer; overload;

  { static methods } 

    ///<summary>
    ///  返回的数组 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  对象的数组创建 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  对象。
    ///</summary>
    ///  <param name="mappings">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  ，它映射到另一种类型。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  对象数组。
    ///</returns>
    {class} function FromMappings(mappings: TArray<DNXmlMapping>): TArray<DNXmlSerializer>; overload;
    ///<summary>
    ///  返回包含自定义序列化程序用于序列化或反序列化指定的类型或类型，使用指定的映射的程序集。
    ///</summary>
    ///  <param name="types">
    ///  类型集合。
    ///</param>
    ///  <param name="mappings">
    ///  一套 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  用于转换到另一种类型的对象。
    ///</param>
    ///<returns><see cref="T:System.Reflection.Assembly" />
    ///  对象，它包含序列化程序提供的类型和映射。
    ///</returns>
    {class} function GenerateSerializer(types: TArray<DDN.mscorlib.DNType>; mappings: TArray<DNXmlMapping>): DDN.mscorlib.DNAssembly; overload;
    ///<summary>
    ///  返回包含一个或多个版本的程序集的名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  专门为序列化或反序列化指定的类型创建。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  正在反序列化。
    ///</param>
    ///<returns>
    ///  包含的程序集的名称 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类型。
    ///</returns>
    {class} function GetXmlSerializerAssemblyName(&type: DDN.mscorlib.DNType): string; overload;
    ///<summary>
    ///  返回包含指定的命名空间中的指定类型的序列化程序的程序集的名称。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  您感兴趣。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  类型的命名空间。
    ///</param>
    ///<returns>
    ///  包含特殊生成序列化程序的程序集的名称。
    ///</returns>
    {class} function GetXmlSerializerAssemblyName(&type: DDN.mscorlib.DNType; defaultNamespace: string): string; overload;
    ///<summary>
    ///  返回的实例 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类从指定的映射。
    ///</summary>
    ///  <param name="mappings">
    ///  一个 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  对象数组。
    ///</param>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  反序列化的对象。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类的实例。
    ///</returns>
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; &type: DDN.mscorlib.DNType): TArray<DNXmlSerializer>; overload;
    ///<summary>
    ///  返回的实例 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  到另一种 XML 类型的映射来创建的类。
    ///</summary>
    ///  <param name="mappings">
    ///  一个数组 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  用于映射到另一种类型的对象。
    ///</param>
    ///  <param name="evidence">
    ///  一个实例 <see cref="T:System.Security.Policy.Evidence" />
    ///  类，该类包含主机和程序集向公共语言运行时策略系统提供的数据。
    ///</param>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类的实例。
    ///</returns>
    {class} function FromMappings(mappings: TArray<DNXmlMapping>; evidence: DDN.mscorlib.DNEvidence): TArray<DNXmlSerializer>; overload;
    ///<summary>
    ///  返回包含自定义序列化程序用于序列化或反序列化指定的类型或类型，使用指定的映射和编译器设置和选项的程序集。
    ///</summary>
    ///  <param name="types">
    ///  类型的数组 <see cref="T:System.Type" />
    ///  ，其中包含用于序列化和反序列化数据的对象。
    ///</param>
    ///  <param name="mappings">
    ///  类型的数组 <see cref="T:System.Xml.Serialization.XmlMapping" />
    ///  ，它映射到的类型数据的 XML 数据。
    ///</param>
    ///  <param name="parameters">
    ///  一个实例 <see cref="T:System.CodeDom.Compiler.CompilerParameters" />
    ///  表示的参数来调用编译器时使用的类。
    ///</param>
    ///<returns><see cref="T:System.Reflection.Assembly" />
    ///  包含的特殊版本 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    {class} function GenerateSerializer(types: TArray<DDN.mscorlib.DNType>; mappings: TArray<DNXmlMapping>; parameters: DDN.System.DNCompilerParameters): DDN.mscorlib.DNAssembly; overload;
    ///<summary>
    ///  返回的数组 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  创建从数组类型的对象。
    ///</summary>
    ///  <param name="types">
    ///  一个 <see cref="T:System.Type" />
    ///  对象数组。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  对象数组。
    ///</returns>
    {class} function FromTypes(types: TArray<DDN.mscorlib.DNType>): TArray<DNXmlSerializer>;

  end;

  ///<summary>
  ///  在对象和 XML 文档之间进行序列化和反序列化操作。
  ///<see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  使您能够控制如何将对象编码为 XML。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializer')]
  DNXmlSerializer = interface(DDN.mscorlib.DNObject)
  ['{EBD11B66-2F03-34DA-85F9-E3E1E9B67175}']
  { events } 

    procedure add_UnknownNode(value: DNXmlNodeEventHandler);
    procedure remove_UnknownNode(value: DNXmlNodeEventHandler);
    procedure add_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure remove_UnknownAttribute(value: DNXmlAttributeEventHandler);
    procedure add_UnknownElement(value: DNXmlElementEventHandler);
    procedure remove_UnknownElement(value: DNXmlElementEventHandler);
    procedure add_UnreferencedObject(value: DNUnreferencedObjectEventHandler);
    procedure remove_UnreferencedObject(value: DNUnreferencedObjectEventHandler);

  { methods } 

    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="textWriter"><see cref="T:System.IO.TextWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    procedure Serialize(textWriter: DDN.mscorlib.DNTextWriter; o: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.IO.TextWriter" />
    ///  ，并且引用指定的命名空间。
    ///</summary>
    ///  <param name="textWriter"><see cref="T:System.IO.TextWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///  <param name="namespaces"><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  ，其中包含生成的 XML 文档的命名空间。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(textWriter: DDN.mscorlib.DNTextWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(stream: DDN.mscorlib.DNStream; o: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.IO.Stream" />
    ///  引用指定的命名空间。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///  <param name="namespaces"><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  引用的对象。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(stream: DDN.mscorlib.DNStream; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.Xml.XmlWriter" />
    ///  ，并且引用指定的命名空间。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的 <see cref="T:System.Object" />
    ///  。
    ///</param>
    ///  <param name="namespaces"><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  引用的对象。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces); overload;
    ///<summary>
    ///  序列化指定的对象，并使用指定的文件中写入 XML 文档 <see cref="T:System.Xml.XmlWriter" />
    ///  和引用指定的命名空间和编码样式。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的对象。
    ///</param>
    ///  <param name="namespaces"><see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  引用的对象。
    ///</param>
    ///  <param name="encodingStyle">
    ///  序列化的 XML 编码样式。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string); overload;
    ///<summary>
    ///  包含由指定的 XML 文档反序列化 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  ，其中包含要反序列化的 XML 文档。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  要反序列化。
    ///</returns>
    function Deserialize(stream: DDN.mscorlib.DNStream): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  包含由指定的 XML 文档反序列化 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  ，其中包含要反序列化的 XML 文档。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  要反序列化。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  反序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    function Deserialize(textReader: DDN.mscorlib.DNTextReader): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  包含由指定的 XML 文档反序列化 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  ，其中包含要反序列化的 XML 文档。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  要反序列化。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  反序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    function Deserialize(xmlReader: DNXmlReader): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  包含由指定的 XML 文档反序列化 <see cref="T:System.Xml.XmlReader" />
    ///  ，并允许在反序列化过程中发生的事件的重写。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  ，其中包含要反序列化的文档。
    ///</param>
    ///  <param name="events"><see cref="T:System.Xml.Serialization.XmlDeserializationEvents" />
    ///  类的实例。
    ///</param>
    ///<returns><see cref="T:System.Object" />
    ///  要反序列化。
    ///</returns>
    function Deserialize(xmlReader: DNXmlReader; events: DNXmlDeserializationEvents): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  包含由指定的 XML 文档反序列化 <see cref="T:System.Xml.XmlReader" />
    ///  和编码样式。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  ，其中包含要反序列化的 XML 文档。
    ///</param>
    ///  <param name="encodingStyle">
    ///  序列化的 XML 编码样式。
    ///</param>
    ///<returns>
    ///  反序列化的对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  反序列化期间出错。
    ///  原始的异常是使用 <see cref="P:System.Exception.InnerException" />
    ///  属性。
    ///</exception>
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  获取一个值，该值指示是否此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以反序列化指定的 XML 文档。
    ///</summary>
    ///  <param name="xmlReader"><see cref="T:System.Xml.XmlReader" />
    ///  ，它指向要反序列化的文档。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可以反序列化对象， <see cref="T:System.Xml.XmlReader" />
    ///  点为; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanDeserialize(xmlReader: DNXmlReader): Boolean;
    ///<summary>
    ///  将序列化为指定 <see cref="T:System.Object" />
    ///  ，并使用指定的文件中写入 XML 文档 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，XML 命名空间和编码。
    ///</summary>
    ///  <param name="xmlWriter"><see cref="T:System.Xml.XmlWriter" />
    ///  用于写入 XML 文档。
    ///</param>
    ///  <param name="o">
    ///  要序列化的对象。
    ///</param>
    ///  <param name="namespaces">
    ///  一个实例 <see langword="XmlSerializaerNamespaces" />
    ///  ，其中包含命名空间和前缀来使用。
    ///</param>
    ///  <param name="encodingStyle">
    ///  在文档中使用的编码。
    ///</param>
    ///  <param name="id">
    ///  对于 SOAP 编码消息，用于生成 id 属性的基数。
    ///</param>
    procedure Serialize(xmlWriter: DNXmlWriter; o: DDN.mscorlib.DNObject; namespaces: DNXmlSerializerNamespaces; encodingStyle: string; id: string); overload;
    ///<summary>
    ///  使用包含由指定的数据的对象进行反序列化 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="xmlReader">
    ///  一个实例 <see cref="T:System.Xml.XmlReader" />
    ///  类，用于读取该文档。
    ///</param>
    ///  <param name="encodingStyle">
    ///  使用的编码。
    ///</param>
    ///  <param name="events"><see cref="T:System.Xml.Serialization.XmlDeserializationEvents" />
    ///  类的实例。
    ///</param>
    ///<returns>
    ///  要反序列化对象。
    ///</returns>
    function Deserialize(xmlReader: DNXmlReader; encodingStyle: string; events: DNXmlDeserializationEvents): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializer = class(TDNGenericImport<DNXmlSerializerClass, DNXmlSerializer>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerFactoryClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3AD3F7C9-18B9-569F-B723-8717A92228A3}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSerializerFactory;

  end;

  ///<summary>
  ///  创建类型化的版本的 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  效率更高的序列化。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializerFactory')]
  DNXmlSerializerFactory = interface(DDN.mscorlib.DNObject)
  ['{D07FA41E-7200-3A84-BBAF-DEB64D2BD7BF}']
  { methods } 

    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类可以序列化的 XML 文档实例，将指定类型的对象，反之亦然。
    ///  要序列化每个对象本身可包含的类，此重载可以重写与其他类的实例。
    ///  此重载还指定了 XML 元素，并要用作 XML 根元素的类的默认命名空间。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，其中包含重写默认序列化行为的字段。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  表示的 XML 根元素。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" />
    ///  类，该类用于序列化指定的类型。
    ///  如果属性或字段返回一个数组， <paramref name="extraTypes" />
    ///  参数指定可以插入到数组的对象。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; extraTypes: TArray<DDN.mscorlib.DNType>): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" />
    ///  类使用映射到另一种类型的对象。
    ///</summary>
    ///  <param name="xmlTypeMapping"><see cref="T:System.Xml.Serialization.XmlTypeMapping" />
    ///  ，它映射到另一种类型。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  专门创建映射的类型进行序列化的类。
    ///</returns>
    function CreateSerializer(xmlTypeMapping: DNXmlTypeMapping): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" />
    ///  类，该类用于序列化指定的类型。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  专为进行序列化指定的类型创建的类。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializerFactory" />
    ///  类，该类用于序列化指定的类型和命名空间。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  要使用的所有 XML 元素的默认命名空间。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  专为进行序列化指定的类型创建的类。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; defaultNamespace: string): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类可以序列化的 XML 文档实例，将指定类型的对象，反之亦然。
    ///  要序列化每个对象本身可包含的类，此重载可以重写与其他类的实例。
    ///  此重载还指定了 XML 元素，并要用作 XML 根元素的类的默认命名空间。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  对象的此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，它扩展或将覆盖在类型参数中指定的类的行为。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  ，它定义了 XML 根元素属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    ///  <param name="location">
    ///  指定类型的位置的路径。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类可以序列化的 XML 文档实例，将指定类型的对象，反之亦然。
    ///  要序列化每个对象本身可包含的类，此重载可以重写与其他类的实例。
    ///  此重载还指定了 XML 元素，并要用作 XML 根元素的类的默认命名空间。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Type" />
    ///  对象的此 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  可进行序列化。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，它扩展或将覆盖在类型参数中指定的类的行为。
    ///</param>
    ///  <param name="extraTypes">
    ///  一个 <see cref="T:System.Type" />
    ///  的其他对象类型进行序列化的数组。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  ，它定义了 XML 根元素属性。
    ///</param>
    ///  <param name="defaultNamespace">
    ///  在 XML 文档中的所有 XML 元素的默认命名空间。
    ///</param>
    ///  <param name="location">
    ///  指定类型的位置的路径。
    ///</param>
    ///  <param name="evidence">
    ///  一个实例 <see cref="T:System.Security.Policy.Evidence" />
    ///  类，其中包含访问类型所需的凭据。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides; extraTypes: TArray<DDN.mscorlib.DNType>; root: DNXmlRootAttribute; defaultNamespace: string; location: string; evidence: DDN.mscorlib.DNEvidence): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类可以序列化的 XML 文档，将指定类型的对象，反之亦然。
    ///  指定表示的 XML 根元素的对象。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="root"><see cref="T:System.Xml.Serialization.XmlRootAttribute" />
    ///  表示的 XML 根元素。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; root: DNXmlRootAttribute): DNXmlSerializer; overload;
    ///<summary>
    ///  返回的派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类可以序列化的 XML 文档，将指定类型的对象，反之亦然。
    ///  要序列化每个对象本身可包含的类，此重载可以重写与其他类的实例。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///  <param name="overrides"><see cref="T:System.Xml.Serialization.XmlAttributeOverrides" />
    ///  ，其中包含重写默认序列化行为的字段。
    ///</param>
    ///<returns>
    ///  派生 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  。
    ///</returns>
    function CreateSerializer(&type: DDN.mscorlib.DNType; overrides: DNXmlAttributeOverrides): DNXmlSerializer; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlSerializerFactory = class(TDNGenericImport<DNXmlSerializerFactoryClass, DNXmlSerializerFactory>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{AB600CF3-BA29-5EF2-B169-14E47174AFB6}']
  end;

  ///<summary>
  ///  定义预先生成的类型化序列化程序读取器、 作家和方法。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializerImplementation')]
  DNXmlSerializerImplementation = interface(DDN.mscorlib.DNObject)
  ['{AFB9069E-5170-39EA-9FD6-7DA3B4F519AA}']
  { getters & setters } 

    function get_Reader: DNXmlSerializationReader;
    function get_Writer: DNXmlSerializationWriter;
    function get_ReadMethods: DDN.mscorlib.DNHashtable;
    function get_WriteMethods: DDN.mscorlib.DNHashtable;
    function get_TypedSerializers: DDN.mscorlib.DNHashtable;

  { methods } 

    ///<summary>
    ///  获取一个值，确定是否可以序列化类型。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果可以序列化该类型;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function CanSerialize(&type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  返回指定类型的序列化程序。
    ///</summary>
    ///  <param name="type">
    ///  要序列化的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns>
    ///  一种类型的实例派生自 <see cref="T:System.Xml.Serialization.XmlSerializer" />
    ///  类。
    ///</returns>
    function GetSerializer(&type: DDN.mscorlib.DNType): DNXmlSerializer;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取序列化程序使用的 XML 读取器对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializationReader" />
    ///  用于读取 XML 文档或数据流。
    ///</returns>
    property Reader: DNXmlSerializationReader read get_Reader;
    ///<summary>
    ///  获取序列化程序的 XML 编写器对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Serialization.XmlSerializationWriter" />
    ///  用于写入到 XML 数据的流或文档。
    ///</returns>
    property Writer: DNXmlSerializationWriter read get_Writer;
    ///<summary>
    ///  获取用于读取数据流的方法的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Hashtable" />
    ///  包含的方法。
    ///</returns>
    property ReadMethods: DDN.mscorlib.DNHashtable read get_ReadMethods;
    ///<summary>
    ///  获取用于写入数据流的方法的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Hashtable" />
    ///  包含的方法。
    ///</returns>
    property WriteMethods: DDN.mscorlib.DNHashtable read get_WriteMethods;
    ///<summary>
    ///  获取在程序集中找到的类型化序列化程序的集合。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.Hashtable" />
    ///  ，其中包含类型化序列化程序。
    ///</returns>
    property TypedSerializers: DDN.mscorlib.DNHashtable read get_TypedSerializers;
  end;

  TDNXmlSerializerImplementation = class(TDNGenericImport<DNXmlSerializerImplementationClass, DNXmlSerializerImplementation>) end;

  //-------------namespace: System.Xml.Serialization----------------
  DNXmlSerializerNamespacesClass = interface(DDN.mscorlib.DNObjectClass)
  ['{02202380-E072-5AFC-8069-9984588C88B4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlSerializerNamespaces; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  类，使用指定的实例 <see langword="XmlSerializerNamespaces" />
    ///  包含前缀和命名空间对的集合。
    ///</summary>
    ///  <param name="namespaces">
    ///  一个实例 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  包含命名空间和前缀对。
    ///</param>
    {class} function init(namespaces: DNXmlSerializerNamespaces): DNXmlSerializerNamespaces; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="namespaces">
    ///  一个 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象数组。
    ///</param>
    {class} function init(namespaces: TArray<DNXmlQualifiedName>): DNXmlSerializerNamespaces; overload;

  end;

  ///<summary>
  ///  包含 XML 命名空间和前缀 <see cref="T:System.Xml.Serialization.XmlSerializer" />
  ///  用于生成 XML 文档实例中的限定的名。
  ///</summary>
  [DNTypeName('System.Xml.Serialization.XmlSerializerNamespaces')]
  DNXmlSerializerNamespaces = interface(DDN.mscorlib.DNObject)
  ['{9BD7B184-9480-3EF7-B0D2-DC3B5BB21447}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  前缀和命名空间将对添加到 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  对象。
    ///</summary>
    ///  <param name="prefix">
    ///  与 XML 命名空间关联的前缀。
    ///</param>
    ///  <param name="ns">
    ///  XML 命名空间。
    ///</param>
    procedure Add(prefix: string; ns: string);
    ///<summary>
    ///  获取数组中的前缀和命名空间对 <see cref="T:System.Xml.Serialization.XmlSerializerNamespaces" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个数组 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象，以用作限定 XML 文档中的名称。
    ///</returns>
    function ToArray: TArray<DNXmlQualifiedName>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取集合中的前缀和命名空间对的数目。
    ///</summary>
    ///<returns>
    ///  集合中的前缀和命名空间对的数目。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXmlSerializerNamespaces = class(TDNGenericImport<DNXmlSerializerNamespacesClass, DNXmlSerializerNamespaces>) end;

  //-------------namespace: System.Xml----------------
  DNXmlConvertClass = interface(DDN.mscorlib.DNObjectClass)
  ['{1D7987C8-2E38-54B3-B6C4-5F0A9579B7A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlConvert" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlConvert;

  { static methods } 

    ///<summary>
    ///  将名称转换为有效的 XML 名称。
    ///</summary>
    ///  <param name="name">
    ///  要转换的名称。
    ///</param>
    ///<returns>
    ///  返回名称，任何无效的字符都由转义字符串替换。
    ///</returns>
    {class} function EncodeName(name: string): string;
    ///<summary>
    ///  根据 XML 规范验证该名称是否有效。
    ///</summary>
    ///  <param name="name">
    ///  要编码的名称。
    ///</param>
    ///<returns>
    ///  已编码的名称。
    ///</returns>
    {class} function EncodeNmToken(name: string): string;
    ///<summary>
    ///  将名称转换为有效的 XML 本地名称。
    ///</summary>
    ///  <param name="name">
    ///  要编码的名称。
    ///</param>
    ///<returns>
    ///  已编码的名称。
    ///</returns>
    {class} function EncodeLocalName(name: string): string;
    ///<summary>
    ///  根据 W3C 可扩展标记语言建议验证该名称是否是有效的名称。
    ///</summary>
    ///  <param name="name">
    ///  要验证的名称。
    ///</param>
    ///<returns>
    ///  该名称（如果它是有效的 XML 名称）。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="name" />
    ///  不是有效的 XML 名称。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  是 <see langword="null" />
    ///  ，则为 String.Empty。
    ///</exception>
    {class} function VerifyName(name: string): string;
    ///<summary>
    ///  根据 W3C 可扩展标记语言建议，验证名称是否是有效的 <see langword="NCName" />
    ///  。
    ///<see langword="NCName" />
    ///  是不能包含冒号的名称。
    ///</summary>
    ///  <param name="name">
    ///  要验证的名称。
    ///</param>
    ///<returns>
    ///  该名称（如果它是有效的 NCName）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 String.Empty。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="name" />
    ///  不是有效的非冒号名称。
    ///</exception>
    {class} function VerifyNCName(name: string): string;
    ///<summary>
    ///  根据 W3C 的 XML 架构第 2 部分“数据类型建议”，验证字符串是否为有效 NMTOKEN
    ///</summary>
    ///  <param name="name">
    ///  要验证的字符串。
    ///</param>
    ///<returns>
    ///  名称标记（如果它是有效的 NMTOKEN）。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  字符串不是有效的名称标记。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function VerifyNMTOKEN(name: string): string;
    ///<summary>
    ///  如果字符串参数中的所有字符和代理项对字符都是有效的 XML 字符，则返回传入的字符串；否则将引发 <see langword="XmlException" />
    ///  并提供有关遇到的第一个无效字符的信息。
    ///</summary>
    ///  <param name="content">
    ///  包含要验证的字符的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果字符串参数中的所有字符和代理项对字符都是有效的 XML 字符，则返回传入的字符串；否则将引发 <see langword="XmlException" />
    ///  并提供有关遇到的第一个无效字符的信息。
    ///</returns>
    {class} function VerifyXmlChars(content: string): string;
    ///<summary>
    ///  如果字符串自变量中的所有字符都是有效的公共 ID 字符，则返回传入的字符串实例。
    ///</summary>
    ///  <param name="publicId">
    ///  包含要验证的 ID 的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果自变量中的所有字符都是有效的公共 ID 字符，则返回传入的字符串。
    ///</returns>
    {class} function VerifyPublicId(publicId: string): string;
    ///<summary>
    ///  如果字符串自变量中的所有字符都是有效的空白字符，则返回传入的字符串实例。
    ///</summary>
    ///  <param name="content">
    ///  要验证的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果字符串参数中的所有字符都是有效的空白字符，则返回传入的字符串实例；否则返回 <see langword="null" />
    ///  。
    ///</returns>
    {class} function VerifyWhitespace(content: string): string;
    ///<summary>
    ///  检查传入的字符是否为有效的启动名称字符类型。
    ///</summary>
    ///  <param name="ch">
    ///  要验证的字符。
    ///</param>
    ///<returns>
    ///  如果字符是有效的启动名称字符类型，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsStartNCNameChar(ch: Char): Boolean;
    ///<summary>
    ///  检查传入的字符是否是有效的非冒号字符类型。
    ///</summary>
    ///  <param name="ch">
    ///  要验证是否为非冒号字符的字符。
    ///</param>
    ///<returns>
    ///  如果字符是有效的非冒号字符类型，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsNCNameChar(ch: Char): Boolean;
    ///<summary>
    ///  检查传入的字符是否是有效的 XML 字符。
    ///</summary>
    ///  <param name="ch">
    ///  要验证的字符。
    ///</param>
    ///<returns>
    ///  如果传入的字符是有效的 XML 字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsXmlChar(ch: Char): Boolean;
    ///<summary>
    ///  检查传入的代理项字符对是否是有效的 XML 字符。
    ///</summary>
    ///  <param name="lowChar">
    ///  要验证的代理项字符。
    ///</param>
    ///  <param name="highChar">
    ///  要验证的代理项字符。
    ///</param>
    ///<returns>
    ///  如果传入的字符代理项对是有效的 XML 字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsXmlSurrogatePair(lowChar: Char; highChar: Char): Boolean;
    ///<summary>
    ///  检查传入的字符是否是有效的 XML 空白字符。
    ///</summary>
    ///  <param name="ch">
    ///  要验证的字符。
    ///</param>
    ///<returns>
    ///  如果传入的字符是有效的 XML 空白字符，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    {class} function IsWhitespaceChar(ch: Char): Boolean;
    ///<summary>
    ///  将 <see cref="T:System.Char" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Char" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Char): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Decimal" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Decimal" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNDecimal): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.SByte" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="SByte" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: SByte): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Int16" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Int16" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Int16): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Int32" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Int32" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Int32): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Int64" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Int64" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Int64): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Byte" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Byte" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Byte): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.UInt16" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="UInt16" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: UInt16): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.UInt32" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="UInt32" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: UInt32): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.UInt64" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="UInt64" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: UInt64): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.TimeSpan" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="TimeSpan" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNTimeSpan): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.DateTime" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///  <param name="format">
    ///  定义如何显示转换的字符串的格式结构。
    ///  有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
    ///</param>
    ///<returns>
    ///  指定格式的 <see langword="DateTime" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNDateTime; format: string): string; overload;
    ///<summary>
    ///  将提供的 <see cref="T:System.DateTimeOffset" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</param>
    ///<returns>
    ///  提供的 <see cref="T:System.DateTimeOffset" />
    ///  的 <see cref="T:System.String" />
    ///  表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNDateTimeOffset): string; overload;
    ///<summary>
    ///  将提供的 <see cref="T:System.DateTimeOffset" />
    ///  转换为指定格式的 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</param>
    ///  <param name="format"><paramref name="s" />
    ///  转换为的格式。
    ///  该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。
    ///  （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
    ///</param>
    ///<returns>
    ///  提供的 <see cref="T:System.DateTimeOffset" />
    ///  的指定格式的 <see cref="T:System.String" />
    ///  表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNDateTimeOffset; format: string): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Guid" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Guid" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNGuid): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Char" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  包含所要转换的单个字符的字符串。
    ///</param>
    ///<returns>
    ///  代表单个字符的 <see langword="Char" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  参数的值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  参数将包含多个字符。
    ///</exception>
    {class} function ToChar(s: string): Char;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Decimal" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Decimal" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Decimal.MinValue" />
    ///  或大于 <see cref="F:System.Decimal.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToDecimal(s: string): DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.SByte" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="SByte" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.SByte.MinValue" />
    ///  或大于 <see cref="F:System.SByte.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToSByte(s: string): SByte;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Int16" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Int16" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Int16.MinValue" />
    ///  或大于 <see cref="F:System.Int16.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToInt16(s: string): Int16;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Int32.MinValue" />
    ///  或大于 <see cref="F:System.Int32.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToInt32(s: string): Int32;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Int64.MinValue" />
    ///  或大于 <see cref="F:System.Int64.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToInt64(s: string): Int64;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Byte" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Byte" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示一个小于 <see cref="F:System.Byte.MinValue" />
    ///  或大于 <see cref="F:System.Byte.MaxValue" />
    ///  的数字。
    ///</exception>
    {class} function ToByte(s: string): Byte;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.UInt16" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="UInt16" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示一个小于 <see cref="F:System.UInt16.MinValue" />
    ///  或大于 <see cref="F:System.UInt16.MaxValue" />
    ///  的数字。
    ///</exception>
    {class} function ToUInt16(s: string): UInt16;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.UInt32" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="UInt32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.UInt32.MinValue" />
    ///  或大于 <see cref="F:System.UInt32.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToUInt32(s: string): UInt32;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.UInt64" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="UInt64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.UInt64.MinValue" />
    ///  或大于 <see cref="F:System.UInt64.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToUInt64(s: string): UInt64;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  为空字符串或未采用正确格式。
    ///</exception>
    {class} function ToDateTime(s: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="format">
    ///  该格式结构适用于转换的 <see langword="DateTime" />
    ///  。
    ///  有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
    ///  根据此格式验证字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  或 <paramref name="format" />
    ///  是 String.Empty
    ///  - 或 -
    ///  <paramref name="s" />
    ///  不包含的日期和时间，对应于 <paramref name="format" />
    ///  。
    ///</exception>
    {class} function ToDateTime(s: string; format: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="formats">
    ///  包含格式结构的数组，这些格式结构适用于转换的 <see langword="DateTime" />
    ///  。
    ///  有效格式包括“yyyy-MM-ddTHH:mm:sszzzzzz”及其子集。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  一个元素或 <paramref name="formats" />
    ///  是 String.Empty
    ///  - 或 -
    ///  <paramref name="s" />
    ///  不包含日期和时间对应的元素中的任何 <paramref name="formats" />
    ///  。
    ///</exception>
    {class} function ToDateTime(s: string; formats: TArray<string>): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  将提供的 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///  “注意”   该字符串必须符合 XML DateTime 类型的 W3C 建议的子集。
    ///  更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。
    ///</param>
    ///<returns>
    ///  与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  传递给此方法的参数是允许的值的范围之外。
    ///  有关允许的值的信息，请参阅 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</exception><exception cref="T:System.FormatException">
    ///  参数传递给此方法不符合 XML dateTime 类型的 W3C 建议的子集。
    ///  有关详细信息请参阅 http://www.w3.org/TR/xmlschema-2/#dateTime。
    ///</exception>
    {class} function ToDateTimeOffset(s: string): DDN.mscorlib.DNDateTimeOffset; overload;
    ///<summary>
    ///  将提供的 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="format">
    ///  从中转换 <paramref name="s" />
    ///  的格式。
    ///  该格式参数可以是 XML DateTime 类型的 W3C 建议的任何子集。
    ///  （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
    ///  根据此格式验证字符串 <paramref name="s" />
    ///  。
    ///</param>
    ///<returns>
    ///  与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  或 <paramref name="format" />
    ///  为一个空字符串或不在指定的格式。
    ///</exception>
    {class} function ToDateTimeOffset(s: string; format: string): DDN.mscorlib.DNDateTimeOffset; overload;
    ///<summary>
    ///  将提供的 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///  <param name="formats">
    ///  可以转换 <paramref name="s" />
    ///  的格式数组。
    ///  <paramref name="formats" />
    ///  中的每个格式均可以是 XML DateTime 类型的 W3C 建议的任何子集。
    ///  （有关更多信息，请参见 http://www.w3.org/TR/xmlschema-2/#dateTime。）
    ///  将根据这些格式中的一个格式验证字符串 <paramref name="s" />
    ///  。
    ///</param>
    ///<returns>
    ///  与提供的字符串等效的 <see cref="T:System.DateTimeOffset" />
    ///  。
    ///</returns>
    {class} function ToDateTimeOffset(s: string; formats: TArray<string>): DDN.mscorlib.DNDateTimeOffset; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Guid" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Guid" />
    ///  。
    ///</returns>
    {class} function ToGuid(s: string): DDN.mscorlib.DNGuid;
    ///<summary>
    ///  根据 W3C XML 架构第 2 部分“数据类型”建议，验证该字符串是否为有效标记。
    ///</summary>
    ///  <param name="token">
    ///  要验证的字符串值。
    ///</param>
    ///<returns>
    ///  标记（如果它是有效的标记）。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  字符串值不是有效的令牌。
    ///</exception>
    {class} function VerifyTOKEN(token: string): string;
    ///<summary>
    ///  如果参数中的字符是有效的公共 ID 字符，则返回传入的字符实例；否则返回 <see langword="null" />
    ///  。
    ///</summary>
    ///  <param name="ch">
    ///  要验证的 <see cref="T:System.Char" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  如果字符是有效的公共 ID 字符，则返回传入的字符；否则返回 <see langword="null" />
    ///  。
    ///</returns>
    {class} function IsPublicIdChar(ch: Char): Boolean;
    ///<summary>
    ///  将 <see cref="T:System.Single" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Single" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Single): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.Double" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Double" />
    ///  的字符串表示形式。
    ///</returns>
    {class} function ToString(value: Double): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.DateTime" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="DateTime" />
    ///  的字符串表示形式，格式为 yyyy-MM-ddTHH:mm:ss，其中“T”是常数文本。
    ///</returns>
    {class} function ToString(value: DDN.mscorlib.DNDateTime): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Single" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Single" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Single.MinValue" />
    ///  或大于 <see cref="F:System.Single.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToSingle(s: string): Single;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.TimeSpan" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///  字符串格式必须符合 W3C XML 架构第 2 部分：持续时间数据类型建议。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="TimeSpan" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException"><paramref name="s" />
    ///  不是正确的格式来表示 <see langword="TimeSpan" />
    ///  值。
    ///</exception>
    {class} function ToTimeSpan(s: string): DDN.mscorlib.DNTimeSpan;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />
    ///  将 <see cref="T:System.String" />
    ///  转换为 <see cref="T:System.DateTime" />
    ///</summary>
    ///  <param name="s">
    ///  要转换的 <see cref="T:System.String" />
    ///  值。
    ///</param>
    ///  <param name="dateTimeOption"><see cref="T:System.Xml.XmlDateTimeSerializationMode" />
    ///  值之一，用于指定日期是应该转换为本地时间，还是应该保留为协调通用时间 (UTC)（如果它为 UTC 日期）。
    ///</param>
    ///<returns><see cref="T:System.DateTime" />
    ///  的等效 <see cref="T:System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NullReferenceException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="dateTimeOption" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  为空字符串或不是有效格式。
    ///</exception>
    {class} function ToDateTime(s: string; dateTimeOption: DNXmlDateTimeSerializationMode): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  对名称进行解码。
    ///  该方法完成 <see cref="M:System.Xml.XmlConvert.EncodeName(System.String)" />
    ///  和 <see cref="M:System.Xml.XmlConvert.EncodeLocalName(System.String)" />
    ///  方法的反向操作。
    ///</summary>
    ///  <param name="name">
    ///  要转换的名称。
    ///</param>
    ///<returns>
    ///  解码的名称。
    ///</returns>
    {class} function DecodeName(name: string): string;
    ///<summary>
    ///  将 <see cref="T:System.Boolean" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的值。
    ///</param>
    ///<returns><see langword="Boolean" />
    ///  的字符串表示形式，即“true”或“false”。
    ///</returns>
    {class} function ToString(value: Boolean): string; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlDateTimeSerializationMode" />
    ///  将 <see cref="T:System.DateTime" />
    ///  转换为 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="value">
    ///  要转换的 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///  <param name="dateTimeOption"><see cref="T:System.Xml.XmlDateTimeSerializationMode" />
    ///  值之一，用于指定如何处理 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///<returns><see cref="T:System.String" />
    ///  的等效 <see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="dateTimeOption" />
    ///  值无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  或 <paramref name="dateTimeOption" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function ToString(value: DDN.mscorlib.DNDateTime; dateTimeOption: DNXmlDateTimeSerializationMode): string; overload;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  一个 <see langword="Boolean" />
    ///  值，即 <see langword="true" />
    ///  或 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  并不表示 <see langword="Boolean" />
    ///  值。
    ///</exception>
    {class} function ToBoolean(s: string): Boolean;
    ///<summary>
    ///  将 <see cref="T:System.String" />
    ///  转换为等效的 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///  <param name="s">
    ///  要转换的字符串。
    ///</param>
    ///<returns>
    ///  与该字符串等效的 <see langword="Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="s" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.FormatException"><paramref name="s" />
    ///  的格式不正确。
    ///</exception><exception cref="T:System.OverflowException"><paramref name="s" />
    ///  表示的数字小于 <see cref="F:System.Double.MinValue" />
    ///  或大于 <see cref="F:System.Double.MaxValue" />
    ///  。
    ///</exception>
    {class} function ToDouble(s: string): Double;

  end;

  ///<summary>
  ///  对 XML 名称进行编码和解码，并提供方法在公共语言运行时类型和 XML 架构定义语言 (XSD) 类型之间进行转换。
  ///  转换数据类型时，返回的值是独立于区域设置的。
  ///</summary>
  [DNTypeName('System.Xml.XmlConvert')]
  DNXmlConvert = interface(DDN.mscorlib.DNObject)
  ['{B3F984D5-ADCA-3752-990B-4347693F5B74}']
  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string; overload;

  end;

  TDNXmlConvert = class(TDNGenericImport<DNXmlConvertClass, DNXmlConvert>) end;

  //-------------namespace: System.Xml----------------
  DNXmlImplementationClass = interface(DDN.mscorlib.DNObjectClass)
  ['{616B9815-E140-5278-AE6F-7D21CF454BB0}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlImplementation" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlImplementation; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XmlImplementation" />
    ///  类 <see cref="T:System.Xml.XmlNameTable" />
    ///  指定。
    ///</summary>
    ///  <param name="nt">
    ///  一个 <see cref="T:System.Xml.XmlNameTable" />
    ///  对象。
    ///</param>
    {class} function init(nt: DNXmlNameTable): DNXmlImplementation; overload;

  end;

  ///<summary>
  ///  定义一组的上下文 <see cref="T:System.Xml.XmlDocument" />
  ///  对象。
  ///</summary>
  [DNTypeName('System.Xml.XmlImplementation')]
  DNXmlImplementation = interface(DDN.mscorlib.DNObject)
  ['{B742D53C-E509-34DC-BAD5-2B37A1AFC661}']
  { methods } 

    ///<summary>
    ///  创建一个新的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see langword="XmlDocument" />
    ///  对象。
    ///</returns>
    function CreateDocument: DNXmlDocument;
    ///<summary>
    ///  测试是否有文档对象模型 (DOM) 实现所实现的特定功能。
    ///</summary>
    ///  <param name="strFeature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="strVersion">
    ///  这是要测试的程序包名称的版本号。
    ///  如果未指定版本 (<see langword="null" />
    ///  )，则支持该功能的任何版本会导致该方法以返回 <see langword="true" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表显示了导致的组合 <see langword="HasFeature" />
    ///  返回 <see langword="true" />
    ///  。
    ///  strFeature
    ///  strVersion
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function HasFeature(strFeature: string; strVersion: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlImplementation = class(TDNGenericImport<DNXmlImplementationClass, DNXmlImplementation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamedNodeMapClass = interface(DNObjectClass)
  ['{B74D75C0-1E64-5FD7-9BB2-52B25E3AB6A3}']
  end;

  ///<summary>
  ///  表示可以按名称或索引访问的节点的集合。
  ///</summary>
  [DNTypeName('System.Xml.XmlNamedNodeMap')]
  DNXmlNamedNodeMap = interface(DDN.mscorlib.DNIEnumerable)
  ['{291396F7-2B76-36E2-8E89-0C2BAB420F83}']
  { getters & setters } 

    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  检索 <see cref="T:System.Xml.XmlNode" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="name">
    ///  要检索的节点的限定的名称。
    ///  它针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  具有指定名称或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  添加 <see cref="T:System.Xml.XmlNode" />
    ///  使用其 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性。
    ///</summary>
    ///  <param name="node"><see langword="XmlNode" />
    ///  将存储在 <see langword="XmlNamedNodeMap" />
    ///  。
    ///  如果具有该名称的节点已存在于映射，则一个新替换它。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="node" />
    ///  将取代现有节点具有相同名称，旧的节点是返回; 否则为 <see langword="null" />
    ///  返回。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="node" />
    ///  创建来自不同 <see cref="T:System.Xml.XmlDocument" />
    ///  比创建 <see langword="XmlNamedNodeMap" />
    ///  ; 或 <see langword="XmlNamedNodeMap" />
    ///  是只读的。
    ///</exception>
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  删除从节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要移除的节点的限定的名称。
    ///  名称匹配对 <see cref="P:System.Xml.XmlNode.Name" />
    ///  匹配节点的属性。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  删除从此 <see langword="XmlNamedNodeMap" />
    ///  或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  检索在指定索引处的节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要从检索的节点的索引位置 <see langword="XmlNamedNodeMap" />
    ///  。
    ///  索引是从零开始;因此，第一个节点的索引为 0，最后一个节点的索引为 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  -1。
    ///</param>
    ///<returns>
    ///  位于指定索引处的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///  如果 <paramref name="index" />
    ///  小于 0 或大于或等于 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  属性， <see langword="null" />
    ///  返回。
    ///</returns>
    function Item(index: Int32): DNXmlNode;
    ///<summary>
    ///  检索与匹配的节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要检索的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间统一资源标识符 (URI) 的节点来检索。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  具有匹配的本地名称和命名空间 URI 或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中删除具有匹配节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要移除的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间节点的 URI 中删除。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  删除或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中的节点集合上进行"foreach"样式迭代提供支持 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  枚举器对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取中的节点数 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXmlNamedNodeMap = class(TDNGenericImport<DNXmlNamedNodeMapClass, DNXmlNamedNodeMap>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeCollectionClass = interface(DNXmlNamedNodeMapClass)
  ['{7D8D432B-42C5-5DD1-81AC-C7E940F30448}']
  end;

  ///<summary>
  ///  表示可以按名称或索引访问的属性的集合。
  ///</summary>
  [DNTypeName('System.Xml.XmlAttributeCollection')]
  DNXmlAttributeCollection = interface(DNXmlNamedNodeMap)
  ['{AFF15495-0AAB-3C7F-A744-CB752611089E}']
  { getters & setters } 

    function get_ItemOf(i: Int32): DNXmlAttribute; overload;
    function get_ItemOf(name: string): DNXmlAttribute; overload;
    function get_ItemOf(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  添加 <see cref="T:System.Xml.XmlNode" />
    ///  使用其 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性
    ///</summary>
    ///  <param name="node">
    ///  要在此集合中存储的属性节点。
    ///  以后将使用节点的名称可以访问该节点。
    ///  如果已在集合中存在具有该名称的节点，则替换它一个新;否则，该节点被追加到集合的末尾。
    ///</param>
    ///<returns>
    ///  如果 <paramref name="node" />
    ///  替换现有节点具有相同名称，旧节点则返回; 否则为返回添加的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="node" />
    ///  创建来自不同 <see cref="T:System.Xml.XmlDocument" />
    ///  比创建此集合。
    ///  这 <see langword="XmlAttributeCollection" />
    ///  是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="node" />
    ///  是 <see cref="T:System.Xml.XmlAttribute" />
    ///  已的另一个属性 <see cref="T:System.Xml.XmlElement" />
    ///  对象。
    ///  若要重新使用在其他元素中的属性，则必须将克隆 <see langword="XmlAttribute" />
    ///  对象想要重新使用。
    ///</exception>
    function SetNamedItem(node: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的特性插入集合中的第一个节点。
    ///</summary>
    ///  <param name="node">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  添加到集合。
    ///</returns>
    function Prepend(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  将集合中的最后一个节点作为插入指定的属性。
    ///</summary>
    ///  <param name="node">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要追加到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="node" />
    ///  已创建从不同于创建此集合的文档。
    ///</exception>
    function Append(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  将插入指定的属性之前指定的引用属性。
    ///</summary>
    ///  <param name="newNode">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///  <param name="refNode"><see cref="T:System.Xml.XmlAttribute" />
    ///  ，它是引用属性。
    ///  <paramref name="newNode" />
    ///  前后放置 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要插入到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newNode" />
    ///  从文档不同于创建此集合创建。
    ///  或者 <paramref name="refNode" />
    ///  不是此集合的成员。
    ///</exception>
    function InsertBefore(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  在指定的引用属性之后立即插入指定的特性。
    ///</summary>
    ///  <param name="newNode">
    ///  要插入的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///  <param name="refNode"><see cref="T:System.Xml.XmlAttribute" />
    ///  ，它是引用属性。
    ///  <paramref name="newNode" />
    ///  放置后 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns><see langword="XmlAttribute" />
    ///  要插入到集合。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newNode" />
    ///  从文档不同于创建此集合创建。
    ///  或者 <paramref name="refNode" />
    ///  不是此集合的成员。
    ///</exception>
    function InsertAfter(newNode: DNXmlAttribute; refNode: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  从集合中移除指定的属性。
    ///</summary>
    ///  <param name="node">
    ///  要移除的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</param>
    ///<returns>
    ///  已移除的节点或 <see langword="null" />
    ///  如果它找不到集合中。
    ///</returns>
    function Remove(node: DNXmlAttribute): DNXmlAttribute;
    ///<summary>
    ///  删除指定的索引从集合相对应的属性。
    ///</summary>
    ///  <param name="i">
    ///  要删除的节点的索引。
    ///  第一个节点的索引为 0。
    ///</param>
    ///<returns>
    ///  返回 <see langword="null" />
    ///  是否存在任何属性中指定索引处。
    ///</returns>
    function RemoveAt(i: Int32): DNXmlAttribute;
    ///<summary>
    ///  移除集合中的所有属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  将所有复制 <see cref="T:System.Xml.XmlAttribute" />
    ///  到给定数组此集合中的对象。
    ///</summary>
    ///  <param name="array">
    ///  一个数组，它是从该集合复制的对象的目标。
    ///</param>
    ///  <param name="index">
    ///  复制开始处的数组中的索引。
    ///</param>
    procedure CopyTo(&array: TArray<DNXmlAttribute>; index: Int32);
    ///<summary>
    ///  检索 <see cref="T:System.Xml.XmlNode" />
    ///  由名称指定。
    ///</summary>
    ///  <param name="name">
    ///  要检索的节点的限定的名称。
    ///  它针对匹配节点的 <see cref="P:System.Xml.XmlNode.Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  具有指定名称或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  删除从节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要移除的节点的限定的名称。
    ///  名称匹配对 <see cref="P:System.Xml.XmlNode.Name" />
    ///  匹配节点的属性。
    ///</param>
    ///<returns><see langword="XmlNode" />
    ///  删除从此 <see langword="XmlNamedNodeMap" />
    ///  或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(name: string): DNXmlNode; overload;
    ///<summary>
    ///  检索在指定索引处的节点 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///  <param name="index">
    ///  要从检索的节点的索引位置 <see langword="XmlNamedNodeMap" />
    ///  。
    ///  索引是从零开始;因此，第一个节点的索引为 0，最后一个节点的索引为 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  -1。
    ///</param>
    ///<returns>
    ///  位于指定索引处的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///  如果 <paramref name="index" />
    ///  小于 0 或大于或等于 <see cref="P:System.Xml.XmlNamedNodeMap.Count" />
    ///  属性， <see langword="null" />
    ///  返回。
    ///</returns>
    function Item(index: Int32): DNXmlNode;
    ///<summary>
    ///  检索与匹配的节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要检索的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间统一资源标识符 (URI) 的节点来检索。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  具有匹配的本地名称和命名空间 URI 或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function GetNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中删除具有匹配节点 <see cref="P:System.Xml.XmlNode.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  要移除的节点本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间节点的 URI 中删除。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  删除或 <see langword="null" />
    ///  如果找不到匹配的节点。
    ///</returns>
    function RemoveNamedItem(localName: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  中的节点集合上进行"foreach"样式迭代提供支持 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  枚举器对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    property ItemOf[i: Int32]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[name: string]: DNXmlAttribute read get_ItemOf; default;
    property ItemOf[localName: string; namespaceURI: string]: DNXmlAttribute read get_ItemOf; default;
    ///<summary>
    ///  获取中的节点数 <see langword="XmlNamedNodeMap" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点数。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXmlAttributeCollection = class(TDNGenericImport<DNXmlAttributeCollectionClass, DNXmlAttributeCollection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNamespaceManagerClass = interface(DNObjectClass)
  ['{B8483CCF-B8DD-5A89-B0AB-9F9015775557}']
  { constructors } 

    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nameTable">
    ///  要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><see langword="null" />
    ///  传递给构造函数
    ///</exception>
    {class} function init(nameTable: DNXmlNameTable): DNXmlNamespaceManager;

  end;

  ///<summary>
  ///  解析集合的命名空间、向集合添加命名空间和从集合中移除命名空间，以及提供对这些命名空间的范围管理。
  ///</summary>
  [DNTypeName('System.Xml.XmlNamespaceManager')]
  DNXmlNamespaceManager = interface(DNIXmlNamespaceResolver)
  ['{C5338A3B-B457-3C22-9CD2-4786DF44090F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    ///<summary>
    ///  将命名空间范围推送到堆栈上。
    ///</summary>
    procedure PushScope;
    ///<summary>
    ///  将命名空间范围弹出堆栈。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有留在堆栈上的命名空间范围， <see langword="false" />
    ///  如果有多个要弹出的命名空间。
    ///</returns>
    function PopScope: Boolean;
    ///<summary>
    ///  为给定的前缀移除给定的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  命名空间的前缀
    ///</param>
    ///  <param name="uri">
    ///  要为给定的前缀移除的命名空间。
    ///  所移除的命名空间来自当前的命名空间范围。
    ///  忽略当前范围以外的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveNamespace(prefix: string; uri: string);
    ///<summary>
    ///  获取指定前缀的命名空间 URI。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递 String.Empty。
    ///</param>
    ///<returns>
    ///  返回的命名空间 URI 为 <paramref name="prefix" />
    ///  或 <see langword="null" />
    ///  如果没有映射的命名空间。
    ///  返回的字符串是原子化的。
    ///  原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  类。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  查找为给定的命名空间 URI 声明的前缀。
    ///</summary>
    ///  <param name="uri">
    ///  要为前缀解析的命名空间。
    ///</param>
    ///<returns>
    ///  匹配的前缀。
    ///  如果没有映射的前缀，则方法返回 String.Empty。
    ///  如果提供 null 值，则 <see langword="null" />
    ///  返回。
    ///</returns>
    function LookupPrefix(uri: string): string;
    ///<summary>
    ///  获取一个值，该值指示所提供的前缀是否具有为当前推送的范围定义的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  你想要查找的命名空间前缀。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果没有定义; 的命名空间，否则为<see langword="false" />
    ///  。
    ///</returns>
    function HasNamespace(prefix: string): Boolean;
    ///<summary>
    ///  将给定的命名空间添加到集合。
    ///</summary>
    ///  <param name="prefix">
    ///  与要添加的命名空间关联的前缀。
    ///  使用 String.Empty 来添加默认命名空间。
    ///  注意如果 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  将使用用于解析 XML 路径语言 (XPath) 表达式中的命名空间，则必须指定前缀。
    ///  如果 XPath 表达式不包含前缀，则假定命名空间统一资源标识符 (URI) 为空命名空间。
    ///  有关 XPath 表达式的详细信息和 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，请参阅 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" />
    ///  和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
    ///  方法。
    ///</param>
    ///  <param name="uri">
    ///  要添加的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值为 <paramref name="prefix" />
    ///  是"xml"或"xmlns"。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  值为 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddNamespace(prefix: string; uri: string);
    ///<summary>
    ///  返回一个枚举器，用于循环访问中的命名空间 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  包含存储的前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取被可用于枚举当前范围内的命名空间的前缀键控的命名空间名称的集合。
    ///</summary>
    ///  <param name="scope">
    ///  一个指定要返回的命名空间节点的类型的枚举值。
    ///</param>
    ///<returns>
    ///  当前范围中的命名空间和前缀对的集合。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  与此对象关联。
    ///</summary>
    ///<returns>
    ///  此对象使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取默认命名空间的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  返回默认命名空间的命名空间 URI；如果没有默认命名空间，则返回 String.Empty。
    ///</returns>
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXmlNamespaceManager = class(TDNGenericImport<DNXmlNamespaceManagerClass, DNXmlNamespaceManager>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltContextClass = interface(DNXmlNamespaceManagerClass)
  ['{E4CAE55E-6F3A-5F42-8DAA-CBED5B921C26}']
  end;

  ///<summary>
  ///  封装可扩展样式表语言转换 (XSLT) 处理器允许 XML 路径语言 (XPath) 若要解决的函数、 参数和命名空间中的 XPath 表达式的当前执行上下文。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltContext')]
  DNXsltContext = interface(DNXmlNamespaceManager)
  ['{59A37C60-EAB8-31A2-BF26-C2C67285426B}']
  { getters & setters } 

    function get_Whitespace: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_DefaultNamespace: string;

  { methods } 

    ///<summary>
    ///  当在派生类中重写时解析变量引用并返回 <see cref="T:System.Xml.Xsl.IXsltContextVariable" />
    ///  表示该变量。
    ///</summary>
    ///  <param name="prefix">
    ///  在 XPath 表达式中显示的变量的前缀。
    ///</param>
    ///  <param name="name">
    ///  变量名。
    ///</param>
    ///<returns><see cref="T:System.Xml.Xsl.IXsltContextVariable" />
    ///  表示该变量在运行时。
    ///</returns>
    function ResolveVariable(prefix: string; name: string): DNIXsltContextVariable;
    ///<summary>
    ///  当在派生类中重写时解析函数引用并返回 <see cref="T:System.Xml.Xsl.IXsltContextFunction" />
    ///  表示的函数。
    ///<see cref="T:System.Xml.Xsl.IXsltContextFunction" />
    ///  在执行时使用来获取该函数的返回值。
    ///</summary>
    ///  <param name="prefix">
    ///  在 XPath 表达式中显示的函数的前缀。
    ///</param>
    ///  <param name="name">
    ///  函数名。
    ///</param>
    ///  <param name="ArgTypes">
    ///  正在被解析的函数的自变量类型的数组。
    ///  这样您就可以在同名称的方法（例如，重载方法）中进行选择。
    ///</param>
    ///<returns><see cref="T:System.Xml.Xsl.IXsltContextFunction" />
    ///  表示的函数。
    ///</returns>
    function ResolveFunction(prefix: string; name: string; ArgTypes: TArray<DNXPathResultType>): DNIXsltContextFunction;
    ///<summary>
    ///  当在派生类中重写，评估是否要保留空白节点还是针对给定上下文将它们抽出。
    ///</summary>
    ///  <param name="node">
    ///  在当前上下文中要保留或抽出的空白节点。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果空白区域将被保留或 <see langword="false" />
    ///  空白区域则被去除。
    ///</returns>
    function PreserveWhitespace(node: DNXPathNavigator): Boolean;
    ///<summary>
    ///  当在派生类中重写，会比较基统一资源标识符 (Uri) 的两个文档根据 XSLT 处理器加载文档的顺序 (即， <see cref="T:System.Xml.Xsl.XslTransform" />
    ///  类)。
    ///</summary>
    ///  <param name="baseUri">
    ///  要比较的第一个文档的基 URI。
    ///</param>
    ///  <param name="nextbaseUri">
    ///  要比较的第二个文档的基 URI。
    ///</param>
    ///<returns>
    ///  说明两个基 Uri 的相对顺序的整数值︰ <see langword="-" />
    ///  1 如果 <paramref name="baseUri" />
    ///  之前发生 <paramref name="nextbaseUri" />
    ///  ; 如果两个基 Uri 是相同的; 则为 0 和 1 如果 <paramref name="baseUri" />
    ///  后就会出现 <paramref name="nextbaseUri" />
    ///  。
    ///</returns>
    function CompareDocument(baseUri: string; nextbaseUri: string): Int32;
    ///<summary>
    ///  将命名空间范围推送到堆栈上。
    ///</summary>
    procedure PushScope;
    ///<summary>
    ///  将命名空间范围弹出堆栈。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果有留在堆栈上的命名空间范围， <see langword="false" />
    ///  如果有多个要弹出的命名空间。
    ///</returns>
    function PopScope: Boolean;
    ///<summary>
    ///  为给定的前缀移除给定的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  命名空间的前缀
    ///</param>
    ///  <param name="uri">
    ///  要为给定的前缀移除的命名空间。
    ///  所移除的命名空间来自当前的命名空间范围。
    ///  忽略当前范围以外的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure RemoveNamespace(prefix: string; uri: string);
    ///<summary>
    ///  获取指定前缀的命名空间 URI。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递 String.Empty。
    ///</param>
    ///<returns>
    ///  返回的命名空间 URI 为 <paramref name="prefix" />
    ///  或 <see langword="null" />
    ///  如果没有映射的命名空间。
    ///  返回的字符串是原子化的。
    ///  原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  类。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  查找为给定的命名空间 URI 声明的前缀。
    ///</summary>
    ///  <param name="uri">
    ///  要为前缀解析的命名空间。
    ///</param>
    ///<returns>
    ///  匹配的前缀。
    ///  如果没有映射的前缀，则方法返回 String.Empty。
    ///  如果提供 null 值，则 <see langword="null" />
    ///  返回。
    ///</returns>
    function LookupPrefix(uri: string): string;
    ///<summary>
    ///  获取一个值，该值指示所提供的前缀是否具有为当前推送的范围定义的命名空间。
    ///</summary>
    ///  <param name="prefix">
    ///  你想要查找的命名空间前缀。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果没有定义; 的命名空间，否则为<see langword="false" />
    ///  。
    ///</returns>
    function HasNamespace(prefix: string): Boolean;
    ///<summary>
    ///  将给定的命名空间添加到集合。
    ///</summary>
    ///  <param name="prefix">
    ///  与要添加的命名空间关联的前缀。
    ///  使用 String.Empty 来添加默认命名空间。
    ///  注意如果 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  将使用用于解析 XML 路径语言 (XPath) 表达式中的命名空间，则必须指定前缀。
    ///  如果 XPath 表达式不包含前缀，则假定命名空间统一资源标识符 (URI) 为空命名空间。
    ///  有关 XPath 表达式的详细信息和 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，请参阅 <see cref="M:System.Xml.XmlNode.SelectNodes(System.String)" />
    ///  和 <see cref="M:System.Xml.XPath.XPathExpression.SetContext(System.Xml.XmlNamespaceManager)" />
    ///  方法。
    ///</param>
    ///  <param name="uri">
    ///  要添加的命名空间。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  值为 <paramref name="prefix" />
    ///  是"xml"或"xmlns"。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  值为 <paramref name="prefix" />
    ///  或 <paramref name="uri" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    procedure AddNamespace(prefix: string; uri: string);
    ///<summary>
    ///  返回一个枚举器，用于循环访问中的命名空间 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  包含存储的前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  获取被可用于枚举当前范围内的命名空间的前缀键控的命名空间名称的集合。
    ///</summary>
    ///  <param name="scope">
    ///  一个指定要返回的命名空间节点的类型的枚举值。
    ///</param>
    ///<returns>
    ///  当前范围中的命名空间和前缀对的集合。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取一个值，该值指示是否在输出中包含空白节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要检查包含在输出; 与源文档中的空白节点 <see langword="false" />
    ///  不评估空白节点。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Whitespace: Boolean read get_Whitespace;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  与此对象关联。
    ///</summary>
    ///<returns>
    ///  此对象使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取默认命名空间的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  返回默认命名空间的命名空间 URI；如果没有默认命名空间，则返回 String.Empty。
    ///</returns>
    property DefaultNamespace: string read get_DefaultNamespace;
  end;

  TDNXsltContext = class(TDNGenericImport<DNXsltContextClass, DNXsltContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNameTableClass = interface(DDN.mscorlib.DNObjectClass)
  ['{77150595-D80A-50B6-8E01-202CC752528A}']
  end;

  ///<summary>
  ///  原子化字符串对象表。
  ///</summary>
  [DNTypeName('System.Xml.XmlNameTable')]
  DNXmlNameTable = interface(DDN.mscorlib.DNObject)
  ['{14B8B8DB-2F35-39C8-A2F8-9BC1E9834472}']
  { methods } 

    ///<summary>
    ///  当在派生类中重写时获取包含指定的范围内的给定数组中的字符相同的字符的原子化的字符串。
    ///</summary>
    ///  <param name="array">
    ///  包含要查找的名称的字符数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中指定名称的第一个字符从零开始的索引。
    ///</param>
    ///  <param name="length">
    ///  在名称中的字符数。
    ///</param>
    ///<returns>
    ///  原子化的字符串或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///  如果 <paramref name="length" />
    ///  为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="offset" />
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  &gt;= <paramref name="array" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="length" />
    ///  &gt; <paramref name="array" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="length" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" />
    ///  &lt; 0.
    ///</exception>
    function Get(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写时获取包含与指定的字符串相同的值的原子化的字符串。
    ///</summary>
    ///  <param name="array">
    ///  要查找的名称。
    ///</param>
    ///<returns>
    ///  原子化的字符串或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Get(&array: string): string; overload;
    ///<summary>
    ///  当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  包含要添加的名称的字符数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中指定名称的第一个字符的从零开始索引。
    ///</param>
    ///  <param name="length">
    ///  在名称中的字符数。
    ///</param>
    ///<returns>
    ///  新原子化的字符串或现有如果已经存在。
    ///  如果长度为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="offset" />
    ///  - 或 -
    ///  <paramref name="offset" />
    ///  &gt;= <paramref name="array" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="length" />
    ///  &gt; <paramref name="array" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="length" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" />
    ///  &lt; 0.
    ///</exception>
    function Add(&array: TArray<Char>; offset: Int32; length: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写，将指定的字符串原子化并将其添加到 <see langword="XmlNameTable" />
    ///  。
    ///</summary>
    ///  <param name="array">
    ///  要添加的名称。
    ///</param>
    ///<returns>
    ///  新原子化的字符串或现有如果已经存在。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Add(&array: string): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXmlNameTable = class(TDNGenericImport<DNXmlNameTableClass, DNXmlNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNNameTableClass = interface(DNXmlNameTableClass)
  ['{E8743B09-46E8-5553-8DFA-1124B6A93420}']
  { constructors } 

    ///<summary>
    ///  初始化 <see langword="NameTable" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNNameTable;

  end;

  ///<summary>
  ///  实现单线程 <see cref="T:System.Xml.XmlNameTable" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.NameTable')]
  DNNameTable = interface(DNXmlNameTable)
  ['{A1C619FD-4BBD-32AC-B386-1EA2575A039B}']
  { methods } 

    ///<summary>
    ///  将指定的字符串原子化并将其添加到 <see langword="NameTable" />
    ///  。
    ///</summary>
    ///  <param name="key">
    ///  要添加的字符串。
    ///</param>
    ///<returns>
    ///  原子化的字符串; 如果它已存在于现有字符串 <see langword="NameTable" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="key" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Add(key: string): string; overload;
    ///<summary>
    ///  将指定的字符串原子化并将其添加到 <see langword="NameTable" />
    ///  。
    ///</summary>
    ///  <param name="key">
    ///  包含要添加的字符串的字符数组。
    ///</param>
    ///  <param name="start">
    ///  数组中指定的第一个字符的字符串的从零开始的索引。
    ///</param>
    ///  <param name="len">
    ///  在字符串中的字符数。
    ///</param>
    ///<returns>
    ///  原子化的字符串; 如果中已存在的现有字符串 <see langword="NameTable" />
    ///  。
    ///  如果 <paramref name="len" />
    ///  为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="start" />
    ///  - 或 -
    ///  <paramref name="start" />
    ///  &gt;= <paramref name="key" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="len" />
    ///  &gt;= <paramref name="key" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="len" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="len" />
    ///  &lt; 0.
    ///</exception>
    function Add(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    ///<summary>
    ///  获取具有指定值的原子化的字符串。
    ///</summary>
    ///  <param name="value">
    ///  要查找的名称。
    ///</param>
    ///<returns>
    ///  原子化的字符串对象或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function Get(value: string): string; overload;
    ///<summary>
    ///  获取包含指定的范围内的给定数组中的字符相同的字符的原子化的字符串。
    ///</summary>
    ///  <param name="key">
    ///  包含要查找的名称的字符数组。
    ///</param>
    ///  <param name="start">
    ///  数组中指定名称的第一个字符从零开始的索引。
    ///</param>
    ///  <param name="len">
    ///  在名称中的字符数。
    ///</param>
    ///<returns>
    ///  原子化的字符串或 <see langword="null" />
    ///  如果字符串具有不尚未原子化。
    ///  如果 <paramref name="len" />
    ///  为零，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.IndexOutOfRangeException">
    ///  0 &gt; <paramref name="start" />
    ///  - 或 -
    ///  <paramref name="start" />
    ///  &gt;= <paramref name="key" />
    ///  .长度
    ///  - 或 -
    ///  <paramref name="len" />
    ///  &gt;= <paramref name="key" />
    ///  .长度
    ///  上述条件不会导致如果引发异常 <paramref name="len" />
    ///  = 0。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="len" />
    ///  &lt; 0.
    ///</exception>
    function Get(key: TArray<Char>; start: Int32; len: Int32): string; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNNameTable = class(TDNGenericImport<DNNameTableClass, DNNameTable>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeClass = interface(DNObjectClass)
  ['{67ED459D-701F-5264-948A-65FB8009A866}']
  end;

  ///<summary>
  ///  表示 XML 文档中的单个节点。
  ///</summary>
  [DNTypeName('System.Xml.XmlNode')]
  DNXmlNode = interface(DDN.mscorlib.DNICloneable)
  ['{1E11AFE9-F059-35CC-A0C3-B9AA38701C21}']
  { getters & setters } 

    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  当在派生类中被重写时，创建该节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不能克隆的节点类型上调用此方法。
    ///</exception>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    ///<summary>
    ///  将当前节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将所有子节点的节点都保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中被重写时，获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  节点的限定名称。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的限定名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的限定名。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///  NodeType
    ///  ParentNode 的返回值
    ///  Attribute、Document、DocumentFragment、Entity、Notation
    ///  返回 <see langword="null" />
    ///  ; 这些节点不具有父级。
    ///  CDATA
    ///  返回包含 CDATA 节的元素或实体引用。
    ///  注释
    ///  返回包含注释的元素、实体引用、文档类型或文档。
    ///  DocumentType
    ///  返回文档节点。
    ///  元素
    ///  返回该元素的父节点。
    ///  如果该元素是树中的根节点，则父级是文档节点。
    ///  EntityReference
    ///  返回包含该实体引用的元素、特性或实体引用。
    ///  ProcessingInstruction
    ///  返回包含该处理指令的文档、元素、文档类型或实体引用。
    ///  Text
    ///  返回包含该文本节点的父元素、特性或实体引用。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlDocument" />
    ///  此节点所属。
    ///  如果节点是 <see cref="T:System.Xml.XmlDocument" />
    ///  （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  当在派生类中被重写时，获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  是 book。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的本地名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的本地名称。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取或设置仅表示该节点的子节点的标记。
    ///</summary>
    ///<returns>
    ///  该节点的子节点的标记。
    ///<see langword="InnerXml" />
    ///  不会返回默认属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在节点上设置此属性不能有子节点。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNode = class(TDNGenericImport<DNXmlNodeClass, DNXmlNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlAttributeClass = interface(DNXmlNodeClass)
  ['{568F5F75-91DF-5716-991A-DE584FED5846}']
  { static getter & setter } 

    procedure set_InnerText(value: string);
    procedure set_InnerXml(value: string);

  { static propertys } 

    ///<summary>
    ///  设置节点及其所有子级的串连的值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///  对于属性节点，此属性具有相同的功能 <see cref="P:System.Xml.XmlAttribute.Value" />
    ///  属性。
    ///</returns>
    {class} property InnerText: string write set_InnerText;
    ///<summary>
    ///  设置该属性的值。
    ///</summary>
    ///<returns>
    ///  特性值。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    {class} property InnerXml: string write set_InnerXml;
  end;

  ///<summary>
  ///  表示属性。
  ///  属性的有效值和默认值在文档类型定义 (DTD) 或架构中定义。
  ///</summary>
  [DNTypeName('System.Xml.XmlAttribute')]
  DNXmlAttribute = interface(DNXmlNode)
  ['{D53A0503-137B-30F4-8409-E7299C90A5C8}']
  { getters & setters } 

    function get_ParentNode: DNXmlNode;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_OwnerDocument: DNXmlDocument;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    procedure set_InnerText(value: string);
    function get_Specified: Boolean;
    function get_OwnerElement: DNXmlElement;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep"><see langword="true" />
    ///  递归地克隆指定节点之下的子树 <see langword="false" />
    ///  克隆节点本身
    ///</param>
    ///<returns>
    ///  重复节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see cref="T:System.Xml.XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  插入。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see cref="T:System.Xml.XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放在 <paramref name="refChild" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  插入。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将替换与指定的新子节点指定的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///  <param name="oldChild"><see cref="T:System.Xml.XmlNode" />
    ///  来替换。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  替换。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  删除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  要移除的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  中删除。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///  如果它是 <see cref="T:System.Xml.XmlDocumentFragment" />
    ///  , ，将文档片段的全部内容移至该节点的子列表。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  添加。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  添加。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取此节点的父级。
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性始终返回 <see langword="null" />
    ///  。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性始终返回 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  属性节点的限定的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的属性节点的名称。
    ///  在下面的示例 &lt; 预订 bk:genre = '新颖 &gt;，则 <see langword="LocalName" />
    ///  的属性是 <see langword="genre" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果该属性未显式给予命名空间，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  该节点的 namespaceURI 为 <see langword="null" />
    ///  。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性，指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是一个特性，且该节点的 qualifiedName"xmlns"[命名空间]。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型 <see langword="XmlAttribute" />
    ///  节点是 XmlNodeType.Attribute。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此节点所属的 XML 文档。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  有关 <see langword="XmlAttribute" />
    ///  节点，此属性是属性的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的而 set 操作称为。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取后期-架构验证的信息集已分配给此节点作为架构验证结果。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  包含后-架构验证的信息集的此节点。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  设置节点及其所有子级的串连的值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///  对于属性节点，此属性具有相同的功能 <see cref="P:System.Xml.XmlAttribute.Value" />
    ///  属性。
    ///</returns>
    property InnerText: string write set_InnerText;
    ///<summary>
    ///  获取一个值，该值指示是否显式设置属性值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此属性已显式指定一个值，在原始实例文档;，否则为 <see langword="false" />
    ///  。
    ///  值为 <see langword="false" />
    ///  指示该属性的值来自 DTD。
    ///</returns>
    property Specified: Boolean read get_Specified;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlElement" />
    ///  特性所属。
    ///</summary>
    ///<returns><see langword="XmlElement" />
    ///  属性属于或 <see langword="null" />
    ///  如果没有此特性的一部分 <see langword="XmlElement" />
    ///  。
    ///</returns>
    property OwnerElement: DNXmlElement read get_OwnerElement;
    ///<summary>
    ///  设置该属性的值。
    ///</summary>
    ///<returns>
    ///  特性值。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string write set_InnerXml;
    ///<summary>
    ///  获取基统一资源标识符 (URI) 的节点。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///  属性节点具有作为其所有者元素相同的基 URI。
    ///  如果属性节点不具有所有者元素中， <see langword="BaseURI" />
    ///  返回 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlAttribute = class(TDNGenericImport<DNXmlAttributeClass, DNXmlAttribute>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentClass = interface(DNXmlNodeClass)
  ['{72ECC820-5D8B-5542-9F37-BD21B3B1CDF4}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);
    procedure set_InnerText(value: string);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlDocument" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlDocument; overload;
    ///<summary>
    ///  使用指定的 <see langword="XmlDocument" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    {class} function init(nt: DNXmlNameTable): DNXmlDocument; overload;

  { static propertys } 

    ///<summary>
    ///  设置 <see cref="T:System.Xml.XmlResolver" />
    ///  以用于解析外部资源。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  此属性设置为 <see langword="null" />
    ///  ，并且遇到了外部 DTD 或实体。
    ///</exception>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  在所有情况下引发 <see cref="T:System.InvalidOperationException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在所有情况下。
    ///</exception>
    {class} property InnerText: string write set_InnerText;
  end;

  ///<summary>
  ///  表示 XML 文档。
  ///  可使用此类在文档中加载、验证、编辑、添加和放置 XML。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocument')]
  DNXmlDocument = interface(DNXmlNode)
  ['{25C48904-3F45-36CE-9DAC-C679105D5308}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_DocumentType: DNXmlDocumentType;
    function get_Implementation: DNXmlImplementation;
    function get_Name: string;
    function get_LocalName: string;
    function get_DocumentElement: DNXmlElement;
    function get_OwnerDocument: DNXmlDocument;
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_NameTable: DNXmlNameTable;
    function get_PreserveWhitespace: Boolean;
    procedure set_PreserveWhitespace(value: Boolean);
    function get_IsReadOnly: Boolean;
    procedure set_InnerText(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_OuterXml: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { events } 

    procedure add_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserting(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeInserted(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoving(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeRemoved(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanging(value: DNXmlNodeChangedEventHandler);
    procedure add_NodeChanged(value: DNXmlNodeChangedEventHandler);
    procedure remove_NodeChanged(value: DNXmlNodeChangedEventHandler);

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的 <see langword="XmlDocument" />
    ///  节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  创建具有指定 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性反映名称中第一个冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性反映名称中第一个冒号之后的部分。
    ///<see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  保持为空，除非该前缀是一个可识别的内置前缀，例如 xmlns。
    ///  在这种情况下，<see langword="NamespaceURI" />
    ///  具有值 http://www.w3.org/2000/xmlns/。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(name: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建包含指定数据的 <see cref="T:System.Xml.XmlCDataSection" />
    ///  。
    ///</summary>
    ///  <param name="data">
    ///  新 <see langword="XmlCDataSection" />
    ///  的内容。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlCDataSection" />
    ///  。
    ///</returns>
    function CreateCDataSection(data: string): DNXmlCDataSection;
    ///<summary>
    ///  创建包含指定数据的 <see cref="T:System.Xml.XmlComment" />
    ///  。
    ///</summary>
    ///  <param name="data">
    ///  新 <see langword="XmlComment" />
    ///  的内容。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlComment" />
    ///  。
    ///</returns>
    function CreateComment(data: string): DNXmlComment;
    ///<summary>
    ///  返回新 <see cref="T:System.Xml.XmlDocumentType" />
    ///  对象。
    ///</summary>
    ///  <param name="name">
    ///  此文档类型的名称。
    ///</param>
    ///  <param name="publicId">
    ///  此文档类型的公共标识符或 <see langword="null" />
    ///  。
    ///  你可以指定一个公共 URI 以及一个系统标识符以标识外部 DTD 子集的位置。
    ///</param>
    ///  <param name="systemId">
    ///  此文档类型的系统标识符或 <see langword="null" />
    ///  。
    ///  指定外部 DTD 子集的文件位置的 URL。
    ///</param>
    ///  <param name="internalSubset">
    ///  此文档类型的 DTD 内部子集或 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlDocumentType" />
    ///  。
    ///</returns>
    function CreateDocumentType(name: string; publicId: string; systemId: string; internalSubset: string): DNXmlDocumentType;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlDocumentFragment" />
    ///  。
    ///</summary>
    ///<returns>
    ///  新的 <see langword="XmlDocumentFragment" />
    ///  。
    ///</returns>
    function CreateDocumentFragment: DNXmlDocumentFragment;
    ///<summary>
    ///  创建具有指定名称的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性反映名称中位于冒号之前的部分，<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性反映名称中位于冒号之后的部分。
    ///  限定名称不能包含“xmlns”前缀。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(name: string): DNXmlElement; overload;
    ///<summary>
    ///  创建具有指定名称的 <see cref="T:System.Xml.XmlEntityReference" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlEntityReference" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  名称无效（例如，以“#”开头的名称无效。）
    ///</exception>
    function CreateEntityReference(name: string): DNXmlEntityReference;
    ///<summary>
    ///  创建一个具有指定名称和数据的 <see cref="T:System.Xml.XmlProcessingInstruction" />
    ///  。
    ///</summary>
    ///  <param name="target">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="data">
    ///  处理指令的数据。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlProcessingInstruction" />
    ///  。
    ///</returns>
    function CreateProcessingInstruction(target: string; data: string): DNXmlProcessingInstruction;
    ///<summary>
    ///  创建一个具有指定值的 <see cref="T:System.Xml.XmlDeclaration" />
    ///  节点。
    ///</summary>
    ///  <param name="version">
    ///  版本必须为“1.0”。
    ///</param>
    ///  <param name="encoding">
    ///  编码属性的值。
    ///  这是当将 <see cref="T:System.Xml.XmlDocument" />
    ///  保存到文件或流时使用的编码方式；因此必须将其设置为 <see cref="T:System.Text.Encoding" />
    ///  类支持的字符串，否则 <see cref="M:System.Xml.XmlDocument.Save(System.String)" />
    ///  失败。
    ///  如果这是 <see langword="null" />
    ///  或 String.Empty，则 <see langword="Save" />
    ///  方法不在 XML 声明上写出编码方式特性，因此将使用默认的编码方式 UTF-8。
    ///  注意：如果将 <see langword="XmlDocument" />
    ///  保存到 <see cref="T:System.IO.TextWriter" />
    ///  或 <see cref="T:System.Xml.XmlTextWriter" />
    ///  ，则放弃该编码值。
    ///  而改用 <see langword="TextWriter" />
    ///  或 <see langword="XmlTextWriter" />
    ///  的编码方式。
    ///  这会确保可以使用正确的编码读回写出的 XML。
    ///</param>
    ///  <param name="standalone">
    ///  该值必须是“yes”或“no”。
    ///  如果这是 <see langword="null" />
    ///  或 String.Empty，<see langword="Save" />
    ///  方法不在 XML 声明上写出独立特性。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlDeclaration" />
    ///  节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="version" />
    ///  或 <paramref name="standalone" />
    ///  的值是除上面指定的值以外的值。
    ///</exception>
    function CreateXmlDeclaration(version: string; encoding: string; standalone: string): DNXmlDeclaration;
    ///<summary>
    ///  创建具有指定文本的 <see cref="T:System.Xml.XmlText" />
    ///  。
    ///</summary>
    ///  <param name="text">
    ///  Text 节点的文本。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlText" />
    ///  节点。
    ///</returns>
    function CreateTextNode(text: string): DNXmlText;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlSignificantWhitespace" />
    ///  节点。
    ///</summary>
    ///  <param name="text">
    ///  此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9；
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="XmlSignificantWhitespace" />
    ///  节点。
    ///</returns>
    function CreateSignificantWhitespace(text: string): DNXmlSignificantWhitespace;
    ///<summary>
    ///  创建一个用于导航此文档的新 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  创建一个 <see cref="T:System.Xml.XmlWhitespace" />
    ///  节点。
    ///</summary>
    ///  <param name="text">
    ///  此字符串必须只包含下列字符：&amp;#20；&amp;#10；&amp;#13 和 &amp;#9；
    ///</param>
    ///<returns>
    ///  一个新的 <see langword="XmlWhitespace" />
    ///  节点。
    ///</returns>
    function CreateWhitespace(text: string): DNXmlWhitespace;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlDocument.Name" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="name">
    ///  要匹配的限定名称。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///  特殊值“*”匹配所有标记。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果没有任何节点与 <paramref name="name" />
    ///  匹配，则返回的集合将为空。
    ///</returns>
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    ///<summary>
    ///  创建具有指定限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="qualifiedName">
    ///  属性的限定名称。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性将反映名称中位于冒号后的部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的 namespaceURI。
    ///  如果限定名称包含前缀 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(qualifiedName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建具有限定名和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///  <param name="qualifiedName">
    ///  元素的限定名。
    ///  如果名称包含冒号，则 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  属性将反映名称中位于冒号前的部分，而 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  属性将反映名称中位于冒号后的部分。
    ///  限定名称不能包含“xmlns”前缀。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(qualifiedName: string; namespaceURI: string): DNXmlElement; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="localName">
    ///  要匹配的 LocalName。
    ///  特殊值“*”匹配所有标记。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要匹配的 NamespaceURI。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果没有任何节点与指定的 <paramref name="localName" />
    ///  和 <paramref name="namespaceURI" />
    ///  匹配，则返回的集合将为空。
    ///</returns>
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    ///<summary>
    ///  获取具有指定 ID 的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///  <param name="elementId">
    ///  要匹配的属性 ID。
    ///</param>
    ///<returns>
    ///  具有匹配 ID 的 <see langword="XmlElement" />
    ///  ；如果未找到匹配的元素，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetElementById(elementId: string): DNXmlElement;
    ///<summary>
    ///  将节点从另一个文档导入到当前文档。
    ///</summary>
    ///  <param name="node">
    ///  正在被导入的节点。
    ///</param>
    ///  <param name="deep">
    ///  如果执行深层克隆，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  导入的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在无法导入的节点类型上调用此方法。
    ///</exception>
    function ImportNode(node: DNXmlNode; deep: Boolean): DNXmlNode;
    ///<summary>
    ///  创建一个具有指定的 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的前缀（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///  如果 <paramref name="prefix" />
    ///  为 xmlns，则该参数必须是 http://www.w3.org/2000/xmlns/；否则将引发异常。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function CreateAttribute(prefix: string; localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  创建具有指定 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新元素的前缀（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="localName">
    ///  新元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新元素的命名空间 URI（如果有的话）。
    ///  String.Empty 与 <see langword="null" />
    ///  等效。
    ///</param>
    ///<returns>
    ///  新的 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</returns>
    function CreateElement(prefix: string; localName: string; namespaceURI: string): DNXmlElement; overload;
    ///<summary>
    ///  创建具有指定的节点类型、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="nodeTypeString">
    ///  新节点的 <see cref="T:System.Xml.XmlNodeType" />
    ///  的字符串版本。
    ///  该参数必须是下表中列出的值之一。
    ///</param>
    ///  <param name="name">
    ///  新节点的限定名称。
    ///  如果名称包含一个冒号，则将它解析为 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  和 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  两部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称；或者 <paramref name="nodeTypeString" />
    ///  不是下列字符串之一。
    ///</exception>
    function CreateNode(nodeTypeString: string; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  创建一个具有指定的 <see cref="T:System.Xml.XmlNodeType" />
    ///  、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  新节点的 <see langword="XmlNodeType" />
    ///  。
    ///</param>
    ///  <param name="name">
    ///  新节点的限定名称。
    ///  如果名称包含一个冒号，则将其解析为 <see cref="P:System.Xml.XmlNode.Prefix" />
    ///  和 <see cref="P:System.Xml.XmlDocument.LocalName" />
    ///  两部分。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称。
    ///</exception>
    function CreateNode(&type: DNXmlNodeType; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  根据 <see cref="T:System.Xml.XmlReader" />
    ///  中的信息创建一个 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///  读取器必须定位在节点或属性上。
    ///</summary>
    ///  <param name="reader">
    ///  XML 源
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  ；如果不存在其他节点，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.NullReferenceException">
    ///  此读取器位于未转换为有效的 DOM 节点（例如，EndElement 或 EndEntity）的节点类型上。
    ///</exception>
    function ReadNode(reader: DNXmlReader): DNXmlNode;
    ///<summary>
    ///  从指定的 URL 加载 XML 文档。
    ///</summary>
    ///  <param name="filename">
    ///  含要加载的 XML 文档的文件的 URL。
    ///  URL 既可以是本地文件，也可以是 HTTP URL（Web 地址）。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="filename" />
    ///  是一个长度为零的字符串，仅包含空格，或包含一个或多个由 <see cref="F:System.IO.Path.InvalidPathChars" />
    ///  定义的无效字符。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="filename" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.PathTooLongException">
    ///  指定的路径和/或文件名超过了系统定义的最大长度。
    ///  例如，在基于 Windows 的平台上，路径必须少于 248 个字符，且文件名必须少于 260 个字符。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  指定的路径无效（例如，它位于未映射的驱动器上）。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  打开文件时发生 I/O 错误。
    ///</exception><exception cref="T:System.UnauthorizedAccessException"><paramref name="filename" />
    ///  指定了一个只读文件。
    ///  - 或 -
    ///  当前平台不支持此操作。
    ///  - 或 -
    ///  <paramref name="filename" />
    ///  指定了一个目录。
    ///  - 或 -
    ///  调用方没有所要求的权限。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  未找到 <paramref name="filename" />
    ///  中指定的文件。
    ///</exception><exception cref="T:System.NotSupportedException"><paramref name="filename" />
    ///  的格式无效。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception>
    procedure Load(filename: string); overload;
    ///<summary>
    ///  从指定的流加载 XML 文档。
    ///</summary>
    ///  <param name="inStream">
    ///  包含要加载的 XML 文档的流。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，将引发 <see cref="T:System.IO.FileNotFoundException" />
    ///  。
    ///</exception>
    procedure Load(inStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  从指定的 <see cref="T:System.IO.TextReader" />
    ///  加载 XML 文档。
    ///</summary>
    ///  <param name="txtReader">
    ///  用于将 XML 数据输送到文档中的 <see langword="TextReader" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure Load(txtReader: DDN.mscorlib.DNTextReader); overload;
    ///<summary>
    ///  从指定的 <see cref="T:System.Xml.XmlReader" />
    ///  加载 XML 文档。
    ///</summary>
    ///  <param name="reader">
    ///  用于将 XML 数据输送到文档中的 <see langword="XmlReader" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure Load(reader: DNXmlReader); overload;
    ///<summary>
    ///  从指定的字符串加载 XML 文档。
    ///</summary>
    ///  <param name="xml">
    ///  包含要加载的 XML 文档的字符串。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 中存在加载或分析错误。
    ///  在这种情况下，该文档保留为空。
    ///</exception>
    procedure LoadXml(xml: string);
    ///<summary>
    ///  将 XML 文档保存到指定的文件。
    ///  如果存在指定文件，则此方法会覆盖它。
    ///</summary>
    ///  <param name="filename">
    ///  要将文档保存到其中的文件的位置。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(filename: string); overload;
    ///<summary>
    ///  将 XML 文档保存到指定的流。
    ///</summary>
    ///  <param name="outStream">
    ///  要保存到其中的流。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(outStream: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将 XML 文档保存到指定的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="writer">
    ///  要保存到其中的 <see langword="TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(writer: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  将 <see langword="XmlDocument" />
    ///  节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将 <see langword="XmlDocument" />
    ///  节点的所有子级保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="xw">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(xw: DNXmlWriter);
    ///<summary>
    ///  验证 <see cref="T:System.Xml.XmlDocument" />
    ///  是不是 <see cref="P:System.Xml.XmlDocument.Schemas" />
    ///  属性中包含的 XML 架构定义语言 (XSD) 架构。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</exception>
    procedure Validate(validationEventHandler: DNValidationEventHandler); overload;
    ///<summary>
    ///  创建一个具有指定的<see cref="T:System.Xml.XmlNodeType" />
    ///  、<see cref="P:System.Xml.XmlNode.Prefix" />
    ///  、<see cref="P:System.Xml.XmlDocument.Name" />
    ///  和 <see cref="P:System.Xml.XmlNode.NamespaceURI" />
    ///  的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="type">
    ///  新节点的 <see langword="XmlNodeType" />
    ///  。
    ///</param>
    ///  <param name="prefix">
    ///  新节点的前缀。
    ///</param>
    ///  <param name="name">
    ///  新节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  新的 <see langword="XmlNode" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  未提供名称，而 <see langword="XmlNodeType" />
    ///  需要名称。
    ///</exception>
    function CreateNode(&type: DNXmlNodeType; prefix: string; name: string; namespaceURI: string): DNXmlNode; overload;
    ///<summary>
    ///  将 XML 文档保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  该操作不会生成格式标准的 XML 文档（例如，没有文档元素或 XML 声明重复）。
    ///</exception>
    procedure Save(w: DNXmlWriter); overload;
    ///<summary>
    ///  根据 <see cref="P:System.Xml.XmlDocument.Schemas" />
    ///  属性中的 XML 架构定义语言 (XSD) 架构，验证指定的 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///</summary>
    ///  <param name="validationEventHandler">
    ///  接收有关架构验证警告和错误的信息的 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</param>
    ///  <param name="nodeToValidate">
    ///  从 <see cref="T:System.Xml.XmlDocument" />
    ///  创建的要验证的 <see cref="T:System.Xml.XmlNode" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlNode" />
    ///  对象参数不是从 <see cref="T:System.Xml.XmlDocument" />
    ///  创建的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlNode" />
    ///  对象参数不是元素、特性、文档片段或根节点。
    ///</exception><exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  发生了架构验证事件并且没有指定任何 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  对象。
    ///</exception>
    procedure Validate(validationEventHandler: DNValidationEventHandler; nodeToValidate: DNXmlNode); overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  对于 <see langword="XmlDocument" />
    ///  节点，该值是 XmlNodeType.Document。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父节点（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取包含 DOCTYPE 声明的节点。
    ///</summary>
    ///<returns>
    ///  包含 DocumentType（DOCTYPE 声明）的 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property DocumentType: DNXmlDocumentType read get_DocumentType;
    ///<summary>
    ///  获取当前文档的 <see cref="T:System.Xml.XmlImplementation" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  当前文档的 <see langword="XmlImplementation" />
    ///  对象。
    ///</returns>
    property &Implementation: DNXmlImplementation read get_Implementation;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点，该名称是 #document。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点，本地名称是 #document。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取文档的根 <see cref="T:System.Xml.XmlElement" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示 XML 文档树的根的 <see langword="XmlElement" />
    ///  。
    ///  如果不存在根，则返回 <see langword="null" />
    ///  。
    ///</returns>
    property DocumentElement: DNXmlElement read get_DocumentElement;
    ///<summary>
    ///  获取当前节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  对于 <see langword="XmlDocument" />
    ///  节点（<see cref="P:System.Xml.XmlDocument.NodeType" />
    ///  等于 XmlNodeType.Document），该属性总是返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置与此 <see cref="T:System.Xml.XmlDocument" />
    ///  关联的 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  为一个包含与此 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  关联的 XML 架构定义语言 (XSD) 架构的 <see cref="T:System.Xml.XmlDocument" />
    ///  对象；否则，为一个空 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</returns>
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
    ///<summary>
    ///  设置 <see cref="T:System.Xml.XmlResolver" />
    ///  以用于解析外部资源。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  在 .NET Framework 1.1 版中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  此属性设置为 <see langword="null" />
    ///  ，并且遇到了外部 DTD 或实体。
    ///</exception>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使您能够获取该文档中字符串的原子化版本。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在元素内容中保留空白区域。
    ///</summary>
    ///<returns><see langword="true" />
    ///  表示保留空白；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property PreserveWhitespace: Boolean read get_PreserveWhitespace write set_PreserveWhitespace;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否是只读的。
    ///</summary>
    ///<returns>
    ///  如果当前节点为只读，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="XmlDocument" />
    ///  节点始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  在所有情况下引发 <see cref="T:System.InvalidOperationException" />
    ///  。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在所有情况下。
    ///</exception>
    property InnerText: string write set_InnerText;
    ///<summary>
    ///  获取或设置表示当前节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  当前节点的子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  返回节点的后架构验证信息集 (PSVI)。
    ///</summary>
    ///<returns>
    ///  表示节点的 PSVI 的 <see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocument = class(TDNGenericImport<DNXmlDocumentClass, DNXmlDocument>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentFragmentClass = interface(DNXmlNodeClass)
  ['{6E0EA61D-9BC6-5CA3-BBB9-2C261777C15D}']
  end;

  ///<summary>
  ///  表示对树插入操作非常有用的轻量级对象。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocumentFragment')]
  DNXmlDocumentFragment = interface(DNXmlNode)
  ['{495A1294-FF3E-3F56-A99F-A1AA85127036}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  , ，名称是 <see langword="#document-fragment" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，本地名称是 <see langword="#document-fragment" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，此值是 XmlNodeType.DocumentFragment。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  此节点的父级。
    ///  有关 <see langword="XmlDocumentFragment" />
    ///  节点，此属性始终为 <see langword="null" />
    ///  。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlDocument" />
    ///  此节点所属。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  此节点子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentFragment = class(TDNGenericImport<DNXmlDocumentFragmentClass, DNXmlDocumentFragment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityClass = interface(DNXmlNodeClass)
  ['{58105CFA-A4B1-5776-8C52-FC78B1A05533}']
  end;

  ///<summary>
  ///  表示实体声明，如 &lt; ！实体 … &gt;。
  ///</summary>
  [DNTypeName('System.Xml.XmlEntity')]
  DNXmlEntity = interface(DNXmlNode)
  ['{BBF8E184-152C-3140-917E-A6A3030C164E}']
  { getters & setters } 

    function get_IsReadOnly: Boolean;
    function get_Name: string;
    function get_LocalName: string;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_NotationName: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_BaseURI: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///  无法克隆的实体节点。
    ///  对调用此方法 <see cref="T:System.Xml.XmlEntity" />
    ///  对象会引发异常。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回一份 <see cref="T:System.Xml.XmlNode" />
    ///  从中调用该方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法克隆的实体节点。
    ///  对调用此方法 <see cref="T:System.Xml.XmlEntity" />
    ///  对象会引发异常。
    ///</exception>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  有关 <see langword="XmlEntity" />
    ///  节点，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  有关 <see langword="XmlEntity" />
    ///  节点，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlEntity" />
    ///  节点是只读的此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取节点的名称。
    ///</summary>
    ///<returns>
    ///  实体的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取不带命名空间前缀的节点的名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlEntity" />
    ///  节点，此属性返回的实体名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取实体节点及其所有子级的串连的值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试将设置该属性。
    ///</exception>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlEntity" />
    ///  节点，则这是 XmlNodeType.Entity。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  实体声明上获取的公共标识符的值。
    ///</summary>
    ///<returns>
    ///  实体上的公共标识符。
    ///  如果没有公共标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property PublicId: string read get_PublicId;
    ///<summary>
    ///  获取实体声明上的系统标识符的值。
    ///</summary>
    ///<returns>
    ///  实体上的系统标识符。
    ///  如果没有系统标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property SystemId: string read get_SystemId;
    ///<summary>
    ///  获取此实体声明上的可选 NDATA 属性的名称。
    ///</summary>
    ///<returns>
    ///  N 数据属性的名称。
    ///  如果没有 NDATA <see langword="null" />
    ///  返回。
    ///</returns>
    property NotationName: string read get_NotationName;
    ///<summary>
    ///  获取表示此节点及其所有子级的标记。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlEntity" />
    ///  节点，则返回 String.Empty。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlEntity" />
    ///  节点，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试将设置该属性。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取当前节点的基础统一资源标识符 (URI)。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///  NodeType
    ///  ParentNode 的返回值
    ///  Attribute、Document、DocumentFragment、Entity、Notation
    ///  返回 <see langword="null" />
    ///  ; 这些节点不具有父级。
    ///  CDATA
    ///  返回包含 CDATA 节的元素或实体引用。
    ///  注释
    ///  返回包含注释的元素、实体引用、文档类型或文档。
    ///  DocumentType
    ///  返回文档节点。
    ///  元素
    ///  返回该元素的父节点。
    ///  如果该元素是树中的根节点，则父级是文档节点。
    ///  EntityReference
    ///  返回包含该实体引用的元素、特性或实体引用。
    ///  ProcessingInstruction
    ///  返回包含该处理指令的文档、元素、文档类型或实体引用。
    ///  Text
    ///  返回包含该文本节点的父元素、特性或实体引用。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlDocument" />
    ///  此节点所属。
    ///  如果节点是 <see cref="T:System.Xml.XmlDocument" />
    ///  （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntity = class(TDNGenericImport<DNXmlEntityClass, DNXmlEntity>) end;

  //-------------namespace: System.Xml----------------
  DNXmlLinkedNodeClass = interface(DNXmlNodeClass)
  ['{91F2964A-C0B9-50C3-A29B-A15A2597FEC1}']
  end;

  ///<summary>
  ///  获取紧接在该节点之前或之后的节点。
  ///</summary>
  [DNTypeName('System.Xml.XmlLinkedNode')]
  DNXmlLinkedNode = interface(DNXmlNode)
  ['{E1A8457C-7DBB-37D9-95EF-B132116B2C67}']
  { getters & setters } 

    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  当在派生类中被重写时，创建该节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  不能克隆的节点类型上调用此方法。
    ///</exception>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    ///<summary>
    ///  将当前节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将所有子节点的节点都保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  , ，当在派生类中重写。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  当在派生类中被重写时，获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  节点的限定名称。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的限定名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的限定名。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///  NodeType
    ///  ParentNode 的返回值
    ///  Attribute、Document、DocumentFragment、Entity、Notation
    ///  返回 <see langword="null" />
    ///  ; 这些节点不具有父级。
    ///  CDATA
    ///  返回包含 CDATA 节的元素或实体引用。
    ///  注释
    ///  返回包含注释的元素、实体引用、文档类型或文档。
    ///  DocumentType
    ///  返回文档节点。
    ///  元素
    ///  返回该元素的父节点。
    ///  如果该元素是树中的根节点，则父级是文档节点。
    ///  EntityReference
    ///  返回包含该实体引用的元素、特性或实体引用。
    ///  ProcessingInstruction
    ///  返回包含该处理指令的文档、元素、文档类型或实体引用。
    ///  Text
    ///  返回包含该文本节点的父元素、特性或实体引用。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlDocument" />
    ///  此节点所属。
    ///  如果节点是 <see cref="T:System.Xml.XmlDocument" />
    ///  （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  当在派生类中被重写时，获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  是 book。
    ///  返回的名称是依赖于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  名称
    ///  特性
    ///  属性的本地名称。
    ///  CDATA
    ///  #cdata-section
    ///  注释
    ///  #comment
    ///  Document
    ///  #document
    ///  DocumentFragment
    ///  #document-fragment
    ///  DocumentType
    ///  文档类型名称。
    ///  元素
    ///  元素的本地名称。
    ///  实体
    ///  实体的名称。
    ///  EntityReference
    ///  引用的实体的名称。
    ///  Notation
    ///  表示法名称。
    ///  ProcessingInstruction
    ///  处理指令的目标。
    ///  Text
    ///  #text
    ///  Whitespace
    ///  #whitespace
    ///  SignificantWhitespace
    ///  #significant-whitespace
    ///  XmlDeclaration
    ///  #xml-declaration
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取包含此节点及其所有子节点的标记。
    ///</summary>
    ///<returns>
    ///  包含此节点及其所有子节点的标记。
    ///<see langword="OuterXml" />
    ///  不会返回默认属性。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取或设置仅表示该节点的子节点的标记。
    ///</summary>
    ///<returns>
    ///  该节点的子节点的标记。
    ///<see langword="InnerXml" />
    ///  不会返回默认属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在节点上设置此属性不能有子节点。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlLinkedNode = class(TDNGenericImport<DNXmlLinkedNodeClass, DNXmlLinkedNode>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCharacterDataClass = interface(DNXmlLinkedNodeClass)
  ['{42D10EF7-A1BE-5E21-BD42-86ECD3B911FD}']
  end;

  ///<summary>
  ///  提供由几个类使用的文本操作方法。
  ///</summary>
  [DNTypeName('System.Xml.XmlCharacterData')]
  DNXmlCharacterData = interface(DNXmlLinkedNode)
  ['{6DDDB0FA-19BB-3660-ABC7-A8E351F02593}']
  { getters & setters } 

    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Name: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_LocalName: string;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function CloneNode(deep: Boolean): DNXmlNode;
    function Supports(feature: string; version: string): Boolean;
    procedure WriteTo(w: DNXmlWriter);
    procedure WriteContentTo(w: DNXmlWriter);
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property Name: string read get_Name;
    property NodeType: DNXmlNodeType read get_NodeType;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property LocalName: string read get_LocalName;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlCharacterData = class(TDNGenericImport<DNXmlCharacterDataClass, DNXmlCharacterData>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCDataSectionClass = interface(DNXmlCharacterDataClass)
  ['{97FBAC7B-CA59-5B48-A7E2-B077AF8D1A99}']
  end;

  ///<summary>
  ///  表示 CDATA 节。
  ///</summary>
  [DNTypeName('System.Xml.XmlCDataSection')]
  DNXmlCDataSection = interface(DNXmlCharacterData)
  ['{1810EA9B-175D-3CDC-8921-290FD122D830}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_PreviousText: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  由于 CDATA 节点没有子级，因此不管参数的设置如何，克隆的节点都将始终包含数据内容。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 CDATA 节点，该名称是 <see langword="#cdata-section" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 CDATA 节点，本地名称是 <see langword="#cdata-section" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  对于 CDATA 节点，该值是 XmlNodeType.CDATA。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlCDataSection = class(TDNGenericImport<DNXmlCDataSectionClass, DNXmlCDataSection>) end;

  //-------------namespace: System.Xml----------------
  DNXmlCommentClass = interface(DNXmlCharacterDataClass)
  ['{BB4F609E-8620-50D3-BD93-A5228DAAD94E}']
  end;

  ///<summary>
  ///  表示 XML 注释的内容。
  ///</summary>
  [DNTypeName('System.Xml.XmlComment')]
  DNXmlComment = interface(DNXmlCharacterData)
  ['{CC1B4DB8-000C-375C-85B6-C4F457CA604C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  因为注释节点不具有子级，克隆的节点始终包含文本内容，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  因为注释节点不具有子级，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于注释节点，则这是 <see langword="#comment" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于注释节点，则这是 <see langword="#comment" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于注释节点的值是 XmlNodeType.Comment。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlComment = class(TDNGenericImport<DNXmlCommentClass, DNXmlComment>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSignificantWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{D3D69425-089C-5BEC-8B98-2869CBCD58BA}']
  end;

  ///<summary>
  ///  表示在混合内容节点中标记之间的空白或 xml:space= 'preserve' 范围内的空白。
  ///  这也称为有效空白。
  ///</summary>
  [DNTypeName('System.Xml.XmlSignificantWhitespace')]
  DNXmlSignificantWhitespace = interface(DNXmlCharacterData)
  ['{0B172DBB-0D28-360D-B6DA-C98B3EC1449A}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于重要的空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，此属性返回 <see langword="#significant-whitespace" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，此属性返回 <see langword="#significant-whitespace" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlSignificantWhitespace" />
    ///  节点，该值是 XmlNodeType.SignificantWhitespace。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的父节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  当前节点的父节点。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  在节点中找到空白字符。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置 <see langword="Value" />
    ///  到无效空白字符。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlSignificantWhitespace = class(TDNGenericImport<DNXmlSignificantWhitespaceClass, DNXmlSignificantWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextClass = interface(DNXmlCharacterDataClass)
  ['{0651B7EA-6BE9-59ED-A83D-2E5F61F97A05}']
  end;

  ///<summary>
  ///  表示元素或属性的文本内容。
  ///</summary>
  [DNTypeName('System.Xml.XmlText')]
  DNXmlText = interface(DNXmlCharacterData)
  ['{C23B6FD2-1BB3-3560-8729-8F78B16B5B5C}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  在指定的偏移点将该节点拆分为两个节点，并使树中的这两个节点成为同级。
    ///</summary>
    ///  <param name="offset">
    ///  拆分节点的偏移点。
    ///</param>
    ///<returns>
    ///  新的节点。
    ///</returns>
    function SplitText(offset: Int32): DNXmlText;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///<see langword="XmlText" />
    ///  节点没有子级，因此此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于文本节点，此属性返回 <see langword="#text" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于文本节点，此属性返回 <see langword="#text" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于文本节点，该值是 XmlNodeType.Text。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  文本节点的内容。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlText = class(TDNGenericImport<DNXmlTextClass, DNXmlText>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWhitespaceClass = interface(DNXmlCharacterDataClass)
  ['{2A70CCA8-A245-5913-A121-09B607B6A137}']
  end;

  ///<summary>
  ///  表示元素内容中的空白。
  ///</summary>
  [DNTypeName('System.Xml.XmlWhitespace')]
  DNXmlWhitespace = interface(DNXmlCharacterData)
  ['{7665AD2A-852F-30AD-8E7A-09633B25E173}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_PreviousText: DNXmlNode;
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Data: string;
    procedure set_Data(value: string);
    function get_Length: Int32;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于空白节点，克隆的节点将始终包含数据值，而不管参数的设置如何。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从指定范围中检索一个完整的字符串的子字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要开始检索的字符串中的位置。
    ///  偏移量为零表示的起始点是在数据的开始处。
    ///</param>
    ///  <param name="count">
    ///  要检索的字符数。
    ///</param>
    ///<returns>
    ///  对应于指定的范围内的子字符串。
    ///</returns>
    function Substring(offset: Int32; count: Int32): string;
    ///<summary>
    ///  将指定的字符串追加到该节点的字符数据的末尾。
    ///</summary>
    ///  <param name="strData">
    ///  要插入现有字符串的字符串。
    ///</param>
    procedure AppendData(strData: string);
    ///<summary>
    ///  指定的字符偏移量处插入指定的字符串。
    ///</summary>
    ///  <param name="offset">
    ///  要插入的提供的字符串数据的字符串中的位置。
    ///</param>
    ///  <param name="strData">
    ///  是要插入到现有字符串的字符串数据。
    ///</param>
    procedure InsertData(offset: Int32; strData: string);
    ///<summary>
    ///  从节点中删除某个范围的字符。
    ///</summary>
    ///  <param name="offset">
    ///  要开始删除字符串内的位置。
    ///</param>
    ///  <param name="count">
    ///  要删除的字符数。
    ///</param>
    procedure DeleteData(offset: Int32; count: Int32);
    ///<summary>
    ///  替换指定的数目的字符与指定的字符串指定的偏移量处开始。
    ///</summary>
    ///  <param name="offset">
    ///  要开始替换的字符串中的位置。
    ///</param>
    ///  <param name="count">
    ///  要替换的字符数。
    ///</param>
    ///  <param name="strData">
    ///  新数据将替换旧的字符串数据。
    ///</param>
    procedure ReplaceData(offset: Int32; count: Int32; strData: string);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，此属性返回 <see langword="#whitespace" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，此属性返回 <see langword="#whitespace" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlWhitespace" />
    ///  节点，则这是 <see cref="F:System.Xml.XmlNodeType.Whitespace" />
    ///  。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的父节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  当前节点的父节点。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  在节点中找到空白字符。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  设置 <see cref="P:System.Xml.XmlWhitespace.Value" />
    ///  到无效空白字符。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
    ///<summary>
    ///  获取或设置该节点的串连的值和节点的所有子级。
    ///</summary>
    ///<returns>
    ///  节点和节点的所有子级的串连的值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  包含该节点的数据。
    ///</summary>
    ///<returns>
    ///  节点的数据。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取数据的长度，以字符为单位。
    ///</summary>
    ///<returns>
    ///  以字符为单位中的字符串的长度 <see cref="P:System.Xml.XmlCharacterData.Data" />
    ///  属性。
    ///  长度可能为 0。也就是说，CharacterData 节点可以是空的。
    ///</returns>
    property Length: Int32 read get_Length;
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property NextSibling: DNXmlNode read get_NextSibling;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
  end;

  TDNXmlWhitespace = class(TDNGenericImport<DNXmlWhitespaceClass, DNXmlWhitespace>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDeclarationClass = interface(DNXmlLinkedNodeClass)
  ['{A6529FEA-8312-512A-987C-49BDDB60B87F}']
  end;

  ///<summary>
  ///  表示 XML 声明节点 &lt;?xml version='1.0'...?&gt;。
  ///</summary>
  [DNTypeName('System.Xml.XmlDeclaration')]
  DNXmlDeclaration = interface(DNXmlLinkedNode)
  ['{E98CE747-E1FC-355C-8454-95C884B8FB04}']
  { getters & setters } 

    function get_Version: string;
    function get_Encoding: string;
    procedure set_Encoding(value: string);
    function get_Standalone: string;
    procedure set_Standalone(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlDeclaration" />
    ///  节点没有子级，克隆的节点始终包含数据值，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  因为 <see langword="XmlDeclaration" />
    ///  节点没有子级，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取文档的 XML 版本。
    ///</summary>
    ///<returns>
    ///  此值始终是 <see langword="1.0" />
    ///  。
    ///</returns>
    property Version: string read get_Version;
    ///<summary>
    ///  获取或设置 XML 文档的编码级别。
    ///</summary>
    ///<returns>
    ///  有效的字符编码名称。
    ///  最常受支持的字符集编码名称的 XML 如下所示︰
    ///  类别
    ///  编码名称
    ///  Unicode
    ///  UTF-8、 UTF-16
    ///  ISO 10646
    ///  ISO 10646-UCS 2，ISO 10646 UCS 4
    ///  ISO 8859
    ///  ISO 8859-n （其中"n"是从 1 到 9 的数字）
    ///  X JIS 0208 1997
    ///  ISO-2022年-JP，Shift_JIS，EUC-JP
    ///  此值为可选值。
    ///  如果未设置一个值，则此属性返回 String.Empty。
    ///  如果未包括出编码方式特性，则编写或保存文档时将假定为 utf-8 编码。
    ///</returns>
    property Encoding: string read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置独立的属性的值。
    ///</summary>
    ///<returns>
    ///  有效值为 <see langword="yes" />
    ///  所需的 XML 文档的所有实体声明将都包含在文档或 <see langword="no" />
    ///  是否需要外部文档类型定义 (DTD)。
    ///  如果出独立特性不存在 XML 声明中，此属性返回 String.Empty。
    ///</returns>
    property Standalone: string read get_Standalone write set_Standalone;
    ///<summary>
    ///  获取或设置的值 <see langword="XmlDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  内容 <see langword="XmlDeclaration" />
    ///  (即之间的所有内容 &lt;?xml 和 ?&gt;)。
    ///</returns>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取或设置的串连的值 <see langword="XmlDeclaration" />
    ///  。
    ///</summary>
    ///<returns>
    ///  串联的值 <see langword="XmlDeclaration" />
    ///  (即之间的所有内容 &lt;?xml 和 ?&gt;)。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，名称是 <see langword="xml" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，本地名称是 <see langword="xml" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlDeclaration" />
    ///  节点，此值是 XmlNodeType.XmlDeclaration。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDeclaration = class(TDNGenericImport<DNXmlDeclarationClass, DNXmlDeclaration>) end;

  //-------------namespace: System.Xml----------------
  DNXmlDocumentTypeClass = interface(DNXmlLinkedNodeClass)
  ['{BEC420DE-802C-5F38-95F7-CA44F66DB28E}']
  end;

  ///<summary>
  ///  表示文档类型声明。
  ///</summary>
  [DNTypeName('System.Xml.XmlDocumentType')]
  DNXmlDocumentType = interface(DNXmlLinkedNode)
  ['{7AF5641A-36C3-3113-83DA-937C8D756FC0}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_Entities: DNXmlNamedNodeMap;
    function get_Notations: DNXmlNamedNodeMap;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_InternalSubset: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  对于文档类型节点，克隆的节点始终包含的子树，而不考虑参数设置。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  有关 <see langword="XmlDocumentType" />
    ///  节点，此方法不起作用。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此属性返回的文档类型的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此属性返回的文档类型的名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  对于 DocumentType 节点，此值是 XmlNodeType.DocumentType。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  DocumentType 节点是只读的因为此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Xml.XmlEntity" />
    ///  节点在文档类型声明中声明。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNamedNodeMap" />
    ///  包含 <see langword="XmlEntity" />
    ///  节点。
    ///  返回的 <see langword="XmlNamedNodeMap" />
    ///  是只读的。
    ///</returns>
    property Entities: DNXmlNamedNodeMap read get_Entities;
    ///<summary>
    ///  获取的集合 <see cref="T:System.Xml.XmlNotation" />
    ///  文档中存在的节点类型声明。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNamedNodeMap" />
    ///  包含 <see langword="XmlNotation" />
    ///  节点。
    ///  返回的 <see langword="XmlNamedNodeMap" />
    ///  是只读的。
    ///</returns>
    property Notations: DNXmlNamedNodeMap read get_Notations;
    ///<summary>
    ///  获取上 DOCTYPE 声明的公共标识符的值。
    ///</summary>
    ///<returns>
    ///  DOCTYPE 上的公共标识符。
    ///  如果没有公共标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property PublicId: string read get_PublicId;
    ///<summary>
    ///  获取上 DOCTYPE 声明的系统标识符的值。
    ///</summary>
    ///<returns>
    ///  DOCTYPE 上的系统标识符。
    ///  如果没有系统标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property SystemId: string read get_SystemId;
    ///<summary>
    ///  获取文档类型定义 (DTD) 内部子集中的值上的 DOCTYPE 声明。
    ///</summary>
    ///<returns>
    ///  DTD 内部子集上 DOCTYPE。
    ///  如果没有 DTD 内部子集，则返回 String.Empty。
    ///</returns>
    property InternalSubset: string read get_InternalSubset;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property Value: string read get_Value write set_Value;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlDocumentType = class(TDNGenericImport<DNXmlDocumentTypeClass, DNXmlDocumentType>) end;

  //-------------namespace: System.Xml----------------
  DNXmlElementClass = interface(DNXmlLinkedNodeClass)
  ['{95FBF49A-C7B8-52DE-9824-77FC0B51F4A3}']
  end;

  ///<summary>
  ///  表示元素。
  ///</summary>
  [DNTypeName('System.Xml.XmlElement')]
  DNXmlElement = interface(DNXmlLinkedNode)
  ['{4F4034C5-F0F2-3631-965C-95B3A6E74446}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_ParentNode: DNXmlNode;
    function get_OwnerDocument: DNXmlDocument;
    function get_IsEmpty: Boolean;
    procedure set_IsEmpty(value: Boolean);
    function get_Attributes: DNXmlAttributeCollection;
    function get_HasAttributes: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NextSibling: DNXmlNode;
    function get_PreviousSibling: DNXmlNode;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ChildNodes: DNXmlNodeList;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身（如果节点是 <see langword="XmlElement" />
    ///  ，还克隆其属性），则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  返回具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  要检索的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
    ///</returns>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  设置具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  要创建或更改的属性的名称。
    ///  这是限定名。
    ///  如果名称包含的冒号将它解析为前缀和本地名称组件。
    ///</param>
    ///  <param name="value">
    ///  要为该属性设置的值。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  指定的名称包含无效字符。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure SetAttribute(name: string; value: string); overload;
    ///<summary>
    ///  按名称删除特性。
    ///</summary>
    ///  <param name="name">
    ///  要删除的特性的名称。该名称限定名称。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure RemoveAttribute(name: string); overload;
    ///<summary>
    ///  返回具有指定名称的 <see langword="XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要检索的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />
    ///  ；如果未找到，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttributeNode(name: string): DNXmlAttribute; overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="newAttr"><see langword="XmlAttribute" />
    ///  节点将添加到此元素的属性集合。
    ///</param>
    ///<returns>
    ///  如果特性将取代现有属性具有相同名称，旧 <see langword="XmlAttribute" />
    ///  返回; 否则为 <see langword="null" />
    ///  返回。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="newAttr" />
    ///  从创建此节点比不同文档创建。
    ///  或此节点是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="newAttr" />
    ///  已经是另一个属性 <see langword="XmlElement" />
    ///  对象。
    ///  您必须显式克隆 <see langword="XmlAttribute" />
    ///  节点重新使用它们在其他 <see langword="XmlElement" />
    ///  对象。
    ///</exception>
    function SetAttributeNode(newAttr: DNXmlAttribute): DNXmlAttribute; overload;
    ///<summary>
    ///  移除指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="oldAttr"><see langword="XmlAttribute" />
    ///  要移除的节点。
    ///  如果移除的属性具有默认值，则立即将其替换。
    ///</param>
    ///<returns>
    ///  移除 <see langword="XmlAttribute" />
    ///  或 <see langword="null" />
    ///  如果 <paramref name="oldAttr" />
    ///  不是属性节点的 <see langword="XmlElement" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception>
    function RemoveAttributeNode(oldAttr: DNXmlAttribute): DNXmlAttribute; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlElement.Name" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="name">
    ///  要匹配的名称标记。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///  星号 (*) 是匹配所有标记的特殊值。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果不存在任何匹配节点，则该列表为空。
    ///</returns>
    function GetElementsByTagName(name: string): DNXmlNodeList; overload;
    ///<summary>
    ///  返回具有指定的本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  要检索的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性检索。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到匹配属性，或者如果此属性没有指定值或默认值，则返回空字符串。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  设置具有指定的本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  要为该属性设置的值。
    ///</param>
    ///<returns>
    ///  特性值。
    ///</returns>
    function SetAttribute(localName: string; namespaceURI: string; value: string): string; overload;
    ///<summary>
    ///  删除具有指定的本地名称和命名空间 URI 的属性。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="localName">
    ///  要移除的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性中删除。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的。
    ///</exception>
    procedure RemoveAttribute(localName: string; namespaceURI: string); overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlAttribute" />
    ///  具有指定的本地名称和命名空间 URI。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的属性，则为指定的 <see langword="XmlAttribute" />
    ///  ；如果未找到，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  添加指定 <see cref="T:System.Xml.XmlAttribute" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  要添加的 <see langword="XmlAttribute" />
    ///  。
    ///</returns>
    function SetAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  删除 <see cref="T:System.Xml.XmlAttribute" />
    ///  指定本地名称和命名空间 URI。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  移除 <see langword="XmlAttribute" />
    ///  或 <see langword="null" />
    ///  如果 <see langword="XmlElement" />
    ///  没有匹配的属性节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception>
    function RemoveAttributeNode(localName: string; namespaceURI: string): DNXmlAttribute; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlNodeList" />
    ///  ，它包含与指定 <see cref="P:System.Xml.XmlElement.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlElement.NamespaceURI" />
    ///  匹配的所有子代元素的列表。
    ///</summary>
    ///  <param name="localName">
    ///  要匹配的本地名称。
    ///  星号 (*) 是匹配所有标记的特殊值。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 相匹配。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  ，包含所有匹配节点的列表。
    ///  如果不存在任何匹配节点，则该列表为空。
    ///</returns>
    function GetElementsByTagName(localName: string; namespaceURI: string): DNXmlNodeList; overload;
    ///<summary>
    ///  确定当前节点是否具有带有指定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  要查找的属性的名称。
    ///  这是限定名。
    ///  它针对匹配节点的 <see langword="Name" />
    ///  属性进行匹配。
    ///</param>
    ///<returns>
    ///  如果当前节点具有指定的属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  确定当前节点是否具有指定的本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  要查找的属性本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性查找。
    ///</param>
    ///<returns>
    ///  如果当前节点具有指定的属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasAttribute(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将当前节点保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  从元素中删除具有指定索引的特性节点。
    ///  （如果删除的特性具有默认值时，则将立即替换它）。
    ///</summary>
    ///  <param name="i">
    ///  要删除的节点的索引。
    ///  第一个节点的索引为 0。
    ///</param>
    ///<returns>
    ///  已删除的特性节点；若给定索引处无节点则为 <see langword="null" />
    ///  。
    ///</returns>
    function RemoveAttributeAt(i: Int32): DNXmlNode;
    ///<summary>
    ///  从元素中删除所有指定的属性。
    ///  不删除默认属性。
    ///</summary>
    procedure RemoveAllAttributes;
    ///<summary>
    ///  删除当前节点的所有指定特性和子级。
    ///  不删除默认属性。
    ///</summary>
    procedure RemoveAll;
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  节点的限定名称。
    ///  对于 <see langword="XmlElement" />
    ///  节点，这是元素的标记名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  是 book。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  该节点是只读的
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  该节点的 namespaceURI 为 <see langword="null" />
    ///  。
    ///  指定的前缀为“xml”，而该节点的 namespaceURI 与 http://www.w3.org/XML/1998/namespace 不同。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlElement" />
    ///  节点，此值是 XmlNodeType.Element。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于节点的 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  此元素所属的 <see langword="XmlDocument" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取或设置元素的标记格式。
    ///</summary>
    ///<returns>
    ///  如果元素将以标记短格式“&lt;item/&gt;”序列化，则返回 <see langword="true" />
    ///  ；对于长格式“&lt;item&gt;&lt;/item&gt;”，则为 <see langword="false" />
    ///  。
    ///  在设置此属性时，如果设置为 <see langword="true" />
    ///  ，将删除元素的子级，并且以短标记格式序列化该元素。
    ///  如果设置为 <see langword="false" />
    ///  ，将更改属性值（无论元素是否有内容）；如果该元素为空，则会采用长格式序列化。
    ///  此属性是文档对象模型 (DOM) 的 Microsoft 扩展。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty write set_IsEmpty;
    ///<summary>
    ///  获取包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  包含此节点的属性列表的 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取一个 <see langword="boolean" />
    ///  值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取或设置仅表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  此节点子级的标记。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  设置此属性时指定的 XML 格式不正确。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取或设置节点及其所有子级的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNode" />
    ///  紧接在此元素。
    ///</summary>
    ///<returns><see langword="XmlNode" />
    ///  紧接在此元素。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    property Value: string read get_Value write set_Value;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlElement = class(TDNGenericImport<DNXmlElementClass, DNXmlElement>) end;

  //-------------namespace: System.Xml----------------
  DNXmlEntityReferenceClass = interface(DNXmlLinkedNodeClass)
  ['{90401A09-6381-574B-823A-E3F8F43DAFCD}']
  end;

  ///<summary>
  ///  表示实体引用节点。
  ///</summary>
  [DNTypeName('System.Xml.XmlEntityReference')]
  DNXmlEntityReference = interface(DNXmlLinkedNode)
  ['{A49C5C6E-C1A3-30E6-AED4-6AB2D32BA301}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_BaseURI: string;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此方法始终返回无子项的实体引用节点。
    ///  当将节点插入父级时，设置替换文本。
    ///</param>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的名称。
    ///</summary>
    ///<returns>
    ///  引用的实体的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此属性返回引用的实体的名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  节点的值。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  设置的属性。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlEntityReference" />
    ///  节点，该值是 XmlNodeType.EntityReference。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlEntityReference" />
    ///  节点是只读的此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取当前节点的基础统一资源标识符 (URI)。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property InnerText: string read get_InnerText write set_InnerText;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlEntityReference = class(TDNGenericImport<DNXmlEntityReferenceClass, DNXmlEntityReference>) end;

  //-------------namespace: System.Xml----------------
  DNXmlProcessingInstructionClass = interface(DNXmlLinkedNodeClass)
  ['{A00F64E7-9C95-55E8-BE6E-9B41100EE844}']
  end;

  ///<summary>
  ///  表示一条处理指令，XML 定义该处理指令以将处理器特定的信息保存在文档的文本中。
  ///</summary>
  [DNTypeName('System.Xml.XmlProcessingInstruction')]
  DNXmlProcessingInstruction = interface(DNXmlLinkedNode)
  ['{2550041F-0896-38C3-9876-092B4D27211E}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_Value: string;
    procedure set_Value(value: string);
    function get_Target: string;
    function get_Data: string;
    procedure set_Data(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_NodeType: DNXmlNodeType;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_IsReadOnly: Boolean;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  重复节点。
    ///</returns>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将该节点的所有子项保存到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  中。
    ///  因为 ProcessingInstruction 节点不具有子级，所以此方法无效。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    function CreateNavigator: DNXPathNavigator;
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    procedure Normalize;
    function Clone: DNXmlNode;
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    procedure RemoveAll;
    function GetNamespaceOfPrefix(prefix: string): string;
    function GetPrefixOfNamespace(namespaceURI: string): string;
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取节点的限定名称。
    ///</summary>
    ///<returns>
    ///  对于处理指令节点，此属性返回处理指令的目标。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取节点的本地名称。
    ///</summary>
    ///<returns>
    ///  对于处理指令节点，此属性返回处理指令的目标。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  处理指令的全部内容（目标除外）。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点是只读的。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取处理指令的目标。
    ///</summary>
    ///<returns>
    ///  处理指令的目标。
    ///</returns>
    property Target: string read get_Target;
    ///<summary>
    ///  获取或设置处理指令的内容（目标除外）。
    ///</summary>
    ///<returns>
    ///  处理指令的内容（目标除外）。
    ///</returns>
    property Data: string read get_Data write set_Data;
    ///<summary>
    ///  获取或设置节点及其所有子级的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子级的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlProcessingInstruction" />
    ///  节点，该值是 XmlNodeType.ProcessingInstruction。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see cref="T:System.Xml.XmlNode" />
    ///  或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  紧随该节点或 <see langword="null" />
    ///  如果不存在。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    property ParentNode: DNXmlNode read get_ParentNode;
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    property FirstChild: DNXmlNode read get_FirstChild;
    property LastChild: DNXmlNode read get_LastChild;
    property HasChildNodes: Boolean read get_HasChildNodes;
    property NamespaceURI: string read get_NamespaceURI;
    property Prefix: string read get_Prefix write set_Prefix;
    property IsReadOnly: Boolean read get_IsReadOnly;
    property OuterXml: string read get_OuterXml;
    property InnerXml: string read get_InnerXml write set_InnerXml;
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlProcessingInstruction = class(TDNGenericImport<DNXmlProcessingInstructionClass, DNXmlProcessingInstruction>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNotationClass = interface(DNXmlNodeClass)
  ['{B4568DBC-491D-59E9-AC4E-B505B14EA8BF}']
  end;

  ///<summary>
  ///  表示一个表示法声明，如 &lt; ！表示法 … &gt;。
  ///</summary>
  [DNTypeName('System.Xml.XmlNotation')]
  DNXmlNotation = interface(DNXmlNode)
  ['{E0331AF9-CC77-3962-9CAF-E24976945240}']
  { getters & setters } 

    function get_Name: string;
    function get_LocalName: string;
    function get_NodeType: DNXmlNodeType;
    function get_IsReadOnly: Boolean;
    function get_PublicId: string;
    function get_SystemId: string;
    function get_OuterXml: string;
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;
    procedure set_Value(value: string);
    function get_ParentNode: DNXmlNode;
    function get_ChildNodes: DNXmlNodeList;
    function get_PreviousSibling: DNXmlNode;
    function get_NextSibling: DNXmlNode;
    function get_Attributes: DNXmlAttributeCollection;
    function get_OwnerDocument: DNXmlDocument;
    function get_FirstChild: DNXmlNode;
    function get_LastChild: DNXmlNode;
    function get_HasChildNodes: Boolean;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    procedure set_Prefix(value: string);
    function get_InnerText: string;
    procedure set_InnerText(value: string);
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_BaseURI: string;
    function get_Item(name: string): DNXmlElement; overload;
    function get_Item(localname: string; ns: string): DNXmlElement; overload;
    function get_PreviousText: DNXmlNode;

  { methods } 

    ///<summary>
    ///  创建此节点的副本。
    ///  无法克隆这些节点表示法。
    ///  对调用此方法 <see cref="T:System.Xml.XmlNotation" />
    ///  对象会引发异常。
    ///</summary>
    ///  <param name="deep">
    ///  若要递归地克隆指定节点下的子树，则为 <see langword="true" />
    ///  ；若仅克隆节点本身，则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  从中调用该方法的节点的副本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法克隆这些节点表示法。
    ///  对调用此方法 <see cref="T:System.Xml.XmlNotation" />
    ///  对象会引发异常。
    ///</exception>
    function CloneNode(deep: Boolean): DNXmlNode;
    ///<summary>
    ///  将节点保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  此方法不起任何作用 <see langword="XmlNotation" />
    ///  节点。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteTo(w: DNXmlWriter);
    ///<summary>
    ///  将节点的子级保存到指定 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  此方法不起任何作用 <see langword="XmlNotation" />
    ///  节点。
    ///</summary>
    ///  <param name="w">
    ///  要保存到其中的 <see langword="XmlWriter" />
    ///  。
    ///</param>
    procedure WriteContentTo(w: DNXmlWriter);
    ///<summary>
    ///  创建 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用于定位此对象。
    ///</summary>
    ///<returns><see langword="XPathNavigator" />
    ///  对象，用于导航节点。
    ///<see langword="XPathNavigator" />
    ///  定位从中调用该方法的节点上。
    ///  它不定位在文档的根上。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXmlNode; overload;
    ///<summary>
    ///  选择第一个 <see langword="XmlNode" />
    ///  ，与 XPath 表达式匹配。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns>
    ///  第一个 <see langword="XmlNode" />
    ///  匹配 XPath 查询或 <see langword="null" />
    ///  如果不找到任何匹配节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectSingleNode(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNode; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式包含的前缀。
    ///  请参阅 XPath 示例。
    ///</exception>
    function SelectNodes(xpath: string): DNXmlNodeList; overload;
    ///<summary>
    ///  选择匹配 XPath 表达式的节点列表。
    ///  使用所提供解析 XPath 表达式中找到的任何前缀 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///  请参阅 XPath 示例。
    ///</param>
    ///  <param name="nsmgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  以用于解析 XPath 表达式中的前缀的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeList" />
    ///  包含匹配 XPath 查询的节点集合。
    ///</returns>
    ///<exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式中包含的前缀中未定义 <see langword="XmlNamespaceManager" />
    ///  。
    ///</exception>
    function SelectNodes(xpath: string; nsmgr: DNXmlNamespaceManager): DNXmlNodeList; overload;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之前。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newChild" />
    ///  放置在该节点之前。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertBefore(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点紧接着插入指定的引用节点之后。
    ///</summary>
    ///  <param name="newChild">
    ///  要插入的 <see langword="XmlNode" />
    ///  。
    ///</param>
    ///  <param name="refChild"><see langword="XmlNode" />
    ///  ，它是引用节点。
    ///  <paramref name="newNode" />
    ///  放在 <paramref name="refNode" />
    ///  。
    ///</param>
    ///<returns>
    ///  插入的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  <paramref name="refChild" />
    ///  不是此节点的子级。
    ///  此节点是只读的。
    ///</exception>
    function InsertAfter(newChild: DNXmlNode; refChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  替换子节点 <paramref name="oldChild" />
    ///  与 <paramref name="newChild" />
    ///  节点。
    ///</summary>
    ///  <param name="newChild">
    ///  要放入子列表的新节点。
    ///</param>
    ///  <param name="oldChild">
    ///  列表中正在被替换的节点。
    ///</param>
    ///<returns>
    ///  被替换的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///  <paramref name="oldChild" />
    ///  不是此节点的子级。
    ///</exception>
    function ReplaceChild(newChild: DNXmlNode; oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  移除指定的子节点。
    ///</summary>
    ///  <param name="oldChild">
    ///  正在被移除的节点。
    ///</param>
    ///<returns>
    ///  已移除的节点。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="oldChild" />
    ///  不是此节点的子级。
    ///  或此节点是只读的。
    ///</exception>
    function RemoveChild(oldChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的开头。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function PrependChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将指定的节点添加到该节点的子节点列表的末尾。
    ///</summary>
    ///  <param name="newChild">
    ///  要添加的节点。
    ///  要添加的节点的全部内容会移动到指定位置。
    ///</param>
    ///<returns>
    ///  添加的节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  此节点是不允许子的类型的节点的类型 <paramref name="newChild" />
    ///  节点。
    ///  <paramref name="newChild" />
    ///  是此节点的祖先。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="newChild" />
    ///  从创建此节点比不同文档创建。
    ///  此节点是只读的。
    ///</exception>
    function AppendChild(newChild: DNXmlNode): DNXmlNode;
    ///<summary>
    ///  将此 XmlNode 下子树完全深度中的所有 XmlText 节点都转换成“正常”形式，在这种形式中只有标记（即标记、注释、处理指令、CDATA 节和实体引用）分隔 XmlText 节点，也就是说，没有相邻的 XmlText 节点。
    ///</summary>
    procedure Normalize;
    ///<summary>
    ///  创建此节点的副本。
    ///</summary>
    ///<returns>
    ///  克隆的节点。
    ///</returns>
    function Clone: DNXmlNode;
    ///<summary>
    ///  获取循环访问当前节点中子节点的枚举。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  可用于循环访问当前节点中的子节点的对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  移除当前节点的所有子节点和/或属性。
    ///</summary>
    procedure RemoveAll;
    ///<summary>
    ///  查找最接近 xmlns 为给定的前缀的当前节点范围内，在声明中返回的命名空间 URI 声明。
    ///</summary>
    ///  <param name="prefix">
    ///  你想查找的命名空间 URI 的前缀。
    ///</param>
    ///<returns>
    ///  指定前缀的命名空间 URI。
    ///</returns>
    function GetNamespaceOfPrefix(prefix: string): string;
    ///<summary>
    ///  查找最接近 xmlns 位于给定命名空间 URI，它用于当前节点范围内，并返回声明中定义的前缀声明。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的命名空间 URI 的前缀。
    ///</returns>
    function GetPrefixOfNamespace(namespaceURI: string): string;
    ///<summary>
    ///  测试 DOM 实现是否实现特定的功能。
    ///</summary>
    ///  <param name="feature">
    ///  要测试的功能的程序包名称。
    ///  该名称不区分大小写。
    ///</param>
    ///  <param name="version">
    ///  要测试的程序包名称的版本号。
    ///  如果不指定版本 (null)，则支持该功能的任何版本会导致方法返回 true。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果在指定的版本; 中实现该功能否则为 <see langword="false" />
    ///  。
    ///  下表描述了返回的组合 <see langword="true" />
    ///  。
    ///  功能
    ///  版本
    ///  XML
    ///  1.0
    ///  XML
    ///  2.0
    ///</returns>
    function Supports(feature: string; version: string): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的名称。
    ///</summary>
    ///<returns>
    ///  批注的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点没有命名空间前缀的名称。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlNotation" />
    ///  节点，此属性返回表示法的名称。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  节点类型。
    ///  有关 <see langword="XmlNotation" />
    ///  节点，则这是 XmlNodeType.Notation。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取指示节点是否只读的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果节点是只读的;否则为 <see langword="false" />
    ///  。
    ///  因为 <see langword="XmlNotation" />
    ///  节点是只读的此属性始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsReadOnly: Boolean read get_IsReadOnly;
    ///<summary>
    ///  获取此表示法声明的公共标识符的值。
    ///</summary>
    ///<returns>
    ///  此表示法公共标识符。
    ///  如果没有公共标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property PublicId: string read get_PublicId;
    ///<summary>
    ///  获取表示法声明上的系统标识符的值。
    ///</summary>
    ///<returns>
    ///  此表示法系统标识符。
    ///  如果没有系统标识符， <see langword="null" />
    ///  返回。
    ///</returns>
    property SystemId: string read get_SystemId;
    ///<summary>
    ///  获取表示此节点及其所有子级的标记。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlNotation" />
    ///  节点，则返回 String.Empty。
    ///</returns>
    property OuterXml: string read get_OuterXml;
    ///<summary>
    ///  获取表示此节点的子级的标记。
    ///</summary>
    ///<returns>
    ///  有关 <see langword="XmlNotation" />
    ///  节点，则返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  尝试将设置该属性。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  获取或设置节点的值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于<see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点︰
    ///  类型
    ///  值
    ///  特性
    ///  属性的值。
    ///  CDATASection
    ///  CDATA 节的内容。
    ///  注释
    ///  注释的内容。
    ///  Document
    ///<see langword="null" />
    ///  。
    ///  DocumentFragment
    ///<see langword="null" />
    ///  。
    ///  DocumentType
    ///<see langword="null" />
    ///  。
    ///  元素
    ///<see langword="null" />
    ///  。
    ///  你可以使用<see cref="P:System.Xml.XmlElement.InnerText" />
    ///  或<see cref="P:System.Xml.XmlElement.InnerXml" />
    ///  属性来访问元素节点的值。
    ///  实体
    ///<see langword="null" />
    ///  。
    ///  EntityReference
    ///<see langword="null" />
    ///  。
    ///  Notation
    ///<see langword="null" />
    ///  。
    ///  ProcessingInstruction
    ///  全部内容（不包括指令目标）。
    ///  Text
    ///  文本节点的内容。
    ///  SignificantWhitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  Whitespace
    ///  空格字符。
    ///  空白可由一个或多个空格字符、回车符、换行符或制表符组成。
    ///  XmlDeclaration
    ///  声明 （即，之间的所有内容的内容&lt;?xml and=""?&gt;).
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  节点的值设置为只读。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  不应该具有值 （例如，元素节点） 的节点的值设置。
    ///</exception>
    property Value: string read get_Value write set_Value;
    ///<summary>
    ///  获取该节点的父级（针对可以拥有父级的节点）。
    ///</summary>
    ///<returns>
    ///  作为当前节点父级的 <see langword="XmlNode" />
    ///  。
    ///  如果刚刚创建了一个节点且尚未将其添加到树中，或如果已从树中移除了该节点，则父级为 <see langword="null" />
    ///  。
    ///  对于所有其他节点，返回的值取决于 <see cref="P:System.Xml.XmlNode.NodeType" />
    ///  的节点。
    ///  下表描述了 <see langword="ParentNode" />
    ///  属性可能的返回值。
    ///  NodeType
    ///  ParentNode 的返回值
    ///  Attribute、Document、DocumentFragment、Entity、Notation
    ///  返回 <see langword="null" />
    ///  ; 这些节点不具有父级。
    ///  CDATA
    ///  返回包含 CDATA 节的元素或实体引用。
    ///  注释
    ///  返回包含注释的元素、实体引用、文档类型或文档。
    ///  DocumentType
    ///  返回文档节点。
    ///  元素
    ///  返回该元素的父节点。
    ///  如果该元素是树中的根节点，则父级是文档节点。
    ///  EntityReference
    ///  返回包含该实体引用的元素、特性或实体引用。
    ///  ProcessingInstruction
    ///  返回包含该处理指令的文档、元素、文档类型或实体引用。
    ///  Text
    ///  返回包含该文本节点的父元素、特性或实体引用。
    ///</returns>
    property ParentNode: DNXmlNode read get_ParentNode;
    ///<summary>
    ///  获取节点的所有子节点。
    ///</summary>
    ///<returns>
    ///  一个包含节点的所有子节点的对象。
    ///  如果不有任何子节点，此属性返回一个空 <see cref="T:System.Xml.XmlNodeList" />
    ///  。
    ///</returns>
    property ChildNodes: DNXmlNodeList read get_ChildNodes;
    ///<summary>
    ///  获取紧接在该节点之前的节点。
    ///</summary>
    ///<returns>
    ///  前面 <see langword="XmlNode" />
    ///  。
    ///  如果前面没有节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property PreviousSibling: DNXmlNode read get_PreviousSibling;
    ///<summary>
    ///  获取紧接在该节点之后的节点。
    ///</summary>
    ///<returns>
    ///  下一个 <see langword="XmlNode" />
    ///  。
    ///  如果没有下一个节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property NextSibling: DNXmlNode read get_NextSibling;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlAttributeCollection" />
    ///  包含此节点的属性。
    ///</summary>
    ///<returns><see langword="XmlAttributeCollection" />
    ///  包含节点的属性。
    ///  如果节点为 XmlNodeType.Element 类型，则返回该节点的属性。
    ///  否则，此属性将返回 <see langword="null" />
    ///  。
    ///</returns>
    property Attributes: DNXmlAttributeCollection read get_Attributes;
    ///<summary>
    ///  获取此节点所属的 <see cref="T:System.Xml.XmlDocument" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlDocument" />
    ///  此节点所属。
    ///  如果节点是 <see cref="T:System.Xml.XmlDocument" />
    ///  （NodeType 等于 XmlNodeType.Document），则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    property OwnerDocument: DNXmlDocument read get_OwnerDocument;
    ///<summary>
    ///  获取节点的第一个子级。
    ///</summary>
    ///<returns>
    ///  节点的第一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property FirstChild: DNXmlNode read get_FirstChild;
    ///<summary>
    ///  获取节点的最后一个子级。
    ///</summary>
    ///<returns>
    ///  节点的最后一个子级。
    ///  如果没有此类节点 <see langword="null" />
    ///  返回。
    ///</returns>
    property LastChild: DNXmlNode read get_LastChild;
    ///<summary>
    ///  获取一个值，该值指示此节点是否有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果该节点具有子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildNodes: Boolean read get_HasChildNodes;
    ///<summary>
    ///  获取该节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间 URI。
    ///  如果没有命名空间 URI，则此属性返回 String.Empty。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取或设置该节点的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  该节点的命名空间前缀。
    ///  例如， <see langword="Prefix" />
    ///  元素 &lt; bk:book &gt; 是 bk。
    ///  如果没有前缀，则该属性返回 String.Empty。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  此节点是只读的。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  指定的前缀包含无效字符。
    ///  指定的前缀格式不正确。
    ///  指定的前缀为"xml"，并且该节点的 namespaceURI 为"http://www.w3.org/XML/1998/namespace"不同。
    ///  此节点是一个属性和指定的前缀为"xmlns"，并且该节点的 namespaceURI 为不同于"http://www.w3.org/2000/xmlns/"。
    ///  此节点是属性，该节点的 qualifiedName 是"xmlns"。
    ///</exception>
    property Prefix: string read get_Prefix write set_Prefix;
    ///<summary>
    ///  获取或设置节点及其所有子节点的串连值。
    ///</summary>
    ///<returns>
    ///  节点及其所有子节点的串连值。
    ///</returns>
    property InnerText: string read get_InnerText write set_InnerText;
    ///<summary>
    ///  获取作为架构验证的结果分配给此节点的后架构验证信息集。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含此节点的后架构验证信息集。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点的位置；如果节点没有基 URI，则为 String.Empty。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    property Item[name: string]: DNXmlElement read get_Item; default;
    property Item[localname: string; ns: string]: DNXmlElement read get_Item; default;
    ///<summary>
    ///  获取紧接在该节点之前的文本节点。
    ///</summary>
    ///<returns>
    ///  返回 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</returns>
    property PreviousText: DNXmlNode read get_PreviousText;
  end;

  TDNXmlNotation = class(TDNGenericImport<DNXmlNotationClass, DNXmlNotation>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeListClass = interface(DNObjectClass)
  ['{CD04361B-0A59-52B5-8AD4-CB82A6CB6425}']
  end;

  ///<summary>
  ///  表示节点的有序集合。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeList')]
  DNXmlNodeList = interface(DDN.mscorlib.DNIEnumerable)
  ['{A82A4A5B-6914-3CC4-B7C3-EBB1D009992C}']
  { getters & setters } 

    function get_Count: Int32;
    function get_ItemOf(i: Int32): DNXmlNode;

  { methods } 

    ///<summary>
    ///  检索给定索引处的节点。
    ///</summary>
    ///  <param name="index">
    ///  中的节点列表的从零开始索引。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNode" />
    ///  具有在集合中指定的索引。
    ///  如果 <paramref name="index" />
    ///  是大于或等于的节点数在列表中，这将返回 <see langword="null" />
    ///  。
    ///</returns>
    function Item(index: Int32): DNXmlNode;
    ///<summary>
    ///  获取循环的枚举器遍历节点集合。
    ///</summary>
    ///<returns>
    ///  一个用于循环访问节点的集合的枚举。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取中的节点数 <see langword="XmlNodeList" />
    ///  。
    ///</summary>
    ///<returns>
    ///  中的节点数 <see langword="XmlNodeList" />
    ///  。
    ///</returns>
    property Count: Int32 read get_Count;
    property ItemOf[i: Int32]: DNXmlNode read get_ItemOf; default;
  end;

  TDNXmlNodeList = class(TDNGenericImport<DNXmlNodeListClass, DNXmlNodeList>) end;

  //-------------namespace: System.Xml----------------
  DNXmlParserContextClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0E6B1786-198D-5A8F-8792-DB639A99D507}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see langword="XmlParserContext" />
    ///  类与指定 <see cref="T:System.Xml.XmlNameTable" />
    ///  , ，<see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，<see langword="xml:lang" />
    ///  , ，和 <see langword="xml:space" />
    ///  值。
    ///</summary>
    ///  <param name="nt"><see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化字符串。
    ///  如果这是 <see langword="null" />
    ///  , ，用来构造的名称表 <paramref name="nsMgr" />
    ///  改为使用。
    ///  有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///  <param name="nsMgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  要用于查找命名空间信息或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xmlLang"><see langword="xml:lang" />
    ///  作用域。
    ///</param>
    ///  <param name="xmlSpace"><see cref="T:System.Xml.XmlSpace" />
    ///  值，该值指示 <see langword="xml:space" />
    ///  作用域。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="nt" />
    ///  不相同 <see langword="XmlNameTable" />
    ///  用于构造 <paramref name="nsMgr" />
    ///  。
    ///</exception>
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    ///<summary>
    ///  新实例初始化 <see langword="XmlParserContext" />
    ///  类与指定 <see cref="T:System.Xml.XmlNameTable" />
    ///  , ，<see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，<see langword="xml:lang" />
    ///  , ，<see langword="xml:space" />
    ///  , ，和编码。
    ///</summary>
    ///  <param name="nt"><see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化字符串。
    ///  如果这是 <see langword="null" />
    ///  , ，用来构造的名称表 <paramref name="nsMgr" />
    ///  改为使用。
    ///  原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///  <param name="nsMgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  要用于查找命名空间信息或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="xmlLang"><see langword="xml:lang" />
    ///  作用域。
    ///</param>
    ///  <param name="xmlSpace"><see cref="T:System.Xml.XmlSpace" />
    ///  值，该值指示 <see langword="xml:space" />
    ///  作用域。
    ///</param>
    ///  <param name="enc"><see cref="T:System.Text.Encoding" />
    ///  对象，它指示编码设置。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="nt" />
    ///  不相同 <see langword="XmlNameTable" />
    ///  用于构造 <paramref name="nsMgr" />
    ///  。
    ///</exception>
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;
    ///<summary>
    ///  新实例初始化 <see langword="XmlParserContext" />
    ///  类与指定 <see cref="T:System.Xml.XmlNameTable" />
    ///  , ，<see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，基 URI， <see langword="xml:lang" />
    ///  , ，<see langword="xml:space" />
    ///  , ，和文档类型值。
    ///</summary>
    ///  <param name="nt"><see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化字符串。
    ///  如果这是 <see langword="null" />
    ///  , ，用来构造的名称表 <paramref name="nsMgr" />
    ///  改为使用。
    ///  有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///  <param name="nsMgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  要用于查找命名空间信息或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="docTypeName">
    ///  文档类型声明的名称。
    ///</param>
    ///  <param name="pubId">
    ///  公共标识符。
    ///</param>
    ///  <param name="sysId">
    ///  系统标识符。
    ///</param>
    ///  <param name="internalSubset">
    ///  内部 DTD 子集。
    ///  DTD 子集用于实体解析，而不能用于文档验证。
    ///</param>
    ///  <param name="baseURI">
    ///  基 URI 的 xml 片段 （从中加载该片段的位置）。
    ///</param>
    ///  <param name="xmlLang"><see langword="xml:lang" />
    ///  作用域。
    ///</param>
    ///  <param name="xmlSpace"><see cref="T:System.Xml.XmlSpace" />
    ///  值，该值指示 <see langword="xml:space" />
    ///  作用域。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="nt" />
    ///  不相同 <see langword="XmlNameTable" />
    ///  用于构造 <paramref name="nsMgr" />
    ///  。
    ///</exception>
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace): DNXmlParserContext; overload;
    ///<summary>
    ///  新实例初始化 <see langword="XmlParserContext" />
    ///  类与指定 <see cref="T:System.Xml.XmlNameTable" />
    ///  , ，<see cref="T:System.Xml.XmlNamespaceManager" />
    ///  , ，基 URI， <see langword="xml:lang" />
    ///  , ，<see langword="xml:space" />
    ///  , 、 编码和文档类型值。
    ///</summary>
    ///  <param name="nt"><see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化字符串。
    ///  如果这是 <see langword="null" />
    ///  , ，用来构造的名称表 <paramref name="nsMgr" />
    ///  改为使用。
    ///  有关原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</param>
    ///  <param name="nsMgr"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  要用于查找命名空间信息或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="docTypeName">
    ///  文档类型声明的名称。
    ///</param>
    ///  <param name="pubId">
    ///  公共标识符。
    ///</param>
    ///  <param name="sysId">
    ///  系统标识符。
    ///</param>
    ///  <param name="internalSubset">
    ///  内部 DTD 子集。
    ///  DTD 用于实体解析，而不能用于文档验证。
    ///</param>
    ///  <param name="baseURI">
    ///  基 URI 的 xml 片段 （从中加载该片段的位置）。
    ///</param>
    ///  <param name="xmlLang"><see langword="xml:lang" />
    ///  作用域。
    ///</param>
    ///  <param name="xmlSpace"><see cref="T:System.Xml.XmlSpace" />
    ///  值，该值指示 <see langword="xml:space" />
    ///  作用域。
    ///</param>
    ///  <param name="enc"><see cref="T:System.Text.Encoding" />
    ///  对象，它指示编码设置。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="nt" />
    ///  不相同 <see langword="XmlNameTable" />
    ///  用于构造 <paramref name="nsMgr" />
    ///  。
    ///</exception>
    {class} function init(nt: DNXmlNameTable; nsMgr: DNXmlNamespaceManager; docTypeName: string; pubId: string; sysId: string; internalSubset: string; baseURI: string; xmlLang: string; xmlSpace: DNXmlSpace; enc: DDN.mscorlib.DNEncoding): DNXmlParserContext; overload;

  end;

  ///<summary>
  ///  提供所需的上下文信息 <see cref="T:System.Xml.XmlReader" />
  ///  来分析 XML 片段。
  ///</summary>
  [DNTypeName('System.Xml.XmlParserContext')]
  DNXmlParserContext = interface(DDN.mscorlib.DNObject)
  ['{406E8126-3D39-3708-BBD1-E5414D1C792F}']
  { getters & setters } 

    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    function get_NamespaceManager: DNXmlNamespaceManager;
    procedure set_NamespaceManager(value: DNXmlNamespaceManager);
    function get_DocTypeName: string;
    procedure set_DocTypeName(value: string);
    function get_PublicId: string;
    procedure set_PublicId(value: string);
    function get_SystemId: string;
    procedure set_SystemId(value: string);
    function get_BaseURI: string;
    procedure set_BaseURI(value: string);
    function get_InternalSubset: string;
    procedure set_InternalSubset(value: string);
    function get_XmlLang: string;
    procedure set_XmlLang(value: string);
    function get_XmlSpace: DNXmlSpace;
    procedure set_XmlSpace(value: DNXmlSpace);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化字符串。
    ///  原子化字符串的详细信息，请参阅 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNamespaceManager" />
    ///  。
    ///</returns>
    property NamespaceManager: DNXmlNamespaceManager read get_NamespaceManager write set_NamespaceManager;
    ///<summary>
    ///  获取或设置文档类型声明的名称。
    ///</summary>
    ///<returns>
    ///  文档类型声明的名称。
    ///</returns>
    property DocTypeName: string read get_DocTypeName write set_DocTypeName;
    ///<summary>
    ///  获取或设置公共标识符。
    ///</summary>
    ///<returns>
    ///  公共标识符。
    ///</returns>
    property PublicId: string read get_PublicId write set_PublicId;
    ///<summary>
    ///  获取或设置的系统标识符。
    ///</summary>
    ///<returns>
    ///  系统标识符。
    ///</returns>
    property SystemId: string read get_SystemId write set_SystemId;
    ///<summary>
    ///  获取或设置基 URI。
    ///</summary>
    ///<returns>
    ///  要用于解析 DTD 文件的基 URI。
    ///</returns>
    property BaseURI: string read get_BaseURI write set_BaseURI;
    ///<summary>
    ///  获取或设置内部 DTD 子集。
    ///</summary>
    ///<returns>
    ///  内部 DTD 子集。
    ///  例如，此属性返回的所有内容方括号 &lt;!DOCTYPE doc [...]&gt;。
    ///</returns>
    property InternalSubset: string read get_InternalSubset write set_InternalSubset;
    ///<summary>
    ///  获取或设置当前 <see langword="xml:lang" />
    ///  作用域。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///  如果没有任何 <see langword="xml:lang" />
    ///  在范围内， <see langword="String.Empty" />
    ///  返回。
    ///</returns>
    property XmlLang: string read get_XmlLang write set_XmlLang;
    ///<summary>
    ///  获取或设置当前 <see langword="xml:space" />
    ///  作用域。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlSpace" />
    ///  值，该值指示 <see langword="xml:space" />
    ///  作用域。
    ///</returns>
    property XmlSpace: DNXmlSpace read get_XmlSpace write set_XmlSpace;
    ///<summary>
    ///  获取或设置的编码类型。
    ///</summary>
    ///<returns><see cref="T:System.Text.Encoding" />
    ///  对象，它指示编码类型。
    ///</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
  end;

  TDNXmlParserContext = class(TDNGenericImport<DNXmlParserContextClass, DNXmlParserContext>) end;

  //-------------namespace: System.Xml----------------
  DNXmlQualifiedNameClass = interface(DDN.mscorlib.DNObjectClass)
  ['{990D471B-E959-556A-AFED-5552CA20D4A4}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlQualifiedName; overload;
    ///<summary>
    ///  用指定的名称初始化 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  要用作名称的本地名称 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象。
    ///</param>
    {class} function init(name: string): DNXmlQualifiedName; overload;
    ///<summary>
    ///  用指定的名称和命名空间初始化 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="name">
    ///  要用作名称的本地名称 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象。
    ///</param>
    ///  <param name="ns">
    ///  命名空间 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象。
    ///</param>
    {class} function init(name: string; ns: string): DNXmlQualifiedName; overload;

  { static fields getter & setter } 

   function __fakeFieldGet_Empty: DNXmlQualifiedName;

  { static fields } 

    ///<summary>
    ///  提供了一个空 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</summary>
    {class} property Empty: DNXmlQualifiedName read __fakeFieldGet_Empty;

  { static methods } 

    ///<summary>
    ///  返回的字符串值 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  对象的名称。
    ///</param>
    ///  <param name="ns">
    ///  对象的命名空间。
    ///</param>
    ///<returns>
    ///  字符串值 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  的格式为 <see langword="namespace:localname" />
    ///  。
    ///  如果该对象不具有定义的命名空间，此方法将返回只是本地名称。
    ///</returns>
    {class} function ToString(name: string; ns: string): string; overload;

  end;

  ///<summary>
  ///  表示 XML 限定名称。
  ///</summary>
  [DNTypeName('System.Xml.XmlQualifiedName')]
  DNXmlQualifiedName = interface(DDN.mscorlib.DNObject)
  ['{74BB3238-7944-3CD8-8790-E945BBE5866E}']
  { getters & setters } 

    function get_Namespace: string;
    function get_Name: string;
    function get_IsEmpty: Boolean;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  的哈希代码。
    ///</summary>
    ///<returns>
    ///  此对象的哈希代码。
    ///</returns>
    function GetHashCode: Int32;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象是否等于当前 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象。
    ///</summary>
    ///  <param name="other">
    ///  要比较的 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个相同的实例对象;否则为 <see langword="false" />
    ///  。
    ///</returns>
    function Equals(other: DDN.mscorlib.DNObject): Boolean;
    ///<summary>
    ///  返回的字符串值 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串值 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  的格式为 <see langword="namespace:localname" />
    ///  。
    ///  如果该对象不具有定义的命名空间，此方法将返回只是本地名称。
    ///</returns>
    function ToString: string; overload;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取的命名空间的字符串表示 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串表示形式的命名空间或 String.Empty，如果没有为该对象定义命名空间。
    ///</returns>
    property Namespace: string read get_Namespace;
    ///<summary>
    ///  获取的限定名称的字符串表示 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  。
    ///</summary>
    ///<returns>
    ///  字符串表示形式的限定的名称或 String.Empty，如果为该对象未定义的名称。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取一个值，该值指示是否 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  为空。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果名称和命名空间为空字符串;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmpty: Boolean read get_IsEmpty;
  end;

  TDNXmlQualifiedName = class(TDNGenericImport<DNXmlQualifiedNameClass, DNXmlQualifiedName>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderClass = interface(DNObjectClass)
  ['{BED71FF4-9350-5FA7-AEB4-E4B0CBD7BE7A}']
  { static methods } 

    ///<summary>
    ///  返回一个值，该值指示字符串自变量是否是有效的 XML 名称。
    ///</summary>
    ///  <param name="str">
    ///  要验证的名称。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果该名称是否有效;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsName(str: string): Boolean;
    ///<summary>
    ///  返回一个值，该值指示该字符串自变量是否是有效的 XML 名称标记。
    ///</summary>
    ///  <param name="str">
    ///  要验证的名称标记。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果它是有效的名称的标记;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="str" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function IsNameToken(str: string): Boolean;
    ///<summary>
    ///  用指定的 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="inputUri">
    ///  包含 XML 数据的文件的 URI。
    ///<see cref="T:System.Xml.XmlUrlResolver" />
    ///  类用于将路径转换为规范化数据表示形式。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" />
    ///  没有足够的权限访问 XML 数据的位置。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  由 URI 标识的文件不存在。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />
    ///  。
    ///  URI 格式不正确。
    ///</exception>
    {class} function Create(inputUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的 URI 和设置创建新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="inputUri">
    ///  包含 XML 数据的文件的 URI。
    ///<see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象上的 <see cref="T:System.Xml.XmlResolver" />
    ///  对象用于将路径转换为规范化数据表示形式。
    ///  如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" />
    ///  为 <see langword="null" />
    ///  ，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  对象。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到 URI 指定的文件。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  在适用于 Windows 应用商店应用的 .NET 或可移植类库中，改为捕获基类异常 <see cref="T:System.FormatException" />
    ///  。
    ///  URI 格式不正确。
    ///</exception>
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的 URI、设置和进行分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="inputUri">
    ///  包含 XML 数据的文件的 URI。
    ///<see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象上的 <see cref="T:System.Xml.XmlResolver" />
    ///  对象用于将路径转换为规范化数据表示形式。
    ///  如果 <see cref="P:System.Xml.XmlReaderSettings.XmlResolver" />
    ///  为 <see langword="null" />
    ///  ，则使用新的 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  对象。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inputContext">
    ///  分析 XML 片段所需的上下文信息.
    ///  上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see langword="inputUri" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" />
    ///  没有足够的权限访问 XML 数据的位置。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Xml.XmlReaderSettings.NameTable" />
    ///  和 <see cref="P:System.Xml.XmlParserContext.NameTable" />
    ///  属性都包含值。
    ///  （只能设置并使用这些 <see langword="NameTable" />
    ///  属性之中的一个）。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到 URI 指定的文件。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  URI 格式不正确。
    ///</exception>
    {class} function Create(inputUri: string; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    ///<summary>
    ///  使用带默认设置的指定流创建新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Security.SecurityException"><see cref="T:System.Xml.XmlReader" />
    ///  没有足够的权限访问 XML 数据的位置。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的流和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的流、基 URI 和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="baseUri">
    ///  正在读取的实体或文档的基 URI。
    ///  此值可为 <see langword="null" />
    ///  。
    ///  “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
    ///  不要使用来自非信任源的基 URI。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的流、设置和用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  包含 XML 数据的流。
    ///<see cref="T:System.Xml.XmlReader" />
    ///  对流的前几个字节进行扫描，查找字节顺序标记或其他编码标志。
    ///  在确定编码方式后，使用该编码方式继续读取流，而处理过程继续将输入内容分析为 (Unicode) 字符流。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inputContext">
    ///  分析 XML 片段所需的上下文信息.
    ///  上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNStream; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器、设置和基 URI 创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，<see cref="T:System.Xml.XmlReader" />
    ///  未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="baseUri">
    ///  正在读取的实体或文档的基 URI。
    ///  此值可为 <see langword="null" />
    ///  。
    ///  “安全说明”   基 URI 用于解析 XML 文档的相对 URI。
    ///  不要使用来自非信任源的基 URI。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; baseUri: string): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的文本读取器、设置和要用于分析的上下文信息创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="input">
    ///  从其中读取 XML 数据的文本读取器。
    ///  由于文本读取器返回的是 Unicode 字符流，因此，XML 读取器未使用 XML 声明中指定的编码对数据流进行解码。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="inputContext">
    ///  分析 XML 片段所需的上下文信息.
    ///  上下文信息可以包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码、命名空间范围、当前的 xml:lang 和 xml:space 范围、基 URI 和文档类型定义。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个用于读取数据流中所含数据的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="P:System.Xml.XmlReaderSettings.NameTable" />
    ///  和 <see cref="P:System.Xml.XmlParserContext.NameTable" />
    ///  属性都包含值。
    ///  （只能设置并使用这些 <see langword="NameTable" />
    ///  属性之中的一个）。
    ///</exception>
    {class} function Create(input: DDN.mscorlib.DNTextReader; settings: DNXmlReaderSettings; inputContext: DNXmlParserContext): DNXmlReader; overload;
    ///<summary>
    ///  使用指定的 XML 读取器和设置创建一个新的 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///  <param name="reader">
    ///  要用作基础 XML 编写器的对象。
    ///</param>
    ///  <param name="settings">
    ///  新 <see cref="T:System.Xml.XmlReader" />
    ///  实例的设置。
    ///<see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象的一致性级别要么必须与基础读取器的一致性级别匹配，要么必须设置为 <see cref="F:System.Xml.ConformanceLevel.Auto" />
    ///  。
    ///</param>
    ///<returns>
    ///  在指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象周围包装的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  如果 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象指定的一致性级别与基础读取器一致性级别不一致。
    ///  - 或 -
    ///  基础 <see cref="T:System.Xml.XmlReader" />
    ///  处于 <see cref="F:System.Xml.ReadState.Error" />
    ///  或 <see cref="F:System.Xml.ReadState.Closed" />
    ///  状态。
    ///</exception>
    {class} function Create(reader: DNXmlReader; settings: DNXmlReaderSettings): DNXmlReader; overload;

  end;

  ///<summary>
  ///  表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。
  ///  若要浏览此类型的.NET Framework 源代码，请参阅 Reference Source。
  ///</summary>
  [DNTypeName('System.Xml.XmlReader')]
  DNXmlReader = interface(DDN.mscorlib.DNIDisposable)
  ['{E265CBE9-7445-3F96-8618-DA44B4ECEF45}']
  { getters & setters } 

    function get_Settings: DNXmlReaderSettings;
    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_AttributeCount: Int32;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { methods } 

    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see langword="Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBoolean: Boolean;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  将当前位置的文本内容作为双精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDouble: Double;
    ///<summary>
    ///  将当前位置的文本内容作为单精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的当前位置的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsFloat: Single;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  作为将当前位置的文本内容 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将当前位置的文本内容作为 32 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsInt: Int32;
    ///<summary>
    ///  将当前位置的文本内容作为 64 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsLong: Int64;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsString: string;
    ///<summary>
    ///  将内容作为指定类型的对象读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///  例如，将 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象转换为 xs:string 时可以使用此对象。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  内容不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="returnType" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是受支持的节点类型。
    ///  请参阅下的表以了解详细信息。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中被重写时，移动到具有指定索引的属性。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  参数具有值为负。
    ///</exception>
    procedure MoveToAttribute(i: Int32); overload;
    ///<summary>
    ///  当在派生类中重写，将更改 <see cref="P:System.Xml.XmlReader.ReadState" />
    ///  到 <see cref="F:System.Xml.ReadState.Closed" />
    ///  。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Close;
    ///<summary>
    ///  跳过当前节点的子级。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Skip;
    ///<summary>
    ///  读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" />
    ///  是 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据格式不正确。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  当在派生类中被重写时，将元素或文本节点的内容当做字符串读取。
    ///  但是，我们建议你使用 <see cref="Overload:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  元素的内容或空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadString: string;
    ///<summary>
    ///  检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />
    ///  , ，<see langword="Element" />
    ///  , ，<see langword="EndElement" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  ) 节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///  它跳过以下类型的节点：<see langword="ProcessingInstruction" />
    ///  、<see langword="DocumentType" />
    ///  、<see langword="Comment" />
    ///  、<see langword="Whitespace" />
    ///  或 <see langword="SignificantWhitespace" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Xml.XmlReader.NodeType" />
    ///  方法找到的当前节点或 <see langword="XmlNodeType.None" />
    ///  如果读取器已到达输入流的末尾。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToContent: DNXmlNodeType;
    ///<summary>
    ///  检查当前节点是否为元素并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.Name" />
    ///  不匹配的元素的给定 <paramref name="name" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(name: string); overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="name">
    ///  要检查的名称。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" />
    ///  与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(name: string): string; overload;
    ///<summary>
    ///  检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadEndElement;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  找到开始标记还是空元素标记; <see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement: Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的参数匹配。
    ///</summary>
    ///  <param name="name">
    ///  匹配的字符串 <see langword="Name" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是元素与 <see langword="Name" />
    ///  属性与指定的字符串匹配。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果该元素 <see langword="Name" />
    ///  属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(name: string): Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的字符串匹配。
    ///</summary>
    ///  <param name="localname">
    ///  要匹配的字符串 <see langword="LocalName" />
    ///  找到的元素的属性。
    ///</param>
    ///  <param name="ns">
    ///  要匹配的字符串 <see langword="NamespaceURI" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是一个元素。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果 <see langword="LocalName" />
    ///  和 <see langword="NamespaceURI" />
    ///  元素的属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定限定名的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToFollowing(name: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定限定名的子代元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToDescendant(name: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定的本地名称和命名空间 URI 的子代元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see langword="XmlReader" />
    ///  到下一个具有指定限定名的同级元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的同级元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的同级元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的同级元素， <see langword="XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的父元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToNextSibling(name: string): Boolean; overload;
    ///<summary>
    ///  将 <see langword="XmlReader" />
    ///  推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的同级元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  你希望移动到的同级元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的同级元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果没有找到匹配的同级元素，<see langword="XmlReader" />
    ///  会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  为 <see langword="XmlNodeType.EndElement" />
    ///  ）上。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  两个参数值均为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///  如果当前节点既非元素，也非属性，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadInnerXml: string;
    ///<summary>
    ///  当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadOuterXml: string;
    ///<summary>
    ///  返回一个新 <see langword="XmlReader" />
    ///  能用于读取当前节点及其所有子代的实例。
    ///</summary>
    ///<returns>
    ///  新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />
    ///  。
    ///  调用 <see cref="M:System.Xml.XmlReader.Read" />
    ///  方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用此方法时，XML 读取器未定位在元素上。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取该流的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    ///<summary>
    ///  异步跳过当前节点的子级。
    ///</summary>
    ///<returns>
    ///  当前节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function SkipAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步检查当前节点是否为内容节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///</summary>
    ///<returns>
    ///  此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  ；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能为请求的类型转换的元素内容
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean: Boolean; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  读取当前元素并将内容作为双精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为双精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble: Double; overload;
    ///<summary>
    ///  读取当前元素并将内容作为单精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat: Single; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt: Int32; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong: Int64; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString: string; overload;
    ///<summary>
    ///  将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.Name" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果找不到属性或值为 <see langword="String.Empty" />
    ///  , ，<see langword="null" />
    ///  返回。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  当在派生类中重写时获取具有指定属性的值 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果找不到属性或值为 <see langword="String.Empty" />
    ///  , ，<see langword="null" />
    ///  返回。
    ///  此方法不移动读取器。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  当在派生类中被重写时，获取具有指定索引的属性的值。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///  索引是从零开始的。
    ///  （第一个属性的索引为 0。）
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  此方法不移动读取器。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  超出范围。
    ///  它必须是非负数且小于属性集合的大小。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function GetAttribute(i: Int32): string; overload;
    ///<summary>
    ///  当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.Name" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function MoveToAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，将移动到具有指定的属性 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function MoveToAttribute(name: string; ns: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，移动到第一个属性。
    ///</summary>
    ///<returns>
    ///  如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  （读取器的位置不更改）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果存在下一个属性，则为 <see langword="true" />
    ///  ；如果没有其他属性，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，移动到包含当前属性节点的元素。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />
    ///  ；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToElement: Boolean;
    ///<summary>
    ///  当在派生类中重写，将属性值分析为一个或多个 <see langword="Text" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  节点。
    ///</summary>
    ///<returns>
    ///  如果有可返回的节点，则为 <see langword="true" />
    ///  。
    ///  如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />
    ///  。
    ///  如果是空属性（如 misc=""），则返回 <see langword="true" />
    ///  ，同时返回值为 <see langword="String.Empty" />
    ///  的单个节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadAttributeValue: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，从流中读取下一个节点。
    ///</summary>
    ///<returns>
    ///  如果已成功读取下一节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，在当前元素的范围内解析命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递一个空字符串。
    ///</param>
    ///<returns>
    ///  前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  当在派生类中重写时解析的实体引用 <see langword="EntityReference" />
    ///  节点。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  读取器未定位在 <see langword="EntityReference" />
    ///  节点; 此读取器的实现无法解析实体 (<see cref="P:System.Xml.XmlReader.CanResolveEntity" />
    ///  返回 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ResolveEntity;
    ///<summary>
    ///  读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 <see langword="BinHex" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="localname">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的参数不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(localname: string; ns: string); overload;
    ///<summary>
    ///  读取纯文本元素。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString: string; overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="localname">
    ///  要检查的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  要检查的命名空间 URI。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" />
    ///  或 <see langword="NamespaceURI" />
    ///  不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(localname: string; ns: string): string; overload;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  将内容作为指定类型的对象异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  将元素内容作为请求类型异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  以异步方式读取元素并将解码 <see langword="BinHex" />
    ///  内容。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取所有内容，包括作为字符串的标记。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取包含该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlReader" />
    ///  实例的 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象，用于创建此读取器实例。
    ///  如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlReaderSettings read get_Settings;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的类型。
    ///</summary>
    ///<returns>
    ///  指定当前节点的类型的枚举值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的限定名。
    ///</summary>
    ///<returns>
    ///  当前节点的限定名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="Name" />
    ///  为 <see langword="bk:book" />
    ///  。
    ///  返回的名称取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  。
    ///  下列节点类型返回所列的值。
    ///  所有其他节点类型返回空字符串。
    ///  节点类型
    ///  名称
    ///<see langword="Attribute" />
    ///  属性名。
    ///<see langword="DocumentType" />
    ///  文档类型名称。
    ///<see langword="Element" />
    ///  标记名称。
    ///<see langword="EntityReference" />
    ///  引用的实体的名称。
    ///<see langword="ProcessingInstruction" />
    ///  处理指令的目标。
    ///<see langword="XmlDeclaration" />
    ///  文字字符串 <see langword="xml" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Name: string read get_Name;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  为 <see langword="book" />
    ///  。
    ///  对于没有名称的节点类型（如 <see langword="Text" />
    ///  、<see langword="Comment" />
    ///  等），该属性返回 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  当在派生类中被重写时，获取读取器定位在其上的节点的命名空间 URI（采用 W3C 命名空间规范中定义的形式）。
    ///</summary>
    ///<returns>
    ///  当前节点的命名空间 URI；否则为空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与当前节点关联的命名空间前缀。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  当在派生类中重写，获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlReader.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果读取器当前定位在的节点可以具有 <see langword="Value" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  , ，该节点具有值为 <see langword="String.Empty" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  。
    ///  下表列出具有要返回的值的节点类型。
    ///  所有其他节点类型返回 <see langword="String.Empty" />
    ///  。
    ///  节点类型
    ///  值
    ///<see langword="Attribute" />
    ///  属性的值。
    ///<see langword="CDATA" />
    ///  CDATA 节的内容。
    ///<see langword="Comment" />
    ///  注释的内容。
    ///<see langword="DocumentType" />
    ///  内部子集。
    ///<see langword="ProcessingInstruction" />
    ///  全部内容（不包括指令目标）。
    ///<see langword="SignificantWhitespace" />
    ///  混合内容模型中标记之间的空白区域。
    ///<see langword="Text" />
    ///  文本节点的内容。
    ///<see langword="Whitespace" />
    ///  标记之间的空白。
    ///<see langword="XmlDeclaration" />
    ///  声明的内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Value: string read get_Value;
    ///<summary>
    ///  当在派生类中被重写时，获取 XML 文档中当前节点的深度。
    ///</summary>
    ///<returns>
    ///  XML 文档中当前节点的深度。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  当前节点的基 URI。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  当在派生类中重写，获取一个值，该值指示当前节点是否为空元素 (例如， &lt;MyElement/&gt;)。
    ///</summary>
    ///<returns>
    ///  如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  等于 <see langword="XmlNodeType.Element" />
    ///  ），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的特性。
    ///</summary>
    ///<returns>
    ///  如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />
    ///  ；如果属性值为显式设置的，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  当在派生类中被重写时，获取用于括住特性节点值的引号字符。
    ///</summary>
    ///<returns>
    ///  用于括起属性节点的值的引号字符（" 或 '）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property QuoteChar: Char read get_QuoteChar;
    ///<summary>
    ///  当在派生类中重写，获取当前 <see langword="xml:space" />
    ///  作用域。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlSpace" />
    ///  值之一。
    ///  如果不存在任何 <see langword="xml:space" />
    ///  范围，则该属性默认值为 <see langword="XmlSpace.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  当在派生类中重写，获取当前 <see langword="xml:lang" />
    ///  作用域。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，它包含当前节点的架构信息。
    ///  架构信息可以对元素、 属性或具有非空文本节点上设置 <see cref="P:System.Xml.XmlReader.ValueType" />
    ///  （类型化值）。
    ///  如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" />
    ///  实例不会报告架构信息，则此属性返回 <see langword="null" />
    ///  。
    ///  如果是通过调用此属性 <see cref="T:System.Xml.XmlTextReader" />
    ///  或 <see cref="T:System.Xml.XmlValidatingReader" />
    ///  对象，则此属性始终返回 <see langword="null" />
    ///  。
    ///  这些 <see langword="XmlReader" />
    ///  实现不公开架构信息通过 <see langword="SchemaInfo" />
    ///  属性。
    ///  如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。
    ///  获取 PSVI <see langword="SchemaInfo" />
    ///  读取器的属性。
    ///  通过创建的验证读取器 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  与 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为 <see cref="F:System.Xml.ValidationType.Schema" />
    ///  具有完整的 PSVI 的元素仅在读取器定位在元素的结束标记上时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  与节点的类型化值对应的 CLR 类型。
    ///  默认值为 <see langword="System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点上的属性数。
    ///</summary>
    ///<returns>
    ///  当前节点上的属性数目。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property AttributeCount: Int32 read get_AttributeCount;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示此读取器是否定位在流的结尾。
    ///</summary>
    ///<returns>
    ///  如果此读取器定位在流的结尾，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property EOF: Boolean read get_EOF;
    ///<summary>
    ///  当在派生类中被重写时，获取读取器的状态。
    ///</summary>
    ///<returns>
    ///  指定读取器的状态的枚举值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ReadState: DNReadState read get_ReadState;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  与此实现关联。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使你能够获取该节点内字符串的原子化版本。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示此读取器是否可以分析和解析实体。
    ///</summary>
    ///<returns>
    ///  如果此读取器可以分析和解析实体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现二进制内容读取方法。
    ///</summary>
    ///<returns>
    ///  如果实现了二进制内容读取方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlReader = class(TDNGenericImport<DNXmlReaderClass, DNXmlReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlNodeReaderClass = interface(DNXmlReaderClass)
  ['{FB9EB325-C8B4-5A7C-839D-2BD7311CA461}']
  { constructors } 

    ///<summary>
    ///  创建的一个实例 <see langword="XmlNodeReader" />
    ///  类使用指定 <see cref="T:System.Xml.XmlNode" />
    ///  。
    ///</summary>
    ///  <param name="node"><see langword="XmlNode" />
    ///  要从中读取。
    ///</param>
    {class} function init(node: DNXmlNode): DNXmlNodeReader;

  end;

  ///<summary>
  ///  表示提供快速、 非缓存只进访问中的 XML 数据的读取器 <see cref="T:System.Xml.XmlNode" />
  ///  。
  ///</summary>
  [DNTypeName('System.Xml.XmlNodeReader')]
  DNXmlNodeReader = interface(DNXmlReader)
  ['{A91FE415-7469-3E8F-9EBD-318B69E0DDEE}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_CanResolveEntity: Boolean;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_HasAttributes: Boolean;
    function get_NameTable: DNXmlNameTable;
    function get_CanReadBinaryContent: Boolean;
    function get_Settings: DNXmlReaderSettings;
    function get_QuoteChar: Char;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;

  { methods } 

    ///<summary>
    ///  获取具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  获取具有指定本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttribute(name: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  获取具有指定索引的属性的值。
    ///</summary>
    ///  <param name="attributeIndex">
    ///  属性的索引。
    ///  索引是从零开始的。
    ///  （第一个属性的索引为 0。）
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlNodeReader.AttributeCount" />
    ///  。
    ///</exception>
    function GetAttribute(attributeIndex: Int32): string; overload;
    ///<summary>
    ///  移动到具有指定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="name">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(name: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定索引的属性。
    ///</summary>
    ///  <param name="attributeIndex">
    ///  属性的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />
    ///  。
    ///</exception>
    procedure MoveToAttribute(attributeIndex: Int32); overload;
    ///<summary>
    ///  移动到第一个属性。
    ///</summary>
    ///<returns>
    ///  如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  （读取器的位置不更改）。
    ///</returns>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果存在下一个属性，则为 <see langword="true" />
    ///  ；如果没有其他属性，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  移动到包含当前属性节点的元素。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />
    ///  ；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToElement: Boolean;
    ///<summary>
    ///  从流中读取下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  将 <see cref="P:System.Xml.XmlNodeReader.ReadState" />
    ///  改为 <see langword="Closed" />
    ///  。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  跳过当前节点的子级。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  将元素或文本节点的内容读取为一个字符串。
    ///</summary>
    ///<returns>
    ///  元素或类似文本节点（这可以包括 CDATA、Text 节点等）的内容。
    ///  如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
    ///<see langword="Note:" />
    ///  文本节点可以是元素或属性文本节点。
    ///</returns>
    function ReadString: string;
    ///<summary>
    ///  解析当前元素的范围内的命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递一个空字符串。
    ///  不必原子化该字符串。
    ///</param>
    ///<returns>
    ///  前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  解析 <see langword="EntityReference" />
    ///  节点的实体引用。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  读取器未定位在 <see langword="EntityReference" />
    ///  节点。
    ///</exception>
    procedure ResolveEntity;
    ///<summary>
    ///  将属性值分析为一个或多个 <see langword="Text" />
    ///  、<see langword="EntityReference" />
    ///  或 <see langword="EndEntity" />
    ///  节点。
    ///</summary>
    ///<returns>
    ///  如果有可返回的节点，则为 <see langword="true" />
    ///  。
    ///  如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />
    ///  。
    ///  如果是空属性（如 misc=""），则返回 <see langword="true" />
    ///  ，同时返回值为 String.Empty 的单个节点。
    ///</returns>
    function ReadAttributeValue: Boolean;
    ///<summary>
    ///  读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlNodeReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception>
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取内容并返回 BinHex 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlNodeReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception>
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 Base64 内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合的内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 BinHex 内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合的内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see langword="Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBoolean: Boolean;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  将当前位置的文本内容作为双精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDouble: Double;
    ///<summary>
    ///  将当前位置的文本内容作为单精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的当前位置的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsFloat: Single;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  作为将当前位置的文本内容 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将当前位置的文本内容作为 32 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsInt: Int32;
    ///<summary>
    ///  将当前位置的文本内容作为 64 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsLong: Int64;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsString: string;
    ///<summary>
    ///  将内容作为指定类型的对象读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///  例如，将 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象转换为 xs:string 时可以使用此对象。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  内容不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="returnType" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是受支持的节点类型。
    ///  请参阅下的表以了解详细信息。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" />
    ///  是 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据格式不正确。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />
    ///  , ，<see langword="Element" />
    ///  , ，<see langword="EndElement" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  ) 节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///  它跳过以下类型的节点：<see langword="ProcessingInstruction" />
    ///  、<see langword="DocumentType" />
    ///  、<see langword="Comment" />
    ///  、<see langword="Whitespace" />
    ///  或 <see langword="SignificantWhitespace" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Xml.XmlReader.NodeType" />
    ///  方法找到的当前节点或 <see langword="XmlNodeType.None" />
    ///  如果读取器已到达输入流的末尾。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToContent: DNXmlNodeType;
    ///<summary>
    ///  检查当前节点是否为元素并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.Name" />
    ///  不匹配的元素的给定 <paramref name="name" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(name: string); overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="name">
    ///  要检查的名称。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" />
    ///  与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(name: string): string; overload;
    ///<summary>
    ///  检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadEndElement;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  找到开始标记还是空元素标记; <see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement: Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的参数匹配。
    ///</summary>
    ///  <param name="name">
    ///  匹配的字符串 <see langword="Name" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是元素与 <see langword="Name" />
    ///  属性与指定的字符串匹配。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果该元素 <see langword="Name" />
    ///  属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(name: string): Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的字符串匹配。
    ///</summary>
    ///  <param name="localname">
    ///  要匹配的字符串 <see langword="LocalName" />
    ///  找到的元素的属性。
    ///</param>
    ///  <param name="ns">
    ///  要匹配的字符串 <see langword="NamespaceURI" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是一个元素。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果 <see langword="LocalName" />
    ///  和 <see langword="NamespaceURI" />
    ///  元素的属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定限定名的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToFollowing(name: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定限定名的子代元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToDescendant(name: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定的本地名称和命名空间 URI 的子代元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see langword="XmlReader" />
    ///  到下一个具有指定限定名的同级元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的同级元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的同级元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的同级元素， <see langword="XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的父元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToNextSibling(name: string): Boolean; overload;
    ///<summary>
    ///  将 <see langword="XmlReader" />
    ///  推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的同级元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  你希望移动到的同级元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的同级元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果没有找到匹配的同级元素，<see langword="XmlReader" />
    ///  会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  为 <see langword="XmlNodeType.EndElement" />
    ///  ）上。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  两个参数值均为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///  如果当前节点既非元素，也非属性，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadInnerXml: string;
    ///<summary>
    ///  当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadOuterXml: string;
    ///<summary>
    ///  返回一个新 <see langword="XmlReader" />
    ///  能用于读取当前节点及其所有子代的实例。
    ///</summary>
    ///<returns>
    ///  新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />
    ///  。
    ///  调用 <see cref="M:System.Xml.XmlReader.Read" />
    ///  方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用此方法时，XML 读取器未定位在元素上。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取该流的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    ///<summary>
    ///  异步跳过当前节点的子级。
    ///</summary>
    ///<returns>
    ///  当前节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function SkipAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步检查当前节点是否为内容节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///</summary>
    ///<returns>
    ///  此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  ；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能为请求的类型转换的元素内容
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean: Boolean; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  读取当前元素并将内容作为双精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为双精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble: Double; overload;
    ///<summary>
    ///  读取当前元素并将内容作为单精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat: Single; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt: Int32; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong: Int64; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString: string; overload;
    ///<summary>
    ///  将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="localname">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的参数不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(localname: string; ns: string); overload;
    ///<summary>
    ///  读取纯文本元素。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString: string; overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="localname">
    ///  要检查的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  要检查的命名空间 URI。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" />
    ///  或 <see langword="NamespaceURI" />
    ///  不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(localname: string; ns: string): string; overload;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  将内容作为指定类型的对象异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  将元素内容作为请求类型异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  以异步方式读取元素并将解码 <see langword="BinHex" />
    ///  内容。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取所有内容，包括作为字符串的标记。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取包含该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一，表示当前节点的类型。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的限定名称。
    ///</summary>
    ///<returns>
    ///  当前节点的限定名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="Name" />
    ///  为 <see langword="bk:book" />
    ///  。
    ///  返回的名称取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />
    ///  。
    ///  下列节点类型返回所列的值。
    ///  所有其他节点类型返回空字符串。
    ///  节点类型
    ///  名称
    ///<see langword="Attribute" />
    ///  属性名。
    ///<see langword="DocumentType" />
    ///  文档类型名称。
    ///<see langword="Element" />
    ///  标记名称。
    ///<see langword="EntityReference" />
    ///  引用的实体的名称。
    ///<see langword="ProcessingInstruction" />
    ///  处理指令的目标。
    ///<see langword="XmlDeclaration" />
    ///  文字字符串 <see langword="xml" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  为 <see langword="book" />
    ///  。
    ///  对于没有名称的节点类型（如 <see langword="Text" />
    ///  、<see langword="Comment" />
    ///  等），该属性返回 String.Empty。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。
    ///</summary>
    ///<returns>
    ///  当前节点的命名空间 URI；否则为空字符串。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与当前节点关联的命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否可以具有 <see cref="P:System.Xml.XmlNodeReader.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果读取器当前定位在的节点可以具有 <see langword="Value" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlNodeReader.NodeType" />
    ///  。
    ///  下表列出具有要返回的值的节点类型。
    ///  所有其他节点类型返回 String.Empty。
    ///  节点类型
    ///  值
    ///<see langword="Attribute" />
    ///  属性的值。
    ///<see langword="CDATA" />
    ///  CDATA 节的内容。
    ///<see langword="Comment" />
    ///  注释的内容。
    ///<see langword="DocumentType" />
    ///  内部子集。
    ///<see langword="ProcessingInstruction" />
    ///  全部内容（不包括指令目标）。
    ///<see langword="SignificantWhitespace" />
    ///  混合内容模型中标记之间的空白区域。
    ///<see langword="Text" />
    ///  文本节点的内容。
    ///<see langword="Whitespace" />
    ///  标记之间的空白。
    ///<see langword="XmlDeclaration" />
    ///  声明的内容。
    ///</returns>
    property Value: string read get_Value;
    ///<summary>
    ///  获取 XML 文档中当前节点的深度。
    ///</summary>
    ///<returns>
    ///  XML 文档中当前节点的深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  当前节点的基 URI。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取一个值，该值指示此读取器是否可以分析和解析实体。
    ///</summary>
    ///<returns>
    ///  如果此读取器可以分析和解析实体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="XmlNodeReader" />
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前节点是一个元素 (<see cref="P:System.Xml.XmlNodeReader.NodeType" />
    ///  等于 <see langword="XmlNodeType.Element" />
    ///  ) 结尾 /&gt;; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />
    ///  ；如果属性值为显式设置的，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  获取当前 <see langword="xml:space" />
    ///  范围。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlSpace" />
    ///  值之一。
    ///  如果不存在任何 <see langword="xml:space" />
    ///  范围，则该属性默认值为 <see langword="XmlSpace.None" />
    ///  。
    ///</returns>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  获取当前 <see langword="xml:lang" />
    ///  范围。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取已分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，它包含当前节点的架构信息。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点上的属性数目。
    ///</summary>
    ///<returns>
    ///  当前节点上的属性数目。
    ///  该数目包括默认属性。
    ///</returns>
    property AttributeCount: Int32 read get_AttributeCount;
    ///<summary>
    ///  获取一个值，该值指示读取器是否定位在流结尾。
    ///</summary>
    ///<returns>
    ///  如果此读取器定位在流的结尾，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EOF: Boolean read get_EOF;
    ///<summary>
    ///  获取读取器的状态。
    ///</summary>
    ///<returns><see cref="T:System.Xml.ReadState" />
    ///  值之一。
    ///</returns>
    property ReadState: DNReadState read get_ReadState;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使你能够获取该节点内字符串的原子化版本。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlNodeReader" />
    ///  是否实现二进制内容读取方法。
    ///</summary>
    ///<returns>
    ///  如果实现了二进制内容读取方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see cref="T:System.Xml.XmlNodeReader" />
    ///  类始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlReader" />
    ///  实例的 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象，用于创建此读取器实例。
    ///  如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlReaderSettings read get_Settings;
    ///<summary>
    ///  当在派生类中被重写时，获取用于括住特性节点值的引号字符。
    ///</summary>
    ///<returns>
    ///  用于括起属性节点的值的引号字符（" 或 '）。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property QuoteChar: Char read get_QuoteChar;
    ///<summary>
    ///  获取当前节点的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  与节点的类型化值对应的 CLR 类型。
    ///  默认值为 <see langword="System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
  end;

  TDNXmlNodeReader = class(TDNGenericImport<DNXmlNodeReaderClass, DNXmlNodeReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextReaderClass = interface(DNXmlReaderClass)
  ['{9248CA7D-8AA7-55A3-AB75-E3083B9C90D6}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  使用指定的流初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(input: DDN.mscorlib.DNStream): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 URL 和流初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  用于解析外部资源的 URL。
    ///<see cref="P:System.Xml.XmlTextReader.BaseURI" />
    ///  设置为此值。
    ///</param>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(url: string; input: DDN.mscorlib.DNStream): DNXmlTextReader; overload;
    ///<summary>
    ///  用指定的流和 <see cref="T:System.Xml.XmlNameTable" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的流。
    ///</param>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><paramref name="input" />
    ///  或 <paramref name="nt" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(input: DDN.mscorlib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 URL、流和 <see cref="T:System.Xml.XmlNameTable" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  用于解析外部资源的 URL。
    ///<see cref="P:System.Xml.XmlTextReader.BaseURI" />
    ///  设置为此值。
    ///  如果 <paramref name="url" />
    ///  为 <see langword="null" />
    ///  ，则 <see langword="BaseURI" />
    ///  设置为 <see langword="String.Empty" />
    ///  。
    ///</param>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的流。
    ///</param>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><paramref name="input" />
    ///  或 <paramref name="nt" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(url: string; input: DDN.mscorlib.DNStream; nt: DNXmlNameTable): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlTextReader" />
    ///  初始化 <see cref="T:System.IO.TextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的 <see langword="TextReader" />
    ///  。
    ///</param>
    {class} function init(input: DDN.mscorlib.DNTextReader): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 URL 和 <see cref="T:System.IO.TextReader" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  用于解析外部资源的 URL。
    ///<see cref="P:System.Xml.XmlTextReader.BaseURI" />
    ///  设置为此值。
    ///</param>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的 <see langword="TextReader" />
    ///  。
    ///</param>
    {class} function init(url: string; input: DDN.mscorlib.DNTextReader): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlTextReader" />
    ///  和 <see cref="T:System.IO.TextReader" />
    ///  初始化 <see cref="T:System.Xml.XmlNameTable" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的 <see langword="TextReader" />
    ///  。
    ///</param>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><paramref name="nt" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(input: DDN.mscorlib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的 URL、<see cref="T:System.IO.TextReader" />
    ///  和 <see cref="T:System.Xml.XmlNameTable" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  用于解析外部资源的 URL。
    ///<see cref="P:System.Xml.XmlTextReader.BaseURI" />
    ///  设置为此值。
    ///  如果 <paramref name="url" />
    ///  为 <see langword="null" />
    ///  ，则 <see langword="BaseURI" />
    ///  设置为 <see langword="String.Empty" />
    ///  。
    ///</param>
    ///  <param name="input">
    ///  包含要读取的 XML 数据的 <see langword="TextReader" />
    ///  。
    ///</param>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="nt" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(url: string; input: DDN.mscorlib.DNTextReader; nt: DNXmlNameTable): DNXmlTextReader; overload;
    ///<summary>
    ///  用指定的流、<see cref="T:System.Xml.XmlNodeType" />
    ///  和 <see cref="T:System.Xml.XmlParserContext" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlFragment">
    ///  包含要分析的 XML 片段的流。
    ///</param>
    ///  <param name="fragType">
    ///  XML 片段的 <see cref="T:System.Xml.XmlNodeType" />
    ///  。
    ///  这也确定了片段可以包含的内容。
    ///  （请参见下表。）
    ///</param>
    ///  <param name="context">
    ///  分析 <paramref name="xmlFragment" />
    ///  所用的 <see cref="T:System.Xml.XmlParserContext" />
    ///  。
    ///  这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码方式、命名空间范围、当前 xml:lang 和 xml:space 范围。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="fragType" />
    ///  不是元素、 特性或文档 <see langword="XmlNodeType" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="xmlFragment" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlFragment: DDN.mscorlib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的字符串、<see cref="T:System.Xml.XmlNodeType" />
    ///  和 <see cref="T:System.Xml.XmlParserContext" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlFragment">
    ///  包含要分析的 XML 片段的字符串。
    ///</param>
    ///  <param name="fragType">
    ///  XML 片段的 <see cref="T:System.Xml.XmlNodeType" />
    ///  。
    ///  这也确定了片段字符串可以包含的内容。
    ///  （请参见下表。）
    ///</param>
    ///  <param name="context">
    ///  分析 <paramref name="xmlFragment" />
    ///  所用的 <see cref="T:System.Xml.XmlParserContext" />
    ///  。
    ///  这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码方式、命名空间范围、当前 xml:lang 和 xml:space 范围。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="fragType" />
    ///  不是 <see langword="Element" />
    ///  , ，<see langword="Attribute" />
    ///  , ，或 <see langword="Document" />
    ///<see langword="XmlNodeType" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="xmlFragment" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlTextReader; overload;
    ///<summary>
    ///  用指定的文件初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  包含 XML 数据的文件的 URL。
    ///<see cref="P:System.Xml.XmlTextReader.BaseURI" />
    ///  设置为此值。
    ///</param>
    ///<exception cref="T:System.IO.FileNotFoundException">
    ///  找不到指定的文件。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  找不到的文件名或目录的一部分。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="url" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.Net.WebException">
    ///  无法解析远程文件名。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="url" />
    ///  不是有效的 URI。
    ///</exception>
    {class} function init(url: string): DNXmlTextReader; overload;
    ///<summary>
    ///  使用指定的文件和 <see cref="T:System.Xml.XmlNameTable" />
    ///  初始化 <see cref="T:System.Xml.XmlTextReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="url">
    ///  包含要读取的 XML 数据的文件的 URL。
    ///</param>
    ///  <param name="nt">
    ///  要使用的 <see langword="XmlNameTable" />
    ///  。
    ///</param>
    ///<exception cref="T:System.NullReferenceException"><paramref name="nt" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到指定的文件。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  找不到的文件名或目录的一部分。
    ///</exception><exception cref="T:System.InvalidOperationException"><paramref name="url" />
    ///  是一个空字符串。
    ///</exception><exception cref="T:System.Net.WebException">
    ///  无法解析远程文件名。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="url" />
    ///  不是有效的 URI。
    ///</exception>
    {class} function init(url: string; nt: DNXmlNameTable): DNXmlTextReader; overload;

  { static propertys } 

    ///<summary>
    ///  设置用于解析 DTD 引用的 <see cref="T:System.Xml.XmlResolver" />
    ///  。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  如果设置为 <see langword="null" />
    ///  ，则不解析外部资源。
    ///  在 .NET Framework 的 1.1 版中，调用方必须完全受到信任，才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  表示提供对 XML 数据进行快速、非缓存、只进访问的读取器。
  ///  从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlReader" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.XmlTextReader')]
  DNXmlTextReader = interface(DNXmlReader)
  ['{9C42EB13-F238-3F97-81B9-9C1B73D5A449}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_CanReadValueChunk: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Normalization: Boolean;
    procedure set_Normalization(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_WhitespaceHandling: DNWhitespaceHandling;
    procedure set_WhitespaceHandling(value: DNWhitespaceHandling);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_HasAttributes: Boolean;

  { methods } 

    ///<summary>
    ///  获取具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  获取具有指定本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///  此方法不移动读取器。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  获取具有指定索引的属性的值。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///  索引是从零开始的。
    ///  （第一个属性的索引为 0。）
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlTextReader.AttributeCount" />
    ///  。
    ///</exception>
    function GetAttribute(i: Int32): string; overload;
    ///<summary>
    ///  移动到具有指定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定索引的属性。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />
    ///  。
    ///</exception>
    procedure MoveToAttribute(i: Int32); overload;
    ///<summary>
    ///  移动到第一个属性。
    ///</summary>
    ///<returns>
    ///  如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  （读取器的位置不更改）。
    ///</returns>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果存在下一个属性，则为 <see langword="true" />
    ///  ；如果没有其他属性，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  移动到包含当前属性节点的元素。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />
    ///  ；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToElement: Boolean;
    ///<summary>
    ///  将属性值分析为一个或多个 <see langword="Text" />
    ///  、<see langword="EntityReference" />
    ///  或 <see langword="EndEntity" />
    ///  节点。
    ///</summary>
    ///<returns>
    ///  如果有可返回的节点，则为 <see langword="true" />
    ///  。
    ///  如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />
    ///  。
    ///  如果是空属性（如 misc=""），则返回 <see langword="true" />
    ///  ，同时返回值为 <see langword="String.Empty" />
    ///  的单个节点。
    ///</returns>
    function ReadAttributeValue: Boolean;
    ///<summary>
    ///  从流中读取下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception>
    function Read: Boolean;
    ///<summary>
    ///  将 <see cref="P:System.Xml.XmlReader.ReadState" />
    ///  改为 <see langword="Closed" />
    ///  。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  跳过当前节点的子级。
    ///</summary>
    procedure Skip;
    ///<summary>
    ///  解析当前元素的范围内的命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，请传递一个空字符串。
    ///  不必原子化该字符串。
    ///</param>
    ///<returns>
    ///  前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlTextReader.Namespaces" />
    ///  属性设置为 <see langword="true" />
    ///  和 <paramref name="prefix" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  解析 <see langword="EntityReference" />
    ///  节点的实体引用。
    ///</summary>
    procedure ResolveEntity;
    ///<summary>
    ///  读取内容并返回 <see langword="Base64" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持在当前节点中。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception>
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 Base64 内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlTextReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlTextReader" />
    ///  实现不支持此方法。
    ///</exception>
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 <see langword="BinHex" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  将元素或文本节点的内容读取为一个字符串。
    ///</summary>
    ///<returns>
    ///  该元素或文本节点的内容。
    ///  如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
    ///<see langword="Note:" />
    ///  文本节点可以是元素或属性文本节点。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  尝试了无效的操作。
    ///</exception>
    function ReadString: string;
    ///<summary>
    ///  获取一个值，该值指示该类是否可返回行信息。
    ///</summary>
    ///<returns>
    ///  如果该类可以返回行信息，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasLineInfo: Boolean;
    ///<summary>
    ///  获取一个集合，该集合包含当前在范围内的所有命名空间。
    ///</summary>
    ///  <param name="scope">
    ///  一个 <see cref="T:System.Xml.XmlNamespaceScope" />
    ///  值，指定要返回的命名空间节点的类型。
    ///</param>
    ///<returns>
    ///  一个包含当前在范围内的所有命名空间的 <see cref="T:System.Collections.IDictionary" />
    ///  对象。
    ///  如果读取器未定位在某元素上，则返回空字典（无命名空间）。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    ///<summary>
    ///  将读取器的状态重置为 ReadState.Initial。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用 <see langword="ResetState" />
    ///  如果读取器使用构造 <see cref="T:System.Xml.XmlParserContext" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  一个流中的文档并共享相同的编码。
    ///</exception>
    procedure ResetState;
    ///<summary>
    ///  获取已缓冲的 XML 的剩余部分。
    ///</summary>
    ///<returns>
    ///  包含已缓冲的 XML 的剩余部分的 <see cref="T:System.IO.TextReader" />
    ///  。
    ///</returns>
    function GetRemainder: DDN.mscorlib.DNTextReader;
    ///<summary>
    ///  将元素的文本内容读入字符缓冲区。
    ///  通过连续调用此方法，可以读取大的嵌入文本的流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///</param>
    ///  <param name="index"><paramref name="buffer" />
    ///  中的位置，此方法可以从该位置开始写入文本内容。
    ///</param>
    ///  <param name="count">
    ///  要写入 <paramref name="buffer" />
    ///  的字符数。
    ///</param>
    ///<returns>
    ///  读取的字符数。
    ///  如果读取器未定位在元素上，或如果当前上下文中没有要返回的其他文本内容，则这可以是 <see langword="0" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="count" />
    ///  大于 <paramref name="buffer" />
    ///  中指定的空间（缓冲区大小 - <paramref name="index" />
    ///  ）。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///<see langword="&lt; 0" />
    ///  或 <paramref name="count" />
    ///<see langword="&lt; 0" />
    ///  。
    ///</exception>
    function ReadChars(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  对 Base64 进行解码并返回解码的二进制字节。
    ///</summary>
    ///  <param name="array">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。
    ///</param>
    ///  <param name="len">
    ///  要写入缓冲区的字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  Base64 序列无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  的值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  &lt; 0，或 <paramref name="len" />
    ///  &lt; 0，或 <paramref name="len" />
    ///  &gt; <paramref name="array" />
    ///  。长度- <paramref name="offset" />
    ///  。
    ///</exception>
    function ReadBase64(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    ///<summary>
    ///  对 <see langword="BinHex" />
    ///  进行解码并返回解码后的二进制字节。
    ///</summary>
    ///  <param name="array">
    ///  作为解码的二进制字节写入到的缓冲区的字节数组。
    ///</param>
    ///  <param name="offset">
    ///  数组中从零开始的索引，指定此方法可以开始写入缓冲区的位置。
    ///</param>
    ///  <param name="len">
    ///  要写入缓冲区的字节数。
    ///</param>
    ///<returns>
    ///  写入你的缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><see langword="BinHex" />
    ///  序列无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="array" />
    ///  的值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  &lt; 0，或 <paramref name="len" />
    ///  &lt; 0，或 <paramref name="len" />
    ///  &gt; <paramref name="array" />
    ///  。长度- <paramref name="offset" />
    ///  。
    ///</exception>
    function ReadBinHex(&array: TArray<Byte>; offset: Int32; len: Int32): Int32;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see langword="Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBoolean: Boolean;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  将当前位置的文本内容作为双精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDouble: Double;
    ///<summary>
    ///  将当前位置的文本内容作为单精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的当前位置的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsFloat: Single;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  作为将当前位置的文本内容 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将当前位置的文本内容作为 32 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsInt: Int32;
    ///<summary>
    ///  将当前位置的文本内容作为 64 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsLong: Int64;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsString: string;
    ///<summary>
    ///  将内容作为指定类型的对象读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///  例如，将 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象转换为 xs:string 时可以使用此对象。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  内容不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="returnType" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是受支持的节点类型。
    ///  请参阅下的表以了解详细信息。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" />
    ///  是 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据格式不正确。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />
    ///  , ，<see langword="Element" />
    ///  , ，<see langword="EndElement" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  ) 节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///  它跳过以下类型的节点：<see langword="ProcessingInstruction" />
    ///  、<see langword="DocumentType" />
    ///  、<see langword="Comment" />
    ///  、<see langword="Whitespace" />
    ///  或 <see langword="SignificantWhitespace" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Xml.XmlReader.NodeType" />
    ///  方法找到的当前节点或 <see langword="XmlNodeType.None" />
    ///  如果读取器已到达输入流的末尾。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToContent: DNXmlNodeType;
    ///<summary>
    ///  检查当前节点是否为元素并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.Name" />
    ///  不匹配的元素的给定 <paramref name="name" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(name: string); overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="name">
    ///  要检查的名称。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" />
    ///  与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(name: string): string; overload;
    ///<summary>
    ///  检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadEndElement;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  找到开始标记还是空元素标记; <see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement: Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的参数匹配。
    ///</summary>
    ///  <param name="name">
    ///  匹配的字符串 <see langword="Name" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是元素与 <see langword="Name" />
    ///  属性与指定的字符串匹配。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果该元素 <see langword="Name" />
    ///  属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(name: string): Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的字符串匹配。
    ///</summary>
    ///  <param name="localname">
    ///  要匹配的字符串 <see langword="LocalName" />
    ///  找到的元素的属性。
    ///</param>
    ///  <param name="ns">
    ///  要匹配的字符串 <see langword="NamespaceURI" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是一个元素。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果 <see langword="LocalName" />
    ///  和 <see langword="NamespaceURI" />
    ///  元素的属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定限定名的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToFollowing(name: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定限定名的子代元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToDescendant(name: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定的本地名称和命名空间 URI 的子代元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see langword="XmlReader" />
    ///  到下一个具有指定限定名的同级元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的同级元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的同级元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的同级元素， <see langword="XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的父元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToNextSibling(name: string): Boolean; overload;
    ///<summary>
    ///  将 <see langword="XmlReader" />
    ///  推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的同级元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  你希望移动到的同级元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的同级元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果没有找到匹配的同级元素，<see langword="XmlReader" />
    ///  会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  为 <see langword="XmlNodeType.EndElement" />
    ///  ）上。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  两个参数值均为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///  如果当前节点既非元素，也非属性，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadInnerXml: string;
    ///<summary>
    ///  当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadOuterXml: string;
    ///<summary>
    ///  返回一个新 <see langword="XmlReader" />
    ///  能用于读取当前节点及其所有子代的实例。
    ///</summary>
    ///<returns>
    ///  新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />
    ///  。
    ///  调用 <see cref="M:System.Xml.XmlReader.Read" />
    ///  方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用此方法时，XML 读取器未定位在元素上。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取该流的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    ///<summary>
    ///  异步跳过当前节点的子级。
    ///</summary>
    ///<returns>
    ///  当前节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function SkipAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步检查当前节点是否为内容节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///</summary>
    ///<returns>
    ///  此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  ；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能为请求的类型转换的元素内容
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean: Boolean; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  读取当前元素并将内容作为双精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为双精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble: Double; overload;
    ///<summary>
    ///  读取当前元素并将内容作为单精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat: Single; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt: Int32; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong: Int64; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString: string; overload;
    ///<summary>
    ///  将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="localname">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的参数不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(localname: string; ns: string); overload;
    ///<summary>
    ///  读取纯文本元素。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString: string; overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="localname">
    ///  要检查的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  要检查的命名空间 URI。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" />
    ///  或 <see langword="NamespaceURI" />
    ///  不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(localname: string; ns: string): string; overload;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  将内容作为指定类型的对象异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  将元素内容作为请求类型异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  以异步方式读取元素并将解码 <see langword="BinHex" />
    ///  内容。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取所有内容，包括作为字符串的标记。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取包含该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一，表示当前节点的类型。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的限定名称。
    ///</summary>
    ///<returns>
    ///  当前节点的限定名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="Name" />
    ///  为 <see langword="bk:book" />
    ///  。
    ///  返回的名称取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />
    ///  。
    ///  下列节点类型返回所列的值。
    ///  所有其他节点类型返回空字符串。
    ///  节点类型
    ///  名称
    ///<see langword="Attribute" />
    ///  属性名。
    ///<see langword="DocumentType" />
    ///  文档类型名称。
    ///<see langword="Element" />
    ///  标记名称。
    ///<see langword="EntityReference" />
    ///  引用的实体的名称。
    ///<see langword="ProcessingInstruction" />
    ///  处理指令的目标。
    ///<see langword="XmlDeclaration" />
    ///  文字字符串 <see langword="xml" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  为 <see langword="book" />
    ///  。
    ///  对于没有名称的节点类型（如 <see langword="Text" />
    ///  、<see langword="Comment" />
    ///  等），该属性返回 <see langword="String.Empty" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  获取读取器定位在的节点的命名空间 URI（采用 W3C 命名空间规范中定义）。
    ///</summary>
    ///<returns>
    ///  当前节点的命名空间 URI；否则为空字符串。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与当前节点关联的命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否可以具有 <see langword="String.Empty" />
    ///  以外的 <see cref="P:System.Xml.XmlTextReader.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果读取器当前定位在的节点可以具有 <see langword="Value" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlTextReader.NodeType" />
    ///  。
    ///  下表列出具有要返回的值的节点类型。
    ///  所有其他节点类型返回 <see langword="String.Empty" />
    ///  。
    ///  节点类型
    ///  值
    ///<see langword="Attribute" />
    ///  属性的值。
    ///<see langword="CDATA" />
    ///  CDATA 节的内容。
    ///<see langword="Comment" />
    ///  注释的内容。
    ///<see langword="DocumentType" />
    ///  内部子集。
    ///<see langword="ProcessingInstruction" />
    ///  全部内容（不包括指令目标）。
    ///<see langword="SignificantWhitespace" />
    ///  中的空白区域 <see langword="xml:space" />
    ///  = 'preserve' 范围。
    ///<see langword="Text" />
    ///  文本节点的内容。
    ///<see langword="Whitespace" />
    ///  标记之间的空白。
    ///<see langword="XmlDeclaration" />
    ///  声明的内容。
    ///</returns>
    property Value: string read get_Value;
    ///<summary>
    ///  获取 XML 文档中当前节点的深度。
    ///</summary>
    ///<returns>
    ///  XML 文档中当前节点的深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  当前节点的基 URI。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
    ///</summary>
    ///<returns>
    ///  如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlTextReader.NodeType" />
    ///  等于 <see langword="XmlNodeType.Element" />
    ///  ），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否是从 DTD 或架构中定义的默认值生成的属性。
    ///</summary>
    ///<returns>
    ///  此属性始终返回 <see langword="false" />
    ///  。
    ///  （<see cref="T:System.Xml.XmlTextReader" />
    ///  不展开默认属性。）
    ///</returns>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  获取用于括起属性节点的值的引号字符。
    ///</summary>
    ///<returns>
    ///  用于括起属性节点的值的引号字符（" 或 '）。
    ///</returns>
    property QuoteChar: Char read get_QuoteChar;
    ///<summary>
    ///  获取当前 <see langword="xml:space" />
    ///  范围。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlSpace" />
    ///  值之一。
    ///  如果不存在任何 <see langword="xml:space" />
    ///  范围，则该属性默认值为 <see langword="XmlSpace.None" />
    ///  。
    ///</returns>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  获取当前 <see langword="xml:lang" />
    ///  范围。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取当前节点上的属性数目。
    ///</summary>
    ///<returns>
    ///  当前节点上的属性数目。
    ///</returns>
    property AttributeCount: Int32 read get_AttributeCount;
    ///<summary>
    ///  获取一个值，该值指示读取器是否定位在流结尾。
    ///</summary>
    ///<returns>
    ///  如果此读取器定位在流的结尾，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EOF: Boolean read get_EOF;
    ///<summary>
    ///  获取读取器的状态。
    ///</summary>
    ///<returns><see cref="T:System.Xml.ReadState" />
    ///  值之一。
    ///</returns>
    property ReadState: DNReadState read get_ReadState;
    ///<summary>
    ///  获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使你能够获取该节点内字符串的原子化版本。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示此读取器是否可以分析和解析实体。
    ///</summary>
    ///<returns>
    ///  如果此读取器可以分析和解析实体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="XmlTextReader" />
    ///  类始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" />
    ///  是否实现二进制内容读取方法。
    ///</summary>
    ///<returns>
    ///  如果实现了二进制内容读取方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see cref="T:System.Xml.XmlTextReader" />
    ///  类始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlTextReader" />
    ///  是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XmlTextReader" />
    ///  实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see cref="T:System.Xml.XmlTextReader" />
    ///  类始终返回 <see langword="false" />
    ///  。
    ///</returns>
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    ///<summary>
    ///  获取当前行号。
    ///</summary>
    ///<returns>
    ///  当前行号。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取当前行位置。
    ///</summary>
    ///<returns>
    ///  当前行位置。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取或设置一个值，该值指示是否进行命名空间支持。
    ///</summary>
    ///<returns>
    ///  要进行命名空间支持，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  将此属性设置读取的操作发生后 (<see cref="P:System.Xml.XmlTextReader.ReadState" />
    ///  不是 <see langword="ReadState.Initial" />
    ///  )。
    ///</exception>
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    ///<summary>
    ///  获取或设置一个值，该值指示是否规范化空白区域和属性值。
    ///</summary>
    ///<returns>
    ///  如果要进行规范化，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  将此属性设置在读取器关闭时 (<see cref="P:System.Xml.XmlTextReader.ReadState" />
    ///  是 <see langword="ReadState.Closed" />
    ///  )。
    ///</exception>
    property Normalization: Boolean read get_Normalization write set_Normalization;
    ///<summary>
    ///  获取文档的编码。
    ///</summary>
    ///<returns>
    ///  编码值。
    ///  如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。
    ///</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    ///<summary>
    ///  获取或设置一个值，该值指定如何处理空白区域。
    ///</summary>
    ///<returns><see cref="T:System.Xml.WhitespaceHandling" />
    ///  值之一。
    ///  默认值为 <see langword="WhitespaceHandling.All" />
    ///  （返回 <see langword="Whitespace" />
    ///  和 <see langword="SignificantWhitespace" />
    ///  节点）。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  将此属性设置在读取器关闭时 (<see cref="P:System.Xml.XmlTextReader.ReadState" />
    ///  是 <see langword="ReadState.Closed" />
    ///  )。
    ///</exception>
    property WhitespaceHandling: DNWhitespaceHandling read get_WhitespaceHandling write set_WhitespaceHandling;
    ///<summary>
    ///  获取或设置一个值，该值指示是否允许 DTD 处理。
    ///  此属性已过时。
    ///  请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果不允许 DTD 处理，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.DtdProcessing" />
    ///  枚举。
    ///</summary>
    ///<returns><see cref="T:System.Xml.DtdProcessing" />
    ///  枚举。
    ///</returns>
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    ///<summary>
    ///  获取或设置一个值，该值指定读取器处理实体的方式。
    ///</summary>
    ///<returns><see cref="T:System.Xml.EntityHandling" />
    ///  值之一。
    ///  如果未指定 <see langword="EntityHandling" />
    ///  ，它将默认为 <see langword="EntityHandling.ExpandCharEntities" />
    ///  。
    ///</returns>
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    ///<summary>
    ///  设置用于解析 DTD 引用的 <see cref="T:System.Xml.XmlResolver" />
    ///  。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  如果设置为 <see langword="null" />
    ///  ，则不解析外部资源。
    ///  在 .NET Framework 的 1.1 版中，调用方必须完全受到信任，才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlReader" />
    ///  实例的 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象，用于创建此读取器实例。
    ///  如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlReaderSettings read get_Settings;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，它包含当前节点的架构信息。
    ///  架构信息可以对元素、 属性或具有非空文本节点上设置 <see cref="P:System.Xml.XmlReader.ValueType" />
    ///  （类型化值）。
    ///  如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" />
    ///  实例不会报告架构信息，则此属性返回 <see langword="null" />
    ///  。
    ///  如果是通过调用此属性 <see cref="T:System.Xml.XmlTextReader" />
    ///  或 <see cref="T:System.Xml.XmlValidatingReader" />
    ///  对象，则此属性始终返回 <see langword="null" />
    ///  。
    ///  这些 <see langword="XmlReader" />
    ///  实现不公开架构信息通过 <see langword="SchemaInfo" />
    ///  属性。
    ///  如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。
    ///  获取 PSVI <see langword="SchemaInfo" />
    ///  读取器的属性。
    ///  通过创建的验证读取器 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  与 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为 <see cref="F:System.Xml.ValidationType.Schema" />
    ///  具有完整的 PSVI 的元素仅在读取器定位在元素的结束标记上时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  与节点的类型化值对应的 CLR 类型。
    ///  默认值为 <see langword="System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlTextReader = class(TDNGenericImport<DNXmlTextReaderClass, DNXmlTextReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlValidatingReaderClass = interface(DNXmlReaderClass)
  ['{1645BEFA-C34C-52E2-B176-909DD78E25CF}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see langword="XmlValidatingReader" />
    ///  类的新实例，该类验证从给定的 <see cref="T:System.Xml.XmlReader" />
    ///  返回的内容。
    ///</summary>
    ///  <param name="reader">
    ///  验证时要从中读取的 <see langword="XmlReader" />
    ///  。
    ///  当前实现仅支持 <see cref="T:System.Xml.XmlTextReader" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的读取器不是 <see langword="XmlTextReader" />
    ///  。
    ///</exception>
    {class} function init(reader: DNXmlReader): DNXmlValidatingReader; overload;
    ///<summary>
    ///  用指定的值初始化 <see langword="XmlValidatingReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlFragment">
    ///  包含要分析的 XML 片段的字符串。
    ///</param>
    ///  <param name="fragType">
    ///  XML 片段的 <see cref="T:System.Xml.XmlNodeType" />
    ///  。
    ///  这还确定了片段字符串可以包含的内容（请参见下表）。
    ///</param>
    ///  <param name="context">
    ///  要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />
    ///  。
    ///  这包括要使用的 <see cref="T:System.Xml.NameTable" />
    ///  、编码、命名空间范围、当前 xml:lang 和 xml:space 范围。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="fragType" />
    ///  不是下表中列出的节点类型之一。
    ///</exception>
    {class} function init(xmlFragment: string; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;
    ///<summary>
    ///  用指定的值初始化 <see langword="XmlValidatingReader" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="xmlFragment">
    ///  包含要分析的 XML 片段的流。
    ///</param>
    ///  <param name="fragType">
    ///  XML 片段的 <see cref="T:System.Xml.XmlNodeType" />
    ///  。
    ///  这确定片段可以包含的内容（请参见下表）。
    ///</param>
    ///  <param name="context">
    ///  要在其中分析 XML 片段的 <see cref="T:System.Xml.XmlParserContext" />
    ///  。
    ///  这包括要使用的 <see cref="T:System.Xml.XmlNameTable" />
    ///  、编码、命名空间范围、当前的 <see langword="xml:lang" />
    ///  和 <see langword="xml:space" />
    ///  范围。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="fragType" />
    ///  不是下表中列出的节点类型之一。
    ///</exception>
    {class} function init(xmlFragment: DDN.mscorlib.DNStream; fragType: DNXmlNodeType; context: DNXmlParserContext): DNXmlValidatingReader; overload;

  { static propertys } 

    ///<summary>
    ///  设置用于解析外部文档类型定义 (DTD) 和架构位置引用的 <see cref="T:System.Xml.XmlResolver" />
    ///  。
    ///<see langword="XmlResolver" />
    ///  用于处理 XML 架构定义语言 (XSD) 架构中找到的任何 import 或 include 元素。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  如果设置为 <see langword="null" />
    ///  ，则不解析外部资源。
    ///  在 .NET Framework 的 1.1 版本中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  表示提供文档类型定义 (DTD)、XML 数据简化 (XDR) 架构和 XML 架构定义语言 (XSD) 验证的读取器。
  ///  此类已过时。
  ///  从 .NET Framework 2.0 开始，建议你使用 <see cref="T:System.Xml.XmlReaderSettings" />
  ///  类和 <see cref="Overload:System.Xml.XmlReader.Create" />
  ///  方法创建一个验证的 XML 读取器。
  ///</summary>
  [DNTypeName('System.Xml.XmlValidatingReader')]
  DNXmlValidatingReader = interface(DNXmlReader)
  ['{08C23F4D-44D8-3B08-A427-06D6802DDAB0}']
  { getters & setters } 

    function get_NodeType: DNXmlNodeType;
    function get_Name: string;
    function get_LocalName: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_HasValue: Boolean;
    function get_Value: string;
    function get_Depth: Int32;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_IsDefault: Boolean;
    function get_QuoteChar: Char;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_AttributeCount: Int32;
    function get_EOF: Boolean;
    function get_ReadState: DNReadState;
    function get_NameTable: DNXmlNameTable;
    function get_CanResolveEntity: Boolean;
    function get_CanReadBinaryContent: Boolean;
    function get_LineNumber: Int32;
    function get_LinePosition: Int32;
    function get_SchemaType: DDN.mscorlib.DNObject;
    function get_Reader: DNXmlReader;
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_Schemas: DNXmlSchemaCollection;
    function get_EntityHandling: DNEntityHandling;
    procedure set_EntityHandling(value: DNEntityHandling);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    function get_Settings: DNXmlReaderSettings;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_Item(i: Int32): string; overload;
    function get_Item(name: string): string; overload;
    function get_Item(name: string; namespaceURI: string): string; overload;
    function get_CanReadValueChunk: Boolean;
    function get_HasAttributes: Boolean;

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  获取具有指定名称的属性的值。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetAttribute(name: string): string; overload;
    ///<summary>
    ///  获取具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///  如果未找到该属性，则返回 <see langword="null" />
    ///  。
    ///  此方法不移动读取器。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  获取具有指定索引的属性的值。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///  索引是从零开始的。
    ///  （第一个属性的索引为 0。）
    ///</param>
    ///<returns>
    ///  指定的属性的值。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />
    ///  。
    ///</exception>
    function GetAttribute(i: Int32): string; overload;
    ///<summary>
    ///  移动到具有指定名称的属性。
    ///</summary>
    ///  <param name="name">
    ///  属性的限定名称。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(name: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定的本地名称和命名空间统一资源标识符 (URI) 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到了属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则读取器的位置未改变。
    ///</returns>
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  移动到具有指定索引的属性。
    ///</summary>
    ///  <param name="i">
    ///  属性的索引。
    ///</param>
    ///<exception cref="T:System.ArgumentOutOfRangeException"><paramref name="i" />
    ///  参数是小于 0 或大于或等于 <see cref="P:System.Xml.XmlReader.AttributeCount" />
    ///  。
    ///</exception>
    procedure MoveToAttribute(i: Int32); overload;
    ///<summary>
    ///  移动到第一个属性。
    ///</summary>
    ///<returns>
    ///  如果属性存在（读取器移动到第一个属性），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  （读取器的位置不更改）。
    ///</returns>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果存在下一个属性，则为 <see langword="true" />
    ///  ；如果没有其他属性，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  移动到包含当前属性节点的元素。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在属性上（读取器移动到拥有该属性的元素），则为 <see langword="true" />
    ///  ；如果读取器未定位在属性上（读取器的位置不更改），则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToElement: Boolean;
    ///<summary>
    ///  将属性值分析为一个或多个 <see langword="Text" />
    ///  、<see langword="EntityReference" />
    ///  或 <see langword="EndEntity" />
    ///  节点。
    ///</summary>
    ///<returns>
    ///  如果有可返回的节点，则为 <see langword="true" />
    ///  。
    ///  如果进行初始调用时读取器不是定位在属性节点上，或者如果已读取了所有属性值，则为 <see langword="false" />
    ///  。
    ///  如果是空属性（如 misc=""），则返回 <see langword="true" />
    ///  ，同时返回值为 String.Empty 的单个节点。
    ///</returns>
    function ReadAttributeValue: Boolean;
    ///<summary>
    ///  从流中读取下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    function Read: Boolean;
    ///<summary>
    ///  将 <see cref="P:System.Xml.XmlReader.ReadState" />
    ///  更改为“已关闭”。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  解析当前元素的范围内的命名空间前缀。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间统一资源标识符 (URI) 的前缀。
    ///  若要匹配默认命名空间，请传递一个空字符串。
    ///</param>
    ///<returns>
    ///  前缀映射到的命名空间 URI；如果未找到任何匹配的前缀，则为 <see langword="null" />
    ///  。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  解析 <see langword="EntityReference" />
    ///  节点的实体引用。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  读取器未定位在 <see langword="EntityReference" />
    ///  节点。
    ///</exception>
    procedure ResolveEntity;
    ///<summary>
    ///  读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception>
    function ReadContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 Base64 内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBase64(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取内容并返回 BinHex 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
    ///  不支持的当前节点上。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" />
    ///  实现不支持此方法。
    ///</exception>
    function ReadContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  读取元素并对 BinHex 内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是元素节点。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  索引缓冲区或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  该元素包含混合内容。
    ///</exception><exception cref="T:System.FormatException">
    ///  无法将内容转换为请求的类型。
    ///</exception>
    function ReadElementContentAsBinHex(buffer: TArray<Byte>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  将元素或文本节点的内容读取为一个字符串。
    ///</summary>
    ///<returns>
    ///  该元素或文本节点的内容。
    ///  如果读取器定位在元素或文本节点以外的位置，或者当前上下文中没有其他文本内容可返回，则这可以是空字符串。
    ///  文本节点可以是元素或属性文本节点。
    ///</returns>
    function ReadString: string;
    ///<summary>
    ///  获取一个值，该值指示该类是否可返回行信息。
    ///</summary>
    ///<returns>
    ///  如果该类可以返回行信息，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function HasLineInfo: Boolean;
    ///<summary>
    ///  获取指定 XML 架构定义语言 (XSD) 类型的公共语言运行时类型。
    ///</summary>
    ///<returns>
    ///  指定 XML 架构类型的公共语言运行时类型。
    ///</returns>
    function ReadTypedValue: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsObject: DDN.mscorlib.DNObject;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see langword="Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsBoolean: Boolean;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTime: DDN.mscorlib.DNDateTime;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.DateTimeOffset" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDateTimeOffset: DDN.mscorlib.DNDateTimeOffset;
    ///<summary>
    ///  将当前位置的文本内容作为双精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDouble: Double;
    ///<summary>
    ///  将当前位置的文本内容作为单精度浮点数读取。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的当前位置的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsFloat: Single;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  作为将当前位置的文本内容 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsDecimal: DDN.mscorlib.DNDecimal;
    ///<summary>
    ///  将当前位置的文本内容作为 32 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsInt: Int32;
    ///<summary>
    ///  将当前位置的文本内容作为 64 位有符号整数读取。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsLong: Int64;
    ///<summary>
    ///  作为将当前位置的文本内容读取 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.FormatException">
    ///  字符串格式无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAsString: string;
    ///<summary>
    ///  将内容作为指定类型的对象读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///  例如，将 <see cref="T:System.Xml.XmlQualifiedName" />
    ///  对象转换为 xs:string 时可以使用此对象。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  内容不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="returnType" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  当前节点不是受支持的节点类型。
    ///  请参阅下的表以了解详细信息。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject(localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime(localName: string; namespaceURI: string): DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为双精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble(localName: string; namespaceURI: string): Double; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为单精度浮点数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat(localName: string; namespaceURI: string): Single; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal(localName: string; namespaceURI: string): DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt(localName: string; namespaceURI: string): Int32; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后读取当前元素，并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong(localName: string; namespaceURI: string): Int64; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的匹配，然后读取当前元素，并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString(localName: string; namespaceURI: string): string; overload;
    ///<summary>
    ///  检查指定的本地名称和命名空间 URI 与当前元素的本地名称和命名空间 URI 是否匹配，然后将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  指定的本地名称和命名空间 URI 与当前正在读取的元素不匹配。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver; localName: string; namespaceURI: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  跳过当前节点的子级。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Skip;
    ///<summary>
    ///  读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  当前节点不具有值 (<see cref="P:System.Xml.XmlReader.HasValue" />
    ///  是 <see langword="false" />
    ///  )。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException">
    ///  到缓冲区中的索引或索引 + 计数大于分配的缓冲区大小。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlReader" />
    ///  实现不支持此方法。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据格式不正确。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadValueChunk(buffer: TArray<Char>; index: Int32; count: Int32): Int32;
    ///<summary>
    ///  检查当前节点是否为内容 (非空白文本、 <see langword="CDATA" />
    ///  , ，<see langword="Element" />
    ///  , ，<see langword="EndElement" />
    ///  , ，<see langword="EntityReference" />
    ///  , ，或 <see langword="EndEntity" />
    ///  ) 节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///  它跳过以下类型的节点：<see langword="ProcessingInstruction" />
    ///  、<see langword="DocumentType" />
    ///  、<see langword="Comment" />
    ///  、<see langword="Whitespace" />
    ///  或 <see langword="SignificantWhitespace" />
    ///  。
    ///</summary>
    ///<returns><see cref="P:System.Xml.XmlReader.NodeType" />
    ///  方法找到的当前节点或 <see langword="XmlNodeType.None" />
    ///  如果读取器已到达输入流的末尾。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function MoveToContent: DNXmlNodeType;
    ///<summary>
    ///  检查当前节点是否为元素并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.Name" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.Name" />
    ///  不匹配的元素的给定 <paramref name="name" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(name: string); overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的字符串匹配在读取纯文本元素之前。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="name">
    ///  要检查的名称。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="Name" />
    ///  与给定的参数; 不匹配，或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(name: string): string; overload;
    ///<summary>
    ///  检查当前内容节点是否为结束标记并将读取器推进到下一个节点。
    ///</summary>
    ///<exception cref="T:System.Xml.XmlException">
    ///  当前节点不是一个结束标记或输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadEndElement;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  找到开始标记还是空元素标记; <see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement: Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.Name" />
    ///  属性找到的元素与给定的参数匹配。
    ///</summary>
    ///  <param name="name">
    ///  匹配的字符串 <see langword="Name" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是元素与 <see langword="Name" />
    ///  属性与指定的字符串匹配。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果该元素 <see langword="Name" />
    ///  属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(name: string): Boolean; overload;
    ///<summary>
    ///  调用 <see cref="M:System.Xml.XmlReader.MoveToContent" />
    ///  并测试当前内容节点是开始标记还是空元素标记，以及如果 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的字符串匹配。
    ///</summary>
    ///  <param name="localname">
    ///  要匹配的字符串 <see langword="LocalName" />
    ///  找到的元素的属性。
    ///</param>
    ///  <param name="ns">
    ///  要匹配的字符串 <see langword="NamespaceURI" />
    ///  找到的元素的属性。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果生成的节点是一个元素。
    ///<see langword="false" />
    ///  如果以外的节点类型 <see langword="XmlNodeType.Element" />
    ///  找或者，如果 <see langword="LocalName" />
    ///  和 <see langword="NamespaceURI" />
    ///  元素的属性与指定的字符串不匹配。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function IsStartElement(localname: string; ns: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定限定名的元素。
    ///</summary>
    ///  <param name="name">
    ///  元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToFollowing(name: string): Boolean; overload;
    ///<summary>
    ///  一直读取，直到找到具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的元素;否则为 <see langword="false" />
    ///  和 <see cref="T:System.Xml.XmlReader" />
    ///  处于的文件结束状态。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定限定名的子代元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToDescendant(name: string): Boolean; overload;
    ///<summary>
    ///  前移 <see cref="T:System.Xml.XmlReader" />
    ///  到下一个具有指定的本地名称和命名空间 URI 的子代元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的元素的命名空间 URI。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的子代元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的子元素， <see cref="T:System.Xml.XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的元素。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上时 <see cref="M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)" />
    ///  调用，此方法返回 <see langword="false" />
    ///  和位置的 <see cref="T:System.Xml.XmlReader" />
    ///  未发生更改时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  这两个参数的值为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToDescendant(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  前移 <see langword="XmlReader" />
    ///  到下一个具有指定限定名的同级元素。
    ///</summary>
    ///  <param name="name">
    ///  要移动到的同级元素的限定名。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果找到匹配的同级元素，则否则为 <see langword="false" />
    ///  。
    ///  如果未找到匹配的同级元素， <see langword="XmlReader" />
    ///  定位在结束标记 (<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  是 <see langword="XmlNodeType.EndElement" />
    ///  ) 的父元素。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.ArgumentException">
    ///  该参数为空字符串。
    ///</exception>
    function ReadToNextSibling(name: string): Boolean; overload;
    ///<summary>
    ///  将 <see langword="XmlReader" />
    ///  推进到具有指定的本地名称和命名空间 URI 的下一个同级元素。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的同级元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  你希望移动到的同级元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果找到匹配的同级元素，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  如果没有找到匹配的同级元素，<see langword="XmlReader" />
    ///  会定位在父元素的结束标记（<see cref="P:System.Xml.XmlReader.NodeType" />
    ///  为 <see langword="XmlNodeType.EndElement" />
    ///  ）上。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  两个参数值均为 <see langword="null" />
    ///  。
    ///</exception>
    function ReadToNextSibling(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  当在派生类中被重写时，将所有内容（包括标记）当做字符串读取。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///  如果当前节点既非元素，也非属性，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadInnerXml: string;
    ///<summary>
    ///  当在派生类中被重写时，读取表示该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 不正确，或者分析 XML 时出错。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadOuterXml: string;
    ///<summary>
    ///  返回一个新 <see langword="XmlReader" />
    ///  能用于读取当前节点及其所有子代的实例。
    ///</summary>
    ///<returns>
    ///  新的 XML 读取器实例设置为 <see cref="F:System.Xml.ReadState.Initial" />
    ///  。
    ///  调用 <see cref="M:System.Xml.XmlReader.Read" />
    ///  方法将新的读取器定位在调用之前的当前节点上 <see cref="M:System.Xml.XmlReader.ReadSubtree" />
    ///  方法。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用此方法时，XML 读取器未定位在元素上。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlReader" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步获取当前节点的值。
    ///</summary>
    ///<returns>
    ///  当前节点的值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function GetValueAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  文本内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取该流的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果成功读取了下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他节点可读取，则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadAsync: DDN.mscorlib.DNTask<Boolean>;
    ///<summary>
    ///  异步跳过当前节点的子级。
    ///</summary>
    ///<returns>
    ///  当前节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function SkipAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步读取嵌入在 XML 文档中的大量文本流。
    ///</summary>
    ///  <param name="buffer">
    ///  作为文本内容写入到的缓冲区的字符数组。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移量位置 <see cref="T:System.Xml.XmlReader" />
    ///  可以开始将结果复制。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区中的最大字符数。
    ///  此方法返回复制的实际字符数。
    ///</param>
    ///<returns>
    ///  读取到缓冲区中的字符数。
    ///  如果不再有文本内容，则返回值零。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadValueChunkAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步检查当前节点是否为内容节点。
    ///  如果此节点不是内容节点，则读取器向前跳至下一个内容节点或文件结尾。
    ///</summary>
    ///<returns>
    ///  此方法找到的当前节点的 <see cref="P:System.Xml.XmlReader.NodeType" />
    ///  ；如果读取器已到达输入流的末尾，则为 <see langword="XmlNodeType.None" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function MoveToContentAsync: DDN.mscorlib.DNTask<DNXmlNodeType>;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能为请求的类型转换的元素内容
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsObject: DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Boolean" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsBoolean: Boolean; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.DateTime" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDateTime: DDN.mscorlib.DNDateTime; overload;
    ///<summary>
    ///  读取当前元素并将内容作为双精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为双精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为双精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDouble: Double; overload;
    ///<summary>
    ///  读取当前元素并将内容作为单精度浮点数返回。
    ///</summary>
    ///<returns>
    ///  作为单精度浮点数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为单精度浮点数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsFloat: Single; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.Decimal" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.Decimal" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsDecimal: DDN.mscorlib.DNDecimal; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 32 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 32 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 32 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsInt: Int32; overload;
    ///<summary>
    ///  读取当前元素并将内容作为 64 位有符号整数返回。
    ///</summary>
    ///<returns>
    ///  作为 64 位有符号整数的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 64 位有符号整数。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsLong: Int64; overload;
    ///<summary>
    ///  读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  无法将元素内容转换为 <see cref="T:System.String" />
    ///  对象。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAsString: string; overload;
    ///<summary>
    ///  将元素内容作为请求类型读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///  注意   版本的.NET Framework 3.5 的值与 <paramref name="returnType" />
    ///  参数现在可以 <see cref="T:System.DateTimeOffset" />
    ///  类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  未定位在元素上。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  当前元素包含子元素。
    ///  - 或 -
    ///  不能将元素内容转换为请求的类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  默认情况下，调用与 <see langword="null" />
    ///  参数。
    ///</exception><exception cref="T:System.OverflowException">
    ///  读取 <see langword="Decimal.MaxValue" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementContentAs(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  检查当前内容节点是元素与给定 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  并将读取器推进到下一个节点。
    ///</summary>
    ///  <param name="localname">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  在输入流中遇到不正确的 XML。
    ///  - 或 -
    ///<see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  属性找到的元素与给定的参数不匹配。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure ReadStartElement(localname: string; ns: string); overload;
    ///<summary>
    ///  读取纯文本元素。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  不是开始标记; 下一个内容节点。或找到的元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString: string; overload;
    ///<summary>
    ///  检查 <see cref="P:System.Xml.XmlReader.LocalName" />
    ///  和 <see cref="P:System.Xml.XmlReader.NamespaceURI" />
    ///  找到与给定的字符串匹配在读取纯文本元素之前的元素的属性。
    ///  但是，我们建议你使用 <see cref="M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)" />
    ///  方法相反，因为它提供了更直接的方法来处理此操作。
    ///</summary>
    ///  <param name="localname">
    ///  要检查的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  要检查的命名空间 URI。
    ///</param>
    ///<returns>
    ///  所读取的元素中包含的文本。
    ///  如果元素为空，则返回一个空字符串。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException">
    ///  如果不是开始标记; 下一个内容节点。如果该元素 <see langword="LocalName" />
    ///  或 <see langword="NamespaceURI" />
    ///  不匹配给定的参数; 或者如果找到该元素不包含简单的文本值。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function ReadElementString(localname: string; ns: string): string; overload;
    ///<summary>
    ///  异步读取作为当前位置的文本内容 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  作为最适当的公共语言运行时 (CLR) 对象的文本内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  将内容作为指定类型的对象异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  已转换为请求类型的串联文本内容或属性值。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.Object" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个最适当类型的装箱的公共语言运行时 (CLR) 对象。
    ///<see cref="P:System.Xml.XmlReader.ValueType" />
    ///  属性确定适合的 CLR 类型。
    ///  如果将内容类型化为列表类型，则此方法返回一个适当类型的装箱对象的数组。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsObjectAsync: DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取当前元素并返回将内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  元素内容作为 <see cref="T:System.String" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsStringAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  将元素内容作为请求类型异步读取。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的值的类型。
    ///</param>
    ///  <param name="namespaceResolver">
    ///  一个 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象，用于解析与类型转换有关的任何命名空间前缀。
    ///</param>
    ///<returns>
    ///  转换为请求类型的对象的元素内容。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsAsync(returnType: DDN.mscorlib.DNType; namespaceResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  异步读取内容并返回 Base64 解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取元素并对 <see langword="Base64" />
    ///  内容进行解码。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在上一次异步操作完成之前调用了 <see cref="T:System.Xml.XmlReader" />
    ///  方法。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“异步操作已在进行中”。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  调用了 <see cref="T:System.Xml.XmlReader" />
    ///  异步方法，但未将 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标志设置为 <see langword="true" />
    ///  。
    ///  在此情况下，将引发 <see cref="T:System.InvalidOperationException" />
    ///  并显示消息“若要使用 Async 方法，请将 XmlReaderSettings.Async 设置为 True”。
    ///</exception>
    function ReadElementContentAsBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取内容并返回 <see langword="BinHex" />
    ///  解码的二进制字节。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  以异步方式读取元素并将解码 <see langword="BinHex" />
    ///  内容。
    ///</summary>
    ///  <param name="buffer">
    ///  结果文本复制到的缓冲区。
    ///  此值不能为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的偏移，从这个位置开始将结果复制到缓冲区中。
    ///</param>
    ///  <param name="count">
    ///  要复制到缓冲区的最大字节数。
    ///  此方法返回复制的实际字节数。
    ///</param>
    ///<returns>
    ///  写入缓冲区的字节数。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadElementContentAsBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask<Int32>;
    ///<summary>
    ///  异步读取所有内容，包括作为字符串的标记。
    ///</summary>
    ///<returns>
    ///  当前节点中的所有 XML 内容（包括标记）。
    ///  如果当前节点没有任何子级，则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadInnerXmlAsync: DDN.mscorlib.DNTask<string>;
    ///<summary>
    ///  异步读取包含该节点和所有它的子级的内容（包括标记）。
    ///</summary>
    ///<returns>
    ///  如果读取器定位在元素或属性节点上，此方法将返回当前节点及其所有子级的所有 XML 内容（包括标记）；否则返回空字符串。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlReaderSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlReaderSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function ReadOuterXmlAsync: DDN.mscorlib.DNTask<string>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取当前节点的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNodeType" />
    ///  值之一，表示当前节点的类型。
    ///</returns>
    property NodeType: DNXmlNodeType read get_NodeType;
    ///<summary>
    ///  获取当前节点的限定名称。
    ///</summary>
    ///<returns>
    ///  当前节点的限定名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="Name" />
    ///  为 <see langword="bk:book" />
    ///  。
    ///  返回的名称取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />
    ///  。
    ///  下列节点类型返回所列的值。
    ///  所有其他节点类型返回空字符串。
    ///  节点类型
    ///  名称
    ///<see langword="Attribute" />
    ///  属性名。
    ///<see langword="DocumentType" />
    ///  文档类型名称。
    ///<see langword="Element" />
    ///  标记名称。
    ///<see langword="EntityReference" />
    ///  引用的实体的名称。
    ///<see langword="ProcessingInstruction" />
    ///  处理指令的目标。
    ///<see langword="XmlDeclaration" />
    ///  文字字符串 <see langword="xml" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  获取当前节点的本地名称。
    ///</summary>
    ///<returns>
    ///  移除了前缀的当前节点的名称。
    ///  例如，对于元素 &lt;bk:book&gt;，<see langword="LocalName" />
    ///  为 <see langword="book" />
    ///  。
    ///  对于没有名称的节点类型（如 <see langword="Text" />
    ///  、<see langword="Comment" />
    ///  等），该属性返回 String.Empty。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  对于读取器定位到的节点，按照万维网联合会 (W3C) 命名空间规范的定义，获取该节点的命名空间统一资源标识符 (URI)。
    ///</summary>
    ///<returns>
    ///  当前节点的命名空间 URI；否则为空字符串。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  与当前节点关联的命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否可以具有 String.Empty 以外的 <see cref="P:System.Xml.XmlValidatingReader.Value" />
    ///  。
    ///</summary>
    ///<returns>
    ///  如果读取器当前定位在的节点可以具有 <see langword="Value" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasValue: Boolean read get_HasValue;
    ///<summary>
    ///  获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  返回的值取决于节点的 <see cref="P:System.Xml.XmlValidatingReader.NodeType" />
    ///  。
    ///  下表列出具有要返回的值的节点类型。
    ///  所有其他节点类型返回 String.Empty。
    ///  节点类型
    ///  值
    ///<see langword="Attribute" />
    ///  属性的值。
    ///<see langword="CDATA" />
    ///  CDATA 节的内容。
    ///<see langword="Comment" />
    ///  注释的内容。
    ///<see langword="DocumentType" />
    ///  内部子集。
    ///<see langword="ProcessingInstruction" />
    ///  全部内容（不包括指令目标）。
    ///<see langword="SignificantWhitespace" />
    ///  混合内容模型中标记之间的空白区域。
    ///<see langword="Text" />
    ///  文本节点的内容。
    ///<see langword="Whitespace" />
    ///  标记之间的空白。
    ///<see langword="XmlDeclaration" />
    ///  声明的内容。
    ///</returns>
    property Value: string read get_Value;
    ///<summary>
    ///  获取 XML 文档中当前节点的深度。
    ///</summary>
    ///<returns>
    ///  XML 文档中当前节点的深度。
    ///</returns>
    property Depth: Int32 read get_Depth;
    ///<summary>
    ///  获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  当前节点的基 URI。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否为空元素（例如，&lt;MyElement/&gt;）。
    ///</summary>
    ///<returns>
    ///  如果当前节点是一个以 /&gt; 结尾的元素（<see cref="P:System.Xml.XmlValidatingReader.NodeType" />
    ///  等于 <see langword="XmlNodeType.Element" />
    ///  ），则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否是从文档类型定义 (DTD) 或架构中定义的默认值生成的属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点是其值从 DTD 或架构中定义的默认值生成的属性，则为 <see langword="true" />
    ///  ；如果属性值为显式设置的，则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsDefault: Boolean read get_IsDefault;
    ///<summary>
    ///  获取用于括起属性节点的值的引号字符。
    ///</summary>
    ///<returns>
    ///  用于括起属性节点的值的引号字符（" 或 '）。
    ///</returns>
    property QuoteChar: Char read get_QuoteChar;
    ///<summary>
    ///  获取当前 <see langword="xml:space" />
    ///  范围。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlSpace" />
    ///  值之一。
    ///  如果不存在任何 <see langword="xml:space" />
    ///  范围，则该属性默认值为 <see langword="XmlSpace.None" />
    ///  。
    ///</returns>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  获取当前 <see langword="xml:lang" />
    ///  范围。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取当前节点上的属性数目。
    ///</summary>
    ///<returns>
    ///  当前节点上的属性数目。
    ///  该数目包括默认属性。
    ///</returns>
    property AttributeCount: Int32 read get_AttributeCount;
    ///<summary>
    ///  获取一个值，该值指示读取器是否定位在流结尾。
    ///</summary>
    ///<returns>
    ///  如果此读取器定位在流的结尾，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property EOF: Boolean read get_EOF;
    ///<summary>
    ///  获取读取器的状态。
    ///</summary>
    ///<returns><see cref="T:System.Xml.ReadState" />
    ///  值之一。
    ///</returns>
    property ReadState: DNReadState read get_ReadState;
    ///<summary>
    ///  获取与此实现关联的 <see cref="T:System.Xml.XmlNameTable" />
    ///  。
    ///</summary>
    ///<returns><see langword="XmlNameTable" />
    ///  ，它使你能够获取节点内字符串的原子化版本。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  获取一个值，该值指示此读取器是否可以分析和解析实体。
    ///</summary>
    ///<returns>
    ///  如果此读取器可以分析和解析实体，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see langword="XmlValidatingReader" />
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanResolveEntity: Boolean read get_CanResolveEntity;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlValidatingReader" />
    ///  是否实现二进制内容读取方法。
    ///</summary>
    ///<returns>
    ///  如果实现了二进制内容读取方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///<see cref="T:System.Xml.XmlValidatingReader" />
    ///  类返回 <see langword="true" />
    ///  。
    ///</returns>
    property CanReadBinaryContent: Boolean read get_CanReadBinaryContent;
    ///<summary>
    ///  获取当前行号。
    ///</summary>
    ///<returns>
    ///  当前行号。
    ///  此属性的起始值为 1。
    ///</returns>
    property LineNumber: Int32 read get_LineNumber;
    ///<summary>
    ///  获取当前行位置。
    ///</summary>
    ///<returns>
    ///  当前行位置。
    ///  此属性的起始值为 1。
    ///</returns>
    property LinePosition: Int32 read get_LinePosition;
    ///<summary>
    ///  获取架构类型对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />
    ///  、<see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />
    ///  或 <see cref="T:System.Xml.Schema.XmlSchemaComplexType" />
    ///  ，这取决于节点值是内置 XML 架构定义语言 (XSD) 类型还是用户定义的 simpleType 或 complexType；如果当前节点没有架构类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    property SchemaType: DDN.mscorlib.DNObject read get_SchemaType;
    ///<summary>
    ///  获取用于构造此 <see langword="XmlValidatingReader" />
    ///  的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///<returns>
    ///  构造函数中指定的 <see langword="XmlReader" />
    ///  。
    ///</returns>
    property Reader: DNXmlReader read get_Reader;
    ///<summary>
    ///  获取或设置一个值，该值指示要执行的验证的类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.ValidationType" />
    ///  值之一。
    ///  如果未设置此属性，则它默认为 ValidationType.Auto。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  在调用读取后设置的属性。
    ///</exception>
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    ///<summary>
    ///  获取一个用于验证的 <see cref="T:System.Xml.Schema.XmlSchemaCollection" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于验证的 <see langword="XmlSchemaCollection" />
    ///  。
    ///</returns>
    property Schemas: DNXmlSchemaCollection read get_Schemas;
    ///<summary>
    ///  获取或设置一个值，该值指定读取器处理实体的方式。
    ///</summary>
    ///<returns><see cref="T:System.Xml.EntityHandling" />
    ///  值之一。
    ///  如果未指定 <see langword="EntityHandling" />
    ///  ，则它将默认为 EntityHandling.ExpandEntities。
    ///</returns>
    ///<exception cref="T:System.ArgumentOutOfRangeException">
    ///  指定的值无效。
    ///</exception>
    property EntityHandling: DNEntityHandling read get_EntityHandling write set_EntityHandling;
    ///<summary>
    ///  设置用于解析外部文档类型定义 (DTD) 和架构位置引用的 <see cref="T:System.Xml.XmlResolver" />
    ///  。
    ///<see langword="XmlResolver" />
    ///  用于处理 XML 架构定义语言 (XSD) 架构中找到的任何 import 或 include 元素。
    ///</summary>
    ///<returns>
    ///  要使用的 <see langword="XmlResolver" />
    ///  。
    ///  如果设置为 <see langword="null" />
    ///  ，则不解析外部资源。
    ///  在 .NET Framework 的 1.1 版本中，调用方必须受到完全信任才能指定 <see langword="XmlResolver" />
    ///  。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取或设置一个值，该值指示是否进行命名空间支持。
    ///</summary>
    ///<returns>
    ///  要进行命名空间支持，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    ///<summary>
    ///  获取文档的编码属性。
    ///</summary>
    ///<returns>
    ///  编码值。
    ///  如果不存在任何编码属性且不存在字节顺序标记，则这将默认为 UTF-8。
    ///</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding;
    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlReader" />
    ///  实例的 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象，用于创建此读取器实例。
    ///  如果此读取器不使用创建 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlReaderSettings read get_Settings;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，它包含当前节点的架构信息。
    ///  架构信息可以对元素、 属性或具有非空文本节点上设置 <see cref="P:System.Xml.XmlReader.ValueType" />
    ///  （类型化值）。
    ///  如果当前节点不属于上述节点类型，或者如果 <see langword="XmlReader" />
    ///  实例不会报告架构信息，则此属性返回 <see langword="null" />
    ///  。
    ///  如果是通过调用此属性 <see cref="T:System.Xml.XmlTextReader" />
    ///  或 <see cref="T:System.Xml.XmlValidatingReader" />
    ///  对象，则此属性始终返回 <see langword="null" />
    ///  。
    ///  这些 <see langword="XmlReader" />
    ///  实现不公开架构信息通过 <see langword="SchemaInfo" />
    ///  属性。
    ///  如果必须为某个元素获取架构验证后信息集 (PSVI)，请在此元素的结束标记处（而不是在开始标记处）放置读取器。
    ///  获取 PSVI <see langword="SchemaInfo" />
    ///  读取器的属性。
    ///  通过创建的验证读取器 <see cref="Overload:System.Xml.XmlReader.Create" />
    ///  与 <see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为 <see cref="F:System.Xml.ValidationType.Schema" />
    ///  具有完整的 PSVI 的元素仅在读取器定位在元素的结束标记上时。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取当前节点的公共语言运行时 (CLR) 类型。
    ///</summary>
    ///<returns>
    ///  与节点的类型化值对应的 CLR 类型。
    ///  默认值为 <see langword="System.String" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    property Item[i: Int32]: string read get_Item; default;
    property Item[name: string]: string read get_Item; default;
    property Item[name: string; namespaceURI: string]: string read get_Item; default;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XmlReader" />
    ///  是否实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  实现 <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" />
    ///  方法，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property CanReadValueChunk: Boolean read get_CanReadValueChunk;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  如果当前节点具有属性，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlReader" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property HasAttributes: Boolean read get_HasAttributes;
  end;

  TDNXmlValidatingReader = class(TDNGenericImport<DNXmlValidatingReaderClass, DNXmlValidatingReader>) end;

  //-------------namespace: System.Xml----------------
  DNXmlReaderSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{333069D0-1337-5A1D-988D-3D92D51A0162}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlReaderSettings; overload;
    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  类的新实例。
    ///</summary>
    ///  <param name="resolver">
    ///  XML 解析器。
    ///</param>
    {class} function init(resolver: DNXmlResolver): DNXmlReaderSettings; overload;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///  如果设置为 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlException" />
    ///  时，将引发 <see cref="T:System.Xml.XmlReader" />
    ///  尝试访问外部资源。
    ///  默认值是一种新 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  没有凭据。
    ///  从.NET Framework 4.5.2 开始，此设置具有默认值为 <see langword="null" />
    ///  。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  指定的功能以支持上的一组 <see cref="T:System.Xml.XmlReader" />
  ///  创建的对象 <see cref="Overload:System.Xml.XmlReader.Create" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Xml.XmlReaderSettings')]
  DNXmlReaderSettings = interface(DDN.mscorlib.DNObject)
  ['{A34E9932-0279-3945-87FC-037F0B86F4F9}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_NameTable: DNXmlNameTable;
    procedure set_NameTable(value: DNXmlNameTable);
    procedure set_XmlResolver(value: DNXmlResolver);
    function get_LineNumberOffset: Int32;
    procedure set_LineNumberOffset(value: Int32);
    function get_LinePositionOffset: Int32;
    procedure set_LinePositionOffset(value: Int32);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_MaxCharactersInDocument: Int64;
    procedure set_MaxCharactersInDocument(value: Int64);
    function get_MaxCharactersFromEntities: Int64;
    procedure set_MaxCharactersFromEntities(value: Int64);
    function get_IgnoreWhitespace: Boolean;
    procedure set_IgnoreWhitespace(value: Boolean);
    function get_IgnoreProcessingInstructions: Boolean;
    procedure set_IgnoreProcessingInstructions(value: Boolean);
    function get_IgnoreComments: Boolean;
    procedure set_IgnoreComments(value: Boolean);
    function get_ProhibitDtd: Boolean;
    procedure set_ProhibitDtd(value: Boolean);
    function get_DtdProcessing: DNDtdProcessing;
    procedure set_DtdProcessing(value: DNDtdProcessing);
    function get_CloseInput: Boolean;
    procedure set_CloseInput(value: Boolean);
    function get_ValidationType: DNValidationType;
    procedure set_ValidationType(value: DNValidationType);
    function get_ValidationFlags: DNXmlSchemaValidationFlags;
    procedure set_ValidationFlags(value: DNXmlSchemaValidationFlags);
    function get_Schemas: DNXmlSchemaSet;
    procedure set_Schemas(value: DNXmlSchemaSet);

  { events } 

    procedure add_ValidationEventHandler(value: DNValidationEventHandler);
    procedure remove_ValidationEventHandler(value: DNValidationEventHandler);

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  实例的副本。
    ///</summary>
    ///<returns>
    ///  克隆 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///</returns>
    function Clone: DNXmlReaderSettings;
    ///<summary>
    ///  将设置类的成员重置为各自的默认值。
    ///</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置是否异步 <see cref="T:System.Xml.XmlReader" />
    ///  方法可对特定 <see cref="T:System.Xml.XmlReader" />
    ///  实例。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果可以使用异步方法，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Async: Boolean read get_Async write set_Async;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.XmlNameTable" />
    ///  用于原子化的字符串比较。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNameTable" />
    ///  用于存储所有使用的所有原子化的字符串 <see cref="T:System.Xml.XmlReader" />
    ///  创建使用此实例 <see cref="T:System.Xml.XmlReaderSettings" />
    ///  对象。
    ///  默认值为 <see langword="null" />
    ///  。
    ///  创建 <see cref="T:System.Xml.XmlReader" />
    ///  实例将使用新的空 <see cref="T:System.Xml.NameTable" />
    ///  如果此值是 <see langword="null" />
    ///  。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable write set_NameTable;
    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  用来访问外部文档。
    ///  如果设置为 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlException" />
    ///  时，将引发 <see cref="T:System.Xml.XmlReader" />
    ///  尝试访问外部资源。
    ///  默认值是一种新 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  没有凭据。
    ///  从.NET Framework 4.5.2 开始，此设置具有默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
    ///<summary>
    ///  获取或设置行号偏移量的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  行号偏移量。
    ///  默认值为 0。
    ///</returns>
    property LineNumberOffset: Int32 read get_LineNumberOffset write set_LineNumberOffset;
    ///<summary>
    ///  获取或设置的行位置偏移量 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  行位置偏移量。
    ///  默认值为 0。
    ///</returns>
    property LinePositionOffset: Int32 read get_LinePositionOffset write set_LinePositionOffset;
    ///<summary>
    ///  获取或设置的一致性级别的 <see cref="T:System.Xml.XmlReader" />
    ///  将遵循。
    ///</summary>
    ///<returns>
    ///  指定一致性级别（XML 读取器将强制该级别）的枚举值之一。
    ///  默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />
    ///  。
    ///</returns>
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    ///<summary>
    ///  获取或设置一个值，该值指示是否进行字符检查。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要进行字符检查;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///  如果 <see cref="T:System.Xml.XmlReader" />
    ///  是处理文本数据时，将始终检查 XML 名称和文本内容是否有效，而不考虑属性设置。
    ///  设置 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" />
    ///  到 <see langword="false" />
    ///  关闭字符检查的字符实体引用。
    ///</returns>
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    ///<summary>
    ///  获取或设置一个值，该值指明 XML 文档中所允许的最大字符数。
    ///  零 (0) 值表示对 XML 文档的大小没有限制。
    ///  非零值指定最大大小（以字符数计）。
    ///</summary>
    ///<returns>
    ///  XML 文档中所允许的最大字符数。
    ///  默认值为 0。
    ///</returns>
    property MaxCharactersInDocument: Int64 read get_MaxCharactersInDocument write set_MaxCharactersInDocument;
    ///<summary>
    ///  获取或设置一个值，该值指示文档中允许扩展实体产生的最大字符数。
    ///</summary>
    ///<returns>
    ///  扩展实体中允许的最大字符数。
    ///  默认值为 0。
    ///</returns>
    property MaxCharactersFromEntities: Int64 read get_MaxCharactersFromEntities write set_MaxCharactersFromEntities;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略无关紧要的空白区域。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略空白;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreWhitespace: Boolean read get_IgnoreWhitespace write set_IgnoreWhitespace;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略处理指令。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略处理指令，则否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreProcessingInstructions: Boolean read get_IgnoreProcessingInstructions write set_IgnoreProcessingInstructions;
    ///<summary>
    ///  获取或设置一个值，该值指示是否忽略注释。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略注释;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property IgnoreComments: Boolean read get_IgnoreComments write set_IgnoreComments;
    ///<summary>
    ///  获取或设置一个值，该值指示是否禁用文档类型定义 (DTD) 处理。
    ///  此属性已过时。
    ///  请改用 <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />
    ///  。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要禁用 DTD 处理。否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property ProhibitDtd: Boolean read get_ProhibitDtd write set_ProhibitDtd;
    ///<summary>
    ///  获取或设置确定 DTD 的处理的值。
    ///</summary>
    ///<returns>
    ///  确定 DTD 的处理的枚举值之一。
    ///  默认值为 <see cref="F:System.Xml.DtdProcessing.Prohibit" />
    ///  。
    ///</returns>
    property DtdProcessing: DNDtdProcessing read get_DtdProcessing write set_DtdProcessing;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在基础流或 <see cref="T:System.IO.TextReader" />
    ///  时读取器关闭时被关闭。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要关闭基础流或 <see cref="T:System.IO.TextReader" />
    ///  时读取器已关闭，否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CloseInput: Boolean read get_CloseInput write set_CloseInput;
    ///<summary>
    ///  获取或设置一个值，该值指示是否<see cref="T:System.Xml.XmlReader" />
    ///  将执行验证或读取时键入分配。
    ///</summary>
    ///<returns>
    ///  之一<see cref="T:System.Xml.ValidationType" />
    ///  值，该值指示是否将执行验证或读取时键入分配 XmlReader。
    ///  默认值为 <see langword="ValidationType.None" />
    ///  。
    ///</returns>
    property ValidationType: DNValidationType read get_ValidationType write set_ValidationType;
    ///<summary>
    ///  获取或设置一个指示架构验证设置的值。
    ///  此设置适用于<see cref="T:System.Xml.XmlReader" />
    ///  验证架构的对象 (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" />
    ///  属性设置为<see langword="ValidationType.Schema" />
    ///  )。
    ///</summary>
    ///<returns>
    ///  指定验证选项的枚举值的按位组合。
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" />
    ///  和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" />
    ///  默认启用。
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />
    ///<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />
    ///  ，和<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" />
    ///  默认处于禁用状态。
    ///</returns>
    property ValidationFlags: DNXmlSchemaValidationFlags read get_ValidationFlags write set_ValidationFlags;
    ///<summary>
    ///  获取或设置 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  在执行架构验证时使用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  在执行架构验证时使用。
    ///  默认值为空 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  对象。
    ///</returns>
    property Schemas: DNXmlSchemaSet read get_Schemas write set_Schemas;
  end;

  TDNXmlReaderSettings = class(TDNGenericImport<DNXmlReaderSettingsClass, DNXmlReaderSettings>) end;

  //-------------namespace: System.Xml----------------
  DNXmlResolverClass = interface(DDN.mscorlib.DNObjectClass)
  ['{EDE29340-6461-5FEC-9331-2E67780C1D99}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { static propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  ///<summary>
  ///  解析由统一资源标识符 (URI) 命名的外部 XML 资源。
  ///</summary>
  [DNTypeName('System.Xml.XmlResolver')]
  DNXmlResolver = interface(DDN.mscorlib.DNObject)
  ['{F2DEB691-8A4B-36EE-9262-ED43949B7CC1}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    ///<summary>
    ///  当在派生类中被重写时，从基 URI 和相对 URI 解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns>
    ///  绝对 URI 或 <see langword="null" />
    ///  如果能解析相对 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="relativeUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    ///<summary>
    ///  使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  将 URI 异步映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  当在派生类中被重写时，将 URI 映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 System.IO.Stream 对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" />
    ///  不是 <see langword="Stream" />
    ///  类型。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  指定的 URI 不是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  没有运行时错误 （例如，中断的服务器连接）。
    ///</exception>
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlResolver = class(TDNGenericImport<DNXmlResolverClass, DNXmlResolver>) end;

  //-------------namespace: System.Xml.Resolvers----------------
  DNXmlPreloadedResolverClass = interface(DNXmlResolverClass)
  ['{D6792A31-45EC-5D74-9A1A-53860DAB4F1A}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlPreloadedResolver; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  类与指定预加载已知 Dtd。
    ///</summary>
    ///  <param name="preloadedDtds">
    ///  应预填充到缓存中的已知 Dtd。
    ///</param>
    {class} function init(preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  类具有指定的回退冲突解决程序。
    ///</summary>
    ///  <param name="fallbackResolver"><see langword="XmlResolver" />
    ///  , ，<see langword="XmlXapResolver" />
    ///  , ，或者您自己的冲突解决程序。
    ///</param>
    {class} function init(fallbackResolver: DNXmlResolver): DNXmlPreloadedResolver; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  类到指定的回退解析程序并预加载已知 Dtd。
    ///</summary>
    ///  <param name="fallbackResolver"><see langword="XmlResolver" />
    ///  , ，<see langword="XmlXapResolver" />
    ///  , ，或者您自己的冲突解决程序。
    ///</param>
    ///  <param name="preloadedDtds">
    ///  应预填充到缓存中的已知 Dtd。
    ///</param>
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds): DNXmlPreloadedResolver; overload;
    {class} function init(fallbackResolver: DNXmlResolver; preloadedDtds: DNXmlKnownDtds; uriComparer: DDN.mscorlib.DNIEqualityComparer<DDN.System.DNUri>): DNXmlPreloadedResolver; overload;

  { static propertys } 

    ///<summary>
    ///  设置用于验证身份的基础的凭据 <see cref="T:System.Net.WebRequest" />
    ///  。
    ///</summary>
    ///<returns>
    ///  使用基础 web 请求进行身份验证的凭据。
    ///</returns>
    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  ///<summary>
  ///  表示一个类，用于预填充缓存的 Dtd 或 XML 流。
  ///</summary>
  [DNTypeName('System.Xml.Resolvers.XmlPreloadedResolver')]
  DNXmlPreloadedResolver = interface(DNXmlResolver)
  ['{25F71FE6-DA1F-37E0-8D82-9E600E6214DA}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    function get_PreloadedUris: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri>;

  { methods } 

    ///<summary>
    ///  确定冲突解决程序是否支持其他 <see cref="T:System.Type" />
    ///  s 比只是 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  要检查的绝对 URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的 <see cref="T:System.Type" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  将字节数组转换为 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储并将其映射到的 URI。
    ///  如果存储已包含对同一 uri 的映射，将重写现有的映射。
    ///</summary>
    ///  <param name="uri">
    ///  将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储。
    ///</param>
    ///  <param name="value">
    ///  具有与所提供 URI 相对应的数据的字节数组。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  或 <paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(uri: DDN.System.DNUri; value: TArray<Byte>); overload;
    ///<summary>
    ///  将字节数组转换为 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储并将其映射到的 URI。
    ///  如果存储已包含对同一 uri 的映射，将重写现有的映射。
    ///</summary>
    ///  <param name="uri">
    ///  将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储。
    ///</param>
    ///  <param name="value">
    ///  具有与所提供 URI 相对应的数据的字节数组。
    ///</param>
    ///  <param name="offset">
    ///  中提供的字节数组数据开始位置的偏移量。
    ///</param>
    ///  <param name="count">
    ///  要从字节数组，从提供的偏移量开始读取的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  或 <paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset" />
    ///  或 <paramref name="count" />
    ///  小于 0。
    ///  - 或 -
    ///  长度 <paramref name="value" />
    ///  减去 <paramref name="offset" />
    ///  是小于 <paramref name="count." />
    ///</exception>
    procedure Add(uri: DDN.System.DNUri; value: TArray<Byte>; offset: Int32; count: Int32); overload;
    ///<summary>
    ///  将一个字符串与预加载数据添加 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储并将其映射到的 URI。
    ///  如果存储已包含对同一 uri 的映射，将重写现有的映射。
    ///</summary>
    ///  <param name="uri">
    ///  将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储。
    ///</param>
    ///  <param name="value">
    ///  一个 <see langword="String" />
    ///  对应于提供的 URI 的数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  或 <paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(uri: DDN.System.DNUri; value: string); overload;
    ///<summary>
    ///  删除与从 URI 相对应的数据 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  。
    ///</summary>
    ///  <param name="uri">
    ///  应从删除的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Remove(uri: DDN.System.DNUri);
    ///<summary>
    ///  从基 URI 和相对 URI 解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns><see cref="T:System.Uri" />
    ///  表示的绝对 URI 或 <see langword="null" />
    ///  如果能解析相对 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    ///<summary>
    ///  将 URI 映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当解析 Uri 时，Silverlight 的.NET framework 当前版本不使用此参数。
    ///  此参数提供供今后的扩展使用。
    ///  例如，此参数可以是映射到 xlink:role，用作在其他情况下的特定于实现的参数。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  支持 <see cref="T:System.IO.Stream" />
    ///  对象和 <see cref="T:System.IO.TextReader" />
    ///  对象添加为 Uri <see langword="String" />
    ///  。
    ///  如果冲突解决程序不支持所请求的类型，则将引发异常。
    ///  使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" />
    ///  方法，以确定是否具有特定 <see langword="Type" />
    ///  受此冲突解决程序。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对应于实际的源的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  无法解析 URI 中传递 <paramref name="absoluteUri" />
    ///  。
    ///  - 或 -
    ///  <paramref name="ofObjectToReturn" />
    ///  不是类型的受支持。
    ///</exception>
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  添加 <see cref="T:System.IO.Stream" />
    ///  到 <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储并将其映射到的 URI。
    ///  如果存储已包含对同一 uri 的映射，将重写现有的映射。
    ///</summary>
    ///  <param name="uri">
    ///  将被添加到的数据的 URI <see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  存储。
    ///</param>
    ///  <param name="value">
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  对应于提供的 URI 的数据。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="uri" />
    ///  或 <paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    procedure Add(uri: DDN.System.DNUri; value: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  将 URI 异步映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当解析 Uri 时，Silverlight 的.NET framework 当前版本不使用此参数。
    ///  此参数提供供今后的扩展使用。
    ///  例如，此参数可以是映射到 xlink:role，用作在其他情况下的特定于实现的参数。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///<see cref="T:System.Xml.Resolvers.XmlPreloadedResolver" />
    ///  支持 <see cref="T:System.IO.Stream" />
    ///  对象和 <see cref="T:System.IO.TextReader" />
    ///  对象添加为 Uri <see langword="String" />
    ///  。
    ///  如果冲突解决程序不支持所请求的类型，则将引发异常。
    ///  使用 <see cref="M:System.Xml.Resolvers.XmlPreloadedResolver.SupportsType(System.Uri,System.Type)" />
    ///  方法，以确定是否具有特定 <see langword="Type" />
    ///  受此冲突解决程序。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  或 <see cref="T:System.IO.TextReader" />
    ///  对应于实际的源的对象。
    ///</returns>
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  设置用于验证身份的基础的凭据 <see cref="T:System.Net.WebRequest" />
    ///  。
    ///</summary>
    ///<returns>
    ///  使用基础 web 请求进行身份验证的凭据。
    ///</returns>
    property Credentials: DDN.System.DNICredentials write set_Credentials;
    ///<summary>
    ///  获取预加载的 Uri 的集合。
    ///</summary>
    ///<returns>
    ///  预加载的 Uri 的集合。
    ///</returns>
    property PreloadedUris: DDN.mscorlib.DNIEnumerable<DDN.System.DNUri> read get_PreloadedUris;
  end;

  TDNXmlPreloadedResolver = class(TDNGenericImport<DNXmlPreloadedResolverClass, DNXmlPreloadedResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlSecureResolverClass = interface(DNXmlResolverClass)
  ['{11A292E9-5293-562F-95D8-41BDF87FA727}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    ///<summary>
    ///  使用提供的 <see cref="T:System.Xml.XmlResolver" />
    ///  和 URL 初始化 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="resolver">
    ///  由 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  包装的 XML 解析程序。
    ///</param>
    ///  <param name="securityUrl">
    ///  用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" />
    ///  的<see cref="T:System.Security.PermissionSet" />
    ///  的 URL。
    ///<see cref="T:System.Xml.XmlSecureResolver" />
    ///  在对基础 <see cref="T:System.Xml.XmlResolver" />
    ///  调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
    ///  之前，先对创建的 <see cref="T:System.Security.PermissionSet" />
    ///  调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />
    ///  。
    ///</param>
    {class} function init(resolver: DNXmlResolver; securityUrl: string): DNXmlSecureResolver; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlResolver" />
    ///  和 <see cref="T:System.Security.Policy.Evidence" />
    ///  初始化 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="resolver">
    ///  由 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  包装的 XML 解析程序。
    ///</param>
    ///  <param name="evidence">
    ///  用于创建将应用于基础 <see cref="T:System.Xml.XmlResolver" />
    ///  的 <see cref="T:System.Security.PermissionSet" />
    ///  的证据。
    ///<see cref="T:System.Xml.XmlSecureResolver" />
    ///  在对基础 <see cref="T:System.Xml.XmlResolver" />
    ///  调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
    ///  之前，先对创建的<see cref="T:System.Security.PermissionSet" />
    ///  调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />
    ///  方法。
    ///</param>
    {class} function init(resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence): DNXmlSecureResolver; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlResolver" />
    ///  和 <see cref="T:System.Security.PermissionSet" />
    ///  初始化 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  类的一个新实例。
    ///</summary>
    ///  <param name="resolver">
    ///  由 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  包装的 XML 解析程序。
    ///</param>
    ///  <param name="permissionSet">
    ///  要应用于基础 <see cref="T:System.Xml.XmlResolver" />
    ///  的权限集。
    ///<see cref="T:System.Xml.XmlSecureResolver" />
    ///  对基础 XML 解析程序调用 <see cref="M:System.Xml.XmlSecureResolver.GetEntity(System.Uri,System.String,System.Type)" />
    ///  方法之前，先对权限集调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />
    ///  方法。
    ///</param>
    {class} function init(resolver: DNXmlResolver; permissionSet: DDN.mscorlib.DNPermissionSet): DNXmlSecureResolver; overload;

  { static methods } 

    ///<summary>
    ///  使用提供的 URL 创建证据。
    ///</summary>
    ///  <param name="securityUrl">
    ///  用来创建证据的 URL。
    ///</param>
    ///<returns>
    ///  从默认策略定义的提供的 URL 中生成的证据。
    ///</returns>
    {class} function CreateEvidenceForUrl(securityUrl: string): DDN.mscorlib.DNEvidence;

  { static propertys } 

    ///<summary>
    ///  设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///<see cref="T:System.Xml.XmlSecureResolver" />
    ///  在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上设置给定的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  没有用户凭据。
    ///</returns>
    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  ///<summary>
  ///  通过包装 <see cref="T:System.Xml.XmlResolver" />
  ///  对象和限制基础 <see cref="T:System.Xml.XmlResolver" />
  ///  有权访问的资源，帮助保护 <see cref="T:System.Xml.XmlResolver" />
  ///  的另一个实现。
  ///</summary>
  [DNTypeName('System.Xml.XmlSecureResolver')]
  DNXmlSecureResolver = interface(DNXmlResolver)
  ['{2D1232D7-9DBC-35AD-A3B6-98F6CA04D053}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    ///<summary>
    ///  将 URI 映射到包含实际资源的对象。
    ///  此方法在对基础 <see cref="T:System.Xml.XmlResolver" />
    ///  调用<see langword="GetEntity" />
    ///  之前，先调用 <see cref="M:System.Security.PermissionSet.PermitOnly" />
    ///  ，以临时设置构造函数中创建的 <see cref="T:System.Security.PermissionSet" />
    ///  ，从而打开该资源。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  通过在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上调用 <see langword="GetEntity" />
    ///  而返回的流。
    ///  如果指定 <see cref="T:System.IO.Stream" />
    ///  以外的类型，方法将返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" />
    ///  既不是 <see langword="null" />
    ///  也不是 <see cref="T:System.IO.Stream" />
    ///  类型。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  指定的 URI 不是一个绝对 URI。
    ///</exception><exception cref="T:System.NullReferenceException"><paramref name="absoluteUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  没有运行时错误 （例如，中断的服务器连接）。
    ///</exception>
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  通过在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上调用 <see langword="ResolveUri" />
    ///  ，从基 URI 和相对 URI 中解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns>
    ///  绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />
    ///  （通过在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上调用 <see langword="ResolveUri" />
    ///  来返回）。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="relativeUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    ///<summary>
    ///  将 URI 异步映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlSecureResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  通过在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上调用 <see langword="GetEntity" />
    ///  而返回的流。
    ///  如果指定 <see cref="T:System.IO.Stream" />
    ///  以外的类型，方法将返回 <see langword="null" />
    ///  。
    ///</returns>
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///<see cref="T:System.Xml.XmlSecureResolver" />
    ///  在基础 <see cref="T:System.Xml.XmlResolver" />
    ///  上设置给定的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see cref="T:System.Xml.XmlSecureResolver" />
    ///  没有用户凭据。
    ///</returns>
    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlSecureResolver = class(TDNGenericImport<DNXmlSecureResolverClass, DNXmlSecureResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlUrlResolverClass = interface(DNXmlResolverClass)
  ['{4ACC9404-F37B-52C5-9DFA-2B613A70A8A1}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    procedure set_CachePolicy(value: DDN.System.DNRequestCachePolicy);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlUrlResolver;

  { static propertys } 

    ///<summary>
    ///  设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlUrlResolver" />
    ///  没有用户凭据。
    ///</returns>
    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
    ///<summary>
    ///  获取或设置基础 <see cref="T:System.Net.WebRequest" />
    ///  对象的网络代理。
    ///</summary>
    ///<returns>
    ///  用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />
    ///  。
    ///</returns>
    {class} property Proxy: DDN.System.DNIWebProxy write set_Proxy;
    ///<summary>
    ///  获取或设置基础 <see cref="T:System.Net.WebRequest" />
    ///  对象的缓存策略。
    ///</summary>
    ///<returns>
    ///  基础 Web 请求的缓存策略。
    ///</returns>
    {class} property CachePolicy: DDN.System.DNRequestCachePolicy write set_CachePolicy;
  end;

  ///<summary>
  ///  解析由统一资源标识符 (URI) 命名的外部 XML 资源。
  ///</summary>
  [DNTypeName('System.Xml.XmlUrlResolver')]
  DNXmlUrlResolver = interface(DNXmlResolver)
  ['{7D359CC5-1CE8-3E77-9758-AF340B8CBE01}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);
    procedure set_Proxy(value: DDN.System.DNIWebProxy);
    procedure set_CachePolicy(value: DDN.System.DNRequestCachePolicy);

  { methods } 

    ///<summary>
    ///  将 URI 映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前实现只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.XmlException"><paramref name="ofObjectToReturn" />
    ///  既不是 <see langword="null" />
    ///  也不是 <see langword="Stream" />
    ///  类型。
    ///</exception><exception cref="T:System.UriFormatException">
    ///  指定的 URI 不是一个绝对 URI。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="absoluteUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Exception">
    ///  没有运行时错误 （例如，中断的服务器连接）。
    ///</exception>
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  从基 URI 和相对 URI 解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns>
    ///  绝对 URI；如果不能解析相对 URI，则为 <see langword="null" />
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="baseUri" />
    ///  为 <see langword="null" />
    ///  或 <paramref name="relativeUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    ///<summary>
    ///  将 URI 异步映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前实现只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    ///<summary>
    ///  使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlUrlResolver" />
    ///  没有用户凭据。
    ///</returns>
    property Credentials: DDN.System.DNICredentials write set_Credentials;
    ///<summary>
    ///  获取或设置基础 <see cref="T:System.Net.WebRequest" />
    ///  对象的网络代理。
    ///</summary>
    ///<returns>
    ///  用于访问 Internet 资源的 <see cref="T:System.Net.IWebProxy" />
    ///  。
    ///</returns>
    property Proxy: DDN.System.DNIWebProxy write set_Proxy;
    ///<summary>
    ///  获取或设置基础 <see cref="T:System.Net.WebRequest" />
    ///  对象的缓存策略。
    ///</summary>
    ///<returns>
    ///  基础 Web 请求的缓存策略。
    ///</returns>
    property CachePolicy: DDN.System.DNRequestCachePolicy write set_CachePolicy;
  end;

  TDNXmlUrlResolver = class(TDNGenericImport<DNXmlUrlResolverClass, DNXmlUrlResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlXapResolverClass = interface(DNXmlResolverClass)
  ['{94880A7B-7E64-56C6-8C7E-9DFFB432FCD4}']
  { static getter & setter } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlXapResolver" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlXapResolver;

  { static methods } 

    ///<summary>
    ///  注册应用程序的资源流冲突解决程序。
    ///</summary>
    ///  <param name="appStreamResolver">
    ///  一个应用程序资源冲突解决程序注册。
    ///</param>
    {class} procedure RegisterApplicationResourceStreamResolver(appStreamResolver: DNIApplicationResourceStreamResolver);

  { static propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    {class} property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  ///<summary>
  ///  XmlXapResolver 类型用于解决 Silverlight 应用程序的 XAP 程序包中的资源。
  ///</summary>
  [DNTypeName('System.Xml.XmlXapResolver')]
  DNXmlXapResolver = interface(DNXmlResolver)
  ['{3CDE9F32-B3FA-3958-83FF-AE0C317F169B}']
  { getters & setters } 

    procedure set_Credentials(value: DDN.System.DNICredentials);

  { methods } 

    ///<summary>
    ///  将 URI 映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当解析 Uri 时，当前版本不使用此参数。
    ///  这被提供供今后的扩展。
    ///  例如，这可以映射到 xlink︰ 角色，用作在其他情况下实现特定参数。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///  如果找不到该流，则将引发异常。
    ///</returns>
    function GetEntity(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNObject;
    ///<summary>
    ///  当在派生类中被重写时，从基 URI 和相对 URI 解析绝对 URI。
    ///</summary>
    ///  <param name="baseUri">
    ///  用于解析相对 URI 的基 URI。
    ///</param>
    ///  <param name="relativeUri">
    ///  要解析的 URI。
    ///  URI 可以是绝对的或相对的。
    ///  如果是绝对的，此值有效地替换 <paramref name="baseUri" />
    ///  值。
    ///  如果是相对的，它与 <paramref name="baseUri" />
    ///  组合以构成绝对 URI。
    ///</param>
    ///<returns>
    ///  绝对 URI 或 <see langword="null" />
    ///  如果能解析相对 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="relativeUri" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    function ResolveUri(baseUri: DDN.System.DNUri; relativeUri: string): DDN.System.DNUri;
    ///<summary>
    ///  使之外的返回类型的解析程序 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  URI。
    ///</param>
    ///  <param name="type">
    ///  要返回的类型。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <paramref name="type" />
    ///  受支持; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function SupportsType(absoluteUri: DDN.System.DNUri; &type: DDN.mscorlib.DNType): Boolean;
    ///<summary>
    ///  将 URI 异步映射到包含实际资源的对象。
    ///</summary>
    ///  <param name="absoluteUri">
    ///  从 <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
    ///  返回的 URI。
    ///</param>
    ///  <param name="role">
    ///  当前未使用。
    ///</param>
    ///  <param name="ofObjectToReturn">
    ///  要返回的对象的类型。
    ///  当前版本只返回 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  流对象；如果指定了流以外的类型，则为 <see langword="null" />
    ///  。
    ///</returns>
    function GetEntityAsync(absoluteUri: DDN.System.DNUri; role: string; ofObjectToReturn: DDN.mscorlib.DNType): DDN.mscorlib.DNTask<DDN.mscorlib.DNObject>;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中被重写时，设置用于对 Web 请求进行身份验证的凭据。
    ///</summary>
    ///<returns>
    ///  用于对 Web 请求进行身份验证的凭据。
    ///  如果未设置该属性，则该值默认为 <see langword="null" />
    ///  ；即 <see langword="XmlResolver" />
    ///  没有用户凭据。
    ///</returns>
    property Credentials: DDN.System.DNICredentials write set_Credentials;
  end;

  TDNXmlXapResolver = class(TDNGenericImport<DNXmlXapResolverClass, DNXmlXapResolver>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterClass = interface(DNObjectClass)
  ['{387BD4BD-B278-52F4-B752-3F6A5A361BA4}']
  { static methods } 

    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定的文件名。
    ///</summary>
    ///  <param name="outputFileName">
    ///  要对其写入的文件。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  在指定的路径创建文件并向其写入 XML 1.0 文本语法中。
    ///  <paramref name="outputFileName" />
    ///  必须为文件系统路径。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(outputFileName: string): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用的文件名和 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="outputFileName">
    ///  要对其写入的文件。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  在指定的路径创建文件并向其写入 XML 1.0 文本语法中。
    ///  <paramref name="outputFileName" />
    ///  必须为文件系统路径。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于配置新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  使用具有默认设置。
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
    ///  方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性来获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  采用正确的设置的对象。
    ///  这样可确保创建 <see cref="T:System.Xml.XmlWriter" />
    ///  对象都有正确的输出设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="url" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(outputFileName: string; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定的流。
    ///</summary>
    ///  <param name="output">
    ///  要对其写入的流。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定的流。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStream): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用的流和 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="output">
    ///  要对其写入的流。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定的流。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于配置新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  使用具有默认设置。
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
    ///  方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性来获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  采用正确的设置的对象。
    ///  这样可确保创建 <see cref="T:System.Xml.XmlWriter" />
    ///  对象都有正确的输出设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stream" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStream; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="output"><see cref="T:System.IO.TextWriter" />
    ///  到想要编写。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNTextWriter): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用 <see cref="T:System.IO.TextWriter" />
    ///  和 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="output"><see cref="T:System.IO.TextWriter" />
    ///  到想要编写。
    ///<see cref="T:System.Xml.XmlWriter" />
    ///  写入 XML 1.0 文本语法并将其附加到指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于配置新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  使用具有默认设置。
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
    ///  方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性来获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  采用正确的设置的对象。
    ///  这样可确保创建 <see cref="T:System.Xml.XmlWriter" />
    ///  对象都有正确的输出设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="text" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNTextWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Text.StringBuilder" />
    ///  要向其写入到。
    ///  通过写入的内容 <see cref="T:System.Xml.XmlWriter" />
    ///  追加到 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="builder" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStringBuilder): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用 <see cref="T:System.Text.StringBuilder" />
    ///  和 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Text.StringBuilder" />
    ///  要向其写入到。
    ///  通过写入的内容 <see cref="T:System.Xml.XmlWriter" />
    ///  追加到 <see cref="T:System.Text.StringBuilder" />
    ///  。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于配置新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  使用具有默认设置。
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
    ///  方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性来获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  采用正确的设置的对象。
    ///  这样可确保创建 <see cref="T:System.Xml.XmlWriter" />
    ///  对象都有正确的输出设置。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="builder" />
    ///  值为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DDN.mscorlib.DNStringBuilder; settings: DNXmlWriterSettings): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Xml.XmlWriter" />
    ///  你想要用作基础编写器的对象。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象封装指定 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DNXmlWriter): DNXmlWriter; overload;
    ///<summary>
    ///  创建一个新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例使用指定 <see cref="T:System.Xml.XmlWriter" />
    ///  和 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///  <param name="output"><see cref="T:System.Xml.XmlWriter" />
    ///  你想要用作基础编写器的对象。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于配置新 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  使用具有默认设置。
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  用于 <see cref="M:System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)" />
    ///  方法，则应使用 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性来获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  采用正确的设置的对象。
    ///  这样可确保创建 <see cref="T:System.Xml.XmlWriter" />
    ///  对象都有正确的输出设置。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象封装指定 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="writer" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function Create(output: DNXmlWriter; settings: DNXmlWriterSettings): DNXmlWriter; overload;

  end;

  ///<summary>
  ///  表示一个写入器，该写入器提供一种快速、非缓存和只进方式以生成包含 XML 数据的流或文件。
  ///</summary>
  [DNTypeName('System.Xml.XmlWriter')]
  DNXmlWriter = interface(DDN.mscorlib.DNIDisposable)
  ['{DEE5DBC9-DE85-3F72-8CA7-9B3A0951D0DB}']
  { getters & setters } 

    function get_Settings: DNXmlWriterSettings;
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;

  { methods } 

    ///<summary>
    ///  当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间关联起来。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///  如果此命名空间已在范围中并具有关联的前缀，则写入器也将自动写入该前缀。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称的开始标记。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写入具有指定的本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与属性关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="localName" />
    ///  或 <paramref name="ns" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定本地名称和命名空间 URI 的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    ///<summary>
    ///  写入具有指定本地名称的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string); overload;
    ///<summary>
    ///  当在派生类中重写，将编码为指定的二进制字节 <see langword="BinHex" />
    ///  并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭或处于错误状态。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，将关闭此流和基础流。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  调用了来编写后的其他输出 <see langword="Close" />
    ///  已调用或者此调用的结果是无效的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Close;
    ///<summary>
    ///  当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效的 NmToken;或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNmToken(name: string);
    ///<summary>
    ///  当在派生类中被重写时，写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效的 XML 名称;或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteName(name: string);
    ///<summary>
    ///  写入对象值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的对象值。
    ///  注意   随着.NET Framework 3.5 的发布，此方法接受 <see cref="T:System.DateTimeOffset" />
    ///  作为参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭或处于错误状态。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  写入 <see cref="T:System.String" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.String" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: string); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Double" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Double" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Double); overload;
    ///<summary>
    ///  写入一个单精度浮点数。
    ///</summary>
    ///  <param name="value">
    ///  要写入的单精度浮点数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Single); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Decimal" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int32" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int32" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int32); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int64" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int64); overload;
    ///<summary>
    ///  当在派生类中重写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  读取器未定位在 <see langword="element" />
    ///  , ，<see langword="attribute" />
    ///  或 <see langword="XmlDeclaration" />
    ///  节点。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    ///<summary>
    ///  将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="navigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    ///<summary>
    ///  写入具有指定的本地名称和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlWriter" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步关闭任何打开的元素或属性并将写入器重新设置为起始状态。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteDocType" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteFullEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCData" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteComment" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在名称和文本之间带有空格的处理指令如下︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteProcessingInstruction" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEntityRef" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为指定的 Unicode 字符值异步强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteWhitespace" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为代理项字符对异步生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  它必须是介于 0xDC00 和 0xDFFF 之间的值。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  它必须是介于 0xD800 和 0xDBFF 之间的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteSurrogateCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以每次一个缓冲区的方式异步写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteChars" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  从字符缓冲区手动异步写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  从字符串手动异步写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  将指定的二进制字节异步编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBase64" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以异步方式将为指定的二进制字节编码 <see langword="BinHex" />
    ///  并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBinHex" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将缓冲区中的所有内容异步刷新到基础流，并同时刷新基础流。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="Flush" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function FlushAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNmToken" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  名称的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteQualifiedName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributes" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将所有内容从读取器异步复制到写入器并将读取器移动到下一个同级的开头。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  以异步方式将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteElementString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  当在派生类中被重写时，写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartDocument; overload;
    ///<summary>
    ///  当在派生类中被重写时，写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartDocument(standalone: Boolean); overload;
    ///<summary>
    ///  当在派生类中被重写时，关闭任何打开的元素或属性并将写入器重新设置为起始状态。
    ///</summary>
    ///<exception cref="T:System.ArgumentException">
    ///  XML 文档是无效的。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndDocument;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Prolog 外部上 （在根元素中） 调用此方法。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  值为 <paramref name="name" />
    ///  将导致无效的 XML。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    ///<summary>
    ///  当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这会导致无效的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndElement;
    ///<summary>
    ///  当在派生类中被重写时，关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteFullEndElement;
    ///<summary>
    ///  当在派生类中被重写时，写入具有指定的前缀、本地名称和命名空间 URI 的属性的开头。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中重写时，关闭上一个 <see cref="M:System.Xml.XmlWriter.WriteStartAttribute(System.String,System.String)" />
    ///  调用。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEndAttribute;
    ///<summary>
    ///  当在派生类中被重写时，写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteCData(text: string);
    ///<summary>
    ///  当在派生类中被重写时，写出包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致一个格式正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteComment(text: string);
    ///<summary>
    ///  当在派生类中重写，写出在名称和文本之间带有空格的处理指令，如下所示︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  此方法用于创建 XML 声明后的 <see cref="M:System.Xml.XmlWriter.WriteStartDocument" />
    ///  已调用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteProcessingInstruction(name: string; text: string);
    ///<summary>
    ///  当在派生类中重写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteEntityRef(name: string);
    ///<summary>
    ///  当在派生类中被重写时，为指定的 Unicode 字符值强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  在代理项对字符范围的字符是 <see langword="0xd800" />
    ///  - <see langword="0xdfff" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteCharEntity(ch: Char);
    ///<summary>
    ///  当在派生类中被重写时，写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该字符串包含非空白字符。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteWhitespace(ws: string);
    ///<summary>
    ///  当在派生类中被重写时，写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  文本字符串包含无效的代理项对。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteString(text: string);
    ///<summary>
    ///  当在派生类中被重写时，为代理项字符对生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  它必须是介于 0xDC00 和 0xDFFF 之间的值。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  它必须是介于 0xD800 和 0xDBFF 之间的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  传递了无效的代理项字符对。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    ///<summary>
    ///  当在派生类中被重写时，以每次一个缓冲区的方式写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减 <paramref name="index" />
    ///  是小于 <paramref name="count" />
    ///  ; 代理项对字符中的调用结果被拆分或写入无效的代理项对。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="buffer" />
    ///  参数值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，从字符缓冲区手动写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  当在派生类中被重写时，从字符串手动写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="data" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteRaw(data: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，将指定的二进制字节编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  当在派生类中被重写时，将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Flush;
    ///<summary>
    ///  当在派生类中被重写时，返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
    ///</summary>
    ///  <param name="ns">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  匹配的前缀或 <see langword="null" />
    ///  如果没有匹配的命名空间在当前作用域中找到的 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="ns" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    function LookupPrefix(ns: string): string;
    ///<summary>
    ///  当在派生类中被重写时，写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  名称的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  <paramref name="localName" />
    ///  不是有效的名称。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteQualifiedName(localName: string; ns: string);
    ///<summary>
    ///  写入 <see cref="T:System.Boolean" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Boolean" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Boolean); overload;
    ///<summary>
    ///  当在派生类中被重写时，将全部内容从读取器复制到写入器并将读取器移动到下一个同级的开始位置。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="reader" />
    ///  包含无效字符。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    ///<summary>
    ///  异步写出具有指定前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributeString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlWriter" />
    ///  实例的 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于创建此编写器实例。
    ///  如果此编写器不使用创建 <see cref="Overload:System.Xml.XmlWriter.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlWriterSettings read get_Settings;
    ///<summary>
    ///  当在派生类中被重写时，获取写入器的状态。
    ///</summary>
    ///<returns><see cref="T:System.Xml.WriteState" />
    ///  值之一。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property WriteState: DNWriteState read get_WriteState;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.XmlSpace" />
    ///  表示当前 <see langword="xml:space" />
    ///  作用域。
    ///</summary>
    ///<returns><see langword="XmlSpace" />
    ///  表示当前 <see langword="xml:space" />
    ///  作用域。
    ///  值
    ///  含义
    ///<see langword="None" />
    ///  这是默认值，如果没有 <see langword="xml:space" />
    ///  存在的作用域。
    ///<see langword="Default" />
    ///  当前作用域是 <see langword="xml:space" />
    ///  ="default"。
    ///<see langword="Preserve" />
    ///  当前作用域是 <see langword="xml:space" />
    ///  ="preserve"。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  当在派生类中重写，获取当前 <see langword="xml:lang" />
    ///  作用域。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  范围。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property XmlLang: string read get_XmlLang;
  end;

  TDNXmlWriter = class(TDNGenericImport<DNXmlWriterClass, DNXmlWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlTextWriterClass = interface(DNXmlWriterClass)
  ['{1C2628BB-023E-55A7-AA2F-1172CF62087D}']
  { constructors } 

    ///<summary>
    ///  创建的一个实例 <see langword="XmlTextWriter" />
    ///  类使用指定的流和编码。
    ///</summary>
    ///  <param name="w">
    ///  要对其写入的流。
    ///</param>
    ///  <param name="encoding">
    ///  要生成的编码。
    ///  如果编码为 <see langword="null" />
    ///  它写出为 utf-8 流并省略中的编码属性 <see langword="ProcessingInstruction" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  不支持的编码或不能写入的流。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="w" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(w: DDN.mscorlib.DNStream; encoding: DDN.mscorlib.DNEncoding): DNXmlTextWriter; overload;
    ///<summary>
    ///  创建的一个实例 <see cref="T:System.Xml.XmlTextWriter" />
    ///  类使用指定的文件。
    ///</summary>
    ///  <param name="filename">
    ///  要写入的文件名。
    ///  如果该文件存在，它将截断该文件并用新内容将其覆盖。
    ///</param>
    ///  <param name="encoding">
    ///  要生成的编码。
    ///  如果编码为 <see langword="null" />
    ///  它写出为 utf-8，并忽略中的编码属性 <see langword="ProcessingInstruction" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  不支持的编码;文件名为空、 仅包含空白，或包含一个或多个无效字符。
    ///</exception><exception cref="T:System.UnauthorizedAccessException">
    ///  拒绝访问。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  文件名是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException">
    ///  找不到要写入到的目录。
    ///</exception><exception cref="T:System.IO.IOException">
    ///  文件名包含文件名、 目录名或卷标签语法不正确或无效的语法。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有所要求的权限。
    ///</exception>
    {class} function init(filename: string; encoding: DDN.mscorlib.DNEncoding): DNXmlTextWriter; overload;
    ///<summary>
    ///  创建的一个实例 <see langword="XmlTextWriter" />
    ///  类使用指定 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="w">
    ///  要向其中进行写入的 <see langword="TextWriter" />
    ///  。
    ///  假定 <see langword="TextWriter" />
    ///  已设置为正确的编码。
    ///</param>
    {class} function init(w: DDN.mscorlib.DNTextWriter): DNXmlTextWriter; overload;

  end;

  ///<summary>
  ///  表示提供快速、非缓存、只进方法的写入器，该方法生成包含 XML 数据（这些数据符合 W3C 可扩展标记语言 (XML) 1.0 和“XML 命名空间”建议）的流或文件。
  ///  从 .NET Framework 2.0 开始，建议改用 <see cref="T:System.Xml.XmlWriter" />
  ///  类。
  ///</summary>
  [DNTypeName('System.Xml.XmlTextWriter')]
  DNXmlTextWriter = interface(DNXmlWriter)
  ['{CA18874F-214A-3FE7-BF32-7C2EE1E49E0E}']
  { getters & setters } 

    function get_BaseStream: DDN.mscorlib.DNStream;
    function get_Namespaces: Boolean;
    procedure set_Namespaces(value: Boolean);
    function get_Formatting: DNFormatting;
    procedure set_Formatting(value: DNFormatting);
    function get_Indentation: Int32;
    procedure set_Indentation(value: Int32);
    function get_IndentChar: Char;
    procedure set_IndentChar(value: Char);
    function get_QuoteChar: Char;
    procedure set_QuoteChar(value: Char);
    function get_WriteState: DNWriteState;
    function get_XmlSpace: DNXmlSpace;
    function get_XmlLang: string;
    function get_Settings: DNXmlWriterSettings;

  { methods } 

    ///<summary>
    ///  写入属性的开头。
    ///</summary>
    ///  <param name="prefix"><see langword="Namespace" />
    ///  该属性的前缀。
    ///</param>
    ///  <param name="localName"><see langword="LocalName" />
    ///  属性。
    ///</param>
    ///  <param name="ns"><see langword="NamespaceURI" />
    ///  属性
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception>
    procedure WriteStartAttribute(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  写出包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  为 <see langword="Closed" />
    ///  。
    ///</exception>
    procedure WriteCData(text: string);
    ///<summary>
    ///  写出包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  为 <see langword="Closed" />
    ///  。
    ///</exception>
    procedure WriteComment(text: string);
    ///<summary>
    ///  写出在名称和文本之间带有空格的处理指令，如下︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档。
    ///  <paramref name="name" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  此方法用于创建 XML 声明后的 <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" />
    ///  已调用。
    ///</exception>
    procedure WriteProcessingInstruction(name: string; text: string);
    ///<summary>
    ///  写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与该名称关联的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///  <paramref name="localName" />
    ///  不是 W3C 命名空间规范的有效名称。
    ///</exception>
    procedure WriteQualifiedName(localName: string; ns: string);
    ///<summary>
    ///  写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception>
    procedure WriteStartDocument; overload;
    ///<summary>
    ///  写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  这不是调用构造函数之后的第一个写入方法。
    ///</exception>
    procedure WriteStartDocument(standalone: Boolean); overload;
    ///<summary>
    ///  关闭任何打开的元素或特性并将写入器重新设置为起始状态。
    ///</summary>
    ///<exception cref="T:System.ArgumentException">
    ///  XML 文档是无效的。
    ///</exception>
    procedure WriteEndDocument;
    ///<summary>
    ///  写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///  如果此命名空间已在范围中并具有关联的前缀，则写入器还自动写入该前缀。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception>
    procedure WriteStartElement(prefix: string; localName: string; ns: string); overload;
    ///<summary>
    ///  关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    procedure WriteEndElement;
    ///<summary>
    ///  关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    procedure WriteFullEndElement;
    ///<summary>
    ///  关闭前一个 <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
    ///  调用。
    ///</summary>
    procedure WriteEndAttribute;
    ///<summary>
    ///  写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该文本会导致格式不正确的 XML 文档或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception>
    procedure WriteEntityRef(name: string);
    ///<summary>
    ///  为指定的 Unicode 字符值强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  在代理项对字符范围的字符是 <see langword="0xd800" />
    ///  - <see langword="0xdfff" />
    ///  ; 或文本将导致格式不正确的 XML 文档。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  为 <see langword="Closed" />
    ///  。
    ///</exception>
    procedure WriteCharEntity(ch: Char);
    ///<summary>
    ///  写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  该字符串包含非空白字符。
    ///</exception>
    procedure WriteWhitespace(ws: string);
    ///<summary>
    ///  写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  文本字符串包含无效的代理项对。
    ///</exception>
    procedure WriteString(text: string);
    ///<summary>
    ///  为代理项字符对生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  这必须是介于 <see langword="0xDC00" />
    ///  和 <see langword="0xDFFF" />
    ///  。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  这必须是介于 <see langword="0xD800" />
    ///  和 <see langword="0xDBFF" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Exception">
    ///  传递了无效的代理项字符对。
    ///</exception>
    procedure WriteSurrogateCharEntity(lowChar: Char; highChar: Char);
    ///<summary>
    ///  以每次一个缓冲区的方式写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减 <paramref name="index" />
    ///  是小于 <paramref name="count" />
    ///  ; 代理项对字符中的调用结果被拆分或写入无效的代理项对。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  已关闭。
    ///</exception>
    procedure WriteChars(buffer: TArray<Char>; index: Int32; count: Int32);
    ///<summary>
    ///  从字符缓冲区手动写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///  - 或 -
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception>
    procedure WriteRaw(buffer: TArray<Char>; index: Int32; count: Int32); overload;
    ///<summary>
    ///  从字符串手动写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    procedure WriteRaw(data: string); overload;
    ///<summary>
    ///  将指定的二进制字节编码为 BinHex 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  已关闭。
    ///</exception>
    procedure WriteBinHex(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  关闭此流和基础流。
    ///</summary>
    procedure Close;
    ///<summary>
    ///  将缓冲区中的所有内容刷新到基础流，并同时刷新基础流。
    ///</summary>
    procedure Flush;
    ///<summary>
    ///  写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效的 XML 名称;或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception>
    procedure WriteName(name: string);
    ///<summary>
    ///  返回在当前命名空间范围中为该命名空间 URI 定义的最近的前缀。
    ///</summary>
    ///  <param name="ns">
    ///  要查找其前缀的命名空间 URI。
    ///</param>
    ///<returns>
    ///  匹配的前缀。
    ///  或者 <see langword="null" />
    ///  如果没有匹配的命名空间在当前作用域中找到的 URI。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="ns" />
    ///  为 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception>
    function LookupPrefix(ns: string): string;
    ///<summary>
    ///  写出具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  为 null 和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  Prolog 外部上 （在根元素中） 调用此方法。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  - 或 -
    ///  值为 <paramref name="name" />
    ///  将导致无效的 XML。
    ///</exception>
    procedure WriteDocType(name: string; pubid: string; sysid: string; subset: string);
    ///<summary>
    ///  将指定的二进制字节编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的开始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="buffer" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException">
    ///  缓冲区长度减去 <paramref name="index" />
    ///  小于 <paramref name="count" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />
    ///  或 <paramref name="count" />
    ///  也不可小于零。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="P:System.Xml.XmlTextWriter.WriteState" />
    ///  为 <see langword="Closed" />
    ///  。
    ///</exception>
    procedure WriteBase64(buffer: TArray<Byte>; index: Int32; count: Int32);
    ///<summary>
    ///  写出指定的名称，确保它一个有效 <see langword="NmToken" />
    ///  根据 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="name" />
    ///  不是有效 <see langword="NmToken" />
    ///  ; 或 <paramref name="name" />
    ///  是 <see langword="null" />
    ///  或 <see langword="String.Empty" />
    ///  。
    ///</exception>
    procedure WriteNmToken(name: string);
    ///<summary>
    ///  当在派生类中被重写时，写入指定的开始标记并将其与给定的命名空间关联起来。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///  如果此命名空间已在范围中并具有关联的前缀，则写入器也将自动写入该前缀。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string; ns: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称的开始标记。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartElement(localName: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写入具有指定的本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与属性关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的本地名称和值的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(localName: string; value: string); overload;
    ///<summary>
    ///  当在派生类中被重写时，写出具有指定的前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器的状态不是 <see langword="WriteState.Element" />
    ///  或编写器已关闭。
    ///</exception><exception cref="T:System.ArgumentException"><see langword="xml:space" />
    ///  或 <see langword="xml:lang" />
    ///  属性值无效。
    ///</exception><exception cref="T:System.Xml.XmlException"><paramref name="localName" />
    ///  或 <paramref name="ns" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributeString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定本地名称和命名空间 URI 的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///<exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string; ns: string); overload;
    ///<summary>
    ///  写入具有指定本地名称的属性的开头。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteStartAttribute(localName: string); overload;
    ///<summary>
    ///  写入对象值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的对象值。
    ///  注意   随着.NET Framework 3.5 的发布，此方法接受 <see cref="T:System.DateTimeOffset" />
    ///  作为参数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.ArgumentNullException"><paramref name="value" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  编写器已关闭或处于错误状态。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNObject); overload;
    ///<summary>
    ///  写入 <see cref="T:System.String" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.String" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: string); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTime" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTime" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTime); overload;
    ///<summary>
    ///  写入 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.DateTimeOffset" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDateTimeOffset); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Double" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Double" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Double); overload;
    ///<summary>
    ///  写入一个单精度浮点数。
    ///</summary>
    ///  <param name="value">
    ///  要写入的单精度浮点数。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Single); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Decimal" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Decimal" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: DDN.mscorlib.DNDecimal); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int32" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int32" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int32); overload;
    ///<summary>
    ///  写入 <see cref="T:System.Int64" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Int64" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Int64); overload;
    ///<summary>
    ///  当在派生类中重写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  读取器未定位在 <see langword="element" />
    ///  , ，<see langword="attribute" />
    ///  或 <see langword="XmlDeclaration" />
    ///  节点。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteAttributes(reader: DNXmlReader; defattr: Boolean);
    ///<summary>
    ///  将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="navigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(navigator: DNXPathNavigator; defattr: Boolean); overload;
    ///<summary>
    ///  写入具有指定的本地名称和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="localName" />
    ///  值是 <see langword="null" />
    ///  或空字符串。
    ///  - 或 -
    ///  参数值不是有效的。
    ///</exception><exception cref="T:System.Text.EncoderFallbackException">
    ///  是有效的 XML 字符但不是有效的输出编码的缓冲区中没有一个字符。
    ///  例如，如果输出编码为 ASCII，您应仅用于从 0 到 127 范围的字符元素和属性名称。
    ///  无效的字符可能是此方法的参数中或在以前已写入到缓冲区的方法的参数。
    ///  此类字符都转义字符实体引用在可能的情况 （例如，在文本节点或属性值）。
    ///  但是，元素和属性名称、 注释、 处理指令或 CDATA 节中不允许的字符实体引用。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteElementString(prefix: string; localName: string; ns: string; value: string); overload;
    ///<summary>
    ///  释放 <see cref="T:System.Xml.XmlWriter" />
    ///  类的当前实例所使用的所有资源。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure Dispose;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync: DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入版本为“1.0”的 XML 声明和独立的属性。
    ///</summary>
    ///  <param name="standalone">
    ///  如果 <see langword="true" />
    ///  , ，它将写入"独立 = yes"; 如果 <see langword="false" />
    ///  , ，它将写入"独立 = no"。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartDocumentAsync(standalone: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步关闭任何打开的元素或属性并将写入器重新设置为起始状态。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndDocument" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndDocumentAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入具有指定名称和可选属性的 DOCTYPE 声明。
    ///</summary>
    ///  <param name="name">
    ///  DOCTYPE 的名称。
    ///  它必须是非空的。
    ///</param>
    ///  <param name="pubid">
    ///  如果非 null 它还将写入 PUBLIC"pubid""sysid"其中 <paramref name="pubid" />
    ///  和 <paramref name="sysid" />
    ///  替换给定的参数的值。
    ///</param>
    ///  <param name="sysid">
    ///  如果 <paramref name="pubid" />
    ///  是 <see langword="null" />
    ///  和 <paramref name="sysid" />
    ///  为非 null 它将写入 SYSTEM"sysid"其中 <paramref name="sysid" />
    ///  将替换为此参数的值。
    ///</param>
    ///  <param name="subset">
    ///  如果非 null，则它写入 [subset]，其中 subset 替换为此自变量的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteDocType" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteDocTypeAsync(name: string; pubid: string; sysid: string; subset: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入指定的开始标记并将其与给定的命名空间和前缀关联起来。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  与元素关联的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteStartElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStartElementAsync(prefix: string; localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步关闭一个元素并弹出相应的命名空间范围。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="WriteFullEndElement" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteFullEndElementAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的 &lt;![CDATA[...]]&gt; 块。
    ///</summary>
    ///  <param name="text">
    ///  要放置在 CDATA 块中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCData" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCDataAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出一个包含指定文本的注释 &lt;!--...--&gt;。
    ///</summary>
    ///  <param name="text">
    ///  要放在注释内的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteComment" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCommentAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在名称和文本之间带有空格的处理指令如下︰ &lt;？ 命名 text？ &gt;。
    ///</summary>
    ///  <param name="name">
    ///  处理指令的名称。
    ///</param>
    ///  <param name="text">
    ///  要包括在处理指令中的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteProcessingInstruction" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteProcessingInstructionAsync(name: string; text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出实体引用作为 <see langword="&amp;name;" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  实体引用的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteEntityRef" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteEntityRefAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为指定的 Unicode 字符值异步强制生成字符实体。
    ///</summary>
    ///  <param name="ch">
    ///  为其生成字符实体的 Unicode 字符。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharEntityAsync(ch: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出给定的空白区域。
    ///</summary>
    ///  <param name="ws">
    ///  空格字符的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteWhitespace" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteWhitespaceAsync(ws: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写入给定的文本内容。
    ///</summary>
    ///  <param name="text">
    ///  要写入的文本。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteStringAsync(text: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  为代理项字符对异步生成并写入代理项字符实体。
    ///</summary>
    ///  <param name="lowChar">
    ///  低代理项。
    ///  它必须是介于 0xDC00 和 0xDFFF 之间的值。
    ///</param>
    ///  <param name="highChar">
    ///  高代理项。
    ///  它必须是介于 0xD800 和 0xDBFF 之间的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteSurrogateCharEntity" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteSurrogateCharEntityAsync(lowChar: Char; highChar: Char): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以每次一个缓冲区的方式异步写入文本。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入文本的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteChars" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteCharsAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  从字符缓冲区手动异步写入原始标记。
    ///</summary>
    ///  <param name="buffer">
    ///  包含要写入的文本的字符数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中的位置，指示要写入文本的起始位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字符数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(buffer: TArray<Char>; index: Int32; count: Int32): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  从字符串手动异步写入原始标记。
    ///</summary>
    ///  <param name="data">
    ///  包含要写入的文本的字符串。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteRaw" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteRawAsync(data: string): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  将指定的二进制字节异步编码为 Base64 并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBase64" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBase64Async(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  以异步方式将为指定的二进制字节编码 <see langword="BinHex" />
    ///  并写出结果文本。
    ///</summary>
    ///  <param name="buffer">
    ///  要进行编码的字节数组。
    ///</param>
    ///  <param name="index">
    ///  缓冲区中指示要写入字节的起始位置的位置。
    ///</param>
    ///  <param name="count">
    ///  要写入的字节数。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteBinHex" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteBinHexAsync(buffer: TArray<Byte>; index: Int32; count: Int32): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将缓冲区中的所有内容异步刷新到基础流，并同时刷新基础流。
    ///</summary>
    ///<returns>
    ///  表示异步任务 <see langword="Flush" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function FlushAsync: DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效 NmToken。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNmToken" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNmTokenAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出指定的名称，确保它是符合 W3C XML 1.0 建议 (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name) 的有效名称。
    ///</summary>
    ///  <param name="name">
    ///  要写入的名称。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNameAsync(name: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出命名空间限定的名称。
    ///  此方法查找位于给定命名空间范围内的前缀。
    ///</summary>
    ///  <param name="localName">
    ///  要写入的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  名称的命名空间 URI。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteQualifiedName" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteQualifiedNameAsync(localName: string; ns: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  异步写出在当前位置中找到的所有属性 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="reader"><see langword="XmlReader" />
    ///  要从其中复制属性。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributes" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributesAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask;
    ///<summary>
    ///  将所有内容从读取器异步复制到写入器并将读取器移动到下一个同级的开头。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(reader: DNXmlReader; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  以异步方式将所有内容从复制 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到编写器的对象。
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</summary>
    ///  <param name="navigator">
    ///  要复制其内容的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性;否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteNode" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteNodeAsync(navigator: DNXPathNavigator; defattr: Boolean): DDN.mscorlib.DNTask; overload;
    ///<summary>
    ///  异步写入具有指定的前缀、本地名称、命名空间 URI 和值的元素。
    ///</summary>
    ///  <param name="prefix">
    ///  元素的前缀。
    ///</param>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  元素的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteElementString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteElementStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    ///<summary>
    ///  写入 <see cref="T:System.Boolean" />
    ///  值。
    ///</summary>
    ///  <param name="value">
    ///  要写入的 <see cref="T:System.Boolean" />
    ///  值。
    ///</param>
    ///<exception cref="T:System.ArgumentException">
    ///  指定的值无效。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteValue(value: Boolean); overload;
    ///<summary>
    ///  当在派生类中被重写时，将全部内容从读取器复制到写入器并将读取器移动到下一个同级的开始位置。
    ///</summary>
    ///  <param name="reader">
    ///  要从其中进行读取的 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</param>
    ///  <param name="defattr"><see langword="true" />
    ///  若要复制默认特性从 <see langword="XmlReader" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="reader" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.ArgumentException"><paramref name="reader" />
    ///  包含无效字符。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    procedure WriteNode(reader: DNXmlReader; defattr: Boolean); overload;
    ///<summary>
    ///  异步写出具有指定前缀、本地名称、命名空间 URI 和值的属性。
    ///</summary>
    ///  <param name="prefix">
    ///  属性的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="ns">
    ///  属性的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  属性的值。
    ///</param>
    ///<returns>
    ///  表示异步任务 <see langword="WriteAttributeString" />
    ///  操作。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  异步方法调用没有设置 <see cref="P:System.Xml.XmlWriterSettings.Async" />
    ///  标记，用于 <see langword="true" />
    ///  。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"集 XmlWriterSettings.Async 为 true，如果您想要使用异步方法。"
    ///</exception>
    function WriteAttributeStringAsync(prefix: string; localName: string; ns: string; value: string): DDN.mscorlib.DNTask;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取基础流对象。
    ///</summary>
    ///<returns>
    ///  到的流 <see langword="XmlTextWriter" />
    ///  是书写或 <see langword="null" />
    ///  如果 <see langword="XmlTextWriter" />
    ///  使用构造 <see cref="T:System.IO.TextWriter" />
    ///  不会继承从 <see cref="T:System.IO.StreamWriter" />
    ///  类。
    ///</returns>
    property BaseStream: DDN.mscorlib.DNStream read get_BaseStream;
    ///<summary>
    ///  获取或设置一个值，该值指示是否进行命名空间支持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要支持的命名空间;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  您可以只更改此属性在 <see langword="WriteState.Start" />
    ///  状态。
    ///</exception>
    property Namespaces: Boolean read get_Namespaces write set_Namespaces;
    ///<summary>
    ///  指示如何对输出进行格式设置。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Formatting" />
    ///  值之一。
    ///  默认值是 <see langword="Formatting.None" />
    ///  （无特殊格式）。
    ///</returns>
    property Formatting: DNFormatting read get_Formatting write set_Formatting;
    ///<summary>
    ///  获取或设置要为层次结构中每个级别写入多少 Indentchar 时 <see cref="P:System.Xml.XmlTextWriter.Formatting" />
    ///  设置为 <see langword="Formatting.Indented" />
    ///  。
    ///</summary>
    ///<returns>
    ///  数 <see langword="IndentChars" />
    ///  为每个级别。
    ///  默认值为 2。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将此属性设置为负值。
    ///</exception>
    property Indentation: Int32 read get_Indentation write set_Indentation;
    ///<summary>
    ///  获取或设置用于缩进时用于转换的字符 <see cref="P:System.Xml.XmlTextWriter.Formatting" />
    ///  设置为 <see langword="Formatting.Indented" />
    ///  。
    ///</summary>
    ///<returns>
    ///  用于缩进的字符。
    ///  默认为空格。
    ///<see langword="XmlTextWriter" />
    ///  允许您将此属性设置为任何字符。
    ///  为了确保 XML 有效，你必须指定有效的空格字符 0x9、0x10、0x13 或 0x20。
    ///</returns>
    property IndentChar: Char read get_IndentChar write set_IndentChar;
    ///<summary>
    ///  获取或设置要用于引用属性值的字符。
    ///</summary>
    ///<returns>
    ///  用于引用属性值的字符。
    ///  这必须是单引号 (&amp;#39;) 或双引号 (&amp;#34;)。
    ///  默认为双引号。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  将此属性设置为以外的任何一个单引号或双引号的报价。
    ///</exception>
    property QuoteChar: Char read get_QuoteChar write set_QuoteChar;
    ///<summary>
    ///  获取写入器的状态。
    ///</summary>
    ///<returns><see cref="T:System.Xml.WriteState" />
    ///  值之一。
    ///</returns>
    property WriteState: DNWriteState read get_WriteState;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlSpace" />
    ///  表示当前 <see langword="xml:space" />
    ///  作用域。
    ///</summary>
    ///<returns><see langword="XmlSpace" />
    ///  表示当前 <see langword="xml:space" />
    ///  作用域。
    ///  值
    ///  含义
    ///  无
    ///  这是默认值，如果没有 <see langword="xml:space" />
    ///  存在的作用域。
    ///  默认
    ///  当前作用域是 <see langword="xml:space" />
    ///  ="default"。
    ///  保留
    ///  当前作用域是 <see langword="xml:space" />
    ///  ="preserve"。
    ///</returns>
    property XmlSpace: DNXmlSpace read get_XmlSpace;
    ///<summary>
    ///  获取当前 <see langword="xml:lang" />
    ///  范围。
    ///</summary>
    ///<returns>
    ///  当前 <see langword="xml:lang" />
    ///  或 <see langword="null" />
    ///  是否存在任何 <see langword="xml:lang" />
    ///  当前作用域中。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  获取用于创建此 <see cref="T:System.Xml.XmlWriter" />
    ///  实例的 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，用于创建此编写器实例。
    ///  如果此编写器不使用创建 <see cref="Overload:System.Xml.XmlWriter.Create" />
    ///  方法，则此属性返回 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XmlWriter" />
    ///  上一个异步操作完成之前调用方法。
    ///  在这种情况下， <see cref="T:System.InvalidOperationException" />
    ///  引发并显示消息"异步操作正在进行。"
    ///</exception>
    property Settings: DNXmlWriterSettings read get_Settings;
  end;

  TDNXmlTextWriter = class(TDNGenericImport<DNXmlTextWriterClass, DNXmlTextWriter>) end;

  //-------------namespace: System.Xml----------------
  DNXmlWriterSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{8666F90C-F5C9-5F87-910D-1BD914FBFB3C}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXmlWriterSettings;

  end;

  ///<summary>
  ///  指定的功能以支持上的一组 <see cref="T:System.Xml.XmlWriter" />
  ///  创建的对象 <see cref="Overload:System.Xml.XmlWriter.Create" />
  ///  方法。
  ///</summary>
  [DNTypeName('System.Xml.XmlWriterSettings')]
  DNXmlWriterSettings = interface(DDN.mscorlib.DNObject)
  ['{FF4A400D-DA06-355E-86B7-9B296810A674}']
  { getters & setters } 

    function get_Async: Boolean;
    procedure set_Async(value: Boolean);
    function get_Encoding: DDN.mscorlib.DNEncoding;
    procedure set_Encoding(value: DDN.mscorlib.DNEncoding);
    function get_OmitXmlDeclaration: Boolean;
    procedure set_OmitXmlDeclaration(value: Boolean);
    function get_NewLineHandling: DNNewLineHandling;
    procedure set_NewLineHandling(value: DNNewLineHandling);
    function get_NewLineChars: string;
    procedure set_NewLineChars(value: string);
    function get_Indent: Boolean;
    procedure set_Indent(value: Boolean);
    function get_IndentChars: string;
    procedure set_IndentChars(value: string);
    function get_NewLineOnAttributes: Boolean;
    procedure set_NewLineOnAttributes(value: Boolean);
    function get_CloseOutput: Boolean;
    procedure set_CloseOutput(value: Boolean);
    function get_ConformanceLevel: DNConformanceLevel;
    procedure set_ConformanceLevel(value: DNConformanceLevel);
    function get_CheckCharacters: Boolean;
    procedure set_CheckCharacters(value: Boolean);
    function get_NamespaceHandling: DNNamespaceHandling;
    procedure set_NamespaceHandling(value: DNNamespaceHandling);
    function get_WriteEndDocumentOnClose: Boolean;
    procedure set_WriteEndDocumentOnClose(value: Boolean);
    function get_OutputMethod: DNXmlOutputMethod;
    function get_DoNotEscapeUriAttributes: Boolean;
    procedure set_DoNotEscapeUriAttributes(value: Boolean);

  { methods } 

    ///<summary>
    ///  创建 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  实例的副本。
    ///</summary>
    ///<returns>
    ///  克隆 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象。
    ///</returns>
    function Clone: DNXmlWriterSettings;
    ///<summary>
    ///  将设置类的成员重置为各自的默认值。
    ///</summary>
    procedure Reset;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否异步 <see cref="T:System.Xml.XmlWriter" />
    ///  方法可对特定 <see cref="T:System.Xml.XmlWriter" />
    ///  实例。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果可以使用异步方法，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property Async: Boolean read get_Async write set_Async;
    ///<summary>
    ///  获取或设置要使用的文本编码的类型。
    ///</summary>
    ///<returns>
    ///  要使用的文本编码。
    ///  默认值为 <see langword="Encoding.UTF8" />
    ///  。
    ///</returns>
    property Encoding: DDN.mscorlib.DNEncoding read get_Encoding write set_Encoding;
    ///<summary>
    ///  获取或设置一个值，该值指示是否省略 XML 声明。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要忽略 XML 声明中;否则为 <see langword="false" />
    ///  。
    ///  默认值是 <see langword="false" />
    ///  , ，即写入 XML 声明。
    ///</returns>
    property OmitXmlDeclaration: Boolean read get_OmitXmlDeclaration write set_OmitXmlDeclaration;
    ///<summary>
    ///  获取或设置一个值，该值指示是否将输出中的换行符规范化。
    ///</summary>
    ///<returns><see cref="T:System.Xml.NewLineHandling" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Xml.NewLineHandling.Replace" />
    ///  。
    ///</returns>
    property NewLineHandling: DNNewLineHandling read get_NewLineHandling write set_NewLineHandling;
    ///<summary>
    ///  获取或设置要用于换行符的字符串。
    ///</summary>
    ///<returns>
    ///  要用于换行符的字符串。
    ///  它可以设置为任何字符串值。
    ///  但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。
    ///  默认值是 \r\n （回车符、 换行符）。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  分配给值 <see cref="P:System.Xml.XmlWriterSettings.NewLineChars" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    property NewLineChars: string read get_NewLineChars write set_NewLineChars;
    ///<summary>
    ///  获取或设置指示是否缩进元素的值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要在新行和缩进; 上写入单独的元素否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property Indent: Boolean read get_Indent write set_Indent;
    ///<summary>
    ///  获取或设置缩进时要使用的字符串。
    ///  使用此设置时 <see cref="P:System.Xml.XmlWriterSettings.Indent" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</summary>
    ///<returns>
    ///  缩进时要使用的字符串。
    ///  它可以设置为任何字符串值。
    ///  但是，为了确保 XML 有效，应该只指定有效的空格字符，例如空格、制表符、回车符或换行符。
    ///  默认值为两个空格。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  分配给值 <see cref="P:System.Xml.XmlWriterSettings.IndentChars" />
    ///  是 <see langword="null" />
    ///  。
    ///</exception>
    property IndentChars: string read get_IndentChars write set_IndentChars;
    ///<summary>
    ///  获取或设置一个值，该值指示是否在新行上写入属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要在单独的行; 上编写属性否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///  此设置没有时生效 <see cref="P:System.Xml.XmlWriterSettings.Indent" />
    ///  属性值是 <see langword="false" />
    ///  。
    ///  当 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
    ///  设置为 <see langword="true" />
    ///  , ，每个属性都会预先挂起一个新行和一层额外的缩进。
    ///</returns>
    property NewLineOnAttributes: Boolean read get_NewLineOnAttributes write set_NewLineOnAttributes;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" />
    ///  也应该关闭基础流或 <see cref="T:System.IO.TextWriter" />
    ///  时 <see cref="M:System.Xml.XmlWriter.Close" />
    ///  调用方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  此外应该关闭基础流或 <see cref="T:System.IO.TextWriter" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property CloseOutput: Boolean read get_CloseOutput write set_CloseOutput;
    ///<summary>
    ///  获取或设置的 XML 写入器检查 XML 输出的一致性级别。
    ///</summary>
    ///<returns>
    ///  指定一致性级别（文档、片段或自动检测）的枚举值之一。
    ///  默认值为 <see cref="F:System.Xml.ConformanceLevel.Document" />
    ///  。
    ///</returns>
    property ConformanceLevel: DNConformanceLevel read get_ConformanceLevel write set_ConformanceLevel;
    ///<summary>
    ///  获取或设置一个值，该值指示的 XML 编写器应检查以确保文档中的所有字符都符合 W3C 的"2.2 字符"一节 XML 1.0 Recommendation。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要进行字符检查;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property CheckCharacters: Boolean read get_CheckCharacters write set_CheckCharacters;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" />
    ///  编写 XML 内容时应移除重复的命名空间声明。
    ///  写入器的默认行为是输出写入器的命名空间解析程序中存在的所有命名空间声明。
    ///</summary>
    ///<returns><see cref="T:System.Xml.NamespaceHandling" />
    ///  枚举，用于指定是否删除重复的命名空间中的声明 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</returns>
    property NamespaceHandling: DNNamespaceHandling read get_NamespaceHandling write set_NamespaceHandling;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" />
    ///  将添加结束标记对所有未关闭元素标记时 <see cref="M:System.Xml.XmlWriter.Close" />
    ///  调用方法。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果所有未关闭的元素标记将关闭否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="true" />
    ///  。
    ///</returns>
    property WriteEndDocumentOnClose: Boolean read get_WriteEndDocumentOnClose write set_WriteEndDocumentOnClose;
    ///<summary>
    ///  获取用于序列化的方法 <see cref="T:System.Xml.XmlWriter" />
    ///  输出。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlOutputMethod" />
    ///  值之一。
    ///  默认值为 <see cref="F:System.Xml.XmlOutputMethod.Xml" />
    ///  。
    ///</returns>
    property OutputMethod: DNXmlOutputMethod read get_OutputMethod;
    ///<summary>
    ///  获取或设置一个值，该值指示是否 <see cref="T:System.Xml.XmlWriter" />
    ///  未转义 URI 属性。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XmlWriter" />
    ///  未转义 URI 属性; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    property DoNotEscapeUriAttributes: Boolean read get_DoNotEscapeUriAttributes write set_DoNotEscapeUriAttributes;
  end;

  TDNXmlWriterSettings = class(TDNGenericImport<DNXmlWriterSettingsClass, DNXmlWriterSettings>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathDocumentClass = interface(DNObjectClass)
  ['{8C1F535F-E646-5B7F-A23D-656BCDCACC7F}']
  { constructors } 

    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  类从 XML 数据包含在指定 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含 XML 数据。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(reader: DNXmlReader): DNXPathDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  类从 XML 数据包含在指定 <see cref="T:System.Xml.XmlReader" />
    ///  使用指定的空白处理的对象。
    ///</summary>
    ///  <param name="reader"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含 XML 数据。
    ///</param>
    ///  <param name="space">
    ///  一个 <see cref="T:System.Xml.XmlSpace" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数或 <see cref="T:System.Xml.XmlSpace" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(reader: DNXmlReader; space: DNXmlSpace): DNXPathDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  类从 XML 数据包含在指定 <see cref="T:System.IO.TextReader" />
    ///  对象。
    ///</summary>
    ///  <param name="textReader"><see cref="T:System.IO.TextReader" />
    ///  对象，其中包含 XML 数据。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.IO.TextReader" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(textReader: DDN.mscorlib.DNTextReader): DNXPathDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  类中指定的 XML 数据从 <see cref="T:System.IO.Stream" />
    ///  对象。
    ///</summary>
    ///  <param name="stream"><see cref="T:System.IO.Stream" />
    ///  对象，其中包含 XML 数据。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.IO.Stream" />
    ///  对象作为参数传递 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(stream: DDN.mscorlib.DNStream): DNXPathDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  从指定文件中的 XML 数据的类。
    ///</summary>
    ///  <param name="uri">
    ///  包含 XML 数据的文件的路径。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  文件路径参数是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(uri: string): DNXPathDocument; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  从指定的空白处理指定的文件中的 XML 数据的类。
    ///</summary>
    ///  <param name="uri">
    ///  包含 XML 数据的文件的路径。
    ///</param>
    ///  <param name="space">
    ///  一个 <see cref="T:System.Xml.XmlSpace" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.XmlException">
    ///  XML 数据中遇到错误。
    ///<see cref="T:System.Xml.XPath.XPathDocument" />
    ///  保留为空。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  文件路径参数或 <see cref="T:System.Xml.XmlSpace" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception>
    {class} function init(uri: string; space: DNXmlSpace): DNXPathDocument; overload;

  end;

  ///<summary>
  ///  使用 XPath 数据模型提供 XML 文档的快速、只读、内存表示形式。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathDocument')]
  DNXPathDocument = interface(DNIXPathNavigable)
  ['{B6446D0E-E67F-3271-B8DA-BF8BBBA19466}']
  { methods } 

    ///<summary>
    ///  初始化一个只读的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象在此节点中进行导航 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  。
    ///</summary>
    ///<returns>
    ///  只读 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXPathDocument = class(TDNGenericImport<DNXPathDocumentClass, DNXPathDocument>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathExpressionClass = interface(DDN.mscorlib.DNObjectClass)
  ['{F66C6659-D159-5BE6-A5CE-CAA051FE3D65}']
  { static methods } 

    ///<summary>
    ///  编译指定的 XPath 表达式并返回表示 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式参数不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    {class} function Compile(xpath: string): DNXPathExpression; overload;
    ///<summary>
    ///  编译时指定的 XPath 表达式不包含 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  为命名空间解析，并返回指定对象 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示 XPath 表达式的对象。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///  <param name="nsResolver">
    ///  实现的对象 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  命名空间解析的接口。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式参数不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    {class} function Compile(xpath: string; nsResolver: DNIXmlNamespaceResolver): DNXPathExpression; overload;

  end;

  ///<summary>
  ///  提供一个类型化的类，表示已编译的 XPath 表达式。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathExpression')]
  DNXPathExpression = interface(DDN.mscorlib.DNObject)
  ['{B2D5CCCE-B400-3DC6-B310-EB894C049E94}']
  { getters & setters } 

    function get_Expression: string;
    function get_ReturnType: DNXPathResultType;

  { methods } 

    ///<summary>
    ///  当在派生类中重写时按照指定的 XPath 表达式选择的节点排序 <see cref="T:System.Collections.IComparer" />
    ///  对象。
    ///</summary>
    ///  <param name="expr">
    ///  一个表示排序关键字的对象。
    ///  这可以是节点的 <see langword="string" />
    ///  值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</param>
    ///  <param name="comparer"><see cref="T:System.Collections.IComparer" />
    ///  提供特定的数据类型比较用于比较两个对象是否相等的对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  中找到该前缀。
    ///</exception>
    procedure AddSort(expr: DDN.mscorlib.DNObject; comparer: DDN.mscorlib.DNIComparer); overload;
    ///<summary>
    ///  当在派生类中被重写时，根据所提供的参数对 XPath 表达式所选的节点进行排序。
    ///</summary>
    ///  <param name="expr">
    ///  一个表示排序关键字的对象。
    ///  这可以是节点的 <see langword="string" />
    ///  值，还可以是具有已编译 XPath 表达式的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</param>
    ///  <param name="order">
    ///  一个 <see cref="T:System.Xml.XPath.XmlSortOrder" />
    ///  值，它指示排序顺序。
    ///</param>
    ///  <param name="caseOrder">
    ///  一个 <see cref="T:System.Xml.XPath.XmlCaseOrder" />
    ///  值，它指示大写字母和小写字母的排序方式。
    ///</param>
    ///  <param name="lang">
    ///  要用于比较的语言。
    ///  使用 <see cref="T:System.Globalization.CultureInfo" />
    ///  类，该类可传递到语言类型的 <see cref="Overload:System.String.Compare" />
    ///  方法，美式英语的“us-en”。
    ///  如果指定了空的字符串，则使用系统环境来确定 <see cref="T:System.Globalization.CultureInfo" />
    ///  。
    ///</param>
    ///  <param name="dataType">
    ///  一个 <see cref="T:System.Xml.XPath.XmlDataType" />
    ///  值，它指示数据类型的排序顺序。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  或排序关键字包括前缀，并且未提供 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  或未在所提供的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  中找到该前缀。
    ///</exception>
    procedure AddSort(expr: DDN.mscorlib.DNObject; order: DNXmlSortOrder; caseOrder: DNXmlCaseOrder; lang: string; dataType: DNXmlDataType); overload;
    ///<summary>
    ///  当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</returns>
    function Clone: DNXPathExpression;
    ///<summary>
    ///  在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象。
    ///</summary>
    ///  <param name="nsManager">
    ///  要用于命名空间解析的 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.XmlNamespaceManager" />
    ///  对象参数不是从 <see cref="T:System.Xml.XmlNamespaceManager" />
    ///  类派生的。
    ///</exception>
    procedure SetContext(nsManager: DNXmlNamespaceManager); overload;
    ///<summary>
    ///  在派生类中被重写时，指定要用于命名空间解析的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</summary>
    ///  <param name="nsResolver">
    ///  实现 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  接口以用于命名空间解析的对象。
    ///</param>
    ///<exception cref="T:System.Xml.XPath.XPathException"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象参数不派生自 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  。
    ///</exception>
    procedure SetContext(nsResolver: DNIXmlNamespaceResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写时获取 <see langword="string" />
    ///  表示形式 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///<returns><see langword="string" />
    ///  的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示形式。
    ///</returns>
    property Expression: string read get_Expression;
    ///<summary>
    ///  当在派生类中重写时，获取 XPath 表达式的结果类型。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathResultType" />
    ///  值，该值表示 XPath 表达式的结果类型。
    ///</returns>
    property ReturnType: DNXPathResultType read get_ReturnType;
  end;

  TDNXPathExpression = class(TDNGenericImport<DNXPathExpressionClass, DNXPathExpression>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathItemClass = interface(DDN.mscorlib.DNObjectClass)
  ['{690D9F07-5437-59CB-A7C4-9C8A860A77A8}']
  end;

  ///<summary>
  ///  表示在 XQuery 1.0 和 XPath 2.0 数据模型中的项。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathItem')]
  DNXPathItem = interface(DDN.mscorlib.DNObject)
  ['{A44B4227-A179-337E-8392-7DCF1267E90E}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_Value: string;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;

  { methods } 

    ///<summary>
    ///  返回与指定的类型的项的值。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的项值的类型。
    ///</param>
    ///<returns>
    ///  将项目作为请求的类型的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  当在派生类中重写时, 返回的项的值为使用指定的类型 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  指定用来解析命名空间前缀的对象。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的项值的类型。
    ///</param>
    ///  <param name="nsResolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  将项目作为请求的类型的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  当在派生类中重写，获取一个值，该值指示项是否表示一个 XPath 节点或一个原子值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果此项表示一个 XPath 节点; <see langword="false" />
    ///  如果此项表示一个原子值。
    ///</returns>
    property IsNode: Boolean read get_IsNode;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  项。
    ///</summary>
    ///<returns>
    ///  项的 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  。
    ///</returns>
    property XmlType: DNXmlSchemaType read get_XmlType;
    ///<summary>
    ///  当在派生类中重写时获取 <see langword="string" />
    ///  项的值。
    ///</summary>
    ///<returns><see langword="string" />
    ///  项的值。
    ///</returns>
    property Value: string read get_Value;
    ///<summary>
    ///  当在派生类中重写，作为最合适的已装箱对象获取的当前项 .NET Framework&amp;2;.0 符合其架构类型的类型。
    ///</summary>
    ///<returns>
    ///  作为最合适的已装箱对象的当前项 .NET Framework 类型。
    ///</returns>
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    ///<summary>
    ///  当在派生类中重写时获取 .NET Framework&amp;2;.0 项的类型。
    ///</summary>
    ///<returns>
    ///  .NET Framework 项的类型。
    ///  默认值为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  当在派生类中重写时获取项的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  项的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为 <see cref="T:System.Boolean" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Boolean" />
    ///  无效。
    ///</exception>
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    ///<summary>
    ///  当在派生类中重写时获取项的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  项的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为 <see cref="T:System.DateTime" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.DateTime" />
    ///  无效。
    ///</exception>
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    ///<summary>
    ///  当在派生类中重写时获取项的值作为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  项的值作为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为 <see cref="T:System.Double" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Double" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsDouble: Double read get_ValueAsDouble;
    ///<summary>
    ///  当在派生类中重写时获取项的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  项的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为 <see cref="T:System.Int32" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int32" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsInt: Int32 read get_ValueAsInt;
    ///<summary>
    ///  当在派生类中重写时获取项的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  项的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为 <see cref="T:System.Int64" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int64" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsLong: Int64 read get_ValueAsLong;
  end;

  TDNXPathItem = class(TDNGenericImport<DNXPathItemClass, DNXPathItem>) end;

  //-------------namespace: System.Xml.Schema----------------
  DNXmlAtomicValueClass = interface(DNXPathItemClass)
  ['{5C156F4B-59C5-5CBC-BC46-1F5637A16EBE}']
  end;

  ///<summary>
  ///  表示已验证的 XML 元素或属性的类型化的值。
  ///<see cref="T:System.Xml.Schema.XmlAtomicValue" />
  ///  类不能被继承。
  ///</summary>
  [DNTypeName('System.Xml.Schema.XmlAtomicValue')]
  DNXmlAtomicValue = interface(DNXPathItem)
  ['{18D064C4-771A-3DB5-9B38-A0D84B778768}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  返回一份 <see cref="T:System.Xml.Schema.XmlAtomicValue" />
    ///  对象。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlAtomicValue" />
    ///  对象的副本 <see cref="T:System.Xml.Schema.XmlAtomicValue" />
    ///  对象。
    ///</returns>
    function Clone: DNXmlAtomicValue;
    ///<summary>
    ///  验证的 XML 元素或属性的值按使用指定的类型返回 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  指定用来解析命名空间前缀的对象。
    ///</summary>
    ///  <param name="type">
    ///  要验证的 XML 元素或属性的值作为返回的类型。
    ///</param>
    ///  <param name="nsResolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  已验证的 XML 元素或作为请求的类型的属性的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或特性的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(&type: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  获取 <see langword="string" />
    ///  已验证的 XML 元素或属性的值。
    ///</summary>
    ///<returns><see langword="string" />
    ///  已验证的 XML 元素或属性的值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  返回与指定的类型的项的值。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的项值的类型。
    ///</param>
    ///<returns>
    ///  将项目作为请求的类型的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示是否已验证的 XML 元素或属性一个 XPath 节点或原子值。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果已验证的 XML 元素或属性是一个 XPath 节点; <see langword="false" />
    ///  如果已验证的 XML 元素或属性是一个原子值。
    ///</returns>
    property IsNode: Boolean read get_IsNode;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  经验证的 XML 元素或属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  经验证的 XML 元素或属性。
    ///</returns>
    property XmlType: DNXmlSchemaType read get_XmlType;
    ///<summary>
    ///  获取经验证的 XML 元素或特性的 Microsoft.NET Framework 的类型。
    ///</summary>
    ///<returns>
    ///  已验证的 XML 元素或属性的.NET Framework 类型。
    ///  默认值为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  获取当前已验证的 XML 元素或属性符合其架构类型最适合的 Microsoft.NET Framework 类型的装箱对象形式。
    ///</summary>
    ///<returns>
    ///  当前作为最合适的.NET Framework 类型的装箱对象验证 XML 元素或属性。
    ///</returns>
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    ///<summary>
    ///  获取验证的 XML 元素或属性的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  验证的 XML 元素或属性的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Boolean" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Boolean" />
    ///  无效。
    ///</exception>
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    ///<summary>
    ///  获取验证的 XML 元素或属性的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  验证的 XML 元素或属性的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.DateTime" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.DateTime" />
    ///  无效。
    ///</exception>
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    ///<summary>
    ///  获取验证的 XML 元素或属性的值作为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  验证的 XML 元素或属性的值作为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Double" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Double" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsDouble: Double read get_ValueAsDouble;
    ///<summary>
    ///  获取验证的 XML 元素或属性的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  验证的 XML 元素或属性的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Int32" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int32" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsInt: Int32 read get_ValueAsInt;
    ///<summary>
    ///  获取验证的 XML 元素或属性的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  验证的 XML 元素或属性的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  验证的 XML 元素或属性的值不是正确的格式为 <see cref="T:System.Int64" />
    ///  类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int64" />
    ///  无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    property ValueAsLong: Int64 read get_ValueAsLong;
    ///<summary>
    ///  获取 <see langword="string" />
    ///  已验证的 XML 元素或属性的值。
    ///</summary>
    ///<returns><see langword="string" />
    ///  已验证的 XML 元素或属性的值。
    ///</returns>
    property Value: string read get_Value;
  end;

  TDNXmlAtomicValue = class(TDNGenericImport<DNXmlAtomicValueClass, DNXmlAtomicValue>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNavigatorClass = interface(DNXPathItemClass)
  ['{ED2BA7FB-0878-504B-988D-16D04F1775E3}']
  { static getter & setter } 

    {class} function get_NavigatorComparer: DDN.mscorlib.DNIEqualityComparer;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Collections.IEqualityComparer" />
    ///  ，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的相等比较。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Collections.IEqualityComparer" />
    ///  ，它用于 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的相等比较。
    ///</returns>
    {class} property NavigatorComparer: DDN.mscorlib.DNIEqualityComparer read get_NavigatorComparer;
  end;

  ///<summary>
  ///  为定位和编辑 XML 数据提供游标模型。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNavigator')]
  DNXPathNavigator = interface(DNXPathItem)
  ['{BE86B874-6C3C-3FC2-A6B3-4DA73CA20540}']
  { getters & setters } 

    function get_IsNode: Boolean;
    function get_XmlType: DNXmlSchemaType;
    function get_TypedValue: DDN.mscorlib.DNObject;
    function get_ValueType: DDN.mscorlib.DNType;
    function get_ValueAsBoolean: Boolean;
    function get_ValueAsDateTime: DDN.mscorlib.DNDateTime;
    function get_ValueAsDouble: Double;
    function get_ValueAsInt: Int32;
    function get_ValueAsLong: Int64;
    function get_NameTable: DNXmlNameTable;
    function get_NodeType: DNXPathNodeType;
    function get_LocalName: string;
    function get_Name: string;
    function get_NamespaceURI: string;
    function get_Prefix: string;
    function get_BaseURI: string;
    function get_IsEmptyElement: Boolean;
    function get_XmlLang: string;
    function get_UnderlyingObject: DDN.mscorlib.DNObject;
    function get_HasAttributes: Boolean;
    function get_HasChildren: Boolean;
    function get_SchemaInfo: DNIXmlSchemaInfo;
    function get_CanEdit: Boolean;
    function get_OuterXml: string;
    procedure set_OuterXml(value: string);
    function get_InnerXml: string;
    procedure set_InnerXml(value: string);
    function get_Value: string;

  { methods } 

    ///<summary>
    ///  获取当前节点的文本值。
    ///</summary>
    ///<returns>
    ///  一个 <see langword="string" />
    ///  ，其中包含当前节点的文本值。
    ///</returns>
    function ToString: string;
    ///<summary>
    ///  设置当前节点的值。
    ///</summary>
    ///  <param name="value">
    ///  节点的新值。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  值参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  位于根节点（即命名空间节点）上，或指定的值无效。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure SetValue(value: string);
    ///<summary>
    ///  设置当前节点的类型化值。
    ///</summary>
    ///  <param name="typedValue">
    ///  节点的新类型化值。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持指定的对象类型。
    ///</exception><exception cref="T:System.ArgumentNullException">
    ///  指定的值不能为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位在元素或属性节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure SetTypedValue(typedValue: DDN.mscorlib.DNObject);
    ///<summary>
    ///  获取当前节点的值作为<see cref="T:System.Type" />
    ///  指定，使用<see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  指定用来解析命名空间前缀的对象。
    ///</summary>
    ///  <param name="returnType"><see cref="T:System.Type" />
    ///  返回为当前节点的值。
    ///</param>
    ///  <param name="nsResolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  形式的当前节点的值<see cref="T:System.Type" />
    ///  请求。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的值不是目标类型的正确格式。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType; nsResolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  返回一份 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  这份 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</returns>
    function CreateNavigator: DNXPathNavigator;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象包含当前节点及其子节点。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象包含当前节点及其子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会在元素节点或根节点上进行定位。
    ///</exception>
    function ReadSubtree: DNXmlReader;
    ///<summary>
    ///  将当前节点及其子节点流式传输到指定的 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</summary>
    ///  <param name="writer">
    ///  要流式传输至的 <see cref="T:System.Xml.XmlWriter" />
    ///  对象。
    ///</param>
    procedure WriteSubtree(writer: DNXmlWriter);
    ///<summary>
    ///  获取具有指定本地名称和命名空间 URI 的属性的值。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///  <paramref name="localName" />
    ///  是区分大小写。
    ///</param>
    ///  <param name="namespaceURI">
    ///  属性的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含指定属性的值 <see cref="F:System.String.Empty" />
    ///  如果未找到一个匹配的特性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    function GetAttribute(localName: string; namespaceURI: string): string;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有匹配的本地名称和命名空间 URI 的属性。
    ///</summary>
    ///  <param name="localName">
    ///  属性的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的属性; <see langword="null" />
    ///  空命名空间。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的属性; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToAttribute(localName: string; namespaceURI: string): Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有指定的命名空间前缀的命名空间节点。
    ///</summary>
    ///  <param name="name">
    ///  命名空间节点的命名空间前缀。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到指定的命名空间; <see langword="false" />
    ///  如果找不到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNamespace(name: string): Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的第一个命名空间节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到第一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstNamespace: Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到下一步的命名空间节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNextNamespace: Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移至当前节点的第一个同级节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的第一个同级节点 <see langword="false" />
    ///  如果没有第一个同级或者 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  已位于上的第一个同级 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  将返回 <see langword="true" />
    ///  并不会移动其位置。
    ///  如果 <see cref="M:System.Xml.XPath.XPathNavigator.MoveToFirst" />
    ///  返回 <see langword="false" />
    ///  因为没有第一个同级，或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在特性上的位置， <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  保持不变。
    ///</returns>
    function MoveToFirst: Boolean;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点所属的根节点。
    ///</summary>
    procedure MoveToRoot;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到具有本地名称和命名空间 URI 指定的子节点。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的子节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的子节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToChild(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  指定。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  要移动到的子节点。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到的子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToChild(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到按文档顺序指定了其本地名称或命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到指定的边界内具有指定的本地名称和命名空间 URI 的元素。
    ///</summary>
    ///  <param name="localName">
    ///  元素的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  元素的命名空间 URI。
    ///</param>
    ///  <param name="end"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会越过的元素边界上。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(localName: string; namespaceURI: string; &end: DNXPathNavigator): Boolean; overload;
    ///<summary>
    ///  将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到按文档顺序指定的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的以下元素。
    ///</summary>
    ///  <param name="type">
    ///  元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///<see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  不能为 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" />
    ///  或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />
    ///  。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动成功，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  按文档顺序将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到指定边界内的指定 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的下一个元素。
    ///</summary>
    ///  <param name="type">
    ///  元素的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///<see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  不能是 <see cref="F:System.Xml.XPath.XPathNodeType.Attribute" />
    ///  或 <see cref="F:System.Xml.XPath.XPathNodeType.Namespace" />
    ///  。
    ///</param>
    ///  <param name="end"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在搜索下一个元素时当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不会越过的元素边界上。
    ///</param>
    ///<returns>
    ///  如果成功移动了 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveToFollowing(&type: DNXPathNodeType; &end: DNXPathNavigator): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  具有本地名称和命名空间 URI 指定的下一个同级节点。
    ///</summary>
    ///  <param name="localName">
    ///  要移动到的下一个同级节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  要移动到的下一个同级节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点; <see langword="false" />
    ///  如果没有其他同级或 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext(localName: string; namespaceURI: string): Boolean; overload;
    ///<summary>
    ///  将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至相匹配的当前节点的下一个同级节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  指定。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  将移动到的同级节点。
    ///</param>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点，则为 <see langword="true" />
    ///  ；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前位于属性节点上，则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext(&type: DNXPathNodeType): Boolean; overload;
    ///<summary>
    ///  确定是否指定 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="nav"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果指定 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是当前的后代 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsDescendant(nav: DNXPathNavigator): Boolean;
    ///<summary>
    ///  编译一个表示 XPath 表达式的字符串，并返回 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的字符串。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  表示 XPath 表达式的对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException"><paramref name="xpath" />
    ///  参数包含不是有效的 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Compile(xpath: string): DNXPathExpression;
    ///<summary>
    ///  使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(xpath: string): DNXPathNavigator; overload;
    ///<summary>
    ///  通过指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象使用指定的 XPath 查询在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点，以解析命名空间前缀。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象用于解析 XPath 查询中的命名空间前缀。
    ///</param>
    ///<returns>
    ///  一个包含指定 XPath 查询的第一个匹配节点的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNavigator; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象在 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中选择单个节点。
    ///</summary>
    ///  <param name="expression"><see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象，其中包含已编译的 XPath 查询。
    ///</param>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含指定的 XPath 查询的第一个匹配节点；如果没有查询结果，则为 <see langword="null" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  在 XPath 查询中遇到了错误或 XPath 表达式的返回类型不是一个节点。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 查询无效。
    ///</exception>
    function SelectSingleNode(expression: DNXPathExpression): DNXPathNavigator; overload;
    ///<summary>
    ///  使用指定的 XPath 表达式选择节点集。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///<returns>
    ///  指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(xpath: string): DNXPathNodeIterator; overload;
    ///<summary>
    ///  使用指定的 XPath 表达式与指定用来解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象选择节点集。
    ///</summary>
    ///  <param name="xpath">
    ///  表示 XPath 表达式的 <see cref="T:System.String" />
    ///  。
    ///</param>
    ///  <param name="resolver">
    ///  用于解析命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指向所选节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(xpath: string; resolver: DNIXmlNamespaceResolver): DNXPathNodeIterator; overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  来选择节点集。
    ///</summary>
    ///  <param name="expr">
    ///  包含已编译的 XPath 查询的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  指向选定节点集的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式包含错误或其返回类型不是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Select(expr: DNXPathExpression): DNXPathNodeIterator; overload;
    ///<summary>
    ///  计算指定的 XPath 表达式并返回类型化结果。
    ///</summary>
    ///  <param name="xpath">
    ///  表示可以计算的 XPath 表达式的字符串。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(xpath: string): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  计算指定的 XPath 表达式并返回类型化结果，以使用指定的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象解析 XPath 表达式中的命名空间前缀。
    ///</summary>
    ///  <param name="xpath">
    ///  表示可以计算的 XPath 表达式的字符串。
    ///</param>
    ///  <param name="resolver">
    ///  用来解析 XPath 表达式中的命名空间前缀的 <see cref="T:System.Xml.IXmlNamespaceResolver" />
    ///  对象。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(xpath: string; resolver: DNIXmlNamespaceResolver): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  计算 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  并返回类型化结果。
    ///</summary>
    ///  <param name="expr">
    ///  可计算的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(expr: DNXPathExpression): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  使用提供的上下文计算 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  ，并返回类型化结果。
    ///</summary>
    ///  <param name="expr">
    ///  可以计算的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</param>
    ///  <param name="context"><see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  ，指向要在其上执行计算的选定节点集。
    ///</param>
    ///<returns>
    ///  表达式结果（布尔值、数字、字符串或节点集）。
    ///  这分别映射到 <see cref="T:System.Boolean" />
    ///  、<see cref="T:System.Double" />
    ///  、<see cref="T:System.String" />
    ///  或 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  XPath 表达式的返回类型是节点集。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Evaluate(expr: DNXPathExpression; context: DNXPathNodeIterator): DDN.mscorlib.DNObject; overload;
    ///<summary>
    ///  确定当前节点是否匹配所指定的 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  。
    ///</summary>
    ///  <param name="expr">
    ///  一个 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  对象，它包含已编译的 XPath 表达式。
    ///</param>
    ///<returns>
    ///  如果当前节点匹配 <see cref="T:System.Xml.XPath.XPathExpression" />
    ///  ，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  无法计算 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Matches(expr: DNXPathExpression): Boolean; overload;
    ///<summary>
    ///  确定当前节点是否与指定的 XPath 表达式匹配。
    ///</summary>
    ///  <param name="xpath">
    ///  XPath 表达式。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果当前节点与指定的 XPath 表达式中;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentException">
    ///  无法计算 XPath 表达式。
    ///</exception><exception cref="T:System.Xml.XPath.XPathException">
    ///  XPath 表达式无效。
    ///</exception>
    function Matches(xpath: string): Boolean; overload;
    ///<summary>
    ///  选择当前节点的所有有相匹配的子节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  的子节点。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    function SelectChildren(&type: DNXPathNodeType): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有子节点。
    ///</summary>
    ///  <param name="name">
    ///  子节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  子节点的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectChildren(name: string; namespaceURI: string): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择所有祖先节点的当前节点中具有匹配 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  祖先节点。
    ///</param>
    ///  <param name="matchSelf">
    ///  若要在所选内容上包含上下文节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///  返回的节点的顺序与文档顺序相反。
    ///</returns>
    function SelectAncestors(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有祖先节点。
    ///</summary>
    ///  <param name="name">
    ///  祖先节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  祖先节点的命名空间 URI。
    ///</param>
    ///  <param name="matchSelf">
    ///  若要在所选内容上包含上下文节点，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///  返回的节点的顺序与文档顺序相反。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectAncestors(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点的具有匹配的所有子代节点 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///  <param name="type"><see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  子代节点。
    ///</param>
    ///  <param name="matchSelf"><see langword="true" />
    ///  若要在所选内容; 中包括上下文节点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    function SelectDescendants(&type: DNXPathNodeType; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  选择当前节点中具有指定的本地名称和命名空间 URI 的所有子代节点。
    ///</summary>
    ///  <param name="name">
    ///  子代节点的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  命名空间 URI 的子代节点。
    ///</param>
    ///  <param name="matchSelf"><see langword="true" />
    ///  若要在所选内容; 中包括上下文节点否则为 <see langword="false" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个包含所选节点的 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  无法将 <see langword="null" />
    ///  作为一个参数进行传递。
    ///</exception>
    function SelectDescendants(name: string; namespaceURI: string; matchSelf: Boolean): DNXPathNodeIterator; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不允许在前面追加新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function PrependChild: DNXmlWriter; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的末尾创建一个或多个新的子节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前节点的子节点列表的末尾创建新的子节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function AppendChild: DNXmlWriter; overload;
    ///<summary>
    ///  返回一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于在当前所选节点的后面创建一个新的同级节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的后面创建一个新的同级节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function InsertAfter: DNXmlWriter; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的前面创建一个新的同级节点。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，它用于在当前所选节点的前面创建一个新的同级节点。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function InsertBefore: DNXmlWriter; overload;
    ///<summary>
    ///  返回 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，用于在当前元素上创建新属性。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlWriter" />
    ///  对象，用于在当前元素上创建新属性。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  程序不位于某个元素节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    function CreateAttributes: DNXmlWriter;
    ///<summary>
    ///  替换从当前节点到指定节点之间的一组同级节点。
    ///</summary>
    ///  <param name="lastSiblingToReplace">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位在要替换的范围内的最后一个同级节点上。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.Xml.XmlWriter" />
    ///  对象，该对象用于指定替换范围。
    ///</returns>
    ///<exception cref="T:System.ArgumentNullException">
    ///  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  指定的要替换的最后一个节点不是当前节点的有效同级节点。
    ///</exception>
    function ReplaceRange(lastSiblingToReplace: DNXPathNavigator): DNXmlWriter;
    ///<summary>
    ///  将当前节点替换为指定的字符串内容。
    ///</summary>
    ///  <param name="newNode">
    ///  新节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure ReplaceSelf(newNode: string); overload;
    ///<summary>
    ///  将当前节点替换为指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的内容。
    ///</summary>
    ///  <param name="newNode">
    ///  位于新节点的 XML 数据上的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure ReplaceSelf(newNode: DNXmlReader); overload;
    ///<summary>
    ///  将当前节点替换为指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象的内容。
    ///</summary>
    ///  <param name="newNode">
    ///  在新节点上定位的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不位于元素、文本、处理指令或注释节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure ReplaceSelf(newNode: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 数据字符串在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 数据字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 数据字符串参数的格式不正确。
    ///</exception>
    procedure AppendChild(newChild: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，该对象定位在新的子节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure AppendChild(newChild: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中的节点在当前节点的子节点列表的末尾创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的子节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure AppendChild(newChild: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  新的子节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所在的当前节点不允许预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure PrependChild(newChild: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容，在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，它定位在新子节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所位于的当前节点不允许在其前面预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure PrependChild(newChild: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象中的节点在当前节点的子节点列表的开始处创建一个新的子节点。
    ///</summary>
    ///  <param name="newChild">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的子节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所位于的当前节点不允许在其前面预置新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure PrependChild(newChild: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  新的同级节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure InsertBefore(newSibling: string); overload;
    ///<summary>
    ///  使用 <see cref="T:System.Xml.XmlReader" />
    ///  对象指定的 XML 内容在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  在新的同级节点的 XML 数据上定位的 <see cref="T:System.Xml.XmlReader" />
    ///  对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure InsertBefore(newSibling: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  中的节点在当前选定的节点之前创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的同级节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的前面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertBefore(newSibling: DNXPathNavigator); overload;
    ///<summary>
    ///  使用指定的 XML 字符串在当前选定的节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  新的同级节点的 XML 数据字符串。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  XML 字符串参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  XML 字符串参数的格式不正确。
    ///</exception>
    procedure InsertAfter(newSibling: string); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XmlReader" />
    ///  对象的 XML 内容，在当前所选节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XmlReader" />
    ///  对象，它置于新同级节点的 XML 数据上。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><see cref="T:System.Xml.XmlReader" />
    ///  对象处于错误状态或已关闭。
    ///</exception><exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.Xml.XmlException"><see cref="T:System.Xml.XmlReader" />
    ///  对象参数的 XML 内容的格式不标准。
    ///</exception>
    procedure InsertAfter(newSibling: DNXmlReader); overload;
    ///<summary>
    ///  使用指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象中的节点在当前选定的节点之后创建一个新的同级节点。
    ///</summary>
    ///  <param name="newSibling">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，该对象定位在将作为新的同级节点添加的节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象参数是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点的后面插入新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertAfter(newSibling: DNXPathNavigator); overload;
    ///<summary>
    ///  删除从当前节点到指定节点之间的一组同级节点。
    ///</summary>
    ///  <param name="lastSiblingToDelete">
    ///  一个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位在要删除的范围内的最后一个同级节点上。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException">
    ///  指定的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  为 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception><exception cref="T:System.InvalidOperationException">
    ///  指定的要删除的最后一个节点不是当前节点的有效同级节点。
    ///</exception>
    procedure DeleteRange(lastSiblingToDelete: DNXPathNavigator);
    ///<summary>
    ///  删除当前节点及其子节点。
    ///</summary>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位在不能删除的节点上，例如根节点或命名空间节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure DeleteSelf;
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的开始处创建一个新的子元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不允许在前面追加新的子节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure PrependChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点的子节点列表的末尾创建一个新的子元素节点。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素节点（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素节点（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素节点（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  等效。
    ///</param>
    ///  <param name="value">
    ///  新的子元素节点的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  所定位至的当前节点不是根节点或不是一个元素节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure AppendChildElement(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之前创建一个新的同级元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不允许在当前节点之前插入一个新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertElementBefore(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前节点之后创建一个新的同级元素。
    ///</summary>
    ///  <param name="prefix">
    ///  新的子元素（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的子元素（如果有）的本地名称。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的子元素（如果有）的命名空间 URI。
    ///<see cref="F:System.String.Empty" />
    ///  和 <see langword="null" />
    ///  是等效的。
    ///</param>
    ///  <param name="value">
    ///  新的子元素的值。
    ///  如果传递 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，将创建一个空元素。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不允许在当前节点之后插入一个新的同级节点。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure InsertElementAfter(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  使用通过指定值指定的命名空间前缀、本地名称和命名空间 URI 在当前元素节点上创建一个属性节点。
    ///</summary>
    ///  <param name="prefix">
    ///  新的属性节点（如果有）的命名空间前缀。
    ///</param>
    ///  <param name="localName">
    ///  新的属性节点的本地名称，该名称不能是 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="namespaceURI">
    ///  新的属性节点（如果有）的命名空间 URI。
    ///</param>
    ///  <param name="value">
    ///  新的属性节点的值。
    ///  如果传递了 <see cref="F:System.String.Empty" />
    ///  或 <see langword="null" />
    ///  ，则将创建一个空属性节点。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  未定位在元素节点上。
    ///</exception><exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不支持编辑。
    ///</exception>
    procedure CreateAttribute(prefix: string; localName: string; namespaceURI: string; value: string);
    ///<summary>
    ///  获取指定前缀的命名空间 URI。
    ///</summary>
    ///  <param name="prefix">
    ///  要解析其命名空间 URI 的前缀。
    ///  若要匹配默认命名空间，传递 <see cref="F:System.String.Empty" />
    ///  。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含的命名空间 URI 分配给指定; 的命名空间前缀 <see langword="null" />
    ///  如果没有命名空间 URI 分配给指定的前缀。
    ///<see cref="T:System.String" />
    ///  返回原子化的。
    ///</returns>
    function LookupNamespace(prefix: string): string;
    ///<summary>
    ///  获取为指定的命名空间 URI 声明的前缀。
    ///</summary>
    ///  <param name="namespaceURI">
    ///  要为前缀解析的命名空间 URI。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，其中包含命名空间前缀分配给命名空间 URI; 否则为 <see cref="F:System.String.Empty" />
    ///  如果没有前缀分配给指定 URI 的命名空间。
    ///<see cref="T:System.String" />
    ///  返回原子化的。
    ///</returns>
    function LookupPrefix(namespaceURI: string): string;
    ///<summary>
    ///  返回当前节点的范围内命名空间。
    ///</summary>
    ///  <param name="scope"><see cref="T:System.Xml.XmlNamespaceScope" />
    ///  值，该值指定要返回的命名空间。
    ///</param>
    ///<returns><see cref="T:System.Collections.Generic.IDictionary`2" />
    ///  的前缀键控的命名空间名称的集合。
    ///</returns>
    function GetNamespacesInScope(scope: DNXmlNamespaceScope): DDN.mscorlib.DNIDictionary<string, string>;
    ///<summary>
    ///  当在派生类中被重写时，创建一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位到的节点相同。
    ///</summary>
    ///<returns>
    ///  一个新的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ，它定位到的节点与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位到的节点相同。
    ///</returns>
    function Clone: DNXPathNavigator;
    ///<summary>
    ///  在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到当前节点的第一个属性。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功移动到了当前节点的第一个属性，则返回 <see langword="true" />
    ///  ；否则返回 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不变。
    ///</returns>
    function MoveToFirstAttribute: Boolean;
    ///<summary>
    ///  当在派生类中被重写时，将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动到下一个属性。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个属性，则返回 <see langword="true" />
    ///  ；如果没有其他属性，则返回 <see langword="false" />
    ///  。
    ///  如果为 <see langword="false" />
    ///  ，则 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置不变。
    ///</returns>
    function MoveToNextAttribute: Boolean;
    ///<summary>
    ///  返回与所指定本地名称对应的命名空间节点的值。
    ///</summary>
    ///  <param name="name">
    ///  命名空间节点的本地名称。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含值的命名空间节点; <see cref="F:System.String.Empty" />
    ///  如果未找到匹配的命名空间节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    function GetNamespace(name: string): string;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到匹配的第一个命名空间节点 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  指定。
    ///</summary>
    ///  <param name="namespaceScope"><see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  值，该值描述命名空间范围。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到第一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到下一个命名空间节点匹配 <see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  指定。
    ///</summary>
    ///  <param name="namespaceScope"><see cref="T:System.Xml.XPath.XPathNamespaceScope" />
    ///  值，该值描述命名空间范围。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个命名空间节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNextNamespace(namespaceScope: DNXPathNamespaceScope): Boolean; overload;
    ///<summary>
    ///  当在派生类中重写时，会将 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  移动至当前节点的下一个同级节点。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到下一个同级节点，则为 <see langword="true" />
    ///  ；如果没有更多同级节点或如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前位于属性节点上，则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToNext: Boolean; overload;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的上一个同级节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到上一个同级节点; 否则为 <see langword="false" />
    ///  是否没有上一个同级节点，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  当前定位在属性节点上。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToPrevious: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到当前节点的第一个子节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的第一个子节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToFirstChild: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  至当前节点的父节点。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到当前节点的父节点; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveToParent: Boolean;
    ///<summary>
    ///  当在派生类中重写，会将移动 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  到与指定的同一位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位你想要将移动到的节点上。
    ///</param>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功地移动到与指定的位置相同 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  ; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  ，<see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  的位置将保持不变。
    ///</returns>
    function MoveTo(other: DNXPathNavigator): Boolean;
    ///<summary>
    ///  当在派生类中重写，将移动到具有类型的属性的节点 ID 其值匹配指定 <see cref="T:System.String" />
    ///  。
    ///</summary>
    ///  <param name="id">
    ///  一个 <see cref="T:System.String" />
    ///  表示 ID 想要移动的节点的值。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  成功移动; 否则为 <see langword="false" />
    ///  。
    ///  如果 <see langword="false" />
    ///  , ，则导航器的位置保持不变。
    ///</returns>
    function MoveToId(id: string): Boolean;
    ///<summary>
    ///  当在派生类中重写，确定是否当前 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  于与指定的相同位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="other"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与此 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果两个 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象具有相同的位置; 否则为 <see langword="false" />
    ///  。
    ///</returns>
    function IsSamePosition(other: DNXPathNavigator): Boolean;
    ///<summary>
    ///  将当前的位置进行比较 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  用的位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  指定。
    ///</summary>
    ///  <param name="nav"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  要与其进行比较。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlNodeOrder" />
    ///  值，该值表示两个的相对位置 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象。
    ///</returns>
    function ComparePosition(nav: DNXPathNavigator): DNXmlNodeOrder;
    ///<summary>
    ///  验证中的 XML 数据 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  符合提供 XML 架构定义语言 (XSD) 架构。
    ///</summary>
    ///  <param name="schemas"><see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  包含用来验证中包含的 XML 数据的架构 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</param>
    ///  <param name="validationEventHandler"><see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  用于接收有关架构验证警告和错误的信息。
    ///</param>
    ///<returns><see langword="true" />
    ///  如果未发生任何架构验证错误;否则为 <see langword="false" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.Xml.Schema.XmlSchemaValidationException">
    ///  出现架构验证错误，并且不 <see cref="T:System.Xml.Schema.ValidationEventHandler" />
    ///  指定要处理验证错误。
    ///</exception><exception cref="T:System.InvalidOperationException"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  定位在节点上，不是元素、 特性或根节点或者没有类型信息来执行验证。
    ///</exception><exception cref="T:System.ArgumentException"><see cref="M:System.Xml.XPath.XPathNavigator.CheckValidity(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)" />
    ///  调用方法时使用 <see cref="T:System.Xml.Schema.XmlSchemaSet" />
    ///  参数时 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在 XML 数据的根节点上。
    ///</exception>
    function CheckValidity(schemas: DNXmlSchemaSet; validationEventHandler: DNValidationEventHandler): Boolean;
    ///<summary>
    ///  返回与指定的类型的项的值。
    ///</summary>
    ///  <param name="returnType">
    ///  要返回的项值的类型。
    ///</param>
    ///<returns>
    ///  将项目作为请求的类型的值。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  项的值不在的正确格式为目标类型。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换无效。
    ///</exception><exception cref="T:System.OverflowException">
    ///  尝试强制转换导致溢出。
    ///</exception>
    function ValueAs(returnType: DDN.mscorlib.DNType): DDN.mscorlib.DNObject; overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;

  { propertys } 

    ///<summary>
    ///  获取一个值，该值指示当前节点是否表示一个 XPath 节点。
    ///</summary>
    ///<returns>
    ///  始终返回 <see langword="true" />
    ///  。
    ///</returns>
    property IsNode: Boolean read get_IsNode;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  当前节点的信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.XmlSchemaType" />
    ///  对象; 默认值是 <see langword="null" />
    ///  。
    ///</returns>
    property XmlType: DNXmlSchemaType read get_XmlType;
    ///<summary>
    ///  获取作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
    ///</summary>
    ///<returns>
    ///  作为最合适的 .NET Framework 类型的已装箱对象的当前节点。
    ///</returns>
    property TypedValue: DDN.mscorlib.DNObject read get_TypedValue;
    ///<summary>
    ///  获取当前节点的 .NET Framework <see cref="T:System.Type" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的 .NET Framework <see cref="T:System.Type" />
    ///  。
    ///  默认值为 <see cref="T:System.String" />
    ///  。
    ///</returns>
    property ValueType: DDN.mscorlib.DNType read get_ValueType;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Boolean" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Boolean" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Boolean" />
    ///  无效。
    ///</exception>
    property ValueAsBoolean: Boolean read get_ValueAsBoolean;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.DateTime" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.DateTime" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.DateTime" />
    ///  无效。
    ///</exception>
    property ValueAsDateTime: DDN.mscorlib.DNDateTime read get_ValueAsDateTime;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Double" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Double" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Double" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Double" />
    ///  无效。
    ///</exception>
    property ValueAsDouble: Double read get_ValueAsDouble;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Int32" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Int32" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int32" />
    ///  无效。
    ///</exception>
    property ValueAsInt: Int32 read get_ValueAsInt;
    ///<summary>
    ///  获取当前节点的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</summary>
    ///<returns>
    ///  当前节点的值作为 <see cref="T:System.Int64" />
    ///  。
    ///</returns>
    ///<exception cref="T:System.FormatException">
    ///  当前节点的字符串值不能转换为 <see cref="T:System.Int64" />
    ///  。
    ///</exception><exception cref="T:System.InvalidCastException">
    ///  尝试强制转换为 <see cref="T:System.Int64" />
    ///  无效。
    ///</exception>
    property ValueAsLong: Int64 read get_ValueAsLong;
    ///<summary>
    ///  当在派生类中重写时获取 <see cref="T:System.Xml.XmlNameTable" />
    ///  的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlNameTable" />
    ///  对象，它使你能够获取的原子化的版本 <see cref="T:System.String" />
    ///  XML 文档中。
    ///</returns>
    property NameTable: DNXmlNameTable read get_NameTable;
    ///<summary>
    ///  当在派生类中重写时，获取当前节点的 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  。
    ///</summary>
    ///<returns>
    ///  表示当前节点其中一个 <see cref="T:System.Xml.XPath.XPathNodeType" />
    ///  值。
    ///</returns>
    property NodeType: DNXPathNodeType read get_NodeType;
    ///<summary>
    ///  在派生类中被重写时，获取当前节点的 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />
    ///  （不带任何命名空间前缀）。
    ///</summary>
    ///<returns>
    ///  包含当前节点本地名称的 <see cref="T:System.String" />
    ///  ；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property LocalName: string read get_LocalName;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的限定名。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含当前节点的限定 <see cref="P:System.Xml.XPath.XPathNavigator.Name" />
    ///  ；如果当前节点没有名称（例如，文本或注释节点），则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property Name: string read get_Name;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的命名空间 URI。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，它包含当前节点的命名空间 URI；如果当前节点没有命名空间 URI，则为 <see cref="F:System.String.Empty" />
    ///  。
    ///</returns>
    property NamespaceURI: string read get_NamespaceURI;
    ///<summary>
    ///  当在派生类中被重写时，获取与当前节点关联的命名空间前缀。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  它包含与当前节点关联的命名空间前缀。
    ///</returns>
    property Prefix: string read get_Prefix;
    ///<summary>
    ///  当在派生类中被重写时，获取当前节点的基 URI。
    ///</summary>
    ///<returns>
    ///  从其加载节点，该位置或 <see cref="F:System.String.Empty" />
    ///  如果没有值。
    ///</returns>
    property BaseURI: string read get_BaseURI;
    ///<summary>
    ///  当在派生类中被重写时，获取一个值，该值指示当前节点是否是一个没有结束元素标记的空元素。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前节点是一个空的元素;否则为 <see langword="false" />
    ///  。
    ///</returns>
    property IsEmptyElement: Boolean read get_IsEmptyElement;
    ///<summary>
    ///  获取 xml:lang 当前节点范围。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  包含值的 xml:lang 作用域，或 <see cref="F:System.String.Empty" />
    ///  如果当前节点没有任何 xml:lang 作用域返回的值。
    ///</returns>
    property XmlLang: string read get_XmlLang;
    ///<summary>
    ///  使用 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  实现提供"虚拟化"XML 查看在存储区，以提供对基础对象的访问。
    ///</summary>
    ///<returns>
    ///  默认值为 <see langword="null" />
    ///  。
    ///</returns>
    property UnderlyingObject: DDN.mscorlib.DNObject read get_UnderlyingObject;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否有任何属性。
    ///</summary>
    ///<returns>
    ///  返回 <see langword="true" />
    ///  如果当前节点具有属性，则将返回 <see langword="false" />
    ///  如果当前节点不具有任何属性，或者如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  不定位在元素节点上。
    ///</returns>
    property HasAttributes: Boolean read get_HasAttributes;
    ///<summary>
    ///  获取一个值，该值指示当前节点是否具有任何子节点。
    ///</summary>
    ///<returns><see langword="true" />
    ///  如果当前节点具有任何子节点，则否则为 <see langword="false" />
    ///  。
    ///</returns>
    property HasChildren: Boolean read get_HasChildren;
    ///<summary>
    ///  获取作为架构验证结果分配给当前节点的架构信息。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Schema.IXmlSchemaInfo" />
    ///  对象，其中包含当前节点的架构信息。
    ///</returns>
    property SchemaInfo: DNIXmlSchemaInfo read get_SchemaInfo;
    ///<summary>
    ///  获取一个值，该值指示 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  是否可以编辑基础 XML 数据。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  可以编辑基础 XML 数据，则为 <see langword="true" />
    ///  ；否则为 <see langword="false" />
    ///  。
    ///</returns>
    property CanEdit: Boolean read get_CanEdit;
    ///<summary>
    ///  获取或设置表示当前节点及其子节点的开始标记及结束标记的标记。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含表示当前节点及其子节点的开始标记及结束标记的标记。
    ///</returns>
    property OuterXml: string read get_OuterXml write set_OuterXml;
    ///<summary>
    ///  获取或设置表示当前节点的子节点标记。
    ///</summary>
    ///<returns>
    ///  一个 <see cref="T:System.String" />
    ///  ，包含当前节点的子节点的标记。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  无法设置 <see cref="P:System.Xml.XPath.XPathNavigator.InnerXml" />
    ///  属性。
    ///</exception>
    property InnerXml: string read get_InnerXml write set_InnerXml;
    ///<summary>
    ///  当在派生类中重写时获取 <see langword="string" />
    ///  项的值。
    ///</summary>
    ///<returns><see langword="string" />
    ///  项的值。
    ///</returns>
    property Value: string read get_Value;
  end;

  TDNXPathNavigator = class(TDNGenericImport<DNXPathNavigatorClass, DNXPathNavigator>) end;

  //-------------namespace: System.Xml.XPath----------------
  DNXPathNodeIteratorClass = interface(DNObjectClass)
  ['{D5B45F05-6AFE-58F0-9E23-31308022884E}']
  end;

  ///<summary>
  ///  在选定节点集上提供一个迭代器。
  ///</summary>
  [DNTypeName('System.Xml.XPath.XPathNodeIterator')]
  DNXPathNodeIterator = interface(DDN.mscorlib.DNICloneable)
  ['{181EDCFA-EB65-387B-9544-B953DD6A55D0}']
  { getters & setters } 

    function get_Current: DNXPathNavigator;
    function get_CurrentPosition: Int32;
    function get_Count: Int32;

  { methods } 

    ///<summary>
    ///  返回 <see cref="T:System.Collections.IEnumerator" />
    ///  要循环访问所选的节点集对象。
    ///</summary>
    ///<returns><see cref="T:System.Collections.IEnumerator" />
    ///  要循环访问所选的节点集对象。
    ///</returns>
    function GetEnumerator: DDN.mscorlib.DNIEnumerator;
    ///<summary>
    ///  当在派生类中重写时返回此克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</summary>
    ///<returns>
    ///  一个新 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象克隆 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  对象。
    ///</returns>
    function Clone: DNXPathNodeIterator;
    ///<summary>
    ///  在派生类中重写时，将 <see cref="P:System.Xml.XPath.XPathNodeIterator.Current" />
    ///  属性返回的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象移至选定节点集中的下一个节点。
    ///</summary>
    ///<returns>
    ///  如果 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象已移至下一个节点，则为 <see langword="true" />
    ///  ；如果没有其他选定节点，则为 <see langword="false" />
    ///  。
    ///</returns>
    function MoveNext: Boolean;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  在派生类中重写时，获取此 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  的 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，它定位在当前上下文节点上。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，定位在从中选择节点集的上下文节点上。
    ///  必须调用 <see cref="M:System.Xml.XPath.XPathNodeIterator.MoveNext" />
    ///  方法将 <see cref="T:System.Xml.XPath.XPathNodeIterator" />
    ///  移至所选集中的第一个节点。
    ///</returns>
    property Current: DNXPathNavigator read get_Current;
    ///<summary>
    ///  当在派生类中重写时获取所选组节点中的当前位置的索引。
    ///</summary>
    ///<returns>
    ///  当前的位置的索引。
    ///</returns>
    property CurrentPosition: Int32 read get_CurrentPosition;
    ///<summary>
    ///  获取最后一个节点的索引中所选节点集。
    ///</summary>
    ///<returns>
    ///  所选节点，则为 0，如果没有选定的节点集中的最后一个节点的索引。
    ///</returns>
    property Count: Int32 read get_Count;
  end;

  TDNXPathNodeIterator = class(TDNGenericImport<DNXPathNodeIteratorClass, DNXPathNodeIterator>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslCompiledTransformClass = interface(DDN.mscorlib.DNObjectClass)
  ['{3595CC68-E00B-51D8-94EE-1BD2B8168423}']
  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXslCompiledTransform; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Xsl.XslCompiledTransform" />
    ///  类，具有指定的调试设置。
    ///</summary>
    ///  <param name="enableDebug"><see langword="true" />
    ///  生成调试信息;否则为 <see langword="false" />
    ///  。
    ///  此值设置为 <see langword="true" />
    ///  使您能够调试样式表与 Microsoft Visual Studio 调试器。
    ///</param>
    {class} function init(enableDebug: Boolean): DNXslCompiledTransform; overload;

  { static methods } 

    ///<summary>
    ///  将 XSLT 样式表编译为指定的类型。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  位于要编译的样式表开头。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  要应用于样式表。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />
    ///  将应用。
    ///</param>
    ///  <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析样式表模块中引用 <see langword="xsl:import" />
    ///  和 <see langword="xsl:include" />
    ///  元素。
    ///  如果这是 <see langword="null" />
    ///  , ，将不解析外部资源。
    ///</param>
    ///  <param name="debug">
    ///  此值设置为 <see langword="true" />
    ///  启用与调试器调试样式表。
    ///</param>
    ///  <param name="typeBuilder"><see cref="T:System.Reflection.Emit.TypeBuilder" />
    ///  用于样式表编译。
    ///  提供的 TypeBuilder 用于生成结果类型。
    ///</param>
    ///  <param name="scriptAssemblyPath">
    ///  为生成的程序集的基路径 <see langword="msxsl:script" />
    ///  元素。
    ///  如果仅生成了一个脚本程序集，此参数将指定该程序集的路径。
    ///  如果生成了多个脚本程序集，将对文件名追加特殊的后缀，以确保程序集名称的唯一性。
    ///</param>
    ///<returns>
    ///  一个 <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />
    ///  对象，它包含编译器错误和警告指示编译结果。
    ///</returns>
    {class} function CompileToType(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver; debug: Boolean; typeBuilder: DDN.mscorlib.DNTypeBuilder; scriptAssemblyPath: string): DDN.System.DNCompilerErrorCollection;

  end;

  ///<summary>
  ///  使用 XSLT 样式表转换 XML 数据。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XslCompiledTransform')]
  DNXslCompiledTransform = interface(DDN.mscorlib.DNObject)
  ['{EE5E8118-D533-33D7-84AE-F1AB3D9651EB}']
  { getters & setters } 

    function get_OutputSettings: DNXmlWriterSettings;
    function get_TemporaryFiles: DDN.System.DNTempFileCollection;

  { methods } 

    ///<summary>
    ///  编译 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  解析任何 XSLT import 或 include 的元素和 XSLT 设置决定了样式表的权限。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  包含样式表。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  要应用于样式表。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />
    ///  应用设置。
    ///</param>
    ///  <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT 中引用的所有样式表 import 和 include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception>
    procedure Load(stylesheet: DNXmlReader; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    ///<summary>
    ///  编译 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  解析任何 XSLT import 或 include 元素和 XSLT 设置决定了样式表的权限。
    ///</summary>
    ///  <param name="stylesheet">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含样式表。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  要应用于样式表。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />
    ///  应用设置。
    ///</param>
    ///  <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT 中引用的所有样式表 import 和 include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception>
    procedure Load(stylesheet: DNIXPathNavigable; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    ///<summary>
    ///  加载和编译 URI 指定的 XSLT 样式表。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  解析任何 XSLT import 或 include 元素和 XSLT 设置决定了样式表的权限。
    ///</summary>
    ///  <param name="stylesheetUri">
    ///  样式表的 URI。
    ///</param>
    ///  <param name="settings"><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  要应用于样式表。
    ///  如果这是 <see langword="null" />
    ///  , 、 <see cref="P:System.Xml.Xsl.XsltSettings.Default" />
    ///  应用设置。
    ///</param>
    ///  <param name="stylesheetResolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析样式表 URI 和 XSLT 中引用的所有样式表 import 和 include 元素。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" />
    ///  或 <paramref name="stylesheetResolver" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到样式表。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" />
    ///  值包括文件名或找不到的目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载样式表出现分析错误。
    ///</exception>
    procedure Load(stylesheetUri: string; settings: DNXsltSettings; stylesheetResolver: DNXmlResolver); overload;
    ///<summary>
    ///  编译样式表中包含 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  包含样式表。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception>
    procedure Load(stylesheet: DNXmlReader); overload;
    ///<summary>
    ///  编译样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象。
    ///</summary>
    ///  <param name="stylesheet">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含样式表。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheet" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception>
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    ///<summary>
    ///  加载和编译位于指定 URI 的样式表。
    ///</summary>
    ///  <param name="stylesheetUri">
    ///  样式表的 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="stylesheetUri" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  样式表包含一个错误。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到样式表。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="stylesheetUri" />
    ///  值包括文件名或找不到的目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="stylesheetUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="stylesheetUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载样式表出现分析错误。
    ///</exception>
    procedure Load(stylesheetUri: string); overload;
    ///<summary>
    ///  加载的已编译的样式表中使用创建 XSLT 编译器 (xsltc.exe)。
    ///</summary>
    ///  <param name="compiledStylesheet">
    ///  包含已编译样式表的类的名称。
    ///  该名称通常是样式表的名称。
    ///  除非另外指定，否则，xsltc.exe 工具将样式表名称用作类和程序集的名称。
    ///</param>
    procedure Load(compiledStylesheet: DDN.mscorlib.DNType); overload;
    ///<summary>
    ///  从使用编译的样式表加载一个方法 <see langword="XSLTC.exe" />
    ///  实用程序。
    ///</summary>
    ///  <param name="executeMethod">
    ///  一个 <see cref="T:System.Reflection.MethodInfo" />
    ///  对象，表示由编译器生成 <paramref name="execute" />
    ///  的已编译的样式表的方法。
    ///</param>
    ///  <param name="queryData">
    ///  序列化数据的字节数组中的结构 <paramref name="staticData" />
    ///  字段的已编译的样式表生成 <see cref="M:System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)" />
    ///  方法。
    ///</param>
    ///  <param name="earlyBoundTypes">
    ///  存储在由编译器生成的类型的数组 <paramref name="ebTypes" />
    ///  字段的已编译的样式表。
    ///</param>
    procedure Load(executeMethod: DDN.mscorlib.DNMethodInfo; queryData: TArray<Byte>; earlyBoundTypes: TArray<DDN.mscorlib.DNType>); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象，并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象，并将结果输出到流。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在 Microsoft.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" />
    ///  对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XmlReader" />
    ///  包含输入的文档。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNXmlReader; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" />
    ///  对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XmlReader" />
    ///  包含输入的文档。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" />
    ///  对象，并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XmlReader" />
    ///  包含输入的文档。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" />
    ///  对象，并将结果输出到流。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XmlReader" />
    ///  包含输入的文档。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="inputUri">
    ///  输入文档的 URI。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" />
    ///  值包含一个文件名或找不到目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="inputUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="inputUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载的输入的文档分析错误。
    ///</exception>
    procedure Transform(inputUri: string; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="inputUri">
    ///  输入文档的 URI。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputtUri" />
    ///  值包含一个文件名或找不到目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="inputUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错。
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="inputUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载的输入的文档分析错误。
    ///</exception>
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DNXmlWriter); overload;
    ///<summary>
    ///  使用由 URI 指定的输入的文档执行转换，并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="inputUri">
    ///  输入文档的 URI。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" />
    ///  值包含一个文件名或找不到目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="inputUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="inputUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载的输入的文档分析错误。
    ///</exception>
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  使用 URI 指定的输入文档执行转换，然后将结果输出到流。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数。
    ///</summary>
    ///  <param name="inputUri">
    ///  输入文档的 URI。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的流。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" />
    ///  值包含一个文件名或找不到目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="inputUri" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="inputUri" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载的输入的文档分析错误。
    ///</exception>
    procedure Transform(inputUri: string; arguments: DNXsltArgumentList; results: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  使用 URI 指定的输入文档执行转换，然后将结果输出到文件。
    ///</summary>
    ///  <param name="inputUri">
    ///  输入文档的 URI。
    ///</param>
    ///  <param name="resultsFile">
    ///  输出文件的 URI。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="inputUri" />
    ///  或 <paramref name="resultsFile" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception><exception cref="T:System.IO.FileNotFoundException">
    ///  找不到的输入的文档。
    ///</exception><exception cref="T:System.IO.DirectoryNotFoundException"><paramref name="inputUri" />
    ///  或 <paramref name="resultsFile" />
    ///  值包含一个文件名或找不到目录。
    ///</exception><exception cref="T:System.Net.WebException"><paramref name="inputUri" />
    ///  或 <paramref name="resultsFile" />
    ///  值不能为已解决。
    ///  - 或 -
    ///  处理请求时出错
    ///</exception><exception cref="T:System.UriFormatException"><paramref name="inputUri" />
    ///  或 <paramref name="resultsFile" />
    ///  不是有效的 URI。
    ///</exception><exception cref="T:System.Xml.XmlException">
    ///  没有加载的输入的文档分析错误。
    ///</exception>
    procedure Transform(inputUri: string; resultsFile: string); overload;
    ///<summary>
    ///  使用指定的输入的文档执行转换 <see cref="T:System.Xml.XmlReader" />
    ///  对象，并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数，而 XmlResolver 解析 XSLT document() 函数。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XmlReader" />
    ///  包含输入的文档。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 xsl:output 元素，则应创建 <see cref="T:System.Xml.XmlWriter" />
    ///  使用 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  从返回的对象 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  具有正确的输出设置。
    ///</param>
    ///  <param name="documentResolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///</param>
    ///<exception cref="T:System.ArgumentNullException"><paramref name="input" />
    ///  或 <paramref name="results" />
    ///  值是 <see langword="null" />
    ///  。
    ///</exception><exception cref="T:System.Xml.Xsl.XsltException">
    ///  执行 XSLT 转换时出错。
    ///</exception>
    procedure Transform(input: DNXmlReader; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    ///<summary>
    ///  使用 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象指定的输入文档执行转换，然后将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  提供附加的运行时参数，而 <see cref="T:System.Xml.XmlResolver" />
    ///  解析 XSLT <see langword="document()" />
    ///  函数。
    ///</summary>
    ///  <param name="input">
    ///  由 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  对象指定的要转换的文档。
    ///</param>
    ///  <param name="arguments"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  形式的参数列表。
    ///</param>
    ///  <param name="results">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  如果样式表包含 <see langword="xsl:output" />
    ///  元素，则应使用由 <see cref="P:System.Xml.Xsl.XslCompiledTransform.OutputSettings" />
    ///  属性返回的 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象来创建 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///  这样可以确保 <see cref="T:System.Xml.XmlWriter" />
    ///  的输出设置是正确的。
    ///</param>
    ///  <param name="documentResolver">
    ///  用于解析 XSLT <see langword="document()" />
    ///  函数的 <see cref="T:System.Xml.XmlResolver" />
    ///  。
    ///  如果为 <see langword="null" />
    ///  ，则不解析 <see langword="document()" />
    ///  函数。
    ///</param>
    procedure Transform(input: DNIXPathNavigable; arguments: DNXsltArgumentList; results: DNXmlWriter; documentResolver: DNXmlResolver); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，其中包含的输出信息派生自 xsl:output 样式表中的元素。
    ///</summary>
    ///<returns>
    ///  一个只读的 <see cref="T:System.Xml.XmlWriterSettings" />
    ///  对象，其中包含的输出信息派生自 xsl:output 样式表中的元素。
    ///  此值可为 <see langword="null" />
    ///  。
    ///</returns>
    property OutputSettings: DNXmlWriterSettings read get_OutputSettings;
    ///<summary>
    ///  获取 <see cref="T:System.CodeDom.Compiler.TempFileCollection" />
    ///  ，其中包含在成功调用后在磁盘上生成的临时文件 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />
    ///  方法。
    ///</summary>
    ///<returns><see cref="T:System.CodeDom.Compiler.TempFileCollection" />
    ///  ，其中包含在磁盘上生成的临时文件。
    ///  此值是 <see langword="null" />
    ///  如果 <see cref="Overload:System.Xml.Xsl.XslCompiledTransform.Load" />
    ///  方法未成功调用，或者如果尚未启用调试。
    ///</returns>
    property TemporaryFiles: DDN.System.DNTempFileCollection read get_TemporaryFiles;
  end;

  TDNXslCompiledTransform = class(TDNGenericImport<DNXslCompiledTransformClass, DNXslCompiledTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltArgumentListClass = interface(DDN.mscorlib.DNObjectClass)
  ['{0A43B04C-2118-58C2-AB4B-93CA9511484E}']
  { constructors } 

    ///<summary>
    ///  实现的新实例 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  。
    ///</summary>
    {class} function init: DNXsltArgumentList;

  end;

  ///<summary>
  ///  包含数目可变的参数是 XSLT 参数或扩展对象。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltArgumentList')]
  DNXsltArgumentList = interface(DDN.mscorlib.DNObject)
  ['{F8EECF4E-8DCE-3B76-9CB2-AE1C08538E80}']
  { events } 

    procedure add_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);
    procedure remove_XsltMessageEncountered(value: DNXsltMessageEncounteredEventHandler);

  { methods } 

    ///<summary>
    ///  获取与命名空间限定名关联的参数。
    ///</summary>
    ///  <param name="name">
    ///  参数的名称。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  不会检查以确保传入的名称是有效的本地名称;但是，名称不能 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="namespaceUri">
    ///  命名空间 URI 与参数相关联。
    ///</param>
    ///<returns>
    ///  参数对象或 <see langword="null" />
    ///  如果未找到。
    ///</returns>
    function GetParam(name: string; namespaceUri: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  获取与给定的命名空间关联的对象。
    ///</summary>
    ///  <param name="namespaceUri">
    ///  命名空间的对象的 URI。
    ///</param>
    ///<returns>
    ///  命名空间 URI 对象或 <see langword="null" />
    ///  如果未找到。
    ///</returns>
    function GetExtensionObject(namespaceUri: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  添加到参数 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  并将其关联的命名空间限定名称。
    ///</summary>
    ///  <param name="name">
    ///  要与参数关联的名称。
    ///</param>
    ///  <param name="namespaceUri">
    ///  命名空间 URI 与参数关联。
    ///  若要使用的默认命名空间，请指定一个空字符串。
    ///</param>
    ///  <param name="parameter">
    ///  参数值或要添加到列表对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="namespaceUri" />
    ///  是 <see langword="null" />
    ///  或 http://www.w3.org/1999/XSL/Transform。
    ///  <paramref name="name" />
    ///  不是 W3C XML 规范的有效名称。
    ///  <paramref name="namespaceUri" />
    ///  已具有与其关联的参数。
    ///</exception>
    procedure AddParam(name: string; namespaceUri: string; parameter: DDN.mscorlib.DNObject);
    ///<summary>
    ///  添加将新对象传递给 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  并将其与命名空间 URI 相关联。
    ///</summary>
    ///  <param name="namespaceUri">
    ///  命名空间 URI 与对象关联。
    ///  若要使用的默认命名空间，请指定一个空字符串。
    ///</param>
    ///  <param name="extension">
    ///  要添加到列表中的对象。
    ///</param>
    ///<exception cref="T:System.ArgumentException"><paramref name="namespaceUri" />
    ///  是 <see langword="null" />
    ///  或 http://www.w3.org/1999/XSL/Transform
    ///  <paramref name="namespaceUri" />
    ///  已有一个与其关联的扩展对象。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  调用方没有足够的权限来调用此方法。
    ///</exception>
    procedure AddExtensionObject(namespaceUri: string; extension: DDN.mscorlib.DNObject);
    ///<summary>
    ///  删除从参数 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  。
    ///</summary>
    ///  <param name="name">
    ///  要删除的参数的名称。
    ///<see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  不会检查以确保传入的名称是有效的本地名称;但是，名称不能 <see langword="null" />
    ///  。
    ///</param>
    ///  <param name="namespaceUri">
    ///  命名空间 URI 的参数中删除。
    ///</param>
    ///<returns>
    ///  参数对象或 <see langword="null" />
    ///  如果未找到。
    ///</returns>
    function RemoveParam(name: string; namespaceUri: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  对象中删除具有命名空间 URI 从 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  。
    ///</summary>
    ///  <param name="namespaceUri">
    ///  与要删除的对象关联的命名空间 URI。
    ///</param>
    ///<returns>
    ///  与命名空间 URI 的对象或 <see langword="null" />
    ///  如果未找到。
    ///</returns>
    function RemoveExtensionObject(namespaceUri: string): DDN.mscorlib.DNObject;
    ///<summary>
    ///  删除所有参数和扩展对象从 <see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  。
    ///</summary>
    procedure Clear;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  end;

  TDNXsltArgumentList = class(TDNGenericImport<DNXsltArgumentListClass, DNXsltArgumentList>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXslTransformClass = interface(DDN.mscorlib.DNObjectClass)
  ['{97CBD512-0F76-5137-AAA8-2E7AEFC8DCD2}']
  { static getter & setter } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { constructors } 

    ///<summary>
    ///  初始化 <see cref="T:System.Xml.Xsl.XslTransform" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXslTransform;

  { static propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析外部资源时 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />
    ///  调用方法。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  在转换过程中使用。
    ///  如果设置为 <see langword="null" />
    ///  , ，XSLT document() 函数未得到解决。
    ///</returns>
    {class} property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  ///<summary>
  ///  使用转换 XML 数据的可扩展样式表语言转换 (XSLT) 样式表。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XslTransform')]
  DNXslTransform = interface(DDN.mscorlib.DNObject)
  ['{3B026707-8328-336A-BE86-9EA3E93B088C}']
  { getters & setters } 

    procedure set_XmlResolver(value: DNXmlResolver);

  { methods } 

    ///<summary>
    ///  加载由 URL 指定的 XSLT 样式表。
    ///</summary>
    ///  <param name="url">
    ///  指定要加载的 XSLT 样式表的 URL。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  加载的资源不是有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(url: string); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  包含转换的结果。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  包含转换的结果。
    ///</returns>
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList): DNXmlReader; overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含的 XSLT 样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.Xml.XmlReader,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含 XSLT 样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 的元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  加载的资源不是有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含的 XSLT 样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  。
    ///  此方法允许您通过指定证据来限制样式表的权限。
    ///</summary>
    ///  <param name="stylesheet">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含 XSLT 样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />
    ///  方法完成。
    ///</param>
    ///  <param name="evidence"><see cref="T:System.Security.Policy.Evidence" />
    ///  在 XSLT 样式表中的脚本块生成的程序集上设置。
    ///  如果这是 <see langword="null" />
    ///  , ，脚本块并不是所处理，XSLT document() 函数不受支持，并且不允许特权的扩展对象。
    ///  调用方必须具有 <see langword="ControlEvidence" />
    ///  权限，才能提供脚本程序集的证据。
    ///  不完全受信任调用方可以将此参数设置为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  加载的资源不是有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  引用的样式表需要的提供的证据不允许使用的功能。
    ///  调用方尝试提供证据，也没有 <see langword="ControlEvidence" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNIXPathNavigable; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///  此方法允许您通过指定证据来限制样式表的权限。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含要加载的样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 的元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />
    ///  方法完成。
    ///</param>
    ///  <param name="evidence"><see cref="T:System.Security.Policy.Evidence" />
    ///  在 XSLT 样式表中的脚本块生成的程序集上设置。
    ///  如果这是 <see langword="null" />
    ///  , ，脚本块并不是所处理，XSLT document() 函数不受支持，并且不允许特权的扩展对象。
    ///  调用方必须具有 <see langword="ControlEvidence" />
    ///  权限，才能提供脚本程序集的证据。
    ///  不完全受信任调用方可以将此参数设置为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  引用的样式表需要的提供的证据不允许使用的功能。
    ///  调用方尝试提供证据，也没有 <see langword="ControlEvidence" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXmlReader; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///  此方法允许您通过指定证据来限制样式表的权限。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含要加载的样式表。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用来加载引用中的所有样式表 xsl:import 和 xsl:include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，则不解析外部资源。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Load" />
    ///  方法完成。
    ///</param>
    ///  <param name="evidence"><see cref="T:System.Security.Policy.Evidence" />
    ///  在 XSLT 样式表中的脚本块生成的程序集上设置。
    ///  如果这是 <see langword="null" />
    ///  , ，脚本块并不是所处理，XSLT document() 函数不受支持，并且不允许特权的扩展对象。
    ///  调用方必须具有 <see langword="ControlEvidence" />
    ///  权限，才能提供脚本程序集的证据。
    ///  不完全受信任调用方可以将此参数设置为 <see langword="null" />
    ///  。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  引用的样式表需要的提供的证据不允许使用的功能。
    ///  调用方尝试提供证据，也没有 <see langword="ControlEvidence" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXPathNavigator; resolver: DNXmlResolver; evidence: DDN.mscorlib.DNEvidence); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  包含转换的结果。
    ///</returns>
    function Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; resolver: DNXmlResolver): DNXmlReader; overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的流。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  转换的输入文件中的 XML 数据并将结果输出到输出文件。
    ///</summary>
    ///  <param name="inputfile">
    ///  要转换的源文档的 URL。
    ///</param>
    ///  <param name="outputfile">
    ///  输出文件的 URL。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />
    ///  方法完成。
    ///</param>
    procedure Transform(inputfile: string; outputfile: string; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XmlReader" />
    ///  对象，其中包含的 XSLT 样式表。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXmlReader); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含 XSLT 样式表。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  加载的资源不是有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNIXPathNavigable); overload;
    ///<summary>
    ///  加载 XSLT 样式表中包含 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  。
    ///</summary>
    ///  <param name="stylesheet"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  对象，其中包含的 XSLT 样式表。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  当前节点不符合有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入式的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(stylesheet: DNXPathNavigator); overload;
    ///<summary>
    ///  加载由 URL 指定的 XSLT 样式表。
    ///</summary>
    ///  <param name="url">
    ///  指定要加载的 XSLT 样式表的 URL。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  要用于加载该样式表以及中引用的任何样式表 xsl:import 和 xsl:include 元素。
    ///  如果这是 <see langword="null" />
    ///  , ，默认值 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  在无用户凭据用于打开样式表。
    ///  默认值 <see cref="T:System.Xml.XmlUrlResolver" />
    ///  不用于解析样式表中的任何外部资源因此 xsl:import 和 xsl:include 未解决的元素。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Load(System.String,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.Xml.Xsl.XsltCompileException">
    ///  加载的资源不是有效的样式表。
    ///</exception><exception cref="T:System.Security.SecurityException">
    ///  样式表包含嵌入的脚本，并且调用方不具有 <see langword="UnmanagedCode" />
    ///  权限。
    ///</exception>
    procedure Load(url: string; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlReader" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///<returns><see cref="T:System.Xml.XmlReader" />
    ///  包含转换的结果。
    ///</returns>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    function Transform(input: DNXPathNavigator; args: DNXsltArgumentList): DNXmlReader; overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定的参数并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定的参数并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的流。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.Stream,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的流。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///  <param name="resolver"><see cref="T:System.Xml.XmlResolver" />
    ///  用于解析 XSLT document() 函数。
    ///  如果这是 <see langword="null" />
    ///  , 、 document() 函数未得到解决。
    ///<see cref="T:System.Xml.XmlResolver" />
    ///  后不缓存 <see cref="M:System.Xml.Xsl.XslTransform.Transform(System.Xml.XPath.XPathNavigator,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter,System.Xml.XmlResolver)" />
    ///  方法完成。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter; resolver: DNXmlResolver); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="input"><see cref="T:System.Xml.XPath.XPathNavigator" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNXPathNavigator; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.IO.TextWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNTextWriter); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.IO.Stream" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的流。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DDN.mscorlib.DNStream); overload;
    ///<summary>
    ///  中的 XML 数据转换 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  使用指定 <paramref name="args" />
    ///  并将结果输出到 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</summary>
    ///  <param name="input">
    ///  一个对象，实现 <see cref="T:System.Xml.XPath.IXPathNavigable" />
    ///  接口。
    ///  在.NET Framework 中，这可能是 <see cref="T:System.Xml.XmlNode" />
    ///  (通常 <see cref="T:System.Xml.XmlDocument" />
    ///  )，或 <see cref="T:System.Xml.XPath.XPathDocument" />
    ///  包含要转换的数据。
    ///</param>
    ///  <param name="args"><see cref="T:System.Xml.Xsl.XsltArgumentList" />
    ///  包含用作转换输入的命名空间限定参数。
    ///</param>
    ///  <param name="output">
    ///  要输出到的 <see cref="T:System.Xml.XmlWriter" />
    ///  。
    ///</param>
    ///<exception cref="T:System.InvalidOperationException">
    ///  处理 XSLT 转换时出错。
    ///  注意︰ 这是从早期版本的行为的更改。
    ///<see cref="T:System.Xml.Xsl.XsltException" />
    ///  如果使用 Microsoft.NET Framework 1.1 版或更早版本则会引发。
    ///</exception>
    procedure Transform(input: DNIXPathNavigable; args: DNXsltArgumentList; output: DNXmlWriter); overload;
    ///<summary>
    ///  转换的输入文件中的 XML 数据并将结果输出到输出文件。
    ///</summary>
    ///  <param name="inputfile">
    ///  要转换的源文档的 URL。
    ///</param>
    ///  <param name="outputfile">
    ///  输出文件的 URL。
    ///</param>
    procedure Transform(inputfile: string; outputfile: string); overload;
    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  集 <see cref="T:System.Xml.XmlResolver" />
    ///  用于解析外部资源时 <see cref="Overload:System.Xml.Xsl.XslTransform.Transform" />
    ///  调用方法。
    ///</summary>
    ///<returns><see cref="T:System.Xml.XmlResolver" />
    ///  在转换过程中使用。
    ///  如果设置为 <see langword="null" />
    ///  , ，XSLT document() 函数未得到解决。
    ///</returns>
    property XmlResolver: DNXmlResolver write set_XmlResolver;
  end;

  TDNXslTransform = class(TDNGenericImport<DNXslTransformClass, DNXslTransform>) end;

  //-------------namespace: System.Xml.Xsl----------------
  DNXsltSettingsClass = interface(DDN.mscorlib.DNObjectClass)
  ['{6642EC2D-6E5E-5FB5-B919-9D63D7F11804}']
  { static getter & setter } 

    {class} function get_Default: DNXsltSettings;
    {class} function get_TrustedXslt: DNXsltSettings;

  { constructors } 

    ///<summary>
    ///  用默认设置初始化 <see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  类的新实例。
    ///</summary>
    {class} function init: DNXsltSettings; overload;
    ///<summary>
    ///  新实例初始化 <see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  类使用指定的设置。
    ///</summary>
    ///  <param name="enableDocumentFunction"><see langword="true" />
    ///  若要启用对 XSLT document() 函数; 否则为 <see langword="false" />
    ///  。
    ///</param>
    ///  <param name="enableScript"><see langword="true" />
    ///  若要启用对嵌入的脚本块;否则为 <see langword="false" />
    ///  。
    ///</param>
    {class} function init(enableDocumentFunction: Boolean; enableScript: Boolean): DNXsltSettings; overload;

  { static propertys } 

    ///<summary>
    ///  获取 <see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  使用默认设置的对象。
    ///  支持 XSLT document() 函数和嵌入式的脚本块被禁用。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  对象 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" />
    ///  和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" />
    ///  属性设置为 <see langword="false" />
    ///  。
    ///</returns>
    {class} property &Default: DNXsltSettings read get_Default;
    ///<summary>
    ///  获取 <see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  对象，它可以支持 XSLT document() 函数以及嵌入式的脚本块。
    ///</summary>
    ///<returns><see cref="T:System.Xml.Xsl.XsltSettings" />
    ///  对象 <see cref="P:System.Xml.Xsl.XsltSettings.EnableDocumentFunction" />
    ///  和 <see cref="P:System.Xml.Xsl.XsltSettings.EnableScript" />
    ///  属性设置为 <see langword="true" />
    ///  。
    ///</returns>
    {class} property TrustedXslt: DNXsltSettings read get_TrustedXslt;
  end;

  ///<summary>
  ///  指定的 XSLT 功能以支持在 XSLT 样式表的执行过程。
  ///</summary>
  [DNTypeName('System.Xml.Xsl.XsltSettings')]
  DNXsltSettings = interface(DDN.mscorlib.DNObject)
  ['{84B60F08-1D49-339A-8375-25B1572C81E1}']
  { getters & setters } 

    function get_EnableDocumentFunction: Boolean;
    procedure set_EnableDocumentFunction(value: Boolean);
    function get_EnableScript: Boolean;
    procedure set_EnableScript(value: Boolean);

  { methods } 

    function Equals(obj: DDN.mscorlib.DNObject): Boolean;
    function GetHashCode: Int32;
    function GetType: DDN.mscorlib.DNType;
    function ToString: string;

  { propertys } 

    ///<summary>
    ///  获取或设置一个值，该值指示是否启用支持 XSLT document() 函数。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要支持 XSLT document() 函数; 否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableDocumentFunction: Boolean read get_EnableDocumentFunction write set_EnableDocumentFunction;
    ///<summary>
    ///  获取或设置一个值，该值指示是否启用对嵌入式的脚本块的支持。
    ///</summary>
    ///<returns><see langword="true" />
    ///  若要支持脚本块中 XSLT 样式表;否则为 <see langword="false" />
    ///  。
    ///  默认值为 <see langword="false" />
    ///  。
    ///</returns>
    property EnableScript: Boolean read get_EnableScript write set_EnableScript;
  end;

  TDNXsltSettings = class(TDNGenericImport<DNXsltSettingsClass, DNXsltSettings>) end;


implementation


initialization
  LoadAssemblyModule('System.Xml.dll', True);

finalization

end.
